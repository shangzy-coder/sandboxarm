{"repo_name": "bkhezry/ExtraWebView", "file_path": "library/src/main/java/com/github/bkhezry/extrawebview/BaseWebFragment.java", "context": "// Path: library/src/main/java/com/github/bkhezry/extrawebview/widget/CacheableWebView.java\n// public class CacheableWebView extends WebView {\n//     private ArchiveClient mArchiveClient = new ArchiveClient();\n// \n//     public CacheableWebView(Context context) {\n//         this(context, null);\n//     }\n// \n//     public CacheableWebView(Context context, AttributeSet attrs) {\n//         this(context, attrs, 0);\n//     }\n// \n//     public CacheableWebView(Context context, AttributeSet attrs, int defStyleAttr) {\n//         super(context, attrs, defStyleAttr);\n//         init();\n//     }\n// \n//     @Override\n//     public void loadUrl(String url) {\n//         if (TextUtils.isEmpty(url)) {\n//             return;\n//         }\n//         mArchiveClient.lastProgress = 0;\n//         super.loadUrl(url);\n//     }\n// \n//     @Override\n//     public void loadUrl(String url, Map<String, String> additionalHttpHeaders) {\n//         if (TextUtils.isEmpty(url)) {\n//             return;\n//         }\n//         mArchiveClient.lastProgress = 0;\n//         super.loadUrl(url, additionalHttpHeaders);\n//     }\n// \n//     @Override\n//     public void setWebChromeClient(WebChromeClient client) {\n//         if (!(client instanceof ArchiveClient)) {\n//             throw new IllegalArgumentException(\"client should be an instance of \" +\n//                     ArchiveClient.class.getName());\n//         }\n//         mArchiveClient = (ArchiveClient) client;\n//         super.setWebChromeClient(mArchiveClient);\n//     }\n// \n//     private void init() {\n//         enableCache();\n//         setLoadSettings();\n//         setWebViewClient(new WebViewClient());\n//         setWebChromeClient(mArchiveClient);\n//     }\n// \n//     private void enableCache() {\n//         WebSettings webSettings = getSettings();\n//         webSettings.setAppCacheEnabled(true);\n//         webSettings.setAllowFileAccess(true);\n//         webSettings.setAppCachePath(getContext().getApplicationContext()\n//                 .getCacheDir().getAbsolutePath());\n//     }\n// \n// \n//     @SuppressLint(\"SetJavaScriptEnabled\")\n//     private void setLoadSettings() {\n//         WebSettings webSettings = getSettings();\n//         webSettings.setLoadWithOverviewMode(true);\n//         webSettings.setUseWideViewPort(true);\n//         webSettings.setJavaScriptEnabled(true);\n//     }\n// \n//     public static class ArchiveClient extends WebChromeClient {\n//         int lastProgress = 0;\n//         String cacheFileName = null;\n// \n//         @CallSuper\n//         @Override\n//         public void onProgressChanged(WebView view, int newProgress) {\n//             if (view.getSettings().getCacheMode() == WebSettings.LOAD_CACHE_ONLY) {\n//                 return;\n//             }\n//             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT &&\n//                     cacheFileName != null && lastProgress != 100 && newProgress == 100) {\n//                 lastProgress = newProgress;\n//             }\n//         }\n// \n//     }\n// }\n\n", "import_statement": "import android.annotation.SuppressLint;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.graphics.Color;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.view.KeyEvent;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.inputmethod.InputMethodManager;\nimport android.webkit.DownloadListener;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\nimport android.widget.ViewSwitcher;\nimport com.github.bkhezry.extrawebview.widget.CacheableWebView;\nimport androidx.annotation.Nullable;\nimport androidx.core.widget.NestedScrollView;\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\nimport static android.view.View.GONE;\nimport static android.view.View.VISIBLE;", "code": "            }\n        });\n        view.findViewById(R.id.button_exit).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(\n                        new Intent(BaseWebFragment.ACTION_FULLSCREEN)\n                                .putExtra(EXTRA_FULLSCREEN, false));\n            }\n        });\n        mButtonNext.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                mWebView.findNext(true);\n            }\n        });\n        mEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n                findInPage();\n                return true;\n            }\n        });\n    }\n\n    private void setUpWebView(final View view) {\n        mProgressBar = (ProgressBar) view.findViewById(R.id.progress);\n        mProgressBar.setProgress(DEFAULT_PROGRESS);\n        mWebView.setBackgroundColor(Color.TRANSPARENT);\n        mWebView.setWebViewClient(new WebViewClient());", "prompt": "// Path: library/src/main/java/com/github/bkhezry/extrawebview/widget/CacheableWebView.java\n// public class CacheableWebView extends WebView {\n//     private ArchiveClient mArchiveClient = new ArchiveClient();\n// \n//     public CacheableWebView(Context context) {\n//         this(context, null);\n//     }\n// \n//     public CacheableWebView(Context context, AttributeSet attrs) {\n//         this(context, attrs, 0);\n//     }\n// \n//     public CacheableWebView(Context context, AttributeSet attrs, int defStyleAttr) {\n//         super(context, attrs, defStyleAttr);\n//         init();\n//     }\n// \n//     @Override\n//     public void loadUrl(String url) {\n//         if (TextUtils.isEmpty(url)) {\n//             return;\n//         }\n//         mArchiveClient.lastProgress = 0;\n//         super.loadUrl(url);\n//     }\n// \n//     @Override\n//     public void loadUrl(String url, Map<String, String> additionalHttpHeaders) {\n//         if (TextUtils.isEmpty(url)) {\n//             return;\n//         }\n//         mArchiveClient.lastProgress = 0;\n//         super.loadUrl(url, additionalHttpHeaders);\n//     }\n// \n//     @Override\n//     public void setWebChromeClient(WebChromeClient client) {\n//         if (!(client instanceof ArchiveClient)) {\n//             throw new IllegalArgumentException(\"client should be an instance of \" +\n//                     ArchiveClient.class.getName());\n//         }\n//         mArchiveClient = (ArchiveClient) client;\n//         super.setWebChromeClient(mArchiveClient);\n//     }\n// \n//     private void init() {\n//         enableCache();\n//         setLoadSettings();\n//         setWebViewClient(new WebViewClient());\n//         setWebChromeClient(mArchiveClient);\n//     }\n// \n//     private void enableCache() {\n//         WebSettings webSettings = getSettings();\n//         webSettings.setAppCacheEnabled(true);\n//         webSettings.setAllowFileAccess(true);\n//         webSettings.setAppCachePath(getContext().getApplicationContext()\n//                 .getCacheDir().getAbsolutePath());\n//     }\n// \n// \n//     @SuppressLint(\"SetJavaScriptEnabled\")\n//     private void setLoadSettings() {\n//         WebSettings webSettings = getSettings();\n//         webSettings.setLoadWithOverviewMode(true);\n//         webSettings.setUseWideViewPort(true);\n//         webSettings.setJavaScriptEnabled(true);\n//     }\n// \n//     public static class ArchiveClient extends WebChromeClient {\n//         int lastProgress = 0;\n//         String cacheFileName = null;\n// \n//         @CallSuper\n//         @Override\n//         public void onProgressChanged(WebView view, int newProgress) {\n//             if (view.getSettings().getCacheMode() == WebSettings.LOAD_CACHE_ONLY) {\n//                 return;\n//             }\n//             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT &&\n//                     cacheFileName != null && lastProgress != 100 && newProgress == 100) {\n//                 lastProgress = newProgress;\n//             }\n//         }\n// \n//     }\n// }\n\n\n// Path: library/src/main/java/com/github/bkhezry/extrawebview/BaseWebFragment.java\nimport android.annotation.SuppressLint;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.graphics.Color;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.view.KeyEvent;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.inputmethod.InputMethodManager;\nimport android.webkit.DownloadListener;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\nimport android.widget.ViewSwitcher;\nimport com.github.bkhezry.extrawebview.widget.CacheableWebView;\nimport androidx.annotation.Nullable;\nimport androidx.core.widget.NestedScrollView;\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\nimport static android.view.View.GONE;\nimport static android.view.View.VISIBLE;\n\n            }\n        });\n        view.findViewById(R.id.button_exit).setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(\n                        new Intent(BaseWebFragment.ACTION_FULLSCREEN)\n                                .putExtra(EXTRA_FULLSCREEN, false));\n            }\n        });\n        mButtonNext.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                mWebView.findNext(true);\n            }\n        });\n        mEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {\n                findInPage();\n                return true;\n            }\n        });\n    }\n\n    private void setUpWebView(final View view) {\n        mProgressBar = (ProgressBar) view.findViewById(R.id.progress);\n        mProgressBar.setProgress(DEFAULT_PROGRESS);\n        mWebView.setBackgroundColor(Color.TRANSPARENT);\n        mWebView.setWebViewClient(new WebViewClient());", "next_line": "        mWebView.setWebChromeClient(new CacheableWebView.ArchiveClient() {", "id": 0, "__internal_uuid__": "b4335ce9-654a-4ca2-8d37-2ef9006f5879"}
{"repo_name": "himanshu-soni/QuantumFlux", "file_path": "quantum-flux/src/main/java/me/himanshusoni/quantumflux/model/query/SQLSegment.java", "context": "// Path: quantum-flux/src/main/java/me/himanshusoni/quantumflux/model/map/SqlColumnMappingFactory.java\n// public class SqlColumnMappingFactory {\n// \n//     private final List<SqlColumnMapping> mColumnMappings;\n// \n//     public SqlColumnMappingFactory() {\n//         mColumnMappings = new ArrayList<SqlColumnMapping>();\n//         mColumnMappings.add(new BigDecimalType());\n//         mColumnMappings.add(new BooleanType());\n//         mColumnMappings.add(new CalendarType());\n//         mColumnMappings.add(new DateType());\n//         mColumnMappings.add(new DoubleType());\n//         mColumnMappings.add(new FloatType());\n//         mColumnMappings.add(new IntegerType());\n//         mColumnMappings.add(new LongType());\n//         mColumnMappings.add(new ShortType());\n//         mColumnMappings.add(new StringType());\n//         mColumnMappings.add(new UUIDType());\n//     }\n// \n//     public void addColumnMapping(SqlColumnMapping mapping) {\n//         mColumnMappings.add(mapping);\n//     }\n// \n//     public SqlColumnMapping findColumnMapping(Class<?> fieldType) {\n//         Class<?> fieldTypeWrapped = wrapPrimitives(fieldType);\n// \n//         for (SqlColumnMapping columnMapping : mColumnMappings) {\n//             Class<?> columnType = columnMapping.getJavaType();\n//             if (columnType.equals(fieldTypeWrapped) || columnType.isAssignableFrom(fieldType))\n//                 return columnMapping;\n//         }\n// \n//         throw new QuantumFluxException(\"No valid SQL mapping found for type \" + fieldType);\n//     }\n// \n//     private Class<?> wrapPrimitives(Class fieldType) {\n// \n//         if (!fieldType.isPrimitive()) return fieldType;\n// \n//         if (long.class.equals(fieldType)) return Long.class;\n//         if (int.class.equals(fieldType)) return Integer.class;\n//         if (double.class.equals(fieldType)) return Double.class;\n//         if (float.class.equals(fieldType)) return Float.class;\n//         if (short.class.equals(fieldType)) return Short.class;\n//         if (boolean.class.equals(fieldType)) return Boolean.class;\n//         if (byte.class.equals(fieldType)) return Byte.class;\n//         if (void.class.equals(fieldType)) return Void.class;\n//         if (char.class.equals(fieldType)) return Character.class;\n// \n//         throw new QuantumFluxException(\"No primitive type registered for type \" + fieldType);\n//     }\n// }\n// \n// Path: quantum-flux/src/main/java/me/himanshusoni/quantumflux/model/util/QuantumFluxException.java\n// public class QuantumFluxException extends RuntimeException {\n// \n//     public QuantumFluxException() {\n//     }\n// \n//     public QuantumFluxException(String detailMessage) {\n//         super(detailMessage);\n//     }\n// \n//     public QuantumFluxException(String detailMessage, Throwable throwable) {\n//         super(detailMessage, throwable);\n//     }\n// \n//     public QuantumFluxException(Throwable throwable) {\n//         super(throwable);\n//     }\n// }\n\n", "import_statement": "import android.text.TextUtils;\nimport me.himanshusoni.quantumflux.model.map.SqlColumnMappingFactory;\nimport me.himanshusoni.quantumflux.model.util.QuantumFluxException;", "code": "package me.himanshusoni.quantumflux.model.query;\n\n\n\npublic class SQLSegment implements DataFilterClause {\n\n    private final String mSqlSegment;\n    private final Object[] mArgs;\n\n    public SQLSegment(String sqlSegment, Object... args) {\n        this.mSqlSegment = sqlSegment;\n        this.mArgs = args;\n    }\n\n    @Override\n    public QueryBuilder buildWhereClause(SqlColumnMappingFactory columnMappingFactory) {\n        for (int i = 0; i < mArgs.length; i++) {\n            Object argObject = mArgs[i];\n            mArgs[i] = columnMappingFactory.findColumnMapping(argObject.getClass()).toSqlType(argObject);\n        }\n        return new QueryBuilder(mSqlSegment, mArgs);\n    }\n\n\n    @Override\n    public String getWhereClause() {\n        return mSqlSegment;\n    }\n\n    @Override\n    public SQLSegment addClause(DataFilterClause clause, DataFilterConjunction conjunction) {", "prompt": "// Path: quantum-flux/src/main/java/me/himanshusoni/quantumflux/model/map/SqlColumnMappingFactory.java\n// public class SqlColumnMappingFactory {\n// \n//     private final List<SqlColumnMapping> mColumnMappings;\n// \n//     public SqlColumnMappingFactory() {\n//         mColumnMappings = new ArrayList<SqlColumnMapping>();\n//         mColumnMappings.add(new BigDecimalType());\n//         mColumnMappings.add(new BooleanType());\n//         mColumnMappings.add(new CalendarType());\n//         mColumnMappings.add(new DateType());\n//         mColumnMappings.add(new DoubleType());\n//         mColumnMappings.add(new FloatType());\n//         mColumnMappings.add(new IntegerType());\n//         mColumnMappings.add(new LongType());\n//         mColumnMappings.add(new ShortType());\n//         mColumnMappings.add(new StringType());\n//         mColumnMappings.add(new UUIDType());\n//     }\n// \n//     public void addColumnMapping(SqlColumnMapping mapping) {\n//         mColumnMappings.add(mapping);\n//     }\n// \n//     public SqlColumnMapping findColumnMapping(Class<?> fieldType) {\n//         Class<?> fieldTypeWrapped = wrapPrimitives(fieldType);\n// \n//         for (SqlColumnMapping columnMapping : mColumnMappings) {\n//             Class<?> columnType = columnMapping.getJavaType();\n//             if (columnType.equals(fieldTypeWrapped) || columnType.isAssignableFrom(fieldType))\n//                 return columnMapping;\n//         }\n// \n//         throw new QuantumFluxException(\"No valid SQL mapping found for type \" + fieldType);\n//     }\n// \n//     private Class<?> wrapPrimitives(Class fieldType) {\n// \n//         if (!fieldType.isPrimitive()) return fieldType;\n// \n//         if (long.class.equals(fieldType)) return Long.class;\n//         if (int.class.equals(fieldType)) return Integer.class;\n//         if (double.class.equals(fieldType)) return Double.class;\n//         if (float.class.equals(fieldType)) return Float.class;\n//         if (short.class.equals(fieldType)) return Short.class;\n//         if (boolean.class.equals(fieldType)) return Boolean.class;\n//         if (byte.class.equals(fieldType)) return Byte.class;\n//         if (void.class.equals(fieldType)) return Void.class;\n//         if (char.class.equals(fieldType)) return Character.class;\n// \n//         throw new QuantumFluxException(\"No primitive type registered for type \" + fieldType);\n//     }\n// }\n// \n// Path: quantum-flux/src/main/java/me/himanshusoni/quantumflux/model/util/QuantumFluxException.java\n// public class QuantumFluxException extends RuntimeException {\n// \n//     public QuantumFluxException() {\n//     }\n// \n//     public QuantumFluxException(String detailMessage) {\n//         super(detailMessage);\n//     }\n// \n//     public QuantumFluxException(String detailMessage, Throwable throwable) {\n//         super(detailMessage, throwable);\n//     }\n// \n//     public QuantumFluxException(Throwable throwable) {\n//         super(throwable);\n//     }\n// }\n\n\n// Path: quantum-flux/src/main/java/me/himanshusoni/quantumflux/model/query/SQLSegment.java\nimport android.text.TextUtils;\nimport me.himanshusoni.quantumflux.model.map.SqlColumnMappingFactory;\nimport me.himanshusoni.quantumflux.model.util.QuantumFluxException;\n\npackage me.himanshusoni.quantumflux.model.query;\n\n\n\npublic class SQLSegment implements DataFilterClause {\n\n    private final String mSqlSegment;\n    private final Object[] mArgs;\n\n    public SQLSegment(String sqlSegment, Object... args) {\n        this.mSqlSegment = sqlSegment;\n        this.mArgs = args;\n    }\n\n    @Override\n    public QueryBuilder buildWhereClause(SqlColumnMappingFactory columnMappingFactory) {\n        for (int i = 0; i < mArgs.length; i++) {\n            Object argObject = mArgs[i];\n            mArgs[i] = columnMappingFactory.findColumnMapping(argObject.getClass()).toSqlType(argObject);\n        }\n        return new QueryBuilder(mSqlSegment, mArgs);\n    }\n\n\n    @Override\n    public String getWhereClause() {\n        return mSqlSegment;\n    }\n\n    @Override\n    public SQLSegment addClause(DataFilterClause clause, DataFilterConjunction conjunction) {", "next_line": "        throw new QuantumFluxException(\"Clauses cannot be added to a data filter criterion\");", "id": 1, "__internal_uuid__": "4f48edd0-ddee-4995-9b04-0a21efbdf32e"}
{"repo_name": "almondtools/xrayinterface", "file_path": "src/main/java/net/amygdalum/xrayinterface/StaticGetter.java", "context": "// Path: src/main/java/net/amygdalum/xrayinterface/Converter.java\n// public static Object convertResult(Class<?> targetType, Class<?> methodType, Object result) throws NoSuchMethodException {\n// \tif (targetType.isAssignableFrom(methodType)) {\n// \t\treturn result;\n// \t} else if (result == null) {\n// \t\treturn null;\n// \t} else {\n// \t\treturn XRayInterface.xray(result).to(targetType);\n// \t}\n// }\n\n", "import_statement": "import static net.amygdalum.xrayinterface.Converter.convertResult;\nimport java.lang.invoke.MethodHandle;", "code": "\t */\n\tpublic StaticGetter(String fieldName, MethodHandle getter, Class<?> target) {\n\t\tthis(fieldName, getter);\n\t\tthis.target = target;\n\t}\n\t\n\tpublic String getFieldName() {\n\t\treturn fieldName;\n\t}\n\n\tpublic Class<?> getResultType() {\n\t\treturn getter.type().returnType();\n\t}\n\n\tpublic Class<?> getTarget() {\n\t\treturn target;\n\t}\n\t\n\t@Override\n\tpublic Object invoke(Object object, Object... args) throws Throwable {\n\t\tif (args != null && args.length != 0) {\n\t\t\tthrow new IllegalArgumentException(\"getters can only be invoked with no argument, was \" + args.length + \" arguments\");\n\t\t}\n\t\treturn r(getter.invoke());\n\t}\n\n\tprivate Object r(Object result) throws NoSuchMethodException {\n\t\tif (target == null) {\n\t\t\treturn result;\n\t\t}", "prompt": "// Path: src/main/java/net/amygdalum/xrayinterface/Converter.java\n// public static Object convertResult(Class<?> targetType, Class<?> methodType, Object result) throws NoSuchMethodException {\n// \tif (targetType.isAssignableFrom(methodType)) {\n// \t\treturn result;\n// \t} else if (result == null) {\n// \t\treturn null;\n// \t} else {\n// \t\treturn XRayInterface.xray(result).to(targetType);\n// \t}\n// }\n\n\n// Path: src/main/java/net/amygdalum/xrayinterface/StaticGetter.java\nimport static net.amygdalum.xrayinterface.Converter.convertResult;\nimport java.lang.invoke.MethodHandle;\n\n\t */\n\tpublic StaticGetter(String fieldName, MethodHandle getter, Class<?> target) {\n\t\tthis(fieldName, getter);\n\t\tthis.target = target;\n\t}\n\t\n\tpublic String getFieldName() {\n\t\treturn fieldName;\n\t}\n\n\tpublic Class<?> getResultType() {\n\t\treturn getter.type().returnType();\n\t}\n\n\tpublic Class<?> getTarget() {\n\t\treturn target;\n\t}\n\t\n\t@Override\n\tpublic Object invoke(Object object, Object... args) throws Throwable {\n\t\tif (args != null && args.length != 0) {\n\t\t\tthrow new IllegalArgumentException(\"getters can only be invoked with no argument, was \" + args.length + \" arguments\");\n\t\t}\n\t\treturn r(getter.invoke());\n\t}\n\n\tprivate Object r(Object result) throws NoSuchMethodException {\n\t\tif (target == null) {\n\t\t\treturn result;\n\t\t}", "next_line": "\t\treturn convertResult(target, getter.type().returnType(), result);", "id": 2, "__internal_uuid__": "b1e1c15e-ab95-446b-8b6f-1c420088b4de"}
{"repo_name": "MongoLink/mongolink", "file_path": "mongolink/src/test/java/org/mongolink/domain/mapper/TestsPropertyInterceptor.java", "context": "// Path: mongolink/src/test/java/org/mongolink/test/entity/FakeAggregate.java\n// public class FakeAggregate {\n// \n//     FakeAggregate() {\n// \n//     }\n// \n//     public FakeAggregate(String value) {\n//         this.value = value;\n//     }\n// \n//     public void setId(String id) {\n//         this.id = id;\n//     }\n// \n//     public String getId() {\n//         return id;\n//     }\n// \n//     public String getValue() {\n//         return value;\n//     }\n// \n//     public List<Comment> getComments() {\n//         return comments;\n//     }\n// \n//     public void addComment(String comment) {\n//         comments.add(new Comment(comment));\n//     }\n// \n//     public void setValue(String value) {\n//         this.value = value;\n//     }\n// \n//     public int getIndex() {\n//         return index;\n//     }\n// \n//     public void setIndex(int index) {\n//         this.index = index;\n//     }\n// \n//     public FakeAggregate getOtherEntity() {\n//         return otherEntity;\n//     }\n// \n//     public Comment getComment() {\n//         return comment;\n//     }\n// \n//     public void setComment(Comment comment) {\n//         this.comment = comment;\n//     }\n// \n//     private int index;\n//     private String id;\n//     private String value;\n//     private final List<Comment> comments = Lists.newArrayList();\n//     private FakeAggregate otherEntity;\n//     private Comment comment;\n// }\n// \n// Path: mongolink/src/main/java/org/mongolink/utils/FieldContainer.java\n// public class FieldContainer {\n// \n//     public FieldContainer(Method method) {\n//         this(findField(method));\n//     }\n// \n//     public FieldContainer(Field field) {\n//         this.field = field;\n//         this.field.setAccessible(true);\n//     }\n// \n// \n//     private static Field findField(Method method) {\n//         String fieldName = StringUtils.uncapitalize(method.getName().substring(prefixLength(method), method.getName().length()));\n//         return Fields.find(method.getDeclaringClass(), fieldName);\n//     }\n// \n//     private static int prefixLength(Method method) {\n//         if (method.getName().startsWith(\"is\")) {\n//             return 2;\n//         }\n//         return 3;\n//     }\n// \n//     public String name() {\n//         return field.getName();\n//     }\n// \n//     @Override\n//     public boolean equals(Object o) {\n//         if (o == null) {\n//             return false;\n//         }\n//         if (!(o instanceof FieldContainer)) {\n//             return false;\n//         }\n//         FieldContainer other = (FieldContainer) o;\n//         return Objects.equal(field, other.field);\n//     }\n// \n//     public Object value(final Object instance) {\n//         try {\n//             return Fields.getValue(instance, field);\n//         } catch (Exception e) {\n//             throw new MongoLinkError(\"Invocation exception : \" + toString(), e);\n//         }\n//     }\n// \n//     public void setValueIn(Object value, Object instance) {\n//         if(value == null) {\n//             LOGGER.warn(\"Property value was null : {}\", this);\n//             return;\n//         }\n//         Fields.setValue(field, instance, value);\n//     }\n// \n//     public Class<?> getReturnType() {\n//         return field.getType();\n//     }\n// \n//     @Override\n//     public int hashCode() {\n//         return Objects.hashCode(field);\n//     }\n// \n//     @Override\n//     public String toString() {\n//         return MoreObjects.toStringHelper(\"Property\")\n//                 .add(\"class\", field.getDeclaringClass().getName())\n//                 .add(\"field\", name())\n//                 .toString();\n//     }\n// \n//     private static final Logger LOGGER = LoggerFactory.getLogger(FieldContainer.class);\n//     private final Field field;\n// }\n\n", "import_statement": "import org.junit.Test;\nimport org.mongolink.test.entity.FakeAggregate;\nimport org.mongolink.utils.FieldContainer;\nimport java.lang.reflect.Method;\nimport static org.mockito.Mockito.*;", "code": "/*\n * MongoLink, Object Document Mapper for Java and MongoDB\n *\n * Copyright (c) 2012, Arpinum or third-party contributors as\n * indicated by the @author tags\n *\n * MongoLink is free software: you can redistribute it and/or modify\n * it under the terms of the Lesser GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * MongoLink is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * Lesser GNU General Public License for more details.\n *\n * You should have received a copy of the Lesser GNU General Public License\n * along with MongoLink.  If not, see <http://www.gnu.org/licenses/>. \n *\n */\n\npackage org.mongolink.domain.mapper;\n\n\n\n\npublic class TestsPropertyInterceptor {\n\n    @Test\n    public void setLastMethodToClassMap() throws Throwable {\n        AggregateMap aggregateMap = mock(AggregateMap.class);\n        PropertyInterceptor interceptor = new PropertyInterceptor(aggregateMap);\n        Method method = FakeAggregate.class.getDeclaredMethod(\"getId\");\n\n        interceptor.intercept(new Object(), method, null, null);\n", "prompt": "// Path: mongolink/src/test/java/org/mongolink/test/entity/FakeAggregate.java\n// public class FakeAggregate {\n// \n//     FakeAggregate() {\n// \n//     }\n// \n//     public FakeAggregate(String value) {\n//         this.value = value;\n//     }\n// \n//     public void setId(String id) {\n//         this.id = id;\n//     }\n// \n//     public String getId() {\n//         return id;\n//     }\n// \n//     public String getValue() {\n//         return value;\n//     }\n// \n//     public List<Comment> getComments() {\n//         return comments;\n//     }\n// \n//     public void addComment(String comment) {\n//         comments.add(new Comment(comment));\n//     }\n// \n//     public void setValue(String value) {\n//         this.value = value;\n//     }\n// \n//     public int getIndex() {\n//         return index;\n//     }\n// \n//     public void setIndex(int index) {\n//         this.index = index;\n//     }\n// \n//     public FakeAggregate getOtherEntity() {\n//         return otherEntity;\n//     }\n// \n//     public Comment getComment() {\n//         return comment;\n//     }\n// \n//     public void setComment(Comment comment) {\n//         this.comment = comment;\n//     }\n// \n//     private int index;\n//     private String id;\n//     private String value;\n//     private final List<Comment> comments = Lists.newArrayList();\n//     private FakeAggregate otherEntity;\n//     private Comment comment;\n// }\n// \n// Path: mongolink/src/main/java/org/mongolink/utils/FieldContainer.java\n// public class FieldContainer {\n// \n//     public FieldContainer(Method method) {\n//         this(findField(method));\n//     }\n// \n//     public FieldContainer(Field field) {\n//         this.field = field;\n//         this.field.setAccessible(true);\n//     }\n// \n// \n//     private static Field findField(Method method) {\n//         String fieldName = StringUtils.uncapitalize(method.getName().substring(prefixLength(method), method.getName().length()));\n//         return Fields.find(method.getDeclaringClass(), fieldName);\n//     }\n// \n//     private static int prefixLength(Method method) {\n//         if (method.getName().startsWith(\"is\")) {\n//             return 2;\n//         }\n//         return 3;\n//     }\n// \n//     public String name() {\n//         return field.getName();\n//     }\n// \n//     @Override\n//     public boolean equals(Object o) {\n//         if (o == null) {\n//             return false;\n//         }\n//         if (!(o instanceof FieldContainer)) {\n//             return false;\n//         }\n//         FieldContainer other = (FieldContainer) o;\n//         return Objects.equal(field, other.field);\n//     }\n// \n//     public Object value(final Object instance) {\n//         try {\n//             return Fields.getValue(instance, field);\n//         } catch (Exception e) {\n//             throw new MongoLinkError(\"Invocation exception : \" + toString(), e);\n//         }\n//     }\n// \n//     public void setValueIn(Object value, Object instance) {\n//         if(value == null) {\n//             LOGGER.warn(\"Property value was null : {}\", this);\n//             return;\n//         }\n//         Fields.setValue(field, instance, value);\n//     }\n// \n//     public Class<?> getReturnType() {\n//         return field.getType();\n//     }\n// \n//     @Override\n//     public int hashCode() {\n//         return Objects.hashCode(field);\n//     }\n// \n//     @Override\n//     public String toString() {\n//         return MoreObjects.toStringHelper(\"Property\")\n//                 .add(\"class\", field.getDeclaringClass().getName())\n//                 .add(\"field\", name())\n//                 .toString();\n//     }\n// \n//     private static final Logger LOGGER = LoggerFactory.getLogger(FieldContainer.class);\n//     private final Field field;\n// }\n\n\n// Path: mongolink/src/test/java/org/mongolink/domain/mapper/TestsPropertyInterceptor.java\nimport org.junit.Test;\nimport org.mongolink.test.entity.FakeAggregate;\nimport org.mongolink.utils.FieldContainer;\nimport java.lang.reflect.Method;\nimport static org.mockito.Mockito.*;\n\n/*\n * MongoLink, Object Document Mapper for Java and MongoDB\n *\n * Copyright (c) 2012, Arpinum or third-party contributors as\n * indicated by the @author tags\n *\n * MongoLink is free software: you can redistribute it and/or modify\n * it under the terms of the Lesser GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * MongoLink is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * Lesser GNU General Public License for more details.\n *\n * You should have received a copy of the Lesser GNU General Public License\n * along with MongoLink.  If not, see <http://www.gnu.org/licenses/>. \n *\n */\n\npackage org.mongolink.domain.mapper;\n\n\n\n\npublic class TestsPropertyInterceptor {\n\n    @Test\n    public void setLastMethodToClassMap() throws Throwable {\n        AggregateMap aggregateMap = mock(AggregateMap.class);\n        PropertyInterceptor interceptor = new PropertyInterceptor(aggregateMap);\n        Method method = FakeAggregate.class.getDeclaredMethod(\"getId\");\n\n        interceptor.intercept(new Object(), method, null, null);\n", "next_line": "        verify(aggregateMap).setLastMethod(new FieldContainer(method));", "id": 3, "__internal_uuid__": "d3299629-44cc-4879-9331-0df9503a964b"}
{"repo_name": "xbuf/jme3_xbuf", "file_path": "jme3_xbuf_remote/src/main/java/jme3_ext_remote_editor/RemoteCtx.java", "context": "// Path: jme3_xbuf_loader/src/main/java/jme3_ext_xbuf/XbufContext.java\n// @SuppressWarnings(\"unchecked\")\n// public class XbufContext {\n// //\tpublic Logger log=LoggerFactory.getLogger(\"Xbuf\");\n// \tprivate Map<String,Object> storage=new HashMap<String,Object> ();\n// \tprivate Map<String,List<String>> links=new HashMap<String,List<String>>();\n// \tprivate XbufKey settings=new XbufKey(\"default\");\n// \n// \tpublic synchronized void setSettings(XbufKey s){\n// \t\tsettings=s;\n// \t}\n// \n// \tpublic synchronized XbufKey getSettings(){\n// \t\treturn settings;\n// \t}\n// \n// \tpublic synchronized <T> T get(String ref){\n// \t\treturn (T)storage.get(ref);\n// \t}\n// \n// \n// \tpublic synchronized String idOf(Object val){\n// \t\tfor(Entry<String,Object> entry:storage.entrySet()){\n// \t\t\tif(entry.getValue()==val)return entry.getKey();\n// \t\t}\n// \t\treturn null;\n// \t}\n// \n// \tpublic synchronized <T> T put(String ref,Object val){\n// \t\tT t=(T)storage.put(ref,val);\n// \t\treturn t;\n// \t}\n// \n// \tpublic synchronized <T> T put(String ref,Object val,String link_to){\n// \t\tT out=put(ref,val);\n// \t\tlinkedRefs(link_to).add(ref);\n// \t\treturn out;\n// \t}\n// \n// \n// \tpublic synchronized <T> T removeWithLinks(String ref){\n// \t\tList<String> ls=links.get(ref);\n// \t\tT out= (T)storage.remove(ref);\n// \t\tfor(String l:ls)remove(l);\n// \t\treturn out;\n// \t}\n// \n// \tpublic synchronized <T> T remove(String ref){\n// \t\tlinks.remove(ref);\n// \t\treturn (T) storage.remove(ref);\n// \t}\n// \n// \tpublic synchronized List<String> linkedRefs(String ref) {\n// \t\tList<String> linked=links.get(ref);\n// \t\tif(linked==null){\n// \t\t\tlinked=new LinkedList<String>();\n// \t\t\tlinks.put(ref,linked);\n// \t\t}\n// \t\treturn linked;\n// \t}\n// \n// \n// \tpublic synchronized String toString(){\n// \t\tStringBuilder sb=new StringBuilder();\n// \t\tLinkedList<String> ignore=new LinkedList<String>();\n// \t\tstorage.forEach((k,v)->{\n// \t\t\tif(!ignore.contains(k)){\n// \t\t\t\tsb.append(\"$ \").append(k).append(\" = \").append(v.getClass()).append(\"(\").append(v.hashCode()).append(\")\\n\");\n// \t\t\t\tList<String> linked =linkedRefs(k);\n// \t\t\t\tfor(String l:linked){\n// \t\t\t\t\tv=get(l);\n// \t\t\t\t\tsb.append(\"$ ----| \").append(l).append(\" = \").append(v.getClass()).append(\"(\");\n// \t\t\t\t\ttry{\n// \t\t\t\t\t\tsb.append(v.toString());\n// \t\t\t\t\t}catch(Throwable t){\n// \t\t\t\t\t\tsb.append(v.hashCode());\n// \t\t\t\t\t}\n// \t\t\t\t\tsb.append(\")\\n\");\n// \t\t\t\t}\n// \t\t\t\tignore.addAll(linked);\n// \t\t\t}\n// \t\t});\n// \t\treturn sb.toString();\n// \t}\n// \n// }\n// \n// Path: jme3_xbuf_loader/src/main/java/jme3_ext_xbuf/XbufKey.java\n// @Slf4j\n// public class XbufKey extends PhysicsLoaderModelKey<XbufKey> implements XbufPhysicsLoaderSettings{\n// \n// \tpublic XbufKey(){}\n// \n// \tpublic XbufKey(String s){\n// \t\tsuper(s);\n// \t}\n// \n// \tprotected boolean useLightControls = false;\n// \tpublic XbufKey useLightControls(boolean x){\n// \t\tuseLightControls=x;\n// \t\treturn this;\n// \t}\n// \n// \t@Override\n// \tpublic XbufKey usePhysics(PhysicsLoader<?,?> l){\n// \t\tif(l!=null&&!(l instanceof BulletPhysicsLoader)){\n// \t\t\tlog.warn(\"Cannot use {}, physicsloader not supported\",l.getClass());\n// \t\t\treturn this;\n// \t\t}\n// \t\tsuper.usePhysics(l);\n// \t\treturn this;\n// \t}\n// \n// \n// \tpublic boolean useLightControls(){\n// \t\treturn useLightControls;\n// \t}\n// \n// \tprivate final static Class<?>[] supportedConstraints={\n// \t\t\tGenericConstraint.class\n// \t};\n// \n// \t@Override\n// \tpublic Class<?>[] getSupportedConstraints() {\n// \t\treturn supportedConstraints;\n// \t}\n// \n// }\n\n", "import_statement": "import com.jme3.renderer.Camera;\nimport com.jme3.scene.CameraNode;\nimport com.jme3.scene.Node;\nimport jme3_ext_xbuf.XbufContext;\nimport jme3_ext_xbuf.XbufKey;", "code": "package jme3_ext_remote_editor;\n\n\n\npublic class RemoteCtx {\n\tpublic Node root = new Node(\"remoteRootNode\");\n\tpublic CameraNode cam = new CameraNode(\"eye\", (Camera)null);\n\tpublic XbufContext components = new XbufContext();\n\tpublic SceneProcessorCaptureToBGRA view = new SceneProcessorCaptureToBGRA();\n\n\tpublic RemoteCtx() {\n\t\tcam.setEnabled(false);\n\t\troot.attachChild(cam);", "prompt": "// Path: jme3_xbuf_loader/src/main/java/jme3_ext_xbuf/XbufContext.java\n// @SuppressWarnings(\"unchecked\")\n// public class XbufContext {\n// //\tpublic Logger log=LoggerFactory.getLogger(\"Xbuf\");\n// \tprivate Map<String,Object> storage=new HashMap<String,Object> ();\n// \tprivate Map<String,List<String>> links=new HashMap<String,List<String>>();\n// \tprivate XbufKey settings=new XbufKey(\"default\");\n// \n// \tpublic synchronized void setSettings(XbufKey s){\n// \t\tsettings=s;\n// \t}\n// \n// \tpublic synchronized XbufKey getSettings(){\n// \t\treturn settings;\n// \t}\n// \n// \tpublic synchronized <T> T get(String ref){\n// \t\treturn (T)storage.get(ref);\n// \t}\n// \n// \n// \tpublic synchronized String idOf(Object val){\n// \t\tfor(Entry<String,Object> entry:storage.entrySet()){\n// \t\t\tif(entry.getValue()==val)return entry.getKey();\n// \t\t}\n// \t\treturn null;\n// \t}\n// \n// \tpublic synchronized <T> T put(String ref,Object val){\n// \t\tT t=(T)storage.put(ref,val);\n// \t\treturn t;\n// \t}\n// \n// \tpublic synchronized <T> T put(String ref,Object val,String link_to){\n// \t\tT out=put(ref,val);\n// \t\tlinkedRefs(link_to).add(ref);\n// \t\treturn out;\n// \t}\n// \n// \n// \tpublic synchronized <T> T removeWithLinks(String ref){\n// \t\tList<String> ls=links.get(ref);\n// \t\tT out= (T)storage.remove(ref);\n// \t\tfor(String l:ls)remove(l);\n// \t\treturn out;\n// \t}\n// \n// \tpublic synchronized <T> T remove(String ref){\n// \t\tlinks.remove(ref);\n// \t\treturn (T) storage.remove(ref);\n// \t}\n// \n// \tpublic synchronized List<String> linkedRefs(String ref) {\n// \t\tList<String> linked=links.get(ref);\n// \t\tif(linked==null){\n// \t\t\tlinked=new LinkedList<String>();\n// \t\t\tlinks.put(ref,linked);\n// \t\t}\n// \t\treturn linked;\n// \t}\n// \n// \n// \tpublic synchronized String toString(){\n// \t\tStringBuilder sb=new StringBuilder();\n// \t\tLinkedList<String> ignore=new LinkedList<String>();\n// \t\tstorage.forEach((k,v)->{\n// \t\t\tif(!ignore.contains(k)){\n// \t\t\t\tsb.append(\"$ \").append(k).append(\" = \").append(v.getClass()).append(\"(\").append(v.hashCode()).append(\")\\n\");\n// \t\t\t\tList<String> linked =linkedRefs(k);\n// \t\t\t\tfor(String l:linked){\n// \t\t\t\t\tv=get(l);\n// \t\t\t\t\tsb.append(\"$ ----| \").append(l).append(\" = \").append(v.getClass()).append(\"(\");\n// \t\t\t\t\ttry{\n// \t\t\t\t\t\tsb.append(v.toString());\n// \t\t\t\t\t}catch(Throwable t){\n// \t\t\t\t\t\tsb.append(v.hashCode());\n// \t\t\t\t\t}\n// \t\t\t\t\tsb.append(\")\\n\");\n// \t\t\t\t}\n// \t\t\t\tignore.addAll(linked);\n// \t\t\t}\n// \t\t});\n// \t\treturn sb.toString();\n// \t}\n// \n// }\n// \n// Path: jme3_xbuf_loader/src/main/java/jme3_ext_xbuf/XbufKey.java\n// @Slf4j\n// public class XbufKey extends PhysicsLoaderModelKey<XbufKey> implements XbufPhysicsLoaderSettings{\n// \n// \tpublic XbufKey(){}\n// \n// \tpublic XbufKey(String s){\n// \t\tsuper(s);\n// \t}\n// \n// \tprotected boolean useLightControls = false;\n// \tpublic XbufKey useLightControls(boolean x){\n// \t\tuseLightControls=x;\n// \t\treturn this;\n// \t}\n// \n// \t@Override\n// \tpublic XbufKey usePhysics(PhysicsLoader<?,?> l){\n// \t\tif(l!=null&&!(l instanceof BulletPhysicsLoader)){\n// \t\t\tlog.warn(\"Cannot use {}, physicsloader not supported\",l.getClass());\n// \t\t\treturn this;\n// \t\t}\n// \t\tsuper.usePhysics(l);\n// \t\treturn this;\n// \t}\n// \n// \n// \tpublic boolean useLightControls(){\n// \t\treturn useLightControls;\n// \t}\n// \n// \tprivate final static Class<?>[] supportedConstraints={\n// \t\t\tGenericConstraint.class\n// \t};\n// \n// \t@Override\n// \tpublic Class<?>[] getSupportedConstraints() {\n// \t\treturn supportedConstraints;\n// \t}\n// \n// }\n\n\n// Path: jme3_xbuf_remote/src/main/java/jme3_ext_remote_editor/RemoteCtx.java\nimport com.jme3.renderer.Camera;\nimport com.jme3.scene.CameraNode;\nimport com.jme3.scene.Node;\nimport jme3_ext_xbuf.XbufContext;\nimport jme3_ext_xbuf.XbufKey;\n\npackage jme3_ext_remote_editor;\n\n\n\npublic class RemoteCtx {\n\tpublic Node root = new Node(\"remoteRootNode\");\n\tpublic CameraNode cam = new CameraNode(\"eye\", (Camera)null);\n\tpublic XbufContext components = new XbufContext();\n\tpublic SceneProcessorCaptureToBGRA view = new SceneProcessorCaptureToBGRA();\n\n\tpublic RemoteCtx() {\n\t\tcam.setEnabled(false);\n\t\troot.attachChild(cam);", "next_line": "\t\tXbufKey settings = new XbufKey(\"RemoteCtx\")", "id": 4, "__internal_uuid__": "5614a737-8c22-4b14-8329-908672a60996"}
{"repo_name": "woxingxiao/GracefulMovies", "file_path": "app/src/main/java/com/xw/project/gracefulmovies/ui/activity/base/BaseActivity.java", "context": "// Path: app/src/main/java/com/xw/project/gracefulmovies/broadcast/NetworkStateChangedReceiver.java\n// public class NetworkStateChangedReceiver extends BroadcastReceiver {\n// \n//     @Override\n//     public void onReceive(Context context, Intent intent) {\n//         if (!NetWorkUtils.isNetworkAvailable()) {\n//             Toast.makeText(context, \"网络连接已断开，请检查网络\", Toast.LENGTH_SHORT).show();\n//         }\n//     }\n// }\n// \n// Path: app/src/main/java/com/xw/project/gracefulmovies/data/DataResource.java\n// public class DataResource<T> {\n// \n//     @NonNull\n//     private final Status mStatus;\n//     private final T mData;\n//     private final Exception mException;\n// \n//     private DataResource(@NonNull Status status, T data, Exception exception) {\n//         this.mStatus = status;\n//         this.mData = data;\n//         this.mException = exception;\n//     }\n// \n//     public static <T> DataResource<T> loading() {\n//         return new DataResource<>(LOADING, null, null);\n//     }\n// \n//     public static <T> DataResource<T> success(T data) {\n//         return new DataResource<>(SUCCESS, data, null);\n//     }\n// \n//     public static <T> DataResource<T> error(Exception e) {\n//         return new DataResource<>(ERROR, null, e);\n//     }\n// \n//     public static <T> DataResource<T> empty() {\n//         return new DataResource<>(EMPTY, null, null);\n//     }\n// \n//     @NonNull\n//     public Status getStatus() {\n//         return mStatus;\n//     }\n// \n//     public T getData() {\n//         return mData;\n//     }\n// \n//     public Exception getException() {\n//         return mException;\n//     }\n// \n//     ////////////////////////////////////////////////////////////////////////////////////////////////\n//     public enum Status {\n//         LOADING,\n//         SUCCESS,\n//         ERROR,\n//         EMPTY\n//     }\n// }\n// \n// Path: app/src/main/java/com/xw/project/gracefulmovies/util/Util.java\n// public final class Util {\n// \n//     /**\n//      * @return 状态栏高度\n//      */\n//     public static int getStatusBarHeight() {\n//         int result = 0;\n//         int resourceId = Resources.getSystem().getIdentifier(\"status_bar_height\", \"dimen\", \"android\");\n//         if (resourceId > 0) {\n//             result = Resources.getSystem().getDimensionPixelSize(resourceId);\n//         }\n//         return result;\n//     }\n// \n//     public static String trimCity(String city) {\n//         if (city.endsWith(\"市\")) {\n//             return city.substring(0, city.lastIndexOf(\"市\"));\n//         }\n//         if (city.endsWith(\"区\")) {\n//             return city.substring(0, city.lastIndexOf(\"区\"));\n//         }\n//         if (city.endsWith(\"县\")) {\n//             return city.substring(0, city.lastIndexOf(\"县\"));\n//         }\n//         if (city.endsWith(\"镇\")) {\n//             return city.substring(0, city.lastIndexOf(\"镇\"));\n//         }\n//         if (city.endsWith(\"乡\")) {\n//             return city.substring(0, city.lastIndexOf(\"乡\"));\n//         }\n// \n//         return city;\n//     }\n// \n//     public static int dp2px(int dp) {\n//         return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,\n//                 Resources.getSystem().getDisplayMetrics());\n//     }\n// }\n\n", "import_statement": "import android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.databinding.DataBindingUtil;\nimport android.databinding.ViewDataBinding;\nimport android.graphics.Color;\nimport android.net.ConnectivityManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Parcelable;\nimport android.support.annotation.ColorRes;\nimport android.support.annotation.LayoutRes;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.app.ActivityOptionsCompat;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewAnimationUtils;\nimport android.view.ViewGroup;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.ImageView;\nimport android.widget.Toast;\nimport com.xw.project.gracefulmovies.R;\nimport com.xw.project.gracefulmovies.broadcast.NetworkStateChangedReceiver;\nimport com.xw.project.gracefulmovies.data.DataResource;\nimport com.xw.project.gracefulmovies.util.Util;\nimport java.io.Serializable;\nimport java.net.ConnectException;\nimport java.net.SocketTimeoutException;\nimport java.net.UnknownHostException;", "code": "package com.xw.project.gracefulmovies.ui.activity.base;\n\n\n\n\n/**\n * BaseActivity\n * <p>\n * Created by woxingxiao on 2018-08-19.\n */\n\npublic abstract class BaseActivity<VDB extends ViewDataBinding> extends AppCompatActivity {\n\n    protected static final String PARAM_1 = \"param_1\";\n    protected static final String PARAM_2 = \"param_2\";\n    protected static final String OBJ_1 = \"obj_1\";\n    protected static final int REQUEST_CODE_1 = 0x22;\n    protected static int MARGIN_TOP_DP;\n\n    private static final String[] PARAMS = {PARAM_1, PARAM_2};\n    private static final String[] OBJECTS = {OBJ_1};\n\n    protected Activity mActivity;\n    protected VDB mBinding;\n\n    private StatusView mStatusView;\n    private NetworkStateChangedReceiver mReceiver;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mActivity = this;", "prompt": "// Path: app/src/main/java/com/xw/project/gracefulmovies/broadcast/NetworkStateChangedReceiver.java\n// public class NetworkStateChangedReceiver extends BroadcastReceiver {\n// \n//     @Override\n//     public void onReceive(Context context, Intent intent) {\n//         if (!NetWorkUtils.isNetworkAvailable()) {\n//             Toast.makeText(context, \"网络连接已断开，请检查网络\", Toast.LENGTH_SHORT).show();\n//         }\n//     }\n// }\n// \n// Path: app/src/main/java/com/xw/project/gracefulmovies/data/DataResource.java\n// public class DataResource<T> {\n// \n//     @NonNull\n//     private final Status mStatus;\n//     private final T mData;\n//     private final Exception mException;\n// \n//     private DataResource(@NonNull Status status, T data, Exception exception) {\n//         this.mStatus = status;\n//         this.mData = data;\n//         this.mException = exception;\n//     }\n// \n//     public static <T> DataResource<T> loading() {\n//         return new DataResource<>(LOADING, null, null);\n//     }\n// \n//     public static <T> DataResource<T> success(T data) {\n//         return new DataResource<>(SUCCESS, data, null);\n//     }\n// \n//     public static <T> DataResource<T> error(Exception e) {\n//         return new DataResource<>(ERROR, null, e);\n//     }\n// \n//     public static <T> DataResource<T> empty() {\n//         return new DataResource<>(EMPTY, null, null);\n//     }\n// \n//     @NonNull\n//     public Status getStatus() {\n//         return mStatus;\n//     }\n// \n//     public T getData() {\n//         return mData;\n//     }\n// \n//     public Exception getException() {\n//         return mException;\n//     }\n// \n//     ////////////////////////////////////////////////////////////////////////////////////////////////\n//     public enum Status {\n//         LOADING,\n//         SUCCESS,\n//         ERROR,\n//         EMPTY\n//     }\n// }\n// \n// Path: app/src/main/java/com/xw/project/gracefulmovies/util/Util.java\n// public final class Util {\n// \n//     /**\n//      * @return 状态栏高度\n//      */\n//     public static int getStatusBarHeight() {\n//         int result = 0;\n//         int resourceId = Resources.getSystem().getIdentifier(\"status_bar_height\", \"dimen\", \"android\");\n//         if (resourceId > 0) {\n//             result = Resources.getSystem().getDimensionPixelSize(resourceId);\n//         }\n//         return result;\n//     }\n// \n//     public static String trimCity(String city) {\n//         if (city.endsWith(\"市\")) {\n//             return city.substring(0, city.lastIndexOf(\"市\"));\n//         }\n//         if (city.endsWith(\"区\")) {\n//             return city.substring(0, city.lastIndexOf(\"区\"));\n//         }\n//         if (city.endsWith(\"县\")) {\n//             return city.substring(0, city.lastIndexOf(\"县\"));\n//         }\n//         if (city.endsWith(\"镇\")) {\n//             return city.substring(0, city.lastIndexOf(\"镇\"));\n//         }\n//         if (city.endsWith(\"乡\")) {\n//             return city.substring(0, city.lastIndexOf(\"乡\"));\n//         }\n// \n//         return city;\n//     }\n// \n//     public static int dp2px(int dp) {\n//         return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,\n//                 Resources.getSystem().getDisplayMetrics());\n//     }\n// }\n\n\n// Path: app/src/main/java/com/xw/project/gracefulmovies/ui/activity/base/BaseActivity.java\nimport android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.databinding.DataBindingUtil;\nimport android.databinding.ViewDataBinding;\nimport android.graphics.Color;\nimport android.net.ConnectivityManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Parcelable;\nimport android.support.annotation.ColorRes;\nimport android.support.annotation.LayoutRes;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.app.ActivityOptionsCompat;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewAnimationUtils;\nimport android.view.ViewGroup;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.ImageView;\nimport android.widget.Toast;\nimport com.xw.project.gracefulmovies.R;\nimport com.xw.project.gracefulmovies.broadcast.NetworkStateChangedReceiver;\nimport com.xw.project.gracefulmovies.data.DataResource;\nimport com.xw.project.gracefulmovies.util.Util;\nimport java.io.Serializable;\nimport java.net.ConnectException;\nimport java.net.SocketTimeoutException;\nimport java.net.UnknownHostException;\n\npackage com.xw.project.gracefulmovies.ui.activity.base;\n\n\n\n\n/**\n * BaseActivity\n * <p>\n * Created by woxingxiao on 2018-08-19.\n */\n\npublic abstract class BaseActivity<VDB extends ViewDataBinding> extends AppCompatActivity {\n\n    protected static final String PARAM_1 = \"param_1\";\n    protected static final String PARAM_2 = \"param_2\";\n    protected static final String OBJ_1 = \"obj_1\";\n    protected static final int REQUEST_CODE_1 = 0x22;\n    protected static int MARGIN_TOP_DP;\n\n    private static final String[] PARAMS = {PARAM_1, PARAM_2};\n    private static final String[] OBJECTS = {OBJ_1};\n\n    protected Activity mActivity;\n    protected VDB mBinding;\n\n    private StatusView mStatusView;\n    private NetworkStateChangedReceiver mReceiver;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        mActivity = this;", "next_line": "        MARGIN_TOP_DP = Util.getStatusBarHeight() + Util.dp2px(56);", "id": 5, "__internal_uuid__": "05950323-37ee-475e-ad66-df030207ed30"}
{"repo_name": "luiz/vraptor-html-dsl", "file_path": "src/main/java/br/com/caelum/vraptor/html/tags/Button.java", "context": "// Path: src/main/java/br/com/caelum/vraptor/html/attributes/Attribute.java\n// public interface Attribute {\n// \t/**\n// \t * <p>\n// \t * Returns the value of this attribute declaration. E.g.: if this object\n// \t * represents the declaration <code>class=\"hidden\"</code>, then this method\n// \t * should return the string \"hidden\".\n// \t * </p>\n// \t *\n// \t * @return The value of this attribute\n// \t */\n// \tpublic String getValue();\n// }\n// \n// Path: src/main/java/br/com/caelum/vraptor/html/tags/interfaces/NestedElement.java\n// public interface NestedElement {\n// \t/**\n// \t * <p>\n// \t * Requests the HTML representation of the object. Usually the\n// \t * transformation is delegated to {@link DefaultTagTransformer}. The\n// \t * exceptions are {@link Text} and {@link Elements}, which are not real HTML\n// \t * tags.\n// \t * </p>\n// \t *\n// \t * @see DefaultTagTransformer\n// \t */\n// \tpublic String toHtml();\n// }\n// \n// Path: src/main/java/br/com/caelum/vraptor/html/tags/interfaces/Tag.java\n// public interface Tag extends NestedElement {\n// \n// \t/**\n// \t * <p>\n// \t * Requests every nested tag of this tag.\n// \t * </p>\n// \t *\n// \t * @return An array with the nested tags\n// \t */\n// \tpublic NestedElement[] getChildren();\n// \n// \t/**\n// \t * <p>\n// \t * Requests the attributes of this tag.\n// \t * </p>\n// \t *\n// \t * @return An object that represents this tag's attributes\n// \t */\n// \tpublic Attribute[] getAttributes();\n// \n// \t/**\n// \t * <p>\n// \t * Set the unique child of this tag. This method exists for sole purpose of\n// \t * helping Java to decide which version of this method should be called when\n// \t * creating a tag with a single child.\n// \t * </p>\n// \t *\n// \t * @param children\n// \t *            The NestedElement representing the child of this tag\n// \t * @return This method should return the object itself, as to allow the\n// \t *         following use: <code>html().with(body().with(text(\"Hi\")))</code>\n// \t */\n// \tpublic Tag with(NestedElement child);\n// \n// \t/**\n// \t * <p>\n// \t * Set the children of this tag.\n// \t * </p>\n// \t *\n// \t * @param children\n// \t *            The NestedElements representing the children of this tag\n// \t * @return This method should return the object itself, as to allow the\n// \t *         following use: <code>html().with(body().with(text(\"Hi\")))</code>\n// \t */\n// \tpublic Tag with(NestedElement... children);\n// \n// \t/**\n// \t * <p>\n// \t * Set the text inside this tag, calling {@link Object#toString()} on the\n// \t * argument and using the result as the content\n// \t * </p>\n// \t *\n// \t * @param content\n// \t *            The text to be placed inside this tag\n// \t * @return This method should return the object itself, as to allow the\n// \t *         following use: <code>html().with(body().with(\"Hi\"))</code>\n// \t */\n// \tpublic Tag with(java.lang.Object content);\n// }\n// \n// Path: src/main/java/br/com/caelum/vraptor/html/transformers/DefaultTagTransformer.java\n// public class DefaultTagTransformer implements TagTransformer {\n// \n// \tpublic String transform(Tag tag) {\n// \t\tString tagName = tag.getClass().getSimpleName().toLowerCase();\n// \t\treturn transform(tag, tagName);\n// \t}\n// \n// \tprivate String transformToHtml(Attribute... attributes) {\n// \t\tStringBuilder sb = new StringBuilder();\n// \t\tfor (Attribute attribute : attributes) {\n// \t\t\tsb.append(' ');\n// \t\t\tsb.append(transformToHtml(attribute));\n// \t\t}\n// \t\treturn sb.toString();\n// \t}\n// \n// \tprivate String transformToHtml(Attribute attribute) {\n// \t\tString attributeName = attribute.getClass().getSimpleName().toLowerCase();\n// \t\treturn format(\"%s=\\\"%s\\\"\", attributeName, attribute.getValue());\n// \t}\n// \n// \tprivate String transform(Tag tag, String name) {\n// \t\tStringBuilder sb = new StringBuilder();\n// \t\tsb.append('<');\n// \t\tsb.append(name);\n// \t\tsb.append(transformToHtml(tag.getAttributes()));\n// \t\tsb.append('>');\n// \t\tfor (NestedElement child : tag.getChildren()) {\n// \t\t\tsb.append(child.toHtml());\n// \t\t}\n// \t\tsb.append(\"</\");\n// \t\tsb.append(name);\n// \t\tsb.append('>');\n// \t\treturn sb.toString();\n// \t}\n// \n// }\n// \n// Path: src/main/java/br/com/caelum/vraptor/html/transformers/TagTransformer.java\n// public interface TagTransformer {\n// \n// \tpublic String transform(Tag tag);\n// }\n\n", "import_statement": "import br.com.caelum.vraptor.html.attributes.Attribute;\nimport br.com.caelum.vraptor.html.tags.interfaces.NestedElement;\nimport br.com.caelum.vraptor.html.tags.interfaces.Tag;\nimport br.com.caelum.vraptor.html.transformers.DefaultTagTransformer;\nimport br.com.caelum.vraptor.html.transformers.TagTransformer;", "code": "package br.com.caelum.vraptor.html.tags;\n\n\npublic class Button implements Tag {\n\n\tprivate NestedElement[] children = new NestedElement[0];\n\tprivate final Attribute[] attributes;", "prompt": "// Path: src/main/java/br/com/caelum/vraptor/html/attributes/Attribute.java\n// public interface Attribute {\n// \t/**\n// \t * <p>\n// \t * Returns the value of this attribute declaration. E.g.: if this object\n// \t * represents the declaration <code>class=\"hidden\"</code>, then this method\n// \t * should return the string \"hidden\".\n// \t * </p>\n// \t *\n// \t * @return The value of this attribute\n// \t */\n// \tpublic String getValue();\n// }\n// \n// Path: src/main/java/br/com/caelum/vraptor/html/tags/interfaces/NestedElement.java\n// public interface NestedElement {\n// \t/**\n// \t * <p>\n// \t * Requests the HTML representation of the object. Usually the\n// \t * transformation is delegated to {@link DefaultTagTransformer}. The\n// \t * exceptions are {@link Text} and {@link Elements}, which are not real HTML\n// \t * tags.\n// \t * </p>\n// \t *\n// \t * @see DefaultTagTransformer\n// \t */\n// \tpublic String toHtml();\n// }\n// \n// Path: src/main/java/br/com/caelum/vraptor/html/tags/interfaces/Tag.java\n// public interface Tag extends NestedElement {\n// \n// \t/**\n// \t * <p>\n// \t * Requests every nested tag of this tag.\n// \t * </p>\n// \t *\n// \t * @return An array with the nested tags\n// \t */\n// \tpublic NestedElement[] getChildren();\n// \n// \t/**\n// \t * <p>\n// \t * Requests the attributes of this tag.\n// \t * </p>\n// \t *\n// \t * @return An object that represents this tag's attributes\n// \t */\n// \tpublic Attribute[] getAttributes();\n// \n// \t/**\n// \t * <p>\n// \t * Set the unique child of this tag. This method exists for sole purpose of\n// \t * helping Java to decide which version of this method should be called when\n// \t * creating a tag with a single child.\n// \t * </p>\n// \t *\n// \t * @param children\n// \t *            The NestedElement representing the child of this tag\n// \t * @return This method should return the object itself, as to allow the\n// \t *         following use: <code>html().with(body().with(text(\"Hi\")))</code>\n// \t */\n// \tpublic Tag with(NestedElement child);\n// \n// \t/**\n// \t * <p>\n// \t * Set the children of this tag.\n// \t * </p>\n// \t *\n// \t * @param children\n// \t *            The NestedElements representing the children of this tag\n// \t * @return This method should return the object itself, as to allow the\n// \t *         following use: <code>html().with(body().with(text(\"Hi\")))</code>\n// \t */\n// \tpublic Tag with(NestedElement... children);\n// \n// \t/**\n// \t * <p>\n// \t * Set the text inside this tag, calling {@link Object#toString()} on the\n// \t * argument and using the result as the content\n// \t * </p>\n// \t *\n// \t * @param content\n// \t *            The text to be placed inside this tag\n// \t * @return This method should return the object itself, as to allow the\n// \t *         following use: <code>html().with(body().with(\"Hi\"))</code>\n// \t */\n// \tpublic Tag with(java.lang.Object content);\n// }\n// \n// Path: src/main/java/br/com/caelum/vraptor/html/transformers/DefaultTagTransformer.java\n// public class DefaultTagTransformer implements TagTransformer {\n// \n// \tpublic String transform(Tag tag) {\n// \t\tString tagName = tag.getClass().getSimpleName().toLowerCase();\n// \t\treturn transform(tag, tagName);\n// \t}\n// \n// \tprivate String transformToHtml(Attribute... attributes) {\n// \t\tStringBuilder sb = new StringBuilder();\n// \t\tfor (Attribute attribute : attributes) {\n// \t\t\tsb.append(' ');\n// \t\t\tsb.append(transformToHtml(attribute));\n// \t\t}\n// \t\treturn sb.toString();\n// \t}\n// \n// \tprivate String transformToHtml(Attribute attribute) {\n// \t\tString attributeName = attribute.getClass().getSimpleName().toLowerCase();\n// \t\treturn format(\"%s=\\\"%s\\\"\", attributeName, attribute.getValue());\n// \t}\n// \n// \tprivate String transform(Tag tag, String name) {\n// \t\tStringBuilder sb = new StringBuilder();\n// \t\tsb.append('<');\n// \t\tsb.append(name);\n// \t\tsb.append(transformToHtml(tag.getAttributes()));\n// \t\tsb.append('>');\n// \t\tfor (NestedElement child : tag.getChildren()) {\n// \t\t\tsb.append(child.toHtml());\n// \t\t}\n// \t\tsb.append(\"</\");\n// \t\tsb.append(name);\n// \t\tsb.append('>');\n// \t\treturn sb.toString();\n// \t}\n// \n// }\n// \n// Path: src/main/java/br/com/caelum/vraptor/html/transformers/TagTransformer.java\n// public interface TagTransformer {\n// \n// \tpublic String transform(Tag tag);\n// }\n\n\n// Path: src/main/java/br/com/caelum/vraptor/html/tags/Button.java\nimport br.com.caelum.vraptor.html.attributes.Attribute;\nimport br.com.caelum.vraptor.html.tags.interfaces.NestedElement;\nimport br.com.caelum.vraptor.html.tags.interfaces.Tag;\nimport br.com.caelum.vraptor.html.transformers.DefaultTagTransformer;\nimport br.com.caelum.vraptor.html.transformers.TagTransformer;\n\npackage br.com.caelum.vraptor.html.tags;\n\n\npublic class Button implements Tag {\n\n\tprivate NestedElement[] children = new NestedElement[0];\n\tprivate final Attribute[] attributes;", "next_line": "\tprivate final TagTransformer tagTransformer = new DefaultTagTransformer();", "id": 6, "__internal_uuid__": "e0a6a04c-8776-4675-9978-9a8d3fed6325"}
{"repo_name": "Netflix/governator", "file_path": "governator-test-junit/src/main/java/com/netflix/governator/guice/test/junit4/GovernatorJunit4ClassRunner.java", "context": "// Path: governator-test/src/main/java/com/netflix/governator/guice/test/InjectorCreationMode.java\n// public enum InjectorCreationMode {\n//     BEFORE_TEST_CLASS,\n//     BEFORE_EACH_TEST_METHOD\n// }\n// \n// Path: governator-test/src/main/java/com/netflix/governator/guice/test/mocks/mockito/MockitoMockHandler.java\n// public class MockitoMockHandler implements MockHandler {\n// \n//     @Override\n//     public <T> T createMock(Class<T> classToMock) {\n//         return Mockito.mock(classToMock);\n//     }\n// \n//     @Override\n//     public <T> T createMock(Class<T> classToMock, Object args) {\n//         if (args instanceof Answer<?>) {\n//             return Mockito.mock(classToMock, (Answer<?>) args);\n//         } else {\n//             throw new IllegalArgumentException(\n//                     \"MockitoMockHandler only supports arguments of type \" + Answer.class.getName() + \". Provided \" + args != null\n//                             ? args.getClass().getName() : \"null\");\n//         }\n//     }\n// \n//     @Override\n//     public <T> T createSpy(T objectToSpy) {\n//         return Mockito.spy(objectToSpy);\n//     }\n// \n//     @Override\n//     public void resetMock(Object mockToReset) {\n//         Mockito.reset(mockToReset);\n//     }\n// \n// }\n\n", "import_statement": "import java.util.List;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.internal.runners.statements.RunAfters;\nimport org.junit.runner.notification.RunNotifier;\nimport org.junit.runners.BlockJUnit4ClassRunner;\nimport org.junit.runners.model.FrameworkMethod;\nimport org.junit.runners.model.InitializationError;\nimport org.junit.runners.model.Statement;\nimport com.netflix.governator.guice.test.AnnotationBasedTestInjectorManager;\nimport com.netflix.governator.guice.test.ModulesForTesting;\nimport com.netflix.governator.guice.test.ReplaceWithMock;\nimport com.netflix.governator.guice.test.InjectorCreationMode;\nimport com.netflix.governator.guice.test.WrapWithSpy;\nimport com.netflix.governator.guice.test.mocks.mockito.MockitoMockHandler;", "code": "package com.netflix.governator.guice.test.junit4;\n\n\n\n\n/**\n * An extended {@link BlockJUnit4ClassRunner} which creates a Governator-Guice\n * injector from a list of modules, as well as provides utilities for\n * Mocking/Spying bindings.\n * \n * See {@link ModulesForTesting}, {@link ReplaceWithMock}, and\n * {@link WrapWithSpy} for example usage.\n */\npublic class GovernatorJunit4ClassRunner extends BlockJUnit4ClassRunner {\n\n    private AnnotationBasedTestInjectorManager annotationBasedTestInjectorManager;\n\n    public GovernatorJunit4ClassRunner(Class<?> klass) throws InitializationError {\n        super(klass);\n    }\n\n    @Override\n    protected Statement classBlock(RunNotifier notifier) {\n        annotationBasedTestInjectorManager = new AnnotationBasedTestInjectorManager(getTestClass().getJavaClass(), MockitoMockHandler.class);\n        annotationBasedTestInjectorManager.prepareConfigForTestClass(getDescription().getTestClass());", "prompt": "// Path: governator-test/src/main/java/com/netflix/governator/guice/test/InjectorCreationMode.java\n// public enum InjectorCreationMode {\n//     BEFORE_TEST_CLASS,\n//     BEFORE_EACH_TEST_METHOD\n// }\n// \n// Path: governator-test/src/main/java/com/netflix/governator/guice/test/mocks/mockito/MockitoMockHandler.java\n// public class MockitoMockHandler implements MockHandler {\n// \n//     @Override\n//     public <T> T createMock(Class<T> classToMock) {\n//         return Mockito.mock(classToMock);\n//     }\n// \n//     @Override\n//     public <T> T createMock(Class<T> classToMock, Object args) {\n//         if (args instanceof Answer<?>) {\n//             return Mockito.mock(classToMock, (Answer<?>) args);\n//         } else {\n//             throw new IllegalArgumentException(\n//                     \"MockitoMockHandler only supports arguments of type \" + Answer.class.getName() + \". Provided \" + args != null\n//                             ? args.getClass().getName() : \"null\");\n//         }\n//     }\n// \n//     @Override\n//     public <T> T createSpy(T objectToSpy) {\n//         return Mockito.spy(objectToSpy);\n//     }\n// \n//     @Override\n//     public void resetMock(Object mockToReset) {\n//         Mockito.reset(mockToReset);\n//     }\n// \n// }\n\n\n// Path: governator-test-junit/src/main/java/com/netflix/governator/guice/test/junit4/GovernatorJunit4ClassRunner.java\nimport java.util.List;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.internal.runners.statements.RunAfters;\nimport org.junit.runner.notification.RunNotifier;\nimport org.junit.runners.BlockJUnit4ClassRunner;\nimport org.junit.runners.model.FrameworkMethod;\nimport org.junit.runners.model.InitializationError;\nimport org.junit.runners.model.Statement;\nimport com.netflix.governator.guice.test.AnnotationBasedTestInjectorManager;\nimport com.netflix.governator.guice.test.ModulesForTesting;\nimport com.netflix.governator.guice.test.ReplaceWithMock;\nimport com.netflix.governator.guice.test.InjectorCreationMode;\nimport com.netflix.governator.guice.test.WrapWithSpy;\nimport com.netflix.governator.guice.test.mocks.mockito.MockitoMockHandler;\n\npackage com.netflix.governator.guice.test.junit4;\n\n\n\n\n/**\n * An extended {@link BlockJUnit4ClassRunner} which creates a Governator-Guice\n * injector from a list of modules, as well as provides utilities for\n * Mocking/Spying bindings.\n * \n * See {@link ModulesForTesting}, {@link ReplaceWithMock}, and\n * {@link WrapWithSpy} for example usage.\n */\npublic class GovernatorJunit4ClassRunner extends BlockJUnit4ClassRunner {\n\n    private AnnotationBasedTestInjectorManager annotationBasedTestInjectorManager;\n\n    public GovernatorJunit4ClassRunner(Class<?> klass) throws InitializationError {\n        super(klass);\n    }\n\n    @Override\n    protected Statement classBlock(RunNotifier notifier) {\n        annotationBasedTestInjectorManager = new AnnotationBasedTestInjectorManager(getTestClass().getJavaClass(), MockitoMockHandler.class);\n        annotationBasedTestInjectorManager.prepareConfigForTestClass(getDescription().getTestClass());", "next_line": "        if (InjectorCreationMode.BEFORE_TEST_CLASS == annotationBasedTestInjectorManager.getInjectorCreationMode()) {", "id": 7, "__internal_uuid__": "f4cdf569-81e8-4bef-aa7d-08dc9caf16a6"}
{"repo_name": "itoshige/testrail-unit", "file_path": "src/test/java/com/github/itoshige/testrail/TestBase.java", "context": "// Path: src/main/java/com/github/itoshige/testrail/rules/TestRailStore.java\n// public class TestRailStore extends TestWatcher {\r\n// \r\n//     private static final Logger logger = LoggerFactory.getLogger(TestRailStore.class);\r\n// \r\n//     private String runId;\r\n//     private String projectId;\r\n// \r\n//     public TestRailStore(TestRailUnit unit) {\r\n//         this.runId = unit.getRunId();\r\n//         this.projectId = unit.getProjectId();\r\n//     }\r\n// \r\n//     protected void succeeded(Description desc) {\r\n//         if (!isDisabled(desc)) {\r\n//             TestResultStoreKey key = new TestResultStoreKey(runId, desc.getTestClass());\r\n// \r\n//             SyncManager.storeJunitTestResult(key,\r\n//                 new TestResultModel(SyncManager.getTestId(projectId, runId, desc), ResultStatus.PASSED,\r\n//                     \"This test worked fine!\"));\r\n//         }\r\n//     }\r\n// \r\n//     protected void failed(Throwable e, Description desc) {\r\n//         if (!isDisabled(desc)) {\r\n//             TestResultStoreKey key = new TestResultStoreKey(runId, desc.getTestClass());\r\n//             logger.error(\"[ERROR]assertError : {}\", e.getMessage());\r\n//             SyncManager.storeJunitTestResult(\r\n//                 key,\r\n//                 new TestResultModel(SyncManager.getTestId(projectId, runId, desc), ResultStatus.FAILED, e\r\n//                     .toString()));\r\n//         }\r\n//     }\r\n// \r\n//     private boolean isDisabled(Description desc) {\r\n//         return ConfigrationUtil.isDisabled() || TestRailUnitUtil.isSkipClass(desc.getTestClass())\r\n//             || TestRailUnitUtil.isSkipMethod(desc);\r\n//     }\r\n// }\r\n// \n// Path: src/main/java/com/github/itoshige/testrail/rules/TestRailUnit.java\n// public class TestRailUnit extends TestWatcher {\r\n//     private static final Logger logger = LoggerFactory.getLogger(TestRailUnit.class);\r\n//     private String runId;\r\n//     private String projectId;\r\n// \r\n//     public String getRunId() {\r\n//         return runId;\r\n//     }\r\n// \r\n//     public String getProjectId() {\r\n//         return projectId;\r\n//     }\r\n// \r\n//     protected void starting(Description desc) {\r\n//         if (isDisabled(desc))\r\n//             return;\r\n// \r\n//         try {\r\n//             String testClassPath = desc.getTestClass().getName();\r\n//             this.runId = ConfigrationUtil.getRunId(testClassPath);\r\n// \r\n//             if (runId == null || runId.isEmpty())\r\n//                 throw new TestInitializerException(\"runId is empty.\");\r\n// \r\n//             TestRailUnitUtil.checkParams(runId);\r\n// \r\n//             this.projectId = SyncManager.storeTestRailData(runId, desc.getTestClass());\r\n// \r\n//         } catch (TestInitializerException e) {\r\n//             logger.error(\"[ERROR] exception:\", e);\r\n//             System.exit(1);\r\n//         }\r\n//     }\r\n// \r\n//     protected void finished(Description desc) {\r\n//         if (isDisabled(desc))\r\n//             return;\r\n// \r\n//         TestRailClient.addResults(new TestResultStoreKey(runId, desc.getTestClass()));\r\n//         logger.debug(\"TestRailUnit end\");\r\n//     }\r\n// \r\n//     private boolean isDisabled(Description desc) {\r\n//         return ConfigrationUtil.isDisabled() || TestRailUnitUtil.isSkipClass(desc.getTestClass());\r\n//     }\r\n// }\r\n\n", "import_statement": "import org.apache.log4j.ConsoleAppender;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.apache.log4j.PatternLayout;\r\nimport org.junit.ClassRule;\r\nimport org.junit.Rule;\r\nimport com.github.itoshige.testrail.rules.TestRailStore;\r\nimport com.github.itoshige.testrail.rules.TestRailUnit;\r", "code": "/**\r\n * Copyright 2015 itoshige1017@gmail.com\r\n * \r\n * This software is released under the MIT License.\r\n * http://opensource.org/licenses/mit-license.php\r\n */\r\npackage com.github.itoshige.testrail;\r\n\r\n\r\n\r\n/**\r\n * Junit Test base\r\n * \r\n * @author itoshige\r\n * \r\n */\r\npublic class TestBase {\r\n\r\n    @ClassRule\r", "prompt": "// Path: src/main/java/com/github/itoshige/testrail/rules/TestRailStore.java\n// public class TestRailStore extends TestWatcher {\r\n// \r\n//     private static final Logger logger = LoggerFactory.getLogger(TestRailStore.class);\r\n// \r\n//     private String runId;\r\n//     private String projectId;\r\n// \r\n//     public TestRailStore(TestRailUnit unit) {\r\n//         this.runId = unit.getRunId();\r\n//         this.projectId = unit.getProjectId();\r\n//     }\r\n// \r\n//     protected void succeeded(Description desc) {\r\n//         if (!isDisabled(desc)) {\r\n//             TestResultStoreKey key = new TestResultStoreKey(runId, desc.getTestClass());\r\n// \r\n//             SyncManager.storeJunitTestResult(key,\r\n//                 new TestResultModel(SyncManager.getTestId(projectId, runId, desc), ResultStatus.PASSED,\r\n//                     \"This test worked fine!\"));\r\n//         }\r\n//     }\r\n// \r\n//     protected void failed(Throwable e, Description desc) {\r\n//         if (!isDisabled(desc)) {\r\n//             TestResultStoreKey key = new TestResultStoreKey(runId, desc.getTestClass());\r\n//             logger.error(\"[ERROR]assertError : {}\", e.getMessage());\r\n//             SyncManager.storeJunitTestResult(\r\n//                 key,\r\n//                 new TestResultModel(SyncManager.getTestId(projectId, runId, desc), ResultStatus.FAILED, e\r\n//                     .toString()));\r\n//         }\r\n//     }\r\n// \r\n//     private boolean isDisabled(Description desc) {\r\n//         return ConfigrationUtil.isDisabled() || TestRailUnitUtil.isSkipClass(desc.getTestClass())\r\n//             || TestRailUnitUtil.isSkipMethod(desc);\r\n//     }\r\n// }\r\n// \n// Path: src/main/java/com/github/itoshige/testrail/rules/TestRailUnit.java\n// public class TestRailUnit extends TestWatcher {\r\n//     private static final Logger logger = LoggerFactory.getLogger(TestRailUnit.class);\r\n//     private String runId;\r\n//     private String projectId;\r\n// \r\n//     public String getRunId() {\r\n//         return runId;\r\n//     }\r\n// \r\n//     public String getProjectId() {\r\n//         return projectId;\r\n//     }\r\n// \r\n//     protected void starting(Description desc) {\r\n//         if (isDisabled(desc))\r\n//             return;\r\n// \r\n//         try {\r\n//             String testClassPath = desc.getTestClass().getName();\r\n//             this.runId = ConfigrationUtil.getRunId(testClassPath);\r\n// \r\n//             if (runId == null || runId.isEmpty())\r\n//                 throw new TestInitializerException(\"runId is empty.\");\r\n// \r\n//             TestRailUnitUtil.checkParams(runId);\r\n// \r\n//             this.projectId = SyncManager.storeTestRailData(runId, desc.getTestClass());\r\n// \r\n//         } catch (TestInitializerException e) {\r\n//             logger.error(\"[ERROR] exception:\", e);\r\n//             System.exit(1);\r\n//         }\r\n//     }\r\n// \r\n//     protected void finished(Description desc) {\r\n//         if (isDisabled(desc))\r\n//             return;\r\n// \r\n//         TestRailClient.addResults(new TestResultStoreKey(runId, desc.getTestClass()));\r\n//         logger.debug(\"TestRailUnit end\");\r\n//     }\r\n// \r\n//     private boolean isDisabled(Description desc) {\r\n//         return ConfigrationUtil.isDisabled() || TestRailUnitUtil.isSkipClass(desc.getTestClass());\r\n//     }\r\n// }\r\n\n\n// Path: src/test/java/com/github/itoshige/testrail/TestBase.java\nimport org.apache.log4j.ConsoleAppender;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.apache.log4j.PatternLayout;\r\nimport org.junit.ClassRule;\r\nimport org.junit.Rule;\r\nimport com.github.itoshige.testrail.rules.TestRailStore;\r\nimport com.github.itoshige.testrail.rules.TestRailUnit;\r\n\n/**\r\n * Copyright 2015 itoshige1017@gmail.com\r\n * \r\n * This software is released under the MIT License.\r\n * http://opensource.org/licenses/mit-license.php\r\n */\r\npackage com.github.itoshige.testrail;\r\n\r\n\r\n\r\n/**\r\n * Junit Test base\r\n * \r\n * @author itoshige\r\n * \r\n */\r\npublic class TestBase {\r\n\r\n    @ClassRule\r", "next_line": "    public static TestRailUnit tr = new TestRailUnit();\r", "id": 8, "__internal_uuid__": "69ec8852-ed63-4f27-a88f-b74287bc2143"}
{"repo_name": "jiangxiaoli/SnippetShare", "file_path": "src/test/java/edu/sjsu/cmpe275/team6/SnippetShare/SnippetDaoTest.java", "context": "// Path: src/main/java/edu/sjsu/cmpe275/team6/SnippetShare/dao/SnippetDAO.java\n// public interface SnippetDAO {\n// \n// \n//         public boolean insert(Snippet snippet);\n//         public Snippet findBySnippetId(int sid);\n//         public void update(Snippet snippet);\n//         public boolean delete(int sid);\n//         public List<Snippet> allSnippets(int bid);\n// \n// \n// }\n// \n// Path: src/main/java/edu/sjsu/cmpe275/team6/SnippetShare/model/Snippet.java\n// @Entity\n// @Table(name = \"snippet\")\n// public class Snippet {\n// \n// \t@Id\n// \t@TableGenerator(name=\"tab\", initialValue=0, allocationSize=1)\n// \t@GeneratedValue(strategy=GenerationType.TABLE, generator=\"tab\")\n// \t@Column(name = \"sid\")\n// \tprivate int sid;\n// \n// \t@Column(name = \"title\")\n// \tprivate String title;\n// \n// //\tto specify a longtext data type in mysql\n// \t@Lob\n// \t@Column(name = \"content\")\n// \tprivate String content;\n// \n// \t@Column(name = \"url\")\n// \tprivate String url;\n// \n// \t@Column(name = \"language\")\n// \tprivate String language;\n// \n// \t//can we have created time and updated time??\n// \t@Column(name = \"createdAt\")\n// \tprivate long createdAt;\n// \n// \t@Column(name = \"updatedAt\")\n// \tprivate long updatedAt;\n// \n// \t//One user can have many snippets\n//     @ManyToOne(fetch = FetchType.LAZY)\n//     @JoinColumn(name = \"author\")\n//     private User author;\n// \n//    //One board can have many snippets\n// \t@ManyToOne(fetch = FetchType.LAZY)\n// \t@JoinColumn(name = \"bid\")\n//     private Board board;\n// \n//     @Column(name = \"comments\")\n//     @OneToMany(mappedBy = \"snippet\", cascade=CascadeType.REMOVE)\n//     private List<Comment> comments;\n//     \n//     @Column(name = \"tags\")\n//     @OneToMany(mappedBy = \"snippet\")\n//     private List<Tag> tags;\n// \n// \tpublic Snippet(String title, String content) {\n// \t\tthis.title = title;\n// \t\tthis.content = content;\n// \t}\n// \n// \tpublic Snippet() {}\n// \t\n// \tpublic int getSid() {\n// \t\treturn sid;\n// \t}\n// \n// \tpublic String getTitle() {\n// \t\treturn title;\n// \t}\n// \n// \tpublic void setTitle(String title) {\n// \t\tthis.title = title;\n// \t}\n// \n// \tpublic String getContent() {\n// \t\treturn content;\n// \t}\n// \n// \tpublic void setContent(String content) {\n// \t\tthis.content = content;\n// \t}\n// \n// \tpublic String getUrl() {\n// \t\treturn url;\n// \t}\n// \n// \tpublic void setUrl(String url) {\n// \t\tthis.url = url;\n// \t}\n// \n// \tpublic String getLanguage() {\n// \t\treturn language;\n// \t}\n// \n// \tpublic void setLanguage(String language) {\n// \t\tthis.language = language;\n// \t}\n// \n// \tpublic long getCreatedAt() {\n// \t\treturn createdAt;\n// \t}\n// \n// \tpublic void setCreatedAt(long createdAt) {\n// \t\tthis.createdAt = createdAt;\n// \t}\n// \n// \tpublic long getUpdatedAt() {\n// \t\treturn updatedAt;\n// \t}\n// \n// \tpublic void setUpdatedAt(long updatedAt) {\n// \t\tthis.updatedAt = updatedAt;\n// \t}\n// \n// \tpublic User getAuthor() {\n// \t\treturn author;\n// \t}\n// \n// \tpublic void setAuthor(User author) {\n// \t\tthis.author = author;\n// \t}\n// \n// \tpublic Board getBoard() {\n// \t\treturn board;\n// \t}\n// \n// \tpublic void setBoard(Board board) {\n// \t\tthis.board = board;\n// \t}\n// \n//     public int getNumberOfComments(){\n//         return this.comments.size();\n//     }\n// \n// \tpublic List<Comment> getComments() {\n// \t\treturn comments;\n// \t}\n// \tpublic void setComments(List<Comment> comments) { this.comments = comments; }\n// \t\n// \t\n// \tpublic int getNumberOfTags(){\n//         return this.tags.size();\n//     }\n// \n// \tpublic List<Tag> getTags() {\n// \t\treturn tags;\n// \t}\n// \tpublic void setTags(List<Tag> tags) { this.tags = tags; }\n// }\n\n", "import_statement": "import edu.sjsu.cmpe275.team6.SnippetShare.dao.SnippetDAO;\nimport edu.sjsu.cmpe275.team6.SnippetShare.model.Snippet;\nimport org.junit.Test;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport java.util.ArrayList;\nimport java.util.List;", "code": "package edu.sjsu.cmpe275.team6.SnippetShare;\n\n\n\n/**\n * Created by Rucha on 5/1/15.\n */\npublic class SnippetDaoTest {\n\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring-module.xml\");", "prompt": "// Path: src/main/java/edu/sjsu/cmpe275/team6/SnippetShare/dao/SnippetDAO.java\n// public interface SnippetDAO {\n// \n// \n//         public boolean insert(Snippet snippet);\n//         public Snippet findBySnippetId(int sid);\n//         public void update(Snippet snippet);\n//         public boolean delete(int sid);\n//         public List<Snippet> allSnippets(int bid);\n// \n// \n// }\n// \n// Path: src/main/java/edu/sjsu/cmpe275/team6/SnippetShare/model/Snippet.java\n// @Entity\n// @Table(name = \"snippet\")\n// public class Snippet {\n// \n// \t@Id\n// \t@TableGenerator(name=\"tab\", initialValue=0, allocationSize=1)\n// \t@GeneratedValue(strategy=GenerationType.TABLE, generator=\"tab\")\n// \t@Column(name = \"sid\")\n// \tprivate int sid;\n// \n// \t@Column(name = \"title\")\n// \tprivate String title;\n// \n// //\tto specify a longtext data type in mysql\n// \t@Lob\n// \t@Column(name = \"content\")\n// \tprivate String content;\n// \n// \t@Column(name = \"url\")\n// \tprivate String url;\n// \n// \t@Column(name = \"language\")\n// \tprivate String language;\n// \n// \t//can we have created time and updated time??\n// \t@Column(name = \"createdAt\")\n// \tprivate long createdAt;\n// \n// \t@Column(name = \"updatedAt\")\n// \tprivate long updatedAt;\n// \n// \t//One user can have many snippets\n//     @ManyToOne(fetch = FetchType.LAZY)\n//     @JoinColumn(name = \"author\")\n//     private User author;\n// \n//    //One board can have many snippets\n// \t@ManyToOne(fetch = FetchType.LAZY)\n// \t@JoinColumn(name = \"bid\")\n//     private Board board;\n// \n//     @Column(name = \"comments\")\n//     @OneToMany(mappedBy = \"snippet\", cascade=CascadeType.REMOVE)\n//     private List<Comment> comments;\n//     \n//     @Column(name = \"tags\")\n//     @OneToMany(mappedBy = \"snippet\")\n//     private List<Tag> tags;\n// \n// \tpublic Snippet(String title, String content) {\n// \t\tthis.title = title;\n// \t\tthis.content = content;\n// \t}\n// \n// \tpublic Snippet() {}\n// \t\n// \tpublic int getSid() {\n// \t\treturn sid;\n// \t}\n// \n// \tpublic String getTitle() {\n// \t\treturn title;\n// \t}\n// \n// \tpublic void setTitle(String title) {\n// \t\tthis.title = title;\n// \t}\n// \n// \tpublic String getContent() {\n// \t\treturn content;\n// \t}\n// \n// \tpublic void setContent(String content) {\n// \t\tthis.content = content;\n// \t}\n// \n// \tpublic String getUrl() {\n// \t\treturn url;\n// \t}\n// \n// \tpublic void setUrl(String url) {\n// \t\tthis.url = url;\n// \t}\n// \n// \tpublic String getLanguage() {\n// \t\treturn language;\n// \t}\n// \n// \tpublic void setLanguage(String language) {\n// \t\tthis.language = language;\n// \t}\n// \n// \tpublic long getCreatedAt() {\n// \t\treturn createdAt;\n// \t}\n// \n// \tpublic void setCreatedAt(long createdAt) {\n// \t\tthis.createdAt = createdAt;\n// \t}\n// \n// \tpublic long getUpdatedAt() {\n// \t\treturn updatedAt;\n// \t}\n// \n// \tpublic void setUpdatedAt(long updatedAt) {\n// \t\tthis.updatedAt = updatedAt;\n// \t}\n// \n// \tpublic User getAuthor() {\n// \t\treturn author;\n// \t}\n// \n// \tpublic void setAuthor(User author) {\n// \t\tthis.author = author;\n// \t}\n// \n// \tpublic Board getBoard() {\n// \t\treturn board;\n// \t}\n// \n// \tpublic void setBoard(Board board) {\n// \t\tthis.board = board;\n// \t}\n// \n//     public int getNumberOfComments(){\n//         return this.comments.size();\n//     }\n// \n// \tpublic List<Comment> getComments() {\n// \t\treturn comments;\n// \t}\n// \tpublic void setComments(List<Comment> comments) { this.comments = comments; }\n// \t\n// \t\n// \tpublic int getNumberOfTags(){\n//         return this.tags.size();\n//     }\n// \n// \tpublic List<Tag> getTags() {\n// \t\treturn tags;\n// \t}\n// \tpublic void setTags(List<Tag> tags) { this.tags = tags; }\n// }\n\n\n// Path: src/test/java/edu/sjsu/cmpe275/team6/SnippetShare/SnippetDaoTest.java\nimport edu.sjsu.cmpe275.team6.SnippetShare.dao.SnippetDAO;\nimport edu.sjsu.cmpe275.team6.SnippetShare.model.Snippet;\nimport org.junit.Test;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport java.util.ArrayList;\nimport java.util.List;\n\npackage edu.sjsu.cmpe275.team6.SnippetShare;\n\n\n\n/**\n * Created by Rucha on 5/1/15.\n */\npublic class SnippetDaoTest {\n\n    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"spring-module.xml\");", "next_line": "    SnippetDAO snippetDAO = (SnippetDAO) context.getBean(\"snippetDAO\");", "id": 9, "__internal_uuid__": "0c2d26c3-29c4-48c4-9709-36e75f8c7510"}
{"repo_name": "squeek502/AppleCore", "file_path": "java/squeek/applecore/example/ItemNonStandardFood.java", "context": "// Path: java/squeek/applecore/api/food/FoodValues.java\n// public class FoodValues\n// {\n// \tpublic final int hunger;\n// \tpublic final float saturationModifier;\n// \n// \tpublic FoodValues(int hunger, float saturationModifier)\n// \t{\n// \t\tthis.hunger = hunger;\n// \t\tthis.saturationModifier = saturationModifier;\n// \t}\n// \n// \tpublic FoodValues(FoodValues other)\n// \t{\n// \t\tthis(other.hunger, other.saturationModifier);\n// \t}\n// \n// \t/**\n// \t * @return The amount of saturation that the food values would provide, ignoring any limits.\n// \t */\n// \tpublic float getUnboundedSaturationIncrement()\n// \t{\n// \t\treturn hunger * saturationModifier * 2f;\n// \t}\n// \n// \t/**\n// \t * @return The bounded amount of saturation that the food values would provide to this player,\n// \t * taking their max hunger level into account.\n// \t */\n// \tpublic float getSaturationIncrement(EntityPlayer player)\n// \t{\n// \t\treturn Math.min(AppleCoreAPI.accessor.getMaxHunger(player), getUnboundedSaturationIncrement());\n// \t}\n// \n// \t/**\n// \t * See {@link IAppleCoreAccessor#getUnmodifiedFoodValues}\n// \t */\n// \tpublic static FoodValues getUnmodified(ItemStack itemStack)\n// \t{\n// \t\treturn AppleCoreAPI.accessor.getUnmodifiedFoodValues(itemStack);\n// \t}\n// \n// \t/**\n// \t * See {@link IAppleCoreAccessor#getFoodValues}\n// \t */\n// \tpublic static FoodValues get(@Nonnull ItemStack itemStack)\n// \t{\n// \t\treturn AppleCoreAPI.accessor.getFoodValues(itemStack);\n// \t}\n// \n// \t/**\n// \t * See {@link IAppleCoreAccessor#getFoodValuesForPlayer}\n// \t */\n// \tpublic static FoodValues get(@Nonnull ItemStack itemStack, EntityPlayer player)\n// \t{\n// \t\treturn AppleCoreAPI.accessor.getFoodValuesForPlayer(itemStack, player);\n// \t}\n// \n// \t@Override\n// \tpublic int hashCode()\n// \t{\n// \t\tfinal int prime = 31;\n// \t\tint result = 1;\n// \t\tresult = prime * result + hunger;\n// \t\tresult = prime * result + Float.floatToIntBits(saturationModifier);\n// \t\treturn result;\n// \t}\n// \n// \t@Override\n// \tpublic boolean equals(Object obj)\n// \t{\n// \t\tif (this == obj)\n// \t\t\treturn true;\n// \t\tif (obj == null)\n// \t\t\treturn false;\n// \t\tif (getClass() != obj.getClass())\n// \t\t\treturn false;\n// \t\tFoodValues other = (FoodValues) obj;\n// \t\tif (hunger != other.hunger)\n// \t\t\treturn false;\n// \t\tif (Float.floatToIntBits(saturationModifier) != Float.floatToIntBits(other.saturationModifier))\n// \t\t\treturn false;\n// \t\treturn true;\n// \t}\n// }\n// \n// Path: java/squeek/applecore/api/food/IEdible.java\n// public interface IEdible\n// {\n// \tFoodValues getFoodValues(@Nonnull ItemStack itemStack);\n// }\n// \n// Path: java/squeek/applecore/api/food/ItemFoodProxy.java\n// public class ItemFoodProxy extends ItemFood\n// {\n// \tpublic IEdible proxyEdible;\n// \n// \tpublic ItemFoodProxy(IEdible proxyEdible)\n// \t{\n// \t\tsuper(0, false);\n// \t\tthis.proxyEdible = proxyEdible;\n// \t}\n// \n// \t/**\n// \t * Applies the food values of the edible item to the player\n// \t */\n// \tpublic void onEaten(@Nonnull ItemStack itemStack, EntityPlayer player)\n// \t{\n// \t\tplayer.getFoodStats().addStats(this, itemStack);\n// \t}\n// \n// \t/**\n// \t * @return The hunger value of the edible item\n// \t */\n// \t@Override\n// \tpublic int getHealAmount(@Nonnull ItemStack stack)\n// \t{\n// \t\treturn proxyEdible.getFoodValues(stack).hunger;\n// \t}\n// \n// \t/**\n// \t * @return The saturation modifier of the edible item\n// \t */\n// \t@Override\n// \tpublic float getSaturationModifier(@Nonnull ItemStack stack)\n// \t{\n// \t\treturn proxyEdible.getFoodValues(stack).saturationModifier;\n// \t}\n// }\n\n", "import_statement": "import net.minecraft.creativetab.CreativeTabs;\nimport net.minecraft.entity.EntityLivingBase;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.init.SoundEvents;\nimport net.minecraft.item.EnumAction;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.stats.StatList;\nimport net.minecraft.util.ActionResult;\nimport net.minecraft.util.EnumActionResult;\nimport net.minecraft.util.EnumHand;\nimport net.minecraft.util.SoundCategory;\nimport net.minecraft.world.World;\nimport net.minecraftforge.fml.common.Loader;\nimport net.minecraftforge.fml.common.Optional;\nimport squeek.applecore.api.food.FoodValues;\nimport squeek.applecore.api.food.IEdible;\nimport squeek.applecore.api.food.ItemFoodProxy;\nimport javax.annotation.Nonnull;", "code": "package squeek.applecore.example;\n\n\n\n@Optional.Interface(iface = \"squeek.applecore.api.food.IEdible\", modid = \"applecore\")\npublic class ItemNonStandardFood extends Item implements IEdible\n{\n\tpublic ItemNonStandardFood()\n\t{\n\t\tthis.setCreativeTab(CreativeTabs.FOOD);\n\t}\n\n\t@Optional.Method(modid = \"applecore\")\n\t@Override", "prompt": "// Path: java/squeek/applecore/api/food/FoodValues.java\n// public class FoodValues\n// {\n// \tpublic final int hunger;\n// \tpublic final float saturationModifier;\n// \n// \tpublic FoodValues(int hunger, float saturationModifier)\n// \t{\n// \t\tthis.hunger = hunger;\n// \t\tthis.saturationModifier = saturationModifier;\n// \t}\n// \n// \tpublic FoodValues(FoodValues other)\n// \t{\n// \t\tthis(other.hunger, other.saturationModifier);\n// \t}\n// \n// \t/**\n// \t * @return The amount of saturation that the food values would provide, ignoring any limits.\n// \t */\n// \tpublic float getUnboundedSaturationIncrement()\n// \t{\n// \t\treturn hunger * saturationModifier * 2f;\n// \t}\n// \n// \t/**\n// \t * @return The bounded amount of saturation that the food values would provide to this player,\n// \t * taking their max hunger level into account.\n// \t */\n// \tpublic float getSaturationIncrement(EntityPlayer player)\n// \t{\n// \t\treturn Math.min(AppleCoreAPI.accessor.getMaxHunger(player), getUnboundedSaturationIncrement());\n// \t}\n// \n// \t/**\n// \t * See {@link IAppleCoreAccessor#getUnmodifiedFoodValues}\n// \t */\n// \tpublic static FoodValues getUnmodified(ItemStack itemStack)\n// \t{\n// \t\treturn AppleCoreAPI.accessor.getUnmodifiedFoodValues(itemStack);\n// \t}\n// \n// \t/**\n// \t * See {@link IAppleCoreAccessor#getFoodValues}\n// \t */\n// \tpublic static FoodValues get(@Nonnull ItemStack itemStack)\n// \t{\n// \t\treturn AppleCoreAPI.accessor.getFoodValues(itemStack);\n// \t}\n// \n// \t/**\n// \t * See {@link IAppleCoreAccessor#getFoodValuesForPlayer}\n// \t */\n// \tpublic static FoodValues get(@Nonnull ItemStack itemStack, EntityPlayer player)\n// \t{\n// \t\treturn AppleCoreAPI.accessor.getFoodValuesForPlayer(itemStack, player);\n// \t}\n// \n// \t@Override\n// \tpublic int hashCode()\n// \t{\n// \t\tfinal int prime = 31;\n// \t\tint result = 1;\n// \t\tresult = prime * result + hunger;\n// \t\tresult = prime * result + Float.floatToIntBits(saturationModifier);\n// \t\treturn result;\n// \t}\n// \n// \t@Override\n// \tpublic boolean equals(Object obj)\n// \t{\n// \t\tif (this == obj)\n// \t\t\treturn true;\n// \t\tif (obj == null)\n// \t\t\treturn false;\n// \t\tif (getClass() != obj.getClass())\n// \t\t\treturn false;\n// \t\tFoodValues other = (FoodValues) obj;\n// \t\tif (hunger != other.hunger)\n// \t\t\treturn false;\n// \t\tif (Float.floatToIntBits(saturationModifier) != Float.floatToIntBits(other.saturationModifier))\n// \t\t\treturn false;\n// \t\treturn true;\n// \t}\n// }\n// \n// Path: java/squeek/applecore/api/food/IEdible.java\n// public interface IEdible\n// {\n// \tFoodValues getFoodValues(@Nonnull ItemStack itemStack);\n// }\n// \n// Path: java/squeek/applecore/api/food/ItemFoodProxy.java\n// public class ItemFoodProxy extends ItemFood\n// {\n// \tpublic IEdible proxyEdible;\n// \n// \tpublic ItemFoodProxy(IEdible proxyEdible)\n// \t{\n// \t\tsuper(0, false);\n// \t\tthis.proxyEdible = proxyEdible;\n// \t}\n// \n// \t/**\n// \t * Applies the food values of the edible item to the player\n// \t */\n// \tpublic void onEaten(@Nonnull ItemStack itemStack, EntityPlayer player)\n// \t{\n// \t\tplayer.getFoodStats().addStats(this, itemStack);\n// \t}\n// \n// \t/**\n// \t * @return The hunger value of the edible item\n// \t */\n// \t@Override\n// \tpublic int getHealAmount(@Nonnull ItemStack stack)\n// \t{\n// \t\treturn proxyEdible.getFoodValues(stack).hunger;\n// \t}\n// \n// \t/**\n// \t * @return The saturation modifier of the edible item\n// \t */\n// \t@Override\n// \tpublic float getSaturationModifier(@Nonnull ItemStack stack)\n// \t{\n// \t\treturn proxyEdible.getFoodValues(stack).saturationModifier;\n// \t}\n// }\n\n\n// Path: java/squeek/applecore/example/ItemNonStandardFood.java\nimport net.minecraft.creativetab.CreativeTabs;\nimport net.minecraft.entity.EntityLivingBase;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.init.SoundEvents;\nimport net.minecraft.item.EnumAction;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.stats.StatList;\nimport net.minecraft.util.ActionResult;\nimport net.minecraft.util.EnumActionResult;\nimport net.minecraft.util.EnumHand;\nimport net.minecraft.util.SoundCategory;\nimport net.minecraft.world.World;\nimport net.minecraftforge.fml.common.Loader;\nimport net.minecraftforge.fml.common.Optional;\nimport squeek.applecore.api.food.FoodValues;\nimport squeek.applecore.api.food.IEdible;\nimport squeek.applecore.api.food.ItemFoodProxy;\nimport javax.annotation.Nonnull;\n\npackage squeek.applecore.example;\n\n\n\n@Optional.Interface(iface = \"squeek.applecore.api.food.IEdible\", modid = \"applecore\")\npublic class ItemNonStandardFood extends Item implements IEdible\n{\n\tpublic ItemNonStandardFood()\n\t{\n\t\tthis.setCreativeTab(CreativeTabs.FOOD);\n\t}\n\n\t@Optional.Method(modid = \"applecore\")\n\t@Override", "next_line": "\tpublic FoodValues getFoodValues(@Nonnull ItemStack itemStack)", "id": 10, "__internal_uuid__": "f5cfe26d-3b68-4cff-82e4-b8a62d9c3d76"}
{"repo_name": "craftercms/search", "file_path": "crafter-search-batch-indexer/src/main/java/org/craftercms/search/batch/utils/IndexingUtils.java", "context": "// Path: crafter-search-batch-indexer/src/main/java/org/craftercms/search/batch/UpdateDetail.java\n// public class UpdateDetail {\n// \n//     /**\n//      * Name of the author of the change\n//      */\n//     protected String author;\n// \n//     /**\n//      * Time when the change was made\n//      */\n//     protected Instant date;\n// \n//     public String getAuthor() {\n//         return author;\n//     }\n// \n//     public void setAuthor(final String author) {\n//         this.author = author;\n//     }\n// \n//     public Instant getDate() {\n//         return date;\n//     }\n// \n//     public void setDate(final Instant date) {\n//         this.date = date;\n//     }\n// \n//     @Override\n//     public String toString() {\n//         return \"UpdateDetail{\" + \"author='\" + author + '\\'' + \", date=\" + date + '}';\n//     }\n// \n// }\n\n", "import_statement": "import java.time.format.DateTimeFormatter;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.activation.FileTypeMap;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.craftercms.search.batch.UpdateDetail;\nimport org.springframework.util.MimeType;\nimport static java.time.ZoneOffset.UTC;", "code": "/*\n * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 3 as published by\n * the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage org.craftercms.search.batch.utils;\n\n\n\n\n/**\n * @author joseross\n */\npublic abstract class IndexingUtils {\n\n    public static final String FIELD_NAME_EDITED_BY = \"lastEditedBy\";\n    public static final String FIELD_NAME_EDITED_ON = \"lastEditedOn\";\n\n    public static boolean isMimeTypeSupported(FileTypeMap mimeTypesMap, List<String> supportedMimeTypes,\n                                              String filename) {\n        if (mimeTypesMap != null && CollectionUtils.isNotEmpty(supportedMimeTypes)) {\n            MimeType mimeType = MimeType.valueOf(mimeTypesMap.getContentType(filename.toLowerCase()));\n            return supportedMimeTypes.stream().anyMatch(type -> MimeType.valueOf(type).isCompatibleWith(mimeType));\n        } else {\n            return true;\n        }\n    }\n", "prompt": "// Path: crafter-search-batch-indexer/src/main/java/org/craftercms/search/batch/UpdateDetail.java\n// public class UpdateDetail {\n// \n//     /**\n//      * Name of the author of the change\n//      */\n//     protected String author;\n// \n//     /**\n//      * Time when the change was made\n//      */\n//     protected Instant date;\n// \n//     public String getAuthor() {\n//         return author;\n//     }\n// \n//     public void setAuthor(final String author) {\n//         this.author = author;\n//     }\n// \n//     public Instant getDate() {\n//         return date;\n//     }\n// \n//     public void setDate(final Instant date) {\n//         this.date = date;\n//     }\n// \n//     @Override\n//     public String toString() {\n//         return \"UpdateDetail{\" + \"author='\" + author + '\\'' + \", date=\" + date + '}';\n//     }\n// \n// }\n\n\n// Path: crafter-search-batch-indexer/src/main/java/org/craftercms/search/batch/utils/IndexingUtils.java\nimport java.time.format.DateTimeFormatter;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.activation.FileTypeMap;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.craftercms.search.batch.UpdateDetail;\nimport org.springframework.util.MimeType;\nimport static java.time.ZoneOffset.UTC;\n\n/*\n * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 3 as published by\n * the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage org.craftercms.search.batch.utils;\n\n\n\n\n/**\n * @author joseross\n */\npublic abstract class IndexingUtils {\n\n    public static final String FIELD_NAME_EDITED_BY = \"lastEditedBy\";\n    public static final String FIELD_NAME_EDITED_ON = \"lastEditedOn\";\n\n    public static boolean isMimeTypeSupported(FileTypeMap mimeTypesMap, List<String> supportedMimeTypes,\n                                              String filename) {\n        if (mimeTypesMap != null && CollectionUtils.isNotEmpty(supportedMimeTypes)) {\n            MimeType mimeType = MimeType.valueOf(mimeTypesMap.getContentType(filename.toLowerCase()));\n            return supportedMimeTypes.stream().anyMatch(type -> MimeType.valueOf(type).isCompatibleWith(mimeType));\n        } else {\n            return true;\n        }\n    }\n", "next_line": "    public static Map<String, Object> getAdditionalFields(UpdateDetail updateDetail) {", "id": 11, "__internal_uuid__": "55853e18-01e2-4f28-b0d6-04b70e1ab3af"}
{"repo_name": "elephantbirdconsulting/netkernel-contribution", "file_path": "urn.org.netkernel.neo4j.embedded/org/netkernel/neo4j/embedded/endpoint/Neo4jInstanceAccessor.java", "context": "// Path: urn.org.netkernel.neo4j.embedded/org/netkernel/neo4j/embedded/representation/Neo4jInstance.java\n// public class Neo4jInstance {\r\n// \tprivate final GraphDatabaseService mInstance;\r\n// \t\r\n// \tpublic Neo4jInstance(GraphDatabaseService aInstance) {\r\n// \t\tmInstance = aInstance;\r\n// \t}\r\n// \t\r\n// \tpublic GraphDatabaseService getInstance() {\r\n// \t\treturn mInstance;\r\n// \t}\r\n// \t\r\n// \tpublic String toString() {\r\n// \t\treturn mInstance.toString();\r\n// \t}\r\n// \t\r\n// \tprotected void finalize() throws Throwable {\r\n// \t    try {\r\n// \t        mInstance.shutdown();\r\n// \t    } finally {\r\n// \t        super.finalize();\r\n// \t    }\r\n// \t}\r\n// }\n\n", "import_statement": "import org.netkernel.layer0.nkf.*;\r\nimport org.netkernel.module.standard.endpoint.StandardAccessorImpl;\r\nimport org.neo4j.graphdb.factory.GraphDatabaseFactory;\r\nimport org.neo4j.graphdb.GraphDatabaseService;\r\nimport org.netkernel.neo4j.embedded.representation.Neo4jInstance;\r\nimport org.netkernel.layer0.representation.IHDSNode;\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.util.Map;\r\nimport java.util.concurrent.ConcurrentHashMap;\r", "code": "package org.netkernel.neo4j.embedded.endpoint;\r\n\r\n// Author: Tom Geudens\r\n// Date  : 2012/09/25\r\n\r\n// The usual suspects for an accessor\r\n\r\n// Processing\r\n\r\npublic class Neo4jInstanceAccessor extends StandardAccessorImpl {\r\n\tprivate static ConcurrentHashMap<String, GraphDatabaseService> mInstances;\r\n\tprivate static URL mBaseLocationURL = null;\r\n\t\r\n\tprivate String getDBPath(INKFRequestContext aContext) throws Exception {\r\n\t\tString vDBPath = null;\r\n\t\ttry {\r\n\t\t\tIHDSNode vNeo4jConfig = aContext.source(\"res:/etc/neo4jConfig.xml\",IHDSNode.class);\r\n\t\t\tString vPath = (String)vNeo4jConfig.getFirstValue(\"/config/path\");\r\n\t\t\t\r\n\t\t\tif (! vPath.endsWith(\"/\") ) {\r\n\t\t\t\tthrow new NKFException(\"DBPath name is invalid\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (vPath.startsWith(\"/\")) {\r\n\t\t\t\tvDBPath = vPath;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvDBPath = mBaseLocationURL.getFile() + vPath;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception e){\r\n\t\t\tvDBPath = mBaseLocationURL.getFile() + \"tmp/\";\r\n\t\t}\r\n\t\treturn vDBPath;\r\n\t}\r\n\r\n    class InstanceExpiry implements INKFExpiryFunction {\r", "prompt": "// Path: urn.org.netkernel.neo4j.embedded/org/netkernel/neo4j/embedded/representation/Neo4jInstance.java\n// public class Neo4jInstance {\r\n// \tprivate final GraphDatabaseService mInstance;\r\n// \t\r\n// \tpublic Neo4jInstance(GraphDatabaseService aInstance) {\r\n// \t\tmInstance = aInstance;\r\n// \t}\r\n// \t\r\n// \tpublic GraphDatabaseService getInstance() {\r\n// \t\treturn mInstance;\r\n// \t}\r\n// \t\r\n// \tpublic String toString() {\r\n// \t\treturn mInstance.toString();\r\n// \t}\r\n// \t\r\n// \tprotected void finalize() throws Throwable {\r\n// \t    try {\r\n// \t        mInstance.shutdown();\r\n// \t    } finally {\r\n// \t        super.finalize();\r\n// \t    }\r\n// \t}\r\n// }\n\n\n// Path: urn.org.netkernel.neo4j.embedded/org/netkernel/neo4j/embedded/endpoint/Neo4jInstanceAccessor.java\nimport org.netkernel.layer0.nkf.*;\r\nimport org.netkernel.module.standard.endpoint.StandardAccessorImpl;\r\nimport org.neo4j.graphdb.factory.GraphDatabaseFactory;\r\nimport org.neo4j.graphdb.GraphDatabaseService;\r\nimport org.netkernel.neo4j.embedded.representation.Neo4jInstance;\r\nimport org.netkernel.layer0.representation.IHDSNode;\r\nimport java.io.File;\r\nimport java.net.URL;\r\nimport java.util.Map;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\npackage org.netkernel.neo4j.embedded.endpoint;\r\n\r\n// Author: Tom Geudens\r\n// Date  : 2012/09/25\r\n\r\n// The usual suspects for an accessor\r\n\r\n// Processing\r\n\r\npublic class Neo4jInstanceAccessor extends StandardAccessorImpl {\r\n\tprivate static ConcurrentHashMap<String, GraphDatabaseService> mInstances;\r\n\tprivate static URL mBaseLocationURL = null;\r\n\t\r\n\tprivate String getDBPath(INKFRequestContext aContext) throws Exception {\r\n\t\tString vDBPath = null;\r\n\t\ttry {\r\n\t\t\tIHDSNode vNeo4jConfig = aContext.source(\"res:/etc/neo4jConfig.xml\",IHDSNode.class);\r\n\t\t\tString vPath = (String)vNeo4jConfig.getFirstValue(\"/config/path\");\r\n\t\t\t\r\n\t\t\tif (! vPath.endsWith(\"/\") ) {\r\n\t\t\t\tthrow new NKFException(\"DBPath name is invalid\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (vPath.startsWith(\"/\")) {\r\n\t\t\t\tvDBPath = vPath;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvDBPath = mBaseLocationURL.getFile() + vPath;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception e){\r\n\t\t\tvDBPath = mBaseLocationURL.getFile() + \"tmp/\";\r\n\t\t}\r\n\t\treturn vDBPath;\r\n\t}\r\n\r\n    class InstanceExpiry implements INKFExpiryFunction {\r", "next_line": "    \tprivate Neo4jInstance mInstanceRepresentation = null;\r", "id": 12, "__internal_uuid__": "8439f6e0-85e8-42ec-b513-e5b45fcedf11"}
{"repo_name": "CompEvol/beast2", "file_path": "src/beast/app/draw/Selection.java", "context": "// Path: src/beast/core/util/Log.java\n// public class Log {\n// \tstatic PrintStream nullStream = new PrintStream(new OutputStream() {\n// \t\t@Override\n// \t\tpublic void write(int b) throws IOException {\n// \t\t}\n// \t});\n// \t\n//     public enum Level {\n//         error, warning, info, debug, trace\n//     }\n// \n//     static Level level = Level.info;\n//     \n//     /** return log levels as array of Strings **/\n//     static public String [] values() {\n//     \tString [] values = new String[Level.values().length];\n//     \tfor (int i = 0; i < values.length; i++) {\n// \t\t\tvalues[i] = Level.values()[i].toString();\n// \t\t}\n//     \treturn values;\n//     }\n// \t\n// \tstatic public PrintStream err;\n// \tstatic public void err(String msg) {err.println(msg);}\n// \tstatic public PrintStream warning;\n// \tstatic public void warning(String msg) {warning.println(msg);}\n// \tstatic public PrintStream info;\n// \tstatic public void info(String msg) {info.println(msg);}\n// \tstatic public PrintStream debug;\n// \tstatic public void debug(String msg) {debug.println(msg);}\n// \tstatic public PrintStream trace;\n// \tstatic public void trace(String msg) {trace.println(msg);}\n// \n// \tstatic private PrintStream errIfOpen;\n// \tstatic private PrintStream warningIfOpen;\n// \tstatic private PrintStream infoIfOpen;\n// \tstatic private PrintStream debugIfOpen;\n// \tstatic private PrintStream traceIfOpen;\n// \n// \tstatic {\n// \t\t// Initialise streams here instead of when declaring the variables.\n// \t\t// This is a static method and these are static members. \n// \t\t//  These can suffer from different orders of initialisation, depending on JVM\n// \t\terr= System.err;\n// \t\twarning= System.err;\n// \t\tinfo = System.out;\n// \t\tdebug = System.out;\n// \t\ttrace = System.out;\n// \n// \t\terrIfOpen = System.err;\n// \t\twarningIfOpen = System.err;\n// \t\tinfoIfOpen = System.out;\n// \t\tdebugIfOpen = System.out;\n// \t\ttraceIfOpen = System.out;\n// \t\tif (System.getProperty(\"beast.log.level\") != null) {\n// \t\t\ttry {\n// \t\t\t\tlevel = Level.valueOf(System.getProperty(\"beast.log.level\"));\n// \t\t\t} catch (IllegalArgumentException e) {\n// \t\t\t\tSystem.err.println(\"beast.log.level is set to \" + System.getProperty(\"beast.log.level\") + \" \"\n// \t\t\t\t\t\t+\"but should be one of \" + Arrays.toString(Level.values()));\n// \t\t\t}\n// \t\t}\n// \t\tsetLevel(level);\n// \t}\n// \t\n// \tfinal static public int ERROR = 0;\n// \tfinal static public int WARNING = 1;\n// \tfinal static public int INFO = 2;\n// \tfinal static public int DEBUG = 3;\n// \tfinal static public int TRACE = 4;\n// \t\n// \t/** Determines the level of logging that actually\n// \t * reaches output. Only newLevel and below will \n// \t * be shown, the rest is suppressed.\n// \t */\n// \tstatic public void setLevel(Level newLevel) {\n// \t\tlevel = newLevel;\n// \t\t\n// \t\terrIfOpen = (err == nullStream ? errIfOpen : err);\n// \t\twarningIfOpen = (warning == nullStream ? warningIfOpen : warning);\n// \t\tinfoIfOpen = (info == nullStream ? infoIfOpen : info);\n// \t\tdebugIfOpen = (debug == nullStream ? debugIfOpen : debug);\n// \t\ttraceIfOpen = (trace == nullStream ? traceIfOpen : trace);\n// \n// \t\terr = nullStream;\n// \t\twarning = nullStream;\n// \t\tinfo = nullStream;\n// \t\tdebug = nullStream;\n// \t\ttrace = nullStream;\n// \t\t\n// \t\tswitch (level) {\n// \t\tcase trace:\n// \t\t\ttrace  = traceIfOpen;\n// \t\tcase debug:\n// \t\t\tdebug = debugIfOpen; \n// \t\tcase info:\n// \t\t\tinfo = infoIfOpen;\n// \t\tcase warning:\n// \t\t\twarning = warningIfOpen;\n// \t\tcase error:\n// \t\t\terr = errIfOpen;\n// \t\t}\n// \t}\n// \t\n// } // Log\n\n", "import_statement": "import java.util.ArrayList;\r\nimport java.util.List;\r\nimport beast.core.util.Log;\r", "code": "    } // contains\r\n\r\n    void addToSelection(int selectionIndex) {\r\n        if (contains(selectionIndex)) {\r\n            return;\r\n        }\r\n        m_Selection.add(new Integer(selectionIndex));\r\n        List<TrackPoint> tracker = m_doc.m_objects.get(selectionIndex).getTracker();\r\n        if (m_tracker == null) {\r\n            m_tracker = new ArrayList<>();\r\n        }\r\n        m_tracker.addAll(tracker);\r\n    } // addToSelection\r\n\r\n    void toggleSelection(int selectionIndex) {\r\n        if (!contains(selectionIndex)) {\r\n            addToSelection(selectionIndex);\r\n        } else {\r\n            m_tracker.removeAll(m_tracker);\r\n            for (int i = 0; i < m_Selection.size(); i++) {\r\n                if (selectionIndex == m_Selection.get(i).intValue()) {\r\n                    m_Selection.remove(i);\r\n                    i--;\r\n                } else {\r\n                    List<TrackPoint> tracker = m_doc.m_objects.get(m_Selection.get(i).intValue()).getTracker();\r\n                    m_tracker.addAll(tracker);\r\n                }\r\n            }\r\n        }\r\n        for (int i = 0; i < m_Selection.size(); i++) {\r", "prompt": "// Path: src/beast/core/util/Log.java\n// public class Log {\n// \tstatic PrintStream nullStream = new PrintStream(new OutputStream() {\n// \t\t@Override\n// \t\tpublic void write(int b) throws IOException {\n// \t\t}\n// \t});\n// \t\n//     public enum Level {\n//         error, warning, info, debug, trace\n//     }\n// \n//     static Level level = Level.info;\n//     \n//     /** return log levels as array of Strings **/\n//     static public String [] values() {\n//     \tString [] values = new String[Level.values().length];\n//     \tfor (int i = 0; i < values.length; i++) {\n// \t\t\tvalues[i] = Level.values()[i].toString();\n// \t\t}\n//     \treturn values;\n//     }\n// \t\n// \tstatic public PrintStream err;\n// \tstatic public void err(String msg) {err.println(msg);}\n// \tstatic public PrintStream warning;\n// \tstatic public void warning(String msg) {warning.println(msg);}\n// \tstatic public PrintStream info;\n// \tstatic public void info(String msg) {info.println(msg);}\n// \tstatic public PrintStream debug;\n// \tstatic public void debug(String msg) {debug.println(msg);}\n// \tstatic public PrintStream trace;\n// \tstatic public void trace(String msg) {trace.println(msg);}\n// \n// \tstatic private PrintStream errIfOpen;\n// \tstatic private PrintStream warningIfOpen;\n// \tstatic private PrintStream infoIfOpen;\n// \tstatic private PrintStream debugIfOpen;\n// \tstatic private PrintStream traceIfOpen;\n// \n// \tstatic {\n// \t\t// Initialise streams here instead of when declaring the variables.\n// \t\t// This is a static method and these are static members. \n// \t\t//  These can suffer from different orders of initialisation, depending on JVM\n// \t\terr= System.err;\n// \t\twarning= System.err;\n// \t\tinfo = System.out;\n// \t\tdebug = System.out;\n// \t\ttrace = System.out;\n// \n// \t\terrIfOpen = System.err;\n// \t\twarningIfOpen = System.err;\n// \t\tinfoIfOpen = System.out;\n// \t\tdebugIfOpen = System.out;\n// \t\ttraceIfOpen = System.out;\n// \t\tif (System.getProperty(\"beast.log.level\") != null) {\n// \t\t\ttry {\n// \t\t\t\tlevel = Level.valueOf(System.getProperty(\"beast.log.level\"));\n// \t\t\t} catch (IllegalArgumentException e) {\n// \t\t\t\tSystem.err.println(\"beast.log.level is set to \" + System.getProperty(\"beast.log.level\") + \" \"\n// \t\t\t\t\t\t+\"but should be one of \" + Arrays.toString(Level.values()));\n// \t\t\t}\n// \t\t}\n// \t\tsetLevel(level);\n// \t}\n// \t\n// \tfinal static public int ERROR = 0;\n// \tfinal static public int WARNING = 1;\n// \tfinal static public int INFO = 2;\n// \tfinal static public int DEBUG = 3;\n// \tfinal static public int TRACE = 4;\n// \t\n// \t/** Determines the level of logging that actually\n// \t * reaches output. Only newLevel and below will \n// \t * be shown, the rest is suppressed.\n// \t */\n// \tstatic public void setLevel(Level newLevel) {\n// \t\tlevel = newLevel;\n// \t\t\n// \t\terrIfOpen = (err == nullStream ? errIfOpen : err);\n// \t\twarningIfOpen = (warning == nullStream ? warningIfOpen : warning);\n// \t\tinfoIfOpen = (info == nullStream ? infoIfOpen : info);\n// \t\tdebugIfOpen = (debug == nullStream ? debugIfOpen : debug);\n// \t\ttraceIfOpen = (trace == nullStream ? traceIfOpen : trace);\n// \n// \t\terr = nullStream;\n// \t\twarning = nullStream;\n// \t\tinfo = nullStream;\n// \t\tdebug = nullStream;\n// \t\ttrace = nullStream;\n// \t\t\n// \t\tswitch (level) {\n// \t\tcase trace:\n// \t\t\ttrace  = traceIfOpen;\n// \t\tcase debug:\n// \t\t\tdebug = debugIfOpen; \n// \t\tcase info:\n// \t\t\tinfo = infoIfOpen;\n// \t\tcase warning:\n// \t\t\twarning = warningIfOpen;\n// \t\tcase error:\n// \t\t\terr = errIfOpen;\n// \t\t}\n// \t}\n// \t\n// } // Log\n\n\n// Path: src/beast/app/draw/Selection.java\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport beast.core.util.Log;\r\n\n    } // contains\r\n\r\n    void addToSelection(int selectionIndex) {\r\n        if (contains(selectionIndex)) {\r\n            return;\r\n        }\r\n        m_Selection.add(new Integer(selectionIndex));\r\n        List<TrackPoint> tracker = m_doc.m_objects.get(selectionIndex).getTracker();\r\n        if (m_tracker == null) {\r\n            m_tracker = new ArrayList<>();\r\n        }\r\n        m_tracker.addAll(tracker);\r\n    } // addToSelection\r\n\r\n    void toggleSelection(int selectionIndex) {\r\n        if (!contains(selectionIndex)) {\r\n            addToSelection(selectionIndex);\r\n        } else {\r\n            m_tracker.removeAll(m_tracker);\r\n            for (int i = 0; i < m_Selection.size(); i++) {\r\n                if (selectionIndex == m_Selection.get(i).intValue()) {\r\n                    m_Selection.remove(i);\r\n                    i--;\r\n                } else {\r\n                    List<TrackPoint> tracker = m_doc.m_objects.get(m_Selection.get(i).intValue()).getTracker();\r\n                    m_tracker.addAll(tracker);\r\n                }\r\n            }\r\n        }\r\n        for (int i = 0; i < m_Selection.size(); i++) {\r", "next_line": "        \tLog.warning.print(m_Selection.get(i) + \" \");\r", "id": 13, "__internal_uuid__": "fb22ea22-667a-4cda-8ed2-e8e0b4a3430d"}
{"repo_name": "TianLangStudio/DataXServer", "file_path": "core/src/main/java/org/tianlangstudio/data/hamal/core/handler/ITaskHandler.java", "context": "// Path: common/src/main/java/org/tianlangstudio/data/hamal/common/TaskCost.java\n// public class TaskCost implements Serializable {\n//     private static final long serialVersionUID = 1l;\n//     private Date beginTime;\n//     private Date endTime;\n//     private DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss SSS\");\n//     public TaskCost() {\n// \n//     }\n//     public TaskCost(Date beginTime) {\n//         this.beginTime = beginTime;\n//     }\n//     public TaskCost(Date beginTime, Date endTime) {\n//         this.endTime = endTime;\n//     }\n// \n//     public String getBeginTime() {\n//         if(beginTime != null) {\n//             return dateFormat.format(beginTime);\n//         }\n//         return \"\";\n//     }\n//     public Date getBeginDateTime() {\n//         return this.beginTime;\n//     }\n//     public void setBeginTime(Date beginTime) {\n//         this.beginTime = beginTime;\n//     }\n// \n//     public String getEndTime() {\n//         if(endTime != null) {\n//             return dateFormat.format(endTime);\n//         }\n// \n//         return \"\";\n//     }\n//     public Date getEndDateTime() {\n//         return this.endTime;\n//     }\n//     public void setEndTime(Date endTime) {\n//         this.endTime = endTime;\n//     }\n//     public Long getCostMs() {\n//         if(endTime == null || beginTime == null) {\n//             return -1l;\n//         }\n//         return this.endTime.getTime() - this.beginTime.getTime();\n//     }\n//     public String getCost() {\n//         return getCostMs()/1000 + \"s\";\n//     }\n// }\n// \n// Path: common/src/main/java/org/tianlangstudio/data/hamal/common/TaskResult.java\n// public class TaskResult implements Serializable {\n//     private static final long serialVersionUID = 1l;\n//     private boolean success = true;\n//     private String msg = \"success\";\n//     public TaskResult() {\n//         success = true;\n//         msg = MSG_SUCCESS;\n//     }\n//     public TaskResult(String errorMsg) {\n//         this.success = false;\n//         this.msg = errorMsg;\n//     }\n//     public TaskResult(Throwable throwable) {\n//         this(ExceptionUtil.trace(throwable));\n//     }\n//     public void setErrorMsg(String errorMsg) {\n//         this.success = false;\n//         this.msg = errorMsg;\n//     }\n//     public boolean isSuccess() {\n//         return success;\n//     }\n//     public void setSuccess(boolean success) {\n//         this.success = success;\n//     }\n// \n//     public String getMsg() {\n//         return msg;\n//     }\n// \n//     public void setMsg(String msg) {\n//         this.msg = msg;\n//     }\n// }\n\n", "import_statement": "import org.tianlangstudio.data.hamal.common.TaskCost;\nimport org.tianlangstudio.data.hamal.common.TaskResult;\nimport java.util.Map;", "code": "package org.tianlangstudio.data.hamal.core.handler;\n\n\n\n/**\n * Created by zhuhq on 17-4-13.\n */\npublic interface ITaskHandler {\n\n     String submitTask(String taskConfPath);\n\n\n     String submitTaskWithParams(final String taskConfPath, final Map<String, String> params);\n\n     String getTaskStatus(String taskId);\n     TaskResult getTaskResult(String taskId);", "prompt": "// Path: common/src/main/java/org/tianlangstudio/data/hamal/common/TaskCost.java\n// public class TaskCost implements Serializable {\n//     private static final long serialVersionUID = 1l;\n//     private Date beginTime;\n//     private Date endTime;\n//     private DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss SSS\");\n//     public TaskCost() {\n// \n//     }\n//     public TaskCost(Date beginTime) {\n//         this.beginTime = beginTime;\n//     }\n//     public TaskCost(Date beginTime, Date endTime) {\n//         this.endTime = endTime;\n//     }\n// \n//     public String getBeginTime() {\n//         if(beginTime != null) {\n//             return dateFormat.format(beginTime);\n//         }\n//         return \"\";\n//     }\n//     public Date getBeginDateTime() {\n//         return this.beginTime;\n//     }\n//     public void setBeginTime(Date beginTime) {\n//         this.beginTime = beginTime;\n//     }\n// \n//     public String getEndTime() {\n//         if(endTime != null) {\n//             return dateFormat.format(endTime);\n//         }\n// \n//         return \"\";\n//     }\n//     public Date getEndDateTime() {\n//         return this.endTime;\n//     }\n//     public void setEndTime(Date endTime) {\n//         this.endTime = endTime;\n//     }\n//     public Long getCostMs() {\n//         if(endTime == null || beginTime == null) {\n//             return -1l;\n//         }\n//         return this.endTime.getTime() - this.beginTime.getTime();\n//     }\n//     public String getCost() {\n//         return getCostMs()/1000 + \"s\";\n//     }\n// }\n// \n// Path: common/src/main/java/org/tianlangstudio/data/hamal/common/TaskResult.java\n// public class TaskResult implements Serializable {\n//     private static final long serialVersionUID = 1l;\n//     private boolean success = true;\n//     private String msg = \"success\";\n//     public TaskResult() {\n//         success = true;\n//         msg = MSG_SUCCESS;\n//     }\n//     public TaskResult(String errorMsg) {\n//         this.success = false;\n//         this.msg = errorMsg;\n//     }\n//     public TaskResult(Throwable throwable) {\n//         this(ExceptionUtil.trace(throwable));\n//     }\n//     public void setErrorMsg(String errorMsg) {\n//         this.success = false;\n//         this.msg = errorMsg;\n//     }\n//     public boolean isSuccess() {\n//         return success;\n//     }\n//     public void setSuccess(boolean success) {\n//         this.success = success;\n//     }\n// \n//     public String getMsg() {\n//         return msg;\n//     }\n// \n//     public void setMsg(String msg) {\n//         this.msg = msg;\n//     }\n// }\n\n\n// Path: core/src/main/java/org/tianlangstudio/data/hamal/core/handler/ITaskHandler.java\nimport org.tianlangstudio.data.hamal.common.TaskCost;\nimport org.tianlangstudio.data.hamal.common.TaskResult;\nimport java.util.Map;\n\npackage org.tianlangstudio.data.hamal.core.handler;\n\n\n\n/**\n * Created by zhuhq on 17-4-13.\n */\npublic interface ITaskHandler {\n\n     String submitTask(String taskConfPath);\n\n\n     String submitTaskWithParams(final String taskConfPath, final Map<String, String> params);\n\n     String getTaskStatus(String taskId);\n     TaskResult getTaskResult(String taskId);", "next_line": "     TaskCost getTaskCost(String taskId);", "id": 14, "__internal_uuid__": "d25814b1-a616-4d23-af18-9a884c661147"}
{"repo_name": "mrflip/caliper", "file_path": "caliper/src/main/java/com/google/caliper/bridge/LogMessageParser.java", "context": "// Path: caliper/src/main/java/com/google/caliper/bridge/CaliperControlLogMessage.java\n// static final String CONTROL_PREFIX = SEPARATOR + \"\\u0279\\u01DDd\\u0131\\u0283\\u0250\\u2183\"\n//     + SEPARATOR;\n// \n// Path: caliper/src/main/java/com/google/caliper/bridge/CaliperControlLogMessage.java\n// static final Splitter CONTROL_TYPE_SPLITTER = Splitter.on(SEPARATOR).limit(2);\n\n", "import_statement": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport static com.google.caliper.bridge.CaliperControlLogMessage.CONTROL_PREFIX;\nimport static com.google.caliper.bridge.CaliperControlLogMessage.CONTROL_TYPE_SPLITTER;\nimport static java.util.concurrent.TimeUnit.SECONDS;\nimport com.google.caliper.util.Parser;\nimport com.google.caliper.util.ShortDuration;\nimport com.google.common.collect.ImmutableBiMap;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.gson.Gson;\nimport com.google.inject.Inject;\nimport java.math.BigDecimal;\nimport java.util.Set;", "code": "    this.typeMap = createMapForTypes(ImmutableSet.of(\n        FailureLogMessage.class,\n        StartMeasurementLogMessage.class,\n        StopMeasurementLogMessage.class,\n        VmPropertiesLogMessage.class));\n  }\n\n  private static ImmutableBiMap<Class<? extends CaliperControlLogMessage>, String>\n      createMapForTypes(Set<Class<? extends CaliperControlLogMessage>> messageTypes) {\n    ImmutableBiMap.Builder<Class<? extends CaliperControlLogMessage>, String> builder =\n        ImmutableBiMap.builder();\n    for (Class<? extends CaliperControlLogMessage> messageType : messageTypes) {\n      builder.put(messageType, messageType.getSimpleName());\n    }\n    return builder.build();\n  }\n\n  private static final Pattern GC_PATTERN =\n      Pattern.compile(\".*\\\\[(?:(Full) )?GC.*(\\\\d+\\\\.\\\\d+) secs\\\\]\");\n  private static final Pattern JIT_PATTERN =\n      Pattern.compile(\".*::.*( \\\\(((\\\\d+ bytes)|(static))\\\\))?\");\n  private static final Pattern VM_OPTION_PATTERN =\n      Pattern.compile(\"\\\\s*(\\\\w+)\\\\s+(\\\\w+)\\\\s+:?=\\\\s+([^\\\\s]*)\\\\s+\\\\{([^}]*)\\\\}\\\\s*\");\n\n\n  @Override public LogMessage parse(CharSequence text) {\n    // TODO(gak): do this stuff in terms of CharSequence instead of String\n    String string = text.toString();\n    if (string.startsWith(CONTROL_PREFIX)) {\n      ImmutableList<String> parts = ImmutableList.copyOf(", "prompt": "// Path: caliper/src/main/java/com/google/caliper/bridge/CaliperControlLogMessage.java\n// static final String CONTROL_PREFIX = SEPARATOR + \"\\u0279\\u01DDd\\u0131\\u0283\\u0250\\u2183\"\n//     + SEPARATOR;\n// \n// Path: caliper/src/main/java/com/google/caliper/bridge/CaliperControlLogMessage.java\n// static final Splitter CONTROL_TYPE_SPLITTER = Splitter.on(SEPARATOR).limit(2);\n\n\n// Path: caliper/src/main/java/com/google/caliper/bridge/LogMessageParser.java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport static com.google.caliper.bridge.CaliperControlLogMessage.CONTROL_PREFIX;\nimport static com.google.caliper.bridge.CaliperControlLogMessage.CONTROL_TYPE_SPLITTER;\nimport static java.util.concurrent.TimeUnit.SECONDS;\nimport com.google.caliper.util.Parser;\nimport com.google.caliper.util.ShortDuration;\nimport com.google.common.collect.ImmutableBiMap;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.gson.Gson;\nimport com.google.inject.Inject;\nimport java.math.BigDecimal;\nimport java.util.Set;\n\n    this.typeMap = createMapForTypes(ImmutableSet.of(\n        FailureLogMessage.class,\n        StartMeasurementLogMessage.class,\n        StopMeasurementLogMessage.class,\n        VmPropertiesLogMessage.class));\n  }\n\n  private static ImmutableBiMap<Class<? extends CaliperControlLogMessage>, String>\n      createMapForTypes(Set<Class<? extends CaliperControlLogMessage>> messageTypes) {\n    ImmutableBiMap.Builder<Class<? extends CaliperControlLogMessage>, String> builder =\n        ImmutableBiMap.builder();\n    for (Class<? extends CaliperControlLogMessage> messageType : messageTypes) {\n      builder.put(messageType, messageType.getSimpleName());\n    }\n    return builder.build();\n  }\n\n  private static final Pattern GC_PATTERN =\n      Pattern.compile(\".*\\\\[(?:(Full) )?GC.*(\\\\d+\\\\.\\\\d+) secs\\\\]\");\n  private static final Pattern JIT_PATTERN =\n      Pattern.compile(\".*::.*( \\\\(((\\\\d+ bytes)|(static))\\\\))?\");\n  private static final Pattern VM_OPTION_PATTERN =\n      Pattern.compile(\"\\\\s*(\\\\w+)\\\\s+(\\\\w+)\\\\s+:?=\\\\s+([^\\\\s]*)\\\\s+\\\\{([^}]*)\\\\}\\\\s*\");\n\n\n  @Override public LogMessage parse(CharSequence text) {\n    // TODO(gak): do this stuff in terms of CharSequence instead of String\n    String string = text.toString();\n    if (string.startsWith(CONTROL_PREFIX)) {\n      ImmutableList<String> parts = ImmutableList.copyOf(", "next_line": "          CONTROL_TYPE_SPLITTER.split(string.substring(CONTROL_PREFIX.length())));", "id": 15, "__internal_uuid__": "bb86f3af-e443-4ce6-b70a-b87dde334838"}
{"repo_name": "ragdroid/rxify", "file_path": "app/src/main/java/com/ragdroid/rxify/dagger/CLEnumKey.java", "context": "// Path: app/src/main/java/com/ragdroid/rxify/entity/CodeLabData.java\n// public enum CodeLabData {\n// \n//     EMPTY(0, \"Emptiness\"),\n//     JUST(1, \"Justify\"),\n//     FROM(2, \"From\"),\n//     NEVER(3, \"Neverland\"),\n//     INTERVAL(4, \"Interval Infinitum\"),\n//     ERROR(5, \"Error BOOM!\"),\n//     RANGE(6, \"Hogwarts Ranger\"),\n//     INTERVAL_RANGE(7, \"Interval Ranger\"),\n//     TIMER(8, \"Tick Tock Timer\"),\n//     FILTER(9, \"Filterrum\"),\n//     DISTINCT(10, \"Distincto\"),\n//     TAKE(11, \"Takeo\"),\n//     TAKE_UNTIL(12, \"Takun til\"),\n//     SKIP(13, \"Skippum\"),\n//     REDUCE(14, \"Reducto\"),\n//     MAP(15, \"Mapio\"),\n//     FLATMAP(16, \"Flatmappum\"),\n//     ASSIGNMENT(17, \"Assignment Evaluator\"),\n//     BATTLE(18, \"The Battle\"),\n//     BATTLE_FLOW(19, \"The Battle Flow\"),\n//     THREAD(20, \"Threading\"),\n//     CHILL(21, \"ChilledOut\"),\n//     TIME_TURNER(22, \"TimeTurner\"),\n//     SUBJECT(23, \"Subject\"),\n//     RELAY(24, \"Relay\");\n// \n// \n//     public String getName() {\n//         return name;\n//     }\n// \n//     public int getId() {\n//         return id;\n//     }\n// \n//     private final String name;\n//     private final int id;\n// \n//     CodeLabData(int id, String name) {\n//         this.name = name;\n//         this.id = id;\n//     }\n// \n//     public static CodeLabData getCodeLab(int id) {\n//         switch (id) {\n//             case 0 :\n//                 return EMPTY;\n//             case 1 :\n//                 return JUST;\n//             case 2 :\n//                 return FROM;\n//             case 3 :\n//                 return NEVER;\n//             case 4 :\n//                 return INTERVAL;\n//             case 5 :\n//                 return ERROR;\n//             case 6 :\n//                 return RANGE;\n//             case 7 :\n//                 return INTERVAL_RANGE;\n//             case 8 :\n//                 return TIMER;\n//             case 9 :\n//                 return FILTER;\n//             case 10:\n//                 return DISTINCT;\n//             case 11:\n//                 return TAKE;\n//             case 12:\n//                 return TAKE_UNTIL;\n//             case 13:\n//                 return SKIP;\n//             case 14:\n//                 return REDUCE;\n//             case 15:\n//                 return MAP;\n//             case 16:\n//                 return FLATMAP;\n//             case 17:\n//                 return ASSIGNMENT;\n//             case 18:\n//                 return BATTLE;\n//             case 19:\n//                 return BATTLE_FLOW;\n//             case 20:\n//                 return THREAD;\n//             case 22:\n//                 return TIME_TURNER;\n//             case 23:\n//                 return SUBJECT;\n//             case 24:\n//                 return RELAY;\n//             case 21:\n//             default:\n//                 return CHILL;\n//         }\n//     }\n// \n// \n// \n// }\n\n", "import_statement": "import com.ragdroid.rxify.entity.CodeLabData;\nimport dagger.MapKey;", "code": "package com.ragdroid.rxify.dagger;\n\n\n\n/**\n * Created by garimajain on 17/05/17.\n */\n\n@MapKey\npublic @interface CLEnumKey {\n", "prompt": "// Path: app/src/main/java/com/ragdroid/rxify/entity/CodeLabData.java\n// public enum CodeLabData {\n// \n//     EMPTY(0, \"Emptiness\"),\n//     JUST(1, \"Justify\"),\n//     FROM(2, \"From\"),\n//     NEVER(3, \"Neverland\"),\n//     INTERVAL(4, \"Interval Infinitum\"),\n//     ERROR(5, \"Error BOOM!\"),\n//     RANGE(6, \"Hogwarts Ranger\"),\n//     INTERVAL_RANGE(7, \"Interval Ranger\"),\n//     TIMER(8, \"Tick Tock Timer\"),\n//     FILTER(9, \"Filterrum\"),\n//     DISTINCT(10, \"Distincto\"),\n//     TAKE(11, \"Takeo\"),\n//     TAKE_UNTIL(12, \"Takun til\"),\n//     SKIP(13, \"Skippum\"),\n//     REDUCE(14, \"Reducto\"),\n//     MAP(15, \"Mapio\"),\n//     FLATMAP(16, \"Flatmappum\"),\n//     ASSIGNMENT(17, \"Assignment Evaluator\"),\n//     BATTLE(18, \"The Battle\"),\n//     BATTLE_FLOW(19, \"The Battle Flow\"),\n//     THREAD(20, \"Threading\"),\n//     CHILL(21, \"ChilledOut\"),\n//     TIME_TURNER(22, \"TimeTurner\"),\n//     SUBJECT(23, \"Subject\"),\n//     RELAY(24, \"Relay\");\n// \n// \n//     public String getName() {\n//         return name;\n//     }\n// \n//     public int getId() {\n//         return id;\n//     }\n// \n//     private final String name;\n//     private final int id;\n// \n//     CodeLabData(int id, String name) {\n//         this.name = name;\n//         this.id = id;\n//     }\n// \n//     public static CodeLabData getCodeLab(int id) {\n//         switch (id) {\n//             case 0 :\n//                 return EMPTY;\n//             case 1 :\n//                 return JUST;\n//             case 2 :\n//                 return FROM;\n//             case 3 :\n//                 return NEVER;\n//             case 4 :\n//                 return INTERVAL;\n//             case 5 :\n//                 return ERROR;\n//             case 6 :\n//                 return RANGE;\n//             case 7 :\n//                 return INTERVAL_RANGE;\n//             case 8 :\n//                 return TIMER;\n//             case 9 :\n//                 return FILTER;\n//             case 10:\n//                 return DISTINCT;\n//             case 11:\n//                 return TAKE;\n//             case 12:\n//                 return TAKE_UNTIL;\n//             case 13:\n//                 return SKIP;\n//             case 14:\n//                 return REDUCE;\n//             case 15:\n//                 return MAP;\n//             case 16:\n//                 return FLATMAP;\n//             case 17:\n//                 return ASSIGNMENT;\n//             case 18:\n//                 return BATTLE;\n//             case 19:\n//                 return BATTLE_FLOW;\n//             case 20:\n//                 return THREAD;\n//             case 22:\n//                 return TIME_TURNER;\n//             case 23:\n//                 return SUBJECT;\n//             case 24:\n//                 return RELAY;\n//             case 21:\n//             default:\n//                 return CHILL;\n//         }\n//     }\n// \n// \n// \n// }\n\n\n// Path: app/src/main/java/com/ragdroid/rxify/dagger/CLEnumKey.java\nimport com.ragdroid.rxify.entity.CodeLabData;\nimport dagger.MapKey;\n\npackage com.ragdroid.rxify.dagger;\n\n\n\n/**\n * Created by garimajain on 17/05/17.\n */\n\n@MapKey\npublic @interface CLEnumKey {\n", "next_line": "    CodeLabData value();", "id": 16, "__internal_uuid__": "4a3b7d19-8a4a-4a2b-83e9-1ca93a57441a"}
{"repo_name": "psfu/waterwave", "file_path": "src/main/java/waterwave/net/bio/BioServer.java", "context": "// Path: src/main/java/shui/common/buffer/BufferPool.java\n// public class BufferPool {\r\n// \r\n// \tLinkedBlockingQueue<BufferSimple> bq = new LinkedBlockingQueue<BufferSimple>(500);\r\n// \tArrayList<BufferSimple> bs = null;\r\n// \r\n// \tpublic Logger log = new SimpleLogger();\r\n// \r\n// \tint size;\r\n// \tint bsize;\r\n// \r\n// \tint i = 0;\r\n// \r\n// \tAtomicInteger c = new AtomicInteger(0);\r\n// \r\n// \t/**\r\n// \t * \r\n// \t * @param size\r\n// \t * @param bsize\r\n// \t */\r\n// \tpublic BufferPool(int size, int bsize) {\r\n// \t\tthis.size = size;\r\n// \t\tbs = new ArrayList<BufferSimple>(size);\r\n// \t\tfor (; i < size; i++) {\r\n// \t\t\tBufferSimple b = new BufferSimple(i, bsize);\r\n// \t\t\tbs.add(b);\r\n// \t\t\tbq.add(b);\r\n// \t\t}\r\n// \t}\r\n// \r\n// \tpublic void checkBuffer() {\r\n// \t\tint size = bq.size();\r\n// \t\tint out = c.get();\r\n// \r\n// \t\tint total = size + out;\r\n// \t\tif (total < size) {\r\n// \r\n// \t\t}\r\n// \t}\r\n// \r\n// \tpublic BufferSimple getBuffer() {\r\n// \t\tBufferSimple b;\r\n// \t\ttry {\r\n// \t\t\tb = bq.take();\r\n// \t\t\tb.stat = 1;\r\n// \t\t\tc.getAndIncrement();\r\n// \t\t} catch (InterruptedException e) {\r\n// \t\t\te.printStackTrace();\r\n// \t\t\treturn null;\r\n// \t\t}\r\n// \t\treturn b;\r\n// \t}\r\n// \r\n// \tpublic void finishBuffer(BufferSimple b) {\r\n// \t\tif (b.stat == 0) {\r\n// \t\t\treturn;\r\n// \t\t}\r\n// \t\tb.stat = 0;\r\n// \t\tb.pos = 0;\r\n// \t\tboolean offer = bq.offer(b);\r\n// \r\n// \t\tif (!offer) {\r\n// \t\t\tlog.log(10, \"offer bqw fail\");\r\n// \t\t\treturn;\r\n// \t\t}\r\n// \t\tc.decrementAndGet();\r\n// \t}\r\n// \t\r\n// \tpublic void giveupBuffer(BufferSimple b) {\r\n// \t\tfinishBuffer(b);\r\n// \t}\r\n// \r\n// \tpublic static void main(String[] args) {\r\n// \t\t// TODO Auto-generated method stub\r\n// \r\n// \t}\r\n// \r\n// }\r\n// \n// Path: src/main/java/shui/common/service/SingleThreadService.java\n// public abstract class SingleThreadService extends Thread implements Runnable {\r\n// \tprotected Logger log = new SimpleLogger(true);\r\n// \r\n// \tpublic abstract void init(Properties pp);\r\n// \t\r\n// \tpublic abstract void onExit();\r\n// \t\r\n// \tpublic abstract void onTime();\r\n// \t\r\n// \tpublic static void log(Object o) {\r\n// \t\tLogger.log(o);\r\n// \t}\r\n// \r\n// \tpublic void sleep(int time) {\r\n// \t\ttry {\r\n// \t\t\tThread.sleep(time);\r\n// \t\t} catch (InterruptedException e) {\r\n// \t\t\tlog.log(9, e);\r\n// \t\t}\r\n// \t}\r\n// \t\r\n// \tprotected void sysExit() {\r\n// \t\t\r\n// \t\tlog.log(9, \"---> finish and exit ...\");\r\n// \t\t\r\n// \t\tThread t = new Thread() {\r\n// \t\t\t@Override\r\n// \t\t\tpublic void run() {\r\n// \t\t\t\ttry {\r\n// \t\t\t\t\tThread.sleep(15000);\r\n// \t\t\t\t} catch (InterruptedException e) {\r\n// \t\t\t\t\te.printStackTrace();\r\n// \t\t\t\t}\r\n// \t\t\t\tSystem.exit(0);\r\n// \t\t\t}\r\n// \r\n// \t\t};\r\n// \t\tt.start();\r\n// \t}\r\n// \r\n// \tpublic static void main(String[] args) {\r\n// \t\t// TODO Auto-generated method stub\r\n// \r\n// \t}\r\n// \r\n// }\r\n// \n// Path: src/main/java/waterwave/net/bio/define/BioDataDealerFactory.java\n// public interface BioDataDealerFactory {\r\n// \tpublic abstract BioServerHandler getBioServerDataDealer();\r\n// }\r\n// \n// Path: src/main/java/waterwave/net/bio/define/BioServerHandler.java\n// public interface BioServerHandler extends Runnable{\r\n// \t\r\n// \tpublic void init(BioServerChannel c);\r\n// \r\n// \tvoid serverOnError(BioServerChannel c,Throwable e, BufferSimple b);\r\n// \tvoid serverOnClose(BioServerChannel channel);\r\n// \t\r\n// \r\n// }\r\n\n", "import_statement": "import java.io.IOException;\r\nimport java.net.InetSocketAddress;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.Properties;\r\nimport java.util.concurrent.ExecutorService;\r\nimport shui.common.buffer.BufferPool;\r\nimport shui.common.service.SingleThreadService;\r\nimport waterwave.net.bio.define.BioDataDealerFactory;\r\nimport waterwave.net.bio.define.BioServerHandler;\r", "code": "\r\n\r\n\t@Override\r\n\tpublic void run() {\r\n\t\tfor (;;) {\r\n\t\t\ttry {\r\n\t\t\t\tSocket s = ss.accept();\r\n\t\t\t\ts.setTcpNoDelay(true);\r\n\t\t\t\ts.setSoTimeout(TIMEOUT);\r\n\t\t\t\ts.setReceiveBufferSize(RCVBUF);\r\n\r\n\t\t\t\tif (closed) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbioAccept(s);\r\n\t\t\t\t// ps.dealSocket(s);\r\n\t\t\t\tdealNewConnection(s);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate final void bioAccept(Socket s) {\r\n\t\tInetSocketAddress rsa = (InetSocketAddress) s.getRemoteSocketAddress();\r\n\t\t//log.log(1 \"BioServer: accept \", rsa.getHostName(), rsa.getPort());\r\n\t}\r\n\r\n\tprivate void dealNewConnection(Socket s) {\r\n\t\tBioServerChannel c = new BioServerChannel(s, bp, this);\r", "prompt": "// Path: src/main/java/shui/common/buffer/BufferPool.java\n// public class BufferPool {\r\n// \r\n// \tLinkedBlockingQueue<BufferSimple> bq = new LinkedBlockingQueue<BufferSimple>(500);\r\n// \tArrayList<BufferSimple> bs = null;\r\n// \r\n// \tpublic Logger log = new SimpleLogger();\r\n// \r\n// \tint size;\r\n// \tint bsize;\r\n// \r\n// \tint i = 0;\r\n// \r\n// \tAtomicInteger c = new AtomicInteger(0);\r\n// \r\n// \t/**\r\n// \t * \r\n// \t * @param size\r\n// \t * @param bsize\r\n// \t */\r\n// \tpublic BufferPool(int size, int bsize) {\r\n// \t\tthis.size = size;\r\n// \t\tbs = new ArrayList<BufferSimple>(size);\r\n// \t\tfor (; i < size; i++) {\r\n// \t\t\tBufferSimple b = new BufferSimple(i, bsize);\r\n// \t\t\tbs.add(b);\r\n// \t\t\tbq.add(b);\r\n// \t\t}\r\n// \t}\r\n// \r\n// \tpublic void checkBuffer() {\r\n// \t\tint size = bq.size();\r\n// \t\tint out = c.get();\r\n// \r\n// \t\tint total = size + out;\r\n// \t\tif (total < size) {\r\n// \r\n// \t\t}\r\n// \t}\r\n// \r\n// \tpublic BufferSimple getBuffer() {\r\n// \t\tBufferSimple b;\r\n// \t\ttry {\r\n// \t\t\tb = bq.take();\r\n// \t\t\tb.stat = 1;\r\n// \t\t\tc.getAndIncrement();\r\n// \t\t} catch (InterruptedException e) {\r\n// \t\t\te.printStackTrace();\r\n// \t\t\treturn null;\r\n// \t\t}\r\n// \t\treturn b;\r\n// \t}\r\n// \r\n// \tpublic void finishBuffer(BufferSimple b) {\r\n// \t\tif (b.stat == 0) {\r\n// \t\t\treturn;\r\n// \t\t}\r\n// \t\tb.stat = 0;\r\n// \t\tb.pos = 0;\r\n// \t\tboolean offer = bq.offer(b);\r\n// \r\n// \t\tif (!offer) {\r\n// \t\t\tlog.log(10, \"offer bqw fail\");\r\n// \t\t\treturn;\r\n// \t\t}\r\n// \t\tc.decrementAndGet();\r\n// \t}\r\n// \t\r\n// \tpublic void giveupBuffer(BufferSimple b) {\r\n// \t\tfinishBuffer(b);\r\n// \t}\r\n// \r\n// \tpublic static void main(String[] args) {\r\n// \t\t// TODO Auto-generated method stub\r\n// \r\n// \t}\r\n// \r\n// }\r\n// \n// Path: src/main/java/shui/common/service/SingleThreadService.java\n// public abstract class SingleThreadService extends Thread implements Runnable {\r\n// \tprotected Logger log = new SimpleLogger(true);\r\n// \r\n// \tpublic abstract void init(Properties pp);\r\n// \t\r\n// \tpublic abstract void onExit();\r\n// \t\r\n// \tpublic abstract void onTime();\r\n// \t\r\n// \tpublic static void log(Object o) {\r\n// \t\tLogger.log(o);\r\n// \t}\r\n// \r\n// \tpublic void sleep(int time) {\r\n// \t\ttry {\r\n// \t\t\tThread.sleep(time);\r\n// \t\t} catch (InterruptedException e) {\r\n// \t\t\tlog.log(9, e);\r\n// \t\t}\r\n// \t}\r\n// \t\r\n// \tprotected void sysExit() {\r\n// \t\t\r\n// \t\tlog.log(9, \"---> finish and exit ...\");\r\n// \t\t\r\n// \t\tThread t = new Thread() {\r\n// \t\t\t@Override\r\n// \t\t\tpublic void run() {\r\n// \t\t\t\ttry {\r\n// \t\t\t\t\tThread.sleep(15000);\r\n// \t\t\t\t} catch (InterruptedException e) {\r\n// \t\t\t\t\te.printStackTrace();\r\n// \t\t\t\t}\r\n// \t\t\t\tSystem.exit(0);\r\n// \t\t\t}\r\n// \r\n// \t\t};\r\n// \t\tt.start();\r\n// \t}\r\n// \r\n// \tpublic static void main(String[] args) {\r\n// \t\t// TODO Auto-generated method stub\r\n// \r\n// \t}\r\n// \r\n// }\r\n// \n// Path: src/main/java/waterwave/net/bio/define/BioDataDealerFactory.java\n// public interface BioDataDealerFactory {\r\n// \tpublic abstract BioServerHandler getBioServerDataDealer();\r\n// }\r\n// \n// Path: src/main/java/waterwave/net/bio/define/BioServerHandler.java\n// public interface BioServerHandler extends Runnable{\r\n// \t\r\n// \tpublic void init(BioServerChannel c);\r\n// \r\n// \tvoid serverOnError(BioServerChannel c,Throwable e, BufferSimple b);\r\n// \tvoid serverOnClose(BioServerChannel channel);\r\n// \t\r\n// \r\n// }\r\n\n\n// Path: src/main/java/waterwave/net/bio/BioServer.java\nimport java.io.IOException;\r\nimport java.net.InetSocketAddress;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.Properties;\r\nimport java.util.concurrent.ExecutorService;\r\nimport shui.common.buffer.BufferPool;\r\nimport shui.common.service.SingleThreadService;\r\nimport waterwave.net.bio.define.BioDataDealerFactory;\r\nimport waterwave.net.bio.define.BioServerHandler;\r\n\n\r\n\r\n\t@Override\r\n\tpublic void run() {\r\n\t\tfor (;;) {\r\n\t\t\ttry {\r\n\t\t\t\tSocket s = ss.accept();\r\n\t\t\t\ts.setTcpNoDelay(true);\r\n\t\t\t\ts.setSoTimeout(TIMEOUT);\r\n\t\t\t\ts.setReceiveBufferSize(RCVBUF);\r\n\r\n\t\t\t\tif (closed) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tbioAccept(s);\r\n\t\t\t\t// ps.dealSocket(s);\r\n\t\t\t\tdealNewConnection(s);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate final void bioAccept(Socket s) {\r\n\t\tInetSocketAddress rsa = (InetSocketAddress) s.getRemoteSocketAddress();\r\n\t\t//log.log(1 \"BioServer: accept \", rsa.getHostName(), rsa.getPort());\r\n\t}\r\n\r\n\tprivate void dealNewConnection(Socket s) {\r\n\t\tBioServerChannel c = new BioServerChannel(s, bp, this);\r", "next_line": "\t\tBioServerHandler handler = bioDataDealerFactory.getBioServerDataDealer();\r", "id": 17, "__internal_uuid__": "c7bdc98d-8c1c-48af-b3b4-3fd1ed8cfba2"}
{"repo_name": "ttddyy/datasource-assert", "file_path": "src/main/java/net/ttddyy/dsproxy/asserts/QueryExecutionFactoryListener.java", "context": "// Path: src/main/java/net/ttddyy/dsproxy/asserts/ParameterKeyValueUtils.java\n// public static ParameterKeyValue createRegisterOut(int index, Object value) {\n//     String displayValue = registerOutParameterValueConverter.getDisplayValue(value);\n//     return new ParameterKeyValue(index, value, displayValue, ParameterKeyValue.OperationType.REGISTER_OUT);\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/ParameterKeyValueUtils.java\n// public static ParameterKeyValue createSetNull(int index, int sqlType) {\n//     String displayValue = setNullValueConverter.getDisplayValue(sqlType);\n//     return new ParameterKeyValue(index, sqlType, displayValue, ParameterKeyValue.OperationType.SET_NULL);\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/ParameterKeyValueUtils.java\n// public static ParameterKeyValue createSetParam(int index, Object value) {\n//     String displayValue = value == null ? null : value.toString();\n//     return new ParameterKeyValue(index, value, displayValue, ParameterKeyValue.OperationType.SET_PARAM);\n// }\n\n", "import_statement": "import net.ttddyy.dsproxy.ExecutionInfo;\nimport net.ttddyy.dsproxy.QueryInfo;\nimport net.ttddyy.dsproxy.StatementType;\nimport net.ttddyy.dsproxy.listener.QueryExecutionListener;\nimport net.ttddyy.dsproxy.proxy.ParameterKey;\nimport net.ttddyy.dsproxy.proxy.ParameterSetOperation;\nimport java.util.ArrayList;\nimport java.util.List;\nimport static net.ttddyy.dsproxy.asserts.ParameterKeyValueUtils.createRegisterOut;\nimport static net.ttddyy.dsproxy.asserts.ParameterKeyValueUtils.createSetNull;\nimport static net.ttddyy.dsproxy.asserts.ParameterKeyValueUtils.createSetParam;", "code": "\n        for (List<ParameterSetOperation> params : queryInfo.getParametersList()) {\n            CallableBatchExecutionEntry batchEntry = new CallableBatchExecutionEntry();\n            populateParameterSetOperations(batchEntry, params);\n            cbe.addBatchExecutionEntry(batchEntry);\n        }\n\n        return cbe;\n    }\n\n    private void populateParameterSetOperations(ParameterHolder holder, List<ParameterSetOperation> params) {\n        for (ParameterSetOperation param : params) {\n            populateParameterSetOperation(holder, param);\n        }\n    }\n\n    private void populateParameterSetOperation(ParameterHolder holder, ParameterSetOperation setOperation) {\n        Object[] args = setOperation.getArgs();\n        Object key = args[0];\n        Object value = args[1]; // use second arg as value for the parameter-set-operation\n\n        ParameterKeyValue keyValue;\n        if (ParameterSetOperation.isSetNullParameterOperation(setOperation)) {\n            ParameterKey parameterKey = getParameterKey(key);\n            keyValue = createSetNull(parameterKey, (Integer) value);\n        } else if (ParameterSetOperation.isRegisterOutParameterOperation(setOperation)) {\n            ParameterKey parameterKey = getParameterKey(key);\n            keyValue = createRegisterOut(parameterKey, value);\n        } else {\n            ParameterKey parameterKey = getParameterKey(key);", "prompt": "// Path: src/main/java/net/ttddyy/dsproxy/asserts/ParameterKeyValueUtils.java\n// public static ParameterKeyValue createRegisterOut(int index, Object value) {\n//     String displayValue = registerOutParameterValueConverter.getDisplayValue(value);\n//     return new ParameterKeyValue(index, value, displayValue, ParameterKeyValue.OperationType.REGISTER_OUT);\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/ParameterKeyValueUtils.java\n// public static ParameterKeyValue createSetNull(int index, int sqlType) {\n//     String displayValue = setNullValueConverter.getDisplayValue(sqlType);\n//     return new ParameterKeyValue(index, sqlType, displayValue, ParameterKeyValue.OperationType.SET_NULL);\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/ParameterKeyValueUtils.java\n// public static ParameterKeyValue createSetParam(int index, Object value) {\n//     String displayValue = value == null ? null : value.toString();\n//     return new ParameterKeyValue(index, value, displayValue, ParameterKeyValue.OperationType.SET_PARAM);\n// }\n\n\n// Path: src/main/java/net/ttddyy/dsproxy/asserts/QueryExecutionFactoryListener.java\nimport net.ttddyy.dsproxy.ExecutionInfo;\nimport net.ttddyy.dsproxy.QueryInfo;\nimport net.ttddyy.dsproxy.StatementType;\nimport net.ttddyy.dsproxy.listener.QueryExecutionListener;\nimport net.ttddyy.dsproxy.proxy.ParameterKey;\nimport net.ttddyy.dsproxy.proxy.ParameterSetOperation;\nimport java.util.ArrayList;\nimport java.util.List;\nimport static net.ttddyy.dsproxy.asserts.ParameterKeyValueUtils.createRegisterOut;\nimport static net.ttddyy.dsproxy.asserts.ParameterKeyValueUtils.createSetNull;\nimport static net.ttddyy.dsproxy.asserts.ParameterKeyValueUtils.createSetParam;\n\n\n        for (List<ParameterSetOperation> params : queryInfo.getParametersList()) {\n            CallableBatchExecutionEntry batchEntry = new CallableBatchExecutionEntry();\n            populateParameterSetOperations(batchEntry, params);\n            cbe.addBatchExecutionEntry(batchEntry);\n        }\n\n        return cbe;\n    }\n\n    private void populateParameterSetOperations(ParameterHolder holder, List<ParameterSetOperation> params) {\n        for (ParameterSetOperation param : params) {\n            populateParameterSetOperation(holder, param);\n        }\n    }\n\n    private void populateParameterSetOperation(ParameterHolder holder, ParameterSetOperation setOperation) {\n        Object[] args = setOperation.getArgs();\n        Object key = args[0];\n        Object value = args[1]; // use second arg as value for the parameter-set-operation\n\n        ParameterKeyValue keyValue;\n        if (ParameterSetOperation.isSetNullParameterOperation(setOperation)) {\n            ParameterKey parameterKey = getParameterKey(key);\n            keyValue = createSetNull(parameterKey, (Integer) value);\n        } else if (ParameterSetOperation.isRegisterOutParameterOperation(setOperation)) {\n            ParameterKey parameterKey = getParameterKey(key);\n            keyValue = createRegisterOut(parameterKey, value);\n        } else {\n            ParameterKey parameterKey = getParameterKey(key);", "next_line": "            keyValue = createSetParam(parameterKey, value);", "id": 18, "__internal_uuid__": "98334d7f-2d2c-4ab2-9d80-51c19f8215b6"}
{"repo_name": "ttddyy/datasource-assert", "file_path": "src/test/java/net/ttddyy/dsproxy/asserts/hamcrest/QueriesHolderAssertionsTest.java", "context": "// Path: src/main/java/net/ttddyy/dsproxy/asserts/StatementBatchExecution.java\n// public class StatementBatchExecution extends BaseQueryExecution implements QueriesHolder, BatchExecution {\n// \n//     private List<String> queries = new ArrayList<>();\n// \n//     @Override\n//     public boolean isBatch() {\n//         return true;\n//     }\n// \n//     @Override\n//     public List<String> getQueries() {\n//         return this.queries;\n//     }\n// \n//     public void setQueries(List<String> queries) {\n//         this.queries = queries;\n//     }\n// \n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/QueriesHolderAssertions.java\n// public static Matcher<? super QueriesHolder> queries(final int index, Matcher<String> stringMatcher) {\n//     return new CompositeMatcher<QueriesHolder, String>(stringMatcher) {\n//         @Override\n//         protected boolean validateByThisMatcher(QueriesHolder item, Description expected, Description actual) {\n//             int size = item.getQueries().size();\n//             if (size - 1 < index) {\n//                 expected.appendText(\"queries[\" + index + \"] exists\");\n//                 actual.appendText(\"queries[] size was \" + size);\n//                 return false;\n//             }\n//             return true;\n//         }\n// \n//         @Override\n//         public String getValue(QueriesHolder actual) {\n//             return actual.getQueries().get(index);\n//         }\n// \n//         @Override\n//         public String getSubMatcherFailureDescriptionPrefix() {\n//             return \"queries[\" + index + \"] \";\n//         }\n// \n//     };\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/QueriesHolderAssertions.java\n// public static Matcher<? super QueriesHolder> queryTypes(final int index, Matcher<? super QueryHolder> queryHolderMatcher) {\n//     return new CompositeMatcher<QueriesHolder, QueryHolder>(queryHolderMatcher) {\n//         @Override\n//         protected boolean validateByThisMatcher(QueriesHolder item, Description expected, Description actual) {\n//             int size = item.getQueries().size();\n//             if (size - 1 < index) {\n//                 expected.appendText(\"queries[\" + index + \"] exists\");\n//                 actual.appendText(\"queries[] size was \" + size);\n//                 return false;\n//             }\n//             return true;\n//         }\n// \n//         @Override\n//         public QueryHolder getValue(QueriesHolder actual) {\n//             // convert query to a placeholder QueryHolder instance\n//             final String query = actual.getQueries().get(index);\n//             QueryHolder queryHolder = new QueryHolder() {\n//                 @Override\n//                 public String getQuery() {\n//                     return query;\n//                 }\n//             };\n//             return queryHolder;\n//         }\n// \n//         @Override\n//         public String getSubMatcherFailureDescriptionPrefix() {\n//             return \"queries[\" + index + \"] \";\n//         }\n// \n//     };\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/DataSourceAssertMatchers.java\n// public static Matcher<? super QueryHolder> delete() {\n//     return QueryHolderAssertions.delete();\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/DataSourceAssertMatchers.java\n// public static Matcher<? super QueryHolder> insert() {\n//     return QueryHolderAssertions.insert();\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/DataSourceAssertMatchers.java\n// public static Matcher<? super QueryHolder> select() {\n//     return QueryHolderAssertions.select();\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/DataSourceAssertMatchers.java\n// public static Matcher<? super QueryHolder> update() {\n//     return QueryHolderAssertions.update();\n// }\n\n", "import_statement": "import net.ttddyy.dsproxy.asserts.StatementBatchExecution;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.QueriesHolderAssertions.queries;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.QueriesHolderAssertions.queryTypes;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.DataSourceAssertMatchers.delete;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.DataSourceAssertMatchers.insert;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.DataSourceAssertMatchers.select;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.DataSourceAssertMatchers.update;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.hasItems;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.startsWith;\nimport static org.junit.Assert.fail;", "code": "        sbe.getQueries().add(\"baz\");\n\n        Assert.assertThat(sbe, queries(hasItem(\"foo\")));\n        Assert.assertThat(sbe, queries(hasItems(\"foo\", \"bar\")));\n        Assert.assertThat(sbe, queries(hasItems(startsWith(\"f\"), is(\"bar\"))));\n\n        Assert.assertThat(sbe, queries(hasSize(3)));\n    }\n\n    @Test\n    public void queriesWithCollectionWhenExpectationMismatch() {\n        StatementBatchExecution sbe = new StatementBatchExecution();\n        sbe.getQueries().add(\"foo\");\n\n        try {\n            Assert.assertThat(sbe, queries(hasItem(\"FOO\")));\n        } catch (AssertionError e) {\n            assertThat(e).hasMessage(\"\\nExpected: queries[] a collection containing \\\"FOO\\\"\\n     but: queries[] mismatches were: [was \\\"foo\\\"]\");\n        }\n    }\n\n\n    @Test\n    public void queryTypesWithIndex() {\n        StatementBatchExecution sbe = new StatementBatchExecution();\n        sbe.getQueries().add(\"SELECT\");\n        sbe.getQueries().add(\"INSERT\");\n        sbe.getQueries().add(\"UPDATE\");\n        sbe.getQueries().add(\"DELETE\");\n", "prompt": "// Path: src/main/java/net/ttddyy/dsproxy/asserts/StatementBatchExecution.java\n// public class StatementBatchExecution extends BaseQueryExecution implements QueriesHolder, BatchExecution {\n// \n//     private List<String> queries = new ArrayList<>();\n// \n//     @Override\n//     public boolean isBatch() {\n//         return true;\n//     }\n// \n//     @Override\n//     public List<String> getQueries() {\n//         return this.queries;\n//     }\n// \n//     public void setQueries(List<String> queries) {\n//         this.queries = queries;\n//     }\n// \n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/QueriesHolderAssertions.java\n// public static Matcher<? super QueriesHolder> queries(final int index, Matcher<String> stringMatcher) {\n//     return new CompositeMatcher<QueriesHolder, String>(stringMatcher) {\n//         @Override\n//         protected boolean validateByThisMatcher(QueriesHolder item, Description expected, Description actual) {\n//             int size = item.getQueries().size();\n//             if (size - 1 < index) {\n//                 expected.appendText(\"queries[\" + index + \"] exists\");\n//                 actual.appendText(\"queries[] size was \" + size);\n//                 return false;\n//             }\n//             return true;\n//         }\n// \n//         @Override\n//         public String getValue(QueriesHolder actual) {\n//             return actual.getQueries().get(index);\n//         }\n// \n//         @Override\n//         public String getSubMatcherFailureDescriptionPrefix() {\n//             return \"queries[\" + index + \"] \";\n//         }\n// \n//     };\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/QueriesHolderAssertions.java\n// public static Matcher<? super QueriesHolder> queryTypes(final int index, Matcher<? super QueryHolder> queryHolderMatcher) {\n//     return new CompositeMatcher<QueriesHolder, QueryHolder>(queryHolderMatcher) {\n//         @Override\n//         protected boolean validateByThisMatcher(QueriesHolder item, Description expected, Description actual) {\n//             int size = item.getQueries().size();\n//             if (size - 1 < index) {\n//                 expected.appendText(\"queries[\" + index + \"] exists\");\n//                 actual.appendText(\"queries[] size was \" + size);\n//                 return false;\n//             }\n//             return true;\n//         }\n// \n//         @Override\n//         public QueryHolder getValue(QueriesHolder actual) {\n//             // convert query to a placeholder QueryHolder instance\n//             final String query = actual.getQueries().get(index);\n//             QueryHolder queryHolder = new QueryHolder() {\n//                 @Override\n//                 public String getQuery() {\n//                     return query;\n//                 }\n//             };\n//             return queryHolder;\n//         }\n// \n//         @Override\n//         public String getSubMatcherFailureDescriptionPrefix() {\n//             return \"queries[\" + index + \"] \";\n//         }\n// \n//     };\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/DataSourceAssertMatchers.java\n// public static Matcher<? super QueryHolder> delete() {\n//     return QueryHolderAssertions.delete();\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/DataSourceAssertMatchers.java\n// public static Matcher<? super QueryHolder> insert() {\n//     return QueryHolderAssertions.insert();\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/DataSourceAssertMatchers.java\n// public static Matcher<? super QueryHolder> select() {\n//     return QueryHolderAssertions.select();\n// }\n// \n// Path: src/main/java/net/ttddyy/dsproxy/asserts/hamcrest/DataSourceAssertMatchers.java\n// public static Matcher<? super QueryHolder> update() {\n//     return QueryHolderAssertions.update();\n// }\n\n\n// Path: src/test/java/net/ttddyy/dsproxy/asserts/hamcrest/QueriesHolderAssertionsTest.java\nimport net.ttddyy.dsproxy.asserts.StatementBatchExecution;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.QueriesHolderAssertions.queries;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.QueriesHolderAssertions.queryTypes;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.DataSourceAssertMatchers.delete;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.DataSourceAssertMatchers.insert;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.DataSourceAssertMatchers.select;\nimport static net.ttddyy.dsproxy.asserts.hamcrest.DataSourceAssertMatchers.update;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.hasItems;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.startsWith;\nimport static org.junit.Assert.fail;\n\n        sbe.getQueries().add(\"baz\");\n\n        Assert.assertThat(sbe, queries(hasItem(\"foo\")));\n        Assert.assertThat(sbe, queries(hasItems(\"foo\", \"bar\")));\n        Assert.assertThat(sbe, queries(hasItems(startsWith(\"f\"), is(\"bar\"))));\n\n        Assert.assertThat(sbe, queries(hasSize(3)));\n    }\n\n    @Test\n    public void queriesWithCollectionWhenExpectationMismatch() {\n        StatementBatchExecution sbe = new StatementBatchExecution();\n        sbe.getQueries().add(\"foo\");\n\n        try {\n            Assert.assertThat(sbe, queries(hasItem(\"FOO\")));\n        } catch (AssertionError e) {\n            assertThat(e).hasMessage(\"\\nExpected: queries[] a collection containing \\\"FOO\\\"\\n     but: queries[] mismatches were: [was \\\"foo\\\"]\");\n        }\n    }\n\n\n    @Test\n    public void queryTypesWithIndex() {\n        StatementBatchExecution sbe = new StatementBatchExecution();\n        sbe.getQueries().add(\"SELECT\");\n        sbe.getQueries().add(\"INSERT\");\n        sbe.getQueries().add(\"UPDATE\");\n        sbe.getQueries().add(\"DELETE\");\n", "next_line": "        Assert.assertThat(sbe, queryTypes(0, select()));", "id": 19, "__internal_uuid__": "e5c828fa-910c-4dd1-987a-366e1900c26f"}