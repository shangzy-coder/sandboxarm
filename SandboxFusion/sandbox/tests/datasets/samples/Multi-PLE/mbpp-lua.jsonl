{"name":"mbpp_3_is_not_prime","language":"lua","prompt":"-- Write a luathon function to identify non-prime numbers.\nlocal function is_not_prime(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_3_is_not_prime.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_not_prime\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(35), true)\n    lu.assertEquals(candidate(37), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_3_is_not_prime","gpt_solution":"```lua\n-- Function to identify non-prime numbers\nlocal function is_not_prime(n)\n    if n <= 1 then\n        return true\n    end\n    if n == 2 then\n        return false\n    end\n    if n % 2 == 0 then\n        return true\n    end\n    local limit = math.sqrt(n)\n    for i = 3, limit, 2 do\n        if n % i == 0 then\n            return true\n        end\n    end\n    return false\nend\n```"}
{"name":"mbpp_4_heap_queue_largest","language":"lua","prompt":"-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_4_heap_queue_largest.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_4_heap_queue_largest","gpt_solution":"```lua\n-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local function sift_down(array, root, bottom)\n        local max_child\n        while root * 2 <= bottom do\n            local left_child = root * 2\n            local right_child = left_child + 1\n            if left_child == bottom then\n                max_child = left_child\n            elseif array[left_child] > array[right_child] then\n                max_child = left_child\n            else\n                max_child = right_child\n            end\n            if array[root] < array[max_child] then\n                array[root], array[max_child] = array[max_child], array[root]\n                root = max_child\n            else\n                return\n            end\n        end\n    end\n\n    -- Function to build initial heap\n    local function build_heap(array)\n        local size = #array\n        for i = math.floor(size \/ 2), 1, -1 do\n            sift_down(array, i, size)\n        end\n    end\n\n    local heap = {}\n    for i = 1, n do\n        table.insert(heap, nums[i])\n    end\n\n    build_heap(heap)\n\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            sift_down(heap, 1, n)\n        end\n    end\n\n    local result = {}\n    for i = 1, n do\n        result[i] = table.remove(heap, 1)\n        sift_down(heap, 1, n - i)\n    end\n\n    table.sort(result, function(a, b) return a > b end)\n\n    return result\nend\n```\n\nThis code uses a variation of the heap queue (or priority queue) to find the `n` largest integers from a table of numbers. It constructs a min-heap of size `n` and then iterates through the remaining elements, maintaining the heap property to ensure it contains the largest `n` elements. Finally, it sorts and returns these elements in descending order."}
{"name":"mbpp_6_differ_At_One_Bit_Pos","language":"lua","prompt":"-- Write a luathon function to check whether the two numbers differ at one bit position only or not.\nlocal function differ_At_One_Bit_Pos(a, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_6_differ_At_One_Bit_Pos.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = differ_At_One_Bit_Pos\n    lu.assertEquals(candidate(13, 9), true)\n    lu.assertEquals(candidate(15, 8), false)\n    lu.assertEquals(candidate(2, 4), false)\n    lu.assertEquals(candidate(2, 3), true)\n    lu.assertEquals(candidate(5, 1), true)\n    lu.assertEquals(candidate(1, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_6_differ_At_One_Bit_Pos","gpt_solution":"```lua\n-- Write a luathon function to check whether the two numbers differ at one bit position only or not.\nlocal function differ_At_One_Bit_Pos(a, b)\n    -- XOR the two numbers. If they differ at exactly one bit position,\n    -- the result will be a power of 2, which has exactly one '1' bit set.\n    local xor_result = a ~ b\n    \n    -- Check if xor_result is a power of 2 (i.e., it has only one '1' bit).\n    -- A number is a power of 2 if (xor_result & (xor_result - 1)) == 0\n    -- and xor_result is not zero (0).\n    return xor_result ~= 0 and (xor_result & (xor_result - 1)) == 0\nend\n\n-- Example usage:\nprint(differ_At_One_Bit_Pos(4, 5)) -- true (4: 100, 5: 101)\nprint(differ_At_One_Bit_Pos(4, 6)) -- false (4: 100, 6: 110)\n```"}
{"name":"mbpp_8_square_nums","language":"lua","prompt":"-- Write a function to find squares of individual elements in a table.\nlocal function square_nums(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_8_square_nums.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 4, 9, 16, 25, 36, 49, 64, 81, 100})\n    lu.assertEquals(candidate({10, 20, 30}), {100, 400, 900})\n    lu.assertEquals(candidate({12, 15}), {144, 225})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_8_square_nums","gpt_solution":"```lua\n-- Write a function to find squares of individual elements in a table.\nlocal function square_nums(nums)\n    local squared_nums = {}\n    for i, num in ipairs(nums) do\n        squared_nums[i] = num * num\n    end\n    return squared_nums\nend\n\n-- Example usage:\nlocal numbers = {1, 2, 3, 4, 5}\nlocal squared = square_nums(numbers)\nfor i, num in ipairs(squared) do\n    print(num)\nend\n```\n\nThis function `square_nums` takes a table of numbers as input and returns a new table containing the squares of each individual element. The example usage at the bottom demonstrates how to use this function and prints the squares of {1, 2, 3, 4, 5}."}
{"name":"mbpp_9_find_Rotations","language":"lua","prompt":"-- Write a luathon function to find the minimum number of rotations (greater than 0) required to get the same string.\nlocal function find_Rotations(str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_9_find_Rotations.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Rotations\n    lu.assertEquals(candidate('aaaa'), 1)\n    lu.assertEquals(candidate('ab'), 2)\n    lu.assertEquals(candidate('abc'), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_9_find_Rotations","gpt_solution":"```lua\n-- Write a luathon function to find the minimum number of rotations (greater than 0) required to get the same string.\nlocal function find_Rotations(str)\n    local n = #str\n    local doubled_str = str .. str\n\n    for i = 1, n do\n        local rotated_str = doubled_str:sub(i, i + n - 1)\n        if rotated_str == str then\n            return i\n        end\n    end\n\n    return n\nend\n\n-- Example usage:\n-- print(find_Rotations(\"abcabc\")) -- Output: 3\n```\n\nThis function calculates the minimum number of rotations required to bring a given string to its original form. It concatenates the string to itself and then searches for the original string within this doubled string to determine the number of rotations needed."}
{"name":"mbpp_11_remove_Occ","language":"lua","prompt":"-- Write a luathon function to remove first and last occurrence of a given character from the string.\nlocal function remove_Occ(s, ch)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_11_remove_Occ.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_Occ\n    lu.assertEquals(candidate('hello', 'l'), 'heo')\n    lu.assertEquals(candidate('abcda', 'a'), 'bcd')\n    lu.assertEquals(candidate('PHP', 'P'), 'H')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_11_remove_Occ","gpt_solution":"```lua\n-- Write a luathon function to remove first and last occurrence of a given character from the string.\nlocal function remove_Occ(s, ch)\n    -- Find the first occurrence of 'ch'\n    local first_pos = string.find(s, ch)\n    -- If 'ch' is not found, return the original string\n    if not first_pos then\n        return s\n    end\n    \n    -- Remove the first occurrence of 'ch'\n    s = string.sub(s, 1, first_pos - 1) .. string.sub(s, first_pos + 1)\n  \n    -- Find the last occurrence of 'ch'\n    local last_pos = string.find(s, ch)\n    local temp_pos = last_pos\n    while temp_pos do\n        last_pos = temp_pos\n        temp_pos = string.find(s, ch, last_pos + 1)\n    end\n\n    -- Remove the last occurrence of 'ch'\n    if last_pos then\n        s = string.sub(s, 1, last_pos - 1) .. string.sub(s, last_pos + 1)\n    end\n    \n    return s\nend\n\n-- Example usage\nprint(remove_Occ(\"character\", \"c\")) -- returns \"haracter\"\nprint(remove_Occ(\"banana\", \"a\")) -- returns \"banna\"\nprint(remove_Occ(\"hello\", \"l\")) -- returns \"heo\"\n```"}
{"name":"mbpp_12_sort_matrix","language":"lua","prompt":"-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_12_sort_matrix.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_12_sort_matrix","gpt_solution":"```lua\n-- Write a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n    -- Calculate the sum of each row and store the sums along with their corresponding rows\n    local rows_with_sums = {}\n    for i = 1, #M do\n        local sum = 0\n        for j = 1, #M[i] do\n            sum = sum + M[i][j]\n        end\n        table.insert(rows_with_sums, {sum = sum, row = M[i]})\n    end\n\n    -- Sort the rows_with_sums table by the sum value in ascending order\n    table.sort(rows_with_sums, function(a, b)\n        return a.sum < b.sum\n    end)\n\n    -- Extract the sorted rows\n    local sorted_matrix = {}\n    for i = 1, #rows_with_sums do\n        table.insert(sorted_matrix, rows_with_sums[i].row)\n    end\n\n    return sorted_matrix\nend\n\n-- Example usage\nlocal M = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {0, 1, 1}\n}\n\nlocal sorted_matrix = sort_matrix(M)\nfor i = 1, #sorted_matrix do\n    for j = 1, #sorted_matrix[i] do\n        io.write(sorted_matrix[i][j], \" \")\n    end\n    io.write(\"\\n\")\nend\n```\n\nThis code defines a function `sort_matrix` that sorts a given matrix `M` in ascending order based on the sum of its rows. The example usage demonstrates how to call this function and print the sorted matrix."}
{"name":"mbpp_14_find_Volume","language":"lua","prompt":"-- Write a luathon function to find the volume of a triangular prism.\nlocal function find_Volume(l, b, h)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_14_find_Volume.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Volume\n    lu.assertEquals(candidate(10, 8, 6), 240)\n    lu.assertEquals(candidate(3, 2, 2), 6)\n    lu.assertEquals(candidate(1, 2, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_14_find_Volume","gpt_solution":"```lua\n-- Function to find the volume of a triangular prism\n-- @param l: Length of the prism\n-- @param b: Base of the triangular face\n-- @param h: Height of the triangular face\n-- @return: Volume of the triangular prism\n\nlocal function find_Volume(l, b, h)\n    -- Calculate the area of the triangular base\n    local base_area = 0.5 * b * h\n    -- Calculate the volume of the prism\n    local volume = base_area * l\n    return volume\nend\n\n-- Example usage:\nlocal length = 10\nlocal base = 5\nlocal height = 6\nlocal volume = find_Volume(length, base, height)\nprint(\"The volume of the triangular prism is: \" .. volume)\n```\n\nThis function can be used to calculate the volume of a triangular prism by providing the length (`l`), base (`b`), and height (`h`) of the triangular face. The calculated volume is returned and used in the example usage."}
{"name":"mbpp_16_text_lowercase_underscore","language":"lua","prompt":"-- Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_16_text_lowercase_underscore.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_16_text_lowercase_underscore","gpt_solution":"```lua\nlocal function text_lowercase_underscore(text)\n    -- Check if the text matches the pattern of sequences of lowercase letters joined with underscores\n    if text:match(\"^%l+(_%l+)*$\") then\n        return true\n    else\n        return false\n    end\nend\n\n-- Example usage:\nprint(text_lowercase_underscore(\"hello_world\"))  -- true\nprint(text_lowercase_underscore(\"Hello_World\"))  -- false\nprint(text_lowercase_underscore(\"hello_world_123\")) -- false\nprint(text_lowercase_underscore(\"helloWorld\"))  -- false\nprint(text_lowercase_underscore(\"helloworld\"))  -- true\n```\n\nThis code defines the function `text_lowercase_underscore` that checks if the input string contains sequences of lowercase letters joined by underscores. The `match` function uses a Lua pattern to determine if the input matches the specified criteria, and the function returns `true` or `false` based on this evaluation."}
{"name":"mbpp_17_square_perimeter","language":"lua","prompt":"-- Write a function that returns the perimeter of a square given its side length as input.\nlocal function square_perimeter(a)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_17_square_perimeter.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_perimeter\n    lu.assertEquals(candidate(10), 40)\n    lu.assertEquals(candidate(5), 20)\n    lu.assertEquals(candidate(4), 16)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_17_square_perimeter","gpt_solution":"```lua\n-- Write a function that returns the perimeter of a square given its side length as input.\nlocal function square_perimeter(a)\n    return 4 * a\nend\n```"}
{"name":"mbpp_18_remove_dirty_chars","language":"lua","prompt":"-- Write a function to remove characters from the first string which are present in the second string.\nlocal function remove_dirty_chars(string, second_string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_18_remove_dirty_chars.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_dirty_chars\n    lu.assertEquals(candidate('probasscurve', 'pros'), 'bacuve')\n    lu.assertEquals(candidate('digitalindia', 'talent'), 'digiidi')\n    lu.assertEquals(candidate('exoticmiles', 'toxic'), 'emles')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_18_remove_dirty_chars","gpt_solution":"```lua\nlocal function remove_dirty_chars(string, second_string)\n    -- Create a set for characters in the second_string for quick lookup\n    local dirty_chars_set = {}\n    for i = 1, #second_string do\n        local char = second_string:sub(i, i)\n        dirty_chars_set[char] = true\n    end\n\n    -- Build the resulting string by excluding characters present in dirty_chars_set\n    local result = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not dirty_chars_set[char] then\n            table.insert(result, char)\n        end\n    end\n\n    -- Concatenate the result table to form the final cleaned string\n    return table.concat(result)\nend\n\n-- Example usage:\nlocal original_string = \"hello world\"\nlocal dirty_string = \"aeiou\"\nlocal cleaned_string = remove_dirty_chars(original_string, dirty_string)\nprint(cleaned_string) -- Output: \"hll wrld\"\n```"}
{"name":"mbpp_19_test_duplicate","language":"lua","prompt":"-- Write a function to find whether a given table of integers contains any duplicate element.\nlocal function test_duplicate(arraynums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_19_test_duplicate.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = test_duplicate\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 4}), true)\n    lu.assertEquals(candidate({1, 1, 2, 2, 3, 3, 4, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_19_test_duplicate","gpt_solution":"```lua\n-- Write a function to find whether a given table of integers contains any duplicate element.\nlocal function test_duplicate(arraynums)\n    -- Use a table to keep track of elements that have been seen\n    local seen = {}\n    \n    for _, num in ipairs(arraynums) do\n        -- If the number is already in the 'seen' table, a duplicate is found\n        if seen[num] then\n            return true\n        end\n        -- Mark the number as seen\n        seen[num] = true\n    end\n\n    -- If no duplicates are found, return false\n    return false\nend\n\n-- Example usages\nprint(test_duplicate({1, 2, 3, 4}))      -- Output: false\nprint(test_duplicate({1, 2, 3, 1}))      -- Output: true\nprint(test_duplicate({5, 5, 5, 5}))      -- Output: true\nprint(test_duplicate({}))                -- Output: false\nprint(test_duplicate({7, 8, 9, 10}))     -- Output: false\n```"}
{"name":"mbpp_20_is_woodall","language":"lua","prompt":"-- Write a function to check if the given number is woodball or not.\nlocal function is_woodall(x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_20_is_woodall.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_woodall\n    lu.assertEquals(candidate(383), true)\n    lu.assertEquals(candidate(254), false)\n    lu.assertEquals(candidate(200), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_20_is_woodall","gpt_solution":"```lua\n-- A Woodall number is a number of the form W_n = n * 2^n - 1 for some non-negative integer n.\n-- The function should return true if the given number x is a Woodall number, otherwise false.\n\nlocal function is_woodall(x)\n    local n = 0\n    while true do\n        local woodall_num = n * 2^n - 1\n        if woodall_num == x then\n            return true\n        elseif woodall_num > x then\n            return false\n        end\n        n = n + 1\n    end\nend\n\n-- Example usage:\n-- print(is_woodall(1))  -- true, as 0 * 2^0 - 1 = 1\n-- print(is_woodall(7))  -- true, as 2 * 2^2 - 1 = 7\n-- print(is_woodall(23)) -- false\n```"}
{"name":"mbpp_56_checks","language":"lua","prompt":"-- Write a luathon function to check if a given number is one less than twice its reverse.\nlocal function checks(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_56_checks.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = checks\n    lu.assertEquals(candidate(70), false)\n    lu.assertEquals(candidate(23), false)\n    lu.assertEquals(candidate(73), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_56_checks","gpt_solution":"```lua\n-- Write a luathon function to check if a given number is one less than twice its reverse.\nlocal function checks(n)\n    -- Function to reverse a given number\n    local function reverse_number(number)\n        local rev = 0\n        while number > 0 do\n            local digit = number % 10\n            rev = rev * 10 + digit\n            number = number \/\/ 10\n        end\n        return rev\n    end\n\n    -- Reverse the given number\n    local reversed_n = reverse_number(n)\n\n    -- Check if the given number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\nend\n```\n"}
{"name":"mbpp_57_find_Max_Num","language":"lua","prompt":"-- Write a luathon function to find the largest number that can be formed with the given table of digits.\nlocal function find_Max_Num(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_57_find_Max_Num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Max_Num\n    lu.assertEquals(candidate({1, 2, 3}), 321)\n    lu.assertEquals(candidate({4, 5, 6, 1}), 6541)\n    lu.assertEquals(candidate({1, 2, 3, 9}), 9321)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_57_find_Max_Num","gpt_solution":"```lua\n-- Write a luathon function to find the largest number that can be formed with the given table of digits.\nlocal function find_Max_Num(arr)\n    -- Convert each number to string for easy comparison\n    local str_tbl = {}\n    for i, num in ipairs(arr) do\n        str_tbl[i] = tostring(num)\n    end\n    \n    -- Custom sort function to arrange numbers\n    table.sort(str_tbl, function(a, b)\n        return a..b > b..a\n    end)\n    \n    -- Concatenate the sorted strings\n    local result = table.concat(str_tbl)\n    \n    -- Convert the concatenated string back to a number\n    return tonumber(result)\nend\n\n-- Example usage\nlocal digits = {3, 30, 34, 5, 9}\nprint(find_Max_Num(digits)) -- Outputs: 9534330\n```\n\nExplanation:\n1. The function `find_Max_Num` takes a table of digits as input.\n2. The digits are converted to strings to facilitate custom sorting.\n3. A custom sort function is used to sort the digits in a way that maximizes the resulting number when concatenated.\n4. The sorted strings are concatenated to form the largest possible number.\n5. The concatenated string is converted back to a number and returned."}
{"name":"mbpp_58_opposite_Signs","language":"lua","prompt":"-- Write a luathon function to check whether the given two integers have opposite sign or not.\nlocal function opposite_Signs(x, y)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_58_opposite_Signs.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = opposite_Signs\n    lu.assertEquals(candidate(1, -2), true)\n    lu.assertEquals(candidate(3, 2), false)\n    lu.assertEquals(candidate(-10, -10), false)\n    lu.assertEquals(candidate(-2, 2), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_58_opposite_Signs","gpt_solution":"```lua\n-- Function to check whether the given two integers have opposite signs or not.\nlocal function opposite_Signs(x, y)\n    -- Check if the product of x and y is negative\n    return (x * y) < 0\nend\n\n-- Example usage:\nprint(opposite_Signs(10, -20))  -- Output should be true, as the signs are opposite\nprint(opposite_Signs(-10, -20)) -- Output should be false, as both numbers are negative\nprint(opposite_Signs(10, 20))   -- Output should be false, as both numbers are positive\n```\n\nThis function `opposite_Signs` takes two integers `x` and `y` and returns `true` if they have opposite signs (one is positive and the other is negative), otherwise it returns `false`. The comparison is achieved by checking if the product of `x` and `y` is negative."}
{"name":"mbpp_59_is_octagonal","language":"lua","prompt":"-- Write a function to find the nth octagonal number.\nlocal function is_octagonal(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_59_is_octagonal.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_octagonal\n    lu.assertEquals(candidate(5), 65)\n    lu.assertEquals(candidate(10), 280)\n    lu.assertEquals(candidate(15), 645)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_59_is_octagonal","gpt_solution":"```lua\n-- Write a function to find the nth octagonal number.\nlocal function nth_octagonal_number(n)\n    return n * (3 * n - 2)\nend\n\n-- Example Usage\nprint(nth_octagonal_number(1))  -- Output: 1\nprint(nth_octagonal_number(2))  -- Output: 8\nprint(nth_octagonal_number(3))  -- Output: 21\nprint(nth_octagonal_number(4))  -- Output: 40\n```\n\nThis code defines a function `nth_octagonal_number` that takes an integer `n` and returns the nth octagonal number. The formula used to calculate the nth octagonal number is `n * (3 * n - 2)`. Example usages are provided to demonstrate how to call the function and the expected outputs."}
{"name":"mbpp_61_count_Substrings","language":"lua","prompt":"-- Write a luathon function to count the number of substrings with the sum of digits equal to their length.\nlocal function count_Substrings(s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_61_count_Substrings.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Substrings\n    lu.assertEquals(candidate('112112'), 6)\n    lu.assertEquals(candidate('111'), 6)\n    lu.assertEquals(candidate('1101112'), 12)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_61_count_Substrings","gpt_solution":"```lua\nlocal function count_Substrings(s)\n    local n = #s\n    local count = 0\n\n    -- Convert the string to array of digits\n    local digits = {}\n    for i = 1, n do\n        digits[i] = tonumber(s:sub(i, i))\n    end\n\n    -- Function to find the sum of elements in an array slice\n    local function sum_array_slice(array, start_idx, end_idx)\n        local sum = 0\n        for i = start_idx, end_idx do\n            sum = sum + array[i]\n        end\n        return sum\n    end\n\n    -- Check all substrings\n    for length = 1, n do\n        for start = 1, n - length + 1 do\n            local sub_sum = sum_array_slice(digits, start, start + length - 1)\n            if sub_sum == length then\n                count = count + 1\n            end\n        end\n    end\n\n    return count\nend\n\n-- Example usage:\n-- print(count_Substrings(\"1234\"))  -- expect some output as example\n```"}
{"name":"mbpp_62_smallest_num","language":"lua","prompt":"-- Write a luathon function to find smallest number in a table.\nlocal function smallest_num(xs)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_62_smallest_num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_num\n    lu.assertEquals(candidate({10, 20, 1, 45, 99}), 1)\n    lu.assertEquals(candidate({1, 2, 3}), 1)\n    lu.assertEquals(candidate({45, 46, 50, 60}), 45)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_62_smallest_num","gpt_solution":"```lua\n-- Write a Lua function to find the smallest number in a table.\nlocal function smallest_num(xs)\n  if #xs == 0 then\n    return nil -- Return nil if the table is empty.\n  end\n\n  local min_val = xs[1] -- Assume the first element is the smallest.\n  for i = 2, #xs do\n    if xs[i] < min_val then\n      min_val = xs[i] -- Update min_val if a smaller number is found.\n    end\n  end\n\n  return min_val\nend\n\n-- Example usage:\nlocal nums = {3, 5, 1, 7, 2}\nprint(smallest_num(nums)) -- Output: 1\n```"}
{"name":"mbpp_63_max_difference","language":"lua","prompt":"-- Write a function to find the maximum difference between available pairs in the given table table.\nlocal function max_difference(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_63_max_difference.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_difference\n    lu.assertEquals(candidate({{3, 5}, {1, 7}, {10, 3}, {1, 2}}), 7)\n    lu.assertEquals(candidate({{4, 6}, {2, 17}, {9, 13}, {11, 12}}), 15)\n    lu.assertEquals(candidate({{12, 35}, {21, 27}, {13, 23}, {41, 22}}), 23)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_63_max_difference","gpt_solution":"```lua\n-- Write a function to find the maximum difference between available pairs in the given table.\nlocal function max_difference(test_list)\n    if #test_list < 2 then\n        -- If there are fewer than 2 elements, we cannot find the difference between pairs\n        return nil\n    end\n\n    local max_diff = -math.huge\n    local min_value = test_list[1]\n\n    for i = 2, #test_list do\n        local value = test_list[i]\n        if value - min_value > max_diff then\n            max_diff = value - min_value\n        end\n        if value < min_value then\n            min_value = value\n        end\n    end\n    return max_diff\nend\n\n-- Example usage:\nlocal test_list = {7, 1, 5, 3, 6, 4}\nprint(max_difference(test_list))  -- Output should be 5 (since 6 - 1 = 5)\n```"}
{"name":"mbpp_64_subject_marks","language":"lua","prompt":"-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_64_subject_marks.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_64_subject_marks","gpt_solution":"```lua\n-- Write a function to sort a table of tables using the second value of each table.\nlocal function subject_marks(subjectmarks)\n    table.sort(subjectmarks, function(a, b)\n        return a[2] < b[2]\n    end)\nend\n\n-- Example usage:\nlocal marks = {\n    {\"Math\", 90},\n    {\"Science\", 85},\n    {\"English\", 92},\n    {\"History\", 88}\n}\n\nsubject_marks(marks)\n\nfor _, v in ipairs(marks) do\n    print(v[1], v[2])\nend\n```\n\nThis code defines a function `subject_marks` that sorts a table of tables based on the second value of each nested table. The example usage demonstrates how to use this function with a list of subject marks."}
{"name":"mbpp_65_recursive_list_sum","language":"lua","prompt":"-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_65_recursive_list_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_65_recursive_list_sum","gpt_solution":"```lua\n-- Write a function to flatten a table and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n    local sum = 0\n\n    local function flatten_and_sum(data)\n        for _, value in ipairs(data) do\n            if type(value) == \"table\" then\n                flatten_and_sum(value)\n            else\n                sum = sum + value\n            end\n        end\n    end\n\n    flatten_and_sum(data_list)\n    return sum\nend\n\n-- Example usage\nlocal data = {1, 2, {3, 4}, {5, {6, 7}}, 8}\nprint(recursive_list_sum(data))  -- Output: 36\n```\n\nThis Lua function `recursive_list_sum` takes a potentially nested table `data_list` and computes the sum of all its elements. The helper function `flatten_and_sum` is used to recursively traverse and flatten the table, adding each number to the `sum`. An example usage is provided at the end to show the function in action."}
{"name":"mbpp_66_pos_count","language":"lua","prompt":"-- Write a luathon function to count the number of positive numbers in a table.\nlocal function pos_count(list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_66_pos_count.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pos_count\n    lu.assertEquals(candidate({1, -2, 3, -4}), 2)\n    lu.assertEquals(candidate({3, 4, 5, -1}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4}), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_66_pos_count","gpt_solution":"```lua\n-- Write a luathon function to count the number of positive numbers in a table.\n\nlocal function pos_count(list)\n    -- Initialize the counter for positive numbers\n    local count = 0\n\n    -- Iterate over each element in the list\n    for _, value in ipairs(list) do\n        -- Check if the current element is a positive number\n        if value > 0 then\n            -- Increment the counter\n            count = count + 1\n        end\n    end\n\n    -- Return the final count of positive numbers\n    return count\nend\n\n-- Example usage:\nlocal numbers = {1, -2, 3, -4, 5}\nprint(pos_count(numbers))  -- Output should be 3\n```"}
{"name":"mbpp_67_bell_number","language":"lua","prompt":"-- Write a function to find the number of ways to partition a set of Bell numbers.\nlocal function bell_number(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_67_bell_number.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bell_number\n    lu.assertEquals(candidate(2), 2)\n    lu.assertEquals(candidate(10), 115975)\n    lu.assertEquals(candidate(56), 6775685320645824322581483068371419745979053216268760300)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_67_bell_number","gpt_solution":"```lua\n-- Write a function to find the number of ways to partition a set of Bell numbers.\nlocal function bell_number(n)\n    -- Table to store Bell numbers\n    local bell = {}\n    \n    -- Initialize Bell Number Triangle\n    bell[1] = {1}\n    \n    -- Fill the rest of the triangle up to Bell(n)\n    for i = 2, n+1 do\n        bell[i] = {}\n        bell[i][1] = bell[i-1][i-1]\n        \n        for j = 2, i do\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        end\n    end\n    \n    -- Return the nth Bell number\n    return bell[n+1][1]\nend\n\n-- Example usage:\nlocal n = 5\nprint(bell_number(n))  -- Outputs the 5th Bell number which is 52\n```\n\nThis Lua function `bell_number(n)` calculates the nth Bell number, which represents the number of ways to partition a set of `n` elements. The code uses a dynamic programming approach to construct the Bell number triangle and returns the required value."}
{"name":"mbpp_68_is_Monotonic","language":"lua","prompt":"-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_68_is_Monotonic.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_68_is_Monotonic","gpt_solution":"```lua\nlocal function is_Monotonic(A)\n    if #A <= 1 then\n        return true\n    end\n\n    local increasing = true\n    local decreasing = true\n\n    for i = 1, #A - 1 do\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n    end\n\n    return increasing or decreasing\nend\n```\n\nThis function checks if a given table `A` is monotonic (either entirely non-increasing or non-decreasing). It handles tables with a single element or empty tables as monotonic by default. The function iterates through the table and determines whether the sequence is increasing or decreasing. If it meets either condition, the function returns `true`."}
{"name":"mbpp_69_is_sublist","language":"lua","prompt":"-- Write a function to check whether a table contains the given subtable or not.\nlocal function is_sublist(l, s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_69_is_sublist.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sublist\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {3, 7}), false)\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {4, 3}), true)\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {1, 6}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_69_is_sublist","gpt_solution":"```lua\n-- A function to check whether a table contains the given subtable or not.\n-- @param l The larger table to search within.\n-- @param s The subtable to search for.\n-- @return true if the subtable is found within the larger table, otherwise false.\n\nlocal function is_sublist(l, s)\n    -- Helper function to check if one table is a sublist of another starting at index.\n    local function table_equals(t1, t2)\n        if #t1 ~= #t2 then\n            return false\n        end\n        for i = 1, #t1 do\n            if t1[i] ~= t2[i] then\n                return false\n            end\n        end\n        return true\n    end\n    \n    for i = 1, #l - #s + 1 do\n        if table_equals({table.unpack(l, i, i + #s - 1)}, s) then\n            return true\n        end\n    end\n    return false\nend\n\n-- Example usage:\nlocal bigger_table = {1, 2, 3, 4, 5}\nlocal sub_table1 = {2, 3, 4}\nlocal sub_table2 = {3, 5}\n\nprint(is_sublist(bigger_table, sub_table1))  -- Output: true\nprint(is_sublist(bigger_table, sub_table2))  -- Output: false\n```\n\nIn this code, the `is_sublist` function checks if a smaller table `s` is contained within a larger table `l`. The `table_equals` helper function checks for equality between two tables. The main loop iterates over possible starting positions in table `l`, checking if the sub-table `s` matches the corresponding slice of `l`."}
{"name":"mbpp_70_get_equal","language":"lua","prompt":"-- Write a function to find whether all the given tables have equal length or not.\nlocal function get_equal(Input)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_70_get_equal.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_equal\n    lu.assertEquals(candidate({{11, 22, 33}, {44, 55, 66}}), true)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6, 7}}), false)\n    lu.assertEquals(candidate({{1, 2}, {3, 4}}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_70_get_equal","gpt_solution":"```lua\n-- Function to find whether all the given tables have equal length or not.\nlocal function get_equal(input)\n    -- Check if input is a table and not empty\n    if type(input) ~= \"table\" or #input == 0 then\n        return false\n    end\n\n    -- Get the length of the first table\n    local first_length = #input[1]\n\n    -- Compare the length of the first table with all other tables\n    for i = 2, #input do\n        if #input[i] ~= first_length then\n            return false\n        end\n    end\n\n    -- All tables have the same length\n    return true\nend\n\n-- Example usage:\nlocal tables = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n}\n\nprint(get_equal(tables))  -- Output: true\n\nlocal different_tables = {\n    {1, 2, 3},\n    {4, 5},\n    {7, 8, 9}\n}\n\nprint(get_equal(different_tables))  -- Output: false\n```"}
{"name":"mbpp_71_comb_sort","language":"lua","prompt":"-- Write a function to sort a table of elements.\nlocal function comb_sort(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_71_comb_sort.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_71_comb_sort","gpt_solution":"```lua\n-- Write a function to sort a table of elements using the comb sort algorithm.\nlocal function comb_sort(nums)\n    local gap = #nums\n    local shrink = 1.3\n    local sorted = false\n\n    while not sorted do\n        gap = math.floor(gap \/ shrink)\n        if gap > 1 then\n            sorted = false\n        else\n            gap = 1\n            sorted = true\n        end\n\n        local i = 1\n        while i + gap <= #nums do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = false\n            end\n            i = i + 1\n        end\n    end\nend\n\n-- Example usage:\nlocal numbers = { 34, 7, 23, 32, 5, 62 }\ncomb_sort(numbers)\nfor _, num in ipairs(numbers) do\n    print(num)\nend\n```\n\nThis complete code defines a `comb_sort` function which sorts a table of elements using the comb sort algorithm, and includes an example usage of the function."}
{"name":"mbpp_72_dif_Square","language":"lua","prompt":"-- Write a luathon function to check whether the given number can be represented as the difference of two squares or not.\nlocal function dif_Square(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_72_dif_Square.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dif_Square\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(15), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_72_dif_Square","gpt_solution":"```lua\n-- Write a luathon function to check whether the given number can be represented as the difference of two squares or not.\nlocal function dif_Square(n)\n    -- Iterate through possible values of a and b such that a^2 - b^2 = n\n    for a = 1, math.ceil(math.sqrt(n + 1)) do\n        for b = 0, a - 1 do\n            if a^2 - b^2 == n then\n                return true\n            end\n        end\n    end\n    return false\nend\n\n-- Example usage:\n-- print(dif_Square(5))    -- true, since 3^2 - 2^2 = 9 - 4 = 5\n-- print(dif_Square(1))    -- true, since 1^2 - 0^2 = 1 - 0 = 1\n-- print(dif_Square(2))    -- false, since it is not possible\n```"}
{"name":"mbpp_74_is_samepatterns","language":"lua","prompt":"-- Write a function to check whether it follows the sequence given in the patterns table.\nlocal function is_samepatterns(colors, patterns)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_74_is_samepatterns.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_samepatterns\n    lu.assertEquals(candidate({'red', 'green', 'green'}, {'a', 'b', 'b'}), true)\n    lu.assertEquals(candidate({'red', 'green', 'greenn'}, {'a', 'b', 'b'}), false)\n    lu.assertEquals(candidate({'red', 'green', 'greenn'}, {'a', 'b'}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_74_is_samepatterns","gpt_solution":"```lua\n-- Write a function to check whether it follows the sequence given in the patterns table.\nlocal function is_samepatterns(colors, patterns)\n    -- Check that the number of colors and patterns are the same\n    if #colors ~= #patterns then\n        return false\n    end\n\n    -- Create tables to store the mappings between colors and patterns\n    local colorToPattern = {}\n    local patternToColor = {}\n\n    -- Iterate through both lists\n    for i = 1, #colors do\n        local color = colors[i]\n        local pattern = patterns[i]\n\n        -- If there's already a mapping for this color, check it matches the current pattern\n        if colorToPattern[color] ~= nil then\n            if colorToPattern[color] ~= pattern then\n                return false\n            end\n        else\n            -- Set the mapping from color to pattern\n            colorToPattern[color] = pattern\n        end\n\n        -- If there's already a mapping for this pattern, check it matches the current color\n        if patternToColor[pattern] ~= nil then\n            if patternToColor[pattern] ~= color then\n                return false\n            end\n        else\n            -- Set the mapping from pattern to color\n            patternToColor[pattern] = color\n        end\n    end\n\n    -- If no mismatches were found, the colors follow the sequence of the patterns\n    return true\nend\n```"}
{"name":"mbpp_75_find_tuples","language":"lua","prompt":"-- Write a function to find tables which have all elements divisible by k from the given table of tables.\nlocal function find_tuples(test_list, K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_75_find_tuples.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_tuples\n    lu.assertEquals(candidate({{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6), {{6, 24, 12}})\n    lu.assertEquals(candidate({{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5), {{5, 25, 30}})\n    lu.assertEquals(candidate({{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4), {{8, 16, 4}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_75_find_tuples","gpt_solution":"```lua\n-- Write a function to find tables which have all elements divisible by k from the given table of tables.\nlocal function find_tuples(test_list, K)\n    local result = {}\n    \n    for _, tbl in ipairs(test_list) do\n        local all_divisible = true\n        \n        for _, value in ipairs(tbl) do\n            if value % K ~= 0 then\n                all_divisible = false\n                break\n            end\n        end\n        \n        if all_divisible then\n            table.insert(result, tbl)\n        end\n    end\n    \n    return result\nend\n\n\n-- Example usage:\nlocal test_list = {\n    {4, 8, 12},\n    {6, 7, 18},\n    {10, 20, 30},\n    {11, 22, 33}\n}\n\nlocal K = 2\nlocal result = find_tuples(test_list, K)\n\nfor _, tbl in ipairs(result) do\n    for _, value in ipairs(tbl) do\n        io.write(value, \" \")\n    end\n    io.write(\"\\n\")\nend\n```\n\nThis Lua function `find_tuples` will traverse through each sub-table provided in the `test_list` and check if all elements of the sub-table are divisible by `K`. If so, it will include that sub-table in the result list. The example usage at the end demonstrates how to use this function and print the result."}
{"name":"mbpp_77_is_Diff","language":"lua","prompt":"-- Write a luathon function to find whether a number is divisible by 11.\nlocal function is_Diff(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_77_is_Diff.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Diff\n    lu.assertEquals(candidate(12345), false)\n    lu.assertEquals(candidate(1212112), true)\n    lu.assertEquals(candidate(1212), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_77_is_Diff","gpt_solution":"```lua\n-- Write a luathon function to find whether a number is divisible by 11.\nlocal function is_DivisibleBy11(n)\n    -- Convert the number to a string to access individual digits\n    local str_num = tostring(n)\n    local even_sum = 0\n    local odd_sum = 0\n    \n    -- Calculate the sum of digits at odd and even positions\n    for i = 1, #str_num do\n        local digit = tonumber(str_num:sub(i, i))\n        if i % 2 == 0 then\n            even_sum = even_sum + digit\n        else\n            odd_sum = odd_sum + digit\n        end\n    end\n    \n    -- Calculate the difference between the sums\n    local difference = math.abs(odd_sum - even_sum)\n    \n    -- Check divisibility by 11\n    return difference % 11 == 0\nend\n\n-- Example usage:\nprint(is_DivisibleBy11(121))  -- true\nprint(is_DivisibleBy11(123))  -- false\n```"}
{"name":"mbpp_79_word_len","language":"lua","prompt":"-- Write a luathon function to check whether the length of the word is odd or not.\nlocal function word_len(s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_79_word_len.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = word_len\n    lu.assertEquals(candidate('Hadoop'), false)\n    lu.assertEquals(candidate('great'), true)\n    lu.assertEquals(candidate('structure'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_79_word_len","gpt_solution":"```lua\n-- Write a luathon function to check whether the length of the word is odd or not.\nlocal function word_len(s)\n    -- calculate the length of the word\n    local len = #s\n    \n    -- check if the length is odd\n    if len % 2 ~= 0 then\n        return true\n    else\n        return false\n    end\nend\n\n-- Example usage:\nprint(word_len(\"hello\"))  -- true\nprint(word_len(\"test\"))   -- false\n```\n"}
{"name":"mbpp_80_tetrahedral_number","language":"lua","prompt":"-- Write a function to find the nth tetrahedral number.\nlocal function tetrahedral_number(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_80_tetrahedral_number.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tetrahedral_number\n    lu.assertEquals(candidate(5), 35)\n    lu.assertEquals(candidate(6), 56)\n    lu.assertEquals(candidate(7), 84)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_80_tetrahedral_number","gpt_solution":"```lua\n-- Write a function to find the nth tetrahedral number.\n-- The nth tetrahedral number can be calculated using the formula: T(n) = n * (n + 1) * (n + 2) \/ 6\n\nlocal function tetrahedral_number(n)\n    return (n * (n + 1) * (n + 2)) \/ 6\nend\n\n-- Example usage:\nprint(tetrahedral_number(1)) -- Output: 1\nprint(tetrahedral_number(2)) -- Output: 4\nprint(tetrahedral_number(3)) -- Output: 10\nprint(tetrahedral_number(4)) -- Output: 20\n```\n\nThis Lua function `tetrahedral_number` calculates and returns the nth tetrahedral number using the given formula. The example usage demonstrates how to call the function to obtain and print the tetrahedral numbers for small values of `n`."}
{"name":"mbpp_83_get_Char","language":"lua","prompt":"-- Write a luathon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nlocal function get_Char(strr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_83_get_Char.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Char\n    lu.assertEquals(candidate('abc'), 'f')\n    lu.assertEquals(candidate('gfg'), 't')\n    lu.assertEquals(candidate('ab'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_83_get_Char","gpt_solution":"```lua\nlocal function get_Char(strr)\n    local sum = 0\n    for i = 1, #strr do\n        sum = sum + string.byte(strr, i) -- Add ASCII value of each character to sum\n    end\n    local result = (sum % 26) + 65  -- Compute result modulo 26 and add ASCII value of 'A'\n    return string.char(result) -- Return the resulting character\nend\n\nprint(get_Char(\"example\"))  -- Example usage\n```\n\nThis function calculates the sum of the ASCII values of all characters in the given string, performs modulo 26 operation on the sum, and maps it to an uppercase alphabetic character by adding the ASCII value of 'A' (which is 65)."}
{"name":"mbpp_84_sequence","language":"lua","prompt":"-- Write a function to find the nth number in the newman conway sequence.\nlocal function sequence(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_84_sequence.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sequence\n    lu.assertEquals(candidate(10), 6)\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(3), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_84_sequence","gpt_solution":"```lua\n-- The Newman-Conway sequence is defined as:\n-- P(1) = 1, P(2) = 1\n-- For n > 2: P(n) = P(P(n - 1)) + P(n - P(n - 1))\n-- Write a function to find the nth number in the Newman-Conway sequence.\n\nlocal function sequence(n)\n    -- Check for invalid input as n should be at least 1\n    if n < 1 then\n        error(\"n should be a positive integer\")\n    end\n\n    -- Base cases\n    if n == 1 or n == 2 then\n        return 1\n    end\n    \n    -- Create a table to store intermediate results\n    local P = {1, 1}\n\n    -- Compute each term of the sequence up to n\n    for i = 3, n do\n        P[i] = P[P[i - 1]] + P[i - P[i - 1]]\n    end\n    \n    -- Return the nth number in the sequence\n    return P[n]\nend\n\n-- Example usage:\n-- local result = sequence(10)\n-- print(result) -- Output should be 6\n```"}
{"name":"mbpp_86_centered_hexagonal_number","language":"lua","prompt":"-- Write a function to find nth centered hexagonal number.\nlocal function centered_hexagonal_number(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_86_centered_hexagonal_number.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = centered_hexagonal_number\n    lu.assertEquals(candidate(10), 271)\n    lu.assertEquals(candidate(2), 7)\n    lu.assertEquals(candidate(9), 217)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_86_centered_hexagonal_number","gpt_solution":"Certainly! Here is the complete implementation of the `centered_hexagonal_number` function in Lua. This function calculates the nth centered hexagonal number.\n\n```lua\n-- Write a function to find nth centered hexagonal number.\n-- The centered hexagonal number at position n can be calculated using the formula: 3n(n-1) + 1\n\nlocal function centered_hexagonal_number(n)\n    return 3 * n * (n - 1) + 1\nend\n\n-- Example usage\nprint(centered_hexagonal_number(1))  -- Output: 1\nprint(centered_hexagonal_number(2))  -- Output: 7\nprint(centered_hexagonal_number(3))  -- Output: 19\nprint(centered_hexagonal_number(4))  -- Output: 37\nprint(centered_hexagonal_number(5))  -- Output: 61\n```\n\nIn this implementation:\n- We use the formula `3 * n * (n - 1) + 1` to compute the nth centered hexagonal number.\n- The function `centered_hexagonal_number` takes a single integer `n` as input and returns the corresponding centered hexagonal number."}
{"name":"mbpp_87_merge_dictionaries_three","language":"lua","prompt":"-- Write a function to merge three dictionaries into a single table.\nlocal function merge_dictionaries_three(dict1, dict2, dict3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_87_merge_dictionaries_three.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge_dictionaries_three\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['G'] = 'Green', ['W'] = 'White'}, {['O'] = 'Orange', ['W'] = 'White', ['B'] = 'Black'}), {['B'] = 'Black', ['R'] = 'Red', ['P'] = 'Pink', ['G'] = 'Green', ['W'] = 'White', ['O'] = 'Orange'})\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['G'] = 'Green', ['W'] = 'White'}, {['L'] = 'lavender', ['B'] = 'Blue'}), {['W'] = 'White', ['P'] = 'Pink', ['B'] = 'Black', ['R'] = 'Red', ['G'] = 'Green', ['L'] = 'lavender'})\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['L'] = 'lavender', ['B'] = 'Blue'}, {['G'] = 'Green', ['W'] = 'White'}), {['B'] = 'Black', ['P'] = 'Pink', ['R'] = 'Red', ['G'] = 'Green', ['L'] = 'lavender', ['W'] = 'White'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_87_merge_dictionaries_three","gpt_solution":"```lua\n-- Write a function to merge three dictionaries into a single table.\nlocal function merge_dictionaries_three(dict1, dict2, dict3)\n    local merged_dict = {}\n\n    -- Helper function to merge one dictionary into merged_dict\n    local function merge_into_merged_dict(dict)\n        for key, value in pairs(dict) do\n            merged_dict[key] = value\n        end\n    end\n\n    -- Merge all three dictionaries\n    merge_into_merged_dict(dict1)\n    merge_into_merged_dict(dict2)\n    merge_into_merged_dict(dict3)\n\n    return merged_dict\nend\n```\n\nThis function takes three dictionaries (tables) as arguments and merges them into a single table. If there are conflicting keys, the values from the later dictionaries will overwrite those from the earlier dictionaries."}
{"name":"mbpp_88_freq_count","language":"lua","prompt":"-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_88_freq_count.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_88_freq_count","gpt_solution":"```lua\n-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local frequency = {}\n    \n    for _, value in ipairs(list1) do\n        if frequency[value] then\n            frequency[value] = frequency[value] + 1\n        else\n            frequency[value] = 1\n        end\n    end\n\n    return frequency\nend\n```\n\nThis function `freq_count` will iterate through the elements of the input table `list1` and create a new table `frequency` that contains the count of each unique element in the input table."}
{"name":"mbpp_89_closest_num","language":"lua","prompt":"-- Write a function to find the closest smaller number than n.\nlocal function closest_num(N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_89_closest_num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_num\n    lu.assertEquals(candidate(11), 10)\n    lu.assertEquals(candidate(7), 6)\n    lu.assertEquals(candidate(12), 11)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_89_closest_num","gpt_solution":"```lua\n-- Write a function to find the closest smaller number than n.\nlocal function closest_num(N)\n    -- Convert N to a string to iterate over each digit\n    local numStr = tostring(N)\n\n    -- Loop from the end to the beginning of the string\n    for i = #numStr, 1, -1 do\n        local digit = tonumber(numStr:sub(i, i))\n        \n        -- Find the first digit that is not zero and decrease it by 1\n        if digit > 0 then\n            local newStr = numStr:sub(1, i-1) .. tostring(digit - 1) .. string.rep('9', #numStr - i)\n            return tonumber(newStr)\n        end\n    end\n    \n    -- If N is zero or all digits are zero (unexpected case), return nil\n    return nil\nend\n\n-- Example usage\n-- print(closest_num(1234))  -- Output: 1229\n-- print(closest_num(1000))  -- Output: 999\n-- print(closest_num(1))     -- Output: 0\n```"}
{"name":"mbpp_90_len_log","language":"lua","prompt":"-- Write a luathon function to find the length of the longest word.\nlocal function len_log(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_90_len_log.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = len_log\n    lu.assertEquals(candidate({'python', 'PHP', 'bigdata'}), 7)\n    lu.assertEquals(candidate({'a', 'ab', 'abc'}), 3)\n    lu.assertEquals(candidate({'small', 'big', 'tall'}), 5)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_90_len_log","gpt_solution":"```lua\n-- Function to find the length of the longest word in a list of words\nlocal function len_log(list1)\n    -- Initialize the maximum length to 0\n    local max_length = 0\n\n    -- Iterate over each word in the list\n    for _, word in ipairs(list1) do\n        -- Get the length of the current word\n        local length = #word\n\n        -- Update the maximum length if the current word's length is greater\n        if length > max_length then\n            max_length = length\n        end\n    end\n\n    -- Return the maximum length found\n    return max_length\nend\n```"}
{"name":"mbpp_91_find_substring","language":"lua","prompt":"-- Write a function to check if a string is present as a substring in a given table of string values.\nlocal function find_substring(str1, sub_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_91_find_substring.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_substring\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ack'), true)\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'abc'), false)\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ange'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_91_find_substring","gpt_solution":"```lua\n-- Write a function to check if a string is present as a substring in a given table of string values.\nlocal function find_substring(str1, sub_str)\n    for _, value in ipairs(str1) do\n        if string.find(value, sub_str) then\n            return true\n        end\n    end\n    return false\nend\n\n-- Example usage:\nlocal strings = {\"hello\", \"world\", \"Lua\", \"programming\"}\nlocal substring = \"gram\"\nprint(find_substring(strings, substring)) -- should print true\n```"}
{"name":"mbpp_92_is_undulating","language":"lua","prompt":"-- Write a function to check whether the given number is undulating or not.\nlocal function is_undulating(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_92_is_undulating.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_undulating\n    lu.assertEquals(candidate(1212121), true)\n    lu.assertEquals(candidate(1991), false)\n    lu.assertEquals(candidate(121), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_92_is_undulating","gpt_solution":"```lua\n-- A number is undulating if it has at least three digits and its digits alternate between two numbers consistently.\n-- For example, 121212 is undulating; 123123 is not.\n\nlocal function is_undulating(n)\n    -- Convert the number to a string to easily access each digit\n    local num_str = tostring(n)\n    local len = #num_str\n    \n    -- Check if the number has at least three digits\n    if len < 3 then\n        return false\n    end\n\n    -- Extract the first two digits to compare with the rest\n    local first_digit = num_str:sub(1, 1)\n    local second_digit = num_str:sub(2, 2)\n    \n    -- No two adjacent digits should be the same in an undulating number\n    if first_digit == second_digit then\n        return false\n    end\n    \n    -- Check the pattern of digits\n    for i = 3, len do\n        if (i % 2 == 1 and num_str:sub(i, i) ~= first_digit) or \n           (i % 2 == 0 and num_str:sub(i, i) ~= second_digit) then\n            return false\n        end\n    end\n\n    return true\nend\n\n-- Example usage:\nprint(is_undulating(121212))  -- Output: true\nprint(is_undulating(123123))  -- Output: false\nprint(is_undulating(1010))    -- Output: true\nprint(is_undulating(12))      -- Output: false because it has fewer than 3 digits\nprint(is_undulating(112))     -- Output: false because the first two digits are the same\n```"}
{"name":"mbpp_93_power","language":"lua","prompt":"-- Write a function to calculate the value of 'a' to the power 'b'.\nlocal function power(a, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_93_power.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power\n    lu.assertEquals(candidate(3, 4), 81)\n    lu.assertEquals(candidate(2, 3), 8)\n    lu.assertEquals(candidate(5, 5), 3125)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_93_power","gpt_solution":"```lua\n-- Write a function to calculate the value of 'a' to the power 'b'.\nlocal function power(a, b)\n    if b == 0 then\n        return 1\n    else\n        return a * power(a, b - 1)\n    end\nend\n\n-- Example usage:\n-- local result = power(2, 3)\n-- print(result)  -- Output: 8\n```"}
{"name":"mbpp_94_index_minimum","language":"lua","prompt":"-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_94_index_minimum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_94_index_minimum","gpt_solution":"```lua\n-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    if #test_list == 0 then\n        return nil\n    end\n\n    local min_index = 1\n    local min_value = test_list[1][2]\n\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n\n    return test_list[min_index][1]\nend\n\n-- Example usage\nlocal test_list = {\n    {1, 5},\n    {2, 3},\n    {3, 4}\n}\nprint(index_minimum(test_list)) -- Output should be 2\n```"}
{"name":"mbpp_95_Find_Min_Length","language":"lua","prompt":"-- Write a luathon function to find the length of the smallest table in a table of tables.\nlocal function Find_Min_Length(lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_95_Find_Min_Length.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_95_Find_Min_Length","gpt_solution":"```lua\n-- Function to find the length of the smallest table in a table of tables.\nlocal function Find_Min_Length(lst)\n    -- Check if the input is a table and not empty\n    if type(lst) ~= \"table\" or #lst == 0 then\n        return nil, \"Input must be a non-empty table of tables.\"\n    end\n    \n    -- Initialize the minimum length with the length of the first table\n    local min_length = #lst[1]\n\n    -- Iterate through the list of tables\n    for _, tbl in ipairs(lst) do\n        -- Check if if the element is a table\n        if type(tbl) ~= \"table\" then\n            return nil, \"All elements of the list must be tables.\"\n        end\n\n        -- Update the minimum length if the current table's length is smaller\n        local len = #tbl\n        if len < min_length then\n            min_length = len\n        end\n    end\n    \n    return min_length\nend\n```\n\nYou can use this function to find the length of the smallest table in a table of tables by passing a table of tables as an argument to the `Find_Min_Length` function."}
{"name":"mbpp_96_divisor","language":"lua","prompt":"-- Write a luathon function to find the number of divisors of a given integer.\nlocal function divisor(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_96_divisor.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_96_divisor","gpt_solution":"```lua\n-- Write a Lua function to find the number of divisors of a given integer.\nlocal function divisor(n)\n    -- Initialize the count of divisors to zero\n    local count = 0\n    \n    -- Iterate from 1 to n to find divisors\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    \n    -- Return the count of divisors\n    return count\nend\n\n-- Example usage\nprint(divisor(12)) -- Output: 6 (divisors: 1, 2, 3, 4, 6, 12)\nprint(divisor(7))  -- Output: 2 (divisors: 1, 7)\n```"}
{"name":"mbpp_97_frequency_lists","language":"lua","prompt":"-- Write a function to find frequency of each element in a flattened table of tables, returned in a table.\nlocal function frequency_lists(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_97_frequency_lists.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = frequency_lists\n    lu.assertEquals(candidate({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}), {[1] = 1, [2] = 3, [3] = 1, [4] = 1, [5] = 2, [6] = 1, [7] = 1, [8] = 1, [9] = 1})\n    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}), {[1] = 1, [2] = 1, [3] = 1, [4] = 1, [5] = 1, [6] = 1, [7] = 1, [8] = 1, [9] = 1, [10] = 1, [11] = 1, [12] = 1})\n    lu.assertEquals(candidate({{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}}), {[20] = 2, [30] = 2, [40] = 2, [17] = 1, [18] = 1, [16] = 1, [14] = 1, [13] = 1, [10] = 1})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_97_frequency_lists","gpt_solution":"```lua\n-- Write a function to find frequency of each element in a flattened table of tables, returned in a table.\nlocal function frequency_lists(list1)\n    -- Initialize an empty table to hold the frequency of each element\n    local frequency_table = {}\n\n    -- Flatten the table of tables\n    for _, sublist in ipairs(list1) do\n        for _, value in ipairs(sublist) do\n            -- Count the frequency of each element\n            if frequency_table[value] then\n                frequency_table[value] = frequency_table[value] + 1\n            else\n                frequency_table[value] = 1\n            end\n        end\n    end\n    \n    return frequency_table\nend\n\n-- Example usage:\nlocal lists = { {1, 2, 2}, {3, 4, 4, 4}, {2, 3, 1} }\nlocal result = frequency_lists(lists)\n\nfor k, v in pairs(result) do\n  print(k, v)\nend\n```\n\nThis Lua function `frequency_lists` takes a table of tables (which we referred to as `list1`), flattens it, and calculates the frequency of each element, returning the frequencies in a table. The example usage at the end demonstrates how to call this function and print the result."}
{"name":"mbpp_99_decimal_to_binary","language":"lua","prompt":"-- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nlocal function decimal_to_binary(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_99_decimal_to_binary.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(8), '1000')\n    lu.assertEquals(candidate(18), '10010')\n    lu.assertEquals(candidate(7), '111')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_99_decimal_to_binary","gpt_solution":"```lua\n-- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nlocal function decimal_to_binary(n)\n    if n == 0 then\n        return \"0\"\n    end\n\n    local binary = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        binary = remainder .. binary\n        n = math.floor(n \/ 2)\n    end\n\n    return binary\nend\n```\n\nThis function takes a decimal number `n` and converts it to its binary equivalent string. If the input number is zero, the function specifically handles this case to return \"0\". For non-zero numbers, it calculates the binary equivalent by repeatedly dividing the number by 2 and prepending the remainders to the result string until the number is reduced to zero."}
{"name":"mbpp_100_next_smallest_palindrome","language":"lua","prompt":"-- Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlocal function next_smallest_palindrome(num)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_100_next_smallest_palindrome.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest_palindrome\n    lu.assertEquals(candidate(99), 101)\n    lu.assertEquals(candidate(1221), 1331)\n    lu.assertEquals(candidate(120), 121)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_100_next_smallest_palindrome","gpt_solution":"```lua\nlocal function is_palindrome(num)\n    local str = tostring(num)\n    return str == string.reverse(str)\nend\n\nlocal function next_smallest_palindrome(num)\n    num = num + 1\n    while not is_palindrome(num) do\n        num = num + 1\n    end\n    return num\nend\n\n-- Example usage:\nprint(next_smallest_palindrome(123))  -- Output: 131\nprint(next_smallest_palindrome(150))  -- Output: 151\n```"}
{"name":"mbpp_101_kth_element","language":"lua","prompt":"-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_101_kth_element.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_101_kth_element","gpt_solution":"```lua\n-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    -- Check if the provided index k is valid\n    if k < 1 or k > #arr then\n        error(\"Index out of bounds\")\n    end\n    -- Return the k-th element (1-based index)\n    return arr[k]\nend\n\n-- Example usage:\n-- local arr = {1, 2, 3, 4, 5}\n-- print(kth_element(arr, 3))  -- Output: 3\n```\n\nThis function `kth_element` takes a table `arr` and an index `k` as input and returns the k-th element from the table using 1-based indexing. It also includes a check to ensure the index `k` is within the bounds of the table, and raises an error if it's not."}
{"name":"mbpp_102_snake_to_camel","language":"lua","prompt":"-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_102_snake_to_camel.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_102_snake_to_camel","gpt_solution":"```lua\n-- Write a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n    -- Use the 'gsub' function to replace underscores followed by a character with the uppercase of that character\n    local camel_case_word = word:gsub(\"_(%l)\", function(c)\n        return c:upper()\n    end)\n    -- Ensure the first character remains in lowercase as per camelCase convention\n    return camel_case_word:gsub(\"^%u\", function(c)\n        return c:lower()\n    end)\nend\n\n-- Example usage:\nprint(snake_to_camel(\"snake_case_string\"))  -- Expected output: \"snakeCaseString\"\n```"}
{"name":"mbpp_103_eulerian_num","language":"lua","prompt":"-- Write a function to find the Eulerian number a(n, m).\nlocal function eulerian_num(n, m)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_103_eulerian_num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eulerian_num\n    lu.assertEquals(candidate(3, 1), 4)\n    lu.assertEquals(candidate(4, 1), 11)\n    lu.assertEquals(candidate(5, 3), 26)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_103_eulerian_num","gpt_solution":"```lua\n-- Write a function to find the Eulerian number a(n, m).\nlocal function eulerian_num(n, m)\n    -- Initialize a table to store the Eulerian numbers\n    local eulerian = {}\n    \n    -- Create a 2D table\n    for i = 0, n do\n        eulerian[i] = {}\n        for j = 0, m do\n            eulerian[i][j] = 0\n        end\n    end\n    \n    -- Base case: a(0, 0) = 1\n    eulerian[0][0] = 1\n    \n    -- Fill the table using the recurrence relation\n    -- a(n, m) = (n - m) * a(n - 1, m - 1) + (m + 1) * a(n - 1, m)\n    for i = 1, n do\n        for j = 0, m do\n            eulerian[i][j] = (j + 1) * eulerian[i - 1][j] + (i - j) * eulerian[i - 1][j - 1]\n        end\n    end\n    \n    -- Return the required Eulerian number a(n, m)\n    return eulerian[n][m]\nend\n\n-- Example usage:\nlocal n = 5\nlocal m = 2\nprint(\"Eulerian number a(\" .. n .. \", \" .. m .. \") = \" .. eulerian_num(n, m))\n```\n\nThis Lua function `eulerian_num` computes the Eulerian number `a(n, m)` by creating a 2D table and filling it using the given recurrence relation. The function initializes the base case `a(0, 0) = 1` and then uses nested loops to fill in the table for all required values. The desired Eulerian number is then returned from the table."}
{"name":"mbpp_104_sort_sublists","language":"lua","prompt":"-- Write a function to sort each subtable of strings in a given table of tables.\nlocal function sort_sublists(input_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_104_sort_sublists.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_sublists\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})\n    lu.assertEquals(candidate({{' red ', 'green'}, {'blue ', ' black'}, {' orange', 'brown'}}), {{' red ', 'green'}, {' black', 'blue '}, {' orange', 'brown'}})\n    lu.assertEquals(candidate({{'zilver', 'gold'}, {'magnesium', 'aluminium'}, {'steel', 'bronze'}}), {{'gold', 'zilver'}, {'aluminium', 'magnesium'}, {'bronze', 'steel'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_104_sort_sublists","gpt_solution":"```lua\n-- Write a function to sort each subtable of strings in a given table of tables.\nlocal function sort_sublists(input_list)\n    for _, sublist in ipairs(input_list) do\n        table.sort(sublist)\n    end\n    return input_list\nend\n\n-- Example usage:\nlocal my_list_of_lists = {\n    {\"banana\", \"apple\", \"cherry\"},\n    {\"elephant\", \"dog\", \"cat\"},\n    {\"grape\", \"fig\", \"date\"}\n}\n\nlocal sorted_list_of_lists = sort_sublists(my_list_of_lists)\nfor _, sublist in ipairs(sorted_list_of_lists) do\n    for _, item in ipairs(sublist) do\n        print(item)\n    end\nend\n```\nThis Lua code defines a function `sort_sublists` that sorts each subtable of strings in the given table of tables `input_list`. The function iterates through each sublist, sorts it using `table.sort`, and returns the sorted `input_list`. There is also an example of how to use this function and print the sorted sublists."}
{"name":"mbpp_105_count","language":"lua","prompt":"-- Write a luathon function to count true booleans in the given table.\nlocal function count(lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_105_count.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count\n    lu.assertEquals(candidate({true, false, true}), 2)\n    lu.assertEquals(candidate({false, false}), 0)\n    lu.assertEquals(candidate({true, true, true}), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_105_count","gpt_solution":"```lua\n-- Write a luathon function to count true booleans in the given table.\nlocal function count(lst)\n    local count = 0\n    for _, value in ipairs(lst) do\n        if value == true then\n            count = count + 1\n        end\n    end\n    return count\nend\n```"}
{"name":"mbpp_106_add_lists","language":"lua","prompt":"-- Write a function to append the given table to the given tables.\nlocal function add_lists(test_list, test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_106_add_lists.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_lists\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {9, 10, 5, 6, 7})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {10, 11, 6, 7, 8})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {11, 12, 7, 8, 9})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_106_add_lists","gpt_solution":"```lua\n-- Write a function to append the given table to the given tables.\nlocal function add_lists(test_list, test_tup)\n    -- Iterate over each element in test_tup and insert it into test_list\n    for _, v in ipairs(test_tup) do\n        table.insert(test_list, v)\n    end\n    -- Return the modified test_list\n    return test_list\nend\n\n-- Example usage:\n-- local my_list = {1, 2, 3}\n-- local my_tup = {4, 5, 6}\n-- local result = add_lists(my_list, my_tup)\n-- print(table.unpack(result)) -- Output: 1 2 3 4 5 6\n```"}
{"name":"mbpp_108_merge_sorted_list","language":"lua","prompt":"-- Write a function to merge three tables into a single sorted table.\nlocal function merge_sorted_list(num1, num2, num3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_108_merge_sorted_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge_sorted_list\n    lu.assertEquals(candidate({25, 24, 15, 4, 5, 29, 110}, {19, 20, 11, 56, 25, 233, 154}, {24, 26, 54, 48}), {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233})\n    lu.assertEquals(candidate({1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}), {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12})\n    lu.assertEquals(candidate({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, {25, 35, 22, 85, 14, 65, 75, 25, 58}, {12, 74, 9, 50, 61, 41}), {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_108_merge_sorted_list","gpt_solution":"```lua\nlocal function merge_sorted_list(num1, num2, num3)\n  local merged = {}\n  local i, j, k = 1, 1, 1\n\n  while i <= #num1 and j <= #num2 and k <= #num3 do\n      if num1[i] <= num2[j] and num1[i] <= num3[k] then\n          table.insert(merged, num1[i])\n          i = i + 1\n      elseif num2[j] <= num1[i] and num2[j] <= num3[k] then\n          table.insert(merged, num2[j])\n          j = j + 1\n      else\n          table.insert(merged, num3[k])\n          k = k + 1\n      end\n  end\n\n  while i <= #num1 and j <= #num2 do\n      if num1[i] <= num2[j] then\n          table.insert(merged, num1[i])\n          i = i + 1\n      else\n          table.insert(merged, num2[j])\n          j = j + 1\n      end\n  end\n\n  while i <= #num1 and k <= #num3 do\n      if num1[i] <= num3[k] then\n          table.insert(merged, num1[i])\n          i = i + 1\n      else\n          table.insert(merged, num3[k])\n          k = k + 1\n      end\n  end\n\n  while j <= #num2 and k <= #num3 do\n      if num2[j] <= num3[k] then\n          table.insert(merged, num2[j])\n          j = j + 1\n      else\n          table.insert(merged, num3[k])\n          k = k + 1\n      end\n  end\n\n  while i <= #num1 do\n      table.insert(merged, num1[i])\n      i = i + 1\n  end\n\n  while j <= #num2 do\n      table.insert(merged, num2[j])\n      j = j + 1\n  end\n\n  while k <= #num3 do\n      table.insert(merged, num3[k])\n      k = k + 1\n  end\n\n  return merged\nend\n\n-- Example usage:\nlocal t1 = {1, 4, 7}\nlocal t2 = {2, 5, 8}\nlocal t3 = {3, 6, 9}\n\nlocal merged_table = merge_sorted_list(t1, t2, t3)\nfor _, v in ipairs(merged_table) do\n  print(v)\nend\n```\n\nThe function `merge_sorted_list` takes in three sorted tables num1, num2, and num3, and returns a single merged and sorted table. The final section shows example usage of the function and prints the merged and sorted result."}
{"name":"mbpp_109_odd_Equivalent","language":"lua","prompt":"-- Write a luathon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nlocal function odd_Equivalent(s, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_109_odd_Equivalent.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_Equivalent\n    lu.assertEquals(candidate('011001', 6), 3)\n    lu.assertEquals(candidate('11011', 5), 4)\n    lu.assertEquals(candidate('1010', 4), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_109_odd_Equivalent","gpt_solution":"```lua\nlocal function rotate(s, rotations)\n  local len = #s\n  rotations = rotations % len\n  return s:sub(len - rotations + 1)..s:sub(1, len - rotations)\nend\n\nlocal function is_odd(binary)\n  -- Convert binary string to number\n  local num = tonumber(binary, 2)\n  -- Check if the number is odd\n  return num % 2 == 1\nend\n\nlocal function odd_Equivalent(s, n)\n  local count = 0\n  \n  for i = 1, n do\n    local rotated_s = rotate(s, i)\n    if is_odd(rotated_s) then\n      count = count + 1\n    end\n  end\n\n  return count\nend\n\n-- Example usage:\n-- print(odd_Equivalent(\"1011\", 4))  -- Replace 4 with the number of rotations you want to check\n```\n\nThis function, `odd_Equivalent`, takes a binary string `s` and the number of rotations `n`, and returns how many of the rotated binary strings represent odd numbers. It defines two helper functions, `rotate` to rotate the binary string, and `is_odd` to check if a given binary string represents an odd number. The main function iterates through the number of rotations and counts how many of these rotations result in an odd number."}
{"name":"mbpp_113_check_integer","language":"lua","prompt":"-- Write a function to check if a string represents an integer or not.\nlocal function check_integer(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_113_check_integer.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_integer\n    lu.assertEquals(candidate('python'), false)\n    lu.assertEquals(candidate('1'), true)\n    lu.assertEquals(candidate('12345'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_113_check_integer","gpt_solution":"```lua\n-- Write a function to check if a string represents an integer or not.\nlocal function check_integer(text)\n    -- Check if the text is nil or an empty string\n    if text == nil or text == '' then\n        return false\n    end\n\n    -- Try to convert the string to a number\n    local number = tonumber(text)\n\n    -- Check if the number is an integer\n    if number and number % 1 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\n-- Test cases\nprint(check_integer(\"123\"))    -- true\nprint(check_integer(\"-123\"))   -- true\nprint(check_integer(\"12.3\"))   -- false\nprint(check_integer(\"abc\"))    -- false\nprint(check_integer(\"\"))       -- false\nprint(check_integer(nil))      -- false\n```"}
{"name":"mbpp_116_tuple_to_int","language":"lua","prompt":"-- Write a function to convert a given table of positive integers into a single integer.\nlocal function tuple_to_int(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_116_tuple_to_int.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_int\n    lu.assertEquals(candidate({1, 2, 3}), 123)\n    lu.assertEquals(candidate({4, 5, 6}), 456)\n    lu.assertEquals(candidate({5, 6, 7}), 567)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_116_tuple_to_int","gpt_solution":"```lua\n-- Write a function to convert a given table of positive integers into a single integer.\nlocal function tuple_to_int(nums)\n    -- Initialize an empty string to store the concatenated digits\n    local num_str = \"\"\n\n    -- Iterate over each number in the table\n    for _, num in ipairs(nums) do\n        -- Convert the number to a string and concatenate it\n        num_str = num_str .. tostring(num)\n    end\n    \n    -- Convert the concatenated string back to a number and return it\n    return tonumber(num_str)\nend\n\n-- Example usage:\n-- local nums = {1, 23, 456}\n-- print(tuple_to_int(nums))  -- Output: 123456\n```"}
{"name":"mbpp_117_list_to_float","language":"lua","prompt":"-- Write a function to convert all possible convertible elements in a table of tables to floats.\nlocal function list_to_float(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_117_list_to_float.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_to_float\n    lu.assertEquals(candidate({{'3', '4'}, {'1', '26.45'}, {'7.32', '8'}, {'4', '8'}}), {{3.0, 4.0}, {1.0, 26.45}, {7.32, 8.0}, {4.0, 8.0}})\n    lu.assertEquals(candidate({{'4', '4'}, {'2', '27'}, {'4.12', '9'}, {'7', '11'}}), {{4.0, 4.0}, {2.0, 27.0}, {4.12, 9.0}, {7.0, 11.0}})\n    lu.assertEquals(candidate({{'6', '78'}, {'5', '26.45'}, {'1.33', '4'}, {'82', '13'}}), {{6.0, 78.0}, {5.0, 26.45}, {1.33, 4.0}, {82.0, 13.0}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_117_list_to_float","gpt_solution":"```lua\nlocal function list_to_float(test_list)\n    -- Helper function to convert a value to float if possible\n    local function to_float(value)\n        local number = tonumber(value)\n        if number then\n            return number\n        else\n            return value\n        end\n    end\n\n    for i, sublist in ipairs(test_list) do\n        for j, value in ipairs(sublist) do\n            sublist[j] = to_float(value)\n        end\n    end\n\n    return test_list\nend\n```\n\nThis function iterates over each sublist in the main list and converts any elements that can be converted to floats using the `tonumber` function. If an element cannot be converted, it remains unchanged. The modified list is then returned."}
{"name":"mbpp_118_string_to_list","language":"lua","prompt":"-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_118_string_to_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_118_string_to_list","gpt_solution":"```lua\n-- Write a function to convert a string to a table of strings split on the space character.\nlocal function string_to_list(str)\n    local result = {}\n    for word in str:gmatch(\"%S+\") do\n        table.insert(result, word)\n    end\n    return result\nend\n\n-- Example usage:\n-- local words = string_to_list(\"This is a test string\")\n-- for i, word in ipairs(words) do\n--     print(i, word)\n-- end\n```"}
{"name":"mbpp_119_search","language":"lua","prompt":"-- Write a luathon function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_119_search.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_119_search","gpt_solution":"```lua\n-- Write a Lua function to find the element that appears only once in a sorted table.\nlocal function search(arr)\n    -- Initialize variables to store the unique element\n    local unique_element = nil\n    \n    -- Iterate through the table in steps of 2\n    for i = 1, #arr, 2 do\n        -- Check if the current element is the last element or \n        -- it is not equal to the next element\n        if i == #arr or arr[i] ~= arr[i + 1] then\n            unique_element = arr[i]\n            break\n        end\n    end\n    \n    return unique_element\nend\n\n-- Example usage\nlocal sortedTable = {1, 1, 2, 3, 3, 4, 4, 5, 5}\nprint(search(sortedTable)) -- Output: 2\n```"}
{"name":"mbpp_120_max_product_tuple","language":"lua","prompt":"-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_120_max_product_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_120_max_product_tuple","gpt_solution":"```lua\n-- Write a function to find the maximum absolute product between numbers in pairs of tables within a given table.\nlocal function max_product_tuple(list_of_pairs)\n    local max_product = 0\n\n    for _, pair in ipairs(list_of_pairs) do\n        local list1, list2 = pair[1], pair[2]\n\n        for _, num1 in ipairs(list1) do\n            for _, num2 in ipairs(list2) do\n                local product = math.abs(num1 * num2)\n                if product > max_product then\n                    max_product = product\n                end\n            end\n        end\n    end\n\n    return max_product\nend\n\n-- Example usage:\nlocal test_list = {\n    { {1, 2}, {-3, 7} },\n    { {4, 5}, {-6, 8} }\n}\n\nprint(max_product_tuple(test_list)) -- Output should be 40 (5 * 8)\n```"}
{"name":"mbpp_123_amicable_numbers_sum","language":"lua","prompt":"-- Write a function to sum all amicable numbers from 1 to a specified number.\nlocal function amicable_numbers_sum(limit)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_123_amicable_numbers_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = amicable_numbers_sum\n    lu.assertEquals(candidate(999), 504)\n    lu.assertEquals(candidate(9999), 31626)\n    lu.assertEquals(candidate(99), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_123_amicable_numbers_sum","gpt_solution":"```lua\n-- Function to calculate the sum of divisors of a number\nlocal function sum_of_divisors(n)\n    local sum = 1  -- 1 is a divisor for all numbers (except 0)\n    for i = 2, n \/\/ 2 do\n        if n % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\n-- Function to check if two numbers are amicable\nlocal function are_amicable(a, b)\n    return a ~= b and sum_of_divisors(a) == b and sum_of_divisors(b) == a\nend\n\n-- Function to sum all amicable numbers up to a specified limit\nlocal function amicable_numbers_sum(limit)\n    local sum = 0\n    for a = 2, limit do\n        local b = sum_of_divisors(a)\n        if b > a and are_amicable(a, b) then\n            sum = sum + a + b\n        end\n    end\n    return sum\nend\n\n-- Example usage:\n-- print(amicable_numbers_sum(10000)) -- This should print the sum of all amicable numbers from 1 to 10,000\n```"}
{"name":"mbpp_125_find_length","language":"lua","prompt":"-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_125_find_length.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_125_find_length","gpt_solution":"```lua\n-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(binary_string)\n    local max_diff = 0\n    local curr_diff = 0\n\n    for i = 1, #binary_string do\n        local char = binary_string:sub(i, i)\n        if char == '0' then\n            curr_diff = curr_diff + 1\n        else\n            curr_diff = curr_diff - 1\n        end\n\n        if curr_diff < 0 then\n            curr_diff = 0\n        end\n\n        if curr_diff > max_diff then\n            max_diff = curr_diff\n        end\n    end\n\n    return max_diff\nend\n\n-- Example usage:\nprint(find_length(\"11000010001\"))  -- Output can be: 4\n```"}
{"name":"mbpp_126_sum","language":"lua","prompt":"-- Write a luathon function to find the sum of common divisors of two given numbers.\nlocal function sum(a, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_126_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum\n    lu.assertEquals(candidate(10, 15), 6)\n    lu.assertEquals(candidate(100, 150), 93)\n    lu.assertEquals(candidate(4, 6), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_126_sum","gpt_solution":"```lua\n-- Function to find the sum of common divisors of two given numbers\nlocal function gcd(x, y)\n    while y ~= 0 do\n        x, y = y, x % y\n    end\n    return x\nend\n\nlocal function sum(a, b)\n    local common_gcd = gcd(a, b)\n    local sum_divisors = 0\n\n    for i = 1, common_gcd do\n        if common_gcd % i == 0 then\n            sum_divisors = sum_divisors + i\n        end\n    end\n\n    return sum_divisors\nend\n\n-- Example usage\n-- print(sum(12, 15)) -- Output: 1 + 3 = 4\n```\n\nThis implementation defines a helper function `gcd` to compute the greatest common divisor (GCD) of two numbers. The `sum` function then uses this GCD to find all of its divisors and sum them up. Divisors of the GCD are common divisors of the two numbers."}
{"name":"mbpp_127_multiply_int","language":"lua","prompt":"-- Write a function to multiply two integers.\nlocal function multiply_int(x, y)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_127_multiply_int.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply_int\n    lu.assertEquals(candidate(10, 20), 200)\n    lu.assertEquals(candidate(5, 10), 50)\n    lu.assertEquals(candidate(4, 8), 32)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_127_multiply_int","gpt_solution":"```lua\n-- Write a function to multiply two integers.\nlocal function multiply_int(x, y)\n    return x * y\nend\n\n-- Example usage:\nlocal result = multiply_int(4, 5)\nprint(result)  -- Output: 20\n```"}
{"name":"mbpp_128_long_words","language":"lua","prompt":"-- Write a function to find words that are longer than n characters from a given table of words.\nlocal function long_words(n, str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_128_long_words.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = long_words\n    lu.assertEquals(candidate(3, 'python is a programming language'), {'python', 'programming', 'language'})\n    lu.assertEquals(candidate(2, 'writing a program'), {'writing', 'program'})\n    lu.assertEquals(candidate(5, 'sorting list'), {'sorting'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_128_long_words","gpt_solution":"```lua\n-- Write a function to find words that are longer than n characters from a given table of words.\nlocal function long_words(n, str)\n    local words = {}\n    for word in str:gmatch(\"%S+\") do -- %S+ matches sequences of non-whitespace characters\n        if #word > n then\n            table.insert(words, word)\n        end\n    end\n    return words\nend\n```\n\nThis function `long_words` accepts two parameters: `n` (the minimum length of words to be returned) and `str` (a string containing words). It then iterates over each word in the string, checking if the length of the word is greater than `n`. If so, the word is added to the `words` table. Finally, it returns the table containing the longer words."}
{"name":"mbpp_129_magic_square_test","language":"lua","prompt":"-- Write a function to calculate whether the matrix is a magic square.\nlocal function magic_square_test(my_matrix)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_129_magic_square_test.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = magic_square_test\n    lu.assertEquals(candidate({{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}}), true)\n    lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}), true)\n    lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 7}}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_129_magic_square_test","gpt_solution":"```lua\n-- Function to calculate whether a given matrix is a magic square\nlocal function magic_square_test(my_matrix)\n    -- Validate if the matrix is non-empty and square\n    local n = #my_matrix\n    if n == 0 then \n        return false \n    end\n\n    for i = 1, n do\n        if #my_matrix[i] ~= n then \n            return false \n        end\n    end\n\n    -- Calculate the sum of the first row to set the magic sum\n    local magic_sum = 0\n    for j = 1, n do\n        magic_sum = magic_sum + my_matrix[1][j]\n    end\n\n    -- Check sums of all rows\n    for i = 2, n do\n        local row_sum = 0\n        for j = 1, n do\n            row_sum = row_sum + my_matrix[i][j]\n        end\n        if row_sum ~= magic_sum then\n            return false\n        end\n    end\n\n    -- Check sums of all columns\n    for j = 1, n do\n        local col_sum = 0\n        for i = 1, n do\n            col_sum = col_sum + my_matrix[i][j]\n        end\n        if col_sum ~= magic_sum then\n            return false\n        end\n    end\n\n    -- Check sum of the main diagonal\n    local main_diag_sum = 0\n    for i = 1, n do\n        main_diag_sum = main_diag_sum + my_matrix[i][i]\n    end\n    if main_diag_sum ~= magic_sum then\n        return false\n    end\n\n    -- Check sum of the secondary diagonal\n    local sec_diag_sum = 0\n    for i = 1, n do\n        sec_diag_sum = sec_diag_sum + my_matrix[i][n - i + 1]\n    end\n    if sec_diag_sum ~= magic_sum then\n        return false\n    end\n\n    -- If all checks pass, it's a magic square\n    return true\nend\n```"}
{"name":"mbpp_130_max_occurrences","language":"lua","prompt":"-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_130_max_occurrences.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_130_max_occurrences","gpt_solution":"```lua\n-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local frequency = {}\n  for _, num in ipairs(nums) do\n    if frequency[num] then\n      frequency[num] = frequency[num] + 1\n    else\n      frequency[num] = 1\n    end\n  end\n\n  local max_count = 0\n  local max_item = nil\n  for item, count in pairs(frequency) do\n    if count > max_count then\n      max_count = count\n      max_item = item\n    end\n  end\n\n  return max_item\nend\n\n-- Example usage:\n-- local nums = {1, 2, 3, 2, 4, 2, 5, 6, 2, 3, 3}\n-- print(max_occurrences(nums))  -- Output: 2\n```"}
{"name":"mbpp_131_reverse_vowels","language":"lua","prompt":"-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_131_reverse_vowels.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_131_reverse_vowels","gpt_solution":"```lua\nlocal function reverse_vowels(str1)\n    -- Function to check if a character is a vowel\n    local function is_vowel(ch)\n        local vowels = \"AEIOUaeiou\"\n        return string.find(vowels, ch) ~= nil\n    end\n\n    -- Find all vowels in the string\n    local vowels = {}\n    for i = 1, #str1 do\n        local ch = string.sub(str1, i, i)\n        if is_vowel(ch) then\n            table.insert(vowels, ch)\n        end\n    end\n\n    -- Create a result string with reversed vowels\n    local result = {}\n    local vowel_index = #vowels\n    for i = 1, #str1 do\n        local ch = string.sub(str1, i, i)\n        if is_vowel(ch) then\n            result[i] = vowels[vowel_index]\n            vowel_index = vowel_index - 1\n        else\n            result[i] = ch\n        end\n    end\n    \n    return table.concat(result)\nend\n\n-- Example usage\nprint(reverse_vowels(\"hello\"))    -- holle\nprint(reverse_vowels(\"programming\")) -- pragromming\n```\n\nThis code defines a `reverse_vowels` function that reverses only the vowels in the given string. It includes an inner function `is_vowel` to check whether a character is a vowel and follows the steps to find all vowels, reverse them, and construct the result string accordingly."}
{"name":"mbpp_132_tup_string","language":"lua","prompt":"-- Write a function to convert a table to a string.\nlocal function tup_string(tup1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_132_tup_string.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tup_string\n    lu.assertEquals(candidate({'e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'}), 'exercises')\n    lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}), 'python')\n    lu.assertEquals(candidate({'p', 'r', 'o', 'g', 'r', 'a', 'm'}), 'program')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_132_tup_string","gpt_solution":"```lua\n-- Function to convert a table to a string\nlocal function tup_string(tup1)\n    -- Check if the input is a table\n    if type(tup1) ~= \"table\" then\n        error(\"Expected a table\")\n    end\n    \n    local result = \"{\"\n    for key, value in pairs(tup1) do\n        -- Handle different types of values\n        if type(value) == \"string\" then\n            result = result .. key .. \"=\\\"\" .. value .. \"\\\", \"\n        elseif type(value) == \"number\" then\n            result = result .. key .. \"=\" .. value .. \", \"\n        elseif type(value) == \"boolean\" then\n            result = result .. key .. \"=\" .. tostring(value) .. \", \"\n        elseif type(value) == \"table\" then\n            result = result .. key .. \"=\" .. tup_string(value) .. \", \"\n        else\n            error(\"Unsupported data type in table\")\n        end\n    end\n    \n    -- Remove the last comma and space, and close the table representation\n    if result:sub(-2) == \", \" then\n        result = result:sub(1, -3)\n    end\n    result = result .. \"}\"\n    \n    return result\nend\n```"}
{"name":"mbpp_133_sum_negativenum","language":"lua","prompt":"-- Write a function to calculate the sum of the negative numbers of a given table of numbers.\nlocal function sum_negativenum(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_133_sum_negativenum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_negativenum\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), -32)\n    lu.assertEquals(candidate({10, 15, -14, 13, -18, 12, -20}), -52)\n    lu.assertEquals(candidate({19, -65, 57, 39, 152, -639, 121, 44, 90, -190}), -894)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_133_sum_negativenum","gpt_solution":"```lua\n-- Write a function to calculate the sum of the negative numbers of a given table of numbers.\nlocal function sum_negativenum(nums)\n    local sum = 0\n    for _, num in ipairs(nums) do\n        if num < 0 then\n            sum = sum + num\n        end\n    end\n    return sum\nend\n```"}
{"name":"mbpp_135_hexagonal_num","language":"lua","prompt":"-- Write a function to find the nth hexagonal number.\nlocal function hexagonal_num(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_135_hexagonal_num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hexagonal_num\n    lu.assertEquals(candidate(10), 190)\n    lu.assertEquals(candidate(5), 45)\n    lu.assertEquals(candidate(7), 91)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_135_hexagonal_num","gpt_solution":"```lua\n-- Function to find the nth hexagonal number.\n-- The nth hexagonal number can be calculated using the formula: H(n) = n * (2n - 1)\n\nlocal function hexagonal_num(n)\n    return n * (2 * n - 1)\nend\n```\n\nThis code defines a function `hexagonal_num` that calculates and returns the nth hexagonal number based on the formula given. You can call this function with your desired `n` to get the corresponding hexagonal number."}
{"name":"mbpp_138_is_Sum_Of_Powers_Of_Two","language":"lua","prompt":"-- Write a luathon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nlocal function is_Sum_Of_Powers_Of_Two(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_138_is_Sum_Of_Powers_Of_Two.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Sum_Of_Powers_Of_Two\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(7), false)\n    lu.assertEquals(candidate(14), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_138_is_Sum_Of_Powers_Of_Two","gpt_solution":"```lua\n-- This function checks whether a given number can be represented as the sum of non-zero powers of 2.\nlocal function is_Sum_Of_Powers_Of_Two(n)\n  -- Return false if n is 0 or negative as those cannot be represented in the required form\n  if n <= 0 then\n    return false\n  end\n  \n  -- Count the number of ones in the binary representation of n\n  while n > 0 do\n    if n % 2 == 0 then\n      n = math.floor(n \/ 2)\n    else\n      n = math.floor(n \/ 2)\n      -- If we find another '1' after finding the first, it indicates that the number can be expressed as a sum of non-zero powers of 2.\n      if n == 0 then\n        return true\n      end\n    end\n  end\n  \n  -- If we complete the loop without returning true, then it cannot be expressed as the sum of non-zero powers of 2\n  return false\nend\n```"}
{"name":"mbpp_141_pancake_sort","language":"lua","prompt":"-- Write a function to sort a table of elements.\nlocal function pancake_sort(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_141_pancake_sort.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pancake_sort\n    lu.assertEquals(candidate({15, 79, 25, 38, 69}), {15, 25, 38, 69, 79})\n    lu.assertEquals(candidate({98, 12, 54, 36, 85}), {12, 36, 54, 85, 98})\n    lu.assertEquals(candidate({41, 42, 32, 12, 23}), {12, 23, 32, 41, 42})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_141_pancake_sort","gpt_solution":"```lua\n-- Write a function to sort a table of elements using the pancake sort algorithm.\nlocal function flip(nums, i)\n    local start = 1\n    while start < i do\n        nums[start], nums[i] = nums[i], nums[start]\n        start = start + 1\n        i = i - 1\n    end\nend\n\nlocal function find_max(nums, n)\n    local max_idx = 1\n    for i = 2, n do\n        if nums[i] > nums[max_idx] then\n            max_idx = i\n        end\n    end\n    return max_idx\nend\n\nlocal function pancake_sort(nums)\n    local n = #nums\n    for curr_size = n, 1, -1 do\n        local max_idx = find_max(nums, curr_size)\n        \n        if max_idx ~= curr_size then\n            -- Flip the maximum number to the front\n            flip(nums, max_idx)\n            -- Flip it to its correct position\n            flip(nums, curr_size)\n        end\n    end\nend\n\n-- Example usage:\nlocal arr = {3, 6, 12, 8, 5, 2}\npancake_sort(arr)\nfor i, v in ipairs(arr) do\n    print(v)\nend\n```\n\nIn this code, the `pancake_sort` function sorts a provided table `nums` using the pancake sort algorithm. The helper function `flip` reverses the order of the first `i` elements in the table. The `find_max` function finds the index of the maximum element within the first `n` elements of the table. The `pancake_sort` function then repeatedly finds the maximum element and uses flips to move it to its correct position in descending order of the sizes of the sub-arrays."}
{"name":"mbpp_142_count_samepair","language":"lua","prompt":"-- Write a function to count number items that are identical in the same position of three given tables.\nlocal function count_samepair(list1, list2, list3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_142_count_samepair.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_samepair\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}, {2, 1, 3, 1, 2, 6, 7, 9}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 8}, {2, 1, 3, 1, 2, 6, 7, 8}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 2, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 8}, {2, 1, 3, 1, 2, 6, 7, 8}), 5)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_142_count_samepair","gpt_solution":"```lua\n-- Write a function to count number items that are identical in the same position of three given tables.\nlocal function count_samepair(list1, list2, list3)\n    local count = 0\n    local minLength = math.min(#list1, #list2, #list3)\n\n    for i = 1, minLength do\n        if list1[i] == list2[i] and list1[i] == list3[i] then\n            count = count + 1\n        end\n    end\n\n    return count\nend\n```"}
{"name":"mbpp_143_find_lists","language":"lua","prompt":"-- Write a function to find number of tables present in the given table.\nlocal function find_lists(Input)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_143_find_lists.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_lists\n    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}}), 2)\n    lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}}), 3)\n    lu.assertEquals(candidate({9, 8, 7, 6, 5, 4, 3, 2, 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_143_find_lists","gpt_solution":"```lua\n-- Write a function to find number of tables present in the given table.\nlocal function find_lists(input)\n    local count = 0\n    \n    -- Iterate over each element in the input table\n    for _, value in pairs(input) do\n        -- Check if the element is a table\n        if type(value) == \"table\" then\n            count = count + 1\n        end\n    end\n    \n    return count\nend\n\n-- Example usage\nlocal example = {1, \"string\", {}, {1, 2, 3}, 5, {a = 1, b = 2}}\nprint(find_lists(example))  -- Output: 3\n```"}
{"name":"mbpp_145_max_Abs_Diff","language":"lua","prompt":"-- Write a luathon function to find the maximum difference between any two elements in a given table.\nlocal function max_Abs_Diff(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_145_max_Abs_Diff.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_Abs_Diff\n    lu.assertEquals(candidate({2, 1, 5, 3}), 4)\n    lu.assertEquals(candidate({9, 3, 2, 5, 1}), 8)\n    lu.assertEquals(candidate({3, 2, 1}), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_145_max_Abs_Diff","gpt_solution":"```lua\n-- Write a luathon function to find the maximum difference between any two elements in a given table.\nlocal function max_Abs_Diff(arr)\n    if #arr < 2 then\n        return 0\n    end\n\n    local max_val = arr[1]\n    local min_val = arr[1]\n\n    for i = 2, #arr do\n        if arr[i] > max_val then\n            max_val = arr[i]\n        end\n        if arr[i] < min_val then\n            min_val = arr[i]\n        end\n    end\n\n    return max_val - min_val\nend\n```"}
{"name":"mbpp_160_find_solution","language":"lua","prompt":"-- Write a function that returns integers x and y that satisfy ax + by = n as a table, or return nil if no solution exists.\nlocal function find_solution(a, b, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_160_find_solution.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_solution\n    lu.assertEquals(candidate(2, 3, 7), {2, 1})\n    lu.assertEquals(candidate(4, 2, 7), None)\n    lu.assertEquals(candidate(1, 13, 17), {4, 1})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_160_find_solution","gpt_solution":"```lua\nlocal function gcd_extended(a, b)\n    if a == 0 then\n        return b, 0, 1\n    else\n        local gcd, x1, y1 = gcd_extended(b % a, a)\n        local x = y1 - (b \/\/ a) * x1\n        local y = x1\n        return gcd, x, y\n    end\nend\n\nlocal function find_solution(a, b, n)\n    local gcd, x, y = gcd_extended(a, b)\n\n    if n % gcd ~= 0 then\n        return nil\n    end\n\n    x = x * (n \/\/ gcd)\n    y = y * (n \/\/ gcd)\n\n    return { x = x, y = y }\nend\n\n-- Example usage:\n-- local result = find_solution(3, 6, 18)\n-- if result then\n--     print(result.x, result.y)  -- Should print integers x and y such that 3x + 6y = 18\n-- else\n--     print(\"No solution exists\")\n-- end\n```"}
{"name":"mbpp_161_remove_elements","language":"lua","prompt":"-- Write a function to remove all elements from a given table present in another table.\nlocal function remove_elements(list1, list2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_161_remove_elements.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_elements\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 5, 7}), {2, 4, 6, 8, 9, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5, 7}), {1, 2, 3, 4, 6, 8, 9, 10})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_161_remove_elements","gpt_solution":"```lua\n-- Write a function to remove all elements from a given table present in another table.\nlocal function remove_elements(list1, list2)\n    -- Create a set for elements in list2 for quick lookup\n    local set = {}\n    for _, value in ipairs(list2) do\n        set[value] = true\n    end\n\n    -- Create a new table to store the results\n    local result = {}\n    for _, value in ipairs(list1) do\n        if not set[value] then\n            table.insert(result, value)\n        end\n    end\n\n    return result\nend\n\n-- Example Usage\n-- local list1 = {1, 2, 3, 4, 5}\n-- local list2 = {2, 4}\n-- local filtered_list = remove_elements(list1, list2)\n-- for _, value in ipairs(filtered_list) do\n--     print(value)  -- Output: 1, 3, 5\n-- end\n```\n\nThis function takes two tables, `list1` and `list2`. It removes all elements from `list1` that are present in `list2` and returns a new table containing the remaining elements. The example usage is commented out but can be uncommented to see how the function works."}
{"name":"mbpp_162_sum_series","language":"lua","prompt":"-- Write a function to calculate the sum (n - 2*i) from i=0 to n \/\/ 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nlocal function sum_series(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_162_sum_series.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_series\n    lu.assertEquals(candidate(6), 12)\n    lu.assertEquals(candidate(10), 30)\n    lu.assertEquals(candidate(9), 25)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_162_sum_series","gpt_solution":"```lua\nlocal function sum_series(n)\n    local sum = 0\n    for i = 0, n \/\/ 2 do\n        sum = sum + (n - 2 * i)\n    end\n    return sum\nend\n```"}
{"name":"mbpp_164_are_equivalent","language":"lua","prompt":"-- Write a function to determine if the sum of the divisors of two integers are the same.\nlocal function are_equivalent(num1, num2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_164_are_equivalent.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = are_equivalent\n    lu.assertEquals(candidate(36, 57), false)\n    lu.assertEquals(candidate(2, 4), false)\n    lu.assertEquals(candidate(23, 47), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_164_are_equivalent","gpt_solution":"```lua\n-- Write a function to determine if the sum of the divisors of two integers are the same.\nlocal function sum_of_divisors(num)\n  local sum = 0\n  for i = 1, num - 1 do\n    if num % i == 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\n\nlocal function are_equivalent(num1, num2)\n  return sum_of_divisors(num1) == sum_of_divisors(num2)\nend\n\n-- Example usage:\n-- print(are_equivalent(220, 284))  -- Should output true\n-- print(are_equivalent(10, 20))    -- Should output false\n```"}
{"name":"mbpp_165_count_char_position","language":"lua","prompt":"-- Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nlocal function count_char_position(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_165_count_char_position.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_char_position\n    lu.assertEquals(candidate('xbcefg'), 2)\n    lu.assertEquals(candidate('ABcED'), 3)\n    lu.assertEquals(candidate('AbgdeF'), 5)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_165_count_char_position","gpt_solution":"```lua\nlocal function count_char_position(str1)\n    -- Convert the string to lower case to make the comparison case insensitive\n    str1 = string.lower(str1)\n    local count = 0\n    \n    for i = 1, #str1 do\n        -- Get the ASCII value of the character at position i\n        local char = str1:sub(i, i)\n        local ascii_val = string.byte(char)\n        \n        -- Calculate the expected ASCII value if the character matches its position in the alphabet \n        local expected_ascii_val = string.byte('a') + (i - 1)\n        \n        -- Check if character's ASCII value matches the expected value\n        if ascii_val == expected_ascii_val then\n            count = count + 1\n        end\n    end\n    \n    return count\nend\n\n-- Example usage\nprint(count_char_position(\"aBcDeFg\")) -- Output should be 2 ('a' and 'c')\n```"}
{"name":"mbpp_166_find_even_pair","language":"lua","prompt":"-- Write a function that counts the number of pairs of integers in a table that xor to an even number.\nlocal function find_even_pair(A)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_166_find_even_pair.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_even_pair\n    lu.assertEquals(candidate({5, 4, 7, 2, 1}), 4)\n    lu.assertEquals(candidate({7, 2, 8, 1, 0, 5, 11}), 9)\n    lu.assertEquals(candidate({1, 2, 3}), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_166_find_even_pair","gpt_solution":"```lua\n-- Write a function that counts the number of pairs of integers in a table that xor to an even number.\n\nlocal function find_even_pair(A)\n    local count_even_pairs = 0\n\n    -- iterate over each pair of elements in A\n    for i = 1, #A do\n        for j = i + 1, #A do\n            -- Check if the XOR result is even\n            if (A[i] ~ A[j]) % 2 == 0 then\n                count_even_pairs = count_even_pairs + 1\n            end\n        end\n    end\n\n    return count_even_pairs\nend\n\n-- Example usage:\nlocal A = {1, 2, 3, 4}\nprint(find_even_pair(A)) -- Should print 2 as pairs (1, 3) and (2, 4) xor to an even number\n```"}
{"name":"mbpp_167_next_power_of_2","language":"lua","prompt":"-- Write a luathon function to find the smallest power of 2 greater than or equal to n.\nlocal function next_power_of_2(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_167_next_power_of_2.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_power_of_2\n    lu.assertEquals(candidate(0), 1)\n    lu.assertEquals(candidate(5), 8)\n    lu.assertEquals(candidate(17), 32)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_167_next_power_of_2","gpt_solution":"```lua\n-- Write a function to find the smallest power of 2 greater than or equal to n.\nlocal function next_power_of_2(n)\n    if n <= 0 then\n        return 1\n    end\n    \n    n = n - 1\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    n = n | (n >> 32) -- Lua may not support 64-bit bitwise operations directly\n\n    return n + 1\nend\n```"}
{"name":"mbpp_168_frequency","language":"lua","prompt":"-- Write a function to count the number of occurrences of a number in a given table.\nlocal function frequency(a, x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_168_frequency.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = frequency\n    lu.assertEquals(candidate({1, 2, 3}, 4), 0)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 3, 4}, 3), 3)\n    lu.assertEquals(candidate({0, 1, 2, 3, 1, 2}, 1), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_168_frequency","gpt_solution":"```lua\n-- Write a function to count the number of occurrences of a number in a given table.\nlocal function frequency(a, x)\n    local count = 0\n    for _, value in ipairs(a) do\n        if value == x then\n            count = count + 1\n        end\n    end\n    return count\nend\n\n-- Example usage:\n-- local tbl = {1, 2, 3, 2, 2, 4, 2}\n-- print(frequency(tbl, 2)) -- Output should be 4\n```"}
{"name":"mbpp_170_sum_range_list","language":"lua","prompt":"-- Write a function to find the sum of numbers in a table within a range specified by two indices.\nlocal function sum_range_list(list1, m, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_170_sum_range_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_range_list\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10), 29)\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7), 16)\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10), 38)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_170_sum_range_list","gpt_solution":"```lua\n-- Write a function to find the sum of numbers in a table within a range specified by two indices.\nlocal function sum_range_list(list1, m, n)\n    local sum = 0\n    for i = m, n do\n        sum = sum + list1[i]\n    end\n    return sum\nend\n```\n\nThis function, `sum_range_list`, calculates the sum of elements in the table `list1` from the m-th index to the n-th index (both inclusive)."}
{"name":"mbpp_171_perimeter_pentagon","language":"lua","prompt":"-- Write a function to find the perimeter of a regular pentagon from the length of its sides.\nlocal function perimeter_pentagon(a)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_171_perimeter_pentagon.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perimeter_pentagon\n    lu.assertEquals(candidate(5), 25)\n    lu.assertEquals(candidate(10), 50)\n    lu.assertEquals(candidate(15), 75)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_171_perimeter_pentagon","gpt_solution":"```lua\n-- Write a function to find the perimeter of a regular pentagon from the length of its sides.\nlocal function perimeter_pentagon(a)\n   -- Perimeter of a regular pentagon is 5 times the length of one side\n   return 5 * a\nend\n\n-- Example usage:\n-- print(perimeter_pentagon(3)) -- Output will be 15\n```\n\nThis function `perimeter_pentagon` calculates the perimeter of a regular pentagon given the length of one of its sides, `a`. The perimeter is simply 5 times the side length."}
{"name":"mbpp_172_count_occurance","language":"lua","prompt":"-- Write a function to count the number of occurence of the string 'std' in a given string.\nlocal function count_occurance(s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_172_count_occurance.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_occurance\n    lu.assertEquals(candidate('letstdlenstdporstd'), 3)\n    lu.assertEquals(candidate('truststdsolensporsd'), 1)\n    lu.assertEquals(candidate('makestdsostdworthit'), 2)\n    lu.assertEquals(candidate('stds'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_172_count_occurance","gpt_solution":"```lua\n-- Write a function to count the number of occurrences of the string 'std' in a given string.\nlocal function count_occurrence(s)\n    local count = 0\n    local start = 1\n    \n    while true do\n        local found = string.find(s, 'std', start, true)\n        if not found then\n            break\n        end\n        count = count + 1\n        start = found + 1\n    end\n\n    return count\nend\n\n-- Example usage:\nlocal input_string = \"std, std library, and other std issues.\"\nprint(count_occurrence(input_string))  -- Output: 3\n```\n\nThis `count_occurrence` function takes a string `s` as input and counts the number of times the substring `'std'` occurs within that string. It uses a while loop to search for the substring and increments the count each time the substring is found. The function then returns the final count."}
{"name":"mbpp_222_check_type","language":"lua","prompt":"-- Write a function to check if all the elements in table have same data type or not.\nlocal function check_type(test_tuple)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_222_check_type.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_type\n    lu.assertEquals(candidate({5, 6, 7, 3, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, '4'}), false)\n    lu.assertEquals(candidate({3, 2, 1, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_222_check_type","gpt_solution":"```lua\n-- Write a function to check if all the elements in table have same data type or not.\nlocal function check_type(test_tuple)\n    if #test_tuple == 0 then\n        return true\n    end\n\n    local first_type = type(test_tuple[1])\n    for i = 2, #test_tuple do\n        if type(test_tuple[i]) ~= first_type then\n            return false\n        end\n    end\n    \n    return true\nend\n\n-- Example usage:\n-- print(check_type({1, 2, 3}))  -- Output: true\n-- print(check_type({1, \"string\", 3}))  -- Output: false\n```"}
{"name":"mbpp_223_is_majority","language":"lua","prompt":"-- Write a function that takes in a sorted table, its length (n), and an element and returns whether the element is the majority element in the given sorted table. (The majority element is the element that occurs more than n\/2 times.)\nlocal function is_majority(arr, n, x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_223_is_majority.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_majority\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 3, 10}, 7, 3), true)\n    lu.assertEquals(candidate({1, 1, 2, 4, 4, 4, 6, 6}, 8, 4), false)\n    lu.assertEquals(candidate({1, 1, 1, 2, 2}, 5, 1), true)\n    lu.assertEquals(candidate({1, 1, 2, 2}, 5, 1), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_223_is_majority","gpt_solution":"```lua\nlocal function is_majority(arr, n, x)\n    -- Helper function to find the first occurrence of an element\n    local function first_occurrence(arr, low, high, x)\n        if high >= low then\n            local mid = low + math.floor((high - low) \/ 2)\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x then\n                return mid\n            elseif x > arr[mid] then\n                return first_occurrence(arr, mid + 1, high, x)\n            else\n                return first_occurrence(arr, low, mid - 1, x)\n            end\n        end\n        return -1\n    end\n    \n    -- Find the first occurrence of x\n    local first = first_occurrence(arr, 0, n - 1, x)\n    \n    -- If the element is not found, return false\n    if first == -1 then\n        return false\n    end\n    \n    -- Check if the element appears more than n\/2 times\n    if (first + math.floor(n \/ 2)) < n and arr[first + math.floor(n \/ 2)] == x then\n        return true\n    end\n    \n    return false\nend\n\n-- Example usage:\nlocal sorted_table = {1, 2, 3, 3, 3, 3, 10}\nlocal n = #sorted_table\nlocal element = 3\nprint(is_majority(sorted_table, n, element))  -- Output: true\n```"}
{"name":"mbpp_224_count_Set_Bits","language":"lua","prompt":"-- Write a luathon function to count the number of set bits (binary digits with value 1) in a given number.\nlocal function count_Set_Bits(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_224_count_Set_Bits.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Set_Bits\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(4), 1)\n    lu.assertEquals(candidate(6), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_224_count_Set_Bits","gpt_solution":"```lua\n-- Function to count the number of set bits (binary digits with value 1) in a given number.\nlocal function count_Set_Bits(n)\n    local count = 0\n    while n > 0 do\n        if n % 2 == 1 then\n            count = count + 1\n        end\n        n = math.floor(n \/ 2)\n    end\n    return count\nend\n\n-- Example usage:\n-- print(count_Set_Bits(5))  -- Output: 2 (binary representation of 5 is 101, has 2 set bits)\n-- print(count_Set_Bits(7))  -- Output: 3 (binary representation of 7 is 111, has 3 set bits)\n```"}
{"name":"mbpp_226_odd_values_string","language":"lua","prompt":"-- Write a luathon function to remove the characters which have odd index values of a given string.\nlocal function odd_values_string(str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_226_odd_values_string.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_values_string\n    lu.assertEquals(candidate('abcdef'), 'ace')\n    lu.assertEquals(candidate('python'), 'pto')\n    lu.assertEquals(candidate('data'), 'dt')\n    lu.assertEquals(candidate('lambs'), 'lms')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_226_odd_values_string","gpt_solution":"```lua\n--[[ \nFunction to remove the characters which have odd index values of a given string.\nOdd index values are considered based on Lua's 1-based indexing.\nFor example, the string \"abcdef\" will return \"ace\".\n]]\nlocal function odd_values_string(str)\n    local result = {}\n    \n    for i = 1, #str do\n        if i % 2 ~= 0 then  -- Check if the index is odd\n            table.insert(result, str:sub(i, i))\n        end\n    end\n    \n    return table.concat(result)\nend\n\n-- Test the function\nprint(odd_values_string(\"abcdef\"))  -- Output: ace\nprint(odd_values_string(\"123456789\"))  -- Output: 13579\n```"}
{"name":"mbpp_227_min_of_three","language":"lua","prompt":"-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_227_min_of_three.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_227_min_of_three","gpt_solution":"Sure, here's the Lua function to find the minimum of three numbers:\n\n```lua\n-- Write a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n    if a <= b and a <= c then\n        return a\n    elseif b <= a and b <= c then\n        return b\n    else\n        return c\n    end\nend\n\n-- Example usage:\nlocal a, b, c = 5, 7, 3\nprint(\"The minimum of\", a, b, c, \"is\", min_of_three(a, b, c))\n```\n\nThis function takes three arguments `a`, `b`, and `c`, and returns the smallest of the three. The logic is simple: it compares `a` to both `b` and `c`, then `b` to both `a` and `c`, and finally assumes `c` is the smallest if the other conditions are not met."}
{"name":"mbpp_228_all_Bits_Set_In_The_Given_Range","language":"lua","prompt":"-- Write a luathon function to check whether all the bits are unset in the given range or not.\nlocal function all_Bits_Set_In_The_Given_Range(n, l, r)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_228_all_Bits_Set_In_The_Given_Range.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_Bits_Set_In_The_Given_Range\n    lu.assertEquals(candidate(4, 1, 2), true)\n    lu.assertEquals(candidate(17, 2, 4), true)\n    lu.assertEquals(candidate(39, 4, 6), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_228_all_Bits_Set_In_The_Given_Range","gpt_solution":"```lua\n-- Write a luathon function to check whether all the bits are unset in the given range or not.\nlocal function all_Bits_Set_In_The_Given_Range(n, l, r)\n    -- Mask to isolate the specified range\n    local mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    \n    -- Isolate the bits in the range and check if they are all unset (0)\n    return (n & mask) == 0\nend\n\n-- Test the function\nprint(all_Bits_Set_In_The_Given_Range(8, 2, 3))  -- Should return true\nprint(all_Bits_Set_In_The_Given_Range(15, 2, 3)) -- Should return false\nprint(all_Bits_Set_In_The_Given_Range(0, 1, 4))  -- Should return true\nprint(all_Bits_Set_In_The_Given_Range(32, 2, 6)) -- Should return false\n```\n\nIn the given code:\n- `n` is the integer to be checked.\n- `l` is the starting index of the range.\n- `r` is the ending index of the range.\n- The function `all_Bits_Set_In_The_Given_Range` returns `true` if all the bits in the given range [l, r] are unset (i.e., they are 0), and `false` otherwise."}
{"name":"mbpp_229_re_arrange_array","language":"lua","prompt":"-- Write a function that takes in a table and an integer n, and re-arranges the first n elements of the given table so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nlocal function re_arrange_array(arr, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_229_re_arrange_array.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = re_arrange_array\n    lu.assertEquals(candidate({-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), {-1, -3, -7, 4, 5, 6, 2, 8, 9})\n    lu.assertEquals(candidate({12, -14, -26, 13, 15}, 5), {-14, -26, 12, 13, 15})\n    lu.assertEquals(candidate({10, 24, 36, -42, -39, -78, 85}, 7), {-42, -39, -78, 10, 24, 36, 85})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_229_re_arrange_array","gpt_solution":"```lua\nlocal function re_arrange_array(arr, n)\n    -- Temporary tables to hold negative and positive elements\n    local negatives = {}\n    local positives = {}\n\n    -- Traverse through the first n elements of the array\n    for i = 1, n do\n        if arr[i] < 0 then\n            table.insert(negatives, arr[i])\n        else\n            table.insert(positives, arr[i])\n        end\n    end\n\n    -- Combine the negatives and positives back into the original array for the first n elements\n    local index = 1\n    for _, neg in ipairs(negatives) do\n        arr[index] = neg\n        index = index + 1\n    end\n    for _, pos in ipairs(positives) do\n        arr[index] = pos\n        index = index + 1\n    end\nend\n```\n\nThis function, `re_arrange_array`, takes in a table `arr` and an integer `n`. It rearranges the first `n` elements of the table so that all negative elements appear before positive ones, keeping the original relative order for both negative and positive elements."}
{"name":"mbpp_230_replace_blank","language":"lua","prompt":"-- Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nlocal function replace_blank(str1, char)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_230_replace_blank.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_blank\n    lu.assertEquals(candidate('hello people', '@'), 'hello@people')\n    lu.assertEquals(candidate('python program language', '$'), 'python$program$language')\n    lu.assertEquals(candidate('blank space', '-'), 'blank-space')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_230_replace_blank","gpt_solution":"```lua\nlocal function replace_blank(str1, char)\n    -- Check if the input character is valid (should be a single character)\n    if #char ~= 1 then\n        error(\"The replacement character should be a single character\")\n    end\n\n    -- Replace blank spaces with the given character\n    local result = str1:gsub(\" \", char)\n    \n    return result\nend\n\n-- Example usage:\n-- print(replace_blank(\"Hello World\", \"-\"))  -- Output: Hello-World\n-- print(replace_blank(\"  Lua Programming  \", \"_\")) -- Output: \"__Lua_Programming__\"\n```"}
{"name":"mbpp_234_volume_cube","language":"lua","prompt":"-- Write a function to find the volume of a cube given its side length.\nlocal function volume_cube(l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_234_volume_cube.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = volume_cube\n    lu.assertEquals(candidate(3), 27)\n    lu.assertEquals(candidate(2), 8)\n    lu.assertEquals(candidate(5), 125)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_234_volume_cube","gpt_solution":"```lua\n-- Write a function to find the volume of a cube given its side length.\nlocal function volume_cube(l)\n    -- Cube volume is calculated as side length cubed: l^3\n    return l * l * l\nend\n\n-- Example Usage\nlocal side_length = 3\nprint(\"Volume of the cube with side length \", side_length, \" is \", volume_cube(side_length))\n```"}
{"name":"mbpp_237_check_occurences","language":"lua","prompt":"-- Write a function that takes in a table of tables and returns a table mapping each unique table to the number of times it occurs in the table.\nlocal function check_occurences(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_237_check_occurences.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_occurences\n    lu.assertEquals(candidate({{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}), {[{1, 3}] = 2, [{2, 5}] = 2, [{3, 6}] = 1})\n    lu.assertEquals(candidate({{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}), {[{2, 4}] = 2, [{3, 6}] = 2, [{4, 7}] = 1})\n    lu.assertEquals(candidate({{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}), {[{2, 13}] = 1, [{11, 23}] = 1, [{12, 25}] = 2, [{16, 23}] = 1})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_237_check_occurences","gpt_solution":"```lua\nlocal function check_occurrences(test_list)\n    local occurrences = {}\n\n    for _, sublist in ipairs(test_list) do\n        local key = table.concat(sublist, \",\")\n        if occurrences[key] then\n            occurrences[key] = occurrences[key] + 1\n        else\n            occurrences[key] = 1\n        end\n    end\n\n    local result = {}\n    for key, count in pairs(occurrences) do\n        local sublist = {}\n        for value in string.gmatch(key, \"([^,]+)\") do\n            table.insert(sublist, tonumber(value))\n        end\n        result[sublist] = count\n    end\n    \n    return result\nend\n```"}
{"name":"mbpp_238_number_of_substrings","language":"lua","prompt":"-- Write a luathon function to count the number of non-empty substrings of a given string.\nlocal function number_of_substrings(str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_238_number_of_substrings.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = number_of_substrings\n    lu.assertEquals(candidate('abc'), 6)\n    lu.assertEquals(candidate('abcd'), 10)\n    lu.assertEquals(candidate('abcde'), 15)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_238_number_of_substrings","gpt_solution":"```lua\n-- Write a luathon function to count the number of non-empty substrings of a given string.\nlocal function number_of_substrings(str)\n    local n = #str\n    -- The number of non-empty substrings of a string of length n is given by the formula n * (n + 1) \/ 2\n    return n * (n + 1) \/ 2\nend\n```"}
{"name":"mbpp_239_get_total_number_of_sequences","language":"lua","prompt":"-- Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nlocal function get_total_number_of_sequences(m, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_239_get_total_number_of_sequences.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_total_number_of_sequences\n    lu.assertEquals(candidate(10, 4), 4)\n    lu.assertEquals(candidate(5, 2), 6)\n    lu.assertEquals(candidate(16, 3), 84)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_239_get_total_number_of_sequences","gpt_solution":"```lua\nlocal function get_total_number_of_sequences(m, n)\n    -- Helper function to count sequences starting with 'start' and of length 'length'\n    local function count_sequences(start, length)\n        if length == 1 then\n            return 1\n        end\n        \n        local count = 0\n        for next_value = math.max(start * 2, 1), m do\n            count = count + count_sequences(next_value, length - 1)\n        end\n        \n        return count\n    end\n\n    local total_count = 0\n    for start = 1, m do\n        total_count = total_count + count_sequences(start, n)\n    end\n    \n    return total_count\nend\n```\n\nThis function, `get_total_number_of_sequences`, computes the total number of valid sequences of length `n` where each element in the sequence is a positive integer, greater than or equal to twice the previous element, and less than or equal to `m`. The function uses a helper function `count_sequences` to count sequences that start with a specified value and recurse to construct valid sequences. The main function iterates from `1` to `m` to summarize all possible sequences."}
{"name":"mbpp_240_replace_list","language":"lua","prompt":"-- Write a function that takes in two tables and replaces the last element of the first table with the elements of the second table.\nlocal function replace_list(list1, list2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_240_replace_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_list\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 2, 4, 6, 8})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {5, 6, 7, 8}), {1, 2, 3, 4, 5, 6, 7, 8})\n    lu.assertEquals(candidate({'red', 'blue', 'green'}, {'yellow'}), {'red', 'blue', 'yellow'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_240_replace_list","gpt_solution":"```lua\n-- Write a function that takes in two tables and replaces the last element of the first table with the elements of the second table.\nlocal function replace_list(list1, list2)\n    -- Check if the first list is not empty\n    if #list1 > 0 then\n        -- Remove the last element of the first list\n        table.remove(list1)\n    end\n\n    -- Append elements of the second list to the first list\n    for i = 1, #list2 do\n        table.insert(list1, list2[i])\n    end\nend\n\n-- Example usage\nlocal list1 = {1, 2, 3}\nlocal list2 = {4, 5, 6}\n\nreplace_list(list1, list2)\n\n-- list1 should now be {1, 2, 4, 5, 6}\nprint(table.concat(list1, \", \"))\n```"}
{"name":"mbpp_242_count_charac","language":"lua","prompt":"-- Write a function to count the total number of characters in a string.\nlocal function count_charac(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_242_count_charac.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_charac\n    lu.assertEquals(candidate('python programming'), 18)\n    lu.assertEquals(candidate('language'), 8)\n    lu.assertEquals(candidate('words'), 5)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_242_count_charac","gpt_solution":"```lua\n-- Write a function to count the total number of characters in a string.\nlocal function count_charac(str1)\n    local count = 0\n    for i = 1, #str1 do\n        count = count + 1\n    end\n    return count\nend\n```"}
{"name":"mbpp_244_next_Perfect_Square","language":"lua","prompt":"-- Write a luathon function to find the next perfect square greater than a given number.\nlocal function next_Perfect_Square(N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_244_next_Perfect_Square.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_Perfect_Square\n    lu.assertEquals(candidate(35), 36)\n    lu.assertEquals(candidate(6), 9)\n    lu.assertEquals(candidate(9), 16)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_244_next_Perfect_Square","gpt_solution":"```lua\n-- Write a luathon function to find the next perfect square greater than a given number.\nlocal function next_Perfect_Square(N)\n    -- Get the square root of the given number \n    local sqrtN = math.sqrt(N)\n    \n    -- Find the ceiling of the square root to get the next integer value\n    local nextInt = math.ceil(sqrtN)\n    \n    -- Increment the integer to ensure we move to the next perfect square\n    nextInt = nextInt + 1\n    \n    -- Return the perfect square of the next integer\n    return nextInt * nextInt\nend\n\n-- Example usage:\nlocal number = 26\nprint(\"The next perfect square greater than \" .. number .. \" is \" .. next_Perfect_Square(number))  -- Output: 36\n```"}
{"name":"mbpp_245_max_sum","language":"lua","prompt":"-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_245_max_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_245_max_sum","gpt_solution":"```lua\nlocal function max_sum(arr)\n    local n = #arr\n    if n == 0 then return 0 end\n\n    -- Initialize two arrays to store the max sum increasing and decreasing subsequences\n    local inc = {}\n    local dec = {}\n\n    for i = 1, n do\n        inc[i] = arr[i]\n        dec[i] = arr[i]\n    end\n\n    -- Calculate the maximum sum increasing subsequence ending at each index\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i] then\n                inc[i] = inc[j] + arr[i]\n            end\n        end\n    end\n\n    -- Calculate the maximum sum decreasing subsequence starting at each index\n    for i = n - 1, 1, -1 do\n        for j = i + 1, n do\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i] then\n                dec[i] = dec[j] + arr[i]\n            end\n        end\n    end\n\n    -- Calculate the maximum sum of bitonic subsequence\n    local max_sum = 0\n    for i = 1, n do\n        if inc[i] + dec[i] - arr[i] > max_sum then\n            max_sum = inc[i] + dec[i] - arr[i]\n        end\n    end\n\n    return max_sum\nend\n```"}
{"name":"mbpp_247_lps","language":"lua","prompt":"-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_247_lps.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_247_lps","gpt_solution":"```lua\n-- Function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    -- Create a table to store results of subproblems\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n\n    -- Strings of length 1 are palindromes of length 1\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n\n    -- Build the table. The bottom-up approach is used here.\n    for cl = 2, n do\n        for i = 1, n - cl + 1 do\n            local j = i + cl - 1\n            if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n                dp[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n\n    -- Length of the longest palindromic subsequence\n    return dp[1][n]\nend\n```"}
{"name":"mbpp_249_intersection_array","language":"lua","prompt":"-- Write a function to find the intersection of two tables.\nlocal function intersection_array(array_nums1, array_nums2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_249_intersection_array.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_249_intersection_array","gpt_solution":"```lua\n-- Function to find the intersection of two tables\nlocal function intersection_array(array_nums1, array_nums2)\n    local set_nums1 = {}\n    -- Populate the set with elements from the first array\n    for _, num in ipairs(array_nums1) do\n        set_nums1[num] = true\n    end\n\n    local intersection = {}\n    -- Iterate through the second array and find common elements\n    for _, num in ipairs(array_nums2) do\n        if set_nums1[num] then\n            intersection[#intersection + 1] = num\n            set_nums1[num] = nil  -- Prevent duplicates in intersection\n        end\n    end\n\n    return intersection\nend\n\n-- Example usage:\nlocal array1 = {1, 2, 2, 1}\nlocal array2 = {2, 2}\nlocal result = intersection_array(array1, array2)\nfor _, num in ipairs(result) do\n    print(num)\nend\n```\n\nThis Lua function `intersection_array` takes in two arrays and returns their intersection, excluding duplicate elements from both arrays. The example usage demonstrates how to call the function and print the intersection."}
{"name":"mbpp_250_count_X","language":"lua","prompt":"-- Write a luathon function that takes in a table and an element and counts the occcurences of the element in the table.\nlocal function count_X(tup, x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_250_count_X.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_X\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4), 0)\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10), 3)\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_250_count_X","gpt_solution":"```lua\n-- Write a luathon function that takes in a table and an element and counts the occurrences of the element in the table.\nlocal function count_X(tup, x)\n    local count = 0\n    for _, value in ipairs(tup) do\n        if value == x then\n            count = count + 1\n        end\n    end\n    return count\nend\n```\n\nThis `count_X` function iterates through each element in the provided table `tup` and increments the `count` variable each time it encounters the element `x`. The function finally returns the total count of occurrences of `x` in the table `tup`."}
{"name":"mbpp_251_insert_element","language":"lua","prompt":"-- Write a function that takes in a table and an element and inserts the element before each element in the table, and returns the resulting table.\nlocal function insert_element(list, element)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_251_insert_element.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = insert_element\n    lu.assertEquals(candidate({'Red', 'Green', 'Black'}, 'c'), {'c', 'Red', 'c', 'Green', 'c', 'Black'})\n    lu.assertEquals(candidate({'python', 'java'}, 'program'), {'program', 'python', 'program', 'java'})\n    lu.assertEquals(candidate({'happy', 'sad'}, 'laugh'), {'laugh', 'happy', 'laugh', 'sad'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_251_insert_element","gpt_solution":"```lua\nlocal function insert_element(list, element)\n    local result = {}\n    for i, v in ipairs(list) do\n        table.insert(result, element)\n        table.insert(result, v)\n    end\n    return result\nend\n\n-- Example usage:\nlocal myList = {1, 2, 3}\nlocal myElement = 0\nlocal result = insert_element(myList, myElement)\nfor i, v in ipairs(result) do\n    print(v)  -- Output: 0 1 0 2 0 3\nend\n```"}
{"name":"mbpp_252_convert","language":"lua","prompt":"-- Write a luathon function to convert complex numbers to polar coordinates.\nlocal function convert(numbers)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_252_convert.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert\n    lu.assertEquals(candidate(1), {1.0, 0.0})\n    lu.assertEquals(candidate(4), {4.0, 0.0})\n    lu.assertEquals(candidate(5), {5.0, 0.0})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_252_convert","gpt_solution":"```lua\n-- The function convert takes a list of complex numbers \n-- and returns a list of their polar coordinates.\n-- The polar coordinates (r, \u03b8) of a complex number z = x + yi\n-- are given by r = sqrt(x^2 + y^2) and \u03b8 = atan2(y, x).\n\nlocal function convert(numbers)\n    local polar_coordinates = {}\n\n    for _, number in ipairs(numbers) do\n        local x, y = number[1], number[2]\n        local r = math.sqrt(x^2 + y^2)\n        local theta = math.atan2(y, x)\n        table.insert(polar_coordinates, {r, theta})\n    end\n\n    return polar_coordinates\nend\n\n-- Example usage:\nlocal complex_numbers = {{3, 4}, {1, 1}}\nlocal result = convert(complex_numbers)\n\nfor _, coords in ipairs(result) do\n    print(string.format(\"r: %.2f, \u03b8: %.2f\", coords[1], coords[2]))\nend\n```\n\nThis code defines a Lua function `convert` that takes a list of complex numbers represented as pairs of real numbers (x, y), and returns a list of their polar coordinates. For each complex number (x, y), it calculates the radius `r` and angle `\u03b8` using the formulas `r = sqrt(x^2 + y^2)` and `\u03b8 = atan2(y, x)`."}
{"name":"mbpp_253_count_integer","language":"lua","prompt":"-- Write a luathon function that returns the number of integer elements in a given table.\nlocal function count_integer(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_253_count_integer.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_integer\n    lu.assertEquals(candidate({1, 2, 'abc', 1.2}), 2)\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1.2, 4, 5.1}), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_253_count_integer","gpt_solution":"```lua\n-- Write a luathon function that returns the number of integer elements in a given table.\nlocal function count_integer(list1)\n  local count = 0\n  for _, value in ipairs(list1) do\n    if type(value) == \"number\" and value == math.floor(value) then\n      count = count + 1\n    end\n  end\n  return count\nend\n```"}
{"name":"mbpp_255_combinations_colors","language":"lua","prompt":"-- Write a function that takes in a table and length n, and generates all combinations (with repetition) of the elements of the table and returns a table with a table for each combination.\nlocal function combinations_colors(l, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_255_combinations_colors.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_colors\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 1), {{'Red'}, {'Green'}, {'Blue'}})\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 2), {{'Red', 'Red'}, {'Red', 'Green'}, {'Red', 'Blue'}, {'Green', 'Green'}, {'Green', 'Blue'}, {'Blue', 'Blue'}})\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 3), {{'Red', 'Red', 'Red'}, {'Red', 'Red', 'Green'}, {'Red', 'Red', 'Blue'}, {'Red', 'Green', 'Green'}, {'Red', 'Green', 'Blue'}, {'Red', 'Blue', 'Blue'}, {'Green', 'Green', 'Green'}, {'Green', 'Green', 'Blue'}, {'Green', 'Blue', 'Blue'}, {'Blue', 'Blue', 'Blue'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_255_combinations_colors","gpt_solution":"```lua\nlocal function combinations_colors(l, n)\n    local function generate_combinations(prefix, length, result)\n        if length == 0 then\n            table.insert(result, prefix)\n            return\n        end\n        \n        for _, value in ipairs(l) do\n            local new_prefix = { table.unpack(prefix) }\n            table.insert(new_prefix, value)\n            generate_combinations(new_prefix, length - 1, result)\n        end\n    end\n    \n    local result = {}\n    generate_combinations({}, n, result)\n    return result\nend\n\n-- Example usage:\n-- local colors = {\"red\", \"blue\", \"green\"}\n-- local n = 2\n-- local combos = combinations_colors(colors, n)\n-- for _, combo in ipairs(combos) do\n--     print(table.concat(combo, \", \"))\n-- end\n```\n\nThis code defines a `combinations_colors` function that generates all combinations with repetition of the elements in the given table `l` of length `n`. It uses a helper function `generate_combinations` to recursively construct the combinations. The example usage shows how you can call this function and print each combination."}
{"name":"mbpp_256_count_Primes_nums","language":"lua","prompt":"-- Write a luathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nlocal function count_Primes_nums(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_256_count_Primes_nums.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Primes_nums\n    lu.assertEquals(candidate(5), 2)\n    lu.assertEquals(candidate(10), 4)\n    lu.assertEquals(candidate(100), 25)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_256_count_Primes_nums","gpt_solution":"```lua\n-- Write a luathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nlocal function is_prime(num)\n    if num <= 1 then return false end\n    if num <= 3 then return true end\n    if num % 2 == 0 or num % 3 == 0 then return false end\n    local i = 5\n    while i * i <= num do\n        if num % i == 0 or num % (i + 2) == 0 then return false end\n        i = i + 6\n    end\n    return true\nend\n\nlocal function count_Primes_nums(n)\n    local count = 0\n    for i = 2, n - 1 do\n        if is_prime(i) then\n            count = count + 1\n        end\n    end\n    return count\nend\n```"}
{"name":"mbpp_257_swap_numbers","language":"lua","prompt":"-- Write a function that takes in two numbers and returns a table with the second number and then the first number.\nlocal function swap_numbers(a, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_257_swap_numbers.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_numbers\n    lu.assertEquals(candidate(10, 20), {20, 10})\n    lu.assertEquals(candidate(15, 17), {17, 15})\n    lu.assertEquals(candidate(100, 200), {200, 100})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_257_swap_numbers","gpt_solution":"```lua\n-- Write a function that takes in two numbers and returns a table with the second number and then the first number.\nlocal function swap_numbers(a, b)\n    return {b, a}\nend\n```"}
{"name":"mbpp_259_maximize_elements","language":"lua","prompt":"-- Write a function to maximize the given two tables.\nlocal function maximize_elements(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_259_maximize_elements.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximize_elements\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{6, 7}, {4, 9}, {2, 9}, {7, 10}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{7, 8}, {5, 10}, {3, 10}, {8, 11}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{8, 9}, {6, 11}, {4, 11}, {9, 12}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_259_maximize_elements","gpt_solution":"```lua\n-- Function to maximize the given two tables.\nlocal function maximize_elements(test_tup1, test_tup2)\n    -- Find the length of both tables\n    local len1 = #test_tup1\n    local len2 = #test_tup2\n    \n    -- Determine the longer length\n    local maxLength = math.max(len1, len2)\n    \n    -- Initialize the result table\n    local result = {}\n    \n    -- Iterate over the range of the longer table\n    for i = 1, maxLength do\n        -- Get the elements from both tables, using 0 if one table is shorter\n        local ele1 = test_tup1[i] or 0\n        local ele2 = test_tup2[i] or 0\n        \n        -- Store the maximum element in the result table\n        result[i] = math.max(ele1, ele2)\n    end\n    \n    -- Return the resulting table\n    return result\nend\n\n-- Example usage\nlocal test_tup1 = {1, 4, 2}\nlocal test_tup2 = {3, 2, 8, 5}\nlocal maximized_table = maximize_elements(test_tup1, test_tup2)\n\n-- Print the result\nfor i, v in ipairs(maximized_table) do\n    print(v)\nend\n```\n\nThe above Lua code defines a function `maximize_elements` that takes two tables as inputs and returns a table containing the maximum elements from each corresponding position. If one table is shorter than the other, it uses 0 as the default value for the missing elements. The example usage demonstrates how the function works and prints the result."}
{"name":"mbpp_260_newman_prime","language":"lua","prompt":"-- Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nlocal function newman_prime(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_260_newman_prime.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = newman_prime\n    lu.assertEquals(candidate(3), 7)\n    lu.assertEquals(candidate(4), 17)\n    lu.assertEquals(candidate(5), 41)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_260_newman_prime","gpt_solution":"```lua\nlocal function newman_prime(n)\n    -- Helper function to check if a number is prime\n    local function is_prime(num)\n        if num <= 1 then return false end\n        if num <= 3 then return true end\n        if num % 2 == 0 or num % 3 == 0 then return false end\n        local i = 5\n        while i * i <= num do\n            if num % i == 0 or num % (i + 2) == 0 then return false end\n            i = i + 6\n        end\n        return true\n    end\n\n    -- Helper function to generate Newman\u2013Shanks\u2013Williams sequence\n    local function NSW_sequence(k)\n        if k < 0 then return 0 end\n        if k == 0 then return 1 end\n        if k == 1 then return 1 end\n        local nsw = {1, 1}\n        for i = 2, k do\n            nsw[i] = 2 * nsw[i - 1] + nsw[i - 2]\n        end\n        return nsw[k]\n    end\n\n    -- Find the nth NSW prime number\n    local count = 0\n    local i = 0\n    while count <= n do\n        local nsw_num = NSW_sequence(i)\n        if is_prime(nsw_num) then\n            if count == n then\n                return nsw_num\n            end\n            count = count + 1\n        end\n        i = i + 1\n    end\nend\n\n-- Example usage:\nlocal n = 5\nprint(\"The \" .. n .. \"th Newman\u2013Shanks\u2013Williams prime number is: \" .. newman_prime(n))\n```"}
{"name":"mbpp_261_division_elements","language":"lua","prompt":"-- Write a function that takes in two tables and performs mathematical division operation element-wise across the given tables.\nlocal function division_elements(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_261_division_elements.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = division_elements\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {2, 2, 2, 3})\n    lu.assertEquals(candidate({12, 6, 8, 16}, {6, 3, 4, 4}), {2, 2, 2, 4})\n    lu.assertEquals(candidate({20, 14, 36, 18}, {5, 7, 6, 9}), {4, 2, 6, 2})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_261_division_elements","gpt_solution":"```lua\n-- Write a function that takes in two tables and performs mathematical division operation element-wise across the given tables.\n\nlocal function division_elements(test_tup1, test_tup2)\n    -- Check if both tables have the same length\n    if #test_tup1 ~= #test_tup2 then\n        error(\"The two tables must have the same length.\")\n    end\n    \n    -- Initialize the result table\n    local result_table = {}\n    \n    -- Perform element-wise division\n    for i = 1, #test_tup1 do\n        -- Check if there is a division by zero situation\n        if test_tup2[i] == 0 then\n            error(\"Division by zero encountered.\")\n        end\n        result_table[i] = test_tup1[i] \/ test_tup2[i]\n    end\n    \n    return result_table\nend\n```"}
{"name":"mbpp_262_split_two_parts","language":"lua","prompt":"-- Write a function that takes in a table and an integer L and splits the given table into two parts where the length of the first part of the table is L, and returns the resulting tables in a table.\nlocal function split_two_parts(list1, L)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_262_split_two_parts.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_two_parts\n    lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {{1, 1, 2}, {3, 4, 4, 5, 1}})\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 2), {{'a', 'b'}, {'c', 'd'}})\n    lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}, 4), {{'p', 'y', 't', 'h'}, {'o', 'n'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_262_split_two_parts","gpt_solution":"```lua\n-- Write a function that takes in a table and an integer L and splits the given table into two parts where the length of the first part of the table is L, and returns the resulting tables in a table.\nlocal function split_two_parts(list1, L)\n    local part1 = {}\n    local part2 = {}\n\n    for i = 1, #list1 do\n        if i <= L then\n            table.insert(part1, list1[i])\n        else\n            table.insert(part2, list1[i])\n        end\n    end\n\n    return {part1, part2}\nend\n```\n\nThis Lua function, `split_two_parts`, takes in a table `list1` and an integer `L`, and splits the table into two parts. The length of the first part is `L`, and the function returns the resulting tables in a new table."}
{"name":"mbpp_264_dog_age","language":"lua","prompt":"-- Write a function to calculate a dog's age in dog's years.\nlocal function dog_age(h_age)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_264_dog_age.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dog_age\n    lu.assertEquals(candidate(12), 61)\n    lu.assertEquals(candidate(15), 73)\n    lu.assertEquals(candidate(24), 109)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_264_dog_age","gpt_solution":"```lua\n-- Function to calculate a dog's age in dog's years.\n-- The first 2 years count as 10.5 dog years each.\n-- Each year following equates to 4 dog years.\n\nlocal function dog_age(h_age)\n    if h_age <= 0 then\n        return 0\n    elseif h_age <= 2 then\n        return h_age * 10.5\n    else\n        return (2 * 10.5) + ((h_age - 2) * 4)\n    end\nend\n\n-- Example usage:\n-- local dog_years = dog_age(5)\n-- print(dog_years) -- Output should be 33\n```\n\nYou can remove the comment section under the example usage when you integrate this function into your project or script."}
{"name":"mbpp_265_list_split","language":"lua","prompt":"-- Write a function that takes in a table and an integer n and splits a table for every nth element, returning a table of the resulting tables.\nlocal function list_split(S, step)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_265_list_split.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_split\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3), {{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), {{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}})\n    lu.assertEquals(candidate({'python', 'java', 'C', 'C++', 'DBMS', 'SQL'}, 2), {{'python', 'C', 'DBMS'}, {'java', 'C++', 'SQL'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_265_list_split","gpt_solution":"```lua\nlocal function list_split(S, step)\n    local results = {}\n    local i = 1\n\n    while i <= #S do\n        local chunk = {}\n\n        for j = i, math.min(i + step - 1, #S) do\n            table.insert(chunk, S[j])\n        end\n        \n        table.insert(results, chunk)\n        i = i + step\n    end\n\n    return results\nend\n\n-- Example usage:\n-- local result = list_split({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3)\n-- Result should be: {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {10}}\n```"}
{"name":"mbpp_266_lateralsurface_cube","language":"lua","prompt":"-- Write a function to find the lateral surface area of a cube given its side length.\nlocal function lateralsurface_cube(l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_266_lateralsurface_cube.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lateralsurface_cube\n    lu.assertEquals(candidate(5), 100)\n    lu.assertEquals(candidate(9), 324)\n    lu.assertEquals(candidate(10), 400)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_266_lateralsurface_cube","gpt_solution":"```lua\n-- Write a function to find the lateral surface area of a cube given its side length.\nlocal function lateralsurface_cube(l)\n    -- The lateral surface area (LSA) of a cube is given by:\n    -- LSA = 4 * (side length)^2\n    -- where 'l' is the side length of the cube\n    local lsa = 4 * (l * l)\n    return lsa\nend\n\n-- Example usage:\n-- local side_length = 5\n-- print(lateralsurface_cube(side_length))  -- Output: 100\n```"}
{"name":"mbpp_267_square_Sum","language":"lua","prompt":"-- Write a luathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nlocal function square_Sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_267_square_Sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_Sum\n    lu.assertEquals(candidate(2), 10)\n    lu.assertEquals(candidate(3), 35)\n    lu.assertEquals(candidate(4), 84)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_267_square_Sum","gpt_solution":"```lua\n-- Write a luathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nlocal function square_Sum(n)\n    local sum = 0\n    local count = 0\n    local i = 1\n    while count < n do\n        if i % 2 ~= 0 then\n            sum = sum + i * i\n            count = count + 1\n        end\n        i = i + 1\n    end\n    return sum\nend\n\n-- Example usage:\n-- print(square_Sum(3)) -- Output will be 1^2 + 3^2 + 5^2 = 1 + 9 + 25 = 35\n```\n\nThis function iterates through the natural numbers, checking if each number is odd. When an odd number is found, its square is added to the sum, and the count is incremented. This process continues until `n` odd natural numbers have been processed."}
{"name":"mbpp_268_find_star_num","language":"lua","prompt":"-- Write a function to find the n'th star number.\nlocal function find_star_num(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_268_find_star_num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_star_num\n    lu.assertEquals(candidate(3), 37)\n    lu.assertEquals(candidate(4), 73)\n    lu.assertEquals(candidate(5), 121)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_268_find_star_num","gpt_solution":"```lua\n-- Write a function to find the n'th star number.\n-- A star number is a centered figurate number that represents a centered hexagram (six-pointed star),\n-- such as the Star of David.\n-- The formula to find the n-th star number is: Star(n) = 6n(n-1) + 1\n\nlocal function find_star_num(n)\n    return 6 * n * (n - 1) + 1\nend\n\n-- Example usage: \n\nprint(find_star_num(1)) -- 1\nprint(find_star_num(2)) -- 13\nprint(find_star_num(3)) -- 37\nprint(find_star_num(4)) -- 73\n```"}
{"name":"mbpp_269_ascii_value","language":"lua","prompt":"-- Write a function to find the ascii value of a character.\nlocal function ascii_value(k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_269_ascii_value.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = ascii_value\n    lu.assertEquals(candidate('A'), 65)\n    lu.assertEquals(candidate('R'), 82)\n    lu.assertEquals(candidate('S'), 83)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_269_ascii_value","gpt_solution":"```lua\n-- Write a function to find the ascii value of a character.\nlocal function ascii_value(char)\n    -- Ensure the input is a single character\n    if #char == 1 then\n        return string.byte(char)\n    else\n        return nil, \"Input should be a single character\"\n    end\nend\n\n-- Example usage\nprint(ascii_value(\"A\"))  -- Output: 65\nprint(ascii_value(\"a\"))  -- Output: 97\nprint(ascii_value(\"1\"))  -- Output: 49\nprint(ascii_value(\"!\"))  -- Output: 33\n```"}
{"name":"mbpp_270_sum_even_and_even_index","language":"lua","prompt":"-- Write a luathon function to find the sum of even numbers at even positions of a table.\nlocal function sum_even_and_even_index(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_270_sum_even_and_even_index.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_even_and_even_index\n    lu.assertEquals(candidate({5, 6, 12, 1, 18, 8}), 30)\n    lu.assertEquals(candidate({3, 20, 17, 9, 2, 10, 18, 13, 6, 18}), 26)\n    lu.assertEquals(candidate({5, 6, 12, 1}), 12)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_270_sum_even_and_even_index","gpt_solution":"```lua\n-- Write a luathon function to find the sum of even numbers at even positions of a table.\nlocal function sum_even_and_even_index(arr)\n    local sum = 0\n    for i = 1, #arr do\n        if i % 2 == 0 and arr[i] % 2 == 0 then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\nend\n\n-- Example usage:\n-- local result = sum_even_and_even_index({1, 2, 3, 4, 5, 6})\n-- print(result) -- Output should be 6 (2 + 4)\n```"}
{"name":"mbpp_271_even_Power_Sum","language":"lua","prompt":"-- Write a luathon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nlocal function even_Power_Sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_271_even_Power_Sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_Power_Sum\n    lu.assertEquals(candidate(2), 1056)\n    lu.assertEquals(candidate(3), 8832)\n    lu.assertEquals(candidate(1), 32)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_271_even_Power_Sum","gpt_solution":"```lua\nlocal function even_Power_Sum(n)\n    local sum = 0\n    for i = 1, n do\n        local evenNumber = 2 * i\n        sum = sum + evenNumber^5\n    end\n    return sum\nend\n```"}
{"name":"mbpp_272_rear_extract","language":"lua","prompt":"-- Write a function that takes in a table of tables and returns a table containing the rear element of each table.\nlocal function rear_extract(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_272_rear_extract.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rear_extract\n    lu.assertEquals(candidate({{1, 'Rash', 21}, {2, 'Varsha', 20}, {3, 'Kil', 19}}), {21, 20, 19})\n    lu.assertEquals(candidate({{1, 'Sai', 36}, {2, 'Ayesha', 25}, {3, 'Salman', 45}}), {36, 25, 45})\n    lu.assertEquals(candidate({{1, 'Sudeep', 14}, {2, 'Vandana', 36}, {3, 'Dawood', 56}}), {14, 36, 56})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_272_rear_extract","gpt_solution":"```lua\n-- Write a function that takes in a table of tables and returns a table containing the rear element of each table.\nlocal function rear_extract(test_list)\n    local result = {}\n    for _, sub_table in ipairs(test_list) do\n        if #sub_table > 0 then\n            table.insert(result, sub_table[#sub_table])\n        end\n    end\n    return result\nend\n```\n\nThis Lua function `rear_extract` iterates over each sub-table within the provided `test_list`. For each sub-table, it checks if the sub-table is non-empty, and if so, extracts the last element and inserts it into the result table. The function returns the result table containing the last elements of each sub-table."}
{"name":"mbpp_273_substract_elements","language":"lua","prompt":"-- Write a function that takes in two tables and subtracts the elements of the first table by the elements of the second table with the same index.\nlocal function substract_elements(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_273_substract_elements.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = substract_elements\n    lu.assertEquals(candidate({10, 4, 5}, {2, 5, 18}), {8, -1, -13})\n    lu.assertEquals(candidate({11, 2, 3}, {24, 45, 16}), {-13, -43, -13})\n    lu.assertEquals(candidate({7, 18, 9}, {10, 11, 12}), {-3, 7, -3})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_273_substract_elements","gpt_solution":"```lua\n-- Write a function that takes in two tables and subtracts the elements of the first table by the elements of the second table with the same index.\nlocal function subtract_elements(test_tup1, test_tup2)\n    -- Create a new table to store the result\n    local result = {}\n\n    -- Iterate over the elements of the first table\n    for i = 1, #test_tup1 do\n        -- Subtract the element at the same index in the second table\n        result[i] = test_tup1[i] - test_tup2[i]\n    end\n\n    -- Return the result table\n    return result\nend\n```\n\nThis function will take two tables, `test_tup1` and `test_tup2`, and return a new table where each element is the result of subtracting the corresponding element of `test_tup2` from `test_tup1`. This assumes both tables have the same length."}
{"name":"mbpp_274_even_binomial_Coeff_Sum","language":"lua","prompt":"-- Write a luathon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nlocal function even_binomial_Coeff_Sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_274_even_binomial_Coeff_Sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_binomial_Coeff_Sum\n    lu.assertEquals(candidate(4), 8)\n    lu.assertEquals(candidate(6), 32)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_274_even_binomial_Coeff_Sum","gpt_solution":"```lua\n-- Write a luathon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nlocal function even_binomial_Coeff_Sum(n)\n    local function factorial(k)\n        if k == 0 then\n            return 1\n        else\n            local prod = 1\n            for i = 1, k do\n                prod = prod * i\n            end\n            return prod\n        end\n    end\n    \n    local function binomialCoefficient(n, k)\n        return factorial(n) \/ (factorial(k) * factorial(n - k))\n    end\n    \n    local sum = 0\n    for k = 0, n do\n        if k % 2 == 0 then\n            sum = sum + binomialCoefficient(n, k)\n        end\n    end\n    \n    return sum\nend\n\n-- Example usage:\nprint(even_binomial_Coeff_Sum(4)) -- Output should be 8 (as 1 + 6 + 1 = 8 for C(4,0), C(4,2), C(4,4))\n```"}
{"name":"mbpp_277_dict_filter","language":"lua","prompt":"-- Write a function that takes in a table and integer n and filters the table to only include entries with values greater than or equal to n.\nlocal function dict_filter(dict, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_277_dict_filter.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_filter\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 170), {['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Pierre Cox'] = 190})\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 180), {['Alden Cantrell'] = 180, ['Pierre Cox'] = 190})\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 190), {['Pierre Cox'] = 190})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_277_dict_filter","gpt_solution":"```lua\nlocal function dict_filter(dict, n)\n    local filtered_dict = {}\n    for key, value in pairs(dict) do\n        if value >= n then\n            filtered_dict[key] = value\n        end\n    end\n    return filtered_dict\nend\n```"}
{"name":"mbpp_278_count_first_elements","language":"lua","prompt":"-- Write a function to find the number of elements that occurs before the table element in the given table.\nlocal function count_first_elements(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_278_count_first_elements.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_first_elements\n    lu.assertEquals(candidate({1, 5, 7, {4, 6}, 10}), 3)\n    lu.assertEquals(candidate({2, 9, {5, 7}, 11}), 2)\n    lu.assertEquals(candidate({11, 15, 5, 8, {2, 3}, 8}), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_278_count_first_elements","gpt_solution":"```lua\n-- Write a function to find the number of elements that occur before each table element in the given table.\nlocal function count_first_elements(test_tup)\n    -- Initialize a table to store the counts\n    local counts = {}\n    -- Iterate over each element in the input table\n    for i, _ in ipairs(test_tup) do\n        -- The count of elements before the current element is simply its index minus one\n        table.insert(counts, i - 1)\n    end\n    return counts\nend\n\n-- Example usage:\n-- local result = count_first_elements({10, 20, 30, 40})\n-- print(table.concat(result, \", \")) -- Output: 0, 1, 2, 3\n```\n\nThis function `count_first_elements` takes a table as input and returns a new table where each element is the number of elements that occurred before it in the input table. For example, in a table `{10, 20, 30, 40}`, the counts table will be `{0, 1, 2, 3}` since the first element has no elements before it, the second has one element before it, and so on."}
{"name":"mbpp_279_is_num_decagonal","language":"lua","prompt":"-- Write a function to find the nth decagonal number.\nlocal function is_num_decagonal(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_279_is_num_decagonal.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_num_decagonal\n    lu.assertEquals(candidate(3), 27)\n    lu.assertEquals(candidate(7), 175)\n    lu.assertEquals(candidate(10), 370)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_279_is_num_decagonal","gpt_solution":"```lua\n-- Function to find the nth decagonal number\n-- A decagonal number is a figurate number that extends the concept of\n-- triangular and square numbers to the decagon. The formula for the nth decagonal number is:\n-- D_n = n(4n-3)\n\nlocal function nth_decagonal_number(n)\n    return n * (4 * n - 3)\nend\n\n-- Example usage\nlocal n = 5\nprint(\"The \" .. n .. \"th decagonal number is: \" .. nth_decagonal_number(n))\n```"}
{"name":"mbpp_280_sequential_search","language":"lua","prompt":"-- Write a function that takes in a table and element and returns a table containing a boolean that indicates if the element is in the table and the index position of the element (or -1 if the element is not found).\nlocal function sequential_search(dlist, item)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_280_sequential_search.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sequential_search\n    lu.assertEquals(candidate({11, 23, 58, 31, 56, 77, 43, 12, 65, 19}, 31), {true, 3})\n    lu.assertEquals(candidate({12, 32, 45, 62, 35, 47, 44, 61}, 61), {true, 7})\n    lu.assertEquals(candidate({9, 10, 17, 19, 22, 39, 48, 56}, 48), {true, 6})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_280_sequential_search","gpt_solution":"```lua\nlocal function sequential_search(dlist, item)\n    local result = {false, -1}\n    for i, value in ipairs(dlist) do\n        if value == item then\n            result[1] = true\n            result[2] = i\n            break\n        end\n    end\n    return result\nend\n```\n\nThis function `sequential_search` takes two arguments: `dlist` which is a table, and `item` which is the element to be searched within the table. The function returns a table containing a boolean that indicates if the element is in the table and the index position of the element (or -1 if the element is not found)."}
{"name":"mbpp_281_all_unique","language":"lua","prompt":"-- Write a luathon function to check if the elements of a given table are unique or not.\nlocal function all_unique(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_281_all_unique.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_unique\n    lu.assertEquals(candidate({1, 2, 3}), true)\n    lu.assertEquals(candidate({1, 2, 1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_281_all_unique","gpt_solution":"```lua\n-- Write a luathon function to check if the elements of a given table are unique or not.\nlocal function all_unique(test_list)\n    local elements = {}\n    for _, v in ipairs(test_list) do\n        if elements[v] then\n            return false\n        end\n        elements[v] = true\n    end\n    return true\nend\n```"}
{"name":"mbpp_282_sub_list","language":"lua","prompt":"-- Write a function to subtract two tables element-wise.\nlocal function sub_list(nums1, nums2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_282_sub_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sub_list\n    lu.assertEquals(candidate({1, 2, 3}, {4, 5, 6}), {-3, -3, -3})\n    lu.assertEquals(candidate({1, 2}, {3, 4}), {-2, -2})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {40, 50})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_282_sub_list","gpt_solution":"```lua\n-- Write a function to subtract two tables element-wise.\nlocal function sub_list(nums1, nums2)\n    local result = {}\n\n    -- Assuming both tables are of the same length\n    for i = 1, #nums1 do\n        result[i] = nums1[i] - nums2[i]\n    end\n\n    return result\nend\n\n-- Example usage:\nlocal table1 = {10, 20, 30, 40}\nlocal table2 = {1, 2, 3, 4}\nlocal result_table = sub_list(table1, table2)\n\n-- Print the result table\nfor _, v in ipairs(result_table) do\n    print(v)\nend\n```\n\nThis Lua function `sub_list` subtracts the corresponding elements of two tables `nums1` and `nums2` element-wise and returns a new table with the results. The example usage demonstrates how to use the function and print the resulting table."}
{"name":"mbpp_283_validate","language":"lua","prompt":"-- Write a luathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_283_validate.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_283_validate","gpt_solution":"```lua\nlocal function validate(n)\n    local digit_count = {}\n    \n    -- Convert the number to a string and loop over each character\n    for digit in tostring(n):gmatch(\"%d\") do\n        digit = tonumber(digit)\n        -- Count the frequency of each digit\n        if digit_count[digit] then\n            digit_count[digit] = digit_count[digit] + 1\n        else\n            digit_count[digit] = 1\n        end\n    end\n    \n    -- Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in pairs(digit_count) do\n        if count > digit then\n            return false\n        end\n    end\n    \n    return true\nend\n```\n\nThis `validate` function converts the given integer into a string, counts the frequency of each digit, and then compares each digit's frequency to the digit itself to ensure that the frequency is less than or equal to the digit. If any digit's frequency exceeds its value, the function returns `false`. If all checks pass, it returns `true`."}
{"name":"mbpp_284_check_element","language":"lua","prompt":"-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_284_check_element.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_284_check_element","gpt_solution":"```lua\n-- Write a function that takes in a table and element and checks whether all items in the table are equal to the given element.\nlocal function check_element(list, element)\n    for _, item in ipairs(list) do\n        if item ~= element then\n            return false\n        end\n    end\n    return true\nend\n```\n\nThis function iterates through each item in the table `list` using a `for` loop. If it encounters an item that is not equal to the given `element`, it returns `false`. If it completes the loop without finding any discrepancies, it returns `true`."}
{"name":"mbpp_285_text_match_two_three","language":"lua","prompt":"-- Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nlocal function text_match_two_three(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_285_text_match_two_three.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_two_three\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_285_text_match_two_three","gpt_solution":"```lua\n-- Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nlocal function text_match_two_three(text)\n    -- Pattern matching for a followed by two or three b characters\n    local pattern = \"ab{2,3}\"\n    -- Check if the text contains the specified pattern\n    if string.find(text, pattern) then\n        return true\n    else\n        return false\n    end\nend\n\n-- Examples of usage:\nprint(text_match_two_three(\"abbb\"))  -- true\nprint(text_match_two_three(\"abbbb\")) -- false\nprint(text_match_two_three(\"aabbb\")) -- true\nprint(text_match_two_three(\"aabb\"))  -- true\nprint(text_match_two_three(\"aaccbb\")) -- false\n```"}
{"name":"mbpp_286_max_sub_array_sum_repeated","language":"lua","prompt":"-- Write a function to find the largest sum of a contiguous table in the modified table which is formed by repeating the given table k times.\nlocal function max_sub_array_sum_repeated(a, n, k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_286_max_sub_array_sum_repeated.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum_repeated\n    lu.assertEquals(candidate({10, 20, -30, -1}, 4, 3), 30)\n    lu.assertEquals(candidate({-1, 10, 20}, 3, 2), 59)\n    lu.assertEquals(candidate({-1, -2, -3}, 3, 3), -1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_286_max_sub_array_sum_repeated","gpt_solution":"```lua\n-- Write a function to find the largest sum of a contiguous table in the modified table which is formed by repeating the given table k times.\nlocal function max_sub_array_sum_repeated(a, n, k)\n    -- Function to find the maximum subarray sum using Kadane's Algorithm\n    local function kadane(arr, size)\n        local max_so_far = arr[1]\n        local max_ending_here = arr[1]\n        \n        for i = 2, size do\n            max_ending_here = math.max(arr[i], max_ending_here + arr[i])\n            max_so_far = math.max(max_so_far, max_ending_here)\n        end\n        \n        return max_so_far\n    end\n    \n    if k == 1 then\n        return kadane(a, n)\n    end\n    \n    -- Compute the maximum subarray sum for the array concatenated twice\n    local double_table = {}\n    for i = 1, 2 * n do\n        if i <= n then\n            double_table[i] = a[i]\n        else\n            double_table[i] = a[i - n]\n        end\n    end\n    \n    local max_double_sum = kadane(double_table, 2 * n)\n    \n    -- Compute total sum of the table\n    local total_sum = 0\n    for i = 1, n do\n        total_sum = total_sum + a[i]\n    end\n    \n    -- If total_sum is negative or zero, the best we can do is the max_double_sum\n    if total_sum <= 0 then\n        return max_double_sum\n    else\n        -- Else the best subarray can also take (k-2) * total_sum in between\n        return max_double_sum + (k - 2) * total_sum\n    end\nend\n\n-- Example usage:\n-- local array = {1, -2, 3, -1, 2}\n-- local n = #array\n-- local k = 3\n-- print(max_sub_array_sum_repeated(array, n, k)) -- Output depends on the given array and k\n```"}
{"name":"mbpp_287_square_Sum","language":"lua","prompt":"-- Write a luathon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nlocal function square_Sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_287_square_Sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_Sum\n    lu.assertEquals(candidate(2), 20)\n    lu.assertEquals(candidate(3), 56)\n    lu.assertEquals(candidate(4), 120)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_287_square_Sum","gpt_solution":"```lua\nlocal function square_Sum(n)\n    local sum = 0\n    for i = 1, n do\n        local even_number = 2 * i\n        sum = sum + even_number * even_number\n    end\n    return sum\nend\n```\n\nThis Lua function `square_Sum` takes an integer `n` and returns the sum of squares of the first `n` even natural numbers. It iterates through the first `n` even natural numbers, squares each one, and accumulates the sum."}
{"name":"mbpp_290_max_length","language":"lua","prompt":"-- Write a function to find the table of maximum length in a table of tables.\nlocal function max_length(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_290_max_length.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_length\n    lu.assertEquals(candidate({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), {3, {13, 15, 17}})\n    lu.assertEquals(candidate({{1}, {5, 7}, {10, 12, 14, 15}}), {4, {10, 12, 14, 15}})\n    lu.assertEquals(candidate({{5}, {15, 20, 25}}), {3, {15, 20, 25}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_290_max_length","gpt_solution":"```lua\n-- Write a function to find the table of maximum length in a table of tables.\nlocal function max_length(list_of_tables)\n    local max_table = nil\n    local max_len = 0\n    \n    for _, tbl in ipairs(list_of_tables) do\n        if type(tbl) == \"table\" and #tbl > max_len then\n            max_len = #tbl\n            max_table = tbl\n        end\n    end\n    \n    return max_table\nend\n\n-- Example usage:\nlocal tables = {{1, 2, 3}, {4, 5}, {6, 7, 8, 9}, {10}}\nlocal longest_table = max_length(tables)\nfor i, v in ipairs(longest_table) do\n    print(i, v)\nend\n```\n\nThis function `max_length` iterates over a list of tables (`list_of_tables`), compares their lengths, and returns the table with the maximum length. The example usage at the bottom shows how to use the function."}
{"name":"mbpp_291_count_no_of_ways","language":"lua","prompt":"-- Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlocal function count_no_of_ways(n, k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_291_count_no_of_ways.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_no_of_ways\n    lu.assertEquals(candidate(2, 4), 16)\n    lu.assertEquals(candidate(3, 2), 6)\n    lu.assertEquals(candidate(4, 4), 228)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_291_count_no_of_ways","gpt_solution":"```lua\n-- Function to count the number of ways to paint the fence such that at most 2 adjacent posts have the same color\nlocal function count_no_of_ways(n, k)\n    -- If there are no posts, there are no ways to paint the fence\n    if n == 0 then\n        return 0\n    end\n\n    -- If there is only one post, there are k ways to paint it\n    if n == 1 then\n        return k\n    end\n\n    -- Variables to store counts for the first and second post\n    local same = k  -- If both posts have the same color\n    local diff = k * (k - 1)  -- If both posts have different colors\n\n    -- Loop through the rest of the posts\n    for i = 3, n do\n        -- Calculate the new values for same and different combinations\n        local prev_diff = diff\n        diff = (same + diff) * (k - 1)\n        same = prev_diff\n    end\n\n    -- Return the total number of ways to paint the fence\n    return same + diff\nend\n\n-- Example usage\nprint(count_no_of_ways(3, 2))  -- Output: 6\n```\nThis Lua script defines the function `count_no_of_ways`, which calculates the number of ways to paint a fence with `n` posts using `k` different colors such that no more than two adjacent posts have the same color. The logic is based on dynamically programming through the possibilities for each post."}
{"name":"mbpp_292_find","language":"lua","prompt":"-- Write a luathon function to find quotient of two numbers (rounded down to the nearest integer).\nlocal function find(n, m)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_292_find.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find\n    lu.assertEquals(candidate(10, 3), 3)\n    lu.assertEquals(candidate(4, 2), 2)\n    lu.assertEquals(candidate(20, 5), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_292_find","gpt_solution":"```lua\n-- Write a luathon function to find quotient of two numbers (rounded down to the nearest integer).\nlocal function find(n, m)\n    if m == 0 then\n        error(\"Division by zero is not allowed\")\n    end\n    return math.floor(n \/ m)\nend\n```\n\nThis Lua function named `find` takes two arguments `n` and `m`. It first checks if `m` is zero to avoid division by zero errors. If `m` is not zero, it calculates the quotient of `n` divided by `m` and rounds it down to the nearest integer using `math.floor()`."}
{"name":"mbpp_293_otherside_rightangle","language":"lua","prompt":"-- Write a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_293_otherside_rightangle.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_293_otherside_rightangle","gpt_solution":"Sure! Here is the completed function wrapped in markdown syntax. The function calculates the third side of a right-angled triangle using the Pythagorean theorem and assumes that the given sides `w` and `h` are perpendicular to each other.\n\n```lua\n-- Function to find the third side of a right-angled triangle\nlocal function otherside_rightangle(w, h)\n    -- Check if the inputs are valid numbers\n    if type(w) ~= \"number\" or type(h) ~= \"number\" then\n        error(\"Both w and h need to be numbers\")\n    end\n\n    -- Calculate the hypotenuse if the given sides are legs of the triangle\n    local hypotenuse = math.sqrt(w^2 + h^2)\n\n    -- Return the calculated hypotenuse\n    return hypotenuse\nend\n\n-- Example usage\nlocal w = 3\nlocal h = 4\nprint(otherside_rightangle(w, h)) -- Output: 5\n```\n\nThis function takes two arguments, `w` and `h`, which represent the lengths of the two legs of the right-angled triangle, and returns the length of the hypotenuse (the third side) calculated using the Pythagorean theorem. Here, `w` and `h` must be valid numbers."}
{"name":"mbpp_294_max_val","language":"lua","prompt":"-- Write a function to find the maximum value in a given heterogeneous table.\nlocal function max_val(listval)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_294_max_val.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_val\n    lu.assertEquals(candidate({'Python', 3, 2, 4, 5, 'version'}), 5)\n    lu.assertEquals(candidate({'Python', 15, 20, 25}), 25)\n    lu.assertEquals(candidate({'Python', 30, 20, 40, 50, 'version'}), 50)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_294_max_val","gpt_solution":"```lua\n-- Function to find the maximum value in a given heterogeneous table.\nlocal function max_val(listval)\n    -- Initialize max_value as nil to handle empty table case\n    local max_value = nil\n    \n    -- Iterate through each element in the table\n    for _, value in pairs(listval) do\n        -- Only consider numbers for comparison\n        if type(value) == \"number\" then\n            -- If max_value is nil, assign the current value to it\n            -- Otherwise, compare with the current max_value to find the largest\n            if max_value == nil or value > max_value then\n                max_value = value\n            end\n        end\n    end\n\n    -- Return the maximum value found, or nil if no numbers were found\n    return max_value\nend\n\n-- Examples:\nlocal example_list1 = {3, 'a', 5, {6}, 8, 2, 'hello', -9}\nlocal example_list2 = {'string', {}, false, nil}\nlocal example_list3 = {1.1, 2.2, 3.3, -4.4, 0}\n\nprint(max_val(example_list1)) -- Should print 8\nprint(max_val(example_list2)) -- Should print nil\nprint(max_val(example_list3)) -- Should print 3.3\n```"}
{"name":"mbpp_295_sum_div","language":"lua","prompt":"-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_295_sum_div.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_295_sum_div","gpt_solution":"```lua\n-- Write a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n    local sum = 0\n    for i = 1, number do\n        if number % i == 0 then\n            sum = sum + i\n        end\n    end\n    return sum\nend\n```\n\nThis function, `sum_div`, iterates through all integers from `1` to `number`. For each integer `i`, it checks whether `i` is a divisor of `number` (i.e., `number % i == 0`). If `i` is a divisor, it adds `i` to the running total `sum`. Finally, it returns the sum of all divisors."}
{"name":"mbpp_296_get_Inv_Count","language":"lua","prompt":"-- Write a luathon function to count inversions in a table.\nlocal function get_Inv_Count(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_296_get_Inv_Count.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_296_get_Inv_Count","gpt_solution":"```lua\n-- Write a luathon function to count inversions in a table.\nlocal function merge_and_count(arr, temp_arr, left, mid, right)\n    local i, j, k = left, mid + 1, left\n    local inv_count = 0\n\n    while i <= mid and j <= right do\n        if arr[i] <= arr[j] then\n            temp_arr[k] = arr[i]\n            i = i + 1\n        else\n            temp_arr[k] = arr[j]\n            inv_count = inv_count + (mid - i + 1)\n            j = j + 1\n        end\n        k = k + 1\n    end\n\n    while i <= mid do\n        temp_arr[k] = arr[i]\n        i = i + 1\n        k = k + 1\n    end\n\n    while j <= right do\n        temp_arr[k] = arr[j]\n        j = j + 1\n        k = k + 1\n    end\n\n    for i = left, right do\n        arr[i] = temp_arr[i]\n    end\n\n    return inv_count\nend\n\nlocal function merge_sort_and_count(arr, temp_arr, left, right)\n    local inv_count = 0\n    if left < right then\n        local mid = math.floor((left + right) \/ 2)\n        inv_count = inv_count + merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count_count = inv_count + merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count = inv_count + merge_and_count(arr, temp_arr, left, mid, right)\n    end\n    return inv_count\nend\n\nlocal function get_Inv_Count(arr)\n    local temp_arr = {}\n    for i = 1, #arr do\n        temp_arr[i] = 0\n    end\n    return merge_sort_and_count(arr, temp_arr, 1, #arr)\nend\n\n-- Example usage:\nlocal example_array = {1, 20, 6, 4, 5}\nprint(\"Number of inversions are: \", get_Inv_Count(example_array))\n```\n\nThis Lua function `get_Inv_Count` counts inversions in a given array using merge sort. Inversions are counted during the merge process. The function utilizes auxiliary functions `merge_sort_and_count` and `merge_and_count` for the recursive sorting and counting logic."}
{"name":"mbpp_297_flatten_list","language":"lua","prompt":"-- Write a function to flatten a given nested table structure.\nlocal function flatten_list(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_297_flatten_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flatten_list\n    lu.assertEquals(candidate({0, 10, {20, 30}, 40, 50, {60, 70, 80}, {90, 100, 110, 120}}), {0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120})\n    lu.assertEquals(candidate({{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}}), {10, 20, 40, 30, 56, 25, 10, 20, 33, 40})\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_297_flatten_list","gpt_solution":"```lua\n-- Function to flatten a given nested table structure.\nlocal function flatten_list(list1)\n    local result = {}\n    \n    local function flatten(input_list)\n        for _, value in ipairs(input_list) do\n            if type(value) == \"table\" then\n                flatten(value)\n            else\n                table.insert(result, value)\n            end\n        end\n    end\n    \n    flatten(list1)\n    return result\nend\n```"}
{"name":"mbpp_299_max_aggregate","language":"lua","prompt":"-- Write a function to calculate the maximum aggregate from the table of tables.\nlocal function max_aggregate(stdata)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_299_max_aggregate.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_299_max_aggregate","gpt_solution":"```lua\n-- Write a function to calculate the maximum aggregate from the table of tables.\n-- Each table inside the table of tables contains numerical values.\n-- The function should return the maximum sum obtained from any of these tables.\n\nlocal function max_aggregate(stdata)\n    -- Initialize a variable to keep track of maximum sum\n    local max_sum = -math.huge  -- Use negative infinity to ensure any number will be greater\n\n    -- Iterate over each table in the main table\n    for _, subtable in ipairs(stdata) do\n        -- Calculate the sum of the current subtable\n        local current_sum = 0\n        for _, value in ipairs(subtable) do\n            current_sum = current_sum + value\n        end\n\n        -- Update the maximum sum if the current sum is greater\n        if current_sum > max_sum then\n            max_sum = current_sum\n        end\n    end\n\n    -- Return the maximum sum found\n    return max_sum\nend\n\n-- Example usage:\n-- local data = {{1, 2, 3}, {4, 5}, {6, 7, 8}}\n-- print(max_aggregate(data)) -- Output will be 21\n```"}
{"name":"mbpp_304_find_Element","language":"lua","prompt":"-- Write a luathon function to find element at a given index after number of rotations.\nlocal function find_Element(arr, ranges, rotations, index)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_304_find_Element.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Element\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {{0, 2}, {0, 3}}, 2, 1), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4}, {{0, 1}, {0, 2}}, 1, 2), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {{0, 1}, {0, 2}}, 1, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_304_find_Element","gpt_solution":"```lua\n-- Function to find element at a given index after a number of rotations.\n-- arr: array of elements\n-- ranges: array of ranges, each range is a table with two elements {startIndex, endIndex}\n-- rotations: number of times you need to rotate the array based on the ranges\n-- index: the index at which to find the element after all rotations\n\nlocal function find_Element(arr, ranges, rotations, index)\n    local n = #arr\n\n    -- Function to perform one rotation based on a given range\n    local function rotate_once(startIndex, endIndex)\n        local temp = arr[endIndex]\n        for i = endIndex, startIndex + 1, -1 do\n            arr[i] = arr[i - 1]\n        end\n        arr[startIndex] = temp\n    end\n\n    -- Perform rotations\n    for _ = 1, rotations do\n        for _, range in ipairs(ranges) do\n            local startIndex, endIndex = range[1], range[2]\n            rotate_once(startIndex, endIndex)\n        end\n    end\n\n    -- Return the element at the specified index after rotations\n    return arr[index]\nend\n\n-- Example usage\nlocal arr = {1, 2, 3, 4, 5}\nlocal ranges = {{1, 3}, {0, 2}}\nlocal rotations = 2\nlocal index = 2\n\nprint(find_Element(arr, ranges, rotations, index)) -- Output depends on the specific rotations performed\n```\n\nThis code defines the `find_Element` function that performs rotations on given ranges of an array and then returns the element at a specified index after the rotations. The `rotate_once` function handles single range rotations."}
{"name":"mbpp_305_start_withp","language":"lua","prompt":"-- Write a function to return two words from a table of words starting with letter 'p'.\nlocal function start_withp(words)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_305_start_withp.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = start_withp\n    lu.assertEquals(candidate({'Python PHP', 'Java JavaScript', 'c c++'}), {'Python', 'PHP'})\n    lu.assertEquals(candidate({'Python Programming', 'Java Programming'}), {'Python', 'Programming'})\n    lu.assertEquals(candidate({'Pqrst Pqr', 'qrstuv'}), {'Pqrst', 'Pqr'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_305_start_withp","gpt_solution":"```lua\n-- Write a function to return two words from a table of words starting with letter 'p'.\nlocal function start_withp(words)\n    local result = {}\n    for _, word in ipairs(words) do\n        if word:sub(1,1):lower() == 'p' then\n            table.insert(result, word)\n            if #result == 2 then\n                break\n            end\n        end\n    end\n    return result\nend\n```\n\nHere's a brief explanation of the code:\n\n1. The function `start_withp` takes one argument `words`, which is expected to be a table of words.\n2. It initializes an empty table `result` to store the words starting with the letter 'p'.\n3. It iterates through each word in the input table using a `for` loop.\n4. For each word, it checks if the first letter (converted to lowercase using `:lower()`) is 'p'.\n5. If the condition is met, it adds the word to the `result` table.\n6. If the `result` table already contains two words, it breaks out of the loop.\n7. Finally, the function returns the `result` table."}
{"name":"mbpp_306_max_sum_increasing_subseq","language":"lua","prompt":"-- Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlocal function max_sum_increasing_subseq(a, n, index, k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_306_max_sum_increasing_subseq.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum_increasing_subseq\n    lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), 11)\n    lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), 7)\n    lu.assertEquals(candidate({11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), 71)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_306_max_sum_increasing_subseq","gpt_solution":"```lua\n-- Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlocal function max_sum_increasing_subseq(a, n, index, k)\n  -- Initialize an array to store the maximum sums of increasing subsequences\n  local max_sum = {}\n  \n  -- Initialize the sums to be the values of the array itself\n  for i = 1, index do\n    max_sum[i] = a[i]\n  end\n  \n  -- Compute the maximum sum of increasing subsequences until ith index\n  for i = 1, index do\n    for j = 1, i - 1 do\n      if a[j] < a[i] and max_sum[j] + a[i] > max_sum[i] then\n        max_sum[i] = max_sum[j] + a[i]\n      end\n    end\n  end\n  \n  -- Now we need to include the kth element\n  local inclusion_sum = 0\n  for i = 1, index do\n    if a[i] < a[k] and max_sum[i] + a[k] > inclusion_sum then\n      inclusion_sum = max_sum[i] + a[k]\n    end\n  end\n  \n  -- If no such increasing subsequence is found, return a[k] itself\n  return inclusion_sum > 0 and inclusion_sum or a[k]\nend\n\n-- Example usage\nlocal a = {10, 5, 4, 3, 15, 17, 18}\nlocal n = #a\nlocal index = 4\nlocal k = 6\nprint(max_sum_increasing_subseq(a, n, index, k)) -- Output should be 25 (10 + 15)\n```\n\nThis Lua function `max_sum_increasing_subseq` computes the maximum sum of an increasing subsequence from the prefix of the array until `index`, and ensures that it includes the element at `k` (where `k > index`)."}
{"name":"mbpp_308_large_product","language":"lua","prompt":"-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_308_large_product.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_308_large_product","gpt_solution":"```lua\n-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n\n    -- Calculate all possible products\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(products, nums1[i] * nums2[j])\n        end\n    end\n\n    -- Sort the products in descending order\n    table.sort(products, function(a, b) return a > b end)\n\n    -- Take the first N largest products\n    local result = {}\n    for i = 1, N do\n        if products[i] then\n            table.insert(result, products[i])\n        end\n    end\n\n    return result\nend\n\n-- Example usage\nlocal nums1 = {1, 3, 5}\nlocal nums2 = {2, 4, 6}\nlocal N = 3\nlocal largest_products = large_product(nums1, nums2, N)\nfor i, product in ipairs(largest_products) do\n    print(product)\nend\n```\n\nThis Lua function `large_product` computes the specified number `N` of largest products from two given tables `nums1` and `nums2` by selecting one factor from each table, respectively. The products are then sorted in descending order, and the top `N` largest products are returned."}
{"name":"mbpp_309_maximum","language":"lua","prompt":"-- Write a luathon function to find the maximum of two numbers.\nlocal function maximum(a, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_309_maximum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate(5, 10), 10)\n    lu.assertEquals(candidate(-1, -2), -1)\n    lu.assertEquals(candidate(9, 7), 9)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_309_maximum","gpt_solution":"```lua\n-- Write a luathon function to find the maximum of two numbers.\nlocal function maximum(a, b)\n  if a > b then\n    return a\n  else\n    return b\n  end\nend\n```\n\nThis Lua function `maximum` takes two numbers as input and returns the larger of the two."}
{"name":"mbpp_310_string_to_tuple","language":"lua","prompt":"-- Write a function to convert a given string to a table of characters.\nlocal function string_to_tuple(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_310_string_to_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_tuple\n    lu.assertEquals(candidate('python 3.0'), {'p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'})\n    lu.assertEquals(candidate('item1'), {'i', 't', 'e', 'm', '1'})\n    lu.assertEquals(candidate('15.10'), {'1', '5', '.', '1', '0'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_310_string_to_tuple","gpt_solution":"```lua\n-- Function that converts a given string to a table of characters.\nlocal function string_to_tuple(str1)\n    local result = {}\n    for i = 1, #str1 do\n        result[i] = str1:sub(i, i)\n    end\n    return result\nend\n\n-- Example usage:\nlocal str = \"hello\"\nlocal tuple = string_to_tuple(str)\nfor i, char in ipairs(tuple) do\n    print(char)\nend\n```\n\nThe `string_to_tuple` function takes a string `str1` as input and converts it into a table where each element is a character from the string. The `for` loop iterates through each character in the string and adds it to the `result` table. The `string:sub()` function is used to extract individual characters. The function then returns the `result` table. An example usage shows how to call this function and print each character in the returned table."}
{"name":"mbpp_388_highest_Power_of_2","language":"lua","prompt":"-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_388_highest_Power_of_2.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_388_highest_Power_of_2","gpt_solution":"```lua\n-- Write a luathon function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n    if n < 1 then\n        return 0\n    end\n    \n    local power = 1\n    while power * 2 <= n do\n        power = power * 2\n    end\n    \n    return power\nend\n```"}
{"name":"mbpp_389_find_lucas","language":"lua","prompt":"-- Write a function to find the n'th lucas number.\nlocal function find_lucas(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_389_find_lucas.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_lucas\n    lu.assertEquals(candidate(9), 76)\n    lu.assertEquals(candidate(4), 7)\n    lu.assertEquals(candidate(3), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_389_find_lucas","gpt_solution":"```lua\n-- Write a function to find the n'th lucas number.\nlocal function find_lucas(n)\n    -- Initialize the first two Lucas numbers\n    local a, b = 2, 1\n\n    -- If n is 0, return the first Lucas number\n    if n == 0 then\n        return a\n    -- If n is 1, return the second Lucas number\n    elseif n == 1 then\n        return b\n    end\n\n    -- For n > 1, use a loop to find the n'th Lucas number\n    local lucas\n    for i = 2, n do\n        lucas = a + b\n        a = b\n        b = lucas\n    end\n\n    return lucas\nend\n```\n\nYou can use this function by calling it with an integer value `n` to find the nth Lucas number, for example:\n```lua\nprint(find_lucas(10))  -- This will print the 10th Lucas number\n```"}
{"name":"mbpp_390_add_string","language":"lua","prompt":"-- Write a function to apply a given format string to all of the elements in a table.\nlocal function add_string(list_, string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_390_add_string.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_string\n    lu.assertEquals(candidate({1, 2, 3, 4}, 'temp{0}'), {'temp1', 'temp2', 'temp3', 'temp4'})\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 'python{0}'), {'pythona', 'pythonb', 'pythonc', 'pythond'})\n    lu.assertEquals(candidate({5, 6, 7, 8}, 'string{0}'), {'string5', 'string6', 'string7', 'string8'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_390_add_string","gpt_solution":"```lua\n-- Write a function to apply a given format string to all of the elements in a table.\nlocal function add_string(list_, string)\n    local formatted_list = {}\n    for i, v in ipairs(list_) do\n        formatted_list[i] = string.format(string, v)\n    end\n    return formatted_list\nend\n\n-- Example usage:\nlocal example_list = {\"apple\", \"banana\", \"cherry\"}\nlocal format_string = \"This is a %s.\"\nlocal result = add_string(example_list, format_string)\nfor _, formatted_item in ipairs(result) do\n    print(formatted_item)\nend\n\n-- Expected output:\n-- This is a apple.\n-- This is a banana.\n-- This is a cherry.\n```"}
{"name":"mbpp_391_convert_list_dictionary","language":"lua","prompt":"-- Write a function to convert more than one table to nested table.\nlocal function convert_list_dictionary(l1, l2, l3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_391_convert_list_dictionary.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_391_convert_list_dictionary","gpt_solution":"```lua\n-- Write a function to convert more than one table to nested table.\nlocal function convert_list_dictionary(l1, l2, l3)\n    -- Create a nested table from three input tables\n    local nested_table = {\n        l1 = l1,\n        l2 = l2,\n        l3 = l3,\n    }\n\n    return nested_table\nend\n\n-- Example usage:\nlocal table1 = {1, 2, 3}\nlocal table2 = {\"a\", \"b\", \"c\"}\nlocal table3 = {true, false, true}\n\nlocal result = convert_list_dictionary(table1, table2, table3)\nfor k, v in pairs(result) do\n    print(k .. \":\")\n    for i, item in ipairs(v) do\n        print(\"  \" .. i .. \" -> \" .. tostring(item))\n    end\nend\n```"}
{"name":"mbpp_392_get_max_sum","language":"lua","prompt":"-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n\/2) + f(n\/3) + f(n\/4) + f(n\/5)), n).\nlocal function get_max_sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_392_get_max_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_392_get_max_sum","gpt_solution":"```lua\nlocal memo = {}\n\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n\n    if memo[n] then\n        return memo[n]\n    end\n\n    local sum = get_max_sum(math.floor(n \/ 2)) + get_max_sum(math.floor(n \/ 3)) + get_max_sum(math.floor(n \/ 4)) + get_max_sum(math.floor(n \/ 5))\n    memo[n] = math.max(sum, n)\n    \n    return memo[n]\nend\n```"}
{"name":"mbpp_393_max_length_list","language":"lua","prompt":"-- Write a function to find the table with maximum length.\nlocal function max_length_list(input_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_393_max_length_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_length_list\n    lu.assertEquals(candidate({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), {3, {13, 15, 17}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5}, {1, 2, 3, 4}, {1, 2, 3}, {1, 2}, {1}}), {5, {1, 2, 3, 4, 5}})\n    lu.assertEquals(candidate({{3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12}}), {4, {6, 7, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_393_max_length_list","gpt_solution":"```lua\n-- Write a function to find the table with maximum length.\nlocal function max_length_list(input_list)\n    -- Initialize variables to store the maximum length and the corresponding table\n    local max_length = 0\n    local max_length_table = nil\n\n    -- Iterate through the input list of tables\n    for _, tbl in ipairs(input_list) do\n        -- Check if the current table's length is greater than the stored maximum length\n        if #tbl > max_length then\n            -- Update the maximum length and the corresponding table\n            max_length = #tbl\n            max_length_table = tbl\n        end\n    end\n\n    -- Return the table with the maximum length\n    return max_length_table\nend\n```"}
{"name":"mbpp_394_check_distinct","language":"lua","prompt":"-- Write a function to check if given table contains no duplicates.\nlocal function check_distinct(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_394_check_distinct.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_distinct\n    lu.assertEquals(candidate({1, 4, 5, 6, 1, 4}), false)\n    lu.assertEquals(candidate({1, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 6}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_394_check_distinct","gpt_solution":"```lua\n-- Write a function to check if given table contains no duplicates.\nlocal function check_distinct(test_tup)\n    -- Create a table to store the frequencies of each element\n    local freq = {}\n    \n    -- Iterate over elements in the test_tup table\n    for _, v in pairs(test_tup) do\n        -- If the element is already in the freq table, it's a duplicate\n        if freq[v] then\n            return false\n        end\n        -- Mark the element as seen by adding it to the freq table\n        freq[v] = true\n    end\n    \n    -- If no duplicates were found, return true\n    return true\nend\n\n-- Example usage\nprint(check_distinct({1, 2, 3, 4}))  -- true\nprint(check_distinct({1, 2, 2, 4}))  -- false\n```"}
{"name":"mbpp_395_first_non_repeating_character","language":"lua","prompt":"-- Write a luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_395_first_non_repeating_character.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_395_first_non_repeating_character","gpt_solution":"```lua\n-- Write a Luathon function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n    local char_count = {}\n    \n    -- First pass: count occurrences of each character\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        char_count[char] = (char_count[char] or 0) + 1\n    end\n    \n    -- Second pass: find the first non-repeated character\n    for i = 1, #str1 do\n        if char_count[str1:sub(i, i)] == 1 then\n            return str1:sub(i, i)\n        end\n    end\n    \n    -- If no non-repeated character is found, return nil\n    return nil\nend\n```"}
{"name":"mbpp_396_check_char","language":"lua","prompt":"-- Write a function to check whether the given string starts and ends with the same character or not.\nlocal function check_char(string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_396_check_char.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_char\n    lu.assertEquals(candidate('abba'), 'Valid')\n    lu.assertEquals(candidate('a'), 'Valid')\n    lu.assertEquals(candidate('abcd'), 'Invalid')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_396_check_char","gpt_solution":"```lua\n-- Write a function to check whether the given string starts and ends with the same character or not.\nlocal function check_char(str)\n    local length = #str\n    if length == 0 then\n        return false\n    end\n    \n    return str:sub(1, 1) == str:sub(-1)\nend\n\n-- Example usage\nprint(check_char(\"radar\"))  -- true\nprint(check_char(\"hello\"))  -- false\nprint(check_char(\"a\"))      -- true\nprint(check_char(\"\"))       -- false\n```"}
{"name":"mbpp_397_median_numbers","language":"lua","prompt":"-- Write a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_397_median_numbers.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_397_median_numbers","gpt_solution":"```lua\n--[[ \n  Function to find the median of three numbers.\n  Arguments:\n    a (number): The first number\n    b (number): The second number\n    c (number): The third number\n  Returns:\n    number: The median of the three given numbers\n--]]\n\nlocal function median_numbers(a, b, c)\n  if (a <= b and b <= c) or (c <= b and b <= a) then\n    return b\n  elseif (b <= a and a <= c) or (c <= a and a <= b) then\n    return a\n  else\n    return c\n  end\nend\n```\n\nThis function, `median_numbers`, determines the median of three input numbers by checking the order combinations and returning the appropriate middle value."}
{"name":"mbpp_398_sum_of_digits","language":"lua","prompt":"-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_398_sum_of_digits.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_398_sum_of_digits","gpt_solution":"```lua\n-- Write a function to compute the sum of digits of each number of a given table.\nlocal function sum_of_digits(nums)\n    local function digit_sum(n)\n        local sum = 0\n        while n > 0 do\n            sum = sum + (n % 10)\n            n = math.floor(n \/ 10)\n        end\n        return sum\n    end\n\n    local results = {}\n    for i, num in ipairs(nums) do\n        table.insert(results, digit_sum(num))\n    end\n    return results\nend\n\n-- Example usage:\nlocal numbers = {123, 456, 789}\nlocal results = sum_of_digits(numbers)\nfor i, sum in ipairs(results) do\n    print(\"Sum of digits of\", numbers[i], \"is\", sum)\nend\n```"}
{"name":"mbpp_399_bitwise_xor","language":"lua","prompt":"-- Write a function to perform the mathematical bitwise xor operation across the given tables.\nlocal function bitwise_xor(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_399_bitwise_xor.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bitwise_xor\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {15, 6, 5, 10})\n    lu.assertEquals(candidate({11, 5, 7, 10}, {6, 3, 4, 4}), {13, 6, 3, 14})\n    lu.assertEquals(candidate({12, 6, 8, 11}, {7, 4, 5, 6}), {11, 2, 13, 13})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_399_bitwise_xor","gpt_solution":"```lua\n-- The function 'bitwise_xor' takes two tables of integers 'test_tup1' and 'test_tup2' as input.\n-- It performs a bitwise XOR operation between corresponding elements of the two tables.\n-- The result is returned as a new table. The input tables are assumed to be of the same length.\nlocal function bitwise_xor(test_tup1, test_tup2)\n  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = test_tup1[i] ~ test_tup2[i]\n  end\n  return result\nend\n\n-- Example usage:\n-- local a = {1, 2, 3}\n-- local b = {4, 5, 6}\n-- local result = bitwise_xor(a, b)\n-- The result would be {5, 7, 5}\n```"}
{"name":"mbpp_400_extract_freq","language":"lua","prompt":"-- Write a function to extract the number of unique tables in the given table.\nlocal function extract_freq(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_400_extract_freq.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_freq\n    lu.assertEquals(candidate({{3, 4}, {1, 2}, {4, 3}, {5, 6}}), 3)\n    lu.assertEquals(candidate({{4, 15}, {2, 3}, {5, 4}, {6, 7}}), 4)\n    lu.assertEquals(candidate({{5, 16}, {2, 3}, {6, 5}, {6, 9}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_400_extract_freq","gpt_solution":"```lua\n-- Write a function to extract the number of unique tables in the given table.\nlocal function extract_freq(test_list)\n    -- This function will count the unique tables present in the provided table `test_list`.\n\n    -- Helper function to compare two tables\n    local function table_equal(tbl1, tbl2)\n        if tbl1 == tbl2 then return true end\n        for k, v in pairs(tbl1) do\n            if type(v) == \"table\" and type(tbl2[k]) == \"table\" then\n                if not table_equal(v, tbl2[k]) then return false end\n            else\n                if v ~= tbl2[k] then return false end\n            end\n        end\n        for k in pairs(tbl2) do\n            if tbl1[k] == nil then return false end\n        end\n        return true\n    end\n\n    -- Set to track unique tables\n    local unique_tables = {}\n    \n    for _, table in ipairs(test_list) do\n        local found = false\n        for _, unique in ipairs(unique_tables) do\n            if table_equal(table, unique) then\n                found = true\n                break\n            end\n        end\n        if not found then\n            table.insert(unique_tables, table)\n        end\n    end\n    \n    return #unique_tables\nend\n```\n\nThis function `extract_freq` will return the number of unique tables in the provided table `test_list`. It uses a helper function `table_equal` to compare if two tables are the same."}
{"name":"mbpp_401_add_nested_tuples","language":"lua","prompt":"-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_401_add_nested_tuples.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_401_add_nested_tuples","gpt_solution":"```lua\n-- Write a function to perform index-wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        local row = {}\n        for j = 1, #test_tup1[i] do\n            row[j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n        table.insert(result, row)\n    end\n    return result\nend\n\n-- Example usage\nlocal test_tup1 = {{1, 2}, {3, 4}}\nlocal test_tup2 = {{5, 6}, {7, 8}}\nlocal result = add_nested_tuples(test_tup1, test_tup2)\n\nfor i = 1, #result do\n    for j = 1, #result[i] do\n        io.write(result[i][j] .. \" \")\n    end\n    io.write(\"\\n\")\nend\n```\n\nThis function, `add_nested_tuples`, takes two nested tables `test_tup1` and `test_tup2` and returns a new nested table where each element is the sum of the corresponding elements from the input tables. The example usage demonstrates how to call this function and print the resulting nested table."}
{"name":"mbpp_404_minimum","language":"lua","prompt":"-- Write a luathon function to find the minimum of two numbers.\nlocal function minimum(a, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_404_minimum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minimum\n    lu.assertEquals(candidate(1, 2), 1)\n    lu.assertEquals(candidate(-5, -4), -5)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_404_minimum","gpt_solution":"```lua\n-- Write a luathon function to find the minimum of two numbers.\nlocal function minimum(a, b)\n    if a < b then\n        return a\n    else\n        return b\n    end\nend\n```\n"}
{"name":"mbpp_405_check_tuplex","language":"lua","prompt":"-- Write a function to check whether an element exists within a table.\nlocal function check_tuplex(tuplex, tuple1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_405_check_tuplex.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_tuplex\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, 'r'), true)\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, '5'), false)\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, 3), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_405_check_tuplex","gpt_solution":"```lua\n-- Function to check whether a tuple exists within another tuple array.\n-- @param tuplex: The table (or array) containing tuples.\n-- @param tuple1: The tuple to search for within the table.\n-- @return: Boolean value indicating whether the tuple exists within the table.\n\nlocal function check_tuplex(tuplex, tuple1)\n    -- Function to compare two tuples\n    local function tuples_are_equal(t1, t2)\n        if #t1 ~= #t2 then\n            return false\n        end\n        for i = 1, #t1 do\n            if t1[i] ~= t2[i] then\n                return false\n            end\n        end\n        return true\n    end\n\n    for _, tuple in ipairs(tuplex) do\n        if tuples_are_equal(tuple, tuple1) then\n            return true\n        end\n    end\n    return false\nend\n\n-- Example usage:\nlocal tuplex = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n}\n\nlocal tuple1 = {4, 5, 6}\nprint(check_tuplex(tuplex, tuple1))  -- Output: true\n\nlocal tuple2 = {1, 2, 4}\nprint(check_tuplex(tuplex, tuple2))  -- Output: false\n```\n\nThis Lua script defines the `check_tuplex` function, which checks whether a given tuple exists within an array of tuples. The script includes a nested function `tuples_are_equal` that compares two tuples for equality. The example usage at the end demonstrates how to use the `check_tuplex` function."}
{"name":"mbpp_406_find_Parity","language":"lua","prompt":"-- Write a luathon function to find whether the parity of a given number is odd.\nlocal function find_Parity(x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_406_find_Parity.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Parity\n    lu.assertEquals(candidate(12), false)\n    lu.assertEquals(candidate(7), true)\n    lu.assertEquals(candidate(10), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_406_find_Parity","gpt_solution":"```lua\n--- Checks whether the parity of a given number is odd.\n-- @param x The number to check.\n-- @return True if the parity is odd, otherwise false.\nlocal function find_Parity(x)\n    -- Calculate the number of bits set to 1 in the binary representation of x\n    local count = 0\n    while x > 0 do\n        count = count + (x % 2)\n        x = math.floor(x \/ 2)\n    end\n    -- Return true if the count of 1s is odd\n    return count % 2 == 1\nend\n\n-- Example usage:\nprint(find_Parity(5))  -- True, because 5 in binary is 101, which has an odd number of 1s\nprint(find_Parity(8))  -- False, because 8 in binary is 1000, which has an even number of 1s\n```"}
{"name":"mbpp_407_rearrange_bigger","language":"lua","prompt":"-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_407_rearrange_bigger.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_407_rearrange_bigger","gpt_solution":"```lua\n-- Write a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n    local digits = {}\n    local str_n = tostring(n)\n    for i = 1, #str_n do\n        digits[#digits + 1] = tonumber(str_n:sub(i, i))\n    end\n    \n    local function swap(i, j)\n        digits[i], digits[j] = digits[j], digits[i]\n    end\n\n    local function reverse(from)\n        local to = #digits\n        while from < to do\n            swap(from, to)\n            from = from + 1\n            to = to - 1\n        end\n    end\n\n    local k, l\n    for i = #digits - 1, 1, -1 do\n        if digits[i] < digits[i + 1] then\n            k = i\n            break\n        end\n    end\n    \n    if not k then\n        return nil\n    end\n\n    for i = #digits, k + 1, -1 do\n        if digits[i] > digits[k] then\n            l = i\n            break\n        end\n    end\n\n    swap(k, l)\n    reverse(k + 1)\n\n    local result = tonumber(table.concat(digits))\n    return result\nend\n\n-- Example usage: print(rearrange_bigger(12345)) should return 12354\n```\n\nYou can save the above Lua code to a Lua file and test it with different inputs to ensure that it works as expected. Here, the function `rearrange_bigger` takes an integer `n` and returns the next bigger number by rearranging its digits. If no such bigger number exists, it returns `nil`."}
{"name":"mbpp_408_k_smallest_pairs","language":"lua","prompt":"-- Write a function to find k number of smallest pairs which consist of one element from the first table and one element from the second table.\nlocal function k_smallest_pairs(nums1, nums2, k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_408_k_smallest_pairs.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_408_k_smallest_pairs","gpt_solution":"```lua\nlocal function k_smallest_pairs(nums1, nums2, k)\n    -- Helper function to create a min-heap\n    local function heapify(arr, n, i)\n        local smallest = i\n        local left = 2 * i + 1\n        local right = 2 * i + 2\n        \n        if left < n and arr[left][3] < arr[smallest][3] then\n            smallest = left\n        end\n        \n        if right < n and arr[right][3] < arr[smallest][3] then\n            smallest = right\n        end\n        \n        if smallest ~= i then\n            arr[i], arr[smallest] = arr[smallest], arr[i]\n            heapify(arr, n, smallest)\n        end\n    end\n    \n    -- Build the initial heap.\n    local function build_heap(arr, n)\n        for i = math.floor(n \/ 2) - 1, 0, -1 do\n            heapify(arr, n, i)\n        end\n    end\n    \n    if #nums1 == 0 or #nums2 == 0 or k <= 0 then\n        return {}\n    end\n\n    local pairs = {}\n    for i = 1, math.min(#nums1, k) do\n        table.insert(pairs, {i, 1, nums1[i] + nums2[1]})\n    end\n    \n    build_heap(pairs, #pairs)\n    \n    local result = {}\n    while k > 0 and #pairs > 0 do\n        local smallest = table.remove(pairs, 1)\n        table.insert(result, {nums1[smallest[1]], nums2[smallest[2]]})\n        \n        if smallest[2] < #nums2 then\n            table.insert(pairs, {smallest[1], smallest[2] + 1, nums1[smallest[1]] + nums2[smallest[2] + 1]})\n            build_heap(pairs, #pairs)\n        end\n        k = k - 1\n    end\n    \n    return result\nend\n```\n\nThe function `k_smallest_pairs` finds the `k` number of smallest pairs which consist of one element from `nums1` and one element from `nums2`. It uses a min-heap to efficiently find and store the smallest sums of pairs."}
{"name":"mbpp_409_min_product_tuple","language":"lua","prompt":"-- Write a function to find the minimum product from the pairs of tables within a given table.\nlocal function min_product_tuple(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_409_min_product_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_409_min_product_tuple","gpt_solution":"```lua\n-- Function to find the minimum product from the pairs of tables within a given table.\nlocal function min_product_tuple(list1)\n    if #list1 < 2 then\n        error(\"The input table must contain at least two tables\")\n    end\n\n    local min_product = math.huge\n    local min_pair = nil\n\n    for i = 1, #list1 do\n        for j = i + 1, #list1 do\n            for _, v1 in ipairs(list1[i]) do\n                for _, v2 in ipairs(list1[j]) do\n                    local product = v1 * v2\n                    if product < min_product then\n                        min_product = product\n                        min_pair = {list1[i], list1[j]}\n                    end\n                end\n            end\n        end\n    end\n\n    return min_pair\nend\n\n-- Example usage:\nlocal list = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {-1, -4},\n}\n\nlocal result = min_product_tuple(list)\nprint(\"Table 1: \", table.unpack(result[1]))\nprint(\"Table 2: \", table.unpack(result[2]))\n```\n\nThis code defines a function `min_product_tuple` which takes a table of tables (`list1`) as input and finds the pair of tables such that the product of any two elements (one from each table) is minimized. The function returns the pair of tables. The example usage at the end demonstrates the function with a sample input. Note that there is no `Main` function as per your requirement."}
{"name":"mbpp_410_min_val","language":"lua","prompt":"-- Write a function to find the minimum value in a given heterogeneous table.\nlocal function min_val(listval)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_410_min_val.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_val\n    lu.assertEquals(candidate({'Python', 3, 2, 4, 5, 'version'}), 2)\n    lu.assertEquals(candidate({'Python', 15, 20, 25}), 15)\n    lu.assertEquals(candidate({'Python', 30, 20, 40, 50, 'version'}), 20)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_410_min_val","gpt_solution":"```lua\n-- Write a function to find the minimum value in a given heterogeneous table.\nlocal function min_val(listval)\n    local min_value = nil\n\n    for _, value in ipairs(listval) do\n        if type(value) == \"number\" then\n            if min_value == nil or value < min_value then\n                min_value = value\n            end\n        end\n    end\n\n    return min_value\nend\n\n-- Example usage:\nlocal mixedTable = {4, \"hello\", 2, {}, 7, 3, \"world\", 1}\nprint(min_val(mixedTable))  -- Output: 1\n```\n\nThis function iterates through the given heterogeneous table, checks if there is any numeric type value and then finds the minimum value among those numeric values."}
{"name":"mbpp_411_snake_to_camel","language":"lua","prompt":"-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_411_snake_to_camel.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_411_snake_to_camel","gpt_solution":"```lua\nlocal function snake_to_camel(word)\n    return word:gsub(\"_(.)\", function(c)\n        return c:upper()\n    end)\nend\n\n-- Example usage:\n-- print(snake_to_camel(\"hello_world\")) -- \"helloWorld\"\n-- print(snake_to_camel(\"make_sure_to_convert_this_string\")) -- \"makeSureToConvertThisString\"\n```"}
{"name":"mbpp_412_remove_odd","language":"lua","prompt":"-- Write a luathon function to remove odd numbers from a given table.\nlocal function remove_odd(l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_412_remove_odd.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_odd\n    lu.assertEquals(candidate({1, 2, 3}), {2})\n    lu.assertEquals(candidate({2, 4, 6}), {2, 4, 6})\n    lu.assertEquals(candidate({10, 20, 3}), {10, 20})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_412_remove_odd","gpt_solution":"```lua\n-- Write a luathon function to remove odd numbers from a given table.\nlocal function remove_odd(l)\n    local new_list = {}\n    for _, value in ipairs(l) do\n        if value % 2 == 0 then\n            table.insert(new_list, value)\n        end\n    end\n    return new_list\nend\n```\n\nThe function `remove_odd` takes a table `l` as input and returns a new table that only contains the even numbers from the original table. It iterates through each value in the input table and checks if the value is even. If so, it adds the value to a new table, which is then returned."}
{"name":"mbpp_413_extract_nth_element","language":"lua","prompt":"-- Write a function to extract the nth element from a given table of tables.\nlocal function extract_nth_element(list1, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_413_extract_nth_element.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_nth_element\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 0), {'Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'})\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 2), {99, 96, 94, 98})\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 1), {98, 97, 91, 94})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_413_extract_nth_element","gpt_solution":"```lua\n-- Write a function to extract the nth element from a given table of tables.\nlocal function extract_nth_element(list1, n)\n    local result = {}\n    for _, sublist in ipairs(list1) do\n        if sublist[n] then\n            table.insert(result, sublist[n])\n        else\n            table.insert(result, nil)\n        end\n    end\n    return result\nend\n\n-- Example usage:\nlocal table_of_tables = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8},\n    {9}\n}\n\nlocal nth_elements = extract_nth_element(table_of_tables, 2)\nfor i, v in ipairs(nth_elements) do\n    print(v)\nend\n-- End of example usage\n```\n\nIn this code, `extract_nth_element` takes a list of tables (`list1`) and an integer `n`. It iterates through each sublist in `list1` and extracts the `n`-th element, appending it to the result table. If a sublist does not have `n` elements, it appends `nil` instead. The function then returns the result table containing all the extracted elements."}
{"name":"mbpp_414_overlapping","language":"lua","prompt":"-- Write a luathon function to check whether any value in a sequence exists in a sequence or not.\nlocal function overlapping(list1, list2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_414_overlapping.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = overlapping\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 8, 9}), false)\n    lu.assertEquals(candidate({1, 2, 3}, {4, 5, 6}), false)\n    lu.assertEquals(candidate({1, 4, 5}, {1, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_414_overlapping","gpt_solution":"```lua\n-- Function to check whether any value in list1 exists in list2\nlocal function overlapping(list1, list2)\n    -- Create a set to store elements of list2 for fast lookup\n    local set = {}\n    for _, value in ipairs(list2) do\n        set[value] = true\n    end\n    \n    -- Check if any element of list1 is present in the set\n    for _, value in ipairs(list1) do\n        if set[value] then\n            return true\n        end\n    end\n    \n    return false\nend\n```"}
{"name":"mbpp_415_max_Product","language":"lua","prompt":"-- Write a luathon function to find a pair with highest product from a given table of integers.\nlocal function max_Product(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_415_max_Product.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_Product\n    lu.assertEquals(candidate({1, 2, 3, 4, 7, 0, 8, 4}), {7, 8})\n    lu.assertEquals(candidate({0, -1, -2, -4, 5, 0, -6}), {-4, -6})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 3})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_415_max_Product","gpt_solution":"```lua\n-- Function to find a pair with the highest product from a given table of integers.\nlocal function max_Product(arr)\n    if #arr < 2 then\n        error(\"Array must contain at least two integers\")\n    end\n\n    local max1, max2 = -math.huge, -math.huge\n    local min1, min2 = math.huge, math.huge\n\n    for _, num in ipairs(arr) do\n        -- Find the two largest values\n        if num > max1 then\n            max2 = max1\n            max1 = num\n        elseif num > max2 then\n            max2 = num\n        end\n\n        -- Find the two smallest values\n        if num < min1 then\n            min2 = min1\n            min1 = num\n        elseif num < min2 then\n            min2 = num\n        end\n    end\n\n    -- The highest product can be the product of two largest or two smallest \n    -- (in case both are negative and could result in a high positive product)\n    local max_product = math.max(max1 * max2, min1 * min2)\n    return max_product\nend\n\n-- Example Usage:\nlocal arr = {1, 10, -1, -3, -2, 5}\nprint(max_Product(arr)) -- Output should be 15, which is the product of 5 and 3\n```\n\nThe function `max_Product` finds the highest product of any pair of numbers in the given table of integers. It ensures the table contains at least two integers and returns the highest product found."}
{"name":"mbpp_417_group_tuples","language":"lua","prompt":"-- Write a function to find common first element in given table of tables.\nlocal function group_tuples(Input)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_417_group_tuples.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_417_group_tuples","gpt_solution":"```lua\n-- Write a function to find common first element in given table of tables.\nlocal function group_tuples(input)\n    local common_first = {}\n    \n    for _, tuple in ipairs(input) do\n        local first_element = tuple[1]\n        if not common_first[first_element] then\n            common_first[first_element] = {}\n        end\n        table.insert(common_first[first_element], tuple)\n    end\n\n    return common_first\nend\n\n-- Example usage:\n-- local input = {\n--     {1, 2, 3},\n--     {1, 4, 5},\n--     {2, 3, 4},\n--     {2, 4, 6},\n--     {3, 1, 2},\n-- }\n-- local grouped = group_tuples(input)\n-- for key, group in pairs(grouped) do\n--     print(\"Group with first element \" .. key)\n--     for _, tuple in ipairs(group) do\n--         print(table.concat(tuple, \", \"))\n--     end\n-- end\n```\n\nThis function `group_tuples` takes a table of tables (`input`) and groups them by their first element. The function returns a table where the keys are the first elements of the input tuples and the values are tables containing all tuples that share the same first element."}
{"name":"mbpp_418_Find_Max","language":"lua","prompt":"-- Write a luathon function to find the element of a table having maximum length.\nlocal function Find_Max(lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_418_Find_Max.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Max\n    lu.assertEquals(candidate({{'A'}, {'A', 'B'}, {'A', 'B', 'C'}}), {'A', 'B', 'C'})\n    lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1, 2, 3})\n    lu.assertEquals(candidate({{1, 1}, {1, 2, 3}, {1, 5, 6, 1}}), {1, 5, 6, 1})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_418_Find_Max","gpt_solution":"```lua\n-- Write a luathon function to find the element of a table having maximum length.\nlocal function Find_Max(lst)\n  local maxLength = 0\n  local maxElement = nil\n\n  for _, element in ipairs(lst) do\n    if type(element) == \"string\" or type(element) == \"table\" then\n      local length = #element\n      if length > maxLength then\n        maxLength = length\n        maxElement = element\n      end\n    end\n  end\n\n  return maxElement\nend\n```\n\nThis function iterates through the elements of the input table `lst`, checks if each element is either a string or a table (both of which have a length), and keeps track of the element with the maximum length encountered. The element with the maximum length is then returned."}
{"name":"mbpp_419_round_and_sum","language":"lua","prompt":"-- Write a function to round every number of a given table of numbers and print the total sum multiplied by the length of the table.\nlocal function round_and_sum(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_419_round_and_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = round_and_sum\n    lu.assertEquals(candidate({22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), 243)\n    lu.assertEquals(candidate({5, 2, 9, 24.3, 29}), 345)\n    lu.assertEquals(candidate({25.0, 56.7, 89.2}), 513)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_419_round_and_sum","gpt_solution":"```lua\nlocal function round_and_sum(list1)\n    local rounded_sum = 0\n    local length = #list1\n\n    for i, num in ipairs(list1) do\n        rounded_sum = rounded_sum + math.floor(num + 0.5)\n    end\n\n    local total = rounded_sum * length\n    print(total)\nend\n```\n\nThis code defines a `round_and_sum` function that:\n- Takes a table of numbers (`list1`) as input.\n- Rounds each number in the table.\n- Sums up these rounded numbers.\n- Multiplies the total sum by the length of the table.\n- Prints the resulting value."}
{"name":"mbpp_420_cube_Sum","language":"lua","prompt":"-- Write a luathon function to find the cube sum of first n even natural numbers.\nlocal function cube_Sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_420_cube_Sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cube_Sum\n    lu.assertEquals(candidate(2), 72)\n    lu.assertEquals(candidate(3), 288)\n    lu.assertEquals(candidate(4), 800)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_420_cube_Sum","gpt_solution":"```lua\n-- Write a luathon function to find the cube sum of first n even natural numbers.\nlocal function cube_Sum(n)\n    local sum = 0\n    for i = 1, n do\n        local even_num = 2 * i\n        sum = sum + (even_num ^ 3)\n    end\n    return sum\nend\n\n-- Example usage:\n-- local result = cube_Sum(3)\n-- print(result)  -- Output will be 224 which is 8^3 + 16^3 + 24^3\n\n-- Remember to remove or comment out the example usage in production code to avoid unwanted prints.\n```"}
{"name":"mbpp_421_concatenate_tuple","language":"lua","prompt":"-- Write a function to concatenate each element of table by the delimiter.\nlocal function concatenate_tuple(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_421_concatenate_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = concatenate_tuple\n    lu.assertEquals(candidate({'ID', 'is', 4, 'UTS'}), 'ID-is-4-UTS')\n    lu.assertEquals(candidate({'QWE', 'is', 4, 'RTY'}), 'QWE-is-4-RTY')\n    lu.assertEquals(candidate({'ZEN', 'is', 4, 'OP'}), 'ZEN-is-4-OP')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_421_concatenate_tuple","gpt_solution":"```lua\n-- Write a function to concatenate each element of table by the delimiter.\nlocal function concatenate_tuple(test_tup)\n    -- Assuming the first element is the delimiter and the second element is the table of strings to concatenate\n    local delimiter = test_tup[1]\n    local elements = test_tup[2]\n    \n    -- Initialize an empty result string\n    local result = \"\"\n    \n    -- Iterate over the elements and append them to the result string with the delimiter\n    for i, element in ipairs(elements) do\n        result = result .. element\n        -- Add the delimiter if it's not the last element\n        if i < #elements then\n            result = result .. delimiter\n        end\n    end\n    \n    return result\nend\n```\n\nYou can test the function as follows:\n\n```lua\n-- Example usage:\nlocal test_tuple = {\", \", {\"apple\", \"banana\", \"cherry\"}}\nprint(concatenate_tuple(test_tuple)) -- Output: \"apple, banana, cherry\"\n```\n\nThis function takes a table `test_tup` where the first element is a delimiter and the second element is a table of strings. It concatenates each string in the table of strings, separating them by the delimiter."}
{"name":"mbpp_422_find_Average_Of_Cube","language":"lua","prompt":"-- Write a luathon function to find the average of cubes of first n natural numbers.\nlocal function find_Average_Of_Cube(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_422_find_Average_Of_Cube.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Average_Of_Cube\n    lu.assertEquals(candidate(2), 4.5)\n    lu.assertEquals(candidate(3), 12)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_422_find_Average_Of_Cube","gpt_solution":"```lua\n-- Write a luathon function to find the average of cubes of first n natural numbers.\nlocal function find_Average_Of_Cube(n)\n  local sum = 0\n\n  for i = 1, n do\n    sum = sum + (i ^ 3)\n  end\n\n  local average = sum \/ n\n  return average\nend\n\n-- Example usage:\nprint(find_Average_Of_Cube(3))  -- Output: 14 (Average of 1^3, 2^3, 3^3 is (1+8+27)\/3 = 36\/3 = 12)\n```"}
{"name":"mbpp_424_extract_rear","language":"lua","prompt":"-- Write a function to extract only the rear index element of each string in the given table.\nlocal function extract_rear(test_tuple)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_424_extract_rear.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_rear\n    lu.assertEquals(candidate({'Mers', 'for', 'Vers'}), {'s', 'r', 's'})\n    lu.assertEquals(candidate({'Avenge', 'for', 'People'}), {'e', 'r', 'e'})\n    lu.assertEquals(candidate({'Gotta', 'get', 'go'}), {'a', 't', 'o'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_424_extract_rear","gpt_solution":"```lua\n-- Write a function to extract only the rear index element of each string in the given table.\nlocal function extract_rear(test_tuple)\n    local result = {}\n    for _, str in ipairs(test_tuple) do\n        if type(str) == \"string\" and #str > 0 then\n            table.insert(result, str:sub(-1))\n        else\n            table.insert(result, \"\")\n        end\n    end\n    return result\nend\n\n-- Example usage\nlocal test_tuple = {\"apple\", \"banana\", \"cherry\", \"\", \"12345\"}\nlocal result = extract_rear(test_tuple)\nfor _, v in ipairs(result) do\n    print(v)\nend\n```\n\nThis function `extract_rear` takes a table of strings as input. It iterates over each string in the table and extracts the last character (rear index element) of each string. If the string is empty, it appends an empty string to the result. The function returns a table with the rear index elements."}
{"name":"mbpp_425_count_element_in_list","language":"lua","prompt":"-- Write a function to count the number of subtables containing a particular element.\nlocal function count_element_in_list(list1, x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_425_count_element_in_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_element_in_list\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {1, 11}, {1, 15, 7}}, 1), 3)\n    lu.assertEquals(candidate({{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'A'), 3)\n    lu.assertEquals(candidate({{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'E'), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_425_count_element_in_list","gpt_solution":"```lua\n-- Write a function to count the number of subtables containing a particular element.\nlocal function count_element_in_list(list1, x)\n    local count = 0\n\n    for _, subtable in ipairs(list1) do\n        if type(subtable) == \"table\" then\n            for _, value in ipairs(subtable) do\n                if value == x then\n                    count = count + 1\n                    break\n                end\n            end\n        end\n    end\n\n    return count\nend\n```"}
{"name":"mbpp_426_filter_oddnumbers","language":"lua","prompt":"-- Write a function to filter odd numbers.\nlocal function filter_oddnumbers(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_426_filter_oddnumbers.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_oddnumbers\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 3, 5, 7, 9})\n    lu.assertEquals(candidate({10, 20, 45, 67, 84, 93}), {45, 67, 93})\n    lu.assertEquals(candidate({5, 7, 9, 8, 6, 4, 3}), {5, 7, 9, 3})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_426_filter_oddnumbers","gpt_solution":"```lua\n-- Write a function to filter odd numbers.\nlocal function filter_oddnumbers(nums)\n    local odd_numbers = {}\n    for _, num in ipairs(nums) do\n        if num % 2 ~= 0 then\n            table.insert(odd_numbers, num)\n        end\n    end\n    return odd_numbers\nend\n\n-- Example usage:\nlocal numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nlocal filtered_numbers = filter_oddnumbers(numbers)\nfor _, num in ipairs(filtered_numbers) do\n    print(num)\nend\n```"}
{"name":"mbpp_427_change_date_format","language":"lua","prompt":"-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_427_change_date_format.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_427_change_date_format","gpt_solution":"```lua\n-- Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n    -- Extract year, month, and day from the input date\n    local year, month, day = dt:match(\"(%d%d%d%d)%-(%d%d)%-(%d%d)\")\n    \n    -- Return the date in dd-mm-yyyy format\n    return string.format(\"%02d-%02d-%04d\", day, month, year)\nend\n\n-- Example usage:\nlocal date = \"2023-10-08\"\nlocal formatted_date = change_date_format(date)\nprint(formatted_date) -- Output should be \"08-10-2023\"\n```\n\nThe above code defines a function `change_date_format` that converts a date from the `yyyy-mm-dd` format to the `dd-mm-yyyy` format. The example usage demonstrates how to use this function."}
{"name":"mbpp_428_shell_sort","language":"lua","prompt":"-- Write a function to sort the given table by using shell sort.\nlocal function shell_sort(my_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_428_shell_sort.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = shell_sort\n    lu.assertEquals(candidate({12, 23, 4, 5, 3, 2, 12, 81, 56, 95}), {2, 3, 4, 5, 12, 12, 23, 56, 81, 95})\n    lu.assertEquals(candidate({24, 22, 39, 34, 87, 73, 68}), {22, 24, 34, 39, 68, 73, 87})\n    lu.assertEquals(candidate({32, 30, 16, 96, 82, 83, 74}), {16, 30, 32, 74, 82, 83, 96})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_428_shell_sort","gpt_solution":"```lua\n-- This function performs shell sort on a given table `my_list`.\nlocal function shell_sort(my_list)\n    local n = #my_list\n\n    -- Start with a big gap, then reduce the gap\n    local gap = math.floor(n \/ 2)\n    while gap > 0 do\n        for i = gap + 1, n do\n            local temp = my_list[i]\n            local j = i\n            while j > gap and my_list[j - gap] > temp do\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            end\n            my_list[j] = temp\n        end\n        gap = math.floor(gap \/ 2)\n    end\nend\n\n-- Example usage\nlocal test_table = {23, 12, 1, 17, 4, 9, 3}\nshell_sort(test_table)\nfor i, v in ipairs(test_table) do\n    print(v)\nend\n```"}
{"name":"mbpp_429_and_tuples","language":"lua","prompt":"-- Write a function to extract the elementwise and tables from the given two tables.\nlocal function and_tuples(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_429_and_tuples.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = and_tuples\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {0, 0, 2, 1})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {5, 6, 7, 8}), {1, 2, 3, 0})\n    lu.assertEquals(candidate({8, 9, 11, 12}, {7, 13, 14, 17}), {0, 9, 10, 0})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_429_and_tuples","gpt_solution":"```lua\n-- Write a function to extract the elementwise and tables from the given two tables.\nlocal function and_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n\n    for i = 1, #test_tup1 do\n        if type(test_tup1[i]) == \"table\" and type(test_tup2[i]) == \"table\" then\n            result_tup[i] = and_tuples(test_tup1[i], test_tup2[i])\n        else\n            result_tup[i] = test_tup1[i] and test_tup2[i]\n        end\n    end\n\n    return result_tup\nend\n```\n\nThis function, `and_tuples`, takes two tables (`test_tup1` and `test_tup2`) and extracts elementwise logical-AND results. If the corresponding elements in the tables are themselves tables, it recursively performs the logical-AND operation on these nested tables as well."}
{"name":"mbpp_430_parabola_directrix","language":"lua","prompt":"-- Write a function to find the directrix of a parabola.\nlocal function parabola_directrix(a, b, c)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_430_parabola_directrix.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parabola_directrix\n    lu.assertEquals(candidate(5, 3, 2), -198)\n    lu.assertEquals(candidate(9, 8, 4), -2336)\n    lu.assertEquals(candidate(2, 4, 6), -130)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_430_parabola_directrix","gpt_solution":"```lua\n-- Function to find the directrix of a parabola given its coefficients.\n-- The standard form of a parabola is y = ax^2 + bx + c.\n-- The directrix of a parabola can be found using the formula: y = c - (b^2 - 1) \/ 4a.\n\nlocal function parabola_directrix(a, b, c)\n    -- Formula to calculate the directrix.\n    local directrix = c - (b^2 + 1) \/ (4 * a)\n    return directrix\nend\n\n-- Example usage:\n-- local directrix = parabola_directrix(1, -2, 1)\n-- print(directrix) -- Output should be 0.75\n```"}
{"name":"mbpp_431_common_element","language":"lua","prompt":"-- Write a function that takes two tables and returns true if they have at least one common element.\nlocal function common_element(list1, list2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_431_common_element.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common_element\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {5, 6, 7, 8, 9}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 8, 9}), None)\n    lu.assertEquals(candidate({'a', 'b', 'c'}, {'d', 'b', 'e'}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_431_common_element","gpt_solution":"```lua\nlocal function common_element(list1, list2)\n    -- Create a set from the first table\n    local set = {}\n    for _, element in ipairs(list1) do\n        set[element] = true\n    end\n    \n    -- Check for common elements in the second table\n    for _, element in ipairs(list2) do\n        if set[element] then\n            return true\n        end\n    end\n    \n    -- Return false if no common element is found\n    return false\nend\n```"}
{"name":"mbpp_432_median_trapezium","language":"lua","prompt":"-- Write a function to find the median length of a trapezium.\nlocal function median_trapezium(base1, base2, height)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_432_median_trapezium.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_trapezium\n    lu.assertEquals(candidate(15, 25, 35), 20)\n    lu.assertEquals(candidate(10, 20, 30), 15)\n    lu.assertEquals(candidate(6, 9, 4), 7.5)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_432_median_trapezium","gpt_solution":"```lua\n-- Function to find the median length of a trapezium\n-- The median of a trapezium is the line segment that connects the midpoints of the non-parallel sides\n-- This median is parallel to the bases and its length is the average of the lengths of the two bases.\n\nlocal function median_trapezium(base1, base2)\n    -- Calculate the median length\n    local median = (base1 + base2) \/ 2\n    return median\nend\n\n-- Example usage:\nlocal base1 = 10\nlocal base2 = 20\nprint(\"The median length of the trapezium is:\", median_trapezium(base1, base2))\n```\n\nExplanation:\n- The `median_trapezium` function takes two parameters `base1` and `base2`, which represent the lengths of the two parallel sides (bases) of the trapezium.\n- The median length is calculated as the average of the lengths of the two bases.\n- The function returns the calculated median length.\n- An example usage is provided to demonstrate how the function can be used to calculate the median length of a trapezium with given base lengths."}
{"name":"mbpp_433_check_greater","language":"lua","prompt":"-- Write a function to check whether the entered number is greater than the elements of the given table.\nlocal function check_greater(arr, number)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_433_check_greater.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_greater\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, 4), false)\n    lu.assertEquals(candidate({2, 3, 4, 5, 6}, 8), true)\n    lu.assertEquals(candidate({9, 7, 4, 8, 6, 1}, 11), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_433_check_greater","gpt_solution":"```lua\n-- Write a function to check whether the entered number is greater than the elements of the given table.\nlocal function check_greater(arr, number)\n    for _, value in ipairs(arr) do\n        if number <= value then\n            return false\n        end\n    end\n    return true\nend\n\n-- Example usage:\nlocal my_table = {1, 2, 3, 4, 5}\nlocal number_to_check = 6\nlocal result = check_greater(my_table, number_to_check)\nprint(result) -- Should print true since 6 is greater than all elements in the table\n\nnumber_to_check = 3\nresult = check_greater(my_table, number_to_check)\nprint(result) -- Should print false since 3 is not greater than all elements in the table\n```"}
{"name":"mbpp_434_text_match_one","language":"lua","prompt":"-- Write a function that matches a string that has an a followed by one or more b's.\nlocal function text_match_one(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_434_text_match_one.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_one\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abba'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_434_text_match_one","gpt_solution":"```lua\n-- Write a function that matches a string that has an a followed by one or more b's.\nlocal function text_match_one(text)\n    local match = text:match(\"ab+\")\n    if match then\n        return match\n    else\n        return nil\n    end\nend\n\n-- Example usage:\n-- print(text_match_one(\"abbb\")) -- This will print \"abbb\"\n-- print(text_match_one(\"a\")) -- This will return nil as there are no 'b's following 'a'\n```"}
{"name":"mbpp_435_last_Digit","language":"lua","prompt":"-- Write a luathon function to find the last digit of a given number.\nlocal function last_Digit(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_435_last_Digit.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last_Digit\n    lu.assertEquals(candidate(123), 3)\n    lu.assertEquals(candidate(25), 5)\n    lu.assertEquals(candidate(30), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_435_last_Digit","gpt_solution":"```lua\n-- Function to find the last digit of a given number.\nlocal function last_Digit(n)\n    -- Convert the number to a string to easily access its last character\n    local num_str = tostring(n)\n    -- Get the last character of the string\n    local last_char = num_str:sub(-1)\n    -- Convert the last character back to a number and return it\n    return tonumber(last_char)\nend\n\n-- Example usage:\n-- print(last_Digit(1234))  -- Output: 4\n-- print(last_Digit(56789)) -- Output: 9\n```"}
{"name":"mbpp_436_neg_nos","language":"lua","prompt":"-- Write a luathon function to return the negative numbers in a table.\nlocal function neg_nos(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_436_neg_nos.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = neg_nos\n    lu.assertEquals(candidate({-1, 4, 5, -6}), {-1, -6})\n    lu.assertEquals(candidate({-1, -2, 3, 4}), {-1, -2})\n    lu.assertEquals(candidate({-7, -6, 8, 9}), {-7, -6})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_436_neg_nos","gpt_solution":"```lua\n-- Write a luathon function to return the negative numbers in a table.\nlocal function neg_nos(list1)\n    local negatives = {}\n    for _, value in ipairs(list1) do\n        if value < 0 then\n            table.insert(negatives, value)\n        end\n    end\n    return negatives\nend\n```"}
{"name":"mbpp_437_remove_odd","language":"lua","prompt":"-- Write a function to remove odd characters in a string.\nlocal function remove_odd(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_437_remove_odd.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_odd\n    lu.assertEquals(candidate('python'), 'yhn')\n    lu.assertEquals(candidate('program'), 'rga')\n    lu.assertEquals(candidate('language'), 'agae')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_437_remove_odd","gpt_solution":"```lua\n-- Write a function to remove odd characters in a string.\nlocal function remove_odd(str1)\n    local result = {}\n    for i = 2, #str1, 2 do\n        table.insert(result, str1:sub(i, i))\n    end\n    return table.concat(result)\nend\n\n-- Example usage\nprint(remove_odd(\"hello\"))  -- Output: \"el\"\nprint(remove_odd(\"12345\"))  -- Output: \"24\"\nprint(remove_odd(\"abcdef\"))  -- Output: \"bdf\"\n```\n\nThis function iterates through the string starting from the second character, moving in steps of 2 to skip odd-indexed characters, and concatenates the even-indexed characters into the result string."}
{"name":"mbpp_438_count_bidirectional","language":"lua","prompt":"-- Write a function to count bidirectional table pairs.\nlocal function count_bidirectional(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_438_count_bidirectional.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_438_count_bidirectional","gpt_solution":"```lua\n-- Write a function to count bidirectional table pairs.\nlocal function count_bidirectional(test_list)\n    local count = 0\n    local seen = {}\n    \n    for _, pair in ipairs(test_list) do\n        local first, second = pair[1], pair[2]\n        if not seen[first] then\n            seen[first] = {}\n        end\n        if not seen[second] then\n            seen[second] = {}\n        end\n        \n        if not seen[first][second] and not seen[second][first] then\n            count = count + 1\n        end\n        \n        seen[first][second] = true\n        seen[second][first] = true\n    end\n    \n    return count\nend\n\n-- Example usage:\nlocal test_list = {\n    {1, 2},\n    {2, 1},\n    {3, 4},\n    {4, 3},\n    {5, 6}\n}\n\nprint(count_bidirectional(test_list)) -- Output should be 3\n```\n\nThis function `count_bidirectional` will count the number of unique bidirectional pairs in the given list. It does this by maintaining a dictionary `seen` that tracks pairs that have been accounted for, ensuring that pairs like `{1, 2}` and `{2, 1}` are only counted once. The count of unique bidirectional pairs is then returned."}
{"name":"mbpp_439_multiple_to_single","language":"lua","prompt":"-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_439_multiple_to_single.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_439_multiple_to_single","gpt_solution":"```lua\n-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    -- Convert each integer in the table to a string and concatenate them\n    local combined_string = table.concat(L, \"\")\n    -- Convert the concatenated string back to an integer and return it\n    return tonumber(combined_string)\nend\n\n-- Example usage:\nlocal test_table = {1, 2, 3, 4, 5}\nprint(multiple_to_single(test_table))  -- Output: 12345\n```"}
{"name":"mbpp_440_find_adverb_position","language":"lua","prompt":"-- Write a function to find the first adverb and their positions in a given sentence.\nlocal function find_adverb_position(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_440_find_adverb_position.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_adverb_position\n    lu.assertEquals(candidate('clearly!! we can see the sky'), {0, 7, 'clearly'})\n    lu.assertEquals(candidate('seriously!! there are many roses'), {0, 9, 'seriously'})\n    lu.assertEquals(candidate('unfortunately!! sita is going to home'), {0, 13, 'unfortunately'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_440_find_adverb_position","gpt_solution":"```lua\nlocal function find_adverb_position(text)\n    -- Define a pattern to match adverbs ending in \"ly\"\n    local adverb_pattern = \"%f[%a]%a+ly%f[%A]\"\n    \n    -- Find the first adverb and its position\n    local start_pos, end_pos = text:find(adverb_pattern)\n    \n    -- If an adverb is found, return it and its positions\n    if start_pos then\n        local adverb = text:sub(start_pos, end_pos)\n        return adverb, start_pos, end_pos\n    else\n        return nil, nil, nil  -- Return nil if no adverb is found\n    end\nend\n\n-- Example usage:\nlocal sentence = \"She quickly ran to the store.\"\nlocal adverb, start_pos, end_pos = find_adverb_position(sentence)\nprint(adverb, start_pos, end_pos) -- Output: quickly 5 11\n```"}
{"name":"mbpp_441_surfacearea_cube","language":"lua","prompt":"-- Write a function to find the surface area of a cube of a given size.\nlocal function surfacearea_cube(l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_441_surfacearea_cube.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surfacearea_cube\n    lu.assertEquals(candidate(5), 150)\n    lu.assertEquals(candidate(3), 54)\n    lu.assertEquals(candidate(10), 600)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_441_surfacearea_cube","gpt_solution":"```lua\n-- Write a function to find the surface area of a cube of a given size.\nlocal function surfacearea_cube(l)\n    -- The surface area of a cube is given by 6 * (side length)^2\n    return 6 * (l ^ 2)\nend\n\n-- Example usage:\nlocal side_length = 3\nprint(\"Surface area of the cube: \" .. surfacearea_cube(side_length))\n```\n\nIn this function `surfacearea_cube`, we calculate the surface area of a cube by using the formula `6 * (side length)^2` and return the result. The example usage demonstrates how to call this function with a cube of side length 3 and prints the surface area."}
{"name":"mbpp_442_positive_count","language":"lua","prompt":"-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_442_positive_count.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_442_positive_count","gpt_solution":"```lua\n-- Write a function to find the ratio of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    -- Number of positive integers\n    local positive_numbers = 0\n    \n    -- Total number of integers\n    local total_numbers = #nums\n    \n    -- Iterate through the table\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            positive_numbers = positive_numbers + 1\n        end\n    end\n    \n    -- Calculate the ratio of positive numbers\n    local ratio\n    if total_numbers > 0 then\n        ratio = positive_numbers \/ total_numbers\n    else\n        ratio = 0\n    end\n    \n    return ratio\nend\n```"}
{"name":"mbpp_443_largest_neg","language":"lua","prompt":"-- Write a luathon function to find the largest negative number from the given table.\nlocal function largest_neg(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_443_largest_neg.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_neg\n    lu.assertEquals(candidate({1, 2, 3, -4, -6}), -6)\n    lu.assertEquals(candidate({1, 2, 3, -8, -9}), -9)\n    lu.assertEquals(candidate({1, 2, 3, 4, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_443_largest_neg","gpt_solution":"```lua\n-- Write a luathon function to find the largest negative number from the given table.\nlocal function largest_neg(list1)\n    local largest = nil\n    for _, number in ipairs(list1) do\n        if number < 0 then\n            if largest == nil or number > largest then\n                largest = number\n            end\n        end\n    end\n    return largest\nend\n```"}
{"name":"mbpp_444_trim_tuple","language":"lua","prompt":"-- Write a function to trim each table by k in the given tables.\nlocal function trim_tuple(test_list, K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_444_trim_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = trim_tuple\n    lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2), {{2}, {9}, {2}, {2}})\n    lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1), {{3, 2, 1}, {4, 9, 2}, {1, 2, 3}, {8, 2, 1}})\n    lu.assertEquals(candidate({{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1), {{8, 4}, {8, 12}, {1, 7}, {6, 9}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_444_trim_tuple","gpt_solution":"```lua\n-- Write a function to trim each table by k in the given tables.\n-- The function should take a list of lists and trim each inner list by\n-- removing the first and last 'K' elements.\n-- If the length of a table is less than or equal to 2K, the inner table \n-- should be emptied.\n\nlocal function trim_tuple(test_list, K)\n    for i, tbl in ipairs(test_list) do\n        if #tbl <= 2 * K then\n            -- if the table length is less than or equal to 2K, empty the table\n            test_list[i] = {}\n        else\n            -- otherwise, trim the table\n            test_list[i] = {table.unpack(tbl, K + 1, #tbl - K)}\n        end\n    end\nend\n\n-- Example usage\nlocal test_list = {\n    {1, 2, 3, 4, 5, 6, 7},\n    {10, 20, 30, 40, 50},\n    {100, 200, 300, 400},\n    {5, 15, 25}\n}\n\nlocal K = 2\ntrim_tuple(test_list, K)\n\nfor _, tbl in ipairs(test_list) do\n    for _, value in ipairs(tbl) do\n        io.write(value .. \" \")\n    end\n    io.write(\"\\n\")\nend\n```\n\nIn the function `trim_tuple`, we iterate over each table in `test_list`. If the length of the table is less than or equal to `2 * K`, we empty the table. Otherwise, we remove the first and last `K` elements from the table by using `table.unpack` to create a new, trimmed table. The example usage demonstrates how to call the function and output the trimmed tables."}
{"name":"mbpp_445_index_multiplication","language":"lua","prompt":"-- Write a function to perform index wise multiplication of table elements in the given two tables.\nlocal function index_multiplication(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_445_index_multiplication.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_multiplication\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{6, 21}, {12, 45}, {2, 9}, {7, 30}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{14, 32}, {20, 60}, {6, 20}, {16, 44}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{24, 45}, {30, 77}, {12, 33}, {27, 60}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_445_index_multiplication","gpt_solution":"```lua\n-- Function to perform index-wise multiplication of table elements in the given two tables.\nlocal function index_multiplication(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        if test_tup2[i] then\n            result[i] = test_tup1[i] * test_tup2[i]\n        else\n            result[i] = 0\n        end\n    end\n    return result\nend\n\n-- Example usage:\n-- local table1 = {1, 2, 3, 4}\n-- local table2 = {10, 20, 30, 40}\n-- local result = index_multiplication(table1, table2)\n-- for i, v in ipairs(result) do\n--     print(v)  -- Output: 10, 40, 90, 160\n-- end\n```\n\nThis Lua function `index_multiplication` takes two tables, `test_tup1` and `test_tup2`, and returns a new table containing the products of elements at corresponding indices. If an index in `test_tup1` has no corresponding index in `test_tup2`, it sets the result at that index to `0`."}
{"name":"mbpp_446_count_Occurrence","language":"lua","prompt":"-- Write a luathon function to count the occurence of all elements of table in a table.\nlocal function count_Occurrence(tup, lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_446_count_Occurrence.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Occurrence\n    lu.assertEquals(candidate({'a', 'a', 'c', 'b', 'd'}, {'a', 'b'}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 1, 4, 6, 7, 1, 4}, {1, 4, 7}), 6)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {1, 2}), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_446_count_Occurrence","gpt_solution":"```lua\n-- Write a luathon function to count the occurrence of all elements of table in a table.\nlocal function count_Occurrence(tup, lst)\n    -- Create a table to hold the counts\n    local counts = {}\n    \n    -- Initialize count for each element in tup to 0\n    for _, element in ipairs(tup) do\n        counts[element] = 0\n    end\n    \n    -- Traverse the list and count the occurrences of elements of tup\n    for _, element in ipairs(lst) do\n        if counts[element] ~= nil then\n            counts[element] = counts[element] + 1\n        end\n    end\n    \n    return counts\nend\n\n-- Test the function\nlocal tup = {1, 2, 3}\nlocal lst = {1, 2, 2, 3, 3, 3, 4}\n\nlocal result = count_Occurrence(tup, lst)\n\nfor k, v in pairs(result) do\n    print(k, v)\nend\n```\n\nThis code defines the `count_Occurrence` function that takes two tables `tup` and `lst` as arguments. It returns a table where the keys are the elements from `tup` and the values are the counts of how many times each element appears in `lst`. The provided test case demonstrates how the function works by printing out the counts for each element in `tup`."}
{"name":"mbpp_447_cube_nums","language":"lua","prompt":"-- Write a function to find cubes of individual elements in a table.\nlocal function cube_nums(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_447_cube_nums.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cube_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000})\n    lu.assertEquals(candidate({10, 20, 30}), {1000, 8000, 27000})\n    lu.assertEquals(candidate({12, 15}), {1728, 3375})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_447_cube_nums","gpt_solution":"```lua\n-- Write a function to find cubes of individual elements in a table.\nlocal function cube_nums(nums)\n    local cubes = {}\n    for i, num in ipairs(nums) do\n        cubes[i] = num^3\n    end\n    return cubes\nend\n\n-- Example usage:\nlocal nums = {1, 2, 3, 4, 5}\nlocal cubed_nums = cube_nums(nums)\nfor i, num in ipairs(cubed_nums) do\n    print(num)\nend\n```\n\nIn this code:\n- The `cube_nums` function iterates over each element in the input table `nums`.\n- It computes the cube of each element using the exponentiation operator `^`.\n- It stores the cubed value in a new table `cubes`.\n- The function returns the `cubes` table containing the cubed elements."}
{"name":"mbpp_448_cal_sum","language":"lua","prompt":"-- Write a function to calculate the sum of perrin numbers.\nlocal function cal_sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_448_cal_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cal_sum\n    lu.assertEquals(candidate(9), 49)\n    lu.assertEquals(candidate(10), 66)\n    lu.assertEquals(candidate(11), 88)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_448_cal_sum","gpt_solution":"```lua\n-- Write a function to calculate the sum of perrin numbers.\nlocal function cal_sum(n)\n    local perrin = {3, 0, 2}\n    local sum = perrin[1] + perrin[2] + perrin[3]\n    \n    if n <= 2 then\n        -- If n is 0, 1 or 2, return the sum of the first (n+1) elements.\n        return sum + ((n == 0) and 0 or perrin[n])\n    end\n    \n    -- Starting calculation for index 3 onwards\n    for i = 3, n do\n        -- Calculate the next Perrin number\n        perrin[i+1] = perrin[i-2] + perrin[i-3]\n        -- Add it to the sum\n        sum = sum + perrin[i+1]\n    end\n\n    return sum\nend\n\n-- Example usage:\n-- print(cal_sum(10))  -- Should print the sum of the first 11 Perrin numbers\n```"}
{"name":"mbpp_450_extract_string","language":"lua","prompt":"-- Write a function to extract specified size of strings from a given table of string values.\nlocal function extract_string(str, l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_450_extract_string.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_string\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 8), {'practice', 'solution'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 6), {'Python'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 9), {'exercises'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_450_extract_string","gpt_solution":"```lua\n-- Write a function to extract specified size of strings from a given table of string values.\n-- The function should iterate over the table, and for each string in the table,\n-- extract the substring of the specified size from the beginning.\n-- If the length of the string is less than the specified size, it should be skipped.\n-- The function should return a new table containing all the extracted substrings.\n\nlocal function extract_string_table(table_of_strings, l)\n    local extracted_strings = {}\n\n    for _, str in ipairs(table_of_strings) do\n        if #str >= l then\n            table.insert(extracted_strings, string.sub(str, 1, l))\n        end\n    end\n\n    return extracted_strings\nend\n```"}
{"name":"mbpp_451_remove_whitespaces","language":"lua","prompt":"-- Write a function to remove all whitespaces from the given string.\nlocal function remove_whitespaces(text1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_451_remove_whitespaces.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_whitespaces\n    lu.assertEquals(candidate(' Google    Flutter '), 'GoogleFlutter')\n    lu.assertEquals(candidate(' Google    Dart '), 'GoogleDart')\n    lu.assertEquals(candidate(' iOS    Swift '), 'iOSSwift')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_451_remove_whitespaces","gpt_solution":"```lua\n-- Write a function to remove all whitespaces from the given string.\nlocal function remove_whitespaces(text1)\n    -- Use gsub function to replace all whitespace characters with an empty string\n    local result = text1:gsub(\"%s+\", \"\")\n    return result\nend\n\n-- Example usage:\nlocal sample_text = \"This is a sample text.\"\nprint(remove_whitespaces(sample_text)) -- Output: \"Thisisasampletext.\"\n```"}
{"name":"mbpp_452_loss_amount","language":"lua","prompt":"-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_452_loss_amount.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_452_loss_amount","gpt_solution":"```lua\n-- Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n    if sale_amount < actual_cost then\n        return actual_cost - sale_amount\n    else\n        return 0\n    end\nend\n\n-- Example Usage\n-- local actual_cost = 100\n-- local sale_amount = 80\n-- print(loss_amount(actual_cost, sale_amount))  -- Output: 20\n-- local actual_cost = 100\n-- local sale_amount = 120\n-- print(loss_amount(actual_cost, sale_amount))  -- Output: 0\n```"}
{"name":"mbpp_453_sumofFactors","language":"lua","prompt":"-- Write a luathon function to find the sum of even factors of a number.\nlocal function sumofFactors(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_453_sumofFactors.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sumofFactors\n    lu.assertEquals(candidate(18), 26)\n    lu.assertEquals(candidate(30), 48)\n    lu.assertEquals(candidate(6), 8)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_453_sumofFactors","gpt_solution":"```lua\n-- Function to find the sum of even factors of a number.\nlocal function sumofFactors(n)\n  -- Initialize sum to 0\n  local sum = 0\n\n  -- Loop through all numbers from 1 to n\n  for i = 1, n do\n    -- Check if i is a factor of n and if it is even\n    if n % i == 0 and i % 2 == 0 then\n      -- Add i to sum\n      sum = sum + i\n    end\n  end\n\n  -- Return the sum of even factors\n  return sum\nend\n\n-- Example usage:\n-- print(sumofFactors(12))  -- Output should be 18 (2 + 4 + 6 + 12)\n```"}
{"name":"mbpp_454_text_match_wordz","language":"lua","prompt":"-- Write a function that matches a word containing 'z'.\nlocal function text_match_wordz(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_454_text_match_wordz.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_wordz\n    lu.assertEquals(candidate('pythonz.'), true)\n    lu.assertEquals(candidate('xyz.'), true)\n    lu.assertEquals(candidate('  lang  .'), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_454_text_match_wordz","gpt_solution":"```lua\n-- Write a function that matches a word containing 'z'.\nlocal function text_match_wordz(text)\n    -- Find and return words containing 'z'\n    local words_with_z = {}\n    for word in string.gmatch(text, \"%S+\") do -- %S+ matches sequences of non-whitespace characters\n        if string.match(word, \"z\") or string.match(word, \"Z\") then\n            table.insert(words_with_z, word)\n        end\n    end\n    return words_with_z\nend\n\n-- Example usage:\nlocal result = text_match_wordz(\"The zebra crossed the maze puzzle.\")\nfor _, word in ipairs(result) do\n    print(word)\nend\n```\n\nThis code defines the `text_match_wordz` function which takes a string `text` and returns a list of words containing the letter 'z' (either lowercase or uppercase). The example usage at the bottom shows how the function can be used and prints out each word containing 'z'."}
{"name":"mbpp_455_check_monthnumb_number","language":"lua","prompt":"-- Write a function to check whether the given month number contains 31 days or not.\nlocal function check_monthnumb_number(monthnum2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_455_check_monthnumb_number.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_monthnumb_number\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(6), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_455_check_monthnumb_number","gpt_solution":"```lua\n-- Write a function to check whether the given month number contains 31 days or not.\nlocal function check_monthnum_number(monthnum)\n    local months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    \n    for _, month in ipairs(months_with_31_days) do\n        if month == monthnum then\n            return true\n        end\n    end\n    \n    return false\nend\n\n-- Example usage:\n-- print(check_monthnum_number(1))  -- Output: true\n-- print(check_monthnum_number(2))  -- Output: false\n```"}
{"name":"mbpp_456_reverse_string_list","language":"lua","prompt":"-- Write a function to reverse each string in a given table of string values.\nlocal function reverse_string_list(stringlist)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_456_reverse_string_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_string_list\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue', 'White', 'Black'}), {'deR', 'neerG', 'eulB', 'etihW', 'kcalB'})\n    lu.assertEquals(candidate({'john', 'amal', 'joel', 'george'}), {'nhoj', 'lama', 'leoj', 'egroeg'})\n    lu.assertEquals(candidate({'jack', 'john', 'mary'}), {'kcaj', 'nhoj', 'yram'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_456_reverse_string_list","gpt_solution":"```lua\n-- Write a function to reverse each string in a given table of string values.\nlocal function reverse_string_list(stringlist)\n    local function reverse_string(str)\n        local reversed = \"\"\n        for i = #str, 1, -1 do\n            reversed = reversed .. str:sub(i, i)\n        end\n        return reversed\n    end\n\n    local reversed_list = {}\n    for i, str in ipairs(stringlist) do\n        reversed_list[i] = reverse_string(str)\n    end\n\n    return reversed_list\nend\n\n-- Example usage:\nlocal strings = {\"hello\", \"world\", \"lua\"}\nlocal reversed_strings = reverse_string_list(strings)\nfor i, str in ipairs(reversed_strings) do\n    print(str)\nend\n```\n\nThis function `reverse_string_list` takes a table of string values (`stringlist`), reverses each string, and returns a new table containing the reversed strings. The function internally uses another helper function `reverse_string` to reverse each string. The example usage demonstrates how to call the function and print the reversed strings."}
{"name":"mbpp_457_Find_Min","language":"lua","prompt":"-- Write a luathon function to find the subtable having minimum length.\nlocal function Find_Min(lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_457_Find_Min.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min\n    lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1})\n    lu.assertEquals(candidate({{1, 1}, {1, 1, 1}, {1, 2, 7, 8}}), {1, 1})\n    lu.assertEquals(candidate({{'x'}, {'x', 'y'}, {'x', 'y', 'z'}}), {'x'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_457_Find_Min","gpt_solution":"```lua\n--[[ \n   This function finds the subtable having the minimum length in a given list of subtables.\n   Parameters:\n   - lst: A list containing subtables.\n\n   Returns:\n   - The subtable with the minimum length.\n]]--\nlocal function Find_Min(lst)\n    local min_table = nil\n    local min_length = math.huge\n\n    for _, subtable in ipairs(lst) do\n        if type(subtable) == \"table\" then\n            local length = #subtable\n            if length < min_length then\n                min_length = length\n                min_table = subtable\n            end\n        end\n    end\n\n    return min_table\nend\n```"}
{"name":"mbpp_458_rectangle_area","language":"lua","prompt":"-- Write a function to find the area of a rectangle.\nlocal function rectangle_area(l, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_458_rectangle_area.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rectangle_area\n    lu.assertEquals(candidate(10, 20), 200)\n    lu.assertEquals(candidate(10, 5), 50)\n    lu.assertEquals(candidate(4, 2), 8)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_458_rectangle_area","gpt_solution":"```lua\n-- Write a function to find the area of a rectangle.\n-- @param l: length of the rectangle\n-- @param b: breadth of the rectangle\n-- @return: the area of the rectangle\n\nlocal function rectangle_area(l, b)\n    return l * b\nend\n\n-- Example usage\n-- local length = 5\n-- local breadth = 10\n-- print(rectangle_area(length, breadth)) -- Output: 50\n```"}
{"name":"mbpp_459_remove_uppercase","language":"lua","prompt":"-- Write a function to remove uppercase substrings from a given string.\nlocal function remove_uppercase(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_459_remove_uppercase.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_uppercase\n    lu.assertEquals(candidate('cAstyoUrFavoRitETVshoWs'), 'cstyoravoitshos')\n    lu.assertEquals(candidate('wAtchTheinTernEtrAdIo'), 'wtchheinerntrdo')\n    lu.assertEquals(candidate('VoicESeaRchAndreComMendaTionS'), 'oiceachndreomendaion')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_459_remove_uppercase","gpt_solution":"```lua\n-- Write a function to remove uppercase substrings from a given string.\nlocal function remove_uppercase(str1)\n    return str1:gsub(\"%u+\", \"\")\nend\n\n-- Example usage:\n-- print(remove_uppercase(\"Hello WORLD! This IS an EXAMPLE sentence.\")) \n-- Output: \"ello  WORLD! his  an  example sentence.\"\n```"}
{"name":"mbpp_460_Extract","language":"lua","prompt":"-- Write a luathon function to get the first element of each subtable.\nlocal function Extract(lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_460_Extract.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Extract\n    lu.assertEquals(candidate({{1, 2}, {3, 4, 5}, {6, 7, 8, 9}}), {1, 3, 6})\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5}}), {1, 4})\n    lu.assertEquals(candidate({{9, 8, 1}, {1, 2}}), {9, 1})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_460_Extract","gpt_solution":"```lua\n-- Write a luathon function to get the first element of each subtable.\nlocal function Extract(lst)\n    local result = {}\n    for _, subtable in ipairs(lst) do\n        table.insert(result, subtable[1])\n    end\n    return result\nend\n```\n\nThis `Extract` function iterates over the given list `lst`, extracts the first element from each subtable, and returns a new list containing these extracted elements."}
{"name":"mbpp_461_upper_ctr","language":"lua","prompt":"-- Write a luathon function to count the upper case characters in a given string.\nlocal function upper_ctr(str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_461_upper_ctr.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = upper_ctr\n    lu.assertEquals(candidate('PYthon'), 1)\n    lu.assertEquals(candidate('BigData'), 1)\n    lu.assertEquals(candidate('program'), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_461_upper_ctr","gpt_solution":"```lua\n-- Function to count the upper case characters in a given string\nlocal function upper_ctr(str)\n    local count = 0\n    \n    for i = 1, #str do\n        local char = str:sub(i, i)\n        if char:match(\"%u\") then\n            count = count + 1\n        end\n    end\n    \n    return count\nend\n\n-- Example usage:\nprint(upper_ctr(\"Hello World\")) -- Output: 2\nprint(upper_ctr(\"Lua Programming\")) -- Output: 2\n```"}
{"name":"mbpp_462_combinations_list","language":"lua","prompt":"-- Write a function to find all possible combinations of the elements of a given table.\nlocal function combinations_list(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_462_combinations_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_list\n    lu.assertEquals(candidate({'orange', 'red', 'green', 'blue'}), {{}, {'orange'}, {'red'}, {'red', 'orange'}, {'green'}, {'green', 'orange'}, {'green', 'red'}, {'green', 'red', 'orange'}, {'blue'}, {'blue', 'orange'}, {'blue', 'red'}, {'blue', 'red', 'orange'}, {'blue', 'green'}, {'blue', 'green', 'orange'}, {'blue', 'green', 'red'}, {'blue', 'green', 'red', 'orange'}})\n    lu.assertEquals(candidate({'red', 'green', 'blue', 'white', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'blue'}, {'blue', 'red'}, {'blue', 'green'}, {'blue', 'green', 'red'}, {'white'}, {'white', 'red'}, {'white', 'green'}, {'white', 'green', 'red'}, {'white', 'blue'}, {'white', 'blue', 'red'}, {'white', 'blue', 'green'}, {'white', 'blue', 'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'black', 'blue'}, {'black', 'blue', 'red'}, {'black', 'blue', 'green'}, {'black', 'blue', 'green', 'red'}, {'black', 'white'}, {'black', 'white', 'red'}, {'black', 'white', 'green'}, {'black', 'white', 'green', 'red'}, {'black', 'white', 'blue'}, {'black', 'white', 'blue', 'red'}, {'black', 'white', 'blue', 'green'}, {'black', 'white', 'blue', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'blue'}, {'orange', 'blue', 'red'}, {'orange', 'blue', 'green'}, {'orange', 'blue', 'green', 'red'}, {'orange', 'white'}, {'orange', 'white', 'red'}, {'orange', 'white', 'green'}, {'orange', 'white', 'green', 'red'}, {'orange', 'white', 'blue'}, {'orange', 'white', 'blue', 'red'}, {'orange', 'white', 'blue', 'green'}, {'orange', 'white', 'blue', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}, {'orange', 'black', 'blue'}, {'orange', 'black', 'blue', 'red'}, {'orange', 'black', 'blue', 'green'}, {'orange', 'black', 'blue', 'green', 'red'}, {'orange', 'black', 'white'}, {'orange', 'black', 'white', 'red'}, {'orange', 'black', 'white', 'green'}, {'orange', 'black', 'white', 'green', 'red'}, {'orange', 'black', 'white', 'blue'}, {'orange', 'black', 'white', 'blue', 'red'}, {'orange', 'black', 'white', 'blue', 'green'}, {'orange', 'black', 'white', 'blue', 'green', 'red'}})\n    lu.assertEquals(candidate({'red', 'green', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_462_combinations_list","gpt_solution":"```lua\n-- Write a function to find all possible combinations of the elements of a given table.\nlocal function combinations_list(list)\n    local function combHelper(current, index, result)\n        if index > #list then\n            table.insert(result, current)\n            return\n        end\n\n        -- Include the current element\n        local newCurrent = {table.unpack(current)}\n        table.insert(newCurrent, list[index])\n        combHelper(newCurrent, index + 1, result)\n\n        -- Exclude the current element\n        combHelper(current, index + 1, result)\n    end\n\n    local result = {}\n    combHelper({}, 1, result)\n    return result\nend\n\n-- Example usage:\nlocal myList = {1, 2, 3}\nlocal combinations = combinations_list(myList)\nfor i, combination in ipairs(combinations) do\n    print(\"Combination \" .. i .. \": \" .. table.concat(combination, \", \"))\nend\n```\n\nThis function `combinations_list` calculates all possible combinations of the elements of a given table. It uses a helper function `combHelper` to recursively create combinations by including or excluding each element at each step. The combinations are stored in the `result` table, which is returned at the end."}
{"name":"mbpp_463_max_subarray_product","language":"lua","prompt":"-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_463_max_subarray_product.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_463_max_subarray_product","gpt_solution":"```lua\n-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    if #arr == 0 then\n        return 0\n    end\n\n    local max_product = arr[1]\n    local min_product = arr[1]\n    local result = arr[1]\n\n    for i = 2, #arr do\n        local num = arr[i]\n\n        if num < 0 then\n            max_product, min_product = min_product, max_product\n        end\n\n        max_product = math.max(num, max_product * num)\n        min_product = math.min(num, min_product * num)\n\n        result = math.max(result, max_product)\n    end\n\n    return result\nend\n\n-- Example usage:\nlocal arr = {6, -3, -10, 0, 2}\nprint(max_subarray_product(arr))  -- Output should be 180\n```"}
{"name":"mbpp_464_check_value","language":"lua","prompt":"-- Write a function to check if all values are same in a table.\nlocal function check_value(dict, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_464_check_value.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_value\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 10), false)\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 12), true)\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 5), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_464_check_value","gpt_solution":"```lua\n-- Write a function to check if all values are same in a table.\nlocal function check_value(dict)\n  local first_value = nil\n\n  for _, value in pairs(dict) do\n    if first_value == nil then\n      first_value = value\n    elseif first_value ~= value then\n      return false\n    end\n  end\n\n  return true\nend\n\n-- Example usage:\nlocal t1 = {5, 5, 5, 5}\nlocal t2 = {5, 3, 5, 5}\n\nprint(check_value(t1)) -- Output: true\nprint(check_value(t2)) -- Output: false\n```"}
{"name":"mbpp_465_drop_empty","language":"lua","prompt":"-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_465_drop_empty.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_465_drop_empty","gpt_solution":"```lua\n-- Function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    -- Iterate over the table and check for empty values\n    for key, value in pairs(dict1) do\n        -- Check for empty string, nil, or table with no elements\n        if value == nil or value == \"\" or (type(value) == \"table\" and next(value) == nil) then\n            dict1[key] = nil\n        end\n    end\nend\n\n-- Example usage:\n-- local my_table = {a = \"hello\", b = \"\", c = nil, d = {}, e = {1, 2}, f = 0}\n-- drop_empty(my_table)\n-- for k, v in pairs(my_table) do print(k, v) end\n```\n\nThis Lua function iterates through the given table and removes any empty values, which are defined as nil, empty strings, or empty tables."}
{"name":"mbpp_468_max_product","language":"lua","prompt":"-- Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that table.\nlocal function max_product(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_468_max_product.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product\n    lu.assertEquals(candidate({3, 100, 4, 5, 150, 6}), 3000)\n    lu.assertEquals(candidate({4, 42, 55, 68, 80}), 50265600)\n    lu.assertEquals(candidate({10, 22, 9, 33, 21, 50, 41, 60}), 2460)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_468_max_product","gpt_solution":"```lua\n-- Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that table.\nlocal function max_product(arr)\n    local n = #arr\n    if n == 0 then return 0 end\n\n    -- Create a table to store maximum product till each index\n    local max_prod = {}\n    for i = 1, n do\n        max_prod[i] = arr[i]\n    end\n\n    -- Loop through the array to fill the max_prod table\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_prod[i] < max_prod[j] * arr[i] then\n                max_prod[i] = max_prod[j] * arr[i]\n            end\n        end\n    end\n\n    -- Find the maximum product in the max_prod table\n    local max_product = max_prod[1]\n    for i = 2, n do\n        if max_prod[i] > max_product then\n            max_product = max_prod[i]\n        end\n    end\n\n    return max_product\nend\n```\nThis function calculates the maximum product that can be formed by multiplying numbers of an increasing subsequence from the given table `arr`. It uses dynamic programming to store the maximum product for each index and iterates through the table to find and update these values. The final maximum product is then determined by checking through the stored maximum products."}
{"name":"mbpp_470_add_pairwise","language":"lua","prompt":"-- Write a function to find the pairwise addition of the neighboring elements of the given table.\nlocal function add_pairwise(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_470_add_pairwise.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_470_add_pairwise","gpt_solution":"```lua\n-- Write a function to find the pairwise addition of the neighboring elements of the given table.\nlocal function add_pairwise(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        result[i] = test_tup[i] + test_tup[i + 1]\n    end\n    return result\nend\n\n-- Example usage:\nlocal test_tup = {1, 2, 3, 4, 5}\nlocal result = add_pairwise(test_tup)\nfor _, v in ipairs(result) do\n    print(v)\nend\n```\n\nThis Lua function, `add_pairwise`, takes a table `test_tup` and returns a new table containing the pairwise addition of its neighboring elements. For example, if the input table is `{1, 2, 3, 4, 5}`, the output will be a table containing `{3, 5, 7, 9}`."}
{"name":"mbpp_471_find_remainder","language":"lua","prompt":"-- Write a luathon function to find the product of the table multiplication modulo n.\nlocal function find_remainder(arr, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_471_find_remainder.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_remainder\n    lu.assertEquals(candidate({100, 10, 5, 25, 35, 14}, 11), 9)\n    lu.assertEquals(candidate({1, 1, 1}, 1), 0)\n    lu.assertEquals(candidate({1, 2, 1}, 2), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_471_find_remainder","gpt_solution":"```lua\n-- Write a luathon function to find the product of the table multiplication modulo n.\nlocal function find_remainder(arr, n)\n    -- Initialize the product to 1\n    local product = 1\n    \n    -- Iterate through each element in the array\n    for _, value in ipairs(arr) do\n        -- Multiply the current product with the value and get the remainder modulo n\n        product = (product * value) % n\n    end\n    \n    -- Return the final product modulo n\n    return product\nend\n```"}
{"name":"mbpp_472_check_Consecutive","language":"lua","prompt":"-- Write a luathon function to check whether the given table contains consecutive numbers or not.\nlocal function check_Consecutive(l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_472_check_Consecutive.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_Consecutive\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 5, 6}), false)\n    lu.assertEquals(candidate({1, 2, 1}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_472_check_Consecutive","gpt_solution":"```lua\n-- Write a luathon function to check whether the given table contains consecutive numbers or not.\nlocal function check_Consecutive(l)\n    -- If the table is empty or has only one element, return true\n    if #l <= 1 then\n        return true\n    end\n  \n    -- Sort the table\n    table.sort(l)\n  \n    -- Check for consecutive elements\n    for i = 1, #l - 1 do\n        if l[i] + 1 ~= l[i + 1] then\n            return false\n        end\n    end\n  \n    return true\nend\n\n-- Example usage:\nlocal sample = {1, 2, 3, 4, 5}\nprint(check_Consecutive(sample))  -- Output: true\n\nsample = {1, 3, 4, 2}\nprint(check_Consecutive(sample))  -- Output: true\n\nsample = {1, 2, 4, 5}\nprint(check_Consecutive(sample))  -- Output: false\n```"}
{"name":"mbpp_474_replace_char","language":"lua","prompt":"-- Write a function to replace characters in a string.\nlocal function replace_char(str1, ch, newch)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_474_replace_char.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_char\n    lu.assertEquals(candidate('polygon', 'y', 'l'), 'pollgon')\n    lu.assertEquals(candidate('character', 'c', 'a'), 'aharaater')\n    lu.assertEquals(candidate('python', 'l', 'a'), 'python')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_474_replace_char","gpt_solution":"```lua\n-- Write a function to replace characters in a string.\n-- The function takes three parameters:\n-- str1: the original string.\n-- ch: the character to be replaced.\n-- newch: the new character that replaces the old one.\nlocal function replace_char(str1, ch, newch)\n    local result = \"\"\n    for i = 1, #str1 do\n        local current_char = str1:sub(i, i)\n        if current_char == ch then\n            result = result .. newch\n        else\n            result = result .. current_char\n        end\n    end\n    return result\nend\n\n-- Example usage:\n-- local updated_string = replace_char(\"hello world\", \"o\", \"a\")\n-- print(updated_string)  -- Output: \"hella warld\"\n```\n\nFeel free to use the `replace_char` function as needed. The function iterates over each character in the input string and constructs a new string with the specified replacements."}
{"name":"mbpp_475_sort_counter","language":"lua","prompt":"-- Write a function to sort a table by value.\nlocal function sort_counter(dict1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_475_sort_counter.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_475_sort_counter","gpt_solution":"```lua\n-- Function to sort a table by its values in ascending order.\nlocal function sort_counter(dict1)\n    -- Create an array from the dictionary for sorting\n    local sorted_array = {}\n    for k, v in pairs(dict1) do\n        table.insert(sorted_array, {key = k, value = v})\n    end\n\n    -- Sort the array by the 'value' field\n    table.sort(sorted_array, function(a, b) return a.value < b.value end)\n\n    -- Create a sorted dictionary to hold the values\n    local sorted_dict = {}\n    for _, elem in ipairs(sorted_array) do\n        sorted_dict[elem.key] = elem.value\n    end\n\n    return sorted_dict\nend\n\n-- Example usage\nlocal example_dict = {a = 3, b = 1, c = 2}\nlocal sorted = sort_counter(example_dict)\n\n-- Output the sorted dictionary\nfor k, v in pairs(sorted) do\n    print(k, v)\nend\n```\n\nThis code defines a function `sort_counter` which takes a table `dict1` as input and returns a new table sorted by the values of `dict1`. The resulting table maintains the original key-value associations. The example usage demonstrates how to use this function and prints out the sorted table."}
{"name":"mbpp_476_big_sum","language":"lua","prompt":"-- Write a luathon function to find the sum of the largest and smallest value in a given table.\nlocal function big_sum(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_476_big_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = big_sum\n    lu.assertEquals(candidate({1, 2, 3}), 4)\n    lu.assertEquals(candidate({-1, 2, 3, 4}), 3)\n    lu.assertEquals(candidate({2, 3, 6}), 8)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_476_big_sum","gpt_solution":"```lua\n-- Write a luathon function to find the sum of the largest and smallest value in a given table.\nlocal function big_sum(nums)\n    if #nums == 0 then\n        return 0\n    end\n    \n    local min_val = nums[1]\n    local max_val = nums[1]\n    \n    for i = 2, #nums do\n        if nums[i] < min_val then\n            min_val = nums[i]\n        end\n        if nums[i] > max_val then\n            max_val = nums[i]\n        end\n    end\n    \n    return min_val + max_val\nend\n```"}
{"name":"mbpp_477_is_lower","language":"lua","prompt":"-- Write a luathon function to convert the given string to lower case.\nlocal function is_lower(string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_477_is_lower.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_lower\n    lu.assertEquals(candidate('InValid'), 'invalid')\n    lu.assertEquals(candidate('TruE'), 'true')\n    lu.assertEquals(candidate('SenTenCE'), 'sentence')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_477_is_lower","gpt_solution":"```lua\n-- Function to convert the given string to lower case.\nlocal function to_lower(str)\n    return string.lower(str)\nend\n```\n\nHere, the `to_lower` function takes a string as input and converts it to lower case using the `string.lower` method. You can test this function by calling it with a string argument."}
{"name":"mbpp_478_remove_lowercase","language":"lua","prompt":"-- Write a function to remove lowercase substrings from a given string.\nlocal function remove_lowercase(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_478_remove_lowercase.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_lowercase\n    lu.assertEquals(candidate('PYTHon'), 'PYTH')\n    lu.assertEquals(candidate('FInD'), 'FID')\n    lu.assertEquals(candidate('STRinG'), 'STRG')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_478_remove_lowercase","gpt_solution":"Sure, here is the completed code that removes lowercase substrings from a given string in Lua:\n\n```lua\n-- Write a function to remove lowercase substrings from a given string.\nlocal function remove_lowercase(str1)\n    local pattern = \"%l+\"\n    return (str1:gsub(pattern, \"\"))\nend\n\n-- Example usage:\nlocal str = \"Hello Lua World!\"\nlocal result = remove_lowercase(str)\nprint(result)  -- Output: \"H L W!\"\n```\n\nThis code defines the `remove_lowercase` function which uses Lua's string `gsub` function to find and replace all lowercase substrings (denoted by the pattern `\"%l+\"`) with an empty string, effectively removing them from the given string."}
{"name":"mbpp_479_first_Digit","language":"lua","prompt":"-- Write a luathon function to find the first digit of a given number.\nlocal function first_Digit(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_479_first_Digit.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_Digit\n    lu.assertEquals(candidate(123), 1)\n    lu.assertEquals(candidate(456), 4)\n    lu.assertEquals(candidate(12), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_479_first_Digit","gpt_solution":"```lua\n-- Write a luathon function to find the first digit of a given number.\nlocal function first_Digit(n)\n    -- Convert the number to a string to access the first character\n    local numStr = tostring(math.abs(n))\n    -- Extract the first character and convert it back to a number\n    local firstDigit = tonumber(numStr:sub(1, 1))\n    return firstDigit\nend\n```"}
{"name":"mbpp_554_Split","language":"lua","prompt":"-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_554_Split.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_554_Split","gpt_solution":"```lua\n-- Write a luathon function which takes a table of integers and only returns the odd ones.\nlocal function Split(list)\n    local oddNumbers = {}\n    for _, value in ipairs(list) do\n        if value % 2 ~= 0 then\n            table.insert(oddNumbers, value)\n        end\n    end\n    return oddNumbers\nend\n```"}
{"name":"mbpp_555_difference","language":"lua","prompt":"-- Write a luathon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nlocal function difference(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_555_difference.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = difference\n    lu.assertEquals(candidate(3), 30)\n    lu.assertEquals(candidate(5), 210)\n    lu.assertEquals(candidate(2), 6)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_555_difference","gpt_solution":"```lua\n-- Write a luathon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nlocal function difference(n)\n    local sum_of_n = n * (n + 1) \/ 2\n    local sum_of_cubes = (n * (n + 1) \/ 2) ^ 2\n    return sum_of_cubes - sum_of_n\nend\n```\n\nExplanation:\n- `sum_of_n` calculates the sum of the first `n` natural numbers using the formula `n * (n + 1) \/ 2`.\n- `sum_of_cubes` calculates the sum of the cubes of the first `n` natural numbers using the formula `(n * (n + 1) \/ 2) ^ 2`.\n- The function returns the difference between the sum of cubes and the sum of the first `n` natural numbers."}
{"name":"mbpp_556_find_Odd_Pair","language":"lua","prompt":"-- Write a luathon function to count the number of pairs whose xor value is odd.\nlocal function find_Odd_Pair(A, N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_556_find_Odd_Pair.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Odd_Pair\n    lu.assertEquals(candidate({5, 4, 7, 2, 1}, 5), 6)\n    lu.assertEquals(candidate({7, 2, 8, 1, 0, 5, 11}, 7), 12)\n    lu.assertEquals(candidate({1, 2, 3}, 3), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_556_find_Odd_Pair","gpt_solution":"```lua\nlocal function find_Odd_Pair(A, N)\n    local odd_count, even_count = 0, 0\n    \n    for i=1, N do\n        if A[i] % 2 == 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\n    -- Number of pairs is equal to odd_count * even_count\n    return odd_count * even_count\nend\n\n-- Example usage:\nlocal arr = {1, 2, 3, 4, 5}\nlocal N = #arr\nprint(find_Odd_Pair(arr, N)) -- Output: 6 (pairs are (1, 2), (1, 4), (3, 2), (3, 4), (5, 2), (5, 4))\n```\n\nThis function `find_Odd_Pair` takes an array `A` and its size `N`, and counts how many pairs of elements have an XOR value that is odd. The algorithm relies on the property that the XOR of an even number and an odd number is always odd, hence it multiplies the counts of odd and even numbers in the array to get the total number of such pairs."}
{"name":"mbpp_557_toggle_string","language":"lua","prompt":"-- Write a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_557_toggle_string.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_557_toggle_string","gpt_solution":"```lua\n-- Write a function to toggle the case of all characters in a string.\n\nlocal function toggle_string(str)\n    local toggled_str = \"\"\n    for i = 1, #str do\n        local c = str:sub(i, i)\n        if c:match(\"%l\") then\n            toggled_str = toggled_str .. c:upper()\n        elseif c:match(\"%u\") then\n            toggled_str = toggled_str .. c:lower()\n        else\n            toggled_str = toggled_str .. c\n        end\n    end\n    return toggled_str\nend\n\n-- Example usage\n-- local result = toggle_string(\"Hello World!\") \n-- print(result)  -- hELLO wORLD!\n```"}
{"name":"mbpp_558_digit_distance_nums","language":"lua","prompt":"-- Write a luathon function to find the sum of the per-digit difference between two integers.\nlocal function digit_distance_nums(n1, n2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_558_digit_distance_nums.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digit_distance_nums\n    lu.assertEquals(candidate(1, 2), 1)\n    lu.assertEquals(candidate(23, 56), 6)\n    lu.assertEquals(candidate(123, 256), 7)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_558_digit_distance_nums","gpt_solution":"```lua\n-- Write a luathon function to find the sum of the per-digit difference between two integers.\nlocal function digit_distance_nums(n1, n2)\n    -- Convert numbers to strings to analyze individual digits\n    local str1 = tostring(n1)\n    local str2 = tostring(n2)\n    \n    -- Make sure both strings are of the same length by padding the shorter one with leading zeros\n    local len1 = #str1\n    local len2 = #str2\n    \n    if len1 < len2 then\n        str1 = str1:rep(len2 - len1) .. str1\n    elseif len2 < len1 then\n        str2 = str2:rep(len1 - len2) .. str2\n    end\n    \n    -- Calculate the sum of per-digit differences\n    local sum = 0\n    for i = 1, #str1 do\n        local digit1 = tonumber(str1:sub(i, i))\n        local digit2 = tonumber(str2:sub(i, i))\n        sum = sum + math.abs(digit1 - digit2)\n    end\n    \n    return sum\nend\n\n-- Example Usage:\n-- local result = digit_distance_nums(1234, 5678)\n-- print(result)  --> Output: 18 (|1-5| + |2-6| + |3-7| + |4-8| = 4 + 4 + 4 + 4 = 16)\n```\n\nThis code defines a function `digit_distance_nums` which computes the sum of the absolute differences of corresponding digits of two integers. It handles numbers of different lengths by padding the shorter one with leading zeros."}
{"name":"mbpp_559_max_sub_array_sum","language":"lua","prompt":"-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_559_max_sub_array_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_559_max_sub_array_sum","gpt_solution":"```lua\n-- Write a function to find the sum of the largest contiguous subtable in the given table.\nlocal function max_sub_array_sum(a, size)\n    -- Initialize variables\n    local max_so_far = -math.huge\n    local max_ending_here = 0\n\n    -- Loop through the table\n    for i = 1, size do\n        -- Calculate max ending here\n        max_ending_here = max_ending_here + a[i]\n\n        -- Update max so far\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n\n        -- If max ending here is less than 0, reset it to 0\n        if max_ending_here < 0 then\n            max_ending_here = 0\n        end\n    end\n\n    return max_so_far\nend\n\n-- Example usage\nlocal array = { -2, -3, 4, -1, -2, 1, 5, -3 }\nlocal size = #array\nprint(\"Maximum contiguous sum is\", max_sub_array_sum(array, size))\n```\n\nThis implementation uses Kadane\u2019s Algorithm to find the sum of the largest contiguous subtable in a given table. The algorithm has a time complexity of O(n), where n is the size of the table."}
{"name":"mbpp_560_union_elements","language":"lua","prompt":"-- Write a function to find the union of the elements of two given tables and output them in sorted order.\nlocal function union_elements(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_560_union_elements.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = union_elements\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 4, 5, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {3, 4, 5, 6}), {1, 2, 3, 4, 5, 6})\n    lu.assertEquals(candidate({11, 12, 13, 14}, {13, 15, 16, 17}), {11, 12, 13, 14, 15, 16, 17})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_560_union_elements","gpt_solution":"```lua\nlocal function union_elements(test_tup1, test_tup2)\n    -- Create a set to store unique elements\n    local set = {}\n    local union = {}\n\n    -- Add all elements from the first table into the set\n    for _, v in ipairs(test_tup1) do\n        set[v] = true\n    end\n\n    -- Add all elements from the second table into the set\n    for _, v in ipairs(test_tup2) do\n        set[v] = true\n    end\n\n    -- Collect all unique elements into the union table\n    for k, _ in pairs(set) do\n        table.insert(union, k)\n    end\n\n    -- Sort the union table\n    table.sort(union)\n\n    -- Return the sorted union table\n    return union\nend\n\n-- Example usage (you can remove this part when integrating into your code base):\nlocal table1 = {1, 3, 5, 7}\nlocal table2 = {2, 3, 6, 7, 8}\nlocal result = union_elements(table1, table2)\nfor _, v in ipairs(result) do\n    print(v)\nend\n```\n\nThis function `union_elements` takes two tables, finds the union of their elements, and returns a new table containing the elements in sorted order. Note that the example usage at the bottom is for illustration purposes and can be removed when integrating the function into your code base."}
{"name":"mbpp_562_Find_Max_Length","language":"lua","prompt":"-- Write a luathon function to find the length of the longest subtables.\nlocal function Find_Max_Length(lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_562_Find_Max_Length.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Max_Length\n    lu.assertEquals(candidate({{1}, {1, 4}, {5, 6, 7, 8}}), 4)\n    lu.assertEquals(candidate({{0, 1}, {2, 2}, {3, 2, 1}}), 3)\n    lu.assertEquals(candidate({{7}, {22, 23}, {13, 14, 15}, {10, 20, 30, 40, 50}}), 5)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_562_Find_Max_Length","gpt_solution":"```lua\n-- Write a Luathon function to find the length of the longest subtables.\nlocal function Find_Max_Length(lst)\n    local max_length = 0\n    \n    for _, sublist in ipairs(lst) do\n        if type(sublist) == \"table\" then\n            local length = #sublist\n            if length > max_length then\n                max_length = length\n            end\n        end\n    end\n    \n    return max_length\nend\n```\n\nThis function, `Find_Max_Length`, iterates through the input list `lst` and identifies sublists. It then determines the length of each sublist, updating `max_length` when it finds a longer sublist. Finally, it returns the length of the longest sublist found."}
{"name":"mbpp_563_extract_values","language":"lua","prompt":"-- Write a function to extract values between quotation marks from a string.\nlocal function extract_values(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_563_extract_values.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_values\n    lu.assertEquals(candidate('\"Python\", \"PHP\", \"Java\"'), {'Python', 'PHP', 'Java'})\n    lu.assertEquals(candidate('\"python\",\"program\",\"language\"'), {'python', 'program', 'language'})\n    lu.assertEquals(candidate('\"red\",\"blue\",\"green\",\"yellow\"'), {'red', 'blue', 'green', 'yellow'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_563_extract_values","gpt_solution":"```lua\n-- Write a function to extract values between quotation marks from a string.\nlocal function extract_values(text)\n    local values = {}\n    for value in string.gmatch(text, '\"(.-)\"') do\n        table.insert(values, value)\n    end\n    return values\nend\n\n-- Example usage:\n-- local result = extract_values('Here are some \"quoted\" words \"in\" a \"sentence\"')\n-- for _, v in ipairs(result) do\n--     print(v)\n-- end\n```\n\nThis Lua function `extract_values` takes a string `text` as input and extracts all the substrings that are enclosed in double quotation marks. It returns these substrings as a table (array). The example usage shows how you might call this function and print the extracted values."}
{"name":"mbpp_564_count_Pairs","language":"lua","prompt":"-- Write a luathon function which takes a table of integers and counts the number of possible unordered pairs where both elements are unequal.\nlocal function count_Pairs(arr, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_564_count_Pairs.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Pairs\n    lu.assertEquals(candidate({1, 2, 1}, 3), 2)\n    lu.assertEquals(candidate({1, 1, 1, 1}, 4), 0)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, 5), 10)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_564_count_Pairs","gpt_solution":"```lua\n-- Write a luathon function which takes a table of integers and counts the number of possible unordered pairs where both elements are unequal.\nlocal function count_Pairs(arr, n)\n    local count = 0\n    for i = 1, n - 1 do\n        for j = i + 1, n do\n            if arr[i] ~= arr[j] then\n                count = count + 1\n            end\n        end\n    end\n    return count\nend\n```\n\nYou can call this function by providing a table of integers and its length to count the number of possible unordered pairs where both elements are unequal. Here is an example usage:\n\n```lua\nlocal arr = {1, 2, 3, 4}\nlocal n = #arr\nprint(count_Pairs(arr, n))  -- Output: 6\n```"}
{"name":"mbpp_565_split","language":"lua","prompt":"-- Write a luathon function to split a string into characters.\nlocal function split(word)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_565_split.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split\n    lu.assertEquals(candidate('python'), {'p', 'y', 't', 'h', 'o', 'n'})\n    lu.assertEquals(candidate('Name'), {'N', 'a', 'm', 'e'})\n    lu.assertEquals(candidate('program'), {'p', 'r', 'o', 'g', 'r', 'a', 'm'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_565_split","gpt_solution":"```lua\n-- Write a luathon function to split a string into characters.\nlocal function split(word)\n    local characters = {}\n    for i = 1, #word do\n        characters[#characters + 1] = word:sub(i, i)\n    end\n    return characters\nend\n```\n\nThis function `split` takes a string `word` as an argument and returns a table (array) containing individual characters of the string. The `for` loop runs from 1 to the length of the string `word` and uses `string.sub()` to get each character. The characters are then stored in the `characters` table which is returned at the end."}
{"name":"mbpp_566_sum_digits","language":"lua","prompt":"-- Write a function to get the sum of the digits of a non-negative integer.\nlocal function sum_digits(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_566_sum_digits.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_digits\n    lu.assertEquals(candidate(345), 12)\n    lu.assertEquals(candidate(12), 3)\n    lu.assertEquals(candidate(97), 16)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_566_sum_digits","gpt_solution":"```lua\n-- Write a function to get the sum of the digits of a non-negative integer.\nlocal function sum_digits(n)\n    -- Check if the input is a non-negative integer\n    if n < 0 or math.floor(n) ~= n then\n        return nil, \"Input must be a non-negative integer\"\n    end\n    \n    local sum = 0\n    while n > 0 do\n        sum = sum + (n % 10)\n        n = math.floor(n \/ 10)\n    end\n    return sum\nend\n\n-- Example usage:\n-- local result = sum_digits(12345)\n-- print(result) -- Output should be 15\n```\n\nIn the above function, `sum_digits` takes a non-negative integer `n`, calculates the sum of its digits, and returns the result. If the input is not a non-negative integer, it returns `nil` and an error message."}
{"name":"mbpp_567_issort_list","language":"lua","prompt":"-- Write a function to check whether a specified table is sorted or not.\nlocal function issort_list(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_567_issort_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = issort_list\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 16, 17}), true)\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 20, 17}), false)\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 15, 14, 20}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_567_issort_list","gpt_solution":"```lua\n-- Function to check whether a specified table is sorted or not.\nlocal function issort_list(list1)\n    -- Loop through the table and check if each element is less than or equal to the next one\n    for i = 1, #list1 - 1 do\n        if list1[i] > list1[i + 1] then\n            return false -- if any element is greater than the next one, table is not sorted\n        end\n    end\n    return true -- if we pass through the whole table without finding any unsorted elements, it is sorted\nend\n\n-- Example usage\nlocal list1 = {1, 2, 3, 4, 5}\nprint(issort_list(list1)) -- should print true\n\nlocal list2 = {5, 3, 1, 4, 2}\nprint(issort_list(list2)) -- should print false\n```"}
{"name":"mbpp_568_empty_list","language":"lua","prompt":"-- Write a function to create a table of N empty dictionaries.\nlocal function empty_list(length)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_568_empty_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = empty_list\n    lu.assertEquals(candidate(5), {{}, {}, {}, {}, {}})\n    lu.assertEquals(candidate(6), {{}, {}, {}, {}, {}, {}})\n    lu.assertEquals(candidate(7), {{}, {}, {}, {}, {}, {}, {}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_568_empty_list","gpt_solution":"```lua\n-- Write a function to create a table of N empty dictionaries.\nlocal function empty_list(length)\n    local tbl = {}\n    for i = 1, length do\n        tbl[i] = {}\n    end\n    return tbl\nend\n\n-- Example usage:\n-- local result = empty_list(5)\n-- for i, v in ipairs(result) do\n--     print(i, v)\n-- end\n```"}
{"name":"mbpp_569_sort_sublists","language":"lua","prompt":"-- Write a function to sort each subtable of strings in a given table of tables.\nlocal function sort_sublists(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_569_sort_sublists.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_sublists\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}}), {{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'d', 'c'}, {'g', 'h'}, {'f', 'e'}}), {{'a', 'b'}, {'c', 'd'}, {'g', 'h'}, {'e', 'f'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_569_sort_sublists","gpt_solution":"```lua\n-- Write a function to sort each subtable of strings in a given table of tables.\nlocal function sort_sublists(list1)\n    for _, sublist in ipairs(list1) do\n        table.sort(sublist)\n    end\nend\n\n-- Example usage:\nlocal list_of_lists = {\n    {\"apple\", \"orange\", \"banana\"},\n    {\"cat\", \"dog\", \"ant\"},\n    {\"frog\", \"elephant\", \"bee\"}\n}\n\nsort_sublists(list_of_lists)\n\nfor _, sublist in ipairs(list_of_lists) do\n    for _, item in ipairs(sublist) do\n        print(item)\n    end\n    print(\"----\")\nend\n```\n\nHere, `sort_sublists` function will take a table of tables (`list1`) as input and sort each subtable of strings in place. The example usage demonstrates how the function works and also prints out the sorted sublists to verify the result."}
{"name":"mbpp_572_two_unique_nums","language":"lua","prompt":"-- Write a luathon function to remove duplicate numbers from a given number of tables.\nlocal function two_unique_nums(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_572_two_unique_nums.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = two_unique_nums\n    lu.assertEquals(candidate({1, 2, 3, 2, 3, 4, 5}), {1, 4, 5})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 5}), {1, 3, 4, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_572_two_unique_nums","gpt_solution":"```lua\n-- Function to remove duplicate numbers from a given number of tables.\nlocal function two_unique_nums(nums)\n    local unique_numbers = {}\n    local elements_counter = {}\n    \n    -- Count the occurences of each number\n    for _, num_list in ipairs(nums) do\n        for _, num in ipairs(num_list) do\n            if elements_counter[num] == nil then\n                elements_counter[num] = 1\n            else\n                elements_counter[num] = elements_counter[num] + 1\n            end\n        end\n    end\n    \n    -- Extract numbers that appear only once\n    for num, count in pairs(elements_counter) do\n        if count == 1 then\n            table.insert(unique_numbers, num)\n        end\n    end\n    \n    return unique_numbers\nend\n\n-- Example usage:\nlocal tables = {\n    {1, 2, 2, 3, 4},\n    {2, 3, 5, 6},\n    {7, 6, 9, 1}\n}\n\nlocal result = two_unique_nums(tables)\nfor _, num in ipairs(result) do\n    print(num)\nend\n```\n\nThis `two_unique_nums` function takes a list of tables, counts each number's occurrences, and then extracts and returns the numbers that appear only once across all the input tables. The example usage demonstrates how the function can be called and what the output would look like."}
{"name":"mbpp_573_unique_product","language":"lua","prompt":"-- Write a luathon function to calculate the product of the unique numbers in a given table.\nlocal function unique_product(list_data)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_573_unique_product.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_573_unique_product","gpt_solution":"```lua\n-- Write a luathon function to calculate the product of the unique numbers in a given table.\nlocal function unique_product(list_data)\n  local unique_numbers = {}\n  local product = 1\n  \n  -- Use a table to keep track of numbers we've seen\n  local seen = {}\n  \n  for _, value in ipairs(list_data) do\n    if not seen[value] then\n      seen[value] = true\n      table.insert(unique_numbers, value)\n    end\n  end\n  \n  for _, number in ipairs(unique_numbers) do\n    product = product * number\n  end\n  \n  return product\nend\n\n-- For test cases, you may use the following lines:\n-- print(unique_product({1, 2, 3, 2, 1}))  -- Output should be 6: 1*2*3\n-- print(unique_product({4, 4, 4, 4, 0}))  -- Output should be 0: 4*0\n-- print(unique_product({10, 20, 20, 30})) -- Output should be 6000: 10*20*30\n```"}
{"name":"mbpp_574_surfacearea_cylinder","language":"lua","prompt":"-- Write a function to find the surface area of a cylinder.\nlocal function surfacearea_cylinder(r, h)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_574_surfacearea_cylinder.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surfacearea_cylinder\n    lu.assertEquals(candidate(10, 5), 942.45)\n    lu.assertEquals(candidate(4, 5), 226.18800000000002)\n    lu.assertEquals(candidate(4, 10), 351.848)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_574_surfacearea_cylinder","gpt_solution":"```lua\n-- Function to find the surface area of a cylinder.\n-- The surface area (A) of a cylinder is given by the formula:\n-- A = 2\u03c0rh + 2\u03c0r^2\n-- where r is the radius and h is the height of the cylinder.\n\nlocal function surfacearea_cylinder(r, h)\n    local pi = math.pi\n    local lateral_surface_area = 2 * pi * r * h\n    local top_and_bottom_surface_area = 2 * pi * r^2\n    local total_surface_area = lateral_surface_area + top_and_bottom_surface_area\n    return total_surface_area\nend\n\n-- Example usage\n-- local r = 5\n-- local h = 10\n-- print(surfacearea_cylinder(r, h))\n```\n\nThis function calculates the surface area of a cylinder given the radius `r` and height `h` using the formula `A = 2\u03c0rh + 2\u03c0r^2` and returns the result. Example usage has been commented out for clarity."}
{"name":"mbpp_576_is_Sub_Array","language":"lua","prompt":"-- Write a luathon function to check whether a table is subtable of another or not.\nlocal function is_Sub_Array(A, B)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_576_is_Sub_Array.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Sub_Array\n    lu.assertEquals(candidate({1, 4, 3, 5}, {1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 1}, {1, 2, 1}), true)\n    lu.assertEquals(candidate({1, 0, 2, 2}, {2, 2, 0}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_576_is_Sub_Array","gpt_solution":"```lua\n-- Function to check whether table A is a subtable of table B\nlocal function is_Sub_Array(A, B)\n    -- Helper function to check if all values of A exist in B in the same order\n    local function table_contains_sequence(main_table, sub_table)\n        local sub_len = #sub_table\n        for i = 1, #main_table - sub_len + 1 do\n            local found = true\n            for j = 1, sub_len do\n                if main_table[i + j - 1] ~= sub_table[j] then\n                    found = false\n                    break\n                end\n            end\n            if found then\n                return true\n            end\n        end\n        return false\n    end\n    \n    -- Check if A is present in B\n    return table_contains_sequence(B, A)\nend\n\n-- Example usage:\nlocal A = {2, 3}\nlocal B = {1, 2, 3, 4}\nprint(is_Sub_Array(A, B))  -- Output: true\n\nlocal C = {2, 4}\nprint(is_Sub_Array(C, B))  -- Output: false\n```"}
{"name":"mbpp_577_last_Digit_Factorial","language":"lua","prompt":"-- Write a luathon function to find the last digit in factorial of a given number.\nlocal function last_Digit_Factorial(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_577_last_Digit_Factorial.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last_Digit_Factorial\n    lu.assertEquals(candidate(4), 4)\n    lu.assertEquals(candidate(21), 0)\n    lu.assertEquals(candidate(30), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_577_last_Digit_Factorial","gpt_solution":"```lua\n-- Write a luathon function to find the last digit in factorial of a given number.\n\nlocal function last_Digit_Factorial(n)\n    -- Handle base cases\n    if n == 0 or n == 1 then\n        return 1\n    end\n\n    local factorial = 1\n    for i = 2, n do\n        factorial = factorial * i\n        \n        -- Keep only the last digit\n        factorial = factorial % 10\n        \n        -- If the last digit is 0, it will remain 0 for higher numbers\n        if factorial == 0 then\n            return 0\n        end\n    end\n    \n    return factorial\nend\n\n-- Example usages:\nprint(last_Digit_Factorial(5))  -- Output: 0\nprint(last_Digit_Factorial(4))  -- Output: 4\n```"}
{"name":"mbpp_578_interleave_lists","language":"lua","prompt":"-- Write a function to interleave 3 tables of the same length into a single flat table.\nlocal function interleave_lists(list1, list2, list3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_578_interleave_lists.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_578_interleave_lists","gpt_solution":"```lua\n-- Write a function to interleave 3 tables of the same length into a single flat table.\nlocal function interleave_lists(list1, list2, list3)\n    local interleaved_list = {}\n    local length = #list1  -- assuming all lists are of the same length\n\n    for i = 1, length do\n        table.insert(interleaved_list, list1[i])\n        table.insert(interleaved_list, list2[i])\n        table.insert(interleaved_list, list3[i])\n    end\n\n    return interleaved_list\nend\n\n-- Example usage:\n-- local list1 = {1, 4, 7}\n-- local list2 = {2, 5, 8}\n-- local list3 = {3, 6, 9}\n-- local result = interleave_lists(list1, list2, list3)\n-- for _, v in ipairs(result) do\n--     print(v)\n-- end\n-- This would print: 1, 2, 3, 4, 5, 6, 7, 8, 9\n```\n\nThis function, `interleave_lists`, takes three tables (`list1`, `list2`, and `list3`) of the same length and interleaves their elements into a new flat table, which it returns. The example usage shows how the function can be utilized and what the expected output would be when interleaving the provided lists."}
{"name":"mbpp_579_find_dissimilar","language":"lua","prompt":"-- Write a function to find the dissimilar elements in the given two tables.\nlocal function find_dissimilar(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_579_find_dissimilar.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_dissimilar\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {7, 2, 3, 9}), {1, 4, 7, 9})\n    lu.assertEquals(candidate({21, 11, 25, 26}, {26, 34, 21, 36}), {34, 36, 11, 25})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_579_find_dissimilar","gpt_solution":"```lua\n-- Function to find the dissimilar elements in the given two tables.\nlocal function find_dissimilar(test_tup1, test_tup2)\n    local dissimilar_elements = {}\n\n    -- Create a set for test_tup1 for quick lookup\n    local set1 = {}\n    for _, v in ipairs(test_tup1) do\n        set1[v] = true\n    end\n\n    -- Find elements in test_tup2 that are not in test_tup1\n    for _, v in ipairs(test_tup2) do\n        if not set1[v] then\n            table.insert(dissimilar_elements, v)\n        end\n    end\n\n    -- Create a set for test_tup2 for quick lookup\n    local set2 = {}\n    for _, v in ipairs(test_tup2) do\n        set2[v] = true\n    end\n\n    -- Find elements in test_tup1 that are not in test_tup2\n    for _, v in ipairs(test_tup1) do\n        if not set2[v] then\n            table.insert(dissimilar_elements, v)\n        end\n    end\n\n    return dissimilar_elements\nend\n\n-- Example usage:\nlocal test_tup1 = {1, 2, 3, 4}\nlocal test_tup2 = {3, 4, 5, 6}\nlocal result = find_dissimilar(test_tup1, test_tup2)\nfor _, v in ipairs(result) do\n    print(v)\nend\n```\n\nThis function, `find_dissimilar`, takes two tables and returns a table containing elements that are only present in one of the two tables but not both. The example usage provided demonstrates how the function can be used, and it prints the dissimilar elements between `test_tup1` and `test_tup2`."}
{"name":"mbpp_580_extract_even","language":"lua","prompt":"-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_580_extract_even.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_580_extract_even","gpt_solution":"```lua\n-- Write a function to remove uneven elements in the nested mixed table.\nlocal function extract_even(test_tuple)\n    local result = {}\n    \n    local function is_even(x)\n        if type(x) == \"number\" then\n            return x % 2 == 0\n        end\n        return false\n    end\n    \n    local function traverse(tbl)\n        for _, value in ipairs(tbl) do\n            if type(value) == \"table\" then\n                traverse(value)\n            elseif is_even(value) then\n                table.insert(result, value)\n            end\n        end\n    end\n    \n    traverse(test_tuple)\n    return result\nend\n```\n\nThis Lua function `extract_even` takes a nested mixed table as input and returns a flat table containing only the even numbers from it. The function uses a recursive helper `traverse` to navigate through all levels of nested tables. The `is_even` helper function checks if a number is even."}
{"name":"mbpp_581_surface_Area","language":"lua","prompt":"-- Write a luathon function to find the surface area of a square luaramid with a given base edge and height.\nlocal function surface_Area(b, s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_581_surface_Area.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surface_Area\n    lu.assertEquals(candidate(3, 4), 33)\n    lu.assertEquals(candidate(4, 5), 56)\n    lu.assertEquals(candidate(1, 2), 5)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_581_surface_Area","gpt_solution":"```lua\n-- Write a luathon function to find the surface area of a square luaramid with a given base edge and height.\nlocal function surface_Area(b, s)\n    -- Calculate the slant height of the pyramid\n    local slant_height = math.sqrt(s^2 + (b\/2)^2)\n    \n    -- Surface area of the base square\n    local base_area = b * b\n    \n    -- Area of one triangular face\n    local triangle_area = (b * slant_height) \/ 2\n    \n    -- Total surface area = base area + 4 times the area of one triangular face\n    local total_surface_area = base_area + (4 * triangle_area)\n    \n    return total_surface_area\nend\n\n-- Example usage:\nlocal base_edge = 5\nlocal height = 10\nprint(\"Surface Area of the square pyramid:\", surface_Area(base_edge, height))\n```"}
{"name":"mbpp_583_catalan_number","language":"lua","prompt":"-- Write a function which returns nth catalan number.\nlocal function catalan_number(num)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_583_catalan_number.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_583_catalan_number","gpt_solution":"```lua\nlocal function catalan_number(num)\n  if num <= 1 then\n    return 1\n  end\n\n  local result = 0\n  for i = 0, num - 1 do\n    result = result + catalan_number(i) * catalan_number(num - 1 - i)\n  end\n\n  return result\nend\n```\n\nThis Lua function calculates the n-th Catalan number using a recursive approach. Note that this method can be inefficient for large values of `num` due to the repeated calculations, and a memoization approach is recommended for optimizing it if necessary."}
{"name":"mbpp_584_find_adverbs","language":"lua","prompt":"-- Write a function to find the first adverb ending with ly and its positions in a given string.\nlocal function find_adverbs(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_584_find_adverbs.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_adverbs\n    lu.assertEquals(candidate('Clearly, he has no excuse for such behavior.'), '0-7: Clearly')\n    lu.assertEquals(candidate('Please handle the situation carefuly'), '28-36: carefuly')\n    lu.assertEquals(candidate('Complete the task quickly'), '18-25: quickly')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_584_find_adverbs","gpt_solution":"```lua\n-- Write a function to find the first adverb ending with ly and its positions in a given string.\nlocal function find_adverbs(text)\n    -- Pattern to find words ending with 'ly'\n    local pattern = \"%f[%w]%w+ly%f[%W]\"\n    \n    -- Find the first adverb ending with \"ly\"\n    local s, e = text:find(pattern)\n    \n    if s and e then\n        -- Return the adverb and its positions\n        local adverb = text:sub(s, e)\n        return adverb, s, e\n    else\n        -- If no adverb is found, return nil\n        return nil\n    end\nend\n\n-- Example usage\nlocal text = \"She quickly ran to the store and suddenly stopped.\"\nlocal adverb, start_pos, end_pos = find_adverbs(text)\n\nif adverb then\n    print(\"First adverb ending with 'ly': \" .. adverb)\n    print(\"Position: \" .. start_pos .. \" to \" .. end_pos)\nelse\n    print(\"No adverb ending with 'ly' found in the text.\")\nend\n```\n\nThis Lua function `find_adverbs` finds the first adverb ending with \"ly\" in a given string and returns the adverb along with its starting and ending positions."}
{"name":"mbpp_585_expensive_items","language":"lua","prompt":"-- Write a function to find the n most expensive items in a given dataset.\nlocal function expensive_items(items, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_585_expensive_items.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = expensive_items\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}}, 2), {{['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-1', ['price'] = 101.1}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}, {['name'] = 'Item-4', ['price'] = 22.75}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_585_expensive_items","gpt_solution":"```lua\n-- Function to find the n most expensive items in a given dataset.\nlocal function expensive_items(items, n)\n    -- Sort the items based on their price in descending order.\n    table.sort(items, function(a, b)\n        return a.price > b.price\n    end)\n    \n    -- Create a table to hold the n most expensive items.\n    local result = {}\n    \n    -- Add the n most expensive items to the result table.\n    for i = 1, n do\n        if items[i] then\n            table.insert(result, items[i])\n        end\n    end\n    \n    return result\nend\n\n-- Example dataset\nlocal items = {\n    {name = \"item1\", price = 100},\n    {name = \"item2\", price = 200},\n    {name = \"item3\", price = 50},\n    {name = \"item4\", price = 300},\n    {name = \"item5\", price = 150},\n}\n\n-- Example usage\nlocal top_expensive_items = expensive_items(items, 3)\nfor _, item in ipairs(top_expensive_items) do\n    print(item.name, item.price)\nend\n```\n\nThis code defines a function `expensive_items` that takes a table of items and an integer `n`, and returns a table containing the `n` most expensive items from the given dataset. The items are sorted based on their price in descending order, and then the top `n` items are selected and inserted into the result table. The example usage demonstrates calling the function and printing the names and prices of the top `n` expensive items."}
{"name":"mbpp_586_split_Arr","language":"lua","prompt":"-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_586_split_Arr.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_586_split_Arr","gpt_solution":"```lua\nlocal function split_Arr(l, n)\n    -- Ensure the index n is within the boundaries of the table\n    if n < 1 or n > #l then\n        return l  -- Return the original table if n is out of bounds\n    end\n    \n    -- Split the table into two parts\n    local first_part = {}\n    local second_part = {}\n    \n    for i = 1, n do\n        table.insert(first_part, l[i])\n    end\n    \n    for i = n + 1, #l do\n        table.insert(second_part, l[i])\n    end\n    \n    -- Concatenate the second part with the first part\n    for _, v in ipairs(first_part) do\n        table.insert(second_part, v)\n    end\n    \n    return second_part\nend\n\n-- Example usage:\n-- local arr = {1, 2, 3, 4, 5}\n-- print(table.concat(split_Arr(arr, 3), \", \"))  -- Output: 4, 5, 1, 2, 3\n```\n\nThis function `split_Arr` splits a table at the `nth` element and adds the first part to the end. If `n` is out of bounds, it simply returns the original table. Make sure to handle cases where `n` is equal to or greater than the table length or less than 1."}
{"name":"mbpp_587_list_tuple","language":"lua","prompt":"-- Write a function to convert a table to a table.\nlocal function list_tuple(listx)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_587_list_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_tuple\n    lu.assertEquals(candidate({5, 10, 7, 4, 15, 3}), {5, 10, 7, 4, 15, 3})\n    lu.assertEquals(candidate({2, 4, 5, 6, 2, 3, 4, 4, 7}), {2, 4, 5, 6, 2, 3, 4, 4, 7})\n    lu.assertEquals(candidate({58, 44, 56}), {58, 44, 56})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_587_list_tuple","gpt_solution":"```lua\n-- Write a function to convert a table to a table of tuples.\n-- Each tuple will be a pair of index and value from the given table.\nlocal function list_tuple(listx)\n    local tuple_list = {}\n    for index, value in ipairs(listx) do\n        table.insert(tuple_list, {index, value})\n    end\n    return tuple_list\nend\n```\n\nThis `list_tuple` function takes a table `listx` and converts it into a table of tuples. Each tuple consists of an index and the corresponding value from the input table. The `ipairs` function is used to iterate over the table in order."}
{"name":"mbpp_588_big_diff","language":"lua","prompt":"-- Write a luathon function to find the difference between largest and smallest value in a given table.\nlocal function big_diff(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_588_big_diff.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = big_diff\n    lu.assertEquals(candidate({1, 2, 3, 4}), 3)\n    lu.assertEquals(candidate({4, 5, 12}), 8)\n    lu.assertEquals(candidate({9, 2, 3}), 7)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_588_big_diff","gpt_solution":"```lua\n-- Write a luathon function to find the difference between largest and smallest value in a given table.\nlocal function big_diff(nums)\n    if #nums == 0 then\n        return 0\n    end\n\n    local max_val = nums[1]\n    local min_val = nums[1]\n\n    for _, num in ipairs(nums) do\n        if num > max_val then\n            max_val = num\n        end\n        if num < min_val then\n            min_val = num\n        end\n    end\n\n    return max_val - min_val\nend\n```\n\nThis function `big_diff` takes a table `nums`, and calculates the difference between the largest and smallest values within the table. It first checks if the table is empty and returns 0 if it is. Then it initializes `max_val` and `min_val` with the first element of the table. It iterates through the table to find the largest and smallest values, and finally returns the difference between these two values."}
{"name":"mbpp_589_perfect_squares","language":"lua","prompt":"-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_589_perfect_squares.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_589_perfect_squares","gpt_solution":"```lua\n-- Function to find perfect squares between two given numbers `a` and `b`.\nlocal function perfect_squares(a, b)\n    local function is_perfect_square(n)\n        local root = math.sqrt(n)\n        return root == math.floor(root)\n    end\n\n    local result = {}\n    for num = a, b do\n        if is_perfect_square(num) then\n            table.insert(result, num)\n        end\n    end\n\n    return result\nend\n\n-- Example usage:\nlocal squares = perfect_squares(1, 100)\nfor _, square in ipairs(squares) do\n    print(square)\nend\n```\n\nThis code defines a function `perfect_squares` that takes two numbers `a` and `b` and returns a table containing all the perfect squares between `a` and `b` (inclusive). The `is_perfect_square` helper function is used to check if a number is a perfect square. The example usage at the bottom demonstrates how to call the function and print the perfect squares between 1 and 100."}
{"name":"mbpp_591_swap_List","language":"lua","prompt":"-- Write a luathon function to interchange the first and last elements in a table.\nlocal function swap_List(newList)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_591_swap_List.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_List\n    lu.assertEquals(candidate({12, 35, 9, 56, 24}), {24, 35, 9, 56, 12})\n    lu.assertEquals(candidate({1, 2, 3}), {3, 2, 1})\n    lu.assertEquals(candidate({4, 5, 6}), {6, 5, 4})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_591_swap_List","gpt_solution":"```lua\nlocal function swap_List(newList)\n    if #newList > 1 then\n        newList[1], newList[#newList] = newList[#newList], newList[1]\n    end\n    return newList\nend\n```\n\nThis function `swap_List` takes a list `newList` as an input, checks if the list has more than one element, and then swaps the first and the last elements of the list. If the list has only one element or is empty, it remains unchanged. The function returns the resulting list."}
{"name":"mbpp_592_sum_Of_product","language":"lua","prompt":"-- Write a luathon function to find the sum of the product of consecutive binomial co-efficients.\nlocal function sum_Of_product(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_592_sum_Of_product.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_Of_product\n    lu.assertEquals(candidate(3), 15)\n    lu.assertEquals(candidate(4), 56)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_592_sum_Of_product","gpt_solution":"```lua\n-- Write a Lua function to find the sum of the product of consecutive binomial coefficients.\n-- The binomial coefficient C(n, k) is defined as n! \/ (k! * (n - k)!)\n-- The function will sum the product of consecutive binomial coefficients for a given n.\n\nlocal function factorial(x)\n    if x == 0 then return 1 end\n    local result = 1\n    for i = 2, x do\n        result = result * i\n    end\n    return result\nend\n\nlocal function binomial_coefficient(n, k)\n    return factorial(n) \/ (factorial(k) * factorial(n - k))\nend\n\nlocal function sum_of_product(n)\n    local sum = 0\n    for k = 0, n - 1 do\n        local product = binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n        sum = sum + product\n    end\n    return sum\nend\n\n-- Example usage:\n-- print(sum_of_product(4))  -- Output should be the sum of the product of binomial coefficients for n=4\n```\nThis code defines a function `sum_of_product` that takes an integer `n` and returns the sum of the product of consecutive binomial coefficients for that value of `n`. The `factorial` and `binomial_coefficient` helper functions are used to calculate the necessary values."}
{"name":"mbpp_593_removezero_ip","language":"lua","prompt":"-- Write a function to remove leading zeroes from an ip address.\nlocal function removezero_ip(ip)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_593_removezero_ip.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = removezero_ip\n    lu.assertEquals(candidate('216.08.094.196'), '216.8.94.196')\n    lu.assertEquals(candidate('12.01.024'), '12.1.24')\n    lu.assertEquals(candidate('216.08.094.0196'), '216.8.94.196')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_593_removezero_ip","gpt_solution":"```lua\n-- The function removes leading zeroes from an IP address.\nlocal function removezero_ip(ip)\n    -- Split the IP address into segments.\n    local segments = {}\n    for segment in ip:gmatch(\"(%d+)\") do\n        -- Convert each segment to a number to remove leading zeroes and then back to a string.\n        table.insert(segments, tostring(tonumber(segment)))\n    end\n    -- Join the segments back together with dots.\n    return table.concat(segments, \".\")\nend\n\n-- Example usage:\nprint(removezero_ip(\"192.168.001.001\")) -- Outputs: 192.168.1.1\nprint(removezero_ip(\"010.000.002.003\")) -- Outputs: 10.0.2.3\n```"}
{"name":"mbpp_594_diff_even_odd","language":"lua","prompt":"-- Write a function to find the difference of the first even and first odd number of a given table.\nlocal function diff_even_odd(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_594_diff_even_odd.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = diff_even_odd\n    lu.assertEquals(candidate({1, 3, 5, 7, 4, 1, 6, 8}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), 1)\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), 9)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_594_diff_even_odd","gpt_solution":"```lua\n-- Write a function to find the difference of the first even and first odd number of a given table.\nlocal function diff_even_odd(list1)\n  local first_even = nil\n  local first_odd = nil\n\n  -- Iterate over the list to find the first even and first odd number\n  for _, num in ipairs(list1) do\n    if first_even == nil and num % 2 == 0 then\n      first_even = num\n    elseif first_odd == nil and num % 2 ~= 0 then\n      first_odd = num\n    end\n\n    -- If both first_even and first_odd are found, break out of the loop\n    if first_even ~= nil and first_odd ~= nil then\n      break\n    end\n  end\n\n  -- If either first_even or first_odd is not found, return nil\n  if first_even == nil or first_odd == nil then\n    return nil, \"Both even and odd numbers need to be present in the list.\"\n  end\n\n  -- Return the difference between the first even and first odd number\n  return first_even - first_odd\nend\n\n-- Example usage (uncomment to test)\n-- local list = {1, 3, 2, 7, 4, 5}\n-- print(diff_even_odd(list)) -- Output should be 2 - 1 = 1 (if first even is 2 and first odd is 1)\n```"}
{"name":"mbpp_595_min_Swaps","language":"lua","prompt":"-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_595_min_Swaps.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_595_min_Swaps","gpt_solution":"Sure! Here is the complete Lua function wrapped in markdown syntax:\n\n```lua\n-- Function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\nlocal function min_Swaps(str1, str2)\n    -- Check if both strings have same length\n    if #str1 ~= #str2 then\n        error(\"The binary strings must have the same length\")\n    end\n\n    local count = 0\n    \n    -- Create arrays to store the positions of mismatched characters\n    local str1_ones = {}\n    local str2_ones = {}\n    \n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            if str1:sub(i, i) == '1' then\n                table.insert(str1_ones, i)\n            else\n                table.insert(str2_ones, i)\n            end\n        end\n    end\n    \n    -- Check if counts of 1's and 0's mismatches are equal\n    if #str1_ones ~= #str2_ones then\n        error(\"Conversion is not possible due to unequal number of 1's and 0's\")\n    end\n    \n    -- Count number of swaps required\n    for i = 1, #str1_ones do\n        count = count + math.abs(str1_ones[i] - str2_ones[i])\n    end\n    \n    -- Since each swap fixes two mismatched positions, we divide the count by 2\n    return count \/ 2\nend\n```\n\nThis function computes the minimum number of swaps required to change one binary string to another by comparing the positions of mismatched characters and calculating the number of swaps needed to rearrange them. It assumes that strings of unequal lengths or with differing counts of `1`s and `0`s cannot be converted and will produce an error in such cases."}
{"name":"mbpp_597_find_kth","language":"lua","prompt":"-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_597_find_kth.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_597_find_kth","gpt_solution":"```lua\n-- Write a function to find kth element from the given two sorted tables.\nlocal function find_kth(arr1, arr2, k)\n    local function kth(arr1, start1, arr2, start2, k)\n        if start1 > #arr1 then\n            return arr2[start2 + k - 1]\n        end\n        if start2 > #arr2 then\n            return arr1[start1 + k - 1]\n        end\n        if k == 1 then\n            return math.min(arr1[start1], arr2[start2])\n        end\n        \n        local midVal1 = (start1 + math.floor(k \/ 2) - 1 <= #arr1) and arr1[start1 + math.floor(k \/ 2) - 1] or math.huge\n        local midVal2 = (start2 + math.floor(k \/ 2) - 1 <= #arr2) and arr2[start2 + math.floor(k \/ 2) - 1] or math.huge\n        \n        if midVal1 < midVal2 then\n            return kth(arr1, start1 + math.floor(k \/ 2), arr2, start2, k - math.floor(k \/ 2))\n        else\n            return kth(arr1, start1, arr2, start2 + math.floor(k \/ 2), k - math.floor(k \/ 2))\n        end\n    end\n    \n    return kth(arr1, 1, arr2, 1, k)\nend\n\n-- Example usage:\n-- local arr1 = {1, 3, 5, 7, 9}\n-- local arr2 = {2, 4, 6, 8, 10}\n-- print(find_kth(arr1, arr2, 5))  -- Output: 5\n```\n\nThe `find_kth` function finds the `k`th smallest element from two sorted tables (`arr1` and `arr2`). The function leverages a recursive helper function `kth` to achieve this. The function handles edge cases where either array may be exhausted and it performs comparisons to determine the next step in the search for the `k`th element."}
{"name":"mbpp_598_armstrong_number","language":"lua","prompt":"-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_598_armstrong_number.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_598_armstrong_number","gpt_solution":"```lua\n-- Function to check whether the given number is an Armstrong number or not.\nlocal function armstrong_number(number)\n    -- Convert the number to a string to easily iterate through its digits\n    local str_num = tostring(number)\n    -- Determine the number of digits in the number\n    local num_digits = #str_num\n    \n    -- Initialize sum to store the sum of digits raised to the power of num_digits\n    local sum = 0\n    \n    -- Iterate through each digit in the number\n    for i = 1, num_digits do\n        -- Convert the digit back to a number and raise it to the power of num_digits\n        local digit = tonumber(str_num:sub(i, i))\n        sum = sum + math.pow(digit, num_digits)\n    end\n    \n    -- Check if the sum of the digits raised to the appropriate power is equal to the original number\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\n\n-- Example usage\nprint(armstrong_number(153))  -- should return true\nprint(armstrong_number(123))  -- should return false\n```\n\nThis function `armstrong_number` checks whether a given number is an Armstrong number. An Armstrong number is one whose sum of digits raised to the power of the number of digits is equal to the number itself. For example, 153 is an Armstrong number because \\( 1^3 + 5^3 + 3^3 = 153 \\)."}
{"name":"mbpp_599_sum_average","language":"lua","prompt":"-- Write a function to find sum and average of first n natural numbers.\nlocal function sum_average(number)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_599_sum_average.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_average\n    lu.assertEquals(candidate(10), {55, 5.5})\n    lu.assertEquals(candidate(15), {120, 8.0})\n    lu.assertEquals(candidate(20), {210, 10.5})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_599_sum_average","gpt_solution":"```lua\n-- Write a function to find sum and average of first n natural numbers.\nlocal function sum_average(number)\n    local sum = 0\n\n    for i = 1, number do\n        sum = sum + i\n    end\n\n    local average = sum \/ number\n\n    return sum, average\nend\n\n--Example usage:\nlocal n = 10\nlocal sum, avg = sum_average(n)\nprint(\"Sum:\", sum) -- Sum: 55\nprint(\"Average:\", avg) -- Average: 5.5\n```\n\nThis code defines a function `sum_average` which takes a number `n` as input and calculates the sum and average of the first `n` natural numbers. The result is returned as two values: the sum and the average."}
{"name":"mbpp_600_is_Even","language":"lua","prompt":"-- Write a luathon function to check whether the given number is even or not.\nlocal function is_Even(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_600_is_Even.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Even\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(2), true)\n    lu.assertEquals(candidate(3), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_600_is_Even","gpt_solution":"```lua\n-- Function to check whether the given number is even or not.\nlocal function is_Even(n)\n    if n % 2 == 0 then\n        return true\n    else\n        return false\n    end\nend\n\n-- Testing the function\nprint(is_Even(4))  -- Should print true\nprint(is_Even(7))  -- Should print false\n```\n\nIn the given code, `is_Even` is a function that takes a number `n` as an argument and checks if it is even by using the modulus operator (`%`). If the remainder of the division of `n` by `2` is `0`, then the function returns `true`, indicating that `n` is even. Otherwise, it returns `false`, indicating that `n` is odd."}
{"name":"mbpp_602_first_repeated_char","language":"lua","prompt":"-- Write a luathon function to find the first repeated character in a given string.\nlocal function first_repeated_char(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_602_first_repeated_char.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_repeated_char\n    lu.assertEquals(candidate('abcabc'), 'a')\n    lu.assertEquals(candidate('abc'), None)\n    lu.assertEquals(candidate('123123'), '1')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_602_first_repeated_char","gpt_solution":"```lua\nlocal function first_repeated_char(str1)\n    local char_count = {}\n    \n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char_count[char] then\n            return char\n        else\n            char_count[char] = true\n        end\n    end\n    \n    return nil  -- Return nil if there is no repeated character\nend\n```\n\nUsage example:\n```lua\nprint(first_repeated_char(\"hello\"))  -- Output: l\nprint(first_repeated_char(\"abcdefg\"))  -- Output: nil\n```"}
{"name":"mbpp_603_get_ludic","language":"lua","prompt":"-- Write a function to get all lucid numbers smaller than or equal to a given integer.\nlocal function get_ludic(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_603_get_ludic.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_ludic\n    lu.assertEquals(candidate(10), {1, 2, 3, 5, 7})\n    lu.assertEquals(candidate(25), {1, 2, 3, 5, 7, 11, 13, 17, 23, 25})\n    lu.assertEquals(candidate(45), {1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_603_get_ludic","gpt_solution":"```lua\n-- Write a function to get all ludic numbers smaller than or equal to a given integer.\nlocal function get_ludic(n)\n    local ludics = {}\n    for i = 1, n do\n        table.insert(ludics, i)\n    end\n    \n    local i = 2\n    while i <= #ludics do\n        local step = ludics[i]\n        for j = #ludics, i + step, -1 do\n            if (j - i) % step == 0 then\n                table.remove(ludics, j)\n            end\n        end\n        i = i + 1\n    end\n    \n    return ludics\nend\n\n-- Test the function\nlocal n = 30\nlocal ludics = get_ludic(n)\nfor _, v in ipairs(ludics) do\n    print(v)\nend\n```\n\nThis Lua script defines the `get_ludic` function to find all ludic numbers smaller than or equal to a given integer `n`. The script is followed by a test case to demonstrate its usage."}
{"name":"mbpp_604_reverse_words","language":"lua","prompt":"-- Write a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_604_reverse_words.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_604_reverse_words","gpt_solution":"```lua\n-- Write a function to reverse words separated by spaces in a given string.\nlocal function reverse_words(s)\n    local words = {}\n    \n    -- Use gmatch to iterate over each word in the string\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, 1, word)  -- Insert word at the beginning of the table\n    end\n    \n    -- Concatenate the reversed words with spaces\n    return table.concat(words, \" \")\nend\n\n-- Example usage\nprint(reverse_words(\"hello world\"))  -- Output: \"world hello\"\nprint(reverse_words(\"Lua is great\")) -- Output: \"great is Lua\"\n```"}
{"name":"mbpp_605_prime_num","language":"lua","prompt":"-- Write a function to check if the given integer is a prime number.\nlocal function prime_num(num)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_605_prime_num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_num\n    lu.assertEquals(candidate(13), true)\n    lu.assertEquals(candidate(7), true)\n    lu.assertEquals(candidate(-1010), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_605_prime_num","gpt_solution":"```lua\nlocal function prime_num(num)\n    -- Check if num is less than 2, then it is not a prime number\n    if num < 2 then\n        return false\n    end\n    \n    -- Check from 2 to the square root of num\n    for i = 2, math.sqrt(num) do\n        -- If num is divisible by any number in this range, it is not a prime number\n        if num % i == 0 then\n            return false\n        end\n    end\n    \n    -- If no divisors are found, num is a prime number\n    return true\nend\n```\n\nThis Lua function `prime_num` checks if the given integer `num` is a prime number. The function first excludes all numbers less than 2, then checks for divisibility from 2 up to the square root of `num`. If any divisor is found, it returns `false`, otherwise it returns `true`, indicating that `num` is a prime number."}
{"name":"mbpp_606_radian_degree","language":"lua","prompt":"-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_606_radian_degree.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_606_radian_degree","gpt_solution":"```lua\n-- Write a function to convert degrees to radians.\nlocal function radian_degree(degree)\n    -- The mathematical constant Pi\n    local pi = math.pi\n    -- Convert the degree to radian\n    local radian = degree * (pi \/ 180)\n    return radian\nend\n\n-- Example usage\nlocal degree = 90\nlocal radian = radian_degree(degree)\nprint(degree .. \" degrees is equal to \" .. radian .. \" radians.\")\n```"}
{"name":"mbpp_607_find_literals","language":"lua","prompt":"-- Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nlocal function find_literals(text, pattern)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_607_find_literals.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_literals\n    lu.assertEquals(candidate('The quick brown fox jumps over the lazy dog.', 'fox'), {'fox', 16, 19})\n    lu.assertEquals(candidate('Its been a very crazy procedure right', 'crazy'), {'crazy', 16, 21})\n    lu.assertEquals(candidate('Hardest choices required strongest will', 'will'), {'will', 35, 39})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_607_find_literals","gpt_solution":"```lua\nlocal function find_literals(text, pattern)\n    local start_index, end_index = string.find(text, pattern)\n    if start_index and end_index then\n        local substring = string.sub(text, start_index, end_index)\n        return substring, start_index, end_index\n    else\n        return nil, nil, nil\n    end\nend\n```"}
{"name":"mbpp_608_bell_Number","language":"lua","prompt":"-- Write a luathon function to find nth bell number.\nlocal function bell_Number(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_608_bell_Number.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bell_Number\n    lu.assertEquals(candidate(2), 2)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 15)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_608_bell_Number","gpt_solution":"Certainly! Below is the complete Lua function to compute the nth Bell number, wrapped in markdown syntax:\n\n```lua\n-- Write a luathon function to find nth bell number.\nlocal function bell_Number(n)\n    -- Initialize Bell triangle with the first Bell number\n    local bell = { {1} }\n    \n    -- Generate Bell numbers up to the nth number\n    for i = 1, n do\n        bell[i] = {}\n        bell[i][1] = bell[i-1][i-1]\n        for j = 2, i + 1 do\n            bell[i][j] = bell[i][j-1] + bell[i-1][j-2]\n        end\n    end\n    \n    -- Return the nth Bell number\n    return bell[n][1]\nend\n\n-- Example usage:\n-- local n = 5\n-- print(\"The \" .. n .. \"th Bell number is: \" .. bell_Number(n))\n```\n\nThis function uses a Bell triangle to compute the nth Bell number, which is a classic approach for this problem. The Bell triangle is built up iteratively, and the nth Bell number is found at the first position of the nth row of the triangle."}
{"name":"mbpp_610_remove_kth_element","language":"lua","prompt":"-- Write a luathon function which takes a table and returns a table with the same elements, but the k'th element removed.\nlocal function remove_kth_element(list1, L)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_610_remove_kth_element.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_kth_element\n    lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {1, 1, 3, 4, 4, 5, 1})\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), {0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), {10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_610_remove_kth_element","gpt_solution":"```lua\nlocal function remove_kth_element(list1, k)\n    -- Create a new table to store the result\n    local result = {}\n    \n    -- Iterate through the input table\n    for i, v in ipairs(list1) do\n        -- Skip the k'th element\n        if i ~= k then\n            table.insert(result, v)\n        end\n    end\n    \n    -- Return the resulting table\n    return result\nend\n```"}
{"name":"mbpp_611_max_of_nth","language":"lua","prompt":"-- Write a function which given a matrix represented as a table of tables returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_611_max_of_nth.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_611_max_of_nth","gpt_solution":"```lua\n-- Write a function which given a matrix represented as a table of tables returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n    local max_val = nil\n    for i, row in ipairs(test_list) do\n        -- Check if the row has enough columns\n        if row[N] then\n            if max_val == nil or row[N] > max_val then\n                max_val = row[N]\n            end\n        end\n    end\n    return max_val\nend\n```\n\nThis function iterates through each row of the provided matrix (`test_list`). For each row, it checks if the N-th column exists and then compares the value in that column to find the maximum value. The result is the maximum value found in the N-th column of the matrix."}
{"name":"mbpp_612_merge","language":"lua","prompt":"-- Write a luathon function which takes a table of tables, where each subtable has two elements, and returns a table of two tables where the first table has the first element of each subtable and the second one has the second.\nlocal function merge(lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_612_merge.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge\n    lu.assertEquals(candidate({{'x', 'y'}, {'a', 'b'}, {'m', 'n'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}})\n    lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}, {7, 8}}), {{1, 3, 5, 7}, {2, 4, 6, 8}})\n    lu.assertEquals(candidate({{'x', 'y', 'z'}, {'a', 'b', 'c'}, {'m', 'n', 'o'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}, {'z', 'c', 'o'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_612_merge","gpt_solution":"```lua\nlocal function merge(lst)\n    local first_elements = {}\n    local second_elements = {}\n\n    for _, subtable in ipairs(lst) do\n        table.insert(first_elements, subtable[1])\n        table.insert(second_elements, subtable[2])\n    end\n\n    return {first_elements, second_elements}\nend\n```\n\nThis `merge` function takes a table of tables (`lst`), where each subtable has two elements. It then returns a table containing two tables. The first of these tables contains all the first elements from each subtable, and the second one contains all the second elements."}
{"name":"mbpp_614_cummulative_sum","language":"lua","prompt":"-- Write a function to find the cumulative sum of all the values that are present in the given table of tables.\nlocal function cummulative_sum(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_614_cummulative_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cummulative_sum\n    lu.assertEquals(candidate({{1, 3}, {5, 6, 7}, {2, 6}}), 30)\n    lu.assertEquals(candidate({{2, 4}, {6, 7, 8}, {3, 7}}), 37)\n    lu.assertEquals(candidate({{3, 5}, {7, 8, 9}, {4, 8}}), 44)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_614_cummulative_sum","gpt_solution":"```lua\n-- Write a function to find the cumulative sum of all the values that are present in the given table of tables.\nlocal function cummulative_sum(test_list)\n    local sum = 0\n    for _, inner_table in ipairs(test_list) do\n        for _, value in ipairs(inner_table) do\n            sum = sum + value\n        end\n    end\n    return sum\nend\n\n-- Example usage:\nlocal test_list = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}\nprint(cummulative_sum(test_list))  -- Output: 45\n```"}
{"name":"mbpp_615_average_tuple","language":"lua","prompt":"-- Write a function which takes a tables of tables and returns the average value for each subtable as a table.\nlocal function average_tuple(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_615_average_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = average_tuple\n    lu.assertEquals(candidate({{10, 10, 10, 12}, {30, 45, 56, 45}, {81, 80, 39, 32}, {1, 2, 3, 4}}), {30.5, 34.25, 27.0, 23.25})\n    lu.assertEquals(candidate({{1, 1, -5}, {30, -15, 56}, {81, -60, -39}, {-10, 2, 3}}), {25.5, -18.0, 3.75})\n    lu.assertEquals(candidate({{100, 100, 100, 120}, {300, 450, 560, 450}, {810, 800, 390, 320}, {10, 20, 30, 40}}), {305.0, 342.5, 270.0, 232.5})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_615_average_tuple","gpt_solution":"```lua\n-- Write a function which takes a table of tables and returns the average value for each subtable as a table.\nlocal function average_tuple(tables)\n    local averages = {}\n\n    for i, subtable in ipairs(tables) do\n        local sum = 0\n        local count = 0\n\n        for _, value in ipairs(subtable) do\n            sum = sum + value\n            count = count + 1\n        end\n\n        averages[i] = sum \/ count\n    end\n\n    return averages\nend\n```\n\nHere\u2019s a simple usage example:\n```lua\nlocal tuples = {\n    {1, 2, 3},\n    {4, 5, 6},\n    {7, 8, 9}\n}\n\nlocal averages = average_tuple(tuples)\nfor i, avg in ipairs(averages) do\n    print(\"Average of tuple\", i, \"is\", avg)\nend\n```\n\nThis will produce output:\n```\nAverage of tuple 1 is 2.0\nAverage of tuple 2 is 5.0\nAverage of tuple 3 is 8.0\n```"}
{"name":"mbpp_616_tuple_modulo","language":"lua","prompt":"-- Write a function which takes two tables of the same length and performs the element wise modulo.\nlocal function tuple_modulo(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_616_tuple_modulo.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_modulo\n    lu.assertEquals(candidate({10, 4, 5, 6}, {5, 6, 7, 5}), {0, 4, 5, 1})\n    lu.assertEquals(candidate({11, 5, 6, 7}, {6, 7, 8, 6}), {5, 5, 6, 1})\n    lu.assertEquals(candidate({12, 6, 7, 8}, {7, 8, 9, 7}), {5, 6, 7, 1})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_616_tuple_modulo","gpt_solution":"```lua\n-- Write a function which takes two tables of the same length and performs the element wise modulo.\nlocal function tuple_modulo(test_tup1, test_tup2)\n    -- Check if the lengths of both tables are the same\n    if #test_tup1 ~= #test_tup2 then\n        error(\"Tables must be of the same length\")\n    end\n\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] % test_tup2[i]\n    end\n\n    return result\nend\n\n-- Example usage\nlocal t1 = {10, 20, 30}\nlocal t2 = {3, 7, 5}\nlocal result = tuple_modulo(t1, t2)\n\nfor i, v in ipairs(result) do\n    print(v) -- Output should be 1, 6, 0\nend\n```\n\nThis Lua function `tuple_modulo` takes two tables `test_tup1` and `test_tup2` and returns a new table where each element is the result of the element-wise modulo operation between `test_tup1` and `test_tup2`. An example usage is provided for testing the function."}
{"name":"mbpp_617_min_Jumps","language":"lua","prompt":"-- Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nlocal function min_Jumps(steps, d)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_617_min_Jumps.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Jumps\n    lu.assertEquals(candidate({3, 4}, 11), 3.5)\n    lu.assertEquals(candidate({3, 4}, 0), 0)\n    lu.assertEquals(candidate({11, 14}, 11), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_617_min_Jumps","gpt_solution":"```lua\n-- Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nlocal function min_Jumps(steps, d)\n    if steps <= 0 then\n        error(\"Steps must be a positive value\")\n    end\n    \n    local jumps = math.ceil(d \/ steps)\n    local distance_covered = jumps * steps\n\n    -- If the jump overshoots the destination, adjust the number of jumps\n    if distance_covered > d then\n        if (distance_covered % 2 == d % 2) then\n            return jumps\n        else\n            return jumps + 1\n        end\n    else\n        return jumps\n    end\nend\n\n-- Example usage:\nprint(min_Jumps(3, 10))  -- Should return 4\nprint(min_Jumps(2, 5))   -- Should return 3\nprint(min_Jumps(5, 15))  -- Should return 3\nprint(min_Jumps(4, 21))  -- Should return 6\n```"}
{"name":"mbpp_618_div_list","language":"lua","prompt":"-- Write a function to divide two tables element wise.\nlocal function div_list(nums1, nums2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_618_div_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_618_div_list","gpt_solution":"```lua\n-- Write a function to divide two tables element-wise.\nlocal function div_list(nums1, nums2)\n    -- Check if the two tables have the same length\n    if #nums1 ~= #nums2 then\n        error(\"Both tables must have the same length\")\n    end\n\n    local result = {}\n    for i = 1, #nums1 do\n        -- Check if the denominator is zero\n        if nums2[i] == 0 then\n            error(\"Division by zero at index \"..i)\n        end\n        result[i] = nums1[i] \/ nums2[i]\n    end\n\n    return result\nend\n\n-- Example usage:\nlocal nums1 = {10, 20, 30}\nlocal nums2 = {2, 4, 5}\nlocal result = div_list(nums1, nums2)\nfor i, v in ipairs(result) do\n    print(v)\nend\n-- Output will be:\n-- 5\n-- 5\n-- 6\n```"}
{"name":"mbpp_619_move_num","language":"lua","prompt":"-- Write a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_619_move_num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_619_move_num","gpt_solution":"```lua\n-- Write a function to move all the numbers to the end of the given string.\n\nlocal function move_num(test_str)\n    local chars = {}\n    local nums = {}\n\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%d\") then\n            table.insert(nums, char)\n        else\n            table.insert(chars, char)\n        end\n    end\n\n    return table.concat(chars) .. table.concat(nums)\nend\n\n-- Example Usage:\n-- local result = move_num(\"abc123def456\")\n-- print(result)  -- Output: \"abcdef123456\"\n```"}
{"name":"mbpp_622_get_median","language":"lua","prompt":"-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_622_get_median.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_622_get_median","gpt_solution":"```lua\n-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    -- Helper function to find the median of a single sorted table\n    local function median_single(arr, n)\n        if n % 2 == 0 then\n            return (arr[n \/\/ 2] + arr[n \/\/ 2 + 1]) \/ 2\n        else\n            return arr[n \/\/ 2 + 1]\n        end\n    end\n\n    -- Base cases\n    if n <= 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) \/ 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) \/ 2\n    end\n\n    -- Find medians of the two tables\n    local m1 = median_single(arr1, n)\n    local m2 = median_single(arr2, n)\n\n    -- If medians are equal, return either median\n    if m1 == m2 then\n        return m1\n    end\n\n    -- If m1 < m2, then median must exist in arr1[m1+1....n] and arr2[1....m2]\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median({table.unpack(arr1, n \/\/ 2 + 1)}, {table.unpack(arr2, 1, n \/\/ 2 + 1)}, n - n \/\/ 2)\n        end\n        return get_median({table.unpack(arr1, n \/\/ 2 + 1)}, {table.unpack(arr2, 1, n \/\/ 2 + 1)}, n - n \/\/ 2 - 1)\n    end\n\n    -- If m1 > m2, then median must exist in arr1[1....m1] and arr2[m2+1....n]\n    if n % 2 == 0 then\n        return get_median({table.unpack(arr1, 1, n \/\/ 2 + 1)}, {table.unpack(arr2, n \/\/ 2 + 1)}, n - n \/\/ 2)\n    end\n    return get_median({table.unpack(arr1, 1, n \/\/ 2 + 1)}, {table.unpack(arr2, n \/\/ 2 + 1)}, n - n \/\/ 2 - 1)\nend\n```\n\nIn this implementation:\n- We define a helper function `median_single` to find the median of a single sorted table.\n- We handle special base cases where `n` (the size of the tables) is very small (0, 1, or 2).\n- We then compare the medians of the two given tables and recursively narrow down the range to find the median of combined data.\n"}
{"name":"mbpp_623_nth_nums","language":"lua","prompt":"-- Write a function to compute the n-th power of each number in a table.\nlocal function nth_nums(nums, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_623_nth_nums.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = nth_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {1, 4, 9, 16, 25, 36, 49, 64, 81, 100})\n    lu.assertEquals(candidate({10, 20, 30}, 3), {1000, 8000, 27000})\n    lu.assertEquals(candidate({12, 15}, 5), {248832, 759375})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_623_nth_nums","gpt_solution":"```lua\n-- Write a function to compute the n-th power of each number in a table.\nlocal function nth_nums(nums, n)\n    local result = {}\n    for i, num in ipairs(nums) do\n        result[i] = num ^ n\n    end\n    return result\nend\n\n-- Example usage:\nlocal numbers = {1, 2, 3, 4}\nlocal power = 3\nlocal powered_nums = nth_nums(numbers, power)\n\nfor i, num in ipairs(powered_nums) do\n    print(num)\nend\n```\n\nThis Lua function `nth_nums` takes a table of numbers `nums` and an integer `n`, and returns a new table containing each number in `nums` raised to the n-th power. The example usage demonstrates how to call this function and print the results."}
{"name":"mbpp_624_is_upper","language":"lua","prompt":"-- Write a luathon function to convert a given string to uppercase.\nlocal function is_upper(string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_624_is_upper.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_upper\n    lu.assertEquals(candidate('person'), 'PERSON')\n    lu.assertEquals(candidate('final'), 'FINAL')\n    lu.assertEquals(candidate('Valid'), 'VALID')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_624_is_upper","gpt_solution":"```lua\n-- Write a luathon function to convert a given string to uppercase.\nlocal function is_upper(str)\n    return string.upper(str)\nend\n\n-- Example usage\nlocal example_string = \"hello world\"\nprint(is_upper(example_string))  -- Output: HELLO WORLD\n```\n\nThis Lua script defines a function `is_upper` that takes a string as input and returns the string converted to uppercase using the built-in `string.upper` function."}
{"name":"mbpp_625_swap_List","language":"lua","prompt":"-- Write a luathon function to interchange the first and last element in a given table.\nlocal function swap_List(newList)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_625_swap_List.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_List\n    lu.assertEquals(candidate({1, 2, 3}), {3, 2, 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 4}), {4, 2, 3, 4, 1})\n    lu.assertEquals(candidate({4, 5, 6}), {6, 5, 4})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_625_swap_List","gpt_solution":"```lua\nlocal function swap_List(newList)\n    if #newList > 1 then\n        -- Store the first element in a temporary variable\n        local temp = newList[1]\n        -- Assign the last element to the first position\n        newList[1] = newList[#newList]\n        -- Assign the temporary variable (original first element) to the last position\n        newList[#newList] = temp\n    end\nend\n```"}
{"name":"mbpp_626_triangle_area","language":"lua","prompt":"-- Write a luathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nlocal function triangle_area(r)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_626_triangle_area.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(-1), None)\n    lu.assertEquals(candidate(0), 0)\n    lu.assertEquals(candidate(2), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_626_triangle_area","gpt_solution":"```lua\n-- Write a luathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nlocal function triangle_area(r)\n    -- The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n    -- with the hypotenuse being the diameter of the semicircle.\n    -- For a semicircle with radius r:\n    -- The hypotenuse is 2 * r (diameter of the semicircle).\n    -- The area of the largest inscribed triangle can be calculated as (1\/2) * base * height.\n    -- In this case, base = r and height = r.\n    \n    local base = r\n    local height = r\n    local area = 0.5 * base * height\n    \n    return area\nend\n\n-- Example usage:\nlocal r = 5\nprint(\"Area of the largest triangle inscribed in a semicircle of radius\", r, \"is:\", triangle_area(r))\n```"}
{"name":"mbpp_627_find_First_Missing","language":"lua","prompt":"-- Write a luathon function to find the smallest missing number from a sorted table of natural numbers.\nlocal function find_First_Missing(array)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_627_find_First_Missing.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_First_Missing\n    lu.assertEquals(candidate({0, 1, 2, 3}), 4)\n    lu.assertEquals(candidate({0, 1, 2, 6, 9}), 3)\n    lu.assertEquals(candidate({2, 3, 5, 8, 9}), 0)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_627_find_First_Missing","gpt_solution":"```lua\n-- Function to find the smallest missing number from a sorted table of natural numbers.\nlocal function find_First_Missing(array)\n    -- If the array is empty or missing starts at 1\n    if #array == 0 or array[1] > 1 then\n        return 1\n    end\n\n    -- Loop through the array to find the first missing number\n    for i = 1, #array - 1 do\n        -- Check if the next number is not consecutive\n        if array[i + 1] > array[i] + 1 then\n            return array[i] + 1\n        end\n    end\n    \n    -- If no missing number in the range, return the next number\n    return array[#array] + 1\nend\n\n-- Example usage:\n-- print(find_First_Missing({1, 2, 3, 5}))   --> Output: 4\n-- print(find_First_Missing({1, 2, 4, 5, 6})) -- Output: 3\n-- print(find_First_Missing({2, 3, 4, 5}))    --> Output: 1\n-- print(find_First_Missing({5}))             --> Output: 1\n```"}
{"name":"mbpp_628_replace_spaces","language":"lua","prompt":"-- Write a function to replace all spaces in the given string with '%20'.\nlocal function replace_spaces(string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_628_replace_spaces.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_spaces\n    lu.assertEquals(candidate('My Name is Dawood'), 'My%20Name%20is%20Dawood')\n    lu.assertEquals(candidate('I am a Programmer'), 'I%20am%20a%20Programmer')\n    lu.assertEquals(candidate('I love Coding'), 'I%20love%20Coding')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_628_replace_spaces","gpt_solution":"```lua\n-- Write a function to replace all spaces in the given string with '%20'.\nlocal function replace_spaces(input_string)\n    return string.gsub(input_string, \" \", \"%%20\")\nend\n\n-- Example usage\nlocal str = \"Hello World!\"\nprint(replace_spaces(str))  -- Output: Hello%20World!\n```"}
{"name":"mbpp_629_Split","language":"lua","prompt":"-- Write a luathon function to find even numbers from a table of numbers.\nlocal function Split(list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_629_Split.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {2, 4})\n    lu.assertEquals(candidate({4, 5, 6, 7, 8, 0, 1}), {4, 6, 8, 0})\n    lu.assertEquals(candidate({8, 12, 15, 19}), {8, 12})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_629_Split","gpt_solution":"```lua\n-- Write a luathon function to find even numbers from a table of numbers.\nlocal function Split(list)\n  local even_numbers = {}\n  for _, number in ipairs(list) do\n    if number % 2 == 0 then\n      table.insert(even_numbers, number)\n    end\n  end\n  return even_numbers\nend\n\n-- Example usage:\nlocal numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\nlocal even_numbers = Split(numbers)\n\nfor i, num in ipairs(even_numbers) do\n  print(num)\nend\n```\n\nThis function `Split` takes a table of numbers as input and returns a new table containing only the even numbers from the input list. The example usage demonstrates how to call the function and print the even numbers."}
{"name":"mbpp_630_get_coordinates","language":"lua","prompt":"-- Write a function to extract all the adjacent coordinates of the given coordinate table.\nlocal function get_coordinates(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_630_get_coordinates.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_coordinates\n    lu.assertEquals(candidate({3, 4}), {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({4, 5}), {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}})\n    lu.assertEquals(candidate({5, 6}), {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_630_get_coordinates","gpt_solution":"```lua\n-- Write a function to extract all the adjacent coordinates of the given coordinate table.\nlocal function get_coordinates(test_tup)\n    local x, y = test_tup[1], test_tup[2]\n    local adjacent_coords = {\n        {x-1, y},   -- Left\n        {x+1, y},   -- Right\n        {x, y-1},   -- Up\n        {x, y+1},   -- Down\n        {x-1, y-1}, -- Top-left diagonal\n        {x+1, y-1}, -- Top-right diagonal\n        {x-1, y+1}, -- Bottom-left diagonal\n        {x+1, y+1}  -- Bottom-right diagonal\n    }\n    return adjacent_coords\nend\n```\n\nThis `get_coordinates` function takes a coordinate table `test_tup` as input and returns a table containing all the adjacent coordinates. The adjacent coordinates include left, right, up, down, and the four diagonal directions relative to the input coordinate."}
{"name":"mbpp_631_replace_spaces","language":"lua","prompt":"-- Write a function to replace whitespaces with an underscore and vice versa in a given string.\nlocal function replace_spaces(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_631_replace_spaces.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_spaces\n    lu.assertEquals(candidate('Jumanji The Jungle'), 'Jumanji_The_Jungle')\n    lu.assertEquals(candidate('The_Avengers'), 'The Avengers')\n    lu.assertEquals(candidate('Fast and Furious'), 'Fast_and_Furious')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_631_replace_spaces","gpt_solution":"```lua\n-- Write a function to replace whitespaces with an underscore and vice versa in a given string.\nlocal function replace_spaces(text)\n    local result = {}\n\n    for i = 1, #text do\n        local char = text:sub(i, i)\n        if char == \" \" then\n            table.insert(result, \"_\")\n        elseif char == \"_\" then\n            table.insert(result, \" \")\n        else\n            table.insert(result, char)\n        end\n    end\n\n    return table.concat(result)\nend\n\n-- Example usage\nlocal input = \"This is an_example\"\nlocal output = replace_spaces(input)\nprint(output)  -- Output: \"This_is_an example\"\n```"}
{"name":"mbpp_632_move_zero","language":"lua","prompt":"-- Write a luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_632_move_zero.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_632_move_zero","gpt_solution":"```lua\n-- Write a Luathon function to move all zeroes to the end of the given table.\nlocal function move_zero(num_list)\n    local count = 0  -- Count of non-zero elements\n    local n = #num_list  -- Length of the table\n\n    -- Traverse the list and if an element is not zero, place it at index 'count'\n    for i = 1, n do\n        if num_list[i] ~= 0 then\n            num_list[count + 1] = num_list[i]\n            count = count + 1\n        end\n    end\n\n    -- After placing all non-zero elements, fill remaining positions with zeroes\n    while count < n do\n        num_list[count + 1] = 0\n        count = count + 1\n    end\nend\n\n-- Example usage:\nlocal numbers = {0, 1, 0, 3, 12}\nmove_zero(numbers)\n\nfor i, v in ipairs(numbers) do\n    print(v) -- Output should be: 1, 3, 12, 0, 0\nend\n```"}
{"name":"mbpp_633_pair_xor_Sum","language":"lua","prompt":"-- Write a luathon function to find the sum of xor of all pairs of numbers in the given table.\nlocal function pair_xor_Sum(arr, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_633_pair_xor_Sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pair_xor_Sum\n    lu.assertEquals(candidate({5, 9, 7, 6}, 4), 47)\n    lu.assertEquals(candidate({7, 3, 5}, 3), 12)\n    lu.assertEquals(candidate({7, 3}, 2), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_633_pair_xor_Sum","gpt_solution":"```lua\n-- Write a luathon function to find the sum of xor of all pairs of numbers in the given table.\nlocal function pair_xor_Sum(arr, n)\n    local sum = 0\n    \n    for i = 1, n do\n        for j = i + 1, n do\n            sum = sum + bit.bxor(arr[i], arr[j])\n        end\n    end\n    \n    return sum\nend\n\n-- Example usage:\nlocal arr = {1, 2, 3}\nlocal n = #arr\nprint(pair_xor_Sum(arr, n))  -- Output will be 6 (1^2=3, 1^3=2, 2^3=1; 3 + 2 + 1 = 6)\n```\n\nIn this code:\n- We define a function named `pair_xor_Sum` that takes in a table `arr` and its size `n` as inputs.\n- The function calculates the sum of the XOR of all pairs of numbers in the table using nested loops.\n- The bitwise XOR operation is performed using `bit.bxor` from the `bit` library.\n- The cumulative sum of these XOR values for all pairs is stored in the variable `sum`.\n- The function returns the computed sum."}
{"name":"mbpp_635_heap_sort","language":"lua","prompt":"-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_635_heap_sort.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_635_heap_sort","gpt_solution":"```lua\n-- Write a function to sort the given table.\nlocal function heap_sort(iterable)\n    local function heapify(arr, n, i)\n        local largest = i\n        local left = 2 * i + 1\n        local right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest] then\n            largest = left\n        end\n\n        if right < n and arr[right] > arr[largest] then\n            largest = right\n        end\n\n        if largest ~= i then\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n        end\n    end\n\n    local n = #iterable\n\n    for i = math.floor(n \/ 2) - 1, 0, -1 do\n        heapify(iterable, n, i)\n    end\n\n    for i = n - 1, 1, -1 do\n        iterable[1], iterable[i] = iterable[i], iterable[1]\n        heapify(iterable, i, 0)\n    end\nend\n```"}
{"name":"mbpp_637_noprofit_noloss","language":"lua","prompt":"-- Write a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_637_noprofit_noloss.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_637_noprofit_noloss","gpt_solution":"```lua\n-- Function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost == sale_amount then\n        return true\n    else\n        return false\n    end\nend\n\n-- Example usage:\n-- print(noprofit_noloss(100, 100)) -- Should print true\n-- print(noprofit_noloss(100, 90))  -- Should print false\n```"}
{"name":"mbpp_638_wind_chill","language":"lua","prompt":"-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km\/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_638_wind_chill.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_638_wind_chill","gpt_solution":"```lua\n-- Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km\/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n    -- Calculate the wind chill index using the formula:\n    -- WCI = 13.12 + 0.6215*T - 11.37*V^0.16 + 0.3965*T*V^0.16\n    local wci = 13.12 + 0.6215 * t - 11.37 * (v ^ 0.16) + 0.3965 * t * (v ^ 0.16)\n    \n    -- Round the wind chill index to the nearest integer and return\n    return math.floor(wci + 0.5)\nend\n\n-- Example usage:\nlocal wind_velocity = 30 -- in km\/h\nlocal temperature = -5 -- in degrees Celsius\nprint(wind_chill(wind_velocity, temperature)) -- Outputs the wind chill index\n```"}
{"name":"mbpp_639_sample_nam","language":"lua","prompt":"-- Write a function to sum the length of the names of a given table of names after removing the names that start with a lowercase letter.\nlocal function sample_nam(sample_names)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_639_sample_nam.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sample_nam\n    lu.assertEquals(candidate({'sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'}), 16)\n    lu.assertEquals(candidate({'php', 'res', 'Python', 'abcd', 'Java', 'aaa'}), 10)\n    lu.assertEquals(candidate({'abcd', 'Python', 'abba', 'aba'}), 6)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_639_sample_nam","gpt_solution":"```lua\nlocal function sample_nam(sample_names)\n    local total_length = 0\n\n    for _, name in ipairs(sample_names) do\n        local first_char = name:sub(1, 1)\n        if not first_char:match('%l') then\n            total_length = total_length + #name\n        end\n    end\n\n    return total_length\nend\n\n-- Example usage:\nlocal names = {\"Alice\", \"bob\", \"Charlie\", \"dave\"}\nprint(sample_nam(names))  -- Output: 12 (length of \"Alice\" and \"Charlie\")\n```"}
{"name":"mbpp_640_remove_parenthesis","language":"lua","prompt":"-- Write a function to remove the parenthesis and what is inbetween them from a string.\nlocal function remove_parenthesis(items)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_640_remove_parenthesis.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_parenthesis\n    lu.assertEquals(candidate({'python (chrome)'}), 'python')\n    lu.assertEquals(candidate({'string(.abc)'}), 'string')\n    lu.assertEquals(candidate({'alpha(num)'}), 'alpha')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_640_remove_parenthesis","gpt_solution":"```lua\n-- Write a function to remove the parenthesis and what is inbetween them from a string.\nlocal function remove_parenthesis(items)\n    -- Use gsub with a pattern to find and replace text within parenthesis\n    local result = items:gsub(\"%b()\", \"\")\n    return result\nend\n\n-- Example usage:\n-- local example = \"This is a test (remove this) string.\"\n-- print(remove_parenthesis(example))  -- Output: \"This is a test  string.\"\n```\n\nThis function uses the `gsub` function with the pattern `%b()` to match and remove content between parentheses, including the parentheses themselves."}
{"name":"mbpp_641_is_nonagonal","language":"lua","prompt":"-- Write a function to find the nth nonagonal number.\nlocal function is_nonagonal(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_641_is_nonagonal.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nonagonal\n    lu.assertEquals(candidate(10), 325)\n    lu.assertEquals(candidate(15), 750)\n    lu.assertEquals(candidate(18), 1089)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_641_is_nonagonal","gpt_solution":"```lua\n-- Write a function to find the nth nonagonal number.\n-- Nonagonal number formula: n(7n - 5) \/ 2\n\nlocal function nonagonal_number(n)\n    return n * (7 * n - 5) \/ 2\nend\n\n-- Test the function\nfor i = 1, 10 do\n    print(\"The \" .. i .. \"th nonagonal number is: \" .. nonagonal_number(i))\nend\n```\n\nThis code defines the `nonagonal_number` function, which calculates the nth nonagonal number using the provided formula. The function is then tested with the first ten nonagonal numbers."}
{"name":"mbpp_643_text_match_wordz_middle","language":"lua","prompt":"-- Write a function that checks if a strings contains 'z', except at the start and end of the word.\nlocal function text_match_wordz_middle(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_643_text_match_wordz_middle.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_wordz_middle\n    lu.assertEquals(candidate('pythonzabc.'), true)\n    lu.assertEquals(candidate('zxyabc.'), false)\n    lu.assertEquals(candidate('  lang  .'), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_643_text_match_wordz_middle","gpt_solution":"```lua\n-- Write a function that checks if a strings contains 'z', except at the start and end of the word.\nlocal function text_match_wordz_middle(text)\n    -- Check if the length of the string is greater than 2, since a single character or two characters cannot have 'z' in the middle\n    if #text <= 2 then\n        return false\n    end\n\n    -- Iterate through the string, but skip the first and last character\n    for i = 2, #text - 1 do\n        if text:sub(i, i) == 'z' then\n            return true\n        end\n    end\n\n    return false\nend\n\n-- Example usage\nprint(text_match_wordz_middle(\"amazingly\")) -- true\nprint(text_match_wordz_middle(\"zoo\"))       -- false\nprint(text_match_wordz_middle(\"pizza\"))     -- true\nprint(text_match_wordz_middle(\"zz\"))        -- false\nprint(text_match_wordz_middle(\"\"))          -- false\nprint(text_match_wordz_middle(\"azb\"))       -- false\n```"}
{"name":"mbpp_644_reverse_Array_Upto_K","language":"lua","prompt":"-- Write a luathon function to reverse a table upto a given position.\nlocal function reverse_Array_Upto_K(input, k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_644_reverse_Array_Upto_K.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_Array_Upto_K\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 4), {4, 3, 2, 1, 5, 6})\n    lu.assertEquals(candidate({4, 5, 6, 7}, 2), {5, 4, 6, 7})\n    lu.assertEquals(candidate({9, 8, 7, 6, 5}, 3), {7, 8, 9, 6, 5})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_644_reverse_Array_Upto_K","gpt_solution":"```lua\n-- This function reverses the elements of a table up to a given position 'k'.\nlocal function reverse_Array_Upto_K(input, k)\n    -- Ensure that 'k' does not exceed the length of the table\n    if k > #input then\n        k = #input\n    end\n\n    -- Initialize two pointers, one at the start and one at position 'k'\n    local i, j = 1, k\n\n    -- Swap the elements while the pointers have not crossed each other\n    while i < j do\n        input[i], input[j] = input[j], input[i]\n        i = i + 1\n        j = j - 1\n    end\n\n    return input\nend\n\n-- Example Usage:\nlocal input_table = {1, 2, 3, 4, 5}\nlocal k = 3\nlocal reversed_up_to_k = reverse_Array_Upto_K(input_table, k)\nfor _, v in ipairs(reversed_up_to_k) do\n    print(v)\nend\n```\n\nThis function `reverse_Array_Upto_K` takes two parameters, `input` which is a table, and `k` which is the position up to which the table needs to be reversed. The function swaps the elements to reverse the elements from the start of the table up to the `k`-th position, returning the modified table. The example usage demonstrates how to use this function and prints the table after reversing up to the specified position."}
{"name":"mbpp_720_add_dict_to_tuple","language":"lua","prompt":"-- Write a function to add a table to the table. The output should be a table.\nlocal function add_dict_to_tuple(test_tup, test_dict)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_720_add_dict_to_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_dict_to_tuple\n    lu.assertEquals(candidate({4, 5, 6}, {['MSAM'] = 1, ['is'] = 2, ['best'] = 3}), {4, 5, 6, {['MSAM'] = 1, ['is'] = 2, ['best'] = 3}})\n    lu.assertEquals(candidate({1, 2, 3}, {['UTS'] = 2, ['is'] = 3, ['Worst'] = 4}), {1, 2, 3, {['UTS'] = 2, ['is'] = 3, ['Worst'] = 4}})\n    lu.assertEquals(candidate({8, 9, 10}, {['POS'] = 3, ['is'] = 4, ['Okay'] = 5}), {8, 9, 10, {['POS'] = 3, ['is'] = 4, ['Okay'] = 5}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_720_add_dict_to_tuple","gpt_solution":"```lua\n-- Write a function to add a table to the table. The output should be a table.\nlocal function add_dict_to_tuple(test_tup, test_dict)\n    -- Create a new table to hold the result\n    local result = {}\n    \n    -- Insert elements from the first table into the result\n    for _, v in ipairs(test_tup) do\n        table.insert(result, v)\n    end\n    \n    -- Insert the second table into the result\n    table.insert(result, test_dict)\n    \n    return result\nend\n\n-- Example Usage:\nlocal tuple = {1, 2, 3}\nlocal dict = {a = 4, b = 5}\n\nlocal result = add_dict_to_tuple(tuple, dict)\n\n-- The result should be: {1, 2, 3, {a = 4, b = 5}}\nprint(vim.inspect(result))  -- Using vim.inspect to print the table nicely (used in Neovim Lua scripting)\n\n-- Note: In vanilla Lua, you can use `for k, v in pairs(result) do print(k, v) end` to print the table elements\n```\n\nThis function `add_dict_to_tuple` takes two tables as inputs, `test_tup` and `test_dict`. It creates a new table `result`, inserts all elements from `test_tup` into `result`, and finally inserts the entire `test_dict` as the last element of `result`. The function then returns the resultant table."}
{"name":"mbpp_721_maxAverageOfPath","language":"lua","prompt":"-- Given a square matrix of size N*N given as a table of tables, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_721_maxAverageOfPath.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_721_maxAverageOfPath","gpt_solution":"```lua\nlocal function maxAverageOfPath(cost)\n    local n = #cost\n    local memo = {}\n\n    -- Initialize a memoization table with -inf\n    for i = 1, n do\n        memo[i] = {}\n        for j = 1, n do\n            memo[i][j] = -math.huge\n        end\n    end\n\n    -- Helper function to calculate the maximum path sum\n    local function calculateMaxPathSum(i, j)\n        if i > n or j > n then\n            return -math.huge\n        elseif i == n and j == n then\n            return cost[i][j]\n        elseif memo[i][j] ~= -math.huge then\n            return memo[i][j]\n        else\n            local right = calculateMaxPathSum(i, j + 1)\n            local down = calculateMaxPathSum(i + 1, j)\n            memo[i][j] = cost[i][j] + math.max(right, down)\n            return memo[i][j]\n        end\n    end\n\n    -- Calculate the maximum path cost starting from (1,1) to (n,n)\n    local maxPathCost = calculateMaxPathSum(1, 1)\n    -- The length of the path in a N*N grid moving only right or down will always be 2*N-1\n    local pathLen = 2 * n - 1\n    -- Calculate the maximum average\n    local maxAverage = maxPathCost \/ pathLen\n\n    return maxAverage\nend\n\n-- Example usage:\nlocal matrix = {\n  {5, 1, 0},\n  {10, 5, 10},\n  {2, 1, 1}\n}\n\nprint(maxAverageOfPath(matrix))  -- Output should be the maximum average of path from top-left to bottom-right\n```\n\nExplanation:\n1. The code computes the path with the maximum average cost from the top-left to the bottom-right of a square matrix.\n2. It uses a memoization technique to store previously calculated path sums to avoid redundant calculations.\n3. The length of the path in the NxN grid moving only right or down is always `2*N-1`.\n4. The maximum average is derived by dividing the maximum path sum by the path length."}
{"name":"mbpp_722_filter_data","language":"lua","prompt":"-- The input is given as - a table with a student name as a key and a table of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_722_filter_data.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_722_filter_data","gpt_solution":"```lua\n-- The input is given as - a table with a student name as a key and a table of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, min_height, min_weight)\n    local filtered_students = {}\n\n    for name, measurements in pairs(students) do\n        local student_height = measurements[1]\n        local student_weight = measurements[2]\n\n        if student_height > min_height and student_weight > min_weight then\n            filtered_students[name] = measurements\n        end\n    end\n\n    return filtered_students\nend\n```\n\nThis function iterates through each student entry, checks if both the height and weight are above the given minimum values, and if so, adds the student to a new table (`filtered_students`). The function returns this table containing only the students who meet the criteria."}
{"name":"mbpp_723_count_same_pair","language":"lua","prompt":"-- The input is defined as two tables of the same length. Write a function to count indices where the tables have the same values.\nlocal function count_same_pair(nums1, nums2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_723_count_same_pair.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_same_pair\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}), 4)\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 11)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 1)\n    lu.assertEquals(candidate({0, 1, 1, 2}, {0, 1, 2, 2}), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_723_count_same_pair","gpt_solution":"```lua\n-- The input is defined as two tables of the same length. Write a function to count indices where the tables have the same values.\nlocal function count_same_pair(nums1, nums2)\n    -- Initialize a counter for matching indices\n    local count = 0\n    \n    -- Loop through the tables\n    for i = 1, #nums1 do\n        -- Check if the elements at the current index are the same\n        if nums1[i] == nums2[i] then\n            -- Increment the counter\n            count = count + 1\n        end\n    end\n    \n    -- Return the count of matching indices\n    return count\nend\n```\n\nThis function `count_same_pair` takes two tables, `nums1` and `nums2`, and counts the number of indices at which the values in both tables are the same. It assumes that both tables are of the same length."}
{"name":"mbpp_724_power_base_sum","language":"lua","prompt":"-- Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_724_power_base_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_724_power_base_sum","gpt_solution":"```lua\nlocal function power_base_sum(base, power)\n    -- Calculate the base raised to the specified power\n    local result = base ^ power\n    \n    -- Convert the result to a string to iterate over each digit\n    local result_str = tostring(result)\n    \n    -- Initialize the sum of digits to 0\n    local sum_of_digits = 0\n    \n    -- Iterate over each character in the string representation of the result\n    for i = 1, #result_str do\n        -- Convert each character back to a number and add it to the sum\n        sum_of_digits = sum_of_digits + tonumber(result_str:sub(i, i))\n    end\n    \n    -- Return the sum of digits\n    return sum_of_digits\nend\n```\n\nYou can use this function by calling `power_base_sum(base, power)` with your desired `base` and `power` values, like so:\n\n```lua\nprint(power_base_sum(2, 15))  -- Example usage\n```"}
{"name":"mbpp_725_extract_quotation","language":"lua","prompt":"-- Write a function to extract values between quotation marks \" \" of the given string.\nlocal function extract_quotation(text1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_725_extract_quotation.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_quotation\n    lu.assertEquals(candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'), {'A53', 'multi', 'Processor'})\n    lu.assertEquals(candidate('Cast your \"favorite\" entertainment \"apps\"'), {'favorite', 'apps'})\n    lu.assertEquals(candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support'), {'4k Ultra HD', 'HDR 10'})\n    lu.assertEquals(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"), {})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_725_extract_quotation","gpt_solution":"```lua\n-- Write a function to extract values between quotation marks \" \" of the given string.\nlocal function extract_quotation(text1)\n    local values = {}\n    for value in string.gmatch(text1, '\"(.-)\"') do\n        table.insert(values, value)\n    end\n    return values\nend\n\n-- Example usage:\nlocal test_string = 'He said, \"Hello!\" and then, \"Goodbye!\"'\nlocal result = extract_quotation(test_string)\nfor _, value in ipairs(result) do\n    print(value)\nend\n-- Output:\n-- Hello!\n-- Goodbye!\n```\n\nThis function `extract_quotation` takes a string `text1` as input and finds all values enclosed in quotation marks within that string. It returns a table (Lua's equivalent of an array) containing all such values. The `string.gmatch` function is used to match patterns within the string, and `table.insert` is used to insert each found value into the `values` table."}
{"name":"mbpp_726_multiply_elements","language":"lua","prompt":"-- Write a function that takes as input a table of numbers (t_1,...,t_{N+1}) and returns a table of length N where the i-th element of the table is equal to t_i * t_{i+1}.\nlocal function multiply_elements(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_726_multiply_elements.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply_elements\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {5, 35, 56, 80})\n    lu.assertEquals(candidate({2, 4, 5, 6, 7}), {8, 20, 30, 42})\n    lu.assertEquals(candidate({12, 13, 14, 9, 15}), {156, 182, 126, 135})\n    lu.assertEquals(candidate({12}), {})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_726_multiply_elements","gpt_solution":"```lua\nlocal function multiply_elements(test_tup)\n    local result = {}\n    for i = 1, #test_tup - 1 do\n        table.insert(result, test_tup[i] * test_tup[i + 1])\n    end\n    return result\nend\n```\n\nThis function `multiply_elements` takes a table `test_tup` as input and returns a new table where each element is the product of two consecutive elements from the original table. The loop runs from the first element to the second last element of the input table to generate the resulting table of length N."}
{"name":"mbpp_728_sum_list","language":"lua","prompt":"-- Write a function takes as input two tables [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nlocal function sum_list(lst1, lst2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_728_sum_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_list\n    lu.assertEquals(candidate({10, 20, 30}, {15, 25, 35}), {25, 45, 65})\n    lu.assertEquals(candidate({1, 2, 3}, {5, 6, 7}), {6, 8, 10})\n    lu.assertEquals(candidate({15, 20, 30}, {15, 45, 75}), {30, 65, 105})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_728_sum_list","gpt_solution":"```lua\nlocal function sum_list(lst1, lst2)\n  local result = {}\n  for i = 1, #lst1 do\n    result[i] = lst1[i] + lst2[i]\n  end\n  return result\nend\n```"}
{"name":"mbpp_730_consecutive_duplicates","language":"lua","prompt":"-- Write a function to remove consecutive duplicates of a given table.\nlocal function consecutive_duplicates(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_730_consecutive_duplicates.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {10, 15, 19, 18, 17, 26, 17, 18, 10})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {'a', 'b', 'c', 'd'})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'}), {'a', 'b', 'c', 'd', 'a'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_730_consecutive_duplicates","gpt_solution":"```lua\n-- Write a function to remove consecutive duplicates of a given table.\nlocal function consecutive_duplicates(nums)\n    if #nums == 0 then\n        return nums\n    end\n\n    local result = {}\n    local previous = nums[1]\n    table.insert(result, previous)\n\n    for i = 2, #nums do\n        if nums[i] ~= previous then\n            table.insert(result, nums[i])\n            previous = nums[i]\n        end\n    end\n\n    return result\nend\n\n-- Example Usage:\nlocal nums = {1, 1, 2, 2, 3, 3, 3, 4, 5, 5}\nlocal result = consecutive_duplicates(nums)\nfor i, v in ipairs(result) do\n    print(v)\nend\n```\n\nThis implementation ensures that only non-consecutive elements are maintained in the resulting table. To test the function, you can run the example usage code which demonstrates how to call the `consecutive_duplicates` function and print the results."}
{"name":"mbpp_731_lateralsurface_cone","language":"lua","prompt":"-- Write a function to find the lateral surface area of a cone given radius r and the height h.\nlocal function lateralsurface_cone(r, h)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_731_lateralsurface_cone.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lateralsurface_cone\n    lu.assertEquals(candidate(5, 12), 204.20352248333654)\n    lu.assertEquals(candidate(10, 15), 566.3586699569488)\n    lu.assertEquals(candidate(19, 17), 1521.8090132193388)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_731_lateralsurface_cone","gpt_solution":"```lua\n-- Write a function to find the lateral surface area of a cone given radius r and the height h.\nlocal function lateralsurface_cone(r, h)\n    -- Calculate the slant height using Pythagorean theorem\n    local slant_height = math.sqrt(r^2 + h^2)\n    \n    -- Calculate the lateral surface area\n    local lateral_surface_area = math.pi * r * slant_height\n    \n    return lateral_surface_area\nend\n```"}
{"name":"mbpp_732_replace_specialchar","language":"lua","prompt":"-- Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nlocal function replace_specialchar(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_732_replace_specialchar.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_specialchar\n    lu.assertEquals(candidate('Python language, Programming language.'), 'Python:language::Programming:language:')\n    lu.assertEquals(candidate('a b c,d e f'), 'a:b:c:d:e:f')\n    lu.assertEquals(candidate('ram reshma,ram rahim'), 'ram:reshma:ram:rahim')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_732_replace_specialchar","gpt_solution":"```lua\nlocal function replace_specialchar(text)\n    return (text:gsub(\"[%s,%.]\", \":\"))\nend\n\n-- Example usage:\n-- print(replace_specialchar(\"Hello, world. How are you?\")) \n-- Output: \"Hello:world:How:are:you?\"\n```\n\nExplanation:\n- The pattern `[%s,%.]` matches any space (`%s`), comma (`,`), or dot (`%c`).\n- The `gsub` function replaces all occurrences of the matched characters with a colon (`:`)."}
{"name":"mbpp_733_find_first_occurrence","language":"lua","prompt":"-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_733_find_first_occurrence.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_733_find_first_occurrence","gpt_solution":"```lua\n-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low = 1\n    local high = #A\n    local result = -1\n\n    while low <= high do\n        local mid = math.floor((low + high) \/ 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n\n    return result\nend\n\n-- Example usage:\nlocal sorted_table = {1, 2, 2, 2, 3, 4, 5}\nlocal target = 2\nprint(find_first_occurrence(sorted_table, target))  -- Output: 2\n```\n\nThis function `find_first_occurrence` takes a sorted table `A` and a number `x` as inputs, and returns the index of the first occurrence of `x`. If `x` is not found in the table, it returns `-1`. The table is assumed to be 1-based indexing as common in Lua."}
{"name":"mbpp_734_sum_Of_Subarray_Prod","language":"lua","prompt":"-- Write a luathon function to find sum of products of all possible subtables of a given table. https:\/\/www.geeksforgeeks.org\/sum-of-products-of-all-possible-subtables\/\nlocal function sum_Of_Subarray_Prod(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_734_sum_Of_Subarray_Prod.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_Of_Subarray_Prod\n    lu.assertEquals(candidate({1, 2, 3}), 20)\n    lu.assertEquals(candidate({1, 2}), 5)\n    lu.assertEquals(candidate({1, 2, 3, 4}), 84)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_734_sum_Of_Subarray_Prod","gpt_solution":"```lua\n-- Function to find sum of products of all possible subtables of a given table\nlocal function sum_Of_Subarray_Prod(arr)\n    local n = #arr\n    local sum = 0\n\n    -- Loop to consider all subarrays\n    for i = 1, n do\n        local prod = 1\n        for j = i, n do\n            prod = prod * arr[j]\n            sum = sum + prod\n        end\n    end\n\n    return sum\nend\n\n-- Example usage:\nlocal arr = {1, 2, 3}\nprint(sum_Of_Subarray_Prod(arr))  -- Output: 23\n```\n\nHere, the function `sum_Of_Subarray_Prod` computes the sum of products of all possible subarrays of a given table. The code iterates through all possible subarrays, calculates their products, and accumulates the sum of these products to return the final result. The example usage demonstrates how the function works with a sample input table."}
{"name":"mbpp_735_toggle_middle_bits","language":"lua","prompt":"-- Write a luathon function to toggle bits of the number except the first and the last bit. https:\/\/www.geeksforgeeks.org\/toggle-bits-number-expect-first-last-bits\/\nlocal function toggle_middle_bits(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_735_toggle_middle_bits.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_middle_bits\n    lu.assertEquals(candidate(9), 15)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(11), 13)\n    lu.assertEquals(candidate(65), 127)\n    lu.assertEquals(candidate(77), 115)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_735_toggle_middle_bits","gpt_solution":"```lua\n-- Write a luathon function to toggle bits of the number except the first and the last bit. https:\/\/www.geeksforgeeks.org\/toggle-bits-number-expect-first-last-bits\nlocal function toggle_middle_bits(n)\n    -- Get the number of bits in the binary representation of n\n    local num_bits = math.floor(math.log(n) \/ math.log(2)) + 1\n    \n    -- If the number of bits is less than or equal to 2, no middle bits to toggle\n    if num_bits <= 2 then\n        return n\n    end\n    \n    -- Create a mask with all bits set except the first and the last\n    local mask = 0\n    for i = 1, num_bits - 2 do\n        mask = mask | (1 << i)\n    end\n    \n    -- Toggle the middle bits using XOR operation with the mask\n    return n ~ mask\nend\n\n-- Example usage\nprint(toggle_middle_bits(29))  -- Example: 29 is 11101 in binary and toggling the middle bits gives 10010 => 18\n```"}
{"name":"mbpp_736_left_insertion","language":"lua","prompt":"-- Write a function to locate the left insertion point for a specified value in sorted order. https:\/\/www.w3resource.com\/luathon-exercises\/data-structures-and-algorithms\/luathon-data-structure-exercise-24.php\nlocal function left_insertion(a, x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_736_left_insertion.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_insertion\n    lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_736_left_insertion","gpt_solution":"Sure, here is the complete Lua code for finding the left insertion point for a specified value in a sorted array:\n\n```lua\n-- Write a function to locate the left insertion point for a specified value in sorted order. https:\/\/www.w3resource.com\/luathon-exercises\/data-structures-and-algorithms\/luathon-data-structure-exercise-24.php\nlocal function left_insertion(a, x)\n    local low = 1\n    local high = #a\n\n    while low <= high do\n        local mid = math.floor((low + high) \/ 2)\n        if a[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n\n    return low\nend\n\n-- Example usage:\nlocal arr = {1, 2, 4, 4, 5}\nlocal val = 4\nprint(left_insertion(arr, val))  -- Output should be 3\n```\n\nIn this implementation:\n- `a` is the sorted array.\n- `x` is the value for which we need to find the left insertion point.\n- The `left_insertion` function employs a binary search method to find the correct insertion index.\n- The example usage demonstrates finding the left insertion point for the value `4` in the array `{1, 2, 4, 4, 5}`. The output would be `3`, indicating the position where `4` can be inserted while maintaining sorted order."}
{"name":"mbpp_737_check_str","language":"lua","prompt":"-- Write a function to check whether the given string is starting with a vowel or not using regex.\nlocal function check_str(string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_737_check_str.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_str\n    lu.assertEquals(candidate('annie'), true)\n    lu.assertEquals(candidate('dawood'), false)\n    lu.assertEquals(candidate('Else'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_737_check_str","gpt_solution":"```lua\n-- Function to check whether the given string starts with a vowel using regex.\nlocal function check_str(string)\n    -- Using a pattern to match the start of the string with a vowel (case-insensitive)\n    if string:match(\"^[AEIOUaeiou]\") then\n        return true\n    else\n        return false\n    end\nend\n\n-- Example Usage\nprint(check_str(\"apple\"))   -- Output: true\nprint(check_str(\"Banana\"))  -- Output: false\n```\n\nThe function `check_str` uses Lua's built-in `string:match` function to check if the given string starts with a vowel (either uppercase or lowercase). If so, it returns `true`, otherwise it returns `false`."}
{"name":"mbpp_738_geometric_sum","language":"lua","prompt":"-- Write a function to calculate the geometric sum of n-1. https:\/\/www.w3resource.com\/luathon-exercises\/data-structures-and-algorithms\/luathon-recursion-exercise-9.php\nlocal function geometric_sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_738_geometric_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = geometric_sum\n    lu.assertEquals(candidate(7), 1.9921875)\n    lu.assertEquals(candidate(4), 1.9375)\n    lu.assertEquals(candidate(8), 1.99609375)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_738_geometric_sum","gpt_solution":"```lua\n-- Function to calculate the geometric sum of n-1. \n-- Geometric sum is defined as 1 + 1\/2 + 1\/4 + 1\/8 + ... + 1\/(2^(n-1))\n\nlocal function geometric_sum(n)\n    -- Base case: when n is 1, the geometric sum is 1\n    if n == 1 then\n        return 1\n    else\n        -- Recursive case: calculate the sum for (n-1) and add 1\/(2^(n-1)) to it\n        return geometric_sum(n - 1) + 1 \/ (2 ^ (n - 1))\n    end\nend\n\n-- Example usage:\nprint(geometric_sum(5)) -- Output should be 1.9375\n```\n\nThis Lua function calculates the geometric sum of `n-1` recursively. The base case handles `n = 1` and returns `1`. For other values of `n`, the function calls itself with `n-1` and adds `1 \/ (2 ^ (n - 1))` to the result. The example usage prints the geometric sum for `n = 5`, which should output `1.9375`."}
{"name":"mbpp_739_find_Index","language":"lua","prompt":"-- Write a luathon function to find the index of smallest triangular number with n digits. https:\/\/www.geeksforgeeks.org\/index-of-smallest-triangular-number-with-n-digits\/\nlocal function find_Index(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_739_find_Index.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Index\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 14)\n    lu.assertEquals(candidate(4), 45)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_739_find_Index","gpt_solution":"```lua\n-- Write a luathon function to find the index of smallest triangular number with n digits.\n-- https:\/\/www.geeksforgeeks.org\/index-of-smallest-triangular-number-with-n-digits\/\nlocal function find_Index(n)\n    -- Function to calculate the number of digits in a number\n    local function countDigits(num)\n        return math.floor(math.log10(num)) + 1\n    end\n\n    -- Function to calculate the nth triangular number\n    local function triangularNumber(index)\n        return (index * (index + 1)) \/\/ 2\n    end\n\n    local index = 1\n    while true do\n        -- Calculate the triangular number\n        local t_number = triangularNumber(index)\n        \n        -- Check if the number of digits matches n\n        if countDigits(t_number) == n then\n            return index\n        end\n        \n        index = index + 1\n    end\nend\n```"}
{"name":"mbpp_740_tuple_to_dict","language":"lua","prompt":"-- Write a function to convert the given table to a key-value table using adjacent elements. https:\/\/www.geeksforgeeks.org\/luathon-convert-table-to-adjacent-pair-table\/\nlocal function tuple_to_dict(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_740_tuple_to_dict.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_740_tuple_to_dict","gpt_solution":"```lua\n-- Write a function to convert the given table to a key-value table using adjacent elements. https:\/\/www.geeksforgeeks.org\/luathon-convert-table-to-adjacent-pair-table\/\n\nlocal function tuple_to_dict(test_tup)\n    local dict = {}\n    \n    for i = 1, #test_tup, 2 do\n        dict[test_tup[i]] = test_tup[i + 1]\n    end\n    \n    return dict\nend\n\n-- Example usage:\nlocal test_tup = {1, \"a\", 2, \"b\", 3, \"c\"}\nlocal result = tuple_to_dict(test_tup)\n\n-- Print the resulting dictionary\nfor k, v in pairs(result) do\n    print(k, v)\nend\n```\n\nThe function `tuple_to_dict` takes a table of adjacent pairs and converts it into a dictionary where each key-value pair is formed from adjacent elements in the table. This is illustrated with an example usage where a test table is passed, and the resulting dictionary is printed."}
{"name":"mbpp_741_all_Characters_Same","language":"lua","prompt":"-- Write a luathon function to check whether all the characters are same or not.\nlocal function all_Characters_Same(s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_741_all_Characters_Same.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_Characters_Same\n    lu.assertEquals(candidate('python'), false)\n    lu.assertEquals(candidate('aaa'), true)\n    lu.assertEquals(candidate('data'), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_741_all_Characters_Same","gpt_solution":"```lua\n-- Write a luathon function to check whether all the characters are same or not.\nlocal function all_Characters_Same(s)\n    -- If the string is empty or has one character, return true\n    if #s <= 1 then\n        return true\n    end\n    \n    -- Get the first character of the string\n    local firstChar = s:sub(1, 1)\n    \n    -- Iterate through the string and check if all characters are the same\n    for i = 2, #s do\n        if s:sub(i, i) ~= firstChar then\n            return false\n        end\n    end\n    \n    return true\nend\n\n-- Example usage:\nprint(all_Characters_Same(\"aaaa\")) -- true\nprint(all_Characters_Same(\"abaa\")) -- false\nprint(all_Characters_Same(\"\"))     -- true\nprint(all_Characters_Same(\"a\"))    -- true\n```\n\nThis function `all_Characters_Same` takes a string `s` as input and returns `true` if all characters in the string are the same, and `false` otherwise. The function first handles special cases of empty strings or single-character strings which trivially satisfy the condition. It then checks each character against the first character to determine if all characters are identical."}
{"name":"mbpp_742_area_tetrahedron","language":"lua","prompt":"-- Write a function to caluclate the area of a tetrahedron.\nlocal function area_tetrahedron(side)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_742_area_tetrahedron.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = area_tetrahedron\n    lu.assertEquals(candidate(3), 15.588457268119894)\n    lu.assertEquals(candidate(20), 692.8203230275509)\n    lu.assertEquals(candidate(10), 173.20508075688772)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_742_area_tetrahedron","gpt_solution":"```lua\n-- Write a function to calculate the area of a tetrahedron.\nlocal function area_tetrahedron(side)\n    -- Formula to calculate the area of a tetrahedron\n    -- A = sqrt(3) * (side^2)\n    local sqrt3 = math.sqrt(3)\n    local area = sqrt3 * (side ^ 2)\n    return area\nend\n\n-- Example usage:\n-- local side_length = 5\n-- print(\"The area of the tetrahedron is: \" .. area_tetrahedron(side_length))\n```"}
{"name":"mbpp_743_rotate_right","language":"lua","prompt":"-- Write a function to rotate a given table by specified number of items to the right direction. https:\/\/www.geeksforgeeks.org\/luathon-program-right-rotate-table-n\/\nlocal function rotate_right(list, m)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_743_rotate_right.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rotate_right\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), {8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {9, 10, 1, 2, 3, 4, 5, 6, 7, 8})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), {6, 7, 8, 9, 10, 1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_743_rotate_right","gpt_solution":"```lua\n-- Function to rotate a given table to the right by specified number of items\n-- @param list The table to rotate\n-- @param m The number of items to rotate\nlocal function rotate_right(list, m)\n    -- Ensure that m is a positive number and not greater than the length of the list\n    local n = #list\n    m = m % n\n\n    -- If rotation is zero, return the list as is\n    if m == 0 then\n        return list\n    end\n\n    -- Perform the rotation\n    local rotated_list = {}\n    for i = 1, n do\n        rotated_list[i] = list[(i - m - 1) % n + 1]\n    end\n\n    return rotated_list\nend\n\n-- Example usage\nlocal my_list = {1, 2, 3, 4, 5}\nlocal rotated = rotate_right(my_list, 2) -- {4, 5, 1, 2, 3}\n\n-- Printing the result for demonstration\nfor _, value in ipairs(rotated) do\n    print(value)\nend\n```"}
{"name":"mbpp_744_check_none","language":"lua","prompt":"-- Write a function to check if the given table has any none value or not.\nlocal function check_none(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_744_check_none.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_none\n    lu.assertEquals(candidate({10, 4, 5, 6, None}), true)\n    lu.assertEquals(candidate({7, 8, 9, 11, 14}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, None}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_744_check_none","gpt_solution":"```lua\n-- Write a function to check if the given table has any nil value or not.\nlocal function check_none(test_tup)\n    for _, value in pairs(test_tup) do\n        if value == nil then\n            return true\n        end\n    end\n    return false\nend\n\n-- Example usage\nlocal example_table = {1, 2, nil, 4}\nprint(check_none(example_table)) -- Output: true\n\nlocal another_example = {1, 2, 3, 4}\nprint(check_none(another_example)) -- Output: false\n```"}
{"name":"mbpp_745_divisible_by_digits","language":"lua","prompt":"-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https:\/\/www.w3resource.com\/luathon-exercises\/lambda\/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_745_divisible_by_digits.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_745_divisible_by_digits","gpt_solution":"```lua\n-- Write a function to find numbers within a given range from startnum to endnum \n-- where every number is divisible by every digit it contains. \n\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible_by_digits(num)\n        local original_num = num\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or original_num % digit ~= 0 then\n                return false\n            end\n            num = math.floor(num \/ 10)\n        end\n        return true\n    end\n\n    local result = {}\n    for num = startnum, endnum do\n        if is_divisible_by_digits(num) then\n            table.insert(result, num)\n        end\n    end\n\n    return result\nend\n\n-- Example usage:\nfor _, num in ipairs(divisible_by_digits(10, 100)) do\n    print(num)\nend\n```\n\nThis function `divisible_by_digits` checks each number within the range `[startnum, endnum]` to determine whether it is divisible by each of its digits. The inner function `is_divisible_by_digits` performs the check for a single number. If a number passes the check, it is added to the result list which is returned by the `divisible_by_digits` function."}
{"name":"mbpp_746_sector_area","language":"lua","prompt":"-- Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return nil if the angle is larger than 360 degrees.\nlocal function sector_area(r, a)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_746_sector_area.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sector_area\n    lu.assertEquals(candidate(4, 45), 6.283185307179586)\n    lu.assertEquals(candidate(9, 45), 31.808625617596654)\n    lu.assertEquals(candidate(9, 361), None)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_746_sector_area","gpt_solution":"```lua\nlocal function sector_area(r, a)\n    if a > 360 then\n        return nil\n    end\n    local area = 0.5 * r * r * math.rad(a)\n    return area\nend\n```"}
{"name":"mbpp_747_lcs_of_three","language":"lua","prompt":"-- Write a function to find the longest common subsequence for the given three string sequence. https:\/\/www.geeksforgeeks.org\/lcs-longest-common-subsequence-three-strings\/\nlocal function lcs_of_three(X, Y, Z)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_747_lcs_of_three.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lcs_of_three\n    lu.assertEquals(candidate('AGGT12', '12TXAYB', '12XBA'), 2)\n    lu.assertEquals(candidate('Reels', 'Reelsfor', 'ReelsforReels'), 5)\n    lu.assertEquals(candidate('abcd1e2', 'bc12ea', 'bd1ea'), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_747_lcs_of_three","gpt_solution":"```lua\n-- Function to find the longest common subsequence of three strings\nlocal function lcs_of_three(X, Y, Z)\n    -- Get the lengths of the three strings\n    local m, n, o = #X, #Y, #Z\n    \n    -- Create a 3D array to store lengths of longest common subsequence\n    local L = {}\n    for i = 0, m do\n        L[i] = {}\n        for j = 0, n do\n            L[i][j] = {}\n            for k = 0, o do\n                L[i][j][k] = 0\n            end\n        end\n    end\n\n    -- Build the L[m+1][n+1][o+1] array in bottom up manner\n    for i = 1, m do\n        for j = 1, n do\n            for k = 1, o do\n                if X:sub(i, i) == Y:sub(j, j) and X:sub(i, i) == Z:sub(k, k) then\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else\n                    L[i][j][k] = math.max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                end\n            end\n        end\n    end\n\n    -- The length of the longest common subsequence is in L[m][n][o]\n    return L[m][n][o]\nend\n\n-- Example usage\nlocal X = \"AGGT12\"\nlocal Y = \"12TXAYB\"\nlocal Z = \"12XBA\"\nprint(\"Length of Longest Common Subsequence is \" .. lcs_of_three(X, Y, Z))\n```"}
{"name":"mbpp_748_capital_words_spaces","language":"lua","prompt":"-- Write a function to put spaces between words starting with capital letters in a given string.\nlocal function capital_words_spaces(str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_748_capital_words_spaces.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = capital_words_spaces\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('PythonProgrammingExamples'), 'Python Programming Examples')\n    lu.assertEquals(candidate('GetReadyToBeCodingFreak'), 'Get Ready To Be Coding Freak')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_748_capital_words_spaces","gpt_solution":"```lua\n-- Write a function to put spaces between words starting with capital letters in a given string.\nlocal function capital_words_spaces(str1)\n    return (str1:gsub(\"(%l)(%u)\", \"%1 %2\"))\nend\n\n-- Example usage\nlocal test_str = \"HelloWorldThisIsLua\"\nprint(capital_words_spaces(test_str))  -- Output: \"Hello World This Is Lua\"\n```"}
{"name":"mbpp_749_sort_numeric_strings","language":"lua","prompt":"-- Write a function to sort a given table of strings of numbers numerically. https:\/\/www.geeksforgeeks.org\/luathon-sort-numeric-strings-in-a-table\/\nlocal function sort_numeric_strings(nums_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_749_sort_numeric_strings.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_749_sort_numeric_strings","gpt_solution":"```lua\n-- Write a function to sort a given table of strings of numbers numerically. https:\/\/www.geeksforgeeks.org\/luathon-sort-numeric-strings-in-a-table\/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\n    return nums_str\nend\n\n-- Example usage\nlocal nums_str = {\"10\", \"3\", \"25\", \"7\", \"1\"}\nnums_str = sort_numeric_strings(nums_str)\n\nfor i, v in ipairs(nums_str) do\n    print(v)\nend\n```\n\nThis function sorts the given table of string numbers numerically by converting the strings to numbers and utilizing the `table.sort` function with a custom comparator. The sorted table is then returned."}
{"name":"mbpp_750_add_tuple","language":"lua","prompt":"-- Write a function to add the given table to the given table.\nlocal function add_tuple(test_list, test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_750_add_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_tuple\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {5, 6, 7, 9, 10})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {6, 7, 8, 10, 11})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {7, 8, 9, 11, 12})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_750_add_tuple","gpt_solution":"```lua\n-- Write a function to add the given tuple (table) to the given table.\nlocal function add_tuple(test_list, test_tup)\n    -- Ensure that the inputs are tables\n    if type(test_list) ~= \"table\" or type(test_tup) ~= \"table\" then\n        error(\"Both arguments must be tables\")\n    end\n\n    -- Append the elements of test_tup to test_list\n    for _, value in ipairs(test_tup) do\n        table.insert(test_list, value)\n    end\n    \n    return test_list\nend\n\n-- Example usage:\nlocal list = {1, 2, 3}\nlocal tuple = {4, 5}\nlocal result = add_tuple(list, tuple)\nfor i, v in ipairs(result) do\n    print(v)\nend\n```"}
{"name":"mbpp_751_check_min_heap","language":"lua","prompt":"-- Write a function to check if the given table represents min heap or not. https:\/\/www.geeksforgeeks.org\/how-to-check-if-a-given-table-represents-a-binary-heap\/\nlocal function check_min_heap(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_751_check_min_heap.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_751_check_min_heap","gpt_solution":"```lua\n-- Function to check if the given table represents a min heap\nlocal function check_min_heap(arr)\n    local n = #arr\n  \n    -- Function to ensure if subtree rooted at i is a min heap\n    local function is_min_heap(i)\n        -- If leaf node, return true\n        if i >= (math.floor(n \/ 2)) then\n            return true\n        end\n\n        -- Get left and right child indices\n        local left = 2 * i + 1\n        local right = 2 * i + 2\n\n        -- Check if the current node is smaller than its children\n        local left_check = left < n and arr[i] <= arr[left] or left >= n\n        local right_check = right < n and arr[i] <= arr[right] or right >= n\n\n        -- Check recursively for the left and right subtrees\n        return left_check and right_check and is_min_heap(left) and is_min_heap(right)\n    end\n\n    -- Initialize the process at the root node\n    return is_min_heap(0)\nend\n\n-- Example Usage\nlocal arr = {1, 3, 5, 7, 9, 8}\nprint(check_min_heap(arr))  -- Output: true\n```"}
{"name":"mbpp_752_jacobsthal_num","language":"lua","prompt":"-- Write a function to find the nth jacobsthal number. https:\/\/www.geeksforgeeks.org\/jacobsthal-and-jacobsthal-lucas-numbers\/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nlocal function jacobsthal_num(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_752_jacobsthal_num.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = jacobsthal_num\n    lu.assertEquals(candidate(5), 11)\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(4), 5)\n    lu.assertEquals(candidate(13), 2731)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_752_jacobsthal_num","gpt_solution":"```lua\nlocal function jacobsthal_num(n)\n    if n == 0 then\n        return 0\n    elseif n == 1 then\n        return 1\n    else\n        local a, b = 0, 1\n        for i = 2, n do\n            local c = b + 2 * a\n            a, b = b, c\n        end\n        return b\n    end\nend\n\n-- Example usage:\n-- print(jacobsthal_num(0))  -- Output: 0\n-- print(jacobsthal_num(1))  -- Output: 1\n-- print(jacobsthal_num(5))  -- Output: 11\n-- print(jacobsthal_num(10)) -- Output: 341\n```"}
{"name":"mbpp_753_min_k","language":"lua","prompt":"-- Write a function to find minimum k records from table table. https:\/\/www.geeksforgeeks.org\/luathon-find-minimum-k-records-from-table-table\/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_753_min_k.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_753_min_k","gpt_solution":"```lua\n-- Write a function to find minimum k records from table\n-- Reference: https:\/\/www.geeksforgeeks.org\/luathon-find-minimum-k-records-from-table-table\/\nlocal function min_k(test_list, K)\n    -- Sort the table in ascending order\n    table.sort(test_list)\n\n    -- Create a result table to store minimum k records\n    local result = {}\n\n    -- Iterate through the first K elements of sorted table\n    for i = 1, K do\n        -- Add each element to the result table\n        table.insert(result, test_list[i])\n    end\n\n    -- Return the result containing minimum K records\n    return result\nend\n\n-- Test the function\nlocal test_list = {4, 2, 6, 8, 1, 9}\nlocal K = 3\n\n-- Expected output: {1, 2, 4}\nlocal result = min_k(test_list, K)\n\n-- Print the result table\nfor i = 1, #result do\n    print(result[i])\nend\n```"}
{"name":"mbpp_754_extract_index_list","language":"lua","prompt":"-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_754_extract_index_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_754_extract_index_list","gpt_solution":"```lua\nlocal function extract_index_list(l1, l2, l3)\n    local common_elements = {}\n\n    -- Iterate through the tables assuming they are of the same length\n    local length = math.min(#l1, #l2, #l3)\n\n    for i = 1, length do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(common_elements, l1[i])\n        end\n    end\n\n    return common_elements\nend\n```\n\nThis function, `extract_index_list`, iterates over the tables `l1`, `l2`, and `l3`, comparing the elements at each index. If an element is the same in all three tables at the given index, it adds that element to the `common_elements` table, which is returned at the end. The function assumes all three tables have the same length, but it will only iterate up to the length of the shortest table to avoid any out-of-bounds errors."}
{"name":"mbpp_755_second_smallest","language":"lua","prompt":"-- Write a function to find the second smallest number in a table.\nlocal function second_smallest(numbers)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_755_second_smallest.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = second_smallest\n    lu.assertEquals(candidate({1, 2, -8, -2, 0, -2}), -2)\n    lu.assertEquals(candidate({1, 1, -0.5, 0, 2, -2, -2}), -0.5)\n    lu.assertEquals(candidate({2, 2}), None)\n    lu.assertEquals(candidate({2, 2, 2}), None)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_755_second_smallest","gpt_solution":"```lua\n-- Write a function to find the second smallest number in a table.\nlocal function second_smallest(numbers)\n    if #numbers < 2 then\n        error(\"Table must have at least two elements\")\n    end\n    \n    local min1, min2 = math.huge, math.huge\n    \n    for _, num in ipairs(numbers) do\n        if num < min1 then\n            min1, min2 = num, min1\n        elseif num < min2 and num > min1 then\n            min2 = num\n        end\n    end\n    \n    if min2 == math.huge then\n        error(\"There is no second smallest element\")\n    end\n    \n    return min2\nend\n\n-- Example usage\nlocal numbers = {3, 1, 4, 1, 5, 9}\nprint(second_smallest(numbers))  -- Output: 3\n```"}
{"name":"mbpp_756_text_match_zero_one","language":"lua","prompt":"-- Write a function that matches a string that has an 'a' followed by one or more 'b's. https:\/\/www.w3resource.com\/luathon-exercises\/re\/luathon-re-exercise-3.php\nlocal function text_match_zero_one(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_756_text_match_zero_one.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_zero_one\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\n    lu.assertEquals(candidate('dsabbbba'), true)\n    lu.assertEquals(candidate('asbbbba'), false)\n    lu.assertEquals(candidate('abaaa'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_756_text_match_zero_one","gpt_solution":"```lua\n-- Write a function that matches a string that has an 'a' followed by one or more 'b's. https:\/\/www.w3resource.com\/luathon-exercises\/re\/luathon-re-exercise-3.php\nlocal function text_match_zero_one(text)\n    -- Pattern to match 'a' followed by one or more 'b's\n    local pattern = \"^ab+$\"\n    if string.match(text, pattern) then\n        return true\n    else\n        return false\n    end\nend\n\n-- Example usage:\nprint(text_match_zero_one(\"ab\"))    -- true\nprint(text_match_zero_one(\"a\"))     -- false\nprint(text_match_zero_one(\"abb\"))   -- true\nprint(text_match_zero_one(\"ac\"))    -- false\n```"}
{"name":"mbpp_757_count_reverse_pairs","language":"lua","prompt":"-- Write a function to count the pairs of reverse strings in the given string table. https:\/\/www.geeksforgeeks.org\/luathon-program-to-count-the-pairs-of-reverse-strings\/\nlocal function count_reverse_pairs(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_757_count_reverse_pairs.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_reverse_pairs\n    lu.assertEquals(candidate({'julia', 'best', 'tseb', 'for', 'ailuj'}), 2)\n    lu.assertEquals(candidate({'geeks', 'best', 'for', 'skeeg'}), 1)\n    lu.assertEquals(candidate({'makes', 'best', 'sekam', 'for', 'rof'}), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_757_count_reverse_pairs","gpt_solution":"```lua\nlocal function count_reverse_pairs(test_list)\n    local count = 0\n    local seen = {}\n\n    for _, str in ipairs(test_list) do\n        local reversed_str = str:reverse()\n        \n        if seen[reversed_str] then\n            count = count + 1\n        end\n        \n        seen[str] = true\n    end\n\n    return count\nend\n\n-- Example usage\nlocal strings = {\"abc\", \"cba\", \"bca\", \"xyz\", \"zyx\", \"yxz\"}\nprint(count_reverse_pairs(strings))  -- Output: 2\n```"}
{"name":"mbpp_759_is_decimal","language":"lua","prompt":"-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_759_is_decimal.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_759_is_decimal","gpt_solution":"```lua\n-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n    if type(num) ~= \"string\" then\n        return false\n    end\n\n    local pattern = \"^%d+%.%d%d$\"\n    return num:match(pattern) ~= nil\nend\n\n-- Example usage:\nprint(is_decimal(\"12.34\"))    -- true\nprint(is_decimal(\"12.345\"))   -- false\nprint(is_decimal(\"12.3\"))     -- false\nprint(is_decimal(\"12\"))       -- false\nprint(is_decimal(\"abc.12\"))   -- false\n```"}
{"name":"mbpp_760_unique_Element","language":"lua","prompt":"-- Write a luathon function to check whether a table of numbers contains only one distinct element or not.\nlocal function unique_Element(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_760_unique_Element.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_Element\n    lu.assertEquals(candidate({1, 1, 1}), true)\n    lu.assertEquals(candidate({1, 2, 1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_760_unique_Element","gpt_solution":"```lua\n-- Function to check whether a table of numbers contains only one distinct element\nlocal function unique_Element(arr)\n    if #arr == 0 then\n        return true  -- An empty table is considered to have one unique element by definition\n    end\n\n    local first_element = arr[1]\n    for _, value in ipairs(arr) do\n        if value ~= first_element then\n            return false\n        end\n    end\n\n    return true\nend\n```"}
{"name":"mbpp_762_check_monthnumber_number","language":"lua","prompt":"-- Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nlocal function check_monthnumber_number(monthnum3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_762_check_monthnumber_number.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_monthnumber_number\n    lu.assertEquals(candidate(6), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(12), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_762_check_monthnumber_number","gpt_solution":"```lua\n-- Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nlocal function check_monthnumber_number(monthnum)\n    -- List of months with 30 days: April (4), June (6), September (9), and November (11)\n    local months_with_30_days = {4, 6, 9, 11}\n\n    for _, month in ipairs(months_with_30_days) do\n        if monthnum == month then\n            return true\n        end\n    end\n\n    return false\nend\n\n-- Testing the function\nprint(check_monthnumber_number(4))  -- Output: true\nprint(check_monthnumber_number(2))  -- Output: false\nprint(check_monthnumber_number(11)) -- Output: true\nprint(check_monthnumber_number(12)) -- Output: false\n```"}
{"name":"mbpp_763_find_min_diff","language":"lua","prompt":"-- Write a luathon function to find the minimum difference between any two elements in a given table. https:\/\/www.geeksforgeeks.org\/find-minimum-difference-pair\/\nlocal function find_min_diff(arr, n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_763_find_min_diff.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_min_diff\n    lu.assertEquals(candidate({1, 5, 3, 19, 18, 25}, 6), 1)\n    lu.assertEquals(candidate({4, 3, 2, 6}, 4), 1)\n    lu.assertEquals(candidate({30, 5, 20, 9}, 4), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_763_find_min_diff","gpt_solution":"```lua\n-- Write a luathon function to find the minimum difference between any two elements in a given table. https:\/\/www.geeksforgeeks.org\/find-minimum-difference-pair\/\nlocal function find_min_diff(arr, n)\n    if n < 2 then\n        return nil, \"Array should have at least 2 elements\"\n    end\n\n    table.sort(arr)\n    \n    local min_diff = math.huge\n    for i = 1, n - 1 do\n        local diff = arr[i + 1] - arr[i]\n        if diff < min_diff then\n            min_diff = diff\n        end\n    end\n\n    return min_diff\nend\n```"}
{"name":"mbpp_764_number_ctr","language":"lua","prompt":"-- Write a luathon function to count number of digits in a given string.\nlocal function number_ctr(str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_764_number_ctr.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = number_ctr\n    lu.assertEquals(candidate('program2bedone'), 1)\n    lu.assertEquals(candidate('3wonders'), 1)\n    lu.assertEquals(candidate('123'), 3)\n    lu.assertEquals(candidate('3wond-1ers2'), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_764_number_ctr","gpt_solution":"```lua\n-- Write a luathon function to count number of digits in a given string.\nlocal function number_ctr(str)\n    local count = 0\n    for i = 1, #str do\n        local char = str:sub(i, i)\n        if char:match(\"%d\") then\n            count = count + 1\n        end\n    end\n    return count\nend\n\n-- Example usage:\n-- print(number_ctr(\"Hello123\"))  -- Output: 3\n```"}
{"name":"mbpp_765_is_polite","language":"lua","prompt":"-- Write a function to find nth polite number. geeksforgeeks.org\/n-th-polite-number\/\nlocal function is_polite(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_765_is_polite.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_polite\n    lu.assertEquals(candidate(7), 11)\n    lu.assertEquals(candidate(4), 7)\n    lu.assertEquals(candidate(9), 13)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_765_is_polite","gpt_solution":"```lua\n-- Function to check if a number is polite\n-- Polite number is a number that can be expressed as the sum of two or more\n-- consecutive positive integers. All numbers except powers of 2 are polite numbers.\n\n-- Check if a number is not a power of 2\nlocal function is_polite(n)\n    if n < 2 then\n        return false\n    end\n    while n % 2 == 0 do\n        n = n \/ 2\n    end\n    return n > 1\nend\n\n-- Function to find the nth polite number\nlocal function nth_polite_number(n)\n    local count = 0\n    local number = 1\n\n    while count < n do\n        number = number + 1\n        if is_polite(number) then\n            count = count + 1\n        end\n    end\n\n    return number\nend\n\n-- Example usage\nlocal n = 5  -- Change this value to get the nth polite number for different n\nprint(\"The \" .. n .. \"th polite number is: \" .. nth_polite_number(n))\n```\n\nThis Lua code includes the `is_polite` function that checks if a given number is a polite number (not a power of 2), and the `nth_polite_number` function that finds the nth polite number by counting polite numbers up to the given `n`."}
{"name":"mbpp_766_pair_wise","language":"lua","prompt":"-- Write a function to return a table of all pairs of consecutive items in a given table.\nlocal function pair_wise(l1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_766_pair_wise.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pair_wise\n    lu.assertEquals(candidate({1, 1, 2, 3, 3, 4, 4, 5}), {{1, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), {{1, 5}, {5, 7}, {7, 9}, {9, 10}})\n    lu.assertEquals(candidate({5, 1, 9, 7, 10}), {{5, 1}, {1, 9}, {9, 7}, {7, 10}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_766_pair_wise","gpt_solution":"```lua\n-- Write a function to return a table of all pairs of consecutive items in a given table.\nlocal function pair_wise(l1)\n    local pairs = {}\n    for i = 1, #l1 - 1 do\n        table.insert(pairs, {l1[i], l1[i + 1]})\n    end\n    return pairs\nend\n\n-- Example usage\nlocal example_table = {1, 2, 3, 4, 5}\nlocal result = pair_wise(example_table)\nfor _, pair in ipairs(result) do\n    print(pair[1], pair[2])\nend\n```\n\nThis Lua function, `pair_wise`, takes a table `l1` as input and returns a new table containing pairs of consecutive items from the input table. For an input table `{1, 2, 3, 4, 5}`, the output table will contain pairs `{1, 2}`, `{2, 3}`, `{3, 4}`, and `{4, 5}`."}
{"name":"mbpp_767_get_pairs_count","language":"lua","prompt":"-- Write a luathon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a table of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_767_get_pairs_count.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_767_get_pairs_count","gpt_solution":"```lua\n-- Write a Luathon function to count the number of pairs whose sum is equal to \u2018sum\u2019. \n-- The function gets as input a table of numbers and the sum.\nlocal function get_pairs_count(arr, sum)\n    local count = 0\n    local hash_map = {}\n\n    for i = 1, #arr do\n        local complement = sum - arr[i]\n        if hash_map[complement] then\n            count = count + hash_map[complement]\n        end\n        if not hash_map[arr[i]] then\n            hash_map[arr[i]] = 0\n        end\n        hash_map[arr[i]] = hash_map[arr[i]] + 1\n    end\n\n    return count\nend\n```"}
{"name":"mbpp_769_Diff","language":"lua","prompt":"-- Write a luathon function to get the difference between two tables.\nlocal function Diff(li1, li2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_769_Diff.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Diff\n    lu.assertEquals(candidate({10, 15, 20, 25, 30, 35, 40}, {25, 40, 35}), {10, 20, 30, 15})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 1}), {2, 3, 4, 5, 6, 7})\n    lu.assertEquals(candidate({1, 2, 3}, {6, 7, 1}), {2, 3, 6, 7})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_769_Diff","gpt_solution":"```lua\n-- Write a Luathon function to get the difference between two tables.\nlocal function Diff(li1, li2)\n    -- Create a set for the second list for fast lookup\n    local set2 = {}\n    for _, value in ipairs(li2) do\n        set2[value] = true\n    end\n\n    -- Initialize the result table\n    local result = {}\n\n    -- Add elements from the first list that are not in the set of the second list\n    for _, value in ipairs(li1) do\n        if not set2[value] then\n            table.insert(result, value)\n        end\n    end\n\n    return result\nend\n\n-- Example usage:\n-- local t1 = {1, 2, 3, 4, 5}\n-- local t2 = {3, 4, 5, 6, 7}\n-- local diff = Diff(t1, t2)\n-- for _, v in ipairs(diff) do\n--     print(v)\n-- end\n```\n\nThis `Diff` function takes two tables `li1` and `li2` as input and returns a new table containing the elements that are present in the first table but not in the second table. The function utilizes a set for fast look-up to check for the existence of elements from the first list in the second list."}
{"name":"mbpp_770_odd_num_sum","language":"lua","prompt":"-- Write a luathon function to find the sum of fourth power of first n odd natural numbers.\nlocal function odd_num_sum(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_770_odd_num_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_num_sum\n    lu.assertEquals(candidate(2), 82)\n    lu.assertEquals(candidate(3), 707)\n    lu.assertEquals(candidate(4), 3108)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_770_odd_num_sum","gpt_solution":"```lua\n-- Write a Lua function to find the sum of the fourth power of the first n odd natural numbers.\nlocal function odd_num_sum(n)\n    local sum = 0\n    local count = 0\n    local num = 1\n    \n    while count < n do\n        sum = sum + num^4\n        count = count + 1\n        num = num + 2\n    end\n    \n    return sum\nend\n```"}
{"name":"mbpp_771_check_expression","language":"lua","prompt":"-- Write a function to check if the given expression is balanced or not. https:\/\/www.geeksforgeeks.org\/check-for-balanced-parentheses-in-an-expression\/\nlocal function check_expression(exp)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_771_check_expression.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_771_check_expression","gpt_solution":"```lua\n-- Write a function to check if the given expression is balanced or not. https:\/\/www.geeksforgeeks.org\/check-for-balanced-parentheses-in-an-expression\/\nlocal function check_expression(exp)\n    -- Table to keep track of matching parentheses\n    local matching_parentheses = {\n        [\")\"] = \"(\",\n        [\"]\"] = \"[\",\n        [\"}\"] = \"{\"\n    }\n    \n    -- Stack to keep track of open parentheses\n    local stack = {}\n    \n    -- Iterate over each character in the expression\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        \n        -- If the character is an opening bracket, push it onto the stack\n        if char == \"(\" or char == \"[\" or char == \"{\" then\n            table.insert(stack, char)\n        \n        -- If the character is a closing bracket\n        elseif char == \")\" or char == \"]\" or char == \"}\" then\n            -- If the stack is empty or the top of the stack doesn't match the closing bracket, it's unbalanced\n            if #stack == 0 or stack[#stack] ~= matching_parentheses[char] then\n                return false\n            end\n            \n            -- Pop the top of the stack as it matched the closing bracket\n            table.remove(stack)\n        end\n    end\n    \n    -- If the stack is empty at the end, the expression is balanced\n    return #stack == 0\nend\n\n-- Example usage:\nprint(check_expression(\"{ [ ( ) ] }\"))  -- Output: true\nprint(check_expression(\"{ [ ( ] ) }\"))  -- Output: false\n```"}
{"name":"mbpp_772_remove_length","language":"lua","prompt":"-- Write a function to remove all the words with k length in the given string.\nlocal function remove_length(test_str, K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_772_remove_length.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_length\n    lu.assertEquals(candidate('The person is most value tet', 3), 'person is most value')\n    lu.assertEquals(candidate('If you told me about this ok', 4), 'If you me about ok')\n    lu.assertEquals(candidate('Forces of darkeness is come into the play', 4), 'Forces of darkeness is the')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_772_remove_length","gpt_solution":"```lua\n-- Write a function to remove all the words with k length in the given string.\n\nlocal function remove_length(test_str, K)\n    -- Split the input string into words\n    local words = {}\n    for word in string.gmatch(test_str, \"%S+\") do\n        table.insert(words, word)\n    end\n    \n    -- Filter words that do not have length K\n    local result = {}\n    for _, word in ipairs(words) do\n        if #word ~= K then\n            table.insert(result, word)\n        end\n    end\n    \n    -- Concatenate the filtered words back into a single string\n    return table.concat(result, \" \")\nend\n\n-- Example Usage\nlocal input = \"This is a test string for removal\"\nlocal k = 2\nprint(remove_length(input, k))  -- Output: \"This test string for removal\"\n```\n\nIn the above code:\n1. We split the input string into words using `string.gmatch`.\n2. We then filter out words that have the specified length `K`.\n3. Finally, we concatenate the remaining words back into a string using `table.concat`.\n\nThis function does not require a `main` function as you requested."}
{"name":"mbpp_773_occurance_substring","language":"lua","prompt":"-- Write a function to find the occurrence and position of the substrings within a string. Return nil if there is no match.\nlocal function occurance_substring(text, pattern)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_773_occurance_substring.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = occurance_substring\n    lu.assertEquals(candidate('python programming, python language', 'python'), {'python', 0, 6})\n    lu.assertEquals(candidate('python programming,programming language', 'programming'), {'programming', 7, 18})\n    lu.assertEquals(candidate('python programming,programming language', 'language'), {'language', 31, 39})\n    lu.assertEquals(candidate('c++ programming, c++ language', 'python'), None)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_773_occurance_substring","gpt_solution":"```lua\nlocal function occurance_substring(text, pattern)\n    local result = {}\n    local startPos = 1\n\n    while true do\n        local startIdx, endIdx = string.find(text, pattern, startPos)\n        if not startIdx then\n            break\n        end\n        table.insert(result, {startIdx, endIdx})\n        startPos = endIdx + 1\n    end\n\n    if #result == 0 then\n        return nil\n    end\n\n    return result\nend\n```"}
{"name":"mbpp_775_odd_position","language":"lua","prompt":"-- Write a luathon function to check whether every odd index contains odd numbers of a given table.\nlocal function odd_position(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_775_odd_position.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_position\n    lu.assertEquals(candidate({2, 1, 4, 3, 6, 7, 6, 3}), true)\n    lu.assertEquals(candidate({4, 1, 2}), true)\n    lu.assertEquals(candidate({1, 2, 3}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_775_odd_position","gpt_solution":"```lua\n-- Write a luathon function to check whether every odd index contains odd numbers of a given table.\nlocal function odd_position(nums)\n  \n  -- Iterate over the table elements at odd indices\n  for i = 1, #nums, 2 do\n    -- Check if the element at odd index is not an odd number\n    if nums[i] % 2 == 0 then\n      return false\n    end\n  end\n  \n  -- If all elements at odd indices are odd numbers, return true\n  return true\nend\n```"}
{"name":"mbpp_776_count_vowels","language":"lua","prompt":"-- Write a function to count those characters which have vowels as their neighbors in the given string.\nlocal function count_vowels(test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_776_count_vowels.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_vowels\n    lu.assertEquals(candidate('bestinstareels'), 7)\n    lu.assertEquals(candidate('partofthejourneyistheend'), 12)\n    lu.assertEquals(candidate('amazonprime'), 5)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_776_count_vowels","gpt_solution":"```lua\nlocal function count_vowels(test_str)\n    local count = 0\n    local vowels = { a = true, e = true, i = true, o = true, u = true }\n\n    for i = 2, #test_str - 1 do\n        local char = test_str:sub(i, i)\n        local prev_char = test_str:sub(i - 1, i - 1)\n        local next_char = test_str:sub(i + 1, i + 1)\n\n        if vowels[prev_char:lower()] and vowels[next_char:lower()] then\n            count = count + 1\n        end\n    end\n\n    return count\nend\n\n-- Example usage:\nlocal str = \"abecidofu\"\nprint(count_vowels(str)) -- Output should consider only characters with vowels as their neighbors\n```\n\nThe `count_vowels` function iterates through the given string (excluding the first and last characters) and checks if each character has vowels as both its immediate neighbors. If so, it increments the counter. Finally, it returns the total count of such characters."}
{"name":"mbpp_777_find_sum","language":"lua","prompt":"-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_777_find_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_777_find_sum","gpt_solution":"```lua\n-- Write a luathon function to find the sum of non-repeated elements in a given table.\nlocal function find_sum(arr)\n    local element_count = {}\n    \n    -- Count the occurrences of each element in the table\n    for _, value in ipairs(arr) do\n        if element_count[value] then\n            element_count[value] = element_count[value] + 1\n        else\n            element_count[value] = 1\n        end\n    end\n\n    local sum = 0\n    -- Sum only the elements that appear exactly once\n    for value, count in pairs(element_count) do\n        if count == 1 then\n            sum = sum + value\n        end\n    end\n\n    return sum\nend\n\n-- Example usage:\nlocal example_table = {1, 2, 3, 2, 4, 5, 1}\nprint(find_sum(example_table))  -- Output will be 12 (3 + 4 + 5)\n```"}
{"name":"mbpp_778_pack_consecutive_duplicates","language":"lua","prompt":"-- Write a function to pack consecutive duplicates of a given table elements into subtables.\nlocal function pack_consecutive_duplicates(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_778_pack_consecutive_duplicates.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pack_consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {{0, 0}, {1}, {2}, {3}, {4, 4}, {5}, {6, 6, 6}, {7}, {8}, {9}, {4, 4}})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {{10, 10}, {15}, {19}, {18, 18}, {17}, {26, 26}, {17}, {18}, {10}})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {{'a', 'a'}, {'b'}, {'c'}, {'d', 'd'}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_778_pack_consecutive_duplicates","gpt_solution":"```lua\n-- Write a function to pack consecutive duplicates of a given table elements into subtables.\nlocal function pack_consecutive_duplicates(list1)\n    local result = {}\n    local current_subtable = {}\n\n    for i, v in ipairs(list1) do\n        if #current_subtable == 0 or v == current_subtable[#current_subtable] then\n            table.insert(current_subtable, v)\n        else\n            table.insert(result, current_subtable)\n            current_subtable = {v}\n        end\n    end\n\n    if #current_subtable > 0 then\n        table.insert(result, current_subtable)\n    end\n\n    return result\nend\n\n-- Test the function\nlocal input = {1, 1, 2, 1, 1, 3, 3, 4}\nlocal output = pack_consecutive_duplicates(input)\n\nfor i, sublist in ipairs(output) do\n    io.write(\"{ \")\n    for j, val in ipairs(sublist) do\n        io.write(val .. \" \")\n    end\n    io.write(\"}\\n\")\nend\n```\n\nThis code defines a function `pack_consecutive_duplicates` that takes a list and packs consecutive duplicates into subtables. Finally, it tests the function with an example input and prints the output."}
{"name":"mbpp_780_find_combinations","language":"lua","prompt":"-- Write a function to find the combinations of sums with tables in the given table table. https:\/\/www.geeksforgeeks.org\/luathon-combinations-of-sum-with-tables-in-table-table\/\nlocal function find_combinations(test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_780_find_combinations.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_combinations\n    lu.assertEquals(candidate({{2, 4}, {6, 7}, {5, 1}, {6, 10}}), {{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}})\n    lu.assertEquals(candidate({{3, 5}, {7, 8}, {6, 2}, {7, 11}}), {{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}})\n    lu.assertEquals(candidate({{4, 6}, {8, 9}, {7, 3}, {8, 12}}), {{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_780_find_combinations","gpt_solution":"Sure, below is the complete Lua code wrapped in markdown syntax to find the combinations of sums with tables in a given table of tables. \n\n```lua\n-- Function to find the combinations of sums with tables\nlocal function find_combinations(test_list)\n    local result = {}\n\n    -- Helper function to recursively find combinations\n    local function find_combinations_util(curr_comb, pos)\n        if pos > #test_list then\n            table.insert(result, curr_comb)\n            return\n        end\n        \n        for i = 1, #test_list[pos] do\n            local new_comb = {}\n            for _, v in ipairs(curr_comb) do\n                table.insert(new_comb, v)\n            end\n            table.insert(new_comb, test_list[pos][i])\n            find_combinations_util(new_comb, pos + 1)\n        end\n    end\n    \n    find_combinations_util({}, 1)\n    return result\nend\n\n-- Test example\nlocal test_list = {{2, 3, 5}, {2, 3}, {5, 6, 7}}\nlocal combinations = find_combinations(test_list)\n\n-- Print results\nfor _, comb in ipairs(combinations) do\n    for _, val in ipairs(comb) do\n        io.write(val, \" \")\n    end\n    io.write(\"\\n\")\nend\n```\n\nThis code defines a function `find_combinations` that takes a table of tables and finds all possible combinations of elements such that one element is picked from each table. It leverages a recursive helper function `find_combinations_util` to build combinations and store them in a result table. Finally, the code includes a test example to demonstrate its usage and prints the result."}
{"name":"mbpp_781_count_divisors","language":"lua","prompt":"-- Write a luathon function to check whether the count of divisors is even. https:\/\/www.w3resource.com\/luathon-exercises\/basic\/luathon-basic-1-exercise-24.php\nlocal function count_divisors(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_781_count_divisors.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_divisors\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(100), false)\n    lu.assertEquals(candidate(125), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_781_count_divisors","gpt_solution":"```lua\n-- Write a luathon function to check whether the count of divisors is even. https:\/\/www.w3resource.com\/luathon-exercises\/basic\/luathon-basic-1-exercise-24.php\nlocal function count_divisors(n)\n    local count = 0\n    for i = 1, n do\n        if n % i == 0 then\n            count = count + 1\n        end\n    end\n    return count % 2 == 0\nend\n\n-- Example usage:\nprint(count_divisors(12))  -- Should print true, since 12 has 6 divisors (1, 2, 3, 4, 6, 12)\nprint(count_divisors(13))  -- Should print false, since 13 has 2 divisors (1, 13)\n```"}
{"name":"mbpp_782_odd_length_sum","language":"lua","prompt":"-- Write a luathon function to find the sum of all odd length subtables. https:\/\/www.geeksforgeeks.org\/sum-of-all-odd-length-subtables\/\nlocal function odd_length_sum(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_782_odd_length_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_length_sum\n    lu.assertEquals(candidate({1, 2, 4}), 14)\n    lu.assertEquals(candidate({1, 2, 1, 2}), 15)\n    lu.assertEquals(candidate({1, 7}), 8)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_782_odd_length_sum","gpt_solution":"```lua\n-- Write a luathon function to find the sum of all odd length subtables. https:\/\/www.geeksforgeeks.org\/sum-of-all-odd-length-subtables\/\n\nlocal function odd_length_sum(arr)\n    local total_sum = 0\n    local n = #arr\n\n    for start = 1, n do\n        for length = 1, n - start + 1, 2 do  -- Iterate over odd lengths\n            local sub_sum = 0\n            for i = start, start + length - 1 do\n                sub_sum = sub_sum + arr[i]\n            end\n            total_sum = total_sum + sub_sum\n        end\n    end\n\n    return total_sum\nend\n\n-- Example Usage:\nlocal example = {1, 4, 2, 5, 3}\nprint(odd_length_sum(example))  -- Output should be 58\n```\n\nThis function `odd_length_sum` calculates the sum of all odd length subtables by iterating over all possible starting points and considering only odd lengths for the subtables. Subsequently, it adds up the elements of these odd length subtables to calculate the total sum."}
{"name":"mbpp_783_rgb_to_hsv","language":"lua","prompt":"-- Write a function to convert rgb color to hsv color. https:\/\/www.geeksforgeeks.org\/program-change-rgb-color-model-hsv-color-model\/\nlocal function rgb_to_hsv(r, g, b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_783_rgb_to_hsv.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rgb_to_hsv\n    lu.assertEquals(candidate(255, 255, 255), {0.0, 0.0, 100.0})\n    lu.assertEquals(candidate(0, 215, 0), {120.0, 100.0, 84.31372549019608})\n    lu.assertEquals(candidate(10, 215, 110), {149.26829268292684, 95.34883720930233, 84.31372549019608})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_783_rgb_to_hsv","gpt_solution":"```lua\n-- Write a function to convert rgb color to hsv color. https:\/\/www.geeksforgeeks.org\/program-change-rgb-color-model-hsv-color-model\/\nlocal function rgb_to_hsv(r, g, b)\n    -- Convert RGB range from 0-255 to 0-1\n    r, g, b = r \/ 255, g \/ 255, b \/ 255\n\n    -- Find the maximum and minimum values of the R, G and B components\n    local max_val = math.max(r, g, b)\n    local min_val = math.min(r, g, b)\n    local delta = max_val - min_val\n\n    local h, s, v = 0, 0, max_val\n\n    -- Compute the Saturation value\n    if max_val ~= 0 then\n        s = delta \/ max_val\n    else\n        s = 0\n        h = -1\n        return h, s, v\n    end\n\n    -- Compute the Hue value\n    if r == max_val then\n        h = (g - b) \/ delta\n    elseif g == max_val then\n        h = 2 + (b - r) \/ delta\n    else\n        h = 4 + (r - g) \/ delta\n    end\n\n    h = h * 60\n    if h < 0 then\n        h = h + 360\n    end\n\n    return h, s, v\nend\n```"}
{"name":"mbpp_784_mul_even_odd","language":"lua","prompt":"-- Write a function to find the product of first even and odd number of a given table.\nlocal function mul_even_odd(list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_784_mul_even_odd.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mul_even_odd\n    lu.assertEquals(candidate({1, 3, 5, 7, 4, 1, 6, 8}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), 10)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_784_mul_even_odd","gpt_solution":"```lua\n-- Write a function to find the product of first even and odd number of a given table.\nlocal function mul_even_odd(list1)\n  local first_even, first_odd\n\n  for _, v in ipairs(list1) do\n    if v % 2 == 0 and not first_even then\n      first_even = v\n    elseif v % 2 ~= 0 and not first_odd then\n      first_odd = v\n    end\n\n    if first_even and first_odd then\n      break\n    end\n  end\n\n  if first_even and first_odd then\n    return first_even * first_odd\n  else\n    return nil\n  end\nend\n\n-- Example usage:\nlocal list1 = {1, 3, 5, 8, 7, 6}\nprint(mul_even_odd(list1)) -- This will print 8 because 8 (first even) * 1 (first odd) = 8\n```\n\nThis function `mul_even_odd` iterates through a given list `list1` and finds the first even and odd numbers. Once both are found, it calculates and returns their product. If either the first even or the first odd number is not found, the function returns `nil`."}
{"name":"mbpp_785_tuple_str_int","language":"lua","prompt":"-- Write a function to convert table string to integer table.\nlocal function tuple_str_int(test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_785_tuple_str_int.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_str_int\n    lu.assertEquals(candidate('(7, 8, 9)'), {7, 8, 9})\n    lu.assertEquals(candidate('(1, 2, 3)'), {1, 2, 3})\n    lu.assertEquals(candidate('(4, 5, 6)'), {4, 5, 6})\n    lu.assertEquals(candidate('(7, 81, 19)'), {7, 81, 19})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_785_tuple_str_int","gpt_solution":"```lua\n-- Write a function to convert table string to integer table.\nlocal function tuple_str_int(test_str)\n    -- Remove the leading and trailing curly braces\n    test_str = test_str:match(\"{(.*)}\")\n\n    -- Split the string by comma and convert to integer\n    local int_table = {}\n    for num_str in test_str:gmatch(\"[^,]+\") do\n        table.insert(int_table, tonumber(num_str))\n    end\n\n    return int_table\nend\n\n-- Example usage:\nlocal input_str = \"{1,2,3,4,5}\"\nlocal result = tuple_str_int(input_str)\nfor _, v in ipairs(result) do\n    print(v)\nend\n```\n\nThis Lua function `tuple_str_int` takes a string representation of a table (like `\"{1,2,3,4,5}\"`) and converts it into a table of integers. The function first removes the curly braces from the string, splits the contents by commas, converts each substring to an integer, and stores them in a table which it finally returns. The example usage shows how to use the function and print the results."}
{"name":"mbpp_786_right_insertion","language":"lua","prompt":"-- Write a function to locate the right insertion point for a specified value in sorted order.\nlocal function right_insertion(a, x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_786_right_insertion.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_insertion\n    lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_786_right_insertion","gpt_solution":"```lua\n-- This function locates the right insertion point for a specified value x in a sorted list a.\n-- The right insertion point is where x would be placed in order to maintain the sorted order.\n-- If x is already present in the list, this will return the index after the last occurrence of x.\n\nlocal function right_insertion(a, x)\n    local left = 1\n    local right = #a + 1  -- initial right is one past the last index of the array\n\n    while left < right do\n        local mid = math.floor((left + right) \/ 2)\n        if a[mid] > x then\n            right = mid\n        else\n            left = mid + 1\n        end\n    end\n\n    return left\nend\n\n-- Example usage:\n-- sorted_list = {1, 2, 4, 4, 5}\n-- position = right_insertion(sorted_list, 4)\n-- print(position) -- Output will be 5, which is the index after the last 4\n```"}
{"name":"mbpp_787_text_match_three","language":"lua","prompt":"-- Write a function that matches a string that has an a followed by three 'b'.\nlocal function text_match_three(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_787_text_match_three.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_three\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\n    lu.assertEquals(candidate('caacabbbba'), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_787_text_match_three","gpt_solution":"```lua\n-- Write a function that matches a string that has an 'a' followed by three 'b'.\nlocal function text_match_three(text)\n    -- Check if the text matches the pattern \"abbb\"\n    if string.match(text, \"abbb\") then\n        return true\n    else\n        return false\n    end\nend\n\n-- Testing the function\nprint(text_match_three(\"abbb\"))       -- true\nprint(text_match_three(\"abb\"))        -- false\nprint(text_match_three(\"aabbb\"))      -- true\nprint(text_match_three(\"abbbb\"))      -- true\nprint(text_match_three(\"something else\"))  -- false\n```"}
{"name":"mbpp_788_new_tuple","language":"lua","prompt":"-- Write a function to create a new table from the given string and table.\nlocal function new_tuple(test_list, test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_788_new_tuple.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = new_tuple\n    lu.assertEquals(candidate({'WEB', 'is'}, 'best'), {'WEB', 'is', 'best'})\n    lu.assertEquals(candidate({'We', 'are'}, 'Developers'), {'We', 'are', 'Developers'})\n    lu.assertEquals(candidate({'Part', 'is'}, 'Wrong'), {'Part', 'is', 'Wrong'})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_788_new_tuple","gpt_solution":"```lua\n-- Write a function to create a new table from the given string and table.\nlocal function new_tuple(test_list, test_str)\n    -- Create a new table with the content of test_list\n    local new_table = {}\n\n    for i, v in ipairs(test_list) do\n        table.insert(new_table, v)\n    end\n    \n    -- Insert the test_str value at the end of the new table\n    table.insert(new_table, test_str)\n    \n    return new_table\nend\n```"}
{"name":"mbpp_790_even_position","language":"lua","prompt":"-- Write a luathon function to check whether every even index contains even numbers of a given table.\nlocal function even_position(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_790_even_position.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_position\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3}), false)\n    lu.assertEquals(candidate({2, 1, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_790_even_position","gpt_solution":"```lua\n-- Write a luathon function to check whether every even index contains even numbers of a given table.\nlocal function even_position(nums)\n    for i = 2, #nums, 2 do\n        if nums[i] % 2 ~= 0 then\n            return false\n        end\n    end\n    return true\nend\n```\n\nThis function `even_position` iterates over the elements of the input table `nums` at even indices (starting from index 2, since Lua uses 1-based indexing) and checks if they are even. If any element at an even index is odd, the function returns `false`. If all elements at even indices are even, the function returns `true`."}
{"name":"mbpp_791_remove_nested","language":"lua","prompt":"-- Write a function to remove tables from the given table.\nlocal function remove_nested(test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_791_remove_nested.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_nested\n    lu.assertEquals(candidate({1, 5, 7, {4, 6}, 10}), {1, 5, 7, 10})\n    lu.assertEquals(candidate({2, 6, 8, {5, 7}, 11}), {2, 6, 8, 11})\n    lu.assertEquals(candidate({3, 7, 9, {6, 8}, 12}), {3, 7, 9, 12})\n    lu.assertEquals(candidate({3, 7, 9, {6, 8}, {5, 12}, 12}), {3, 7, 9, 12})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_791_remove_nested","gpt_solution":"```lua\n-- This function takes a table and removes any nested tables within it.\nlocal function remove_nested(test_tup)\n    local result = {}\n    for k, v in pairs(test_tup) do\n        if type(v) ~= \"table\" then\n            result[k] = v\n        end\n    end\n    return result\nend\n\n-- Example usage\nlocal example = {\n    1,\n    \"string\",\n    {nested = \"table\"},\n    42,\n    another_table = {inside = \"another\"}\n}\n\nlocal flattened = remove_nested(example)\nfor k, v in pairs(flattened) do\n    print(k, v)\nend\n```\n\nThis `remove_nested` function iterates over each key-value pair in `test_tup` and checks if the value is not a table. If so, it adds the key-value pair to the result table. The function then returns the result table, which will only contain the non-table values from the original table."}
{"name":"mbpp_792_count_list","language":"lua","prompt":"-- Write a luathon function to count the number of tables in a given number of tables.\nlocal function count_list(input_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_792_count_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_list\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), 4)\n    lu.assertEquals(candidate({{1, 2}, {2, 3}, {4, 5}}), 3)\n    lu.assertEquals(candidate({{1, 0}, {2, 0}}), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_792_count_list","gpt_solution":"```lua\n-- Function to count the number of tables in a given list of tables\nlocal function count_list(input_list)\n    local count = 0\n    \n    for _, value in ipairs(input_list) do\n        if type(value) == \"table\" then\n            count = count + 1\n        end\n    end\n    \n    return count\nend\n\n-- Example usage\nlocal test_list = {\n    {1, 2, 3}, \n    {4, 5, 6}, \n    \"string\",\n    {7, 8, 9},\n    123,\n    true\n}\n\nprint(count_list(test_list))  -- Output: 3\n```"}
{"name":"mbpp_793_last","language":"lua","prompt":"-- Write a luathon function to find the last position of an element in a sorted table.\nlocal function last(arr, x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_793_last.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last\n    lu.assertEquals(candidate({1, 2, 3}, 1), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, 4}, 1), 2)\n    lu.assertEquals(candidate({2, 3, 2, 3, 6, 8, 9}, 3), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_793_last","gpt_solution":"```lua\n-- Function to find the last position of an element in a sorted table\nlocal function last(arr, x)\n    local left, right = 1, #arr\n    local result = -1\n    \n    while left <= right do\n        local mid = math.floor((left + right) \/ 2)\n        if arr[mid] == x then\n            result = mid\n            left = mid + 1 -- continue searching in the right half\n        elseif arr[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    \n    return result\nend\n\n-- Example usage:\n-- local example_table = {1, 2, 3, 3, 3, 4, 5}\n-- print(last(example_table, 3)) -- Output: 5\n```"}
{"name":"mbpp_794_text_starta_endb","language":"lua","prompt":"-- Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nlocal function text_starta_endb(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_794_text_starta_endb.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_starta_endb\n    lu.assertEquals(candidate('aabbbb'), true)\n    lu.assertEquals(candidate('aabAbbbc'), false)\n    lu.assertEquals(candidate('accddbbjjj'), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_794_text_starta_endb","gpt_solution":"```lua\n-- Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nlocal function text_starta_endb(text)\n    -- Check if the text matches the pattern\n    if string.match(text, \"^a.*b$\") then\n        return true\n    else\n        return false\n    end\nend\n```"}
{"name":"mbpp_796_return_sum","language":"lua","prompt":"-- Write function to find the sum of all items in the given table.\nlocal function return_sum(dict)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_796_return_sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = return_sum\n    lu.assertEquals(candidate({['a'] = 100, ['b'] = 200, ['c'] = 300}), 600)\n    lu.assertEquals(candidate({['a'] = 25, ['b'] = 18, ['c'] = 45}), 88)\n    lu.assertEquals(candidate({['a'] = 36, ['b'] = 39, ['c'] = 49}), 124)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_796_return_sum","gpt_solution":"```lua\n-- Write function to find the sum of all items in the given table.\nlocal function return_sum(dict)\n    -- Initialize sum to 0\n    local sum = 0\n\n    -- Iterate over all elements in the table\n    for _, value in pairs(dict) do\n        -- Add each element value to the sum\n        sum = sum + value\n    end\n\n    -- Return the final sum\n    return sum\nend\n```"}
{"name":"mbpp_797_sum_in_range","language":"lua","prompt":"-- Write a luathon function to find the sum of all odd natural numbers within the range l and r.\nlocal function sum_in_range(l, r)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_797_sum_in_range.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_in_range\n    lu.assertEquals(candidate(2, 5), 8)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7, 13), 40)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_797_sum_in_range","gpt_solution":"```lua\n-- Write a luathon function to find the sum of all odd natural numbers within the range l and r.\nlocal function sum_in_range(l, r)\n  local sum = 0\n  for i = l, r do\n    if i % 2 ~= 0 then\n      sum = sum + i\n    end\n  end\n  return sum\nend\n```\n\nThis function takes two parameters `l` and `r`, which define the range, and then calculates the sum of all odd natural numbers within that range. It uses a for loop to iterate through all numbers between `l` and `r`, checking if each number is odd, and if so, adding it to the sum. Finally, it returns the total sum."}
{"name":"mbpp_798__sum","language":"lua","prompt":"-- Write a luathon function to find the sum of a table.\nlocal function _sum(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_798__sum.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = _sum\n    lu.assertEquals(candidate({1, 2, 3}), 6)\n    lu.assertEquals(candidate({15, 12, 13, 10}), 50)\n    lu.assertEquals(candidate({0, 1, 2}), 3)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_798__sum","gpt_solution":"Certainly! Below is the completed Lua function to find the sum of a table:\n\n```lua\n-- Write a luathon function to find the sum of a table.\nlocal function _sum(arr)\n  local sum = 0\n  for _, value in ipairs(arr) do\n    sum = sum + value\n  end\n  return sum\nend\n```\n\nThis function takes an array `arr` as its argument and computes the sum of all elements in the array. The loop iterates over each element in the array, adding the element's value to the `sum` variable. Finally, it returns the computed sum."}
{"name":"mbpp_799_left_rotate","language":"lua","prompt":"-- Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlocal function left_rotate(n, d)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_799_left_rotate.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_rotate\n    lu.assertEquals(candidate(16, 2), 64)\n    lu.assertEquals(candidate(10, 2), 40)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(1, 3), 8)\n    lu.assertEquals(candidate(5, 3), 40)\n    lu.assertEquals(candidate(29, 3), 232)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_799_left_rotate","gpt_solution":"```lua\n-- Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlocal function left_rotate(n, d)\n    -- Limit the rotation to within 32 bits\n    d = d % 32\n\n    -- Perform the left-rotate operation and mask it to 32 bits\n    local rotated = (n << d) | (n >> (32 - d))\n    return rotated & 0xFFFFFFFF\nend\n\n-- Example usage:\n-- local result = left_rotate(0x12345678, 4)\n-- print(string.format(\"0x%08X\", result)) -- Should print the rotated result in hex\n```"}
{"name":"mbpp_800_remove_all_spaces","language":"lua","prompt":"-- Write a function to remove all whitespaces from a string.\nlocal function remove_all_spaces(text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_800_remove_all_spaces.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_all_spaces\n    lu.assertEquals(candidate('python  program'), 'pythonprogram')\n    lu.assertEquals(candidate('python   programming    language'), 'pythonprogramminglanguage')\n    lu.assertEquals(candidate('python                     program'), 'pythonprogram')\n    lu.assertEquals(candidate('   python                     program'), 'pythonprogram')\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_800_remove_all_spaces","gpt_solution":"```lua\n-- Write a function to remove all whitespaces from a string.\nlocal function remove_all_spaces(text)\n    -- Use gsub to replace all whitespace characters with an empty string\n    local result = text:gsub(\"%s+\", \"\")\n    return result\nend\n```\n\nThis function `remove_all_spaces` takes a string `text` as input and removes all whitespace characters from it using the `gsub` function in Lua. The `%s+` pattern matches one or more whitespace characters, and `gsub` replaces them with an empty string. The resultant string is then returned."}
{"name":"mbpp_801_test_three_equal","language":"lua","prompt":"-- Write a luathon function to count the number of equal numbers from three given integers.\nlocal function test_three_equal(x, y, z)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_801_test_three_equal.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = test_three_equal\n    lu.assertEquals(candidate(1, 1, 1), 3)\n    lu.assertEquals(candidate(-1, -2, -3), 0)\n    lu.assertEquals(candidate(1, 2, 2), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_801_test_three_equal","gpt_solution":"```lua\n-- Write a luathon function to count the number of equal numbers from three given integers.\nlocal function test_three_equal(x, y, z)\n    local count = 0\n\n    if x == y and y == z then\n        count = 3\n    elseif x == y or y == z or x == z then\n        count = 2\n    else\n        count = 0\n    end\n\n    return count\nend\n```"}
{"name":"mbpp_802_count_rotation","language":"lua","prompt":"-- Write a luathon function to count the number of rotations required to generate a sorted table. https:\/\/www.geeksforgeeks.org\/count-of-rotations-required-to-generate-a-sorted-table\/\nlocal function count_rotation(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_802_count_rotation.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_rotation\n    lu.assertEquals(candidate({3, 2, 1}), 1)\n    lu.assertEquals(candidate({4, 5, 1, 2, 3}), 2)\n    lu.assertEquals(candidate({7, 8, 9, 1, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 2, 3}), 0)\n    lu.assertEquals(candidate({1, 3, 2}), 2)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_802_count_rotation","gpt_solution":"```lua\nlocal function count_rotation(arr)\n  local n = #arr\n  local min_val = arr[1]\n  local min_index = 1\n\n  -- Finding the minimum element and its index\n  for i = 2, n do\n    if arr[i] < min_val then\n      min_val = arr[i]\n      min_index = i\n    end\n  end\n\n  -- The number of rotations required is the index of the minimum element\n  return min_index - 1\nend\n```\n\nThis function `count_rotation` searches for the minimum element in the array and determines how many rotations (leftward cyclic shifts) would be required to make the array sorted in non-decreasing order. The minimum element's 0-based index indicates the number of rotations needed."}
{"name":"mbpp_803_is_perfect_square","language":"lua","prompt":"-- Write a function to check whether the given number is a perfect square or not. https:\/\/www.geeksforgeeks.org\/check-if-given-number-is-perfect-square-in-cpp\/\nlocal function is_perfect_square(n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_803_is_perfect_square.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_perfect_square\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(36), true)\n    lu.assertEquals(candidate(14), false)\n    lu.assertEquals(candidate(196), true)\n    lu.assertEquals(candidate(125), false)\n    lu.assertEquals(candidate(15625), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_803_is_perfect_square","gpt_solution":"```lua\n-- Write a function to check whether the given number is a perfect square or not.\n-- https:\/\/www.geeksforgeeks.org\/check-if-given-number-is-perfect-square-in-cpp\/\nlocal function is_perfect_square(n)\n    -- A negative number cannot be a perfect square\n    if n < 0 then\n        return false\n    end\n\n    -- Calculate the integer part of the square root of n\n    local sqrt_n = math.floor(math.sqrt(n))\n    \n    -- Check if the square of the integer part is equal to n\n    if sqrt_n * sqrt_n == n then\n        return true\n    else\n        return false\n    end\nend\n\n-- Test cases\nprint(is_perfect_square(25))  -- true\nprint(is_perfect_square(3))   -- false\nprint(is_perfect_square(0))   -- true\nprint(is_perfect_square(1))   -- true\nprint(is_perfect_square(10))  -- false\n```\n\nThis Lua function `is_perfect_square` checks whether a given number `n` is a perfect square or not. It returns `true` if the number is a perfect square and `false` otherwise. Some test cases are provided to illustrate the usage of this function."}
{"name":"mbpp_804_is_product_even","language":"lua","prompt":"-- Write a function to check whether the product of numbers in a table is even or not.\nlocal function is_product_even(arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_804_is_product_even.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_product_even\n    lu.assertEquals(candidate({1, 2, 3}), true)\n    lu.assertEquals(candidate({1, 2, 1, 4}), true)\n    lu.assertEquals(candidate({1, 1}), false)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_804_is_product_even","gpt_solution":"```lua\n-- Write a function to check whether the product of numbers in a table is even or not.\nlocal function is_product_even(arr)\n    for _, num in ipairs(arr) do\n        if num % 2 == 0 then\n            return true\n        end\n    end\n    return false\nend\n```\n\nThis function iterates through the elements of the provided table `arr`. For each element, it checks if the number is even using the modulus operator (`%`). If an even number is found, the function immediately returns `true`. If no even numbers are found after checking all elements, it returns `false`. The presence of any even number guarantees that the product of the numbers in the table is even."}
{"name":"mbpp_805_max_sum_list","language":"lua","prompt":"-- Write a function that returns the table in a table of tables whose sum of elements is the highest.\nlocal function max_sum_list(lists)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_805_max_sum_list.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum_list\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {10, 11, 12})\n    lu.assertEquals(candidate({{3, 2, 1}, {6, 5, 4}, {12, 11, 10}}), {12, 11, 10})\n    lu.assertEquals(candidate({{2, 3, 1}}), {2, 3, 1})\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_805_max_sum_list","gpt_solution":"```lua\nlocal function max_sum_list(lists)\n    local max_sum = -math.huge\n    local max_sum_table = nil\n\n    for _, list in ipairs(lists) do\n        local sum = 0\n        for _, number in ipairs(list) do\n            sum = sum + number\n        end\n\n        if sum > max_sum then\n            max_sum = sum\n            max_sum_table = list\n        end\n    end\n\n    return max_sum_table\nend\n```\n\nThis function `max_sum_list` takes a table of tables `lists`, computes the sum of elements for each sub-table, and returns the sub-table with the highest sum. If two sub-tables have the same sum, the first one encountered is returned."}
{"name":"mbpp_806_max_run_uppercase","language":"lua","prompt":"-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_806_max_run_uppercase.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_806_max_run_uppercase","gpt_solution":"```lua\n-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n            if current_run > max_run then\n                max_run = current_run\n            end\n        else\n            current_run = 0\n        end\n    end\n\n    return max_run\nend\n```\n\nThis code defines a function `max_run_uppercase` that takes a string `test_str` as input and returns the length of the longest run of consecutive uppercase characters in that string. It iterates through each character of the string, checking if it is an uppercase letter. If it is, it increments the `current_run` counter. If not, it resets the counter. Throughout the iteration, it keeps track of the maximum run length encountered."}
{"name":"mbpp_807_first_odd","language":"lua","prompt":"-- Write a luathon function to find the first odd number in a given table of numbers.\nlocal function first_odd(nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_807_first_odd.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_odd\n    lu.assertEquals(candidate({1, 3, 5}), 1)\n    lu.assertEquals(candidate({2, 4, 1, 3}), 1)\n    lu.assertEquals(candidate({8, 9, 1}), 9)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_807_first_odd","gpt_solution":"```lua\n-- Write a luathon function to find the first odd number in a given table of numbers.\nlocal function first_odd(nums)\n  for _, num in ipairs(nums) do\n    if num % 2 ~= 0 then\n      return num\n    end\n  end\n  return nil  -- Return nil if no odd number is found\nend\n```\n\nThis function, `first_odd`, iterates through the given table `nums`. It checks each number to see if it is odd (i.e., not evenly divisible by 2). It returns the first odd number it encounters. If there are no odd numbers, it returns `nil`."}
{"name":"mbpp_808_check_K","language":"lua","prompt":"-- Write a function to check if the given tables contain the k or not.\nlocal function check_K(test_tup, K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_808_check_K.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_K\n    lu.assertEquals(candidate({10, 4, 5, 6, 8}, 6), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 7), false)\n    lu.assertEquals(candidate({7, 8, 9, 44, 11, 12}, 11), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_808_check_K","gpt_solution":"```lua\n-- Write a function to check if the given tables contain the k or not.\nlocal function check_K(test_tup, K)\n    for _, value in pairs(test_tup) do\n        if value == K then\n            return true\n        end\n    end\n    return false\nend\n\n-- Example usage:\n-- local test_tup = {1, 2, 3, 4, 5}\n-- local K = 3\n-- print(check_K(test_tup, K)) -- Output: true\n\n-- local K = 6\n-- print(check_K(test_tup, K)) -- Output: false\n```\n\nThis function `check_K` takes a table `test_tup` and an element `K`. It returns `true` if `K` is present in the table, otherwise it returns `false`."}
{"name":"mbpp_809_check_smaller","language":"lua","prompt":"-- Write a function to check if each element of second table is smaller than its corresponding element in the first table.\nlocal function check_smaller(test_tup1, test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_809_check_smaller.py","prompt_terminology":"reworded","tests":"lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_smaller\n    lu.assertEquals(candidate({1, 2, 3}, {2, 3, 4}), false)\n    lu.assertEquals(candidate({4, 5, 6}, {3, 4, 5}), true)\n    lu.assertEquals(candidate({11, 12, 13}, {10, 11, 12}), true)\nend\n\nos.exit(lu.LuaUnit.run())","stop_tokens":["\nlocal","\nfunction","\n--","\n\n"],"task_id":"mbpp_809_check_smaller","gpt_solution":"```lua\n-- Write a function to check if each element of second table is smaller than its corresponding element in the first table.\nlocal function check_smaller(test_tup1, test_tup2)\n    -- Check if the lengths of both tables are the same\n    if #test_tup1 ~= #test_tup2 then\n        return false\n    end\n\n    -- Iterate through the elements of both tables\n    for i = 1, #test_tup1 do\n        -- If an element in the second table is not smaller than the corresponding element in the first table, return false\n        if test_tup2[i] >= test_tup1[i] then\n            return false\n        end\n    end\n\n    -- If all elements in the second table are smaller than corresponding elements in the first table, return true\n    return true\nend\n```"}
