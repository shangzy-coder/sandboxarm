{"name":"mbpp_3_is_not_prime","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to identify non-prime numbers.\n    public static bool IsNotPrime(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_3_is_not_prime.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNotPrime((2L)) == (false));\n    Debug.Assert(IsNotPrime((10L)) == (true));\n    Debug.Assert(IsNotPrime((35L)) == (true));\n    Debug.Assert(IsNotPrime((37L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_3_is_not_prime","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a C# function to identify non-prime numbers.\n    public static bool IsNotPrime(long n) {\n        \/\/ Handle base cases\n        if (n <= 1) return true;  \/\/ 0 and 1 are not prime\n        if (n == 2) return false; \/\/ 2 is the only even prime number\n\n        \/\/ Check from 2 to the square root of n\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) return true;\n        }\n\n        \/\/ If no divisors were found, it is prime\n        return false;\n    }\n}\n```"}
{"name":"mbpp_4_heap_queue_largest","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    public static List<long> HeapQueueLargest(List<long> nums, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_4_heap_queue_largest.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (3L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L}))));\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (2L)).Equals((new List<long>(new long[]{(long)85L, (long)75L}))));\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (5L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L, (long)58L, (long)35L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_4_heap_queue_largest","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    public static List<long> HeapQueueLargest(List<long> nums, long n) {\n        if (nums == null || n <= 0) return new List<long>();\n\n        \/\/ Min heap to keep track of the n largest elements\n        SortedSet<(long value, int index)> minHeap = new SortedSet<(long value, int index)>();\n\n        \/\/ Natural order comparer for the set\n        var comparer = Comparer<(long value, int index)>.Create((a, b) => {\n            int cmp = a.value.CompareTo(b.value);\n            if (cmp == 0) {\n                \/\/ Ensure that all elements are considered by using the index as a tiebreaker\n                return a.index.CompareTo(b.index);\n            }\n            return cmp;\n        });\n\n        \/\/ Process each number in the list\n        for (int i = 0; i < nums.Count; i++) {\n            if (minHeap.Count < n) {\n                minHeap.Add((nums[i], i));\n            } else if (nums[i] > minHeap.Min.value) {\n                \/\/ Remove the smallest element and add the larger one\n                minHeap.Remove(minHeap.Min);\n                minHeap.Add((nums[i], i));\n            }\n        }\n\n        \/\/ Extract the values from the sorted set and sort in descending order\n        List<long> result = new List<long>(minHeap.Select(item => item.value));\n        result.Sort((a, b) => b.CompareTo(a));\n        return result;\n    }\n}\n```\n\nThis function `HeapQueueLargest` uses a min-heap (implemented with a `SortedSet` and a custom comparer to handle duplicate values correctly) to track the `n` largest elements from the input list of numbers. After processing all elements, the values in the min-heap are converted to a list and sorted in descending order before being returned."}
{"name":"mbpp_6_differ_At_One_Bit_Pos","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the two numbers differ at one bit position only or not.\n    public static bool DifferAtOneBitPos(long a, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_6_differ_At_One_Bit_Pos.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DifferAtOneBitPos((13L), (9L)) == (true));\n    Debug.Assert(DifferAtOneBitPos((15L), (8L)) == (false));\n    Debug.Assert(DifferAtOneBitPos((2L), (4L)) == (false));\n    Debug.Assert(DifferAtOneBitPos((2L), (3L)) == (true));\n    Debug.Assert(DifferAtOneBitPos((5L), (1L)) == (true));\n    Debug.Assert(DifferAtOneBitPos((1L), (5L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_6_differ_At_One_Bit_Pos","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the two numbers differ at one bit position only or not.\n    public static bool DifferAtOneBitPos(long a, long b) {\n        \/\/ XOR the two numbers to find the differing bits\n        long xorResult = a ^ b;\n        \/\/ Check if the result is a power of 2, meaning only one bit is different\n        return (xorResult != 0) && ((xorResult & (xorResult - 1)) == 0);\n    }\n}\n```\n\nThe function `DifferAtOneBitPos` computes the XOR of the two given numbers, `a` and `b`, and then checks if the result is a power of 2, which would indicate that exactly one bit differs between the two numbers. This condition is checked using the expression `(xorResult & (xorResult - 1)) == 0`. Additionally, it ensures that the XOR result is not zero to avoid false positives when the numbers are the same."}
{"name":"mbpp_8_square_nums","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find squares of individual elements in a list.\n    public static List<long> SquareNums(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_8_square_nums.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SquareNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L, (long)36L, (long)49L, (long)64L, (long)81L, (long)100L}))));\n    Debug.Assert(SquareNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L}))).Equals((new List<long>(new long[]{(long)100L, (long)400L, (long)900L}))));\n    Debug.Assert(SquareNums((new List<long>(new long[]{(long)12L, (long)15L}))).Equals((new List<long>(new long[]{(long)144L, (long)225L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_8_square_nums","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find squares of individual elements in a list.\n    public static List<long> SquareNums(List<long> nums) {\n        List<long> squaredNums = new List<long>();\n        foreach (long num in nums) {\n            squaredNums.Add(num * num);\n        }\n        return squaredNums;\n    }\n}\n```"}
{"name":"mbpp_9_find_Rotations","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n    public static long FindRotations(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_9_find_Rotations.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindRotations((\"aaaa\")) == (1L));\n    Debug.Assert(FindRotations((\"ab\")) == (2L));\n    Debug.Assert(FindRotations((\"abc\")) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_9_find_Rotations","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the minimum number of rotations (greater than 0) required to get the same string.\n    public static int FindRotations(string str) {\n        int n = str.Length;\n        \n        \/\/ Concatenate string with itself\n        string concatenated = str + str;\n\n        \/\/ Find the smallest rotation that is equivalent to the original string\n        for (int i = 1; i < n; i++) {\n            if (concatenated.Substring(i, n) == str) {\n                return i;\n            }\n        }\n\n        \/\/ If no rotation found\n        return n;\n    }\n}\n```\n\nThis code defines a `Problem` class with a `FindRotations` method that calculates the minimum number of rotations required to get the same string. The method operates by concatenating the input string with itself and searching for the first substring that matches the original string, indicating the number of rotations needed. If no such substring is found, the length of the string is returned."}
{"name":"mbpp_11_remove_Occ","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to remove first and last occurrence of a given character from the string.\n    public static string RemoveOcc(string s, string ch) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_11_remove_Occ.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveOcc((\"hello\"), (\"l\")).Equals((\"heo\")));\n    Debug.Assert(RemoveOcc((\"abcda\"), (\"a\")).Equals((\"bcd\")));\n    Debug.Assert(RemoveOcc((\"PHP\"), (\"P\")).Equals((\"H\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_11_remove_Occ","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a c# function to remove first and last occurrence of a given character from the string.\n    public static string RemoveOcc(string s, string ch) {\n        if (string.IsNullOrEmpty(s) || string.IsNullOrEmpty(ch)) {\n            return s;\n        }\n\n        char target = ch[0];\n        int firstIndex = s.IndexOf(target);\n        int lastIndex = s.LastIndexOf(target);\n\n        if (firstIndex != -1) {\n            s = s.Remove(firstIndex, 1);\n        }\n\n        if (lastIndex != -1 && lastIndex != firstIndex) {\n            s = s.Remove(lastIndex - 1, 1); \/\/ Adjust index due to first removal\n        }\n\n        return s;\n    }\n}\n```"}
{"name":"mbpp_12_sort_matrix","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static List<List<long>> SortMatrix(List<List<long>> M) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_12_sort_matrix.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_12_sort_matrix","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static List<List<long>> SortMatrix(List<List<long>> M) {\n        \/\/ Sort the matrix rows based on the sum of each row\n        return M.OrderBy(row => row.Sum()).ToList();\n    }\n}\n```"}
{"name":"mbpp_14_find_Volume","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the volume of a triangular prism.\n    public static long FindVolume(long l, long b, long h) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_14_find_Volume.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindVolume((10L), (8L), (6L)) == (240L));\n    Debug.Assert(FindVolume((3L), (2L), (2L)) == (6L));\n    Debug.Assert(FindVolume((1L), (2L), (1L)) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_14_find_Volume","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to find the volume of a triangular prism.\n    \/\/ The volume V of the triangular prism can be calculated using the formula:\n    \/\/ V = 0.5 * b * h * l\n    \/\/ Where:\n    \/\/ b is the base of the triangular face\n    \/\/ h is the height of the triangular face\n    \/\/ l is the length of the prism\n\n    public static long FindVolume(long l, long b, long h) {\n        return (long)(0.5 * b * h * l);\n    }\n}\n```"}
{"name":"mbpp_16_text_lowercase_underscore","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    public static bool TextLowercaseUnderscore(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_16_text_lowercase_underscore.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextLowercaseUnderscore((\"aab_cbbbc\")) == (true));\n    Debug.Assert(TextLowercaseUnderscore((\"aab_Abbbc\")) == (false));\n    Debug.Assert(TextLowercaseUnderscore((\"Aaab_abbbc\")) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_16_text_lowercase_underscore","gpt_solution":"```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    public static bool TextLowercaseUnderscore(string text) {\n        \/\/ Define the regular expression pattern.\n        string pattern = @\"^[a-z]+(_[a-z]+)*$\";\n        \n        \/\/ Use Regex to check if the input string matches the pattern.\n        return Regex.IsMatch(text, pattern);\n    }\n}\n```"}
{"name":"mbpp_17_square_perimeter","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that returns the perimeter of a square given its side length as input.\n    public static long SquarePerimeter(long a) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_17_square_perimeter.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SquarePerimeter((10L)) == (40L));\n    Debug.Assert(SquarePerimeter((5L)) == (20L));\n    Debug.Assert(SquarePerimeter((4L)) == (16L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_17_square_perimeter","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function that returns the perimeter of a square given its side length as input.\n    public static long SquarePerimeter(long a) {\n        \/\/ The perimeter of a square is calculated as 4 times the length of its side\n        return 4 * a;\n    }\n}\n```"}
{"name":"mbpp_18_remove_dirty_chars","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove characters from the first string which are present in the second string.\n    public static string RemoveDirtyChars(string str, string second_string) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_18_remove_dirty_chars.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDirtyChars((\"probasscurve\"), (\"pros\")).Equals((\"bacuve\")));\n    Debug.Assert(RemoveDirtyChars((\"digitalindia\"), (\"talent\")).Equals((\"digiidi\")));\n    Debug.Assert(RemoveDirtyChars((\"exoticmiles\"), (\"toxic\")).Equals((\"emles\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_18_remove_dirty_chars","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to remove characters from the first string which are present in the second string.\n    public static string RemoveDirtyChars(string str, string second_string) {\n        \/\/ Convert the second string to a hash set for O(1) lookups.\n        HashSet<char> charsToRemove = new HashSet<char>(second_string);\n        \n        \/\/ Use a StringBuilder to build the result string efficiently.\n        StringBuilder result = new StringBuilder();\n\n        \/\/ Loop through each character in the first string\n        foreach (char c in str) {\n            \/\/ Append the character to the result if it is not in the hash set\n            if (!charsToRemove.Contains(c)) {\n                result.Append(c);\n            }\n        }\n\n        \/\/ Convert the StringBuilder to a string and return it\n        return result.ToString();\n    }\n}\n```"}
{"name":"mbpp_19_test_duplicate","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_19_test_duplicate.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_19_test_duplicate","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find whether a given list of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n        HashSet<long> seenNumbers = new HashSet<long>();\n        foreach (long number in arraynums) {\n            if (seenNumbers.Contains(number)) {\n                return true; \/\/ Duplicate found\n            }\n            seenNumbers.Add(number);\n        }\n        return false; \/\/ No duplicates found\n    }\n}\n```"}
{"name":"mbpp_20_is_woodall","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if the given number is woodball or not.\n    public static bool IsWoodall(long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_20_is_woodall.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsWoodall((383L)) == (true));\n    Debug.Assert(IsWoodall((254L)) == (false));\n    Debug.Assert(IsWoodall((200L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_20_is_woodall","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to check if the given number is woodball or not.\n    public static bool IsWoodall(long x) {\n        if (x < 0) return false; \/\/ Woodall numbers are positive\n        \n        \/\/ Woodall number is of the form: n * 2^n - 1\n        for (long n = 1; ; n++) {\n            long woodallNumber = n * (1L << (int)n) - 1; \/\/ Using bit shifting for 2^n -> 1L << n\n            if (woodallNumber == x) return true;\n            if (woodallNumber > x) return false; \/\/ If the generated number is greater than x, x is not a Woodall number\n        }\n    }\n}\n```"}
{"name":"mbpp_56_checks","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check if a given number is one less than twice its reverse.\n    public static bool Checks(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_56_checks.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Checks((70L)) == (false));\n    Debug.Assert(Checks((23L)) == (false));\n    Debug.Assert(Checks((73L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_56_checks","gpt_solution":"```csharp\nusing System;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to check if a given number is one less than twice its reverse.\n    public static bool Checks(long n) {\n        \/\/ Convert the number to a string\n        string originalStr = n.ToString();\n        \n        \/\/ Reverse the string\n        char[] reversedCharArray = originalStr.ToCharArray();\n        Array.Reverse(reversedCharArray);\n        string reversedStr = new string(reversedCharArray);\n        \n        \/\/ Convert the reversed string back to an integer\n        long reversedNumber;\n        if (!long.TryParse(reversedStr, out reversedNumber)) {\n            \/\/ In case the reversed number is out of bounds for long type\n            return false;\n        }\n        \n        \/\/ Check if the number is one less than twice its reverse\n        return n == (2 * reversedNumber) - 1;\n    }\n}\n```"}
{"name":"mbpp_57_find_Max_Num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the largest number that can be formed with the given list of digits.\n    public static long FindMaxNum(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_57_find_Max_Num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (321L));\n    Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)1L}))) == (6541L));\n    Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)9L}))) == (9321L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_57_find_Max_Num","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a csharp function to find the largest number that can be formed with the given list of digits.\n    public static long FindMaxNum(List<long> arr) {\n        \/\/ Convert each number in the list to its string representation\n        List<string> stringArr = arr.Select(n => n.ToString()).ToList();\n\n        \/\/ Sort the list using a custom comparer, sorting by concatenated results\n        stringArr.Sort((x, y) => (y + x).CompareTo(x + y));\n\n        \/\/ Join the sorted list to form the largest number\n        string largestNumStr = string.Join(\"\", stringArr);\n\n        \/\/ Convert the result back to a long\n        return long.Parse(largestNumStr);\n    }\n}\n```"}
{"name":"mbpp_58_opposite_Signs","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the given two integers have opposite sign or not.\n    public static bool OppositeSigns(long x, long y) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_58_opposite_Signs.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OppositeSigns((1L), (-2L)) == (true));\n    Debug.Assert(OppositeSigns((3L), (2L)) == (false));\n    Debug.Assert(OppositeSigns((-10L), (-10L)) == (false));\n    Debug.Assert(OppositeSigns((-2L), (2L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_58_opposite_Signs","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to check whether the given two integers have opposite signs or not.\n    public static bool OppositeSigns(long x, long y) {\n        \/\/ XORing x and y and then checking the sign bit.\n        return (x ^ y) < 0;\n    }\n}\n```"}
{"name":"mbpp_59_is_octagonal","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the nth octagonal number.\n    public static long IsOctagonal(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_59_is_octagonal.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsOctagonal((5L)) == (65L));\n    Debug.Assert(IsOctagonal((10L)) == (280L));\n    Debug.Assert(IsOctagonal((15L)) == (645L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_59_is_octagonal","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the nth octagonal number.\n    public static long IsOctagonal(long n) {\n        if (n <= 0)\n            throw new ArgumentException(\"n must be a positive integer.\");\n\n        \/\/ Octagonal number formula: n(3n - 2)\n        return n * (3 * n - 2);\n    }\n}\n```"}
{"name":"mbpp_61_count_Substrings","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of substrings with the sum of digits equal to their length.\n    public static long CountSubstrings(string s) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_61_count_Substrings.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSubstrings((\"112112\")) == (6L));\n    Debug.Assert(CountSubstrings((\"111\")) == (6L));\n    Debug.Assert(CountSubstrings((\"1101112\")) == (12L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_61_count_Substrings","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to count the number of substrings with the sum of digits equal to their length.\n    public static long CountSubstrings(string s) {\n        long count = 0;\n\n        \/\/ Traverse all substrings\n        for (int start = 0; start < s.Length; start++) {\n            int sumOfDigits = 0;\n            for (int end = start; end < s.Length; end++) {\n                \/\/ Sum the digits in the substring from start to end\n                sumOfDigits += s[end] - '0';\n                if (sumOfDigits == (end - start + 1)) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n}\n```"}
{"name":"mbpp_62_smallest_num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find smallest number in a list.\n    public static long SmallestNum(List<long> xs) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_62_smallest_num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SmallestNum((new List<long>(new long[]{(long)10L, (long)20L, (long)1L, (long)45L, (long)99L}))) == (1L));\n    Debug.Assert(SmallestNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (1L));\n    Debug.Assert(SmallestNum((new List<long>(new long[]{(long)45L, (long)46L, (long)50L, (long)60L}))) == (45L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_62_smallest_num","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    \/\/ Write a C# function to find the smallest number in a list.\n    public static long SmallestNum(List<long> xs)\n    {\n        if (xs == null || xs.Count == 0)\n        {\n            throw new ArgumentException(\"The list should not be null or empty\");\n        }\n\n        long smallest = xs[0];\n        foreach (long num in xs)\n        {\n            if (num < smallest)\n            {\n                smallest = num;\n            }\n        }\n\n        return smallest;\n    }\n}\n```"}
{"name":"mbpp_63_max_difference","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the maximum difference between available pairs in the given tuple list.\n    public static long MaxDifference(List<Tuple<long, long>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_63_max_difference.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 5L), (Tuple<long, long>)Tuple.Create(1L, 7L), (Tuple<long, long>)Tuple.Create(10L, 3L), (Tuple<long, long>)Tuple.Create(1L, 2L)}))) == (7L));\n    Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 6L), (Tuple<long, long>)Tuple.Create(2L, 17L), (Tuple<long, long>)Tuple.Create(9L, 13L), (Tuple<long, long>)Tuple.Create(11L, 12L)}))) == (15L));\n    Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(12L, 35L), (Tuple<long, long>)Tuple.Create(21L, 27L), (Tuple<long, long>)Tuple.Create(13L, 23L), (Tuple<long, long>)Tuple.Create(41L, 22L)}))) == (23L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_63_max_difference","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the maximum difference between available pairs in the given tuple list.\n    public static long MaxDifference(List<Tuple<long, long>> test_list) {\n        if (test_list == null || test_list.Count == 0)\n            throw new ArgumentException(\"The list cannot be null or empty.\");\n\n        long maxDifference = long.MinValue;\n\n        foreach (var tuple in test_list) {\n            long difference = Math.Abs(tuple.Item1 - tuple.Item2);\n            if (difference > maxDifference)\n                maxDifference = difference;\n        }\n\n        return maxDifference;\n    }\n}\n```"}
{"name":"mbpp_64_subject_marks","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort a list of tuples using the second value of each tuple.\n    public static List<Tuple<string, long>> SubjectMarks(List<Tuple<string, long>> subjectmarks) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_64_subject_marks.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"English\", 88L), (Tuple<string, long>)Tuple.Create(\"Science\", 90L), (Tuple<string, long>)Tuple.Create(\"Maths\", 97L), (Tuple<string, long>)Tuple.Create(\"Social sciences\", 82L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Social sciences\", 82L), (Tuple<string, long>)Tuple.Create(\"English\", 88L), (Tuple<string, long>)Tuple.Create(\"Science\", 90L), (Tuple<string, long>)Tuple.Create(\"Maths\", 97L)}))));\n    Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Telugu\", 49L), (Tuple<string, long>)Tuple.Create(\"Hindhi\", 54L), (Tuple<string, long>)Tuple.Create(\"Social\", 33L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Social\", 33L), (Tuple<string, long>)Tuple.Create(\"Telugu\", 49L), (Tuple<string, long>)Tuple.Create(\"Hindhi\", 54L)}))));\n    Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Physics\", 96L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 97L), (Tuple<string, long>)Tuple.Create(\"Biology\", 45L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Biology\", 45L), (Tuple<string, long>)Tuple.Create(\"Physics\", 96L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 97L)}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_64_subject_marks","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to sort a list of tuples using the second value of each tuple.\n    public static List<Tuple<string, long>> SubjectMarks(List<Tuple<string, long>> subjectmarks) {\n        \/\/ Sort the list of tuples based on the second value of each tuple.\n        return subjectmarks.OrderBy(tuple => tuple.Item2).ToList();\n    }\n}\n```\n\nThis code defines a class `Problem` with a static method `SubjectMarks` that takes a list of tuples of type `<string, long>` and returns a list of tuples sorted by the second value (the `long` value) in each tuple using LINQ's `OrderBy` method."}
{"name":"mbpp_66_pos_count","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of positive numbers in a list.\n    public static long PosCount(List<long> list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_66_pos_count.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PosCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L, (long)-4L}))) == (2L));\n    Debug.Assert(PosCount((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)-1L}))) == (3L));\n    Debug.Assert(PosCount((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_66_pos_count","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function to count the number of positive numbers in a list.\n    public static long PosCount(List<long> list) {\n        long count = 0;\n        foreach (long number in list) {\n            if (number > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_67_bell_number","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the number of ways to partition a set of Bell numbers.\n    public static long BellNumber(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_67_bell_number.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BellNumber((2L)) == (2L));\n    Debug.Assert(BellNumber((10L)) == (115975L));\n    Debug.Assert(BellNumber((56L)) == (6775685320645824322581483068371419745979053216268760300L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_67_bell_number","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the number of ways to partition a set of Bell numbers.\n    public static long BellNumber(long n) {\n        long[,] bell = new long[n+1,n+1];\n \n        \/\/ Initialize the first Bell number\n        bell[0, 0] = 1;\n \n        for (int i=1; i<=n; i++)\n        {\n            \/\/ Explicitly put the last element of\n            \/\/ previous row at the beginning of current row\n            bell[i,0] = bell[i-1,i-1];\n \n            \/\/ Fill the rest of the current row\n            for (int j=1; j<=i; j++)\n                bell[i,j] = bell[i-1,j-1] + bell[i,j-1];\n        }\n \n        return bell[n,0];\n    }\n}\n```"}
{"name":"mbpp_68_is_Monotonic","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_68_is_Monotonic.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_68_is_Monotonic","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csthon function to check whether the given list is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n        if (A == null || A.Count == 0) {\n            return true;\n        }\n\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\n        for (int i = 1; i < A.Count; i++) {\n            if (A[i] > A[i - 1]) {\n                isDecreasing = false;\n            }\n            if (A[i] < A[i - 1]) {\n                isIncreasing = false;\n            }\n        }\n\n        return isIncreasing || isDecreasing;\n    }\n}\n```"}
{"name":"mbpp_69_is_sublist","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether a list contains the given sublist or not.\n    public static bool IsSublist(List<long> l, List<long> s) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_69_is_sublist.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)3L, (long)7L}))) == (false));\n    Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)4L, (long)3L}))) == (true));\n    Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)1L, (long)6L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_69_is_sublist","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check whether a list contains the given sublist or not.\n    public static bool IsSublist(List<long> l, List<long> s) {\n        if (s.Count == 0) return true; \/\/ An empty sublist is always considered to be present\n        if (l.Count < s.Count) return false; \/\/ If the main list is smaller than the sublist, it's impossible\n\n        for (int i = 0; i <= l.Count - s.Count; i++) {\n            bool match = true;\n            for (int j = 0; j < s.Count; j++) {\n                if (l[i + j] != s[j]) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) return true;\n        }\n        return false;\n    }\n}\n```"}
{"name":"mbpp_70_get_equal","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find whether all the given lists have equal length or not.\n    public static bool GetEqual(List<List<long>> Input) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_70_get_equal.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)22L, (long)33L}), (List<long>)new List<long>(new long[]{(long)44L, (long)55L, (long)66L})}))) == (true));\n    Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L})}))) == (false));\n    Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L})}))) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_70_get_equal","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find whether all the given lists have equal length or not.\n    public static bool GetEqual(List<List<long>> Input) {\n        if (Input == null || Input.Count == 0) {\n            return true;\n        }\n\n        int length = Input[0].Count;\n        foreach (var list in Input) {\n            if (list.Count != length) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}\n```"}
{"name":"mbpp_71_comb_sort","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort a list of elements.\n    public static List<long> CombSort(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_71_comb_sort.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)5L, (long)15L, (long)37L, (long)25L, (long)79L}))).Equals((new List<long>(new long[]{(long)5L, (long)15L, (long)25L, (long)37L, (long)79L}))));\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)41L, (long)32L, (long)15L, (long)19L, (long)22L}))).Equals((new List<long>(new long[]{(long)15L, (long)19L, (long)22L, (long)32L, (long)41L}))));\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)99L, (long)15L, (long)13L, (long)47L}))).Equals((new List<long>(new long[]{(long)13L, (long)15L, (long)47L, (long)99L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_71_comb_sort","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to sort a list of elements.\n    public static List<long> CombSort(List<long> nums) {\n        int gap = nums.Count;\n        bool swapped = true;\n        while (gap != 1 || swapped) {\n            gap = GetNextGap(gap);\n            swapped = false;\n            for (int i = 0; i < nums.Count - gap; i++) {\n                if (nums[i] > nums[i + gap]) {\n                    long temp = nums[i];\n                    nums[i] = nums[i + gap];\n                    nums[i + gap] = temp;\n                    swapped = true;\n                }\n            }\n        }\n        return nums;\n    }\n\n    private static int GetNextGap(int gap) {\n        gap = (gap * 10) \/ 13;\n        if (gap < 1) {\n            return 1;\n        }\n        return gap;\n    }\n}\n```"}
{"name":"mbpp_72_dif_Square","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the given number can be represented as the difference of two squares or not.\n    public static bool DifSquare(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_72_dif_Square.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DifSquare((5L)) == (true));\n    Debug.Assert(DifSquare((10L)) == (false));\n    Debug.Assert(DifSquare((15L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_72_dif_Square","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Function to check whether the given number can be represented as the difference of two squares or not.\n    public static bool DifSquare(long n) {\n        \/\/ A number can be expressed as the difference of two squares if and only if it is not of the form 4k+2\n        \/\/ where k is a whole number. All other numbers can be expressed as the difference of two squares.\n        \n        if (n < 0) return false; \/\/ Handling negative numbers\n\n        return n % 4 != 2;\n    }\n}\n```\n\nThis code defines a method `DifSquare` that checks if a given number `n` can be represented as the difference of two squares. It uses the mathematical property that a number can be expressed as the difference of two squares if and only if it is not of the form \\(4k + 2\\) for any non-negative integer \\(k\\). The method deals only with non-negative integers."}
{"name":"mbpp_74_is_samepatterns","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether it follows the sequence given in the patterns list.\n    public static bool IsSamepatterns(List<string> colors, List<string> patterns) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_74_is_samepatterns.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"green\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\"}))) == (true));\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"greenn\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\"}))) == (false));\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"greenn\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\"}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_74_is_samepatterns","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to check whether it follows the sequence given in the patterns list.\n    public static bool IsSamepatterns(List<string> colors, List<string> patterns) {\n        if (colors.Count != patterns.Count)\n            return false;\n\n        Dictionary<string, string> colorToPatternMap = new Dictionary<string, string>();\n        Dictionary<string, string> patternToColorMap = new Dictionary<string, string>();\n\n        for (int i = 0; i < colors.Count; i++) {\n            string color = colors[i];\n            string pattern = patterns[i];\n\n            if (colorToPatternMap.ContainsKey(color)) {\n                if (colorToPatternMap[color] != pattern)\n                    return false;\n            } else {\n                colorToPatternMap[color] = pattern;\n            }\n\n            if (patternToColorMap.ContainsKey(pattern)) {\n                if (patternToColorMap[pattern] != color)\n                    return false;\n            } else {\n                patternToColorMap[pattern] = color;\n            }\n        }\n\n        return true;\n    }\n}\n```\n\nExplanation:\n- We first check if the lengths of `colors` and `patterns` are different; if they are, the function immediately returns `false` because they cannot be mapped one-to-one.\n- We then create two dictionaries: one to map colors to patterns (`colorToPatternMap`) and another to map patterns to colors (`patternToColorMap`).\n- We iterate through both lists simultaneously.\n  - For each color and pattern, we check:\n    - If the color has already been mapped to a different pattern, we return `false`.\n    - If the pattern has already been mapped to a different color, we return `false`.\n  - If not in the maps, we insert the color-pattern and pattern-color pair into the respective dictionaries.\n- If all pairs match their expected mappings, the function returns `true`."}
{"name":"mbpp_75_find_tuples","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    public static List<Tuple<long, long, long>> FindTuples(List<Tuple<long, long, long>> test_list, long K) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_75_find_tuples.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(6L, 24L, 12L), (Tuple<long, long, long>)Tuple.Create(7L, 9L, 6L), (Tuple<long, long, long>)Tuple.Create(12L, 18L, 21L)})), (6L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(6L, 24L, 12L)}))));\n    Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(5L, 25L, 30L), (Tuple<long, long, long>)Tuple.Create(4L, 2L, 3L), (Tuple<long, long, long>)Tuple.Create(7L, 8L, 9L)})), (5L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(5L, 25L, 30L)}))));\n    Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(7L, 9L, 16L), (Tuple<long, long, long>)Tuple.Create(8L, 16L, 4L), (Tuple<long, long, long>)Tuple.Create(19L, 17L, 18L)})), (4L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(8L, 16L, 4L)}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_75_find_tuples","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    public static List<Tuple<long, long, long>> FindTuples(List<Tuple<long, long, long>> test_list, long K) {\n        \/\/ Create a list to store the results\n        List<Tuple<long, long, long>> result = new List<Tuple<long, long, long>>();\n        \n        \/\/ Iterate through each tuple in the test list\n        foreach (var tuple in test_list) {\n            \/\/ Check if all elements in the tuple are divisible by K\n            if (tuple.Item1 % K == 0 && tuple.Item2 % K == 0 && tuple.Item3 % K == 0) {\n                \/\/ Add the tuple to the result list if the condition is met\n                result.Add(tuple);\n            }\n        }\n        \n        \/\/ Return the list of tuples that have all elements divisible by K\n        return result;\n    }\n}\n```"}
{"name":"mbpp_77_is_Diff","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find whether a number is divisible by 11.\n    public static bool IsDiff(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_77_is_Diff.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsDiff((12345L)) == (false));\n    Debug.Assert(IsDiff((1212112L)) == (true));\n    Debug.Assert(IsDiff((1212L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_77_is_Diff","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find whether a number is divisible by 11.\n    public static bool IsDivisibleBy11(long n) {\n        n = Math.Abs(n); \/\/ Work with positive equivalent for simplicity\n        int sumOddPositions = 0;\n        int sumEvenPositions = 0;\n        \n        bool isOdd = true;\n        \n        while (n > 0) {\n            int digit = (int)(n % 10);\n            n \/= 10;\n\n            if (isOdd) {\n                sumOddPositions += digit;\n            } else {\n                sumEvenPositions += digit;\n            }\n\n            isOdd = !isOdd;\n        }\n\n        int difference = Math.Abs(sumOddPositions - sumEvenPositions);\n        return difference % 11 == 0;\n    }\n}\n```"}
{"name":"mbpp_79_word_len","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the length of the word is odd or not.\n    public static bool WordLen(string s) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_79_word_len.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordLen((\"Hadoop\")) == (false));\n    Debug.Assert(WordLen((\"great\")) == (true));\n    Debug.Assert(WordLen((\"structure\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_79_word_len","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a c# function to check whether the length of the word is odd or not.\n    public static bool WordLen(string s) {\n        \/\/ Check if the length of the string is odd\n        return s.Length % 2 != 0;\n    }\n}\n```"}
{"name":"mbpp_80_tetrahedral_number","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the nth tetrahedral number.\n    public static long TetrahedralNumber(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_80_tetrahedral_number.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TetrahedralNumber((5L)) == (35L));\n    Debug.Assert(TetrahedralNumber((6L)) == (56L));\n    Debug.Assert(TetrahedralNumber((7L)) == (84L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_80_tetrahedral_number","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the nth tetrahedral number.\n    public static long TetrahedralNumber(long n) {\n        if (n < 1) {\n            throw new ArgumentOutOfRangeException(nameof(n), \"n must be a positive integer\");\n        }\n        return (n * (n + 1) * (n + 2)) \/ 6;\n    }\n}\n```\n\nThis code defines a class `Problem` with a method `TetrahedralNumber` that calculates the nth tetrahedral number using the formula `n * (n + 1) * (n + 2) \/ 6`. If `n` is less than 1, it throws an `ArgumentOutOfRangeException`."}
{"name":"mbpp_83_get_Char","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    public static string GetChar(string strr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_83_get_Char.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetChar((\"abc\")).Equals((\"f\")));\n    Debug.Assert(GetChar((\"gfg\")).Equals((\"t\")));\n    Debug.Assert(GetChar((\"ab\")).Equals((\"c\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_83_get_Char","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    public static string GetChar(string strr) {\n        int sum = 0;\n        \n        \/\/ Sum the ASCII values of all characters\n        for (int i = 0; i < strr.Length; i++) {\n            sum += (int)strr[i];\n        }\n        \n        \/\/ Find the result of sum modulo 26\n        int mod = sum % 26;\n        \n        \/\/ Convert the modulo result to the corresponding character\n        char result = (char)('A' + mod);\n        \n        return result.ToString();\n    }\n}\n```"}
{"name":"mbpp_84_sequence","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the nth number in the newman conway sequence.\n    public static long Sequence(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_84_sequence.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Sequence((10L)) == (6L));\n    Debug.Assert(Sequence((2L)) == (1L));\n    Debug.Assert(Sequence((3L)) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_84_sequence","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the nth number in the newman conway sequence.\n    public static long Sequence(long n) {\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n\n        long[] sequence = new long[n + 1];\n        sequence[1] = 1;\n        sequence[2] = 1;\n\n        for (long i = 3; i <= n; i++) {\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]];\n        }\n\n        return sequence[n];\n    }\n}\n```"}
{"name":"mbpp_86_centered_hexagonal_number","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find nth centered hexagonal number.\n    public static long CenteredHexagonalNumber(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_86_centered_hexagonal_number.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CenteredHexagonalNumber((10L)) == (271L));\n    Debug.Assert(CenteredHexagonalNumber((2L)) == (7L));\n    Debug.Assert(CenteredHexagonalNumber((9L)) == (217L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_86_centered_hexagonal_number","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find nth centered hexagonal number.\n    public static long CenteredHexagonalNumber(long n) {\n        \/\/ Centered hexagonal number formula: 3n(n-1) + 1\n        return 3 * n * (n - 1) + 1;\n    }\n}\n```"}
{"name":"mbpp_87_merge_dictionaries_three","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to merge three dictionaries into a single dictionary.\n    public static Dictionary<string,string> MergeDictionariesThree(Dictionary<string,string> dict1, Dictionary<string,string> dict2, Dictionary<string,string> dict3) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_87_merge_dictionaries_three.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}}), (new Dictionary<string,string>(){{\"O\", \"Orange\"}, {\"W\", \"White\"}, {\"B\", \"Black\"}})).Equals((new Dictionary<string,string>(){{\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"P\", \"Pink\"}, {\"G\", \"Green\"}, {\"W\", \"White\"}, {\"O\", \"Orange\"}})));\n    Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}}), (new Dictionary<string,string>(){{\"L\", \"lavender\"}, {\"B\", \"Blue\"}})).Equals((new Dictionary<string,string>(){{\"W\", \"White\"}, {\"P\", \"Pink\"}, {\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}})));\n    Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"L\", \"lavender\"}, {\"B\", \"Blue\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}})).Equals((new Dictionary<string,string>(){{\"B\", \"Black\"}, {\"P\", \"Pink\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}, {\"W\", \"White\"}})));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_87_merge_dictionaries_three","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to merge three dictionaries into a single dictionary.\n    public static Dictionary<string, string> MergeDictionariesThree(Dictionary<string, string> dict1, Dictionary<string, string> dict2, Dictionary<string, string> dict3) {\n        Dictionary<string, string> mergedDict = new Dictionary<string, string>();\n\n        foreach (var kvp in dict1) {\n            mergedDict[kvp.Key] = kvp.Value;\n        }\n\n        foreach (var kvp in dict2) {\n            mergedDict[kvp.Key] = kvp.Value;\n        }\n\n        foreach (var kvp in dict3) {\n            mergedDict[kvp.Key] = kvp.Value;\n        }\n\n        return mergedDict;\n    }\n}\n```"}
{"name":"mbpp_88_freq_count","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    public static Dictionary<long,long> FreqCount(List<long> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_88_freq_count.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FreqCount((new List<long>(new long[]{(long)10L, (long)10L, (long)10L, (long)10L, (long)20L, (long)20L, (long)20L, (long)20L, (long)40L, (long)40L, (long)50L, (long)50L, (long)30L}))).Equals((new Dictionary<long,long>(){{10L, 4L}, {20L, 4L}, {40L, 2L}, {50L, 2L}, {30L, 1L}})));\n    Debug.Assert(FreqCount((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)4L, (long)1L, (long)3L, (long)1L, (long)4L}))).Equals((new Dictionary<long,long>(){{1L, 3L}, {2L, 2L}, {3L, 3L}, {4L, 3L}})));\n    Debug.Assert(FreqCount((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)4L, (long)9L, (long)10L, (long)4L, (long)5L, (long)6L, (long)7L, (long)9L, (long)5L}))).Equals((new Dictionary<long,long>(){{10L, 1L}, {5L, 3L}, {6L, 2L}, {7L, 2L}, {4L, 2L}, {9L, 2L}})));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_88_freq_count","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    public static Dictionary<long, long> FreqCount(List<long> list1) {\n        Dictionary<long, long> frequencyDict = new Dictionary<long, long>();\n\n        foreach (long item in list1) {\n            if (frequencyDict.ContainsKey(item)) {\n                frequencyDict[item]++;\n            } else {\n                frequencyDict[item] = 1;\n            }\n        }\n\n        return frequencyDict;\n    }\n}\n```"}
{"name":"mbpp_89_closest_num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the closest smaller number than n.\n    public static long ClosestNum(long N) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_89_closest_num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestNum((11L)) == (10L));\n    Debug.Assert(ClosestNum((7L)) == (6L));\n    Debug.Assert(ClosestNum((12L)) == (11L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_89_closest_num","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the closest smaller number than n.\n    public static long ClosestNum(long N) {\n        \/\/ Convert the number to a string to manipulate individual digits\n        string numStr = N.ToString();\n        int length = numStr.Length;\n\n        \/\/ Traverse the number from the right to the left\n        for (int i = length - 1; i > 0; i--) {\n            if (numStr[i] < numStr[i - 1]) {\n                \/\/ Find the smallest digit to the right of i-1 which is smaller than numStr[i-1]\n                int smallest = i;\n                for (int j = i + 1; j < length; j++) {\n                    if (numStr[j] < numStr[i - 1] && numStr[j] > numStr[smallest]) {\n                        smallest = j;\n                    }\n                }\n\n                \/\/ Swap the found smallest digit with numStr[i-1]\n                char[] arr = numStr.ToCharArray();\n                char temp = arr[i - 1];\n                arr[i - 1] = arr[smallest];\n                arr[smallest] = temp;\n\n                \/\/ Sort the rest of the number in decreasing order\n                Array.Reverse(arr, i, length - i);\n\n                \/\/ Convert back to long and return\n                return long.Parse(new string(arr));\n            }\n        }\n\n        \/\/ If no such number can be found, return -1\n        return -1;\n    }\n}\n```"}
{"name":"mbpp_90_len_log","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the length of the longest word.\n    public static long LenLog(List<string> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_90_len_log.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LenLog((new List<string>(new string[]{(string)\"python\", (string)\"PHP\", (string)\"bigdata\"}))) == (7L));\n    Debug.Assert(LenLog((new List<string>(new string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))) == (3L));\n    Debug.Assert(LenLog((new List<string>(new string[]{(string)\"small\", (string)\"big\", (string)\"tall\"}))) == (5L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_90_len_log","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a csharp function to find the length of the longest word.\n    public static int LenLog(List<string> list1) {\n        if (list1 == null || list1.Count == 0)\n            return 0;\n\n        int maxLength = 0;\n        foreach (string word in list1) {\n            if (word.Length > maxLength) {\n                maxLength = word.Length;\n            }\n        }\n        return maxLength;\n    }\n}\n```\n\nThis code defines a class `Problem` with a method `LenLog` that takes a list of strings and returns the length of the longest word in that list. If the input list is null or empty, it returns 0. The code iterates through the list to find the word with the maximum length and returns this length."}
{"name":"mbpp_91_find_substring","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if a string is present as a substring in a given list of string values.\n    public static bool FindSubstring(List<string> str1, string sub_str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_91_find_substring.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"ack\")) == (true));\n    Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"abc\")) == (false));\n    Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"ange\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_91_find_substring","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check if a string is present as a substring in a given list of string values.\n    public static bool FindSubstring(List<string> str1, string sub_str) {\n        \/\/ Iterate through each string in the list\n        foreach (string s in str1) {\n            \/\/ Check if the sub_str is present in the current string\n            if (s.Contains(sub_str)) {\n                return true; \/\/ If found, return true\n            }\n        }\n        \/\/ If the loop completes without finding the substring, return false\n        return false;\n    }\n}\n```"}
{"name":"mbpp_92_is_undulating","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_92_is_undulating.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_92_is_undulating","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n        \/\/ A single digit number cannot be undulating\n        if (n < 10) return false;\n\n        string numStr = n.ToString();\n        char firstDigit = numStr[0];\n        char secondDigit = numStr[1];\n\n        \/\/ The first two digits must be different\n        if (firstDigit == secondDigit) return false;\n\n        \/\/ Check alternation pattern for the rest of the number\n        for (int i = 2; i < numStr.Length; i++) {\n            if (i % 2 == 0 && numStr[i] != firstDigit) {\n                return false;\n            }\n            if (i % 2 == 1 && numStr[i] != secondDigit) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_93_power","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate the value of 'a' to the power 'b'.\n    public static long Power(long a, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_93_power.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Power((3L), (4L)) == (81L));\n    Debug.Assert(Power((2L), (3L)) == (8L));\n    Debug.Assert(Power((5L), (5L)) == (3125L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_93_power","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate the value of 'a' to the power 'b'.\n    public static long Power(long a, long b) {\n        if (b == 0) return 1;\n        long halfPower = Power(a, b \/ 2);\n        long result = halfPower * halfPower;\n\n        if (b % 2 != 0) {\n            result *= a;\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_94_index_minimum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    public static string IndexMinimum(List<Tuple<string, long>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_94_index_minimum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Rash\", 143L), (Tuple<string, long>)Tuple.Create(\"Manjeet\", 200L), (Tuple<string, long>)Tuple.Create(\"Varsha\", 100L)}))).Equals((\"Varsha\")));\n    Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Yash\", 185L), (Tuple<string, long>)Tuple.Create(\"Dawood\", 125L), (Tuple<string, long>)Tuple.Create(\"Sanya\", 175L)}))).Equals((\"Dawood\")));\n    Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Sai\", 345L), (Tuple<string, long>)Tuple.Create(\"Salman\", 145L), (Tuple<string, long>)Tuple.Create(\"Ayesha\", 96L)}))).Equals((\"Ayesha\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_94_index_minimum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    public static string IndexMinimum(List<Tuple<string, long>> test_list) {\n        if (test_list == null || test_list.Count == 0) {\n            throw new ArgumentException(\"The input list cannot be null or empty.\");\n        }\n        \n        Tuple<string, long> minTuple = test_list[0];\n\n        foreach (var tuple in test_list) {\n            if (tuple.Item2 < minTuple.Item2) {\n                minTuple = tuple;\n            }\n        }\n\n        return minTuple.Item1;\n    }\n}\n```"}
{"name":"mbpp_95_Find_Min_Length","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the length of the smallest list in a list of lists.\n    public static long FindMinLength(List<List<long>> lst) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_95_Find_Min_Length.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))) == (1L));\n    Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})}))) == (2L));\n    Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L})}))) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_95_Find_Min_Length","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the length of the smallest list in a list of lists.\n    public static long FindMinLength(List<List<long>> lst) {\n        if (lst == null || lst.Count == 0) {\n            throw new ArgumentException(\"The list of lists cannot be null or empty\");\n        }\n\n        long minLength = long.MaxValue;\n\n        foreach (var sublist in lst) {\n            if (sublist == null) {\n                throw new ArgumentException(\"One of the sublists is null\");\n            }\n            if (sublist.Count < minLength) {\n                minLength = sublist.Count;\n            }\n        }\n\n        return minLength;\n    }\n}\n```"}
{"name":"mbpp_96_divisor","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the number of divisors of a given integer.\n    public static long Divisor(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_96_divisor.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Divisor((15L)) == (4L));\n    Debug.Assert(Divisor((12L)) == (6L));\n    Debug.Assert(Divisor((9L)) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_96_divisor","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the number of divisors of a given integer.\n    public static long Divisor(long n) {\n        if (n <= 0) {\n            throw new ArgumentException(\"The input number must be a positive integer.\");\n        }\n\n        long count = 0;\n        long sqrtN = (long)Math.Sqrt(n);\n        \n        for (long i = 1; i <= sqrtN; i++) {\n            if (n % i == 0) {\n                \/\/ i is a divisor of n\n                count++;\n                if (i != n \/ i) {\n                    \/\/ n \/ i is also a divisor of n, except when i == n \/ i\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n}\n```"}
{"name":"mbpp_97_frequency_lists","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_97_frequency_lists.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_97_frequency_lists","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long, long> FrequencyLists(List<List<long>> list1) {\n        \/\/ Initialize an empty dictionary to hold the frequency counts\n        Dictionary<long, long> frequencyDict = new Dictionary<long, long>();\n\n        \/\/ Iterate through each list in the list of lists\n        foreach (List<long> sublist in list1) {\n            \/\/ Iterate through each element in the sublist\n            foreach (long item in sublist) {\n                \/\/ If the item is already in the dictionary, increment its count\n                if (frequencyDict.ContainsKey(item)) {\n                    frequencyDict[item]++;\n                } else {\n                    \/\/ Otherwise, add the item to the dictionary with a count of 1\n                    frequencyDict[item] = 1;\n                }\n            }\n        }\n\n        \/\/ Return the dictionary containing the frequency counts\n        return frequencyDict;\n    }\n}\n```"}
{"name":"mbpp_99_decimal_to_binary","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_99_decimal_to_binary.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_99_decimal_to_binary","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n        if (n == 0)\n            return \"0\";\n\n        StringBuilder binaryRepresentation = new StringBuilder();\n        while (n > 0) {\n            binaryRepresentation.Insert(0, (n % 2).ToString());\n            n = n \/ 2;\n        }\n\n        return binaryRepresentation.ToString();\n    }\n}\n```"}
{"name":"mbpp_100_next_smallest_palindrome","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    public static long NextSmallestPalindrome(long num) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_100_next_smallest_palindrome.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallestPalindrome((99L)) == (101L));\n    Debug.Assert(NextSmallestPalindrome((1221L)) == (1331L));\n    Debug.Assert(NextSmallestPalindrome((120L)) == (121L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_100_next_smallest_palindrome","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    public static long NextSmallestPalindrome(long num) {\n        num++;\n        while (!IsPalindrome(num)) {\n            num++;\n        }\n        return num;\n    }\n\n    private static bool IsPalindrome(long num) {\n        string str = num.ToString();\n        int len = str.Length;\n        for (int i = 0; i < len \/ 2; i++) {\n            if (str[i] != str[len - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_101_kth_element","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the kth element in the given list using 1-based indexing.\n    public static long KthElement(List<long> arr, long k) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_101_kth_element.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(KthElement((new List<long>(new long[]{(long)12L, (long)3L, (long)5L, (long)7L, (long)19L})), (2L)) == (3L));\n    Debug.Assert(KthElement((new List<long>(new long[]{(long)17L, (long)24L, (long)8L, (long)23L})), (3L)) == (8L));\n    Debug.Assert(KthElement((new List<long>(new long[]{(long)16L, (long)21L, (long)25L, (long)36L, (long)4L})), (4L)) == (36L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_101_kth_element","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the kth element in the given list using 1-based indexing.\n    public static long KthElement(List<long> arr, long k) {\n        \/\/ Convert k from 1-based indexing to 0-based indexing\n        int index = (int)k - 1;\n\n        \/\/ Ensure the index is within the bounds of the list\n        if (index < 0 || index >= arr.Count) {\n            throw new ArgumentOutOfRangeException(\"k\", \"Index is out of range.\");\n        }\n\n        \/\/ Return the element at the k-th position\n        return arr[index];\n    }\n}\n```"}
{"name":"mbpp_102_snake_to_camel","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_102_snake_to_camel.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_102_snake_to_camel","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        if (string.IsNullOrEmpty(word)) {\n            return word;\n        }\n\n        string[] parts = word.Split('_');\n        for (int i = 1; i < parts.Length; i++) {\n            if (parts[i].Length > 0) {\n                parts[i] = char.ToUpper(parts[i][0]) + parts[i].Substring(1);\n            }\n        }\n\n        return string.Join(\"\", parts);\n    }\n}\n```"}
{"name":"mbpp_103_eulerian_num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the Eulerian number a(n, m).\n    public static long EulerianNum(long n, long m) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_103_eulerian_num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EulerianNum((3L), (1L)) == (4L));\n    Debug.Assert(EulerianNum((4L), (1L)) == (11L));\n    Debug.Assert(EulerianNum((5L), (3L)) == (26L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_103_eulerian_num","gpt_solution":"```csharp\nusing System;\n\nclass Problem\n{\n    \/\/ Write a function to find the Eulerian number a(n, m).\n    public static long EulerianNum(long n, long m)\n    {\n        \/\/ Eulerian number is defined only for non-negative integers\n        if (n < 0 || m < 0 || m > n)\n            return 0;\n\n        \/\/ Initialize a 2D array for dynamic programming\n        long[,] dp = new long[n + 1, m + 1];\n\n        \/\/ Base case\n        dp[0, 0] = 1;\n\n        \/\/ Fill the 2D array using the recurrence relation\n        for (long i = 1; i <= n; i++)\n        {\n            for (long j = 0; j <= m; j++)\n            {\n                dp[i, j] = (j + 1) * dp[i - 1, j] + (i - j) * dp[i - 1, j - 1];\n            }\n        }\n\n        return dp[n, m];\n    }\n}\n```"}
{"name":"mbpp_104_sort_sublists","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort each sublist of strings in a given list of lists.\n    public static List<List<string>> SortSublists(List<List<string>> input_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_104_sort_sublists.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"white\", (string)\"black\", (string)\"orange\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"orange\", (string)\"white\"})}))));\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\" red \", (string)\"green\"}), (List<string>)new List<string>(new string[]{(string)\"blue \", (string)\" black\"}), (List<string>)new List<string>(new string[]{(string)\" orange\", (string)\"brown\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\" red \", (string)\"green\"}), (List<string>)new List<string>(new string[]{(string)\" black\", (string)\"blue \"}), (List<string>)new List<string>(new string[]{(string)\" orange\", (string)\"brown\"})}))));\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"zilver\", (string)\"gold\"}), (List<string>)new List<string>(new string[]{(string)\"magnesium\", (string)\"aluminium\"}), (List<string>)new List<string>(new string[]{(string)\"steel\", (string)\"bronze\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"gold\", (string)\"zilver\"}), (List<string>)new List<string>(new string[]{(string)\"aluminium\", (string)\"magnesium\"}), (List<string>)new List<string>(new string[]{(string)\"bronze\", (string)\"steel\"})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_104_sort_sublists","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    \/\/ Write a function to sort each sublist of strings in a given list of lists.\n    public static List<List<string>> SortSublists(List<List<string>> input_list)\n    {\n        \/\/ Iterate over each sublist in the input list\n        for (int i = 0; i < input_list.Count; i++)\n        {\n            \/\/ Sort each sublist in ascending order\n            input_list[i].Sort();\n        }\n        return input_list;\n    }\n    \n    \/\/ Example usage of the function\n    public static void ExampleUsage()\n    {\n        List<List<string>> inputList = new List<List<string>>()\n        {\n            new List<string> { \"apple\", \"orange\", \"banana\" },\n            new List<string> { \"cat\", \"dog\", \"elephant\" },\n            new List<string> { \"blue\", \"red\", \"green\" }\n        };\n        \n        List<List<string>> sortedList = SortSublists(inputList);\n\n        foreach (var sublist in sortedList)\n        {\n            Console.WriteLine(string.Join(\", \", sublist));\n        }\n    }\n}\n```\n\nThis code defines the method `SortSublists` within the `Problem` class, which sorts each sublist of strings in the input list. The `ExampleUsage` method shows how this can be used, with sample input and output through the console. Note that the sorting is done in place, and the method returns the sorted list for convenience."}
{"name":"mbpp_105_count","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count true booleans in the given list.\n    public static long Count(List<bool> lst) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_105_count.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Count((new List<bool>(new bool[]{(bool)true, (bool)false, (bool)true}))) == (2L));\n    Debug.Assert(Count((new List<bool>(new bool[]{(bool)false, (bool)false}))) == (0L));\n    Debug.Assert(Count((new List<bool>(new bool[]{(bool)true, (bool)true, (bool)true}))) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_105_count","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csthon function to count true booleans in the given list.\n    public static long Count(List<bool> lst) {\n        long count = 0;\n        foreach (bool b in lst) {\n            if (b) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_106_add_lists","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to append the given list to the given tuples.\n    public static Tuple<long, long, long, long, long> AddLists(List<long> test_list, Tuple<long, long> test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_106_add_lists.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddLists((new List<long>(new long[]{(long)5L, (long)6L, (long)7L})), (Tuple.Create(9L, 10L))).Equals((Tuple.Create(9L, 10L, 5L, 6L, 7L))));\n    Debug.Assert(AddLists((new List<long>(new long[]{(long)6L, (long)7L, (long)8L})), (Tuple.Create(10L, 11L))).Equals((Tuple.Create(10L, 11L, 6L, 7L, 8L))));\n    Debug.Assert(AddLists((new List<long>(new long[]{(long)7L, (long)8L, (long)9L})), (Tuple.Create(11L, 12L))).Equals((Tuple.Create(11L, 12L, 7L, 8L, 9L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_106_add_lists","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to append the given list to the given tuples.\n    public static Tuple<long, long, long, long, long> AddLists(List<long> test_list, Tuple<long, long> test_tup) {\n        if (test_list == null || test_tup == null || test_list.Count < 3)\n        {\n            throw new ArgumentException(\"Invalid input: Either the list is null, tuple is null or the list doesn't have enough elements.\");\n        }\n        \n        return new Tuple<long, long, long, long, long>(\n            test_tup.Item1,\n            test_tup.Item2,\n            test_list[0],\n            test_list[1],\n            test_list[2]\n        );\n    }\n}\n```"}
{"name":"mbpp_108_merge_sorted_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to merge three lists into a single sorted list.\n    public static List<long> MergeSortedList(List<long> num1, List<long> num2, List<long> num3) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_108_merge_sorted_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)25L, (long)24L, (long)15L, (long)4L, (long)5L, (long)29L, (long)110L})), (new List<long>(new long[]{(long)19L, (long)20L, (long)11L, (long)56L, (long)25L, (long)233L, (long)154L})), (new List<long>(new long[]{(long)24L, (long)26L, (long)54L, (long)48L}))).Equals((new List<long>(new long[]{(long)4L, (long)5L, (long)11L, (long)15L, (long)19L, (long)20L, (long)24L, (long)24L, (long)25L, (long)25L, (long)26L, (long)29L, (long)48L, (long)54L, (long)56L, (long)110L, (long)154L, (long)233L}))));\n    Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)6L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)7L, (long)11L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)8L, (long)12L}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)5L, (long)6L, (long)7L, (long)7L, (long)8L, (long)8L, (long)9L, (long)11L, (long)12L}))));\n    Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)18L, (long)14L, (long)10L, (long)9L, (long)8L, (long)7L, (long)9L, (long)3L, (long)2L, (long)4L, (long)1L})), (new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)25L, (long)58L})), (new List<long>(new long[]{(long)12L, (long)74L, (long)9L, (long)50L, (long)61L, (long)41L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)7L, (long)8L, (long)9L, (long)9L, (long)9L, (long)10L, (long)12L, (long)14L, (long)14L, (long)18L, (long)22L, (long)25L, (long)25L, (long)35L, (long)41L, (long)50L, (long)58L, (long)61L, (long)65L, (long)74L, (long)75L, (long)85L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_108_merge_sorted_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to merge three lists into a single sorted list.\n    public static List<long> MergeSortedList(List<long> num1, List<long> num2, List<long> num3) {\n        \/\/ Combine the three lists\n        List<long> combinedList = new List<long>(num1);\n        combinedList.AddRange(num2);\n        combinedList.AddRange(num3);\n        \n        \/\/ Sort the combined list\n        combinedList.Sort();\n        \n        \/\/ Return the sorted combined list\n        return combinedList;\n    }\n}\n```"}
{"name":"mbpp_109_odd_Equivalent","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    public static long OddEquivalent(string s, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_109_odd_Equivalent.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddEquivalent((\"011001\"), (6L)) == (3L));\n    Debug.Assert(OddEquivalent((\"11011\"), (5L)) == (4L));\n    Debug.Assert(OddEquivalent((\"1010\"), (4L)) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_109_odd_Equivalent","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a C# function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    public static long OddEquivalent(string s, long n) {\n        int length = s.Length;\n        long oddCount = 0;\n\n        for (long i = 0; i < Math.Min(n, length); i++) {\n            string rotated = RotateString(s, (int)i);\n            if (IsOddBinaryString(rotated)) {\n                oddCount += (n - i - 1) \/ length + 1;\n            }\n        }\n\n        return oddCount;\n    }\n\n    private static string RotateString(string s, int shift) {\n        shift %= s.Length;\n        return s.Substring(shift) + s.Substring(0, shift);\n    }\n\n    private static bool IsOddBinaryString(string s) {\n        return s[s.Length - 1] == '1';\n    }\n}\n```\n\nIn this code:\n1. `OddEquivalent` computes the number of rotations of the binary string `s` that result in an odd-numbered binary string when rotated `n` times.\n2. `RotateString` function rotates the binary string by a specified number of positions.\n3. `IsOddBinaryString` checks if a binary string is odd by verifying if its last character is '1'."}
{"name":"mbpp_113_check_integer","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if a string represents an integer or not.\n    public static bool CheckInteger(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_113_check_integer.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckInteger((\"python\")) == (false));\n    Debug.Assert(CheckInteger((\"1\")) == (true));\n    Debug.Assert(CheckInteger((\"12345\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_113_check_integer","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to check if a string represents an integer or not.\n    public static bool CheckInteger(string text) {\n        \/\/ Check if the string is null or empty\n        if (string.IsNullOrEmpty(text)) {\n            return false;\n        }\n\n        \/\/ Try to parse the string to an integer\n        int number;\n        return int.TryParse(text, out number);\n    }\n}\n```"}
{"name":"mbpp_116_tuple_to_int","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a given tuple of positive integers into a single integer.\n    public static long TupleToInt(Tuple<long, long, long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_116_tuple_to_int.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToInt((Tuple.Create(1L, 2L, 3L))) == (123L));\n    Debug.Assert(TupleToInt((Tuple.Create(4L, 5L, 6L))) == (456L));\n    Debug.Assert(TupleToInt((Tuple.Create(5L, 6L, 7L))) == (567L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_116_tuple_to_int","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to convert a given tuple of positive integers into a single integer.\n    public static long TupleToInt(Tuple<long, long, long> nums) {\n        long part1 = nums.Item1;\n        long part2 = nums.Item2;\n        long part3 = nums.Item3;\n\n        \/\/ Find the number of digits in part2 and part3 to correctly \n        \/\/ shift the digits of part1 to the left\n        int part2Digits = part2.ToString().Length;\n        int part3Digits = part3.ToString().Length;\n\n        long result = part1 * (long)Math.Pow(10, part2Digits + part3Digits)\n                    + part2 * (long)Math.Pow(10, part3Digits)\n                    + part3;\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_117_list_to_float","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert all possible convertible elements in a list of lists to floats.\n    public static List<Tuple<float, float>> ListToFloat(List<Tuple<string, string>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_117_list_to_float.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"3\", \"4\"), (Tuple<string, string>)Tuple.Create(\"1\", \"26.45\"), (Tuple<string, string>)Tuple.Create(\"7.32\", \"8\"), (Tuple<string, string>)Tuple.Create(\"4\", \"8\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(3.0f, 4.0f), (Tuple<float, float>)Tuple.Create(1.0f, 26.45f), (Tuple<float, float>)Tuple.Create(7.32f, 8.0f), (Tuple<float, float>)Tuple.Create(4.0f, 8.0f)}))));\n    Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"4\", \"4\"), (Tuple<string, string>)Tuple.Create(\"2\", \"27\"), (Tuple<string, string>)Tuple.Create(\"4.12\", \"9\"), (Tuple<string, string>)Tuple.Create(\"7\", \"11\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(4.0f, 4.0f), (Tuple<float, float>)Tuple.Create(2.0f, 27.0f), (Tuple<float, float>)Tuple.Create(4.12f, 9.0f), (Tuple<float, float>)Tuple.Create(7.0f, 11.0f)}))));\n    Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"6\", \"78\"), (Tuple<string, string>)Tuple.Create(\"5\", \"26.45\"), (Tuple<string, string>)Tuple.Create(\"1.33\", \"4\"), (Tuple<string, string>)Tuple.Create(\"82\", \"13\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(6.0f, 78.0f), (Tuple<float, float>)Tuple.Create(5.0f, 26.45f), (Tuple<float, float>)Tuple.Create(1.33f, 4.0f), (Tuple<float, float>)Tuple.Create(82.0f, 13.0f)}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_117_list_to_float","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to convert all possible convertible elements in a list of lists to floats.\n    public static List<Tuple<float, float>> ListToFloat(List<Tuple<string, string>> test_list) {\n        List<Tuple<float, float>> result = new List<Tuple<float, float>>();\n        \n        foreach (var item in test_list) {\n            float firstValue = 0;\n            float secondValue = 0;\n            bool firstConvertible = float.TryParse(item.Item1, out firstValue);\n            bool secondConvertible = float.TryParse(item.Item2, out secondValue);\n            \n            if (firstConvertible && secondConvertible) {\n                result.Add(new Tuple<float, float>(firstValue, secondValue));\n            }\n            \/\/ If you want to skip tuples where both strings can't be converted, remove the else block.\n            else {\n                if (firstConvertible) {\n                    result.Add(new Tuple<float, float>(firstValue, 0));\n                } else if (secondConvertible) {\n                    result.Add(new Tuple<float, float>(0, secondValue));\n                }\n            }\n        }\n        \n        return result;\n    }\n}\n```"}
{"name":"mbpp_118_string_to_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a string to a list of strings split on the space character.\n    public static List<string> StringToList(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_118_string_to_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringToList((\"python programming\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"programming\"}))));\n    Debug.Assert(StringToList((\"lists tuples strings\")).Equals((new List<string>(new string[]{(string)\"lists\", (string)\"tuples\", (string)\"strings\"}))));\n    Debug.Assert(StringToList((\"write a program\")).Equals((new List<string>(new string[]{(string)\"write\", (string)\"a\", (string)\"program\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_118_string_to_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to convert a string to a list of strings split on the space character.\n    public static List<string> StringToList(string str) {\n        \/\/ Split the input string on spaces and convert to a list\n        List<string> result = new List<string>(str.Split(' '));\n        return result;\n    }\n}\n```"}
{"name":"mbpp_119_search","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_119_search.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_119_search","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the element that appears only once in a sorted list.\n    public static long Search(List<long> arr) {\n        int low = 0;\n        int high = arr.Count - 1;\n\n        while (low < high) {\n            int mid = (low + high) \/ 2;\n\n            \/\/ Ensure that mid is even\n            if (mid % 2 == 1) {\n                mid--;\n            }\n\n            \/\/ If the pair is equal, the single element must be further in the list\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        }\n        \n        return arr[low];\n    }\n}\n```"}
{"name":"mbpp_120_max_product_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    public static long MaxProductTuple(List<Tuple<long, long>> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_120_max_product_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 7L), (Tuple<long, long>)Tuple.Create(2L, 6L), (Tuple<long, long>)Tuple.Create(1L, 8L), (Tuple<long, long>)Tuple.Create(4L, 9L)}))) == (36L));\n    Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 20L), (Tuple<long, long>)Tuple.Create(15L, 2L), (Tuple<long, long>)Tuple.Create(5L, 10L)}))) == (200L));\n    Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(11L, 44L), (Tuple<long, long>)Tuple.Create(10L, 15L), (Tuple<long, long>)Tuple.Create(20L, 5L), (Tuple<long, long>)Tuple.Create(12L, 9L)}))) == (484L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_120_max_product_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    public static long MaxProductTuple(List<Tuple<long, long>> list1) {\n        long maxProduct = long.MinValue;\n\n        foreach(var tuple in list1) {\n            long product1 = Math.Abs(tuple.Item1) * Math.Abs(tuple.Item2);\n            if(product1 > maxProduct) {\n                maxProduct = product1;\n            }\n        }\n        return maxProduct;\n    }\n}\n```"}
{"name":"mbpp_123_amicable_numbers_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sum all amicable numbers from 1 to a specified number.\n    public static long AmicableNumbersSum(long limit) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_123_amicable_numbers_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AmicableNumbersSum((999L)) == (504L));\n    Debug.Assert(AmicableNumbersSum((9999L)) == (31626L));\n    Debug.Assert(AmicableNumbersSum((99L)) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_123_amicable_numbers_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to sum all amicable numbers from 1 to a specified number.\n    public static long AmicableNumbersSum(long limit) {\n        long sumAmicable = 0;\n        Dictionary<long, long> divisorSums = new Dictionary<long, long>();\n\n        for (long i = 1; i < limit; i++) {\n            long sumDivisors = SumOfDivisors(i);\n            divisorSums[i] = sumDivisors;\n        }\n\n        foreach (var kvp in divisorSums) {\n            long num = kvp.Key;\n            long sumDivisors = kvp.Value;\n\n            if (sumDivisors != num && sumDivisors < limit && divisorSums.ContainsKey(sumDivisors) && divisorSums[sumDivisors] == num) {\n                sumAmicable += num;\n            }\n        }\n\n        return sumAmicable;\n    }\n\n    private static long SumOfDivisors(long number) {\n        long sum = 1; \/\/ 1 is a divisor for any number\n\n        for (long i = 2; i <= Math.Sqrt(number); i++) {\n            if (number % i == 0) {\n                sum += i;\n\n                long complementDivisor = number \/ i;\n                if (complementDivisor != i) {\n                    sum += complementDivisor;\n                }\n            }\n        }\n\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_125_find_length","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long FindLength(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_125_find_length.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLength((\"11000010001\")) == (6L));\n    Debug.Assert(FindLength((\"10111\")) == (1L));\n    Debug.Assert(FindLength((\"11011101100101\")) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_125_find_length","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long FindLength(string str) {\n        long maxDiff = 0;\n        long currentDiff = 0;\n\n        foreach (char c in str) {\n            if (c == '0') {\n                currentDiff += 1;\n            } else if (c == '1') {\n                currentDiff -= 1;\n            }\n\n            if (currentDiff > maxDiff) {\n                maxDiff = currentDiff;\n            }\n\n            if (currentDiff < 0) {\n                currentDiff = 0;\n            }\n        }\n\n        return maxDiff;\n    }\n}\n```\n\nExplanation:\n- The `FindLength` function finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n- It uses a variable `currentDiff` to track the difference between the count of 0s and 1s while traversing the string.\n- If the current character is '0', it increments `currentDiff`. If the character is '1', it decrements `currentDiff`.\n- Whenever `currentDiff` exceeds `maxDiff`, it updates `maxDiff` with the value of `currentDiff`.\n- If `currentDiff` becomes negative, it is reset to zero to start fresh from that point in the string.\n- The function finally returns `maxDiff` which holds the maximum difference between the number of 0s and 1s in any sub-string."}
{"name":"mbpp_126_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of common divisors of two given numbers.\n    public static long Sum(long a, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_126_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Sum((10L), (15L)) == (6L));\n    Debug.Assert(Sum((100L), (150L)) == (93L));\n    Debug.Assert(Sum((4L), (6L)) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_126_sum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\n\nclass Problem {\n    \/\/ Write a function to find the sum of common divisors of two given numbers.\n    public static long Sum(long a, long b) {\n        long gcd = GCD(a, b);\n        long sum = 0;\n\n        for (long i = 1; i <= Math.Sqrt(gcd); i++) {\n            if (gcd % i == 0) {\n                sum += i;\n                if (i != gcd \/ i) {\n                    sum += gcd \/ i;\n                }\n            }\n        }\n\n        return sum;\n    }\n\n    \/\/ Helper function to find the greatest common divisor (GCD) using the Euclidean algorithm\n    private static long GCD(long a, long b) {\n        while (b != 0) {\n            long temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}\n```"}
{"name":"mbpp_127_multiply_int","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_127_multiply_int.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_127_multiply_int","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n        return x * y;\n    }\n}\n```\n\nThe above C# code defines a class `Problem` with a static method `MultiplyInt` that takes two integers `x` and `y` as parameters and returns their product. The method is implemented using the simplest approach by directly multiplying the two integers together."}
{"name":"mbpp_128_long_words","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find words that are longer than n characters from a given list of words.\n    public static List<string> LongWords(long n, string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_128_long_words.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LongWords((3L), (\"python is a programming language\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"programming\", (string)\"language\"}))));\n    Debug.Assert(LongWords((2L), (\"writing a program\")).Equals((new List<string>(new string[]{(string)\"writing\", (string)\"program\"}))));\n    Debug.Assert(LongWords((5L), (\"sorting list\")).Equals((new List<string>(new string[]{(string)\"sorting\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_128_long_words","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem \n{\n    \/\/ Write a function to find words that are longer than n characters from a given list of words.\n    public static List<string> LongWords(long n, string str) \n    {\n        List<string> result = new List<string>();\n        string[] words = str.Split(new char[] { ' ', '\\t', '\\n', '\\r' }, StringSplitOptions.RemoveEmptyEntries);\n\n        foreach (string word in words)\n        {\n            if (word.Length > n)\n            {\n                result.Add(word);\n            }\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_129_magic_square_test","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate whether the matrix is a magic square.\n    public static bool MagicSquareTest(List<List<long>> my_matrix) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_129_magic_square_test.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)12L, (long)1L, (long)14L}), (List<long>)new List<long>(new long[]{(long)2L, (long)13L, (long)8L, (long)11L}), (List<long>)new List<long>(new long[]{(long)16L, (long)3L, (long)10L, (long)5L}), (List<long>)new List<long>(new long[]{(long)9L, (long)6L, (long)15L, (long)4L})}))) == (true));\n    Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L, (long)8L})}))) == (true));\n    Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L, (long)7L})}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_129_magic_square_test","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to calculate whether the matrix is a magic square.\n    public static bool MagicSquareTest(List<List<long>> my_matrix) {\n        int size = my_matrix.Count;\n\n        \/\/ Check if the matrix is a square\n        if (my_matrix.Any(row => row.Count != size)) {\n            return false;\n        }\n\n        \/\/ Calculate the sum of the first row to use as reference\n        long magicSum = my_matrix[0].Sum();\n\n        \/\/ Check sums of all rows\n        for (int i = 1; i < size; i++) {\n            if (my_matrix[i].Sum() != magicSum) {\n                return false;\n            }\n        }\n\n        \/\/ Check sums of all columns\n        for (int i = 0; i < size; i++) {\n            long columnSum = 0;\n            for (int j = 0; j < size; j++) {\n                columnSum += my_matrix[j][i];\n            }\n            if (columnSum != magicSum) {\n                return false;\n            }\n        }\n\n        \/\/ Check sum of the main diagonal\n        long mainDiagonalSum = 0;\n        for (int i = 0; i < size; i++) {\n            mainDiagonalSum += my_matrix[i][i];\n        }\n        if (mainDiagonalSum != magicSum) {\n            return false;\n        }\n\n        \/\/ Check sum of the secondary diagonal\n        long secondaryDiagonalSum = 0;\n        for (int i = 0; i < size; i++) {\n            secondaryDiagonalSum += my_matrix[i][size - i - 1];\n        }\n        if (secondaryDiagonalSum != magicSum) {\n            return false;\n        }\n\n        \/\/ If all checks passed, it is a magic square\n        return true;\n    }\n}\n```"}
{"name":"mbpp_130_max_occurrences","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the item with maximum frequency in a given list.\n    public static long MaxOccurrences(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_130_max_occurrences.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)2L, (long)3L, (long)8L, (long)4L, (long)7L, (long)9L, (long)8L, (long)2L, (long)6L, (long)5L, (long)1L, (long)6L, (long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)6L, (long)9L, (long)1L, (long)2L}))) == (2L));\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)2L, (long)3L, (long)8L, (long)4L, (long)7L, (long)9L, (long)8L, (long)7L, (long)9L, (long)15L, (long)14L, (long)10L, (long)12L, (long)13L, (long)16L, (long)18L}))) == (8L));\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)10L, (long)20L, (long)20L, (long)30L, (long)40L, (long)90L, (long)80L, (long)50L, (long)30L, (long)20L, (long)50L, (long)10L}))) == (20L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_130_max_occurrences","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the item with maximum frequency in a given list.\n    public static long MaxOccurrences(List<long> nums) {\n        if (nums == null || nums.Count == 0) \n            throw new ArgumentException(\"The list must not be null or empty.\", nameof(nums));\n\n        \/\/ Create a dictionary to count the occurrences of each number\n        Dictionary<long, int> frequency = new Dictionary<long, int>();\n        foreach (var num in nums) {\n            if (frequency.ContainsKey(num)) {\n                frequency[num]++;\n            } else {\n                frequency[num] = 1;\n            }\n        }\n\n        \/\/ Find the number with the maximum frequency\n        long maxItem = nums[0];\n        int maxCount = frequency[maxItem];\n\n        foreach (var kvp in frequency) {\n            if (kvp.Value > maxCount) {\n                maxItem = kvp.Key;\n                maxCount = kvp.Value;\n            }\n        }\n\n        return maxItem;\n    }\n}\n```"}
{"name":"mbpp_131_reverse_vowels","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to reverse only the vowels of a given string (where y is not a vowel).\n    public static string ReverseVowels(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_131_reverse_vowels.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseVowels((\"Python\")).Equals((\"Python\")));\n    Debug.Assert(ReverseVowels((\"USA\")).Equals((\"ASU\")));\n    Debug.Assert(ReverseVowels((\"ab\")).Equals((\"ab\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_131_reverse_vowels","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csthon function to reverse only the vowels of a given string (where y is not a vowel).\n    public static string ReverseVowels(string str1) {\n        if (str1 == null) return null;\n\n        HashSet<char> vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        char[] characters = str1.ToCharArray();\n        int left = 0;\n        int right = characters.Length - 1;\n\n        while (left < right) {\n            if (!vowels.Contains(characters[left])) {\n                left++;\n                continue;\n            }\n\n            if (!vowels.Contains(characters[right])) {\n                right--;\n                continue;\n            }\n\n            \/\/ Swap vowels\n            char temp = characters[left];\n            characters[left] = characters[right];\n            characters[right] = temp;\n\n            left++;\n            right--;\n        }\n\n        return new string(characters);\n    }\n}\n```"}
{"name":"mbpp_132_tup_string","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a list to a string.\n    public static string TupString(List<string> tup1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_132_tup_string.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupString((new List<string>(new string[]{(string)\"e\", (string)\"x\", (string)\"e\", (string)\"r\", (string)\"c\", (string)\"i\", (string)\"s\", (string)\"e\", (string)\"s\"}))).Equals((\"exercises\")));\n    Debug.Assert(TupString((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"}))).Equals((\"python\")));\n    Debug.Assert(TupString((new List<string>(new string[]{(string)\"p\", (string)\"r\", (string)\"o\", (string)\"g\", (string)\"r\", (string)\"a\", (string)\"m\"}))).Equals((\"program\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_132_tup_string","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a list to a string.\n    public static string TupString(List<string> tup1) {\n        if (tup1 == null || tup1.Count == 0)\n            return string.Empty;\n\n        StringBuilder result = new StringBuilder();\n        foreach (string element in tup1) {\n            result.Append(element);\n        }\n        return result.ToString();\n    }\n}\n```\n\nThis code defines the `TupString` function which takes a list of strings (`tup1`) and concatenates all elements in the list into a single string using a `StringBuilder` for efficient string concatenation. If the list is null or empty, it returns an empty string."}
{"name":"mbpp_133_sum_negativenum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    public static long SumNegativenum(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_133_sum_negativenum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L}))) == (-32L));\n    Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)10L, (long)15L, (long)-14L, (long)13L, (long)-18L, (long)12L, (long)-20L}))) == (-52L));\n    Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)19L, (long)-65L, (long)57L, (long)39L, (long)152L, (long)-639L, (long)121L, (long)44L, (long)90L, (long)-190L}))) == (-894L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_133_sum_negativenum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    public static long SumNegativenum(List<long> nums) {\n        long sum = 0;\n        foreach (long num in nums) {\n            if (num < 0) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n    \n    \/\/ You can add more methods or functions here if needed\n}\n```"}
{"name":"mbpp_135_hexagonal_num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the nth hexagonal number.\n    public static long HexagonalNum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_135_hexagonal_num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexagonalNum((10L)) == (190L));\n    Debug.Assert(HexagonalNum((5L)) == (45L));\n    Debug.Assert(HexagonalNum((7L)) == (91L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_135_hexagonal_num","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the nth hexagonal number.\n    public static long HexagonalNum(long n) {\n        \/\/ Hexagonal number formula: H(n) = n * (2n - 1)\n        return n * (2 * n - 1);\n    }\n}\n\n```"}
{"name":"mbpp_138_is_Sum_Of_Powers_Of_Two","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    public static bool IsSumOfPowersOfTwo(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_138_is_Sum_Of_Powers_Of_Two.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSumOfPowersOfTwo((10L)) == (true));\n    Debug.Assert(IsSumOfPowersOfTwo((7L)) == (false));\n    Debug.Assert(IsSumOfPowersOfTwo((14L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_138_is_Sum_Of_Powers_Of_Two","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    public static bool IsSumOfPowersOfTwo(long n) {\n        \/\/ Edge case: if n is less than or equal to zero.\n        if (n <= 0) {\n            return false;\n        }\n\n        \/\/ Count the number of set bits (i.e., bits that are 1) in the binary representation of n.\n        \/\/ If the number of set bits is equal to or less than 1, it can be represented as a sum of non-zero powers of 2.\n        \/\/ If greater than 1 then it cannot be represented.\n        int setBitsCount = 0;\n\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                setBitsCount++;\n            }\n            if (setBitsCount > 1) {\n                return false;\n            }\n            n >>= 1; \/\/ Right shift n to check the next bit.\n        }\n\n        return true;\n    }\n}\n```"}
{"name":"mbpp_141_pancake_sort","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_141_pancake_sort.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_141_pancake_sort","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n        int n = nums.Count;\n\n        for (int currSize = n; currSize > 1; --currSize) {\n            int mi = FindMax(nums, currSize);\n            \n            if (mi != currSize - 1) {\n                Flip(nums, mi);\n                Flip(nums, currSize - 1);\n            }\n        }\n\n        return nums;\n    }\n\n    \/\/ Function to detect max element index in the list up to a given end\n    private static int FindMax(List<long> nums, int end) {\n        int mi, i;\n        for (mi = 0, i = 0; i < end; ++i)\n            if (nums[i] > nums[mi])\n                mi = i;\n        return mi;\n    }\n\n    \/\/ Reverses elements in the list from 0 to end\n    private static void Flip(List<long> nums, int end) {\n        int start = 0;\n        while (start < end) {\n            long temp = nums[start];\n            nums[start] = nums[end];\n            nums[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}\n```"}
{"name":"mbpp_142_count_samepair","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_142_count_samepair.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_142_count_samepair","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n        if (list1 == null || list2 == null || list3 == null)\n            throw new ArgumentNullException(\"Lists cannot be null\");\n        \n        if (list1.Count != list2.Count || list1.Count != list3.Count)\n            throw new ArgumentException(\"All lists must have the same length\");\n\n        long count = 0;\n        for (int i = 0; i < list1.Count; i++) {\n            if (list1[i] == list2[i] && list1[i] == list3[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_143_find_lists","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find number of lists present in the given list.\n    public static long FindLists(List<object> Input) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_143_find_lists.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLists((new List<object>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})}))) == (2L));\n    Debug.Assert(FindLists((new List<object>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L})}))) == (3L));\n    Debug.Assert(FindLists((new List<object>(new long[]{(long)9L, (long)8L, (long)7L, (long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L}))) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_143_find_lists","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the number of lists present in the given list.\n    public static long FindLists(List<object> input) {\n        long count = 0;\n        foreach (var item in input) {\n            if (item is List<object> nestedList) {\n                count += 1;\n                count += FindLists(nestedList); \/\/ Recursively count lists within the nested list\n            }\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_145_max_Abs_Diff","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the maximum difference between any two elements in a given list.\n    public static long MaxAbsDiff(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_145_max_Abs_Diff.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)3L}))) == (4L));\n    Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)9L, (long)3L, (long)2L, (long)5L, (long)1L}))) == (8L));\n    Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_145_max_Abs_Diff","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function to find the maximum difference between any two elements in a given list.\n    public static long MaxAbsDiff(List<long> arr) {\n        if (arr == null || arr.Count < 2) {\n            throw new ArgumentException(\"List must contain at least two elements.\");\n        }\n\n        long maxElement = long.MinValue;\n        long minElement = long.MaxValue;\n\n        foreach (long num in arr) {\n            if (num > maxElement) {\n                maxElement = num;\n            }\n            if (num < minElement) {\n                minElement = num;\n            }\n        }\n\n        return maxElement - minElement;\n    }\n}\n```\n\nThis code defines a `MaxAbsDiff` function that takes a list of long integers and returns the maximum absolute difference between any two elements in the list. If the list contains fewer than two elements or is null, an `ArgumentException` is thrown indicating the invalid input."}
{"name":"mbpp_160_find_solution","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Tuple<long, long> FindSolution(long a, long b, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_160_find_solution.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals((Tuple.Create(2L, 1L))));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals((Tuple.Create(4L, 1L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_160_find_solution","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n    public static Tuple<long, long> FindSolution(long a, long b, long n) {\n        long gcd = ExtendedGCD(a, b, out long x, out long y);\n\n        \/\/ A solution exists if and only if n is divisible by the gcd of a and b\n        if (n % gcd != 0)\n            return null;\n\n        \/\/ Scale the solution by n \/ gcd\n        long scale = n \/ gcd;\n        x *= scale;\n        y *= scale;\n        \n        return new Tuple<long, long>(x, y);\n    }\n\n    \/\/ Helper function: Extended Euclidean Algorithm\n    private static long ExtendedGCD(long a, long b, out long x, out long y) {\n        \/\/ Base cases\n        if (a == 0) {\n            x = 0;\n            y = 1;\n            return b;\n        }\n\n        \/\/ Recursively apply the algorithm\n        long gcd = ExtendedGCD(b % a, a, out long x1, out long y1);\n\n        \/\/ Update x and y using results of recursive call\n        x = y1 - (b \/ a) * x1;\n        y = x1;\n\n        return gcd;\n    }\n}\n```"}
{"name":"mbpp_161_remove_elements","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove all elements from a given list present in another list.\n    public static List<long> RemoveElements(List<long> list1, List<long> list2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_161_remove_elements.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)10L}))));\n    Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L, (long)9L, (long)10L}))));\n    Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)5L, (long)7L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)8L, (long)9L, (long)10L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_161_remove_elements","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to remove all elements from a given list present in another list.\n    public static List<long> RemoveElements(List<long> list1, List<long> list2) {\n        \/\/ Create a hash set from the second list for faster lookups\n        HashSet<long> set2 = new HashSet<long>(list2);\n        \n        \/\/ Use LINQ to filter out elements that are present in the hash set\n        List<long> result = list1.Where(element => !set2.Contains(element)).ToList();\n        \n        return result;\n    }\n}\n```"}
{"name":"mbpp_162_sum_series","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate the sum (n - 2*i) from i=0 to n \/\/ 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    public static long SumSeries(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_162_sum_series.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSeries((6L)) == (12L));\n    Debug.Assert(SumSeries((10L)) == (30L));\n    Debug.Assert(SumSeries((9L)) == (25L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_162_sum_series","gpt_solution":"```csharp\nusing System;\n\nclass Problem\n{\n    \/\/ Write a function to calculate the sum (n - 2*i) from i=0 to n \/\/ 2,\n    \/\/ for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    public static long SumSeries(long n)\n    {\n        long sum = 0;\n        for (long i = 0; n - 2 * i >= 0; i++)\n        {\n            sum += n - 2 * i;\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_164_are_equivalent","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to determine if the sum of the divisors of two integers are the same.\n    public static bool AreEquivalent(long num1, long num2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_164_are_equivalent.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AreEquivalent((36L), (57L)) == (false));\n    Debug.Assert(AreEquivalent((2L), (4L)) == (false));\n    Debug.Assert(AreEquivalent((23L), (47L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_164_are_equivalent","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to determine if the sum of the divisors of two integers are the same.\n    public static bool AreEquivalent(long num1, long num2) {\n        long sum1 = SumOfDivisors(num1);\n        long sum2 = SumOfDivisors(num2);\n        return sum1 == sum2;\n    }\n\n    \/\/ Helper method to calculate the sum of divisors of a given number\n    private static long SumOfDivisors(long num) {\n        long sum = 0;\n        for (long i = 1; i <= num \/ 2; i++) {\n            if (num % i == 0) {\n                sum += i;\n            }\n        }\n        sum += num; \/\/ including the number itself as a divisor\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_165_count_char_position","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    public static long CountCharPosition(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_165_count_char_position.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountCharPosition((\"xbcefg\")) == (2L));\n    Debug.Assert(CountCharPosition((\"ABcED\")) == (3L));\n    Debug.Assert(CountCharPosition((\"AbgdeF\")) == (5L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_165_count_char_position","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    public static long CountCharPosition(string str1) {\n        long count = 0;\n        str1 = str1.ToLower();\n\n        for (int i = 0; i < str1.Length; i++) {\n            if(char.IsLetter(str1[i]) && (str1[i] - 'a' == i)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n```"}
{"name":"mbpp_166_find_even_pair","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    public static long FindEvenPair(List<long> A) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_166_find_even_pair.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L}))) == (4L));\n    Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L}))) == (9L));\n    Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_166_find_even_pair","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    public static long FindEvenPair(List<long> A) {\n        long evenCount = 0;\n        long oddCount = 0;\n\n        \/\/ Count the number of even and odd integers in the list\n        foreach (long num in A) {\n            if ((num & 1) == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n\n        \/\/ Pairs that XOR to an even number: (even, even) and (odd, odd)\n        long evenPairs = evenCount * (evenCount - 1) \/ 2;\n        long oddPairs = oddCount * (oddCount - 1) \/ 2;\n\n        return evenPairs + oddPairs;\n    }\n}\n```"}
{"name":"mbpp_167_next_power_of_2","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the smallest power of 2 greater than or equal to n.\n    public static long NextPowerOf2(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_167_next_power_of_2.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextPowerOf2((0L)) == (1L));\n    Debug.Assert(NextPowerOf2((5L)) == (8L));\n    Debug.Assert(NextPowerOf2((17L)) == (32L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_167_next_power_of_2","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csthon function to find the smallest power of 2 greater than or equal to n.\n    public static long NextPowerOf2(long n) {\n        if (n < 1) {\n            throw new ArgumentOutOfRangeException(\"n must be greater than 0.\");\n        }\n        if ((n & (n - 1)) == 0) {\n            return n; \/\/ n is already a power of 2\n        }\n\n        long power = 1;\n        while (power < n) {\n            power <<= 1;\n        }\n        return power;\n    }\n}\n```"}
{"name":"mbpp_168_frequency","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count the number of occurrences of a number in a given list.\n    public static long Frequency(List<long> a, long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_168_frequency.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Frequency((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (4L)) == (0L));\n    Debug.Assert(Frequency((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})), (3L)) == (3L));\n    Debug.Assert(Frequency((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)1L, (long)2L})), (1L)) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_168_frequency","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count the number of occurrences of a number in a given list.\n    public static long Frequency(List<long> a, long x) {\n        \/\/ Initialize the count to 0\n        long count = 0;\n\n        \/\/ Iterate through each element in the list\n        foreach(long number in a) {\n            \/\/ If the current element is equal to x, increment the count\n            if(number == x) {\n                count++;\n            }\n        }\n\n        \/\/ Return the final count\n        return count;\n    }\n}\n```"}
{"name":"mbpp_170_sum_range_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the sum of numbers in a list within a range specified by two indices.\n    public static long SumRangeList(List<long> list1, long m, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_170_sum_range_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (8L), (10L)) == (29L));\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (5L), (7L)) == (16L));\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (7L), (10L)) == (38L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_170_sum_range_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nclass Problem {\n    \/\/ Write a function to find the sum of numbers in a list within a range specified by two indices.\n    public static long SumRangeList(List<long> list1, long m, long n) {\n        \/\/ Check if the indices are within the valid range\n        if (m < 0 || n >= list1.Count || m > n) {\n            throw new ArgumentOutOfRangeException(\"Indices are out of range.\");\n        }\n\n        long sum = 0;\n        for (long i = m; i <= n; i++) {\n            sum += list1[(int)i];\n        }\n\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_171_perimeter_pentagon","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    public static long PerimeterPentagon(long a) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_171_perimeter_pentagon.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PerimeterPentagon((5L)) == (25L));\n    Debug.Assert(PerimeterPentagon((10L)) == (50L));\n    Debug.Assert(PerimeterPentagon((15L)) == (75L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_171_perimeter_pentagon","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    public static long PerimeterPentagon(long a) {\n        \/\/ The perimeter of a regular pentagon is the sum of the lengths of its sides.\n        \/\/ Since all sides are equal in length, the perimeter is simply 5 times the length of one side.\n        return 5 * a;\n    }\n}\n```"}
{"name":"mbpp_172_count_occurance","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count the number of occurence of the string 'std' in a given string.\n    public static long CountOccurance(string s) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_172_count_occurance.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountOccurance((\"letstdlenstdporstd\")) == (3L));\n    Debug.Assert(CountOccurance((\"truststdsolensporsd\")) == (1L));\n    Debug.Assert(CountOccurance((\"makestdsostdworthit\")) == (2L));\n    Debug.Assert(CountOccurance((\"stds\")) == (1L));\n    Debug.Assert(CountOccurance((\"\")) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_172_count_occurance","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to count the number of occurrence of the string 'std' in a given string.\n    public static long CountOccurance(string s) {\n        if (s == null) {\n            return 0;\n        }\n\n        string target = \"std\";\n        long count = 0;\n        int index = 0;\n\n        while ((index = s.IndexOf(target, index)) != -1) {\n            count++;\n            index += target.Length;\n        }\n\n        return count;\n    }\n}\n```"}
{"name":"mbpp_222_check_type","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if all the elements in tuple have same data type or not.\n    public static bool CheckType(object test_tuple) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_222_check_type.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckType(Tuple.Create(5L, 6L, 7L, 3L, 5L, 6L)) == (true));\n    Debug.Assert(CheckType(Tuple.Create(1L, 2L, \"4\")) == (false));\n    Debug.Assert(CheckType(Tuple.Create(3L, 2L, 1L, 4L, 5L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_222_check_type","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check if all the elements in tuple have same data type or not.\n    public static bool CheckType(object test_tuple) {\n        var properties = test_tuple.GetType().GetProperties();\n        if (properties.Length == 0) return true; \/\/ Empty tuple case\n        \n        Type firstType = properties[0].PropertyType;\n        foreach (var prop in properties) {\n            if (prop.PropertyType != firstType) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\nWith the above implementation, you can check if all the elements in a given tuple have the same data type by using reflection to inspect the types of the properties within the tuple object."}
{"name":"mbpp_223_is_majority","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n\/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_223_is_majority.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_223_is_majority","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. \n    \/\/ (The majority element is the element that occurs more than n\/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n        if (n == 0) return false; \/\/ Edge case: if array length is 0\n        \n        \/\/ Binary search for the first occurrence of x\n        long firstOccurrence = BinarySearchFirstOccurrence(arr, n, x);\n        \n        if (firstOccurrence == -1) return false; \/\/ x is not in the array\n        \n        \/\/ Check if the element at position firstOccurrence + n\/2 is also x\n        long lastPossibleOccurrence = firstOccurrence + n \/ 2;\n        \n        if (lastPossibleOccurrence < n && arr[(int)lastPossibleOccurrence] == x) {\n            return true;\n        }\n        \n        return false;\n    }\n\n    private static long BinarySearchFirstOccurrence(List<long> arr, long n, long x) {\n        long low = 0, high = n - 1, result = -1;\n        \n        while (low <= high) {\n            long mid = (low + high) \/ 2;\n            \n            if (arr[(int)mid] == x) {\n                result = mid;\n                high = mid - 1; \/\/ Continue searching in the left half\n            } else if (arr[(int)mid] < x) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        \n        return result; \/\/ If x is not found, result will be -1\n    }\n}\n```"}
{"name":"mbpp_224_count_Set_Bits","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of set bits (binary digits with value 1) in a given number.\n    public static long CountSetBits(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_224_count_Set_Bits.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSetBits((2L)) == (1L));\n    Debug.Assert(CountSetBits((4L)) == (1L));\n    Debug.Assert(CountSetBits((6L)) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_224_count_Set_Bits","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csharp function to count the number of set bits (binary digits with value 1) in a given number.\n    public static long CountSetBits(long n) {\n        long count = 0;\n        while (n > 0) {\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_226_odd_values_string","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to remove the characters which have odd index values of a given string.\n    public static string OddValuesString(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_226_odd_values_string.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddValuesString((\"abcdef\")).Equals((\"ace\")));\n    Debug.Assert(OddValuesString((\"python\")).Equals((\"pto\")));\n    Debug.Assert(OddValuesString((\"data\")).Equals((\"dt\")));\n    Debug.Assert(OddValuesString((\"lambs\")).Equals((\"lms\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_226_odd_values_string","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to remove the characters which have odd index values of a given string.\n    public static string OddValuesString(string str) {\n        StringBuilder result = new StringBuilder();\n        \n        \/\/ Iterate through the string\n        for (int i = 0; i < str.Length; i++) {\n            \/\/ Check if the index is even\n            if (i % 2 == 0) {\n                \/\/ Append the character to the result\n                result.Append(str[i]);\n            }\n        }\n        \n        \/\/ Return the resultant string\n        return result.ToString();\n    }\n}\n```"}
{"name":"mbpp_227_min_of_three","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find minimum of three numbers.\n    public static long MinOfThree(long a, long b, long c) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_227_min_of_three.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinOfThree((10L), (20L), (0L)) == (0L));\n    Debug.Assert(MinOfThree((19L), (15L), (18L)) == (15L));\n    Debug.Assert(MinOfThree((-10L), (-20L), (-30L)) == (-30L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_227_min_of_three","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find minimum of three numbers.\n    public static long MinOfThree(long a, long b, long c) {\n        if (a <= b && a <= c)\n            return a;\n        else if (b <= a && b <= c)\n            return b;\n        else\n            return c;\n    }\n}\n```"}
{"name":"mbpp_228_all_Bits_Set_In_The_Given_Range","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether all the bits are unset in the given range or not.\n    public static bool AllBitsSetInTheGivenRange(long n, long l, long r) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_228_all_Bits_Set_In_The_Given_Range.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllBitsSetInTheGivenRange((4L), (1L), (2L)) == (true));\n    Debug.Assert(AllBitsSetInTheGivenRange((17L), (2L), (4L)) == (true));\n    Debug.Assert(AllBitsSetInTheGivenRange((39L), (4L), (6L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_228_all_Bits_Set_In_The_Given_Range","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether all the bits are unset in the given range or not.\n    public static bool AllBitsUnsetInTheGivenRange(long n, long l, long r) {\n        if (l > r || l < 0 || r >= sizeof(long) * 8) \/\/ validation check\n            throw new ArgumentOutOfRangeException(\"Invalid range!\");\n\n        long mask = 0;\n\n        \/\/ Create a mask with bits set to 1 from position l to r\n        for (long i = l; i <= r; i++) {\n            mask |= (1L << (int)i);\n        }\n\n        \/\/ Check against the given number n\n        return (n & mask) == 0;\n    }\n}\n```\n\nThis `AllBitsUnsetInTheGivenRange` function will return `true` if all the bits in the given range `[l, r]` of the number `n` are unset (i.e., equal to 0). It first validates the input range and then creates a mask where bits are set from position `l` to `r`. Finally, it checks if all these bits, when ANDed with `n`, result in 0. If yes, it returns `true`; otherwise, it returns `false`."}
{"name":"mbpp_229_re_arrange_array","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_229_re_arrange_array.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_229_re_arrange_array","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n        if (arr == null || n <= 0 || n > arr.Count)\n            return arr;\n\n        \/\/ Create separate lists for negatives and positives\n        List<long> negatives = new List<long>();\n        List<long> positives = new List<long>();\n\n        \/\/ Iterate through the first n elements\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                negatives.Add(arr[i]);\n            } else {\n                positives.Add(arr[i]);\n            }\n        }\n\n        \/\/ Merge the negatives and positives lists, while keeping the remaining elements of arr unchanged\n        List<long> result = new List<long>(negatives);\n        result.AddRange(positives);\n        result.AddRange(arr.GetRange((int) n, arr.Count - (int) n));\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_230_replace_blank","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    public static string ReplaceBlank(string str1, string char) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_230_replace_blank.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceBlank((\"hello people\"), (\"@\")).Equals((\"hello@people\")));\n    Debug.Assert(ReplaceBlank((\"python program language\"), (\"$\")).Equals((\"python$program$language\")));\n    Debug.Assert(ReplaceBlank((\"blank space\"), (\"-\")).Equals((\"blank-space\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_230_replace_blank","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    public static string ReplaceBlank(string str1, char charToReplaceWith) {\n        if (str1 == null) {\n            throw new ArgumentNullException(nameof(str1));\n        }\n        \n        return str1.Replace(' ', charToReplaceWith);\n    }\n}\n```\n\nThis method checks if the input string is null and throws an exception if it is. It then uses the `Replace` method to substitute all blank spaces in the input string with the specified character and returns the resulting string. The identifier for the character parameter has been corrected to `char charToReplaceWith` from the original, invalid `string char`."}
{"name":"mbpp_234_volume_cube","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the volume of a cube given its side length.\n    public static long VolumeCube(long l) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_234_volume_cube.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(VolumeCube((3L)) == (27L));\n    Debug.Assert(VolumeCube((2L)) == (8L));\n    Debug.Assert(VolumeCube((5L)) == (125L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_234_volume_cube","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the volume of a cube given its side length.\n    public static long VolumeCube(long l) {\n        \/\/ The volume of a cube is calculated by raising the side length to the power of 3.\n        \/\/ Therefore, VolumeCube = l * l * l\n        return l * l * l;\n    }\n}\n```"}
{"name":"mbpp_237_check_occurences","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static Dictionary<Tuple<long, long>,long> CheckOccurences(List<Tuple<long, long>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_237_check_occurences.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(1L, 3L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(5L, 2L), (Tuple<long, long>)Tuple.Create(6L, 3L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(1L, 3L), 2L}, {Tuple.Create(2L, 5L), 2L}, {Tuple.Create(3L, 6L), 1L}})));\n    Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 2L), (Tuple<long, long>)Tuple.Create(2L, 4L), (Tuple<long, long>)Tuple.Create(3L, 6L), (Tuple<long, long>)Tuple.Create(6L, 3L), (Tuple<long, long>)Tuple.Create(7L, 4L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(2L, 4L), 2L}, {Tuple.Create(3L, 6L), 2L}, {Tuple.Create(4L, 7L), 1L}})));\n    Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(13L, 2L), (Tuple<long, long>)Tuple.Create(11L, 23L), (Tuple<long, long>)Tuple.Create(12L, 25L), (Tuple<long, long>)Tuple.Create(25L, 12L), (Tuple<long, long>)Tuple.Create(16L, 23L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(2L, 13L), 1L}, {Tuple.Create(11L, 23L), 1L}, {Tuple.Create(12L, 25L), 2L}, {Tuple.Create(16L, 23L), 1L}})));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_237_check_occurences","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static Dictionary<Tuple<long, long>, long> CheckOccurrences(List<Tuple<long, long>> test_list) {\n        Dictionary<Tuple<long, long>, long> occurrencesDict = new Dictionary<Tuple<long, long>, long>();\n\n        foreach (var tuple in test_list) {\n            if (occurrencesDict.ContainsKey(tuple)) {\n                occurrencesDict[tuple]++;\n            } else {\n                occurrencesDict[tuple] = 1;\n            }\n        }\n\n        return occurrencesDict;\n    }\n}\n```\n\nThis code defines a `CheckOccurrences` function within the `Problem` class, which takes a list of tuples as input and returns a dictionary. The dictionary maps each unique tuple to the number of times it occurs in the list. Each tuple is represented using the `Tuple<long, long>` type, and the dictionary uses this tuple as the key and the count of occurrences as the value."}
{"name":"mbpp_238_number_of_substrings","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of non-empty substrings of a given string.\n    public static long NumberOfSubstrings(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_238_number_of_substrings.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumberOfSubstrings((\"abc\")) == (6L));\n    Debug.Assert(NumberOfSubstrings((\"abcd\")) == (10L));\n    Debug.Assert(NumberOfSubstrings((\"abcde\")) == (15L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_238_number_of_substrings","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to count the number of non-empty substrings of a given string.\n    public static long NumberOfSubstrings(string str) {\n        if (string.IsNullOrEmpty(str)) {\n            return 0;\n        }\n\n        int n = str.Length;\n        \/\/ The number of non-empty substrings of a string of length n is given by the formula: n * (n + 1) \/ 2\n        return (long)n * (n + 1) \/ 2;\n    }\n}\n```\n\nThis code defines a method `NumberOfSubstrings` that takes a string input `str` and returns the number of non-empty substrings of the given string. The formula used for the number of non-empty substrings is `n * (n + 1) \/ 2`, where `n` is the length of the string. This is derived from the sum of the first `n` natural numbers."}
{"name":"mbpp_239_get_total_number_of_sequences","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    public static long GetTotalNumberOfSequences(long m, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_239_get_total_number_of_sequences.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetTotalNumberOfSequences((10L), (4L)) == (4L));\n    Debug.Assert(GetTotalNumberOfSequences((5L), (2L)) == (6L));\n    Debug.Assert(GetTotalNumberOfSequences((16L), (3L)) == (84L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_239_get_total_number_of_sequences","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    public static long GetTotalNumberOfSequences(long m, long n) {\n        return CountSequences(1, m, n);\n    }\n    \n    private static long CountSequences(long start, long m, long length) {\n        if (length == 0) {\n            return 1;\n        }\n        \n        long count = 0;\n        for (long i = start; i <= m; i++) {\n            count += CountSequences(i * 2, m, length - 1);\n        }\n        \n        return count;\n    }\n    \n    private static void Main() {\n        Console.WriteLine(GetTotalNumberOfSequences(10, 3)); \/\/ Example usage. This line can be removed when not debugging.\n    }\n}\n```\nThe `GetTotalNumberOfSequences` method calculates the number of possible sequences of length `n` such that each element is greater than or equal to twice the previous element but less than or equal to `m`. The helper method `CountSequences` is used to recursively calculate the number of sequences."}
{"name":"mbpp_240_replace_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    public static List<object> ReplaceList(List<object> list1, List<object> list2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_240_replace_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceList((new List<object>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)10L})), (new List<object>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))).Equals((new List<object>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(ReplaceList((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))));\n    Debug.Assert(ReplaceList((new List<object>(new string[]{(string)\"red\", (string)\"blue\", (string)\"green\"})), (new List<object>(new string[]{(string)\"yellow\"}))).Equals((new List<object>(new string[]{(string)\"red\", (string)\"blue\", (string)\"yellow\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_240_replace_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    public static List<object> ReplaceList(List<object> list1, List<object> list2) {\n        if (list1 == null)\n            throw new ArgumentNullException(nameof(list1));\n        \n        if (list2 == null)\n            throw new ArgumentNullException(nameof(list2));\n        \n        if (list1.Count == 0)\n            throw new InvalidOperationException(\"The first list cannot be empty.\");\n\n        \/\/ Remove the last element from the first list\n        list1.RemoveAt(list1.Count - 1);\n\n        \/\/ Add all elements from the second list to the first list\n        list1.AddRange(list2);\n\n        return list1;\n    }\n}\n```"}
{"name":"mbpp_242_count_charac","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count the total number of characters in a string.\n    public static long CountCharac(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_242_count_charac.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountCharac((\"python programming\")) == (18L));\n    Debug.Assert(CountCharac((\"language\")) == (8L));\n    Debug.Assert(CountCharac((\"words\")) == (5L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_242_count_charac","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to count the total number of characters in a string.\n    public static long CountCharac(string str1) {\n        if (str1 == null) {\n            throw new ArgumentNullException(nameof(str1), \"Input string cannot be null\");\n        }\n\n        return str1.Length;\n    }\n}\n```\n\nThis function `CountCharac` takes a string `str1` as input and returns the total number of characters in the string. If the input string is `null`, it throws an `ArgumentNullException` to ensure that calling the function with a null value doesn't cause unexpected behavior."}
{"name":"mbpp_244_next_Perfect_Square","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the next perfect square greater than a given number.\n    public static long NextPerfectSquare(long N) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_244_next_Perfect_Square.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextPerfectSquare((35L)) == (36L));\n    Debug.Assert(NextPerfectSquare((6L)) == (9L));\n    Debug.Assert(NextPerfectSquare((9L)) == (16L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_244_next_Perfect_Square","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csharp function to find the next perfect square greater than a given number.\n    public static long NextPerfectSquare(long N) {\n        \/\/ Find the square root of the given number\n        long sqrt = (long)Math.Sqrt(N);\n        \n        \/\/ If N is a perfect square, increment sqrt to find the next perfect square\n        if (sqrt * sqrt == N) {\n            sqrt++;\n        }\n        \n        \/\/ Return the next perfect square\n        return (sqrt + 1) * (sqrt + 1);\n    }\n}\n```"}
{"name":"mbpp_245_max_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long MaxSum(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_245_max_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSum((new List<long>(new long[]{(long)1L, (long)15L, (long)51L, (long)45L, (long)33L, (long)100L, (long)12L, (long)18L, (long)9L}))) == (194L));\n    Debug.Assert(MaxSum((new List<long>(new long[]{(long)80L, (long)60L, (long)30L, (long)40L, (long)20L, (long)10L}))) == (210L));\n    Debug.Assert(MaxSum((new List<long>(new long[]{(long)2L, (long)3L, (long)14L, (long)16L, (long)21L, (long)23L, (long)29L, (long)30L}))) == (138L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_245_max_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long MaxSum(List<long> arr) {\n        int n = arr.Count;\n\n        \/\/ Edge case: if list has less than 3 elements, it cannot form a bitonic subsequence\n        if (n < 3) return 0;\n\n        \/\/ Arrays to store the maximum sum increasing subsequence up to each position\n        long[] inc = new long[n];\n        \/\/ Arrays to store the maximum sum decreasing subsequence from each position\n        long[] dec = new long[n];\n\n        for (int i = 0; i < n; i++) {\n            inc[i] = arr[i];\n            dec[i] = arr[i];\n        }\n\n        \/\/ Compute the maximum sum increasing subsequences\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && inc[i] < inc[j] + arr[i]) {\n                    inc[i] = inc[j] + arr[i];\n                }\n            }\n        }\n\n        \/\/ Compute the maximum sum decreasing subsequences\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = n - 1; j > i; j--) {\n                if (arr[i] > arr[j] && dec[i] < dec[j] + arr[i]) {\n                    dec[i] = dec[j] + arr[i];\n                }\n            }\n        }\n\n        \/\/ Finding the maximum sum of bitonic subsequence\n        long maxSum = 0;\n        for (int i = 0; i < n; i++) {\n            maxSum = Math.Max(maxSum, inc[i] + dec[i] - arr[i]);\n        }\n\n        return maxSum;\n    }\n}\n```"}
{"name":"mbpp_247_lps","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the length of the longest palindromic subsequence in the given string.\n    public static long Lps(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_247_lps.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Lps((\"TENS FOR TENS\")) == (5L));\n    Debug.Assert(Lps((\"CARDIO FOR CARDS\")) == (7L));\n    Debug.Assert(Lps((\"PART OF THE JOURNEY IS PART\")) == (9L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_247_lps","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the length of the longest palindromic subsequence in the given string.\n    public static int Lps(string str) {\n        int n = str.Length;\n        int[,] dp = new int[n, n];\n\n        \/\/ All substrings of length 1 are palindromes of length 1\n        for (int i = 0; i < n; i++) {\n            dp[i, i] = 1;\n        }\n\n        \/\/ Build the table. cl is the length of the substring\n        for (int cl = 2; cl <= n; cl++) {\n            for (int i = 0; i < n - cl + 1; i++) {\n                int j = i + cl - 1;\n                \n                if (str[i] == str[j] && cl == 2) {\n                    dp[i, j] = 2;\n                } else if (str[i] == str[j]) {\n                    dp[i, j] = dp[i + 1, j - 1] + 2;\n                } else {\n                    dp[i, j] = Math.Max(dp[i, j - 1], dp[i + 1, j]);\n                }\n            }\n        }\n\n        return dp[0, n - 1];\n    }\n}\n```"}
{"name":"mbpp_249_intersection_array","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the intersection of two lists.\n    public static List<long> IntersectionArray(List<long> array_nums1, List<long> array_nums2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_249_intersection_array.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))).Equals((new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))));\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L}))).Equals((new List<long>(new long[]{(long)10L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_249_intersection_array","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the intersection of two lists.\n    public static List<long> IntersectionArray(List<long> array_nums1, List<long> array_nums2) {\n        \/\/ Use HashSet to store the elements of the first list for quick look-up\n        HashSet<long> set = new HashSet<long>(array_nums1);\n\n        \/\/ Use HashSet to store the elements of the intersection\n        HashSet<long> intersection = new HashSet<long>();\n\n        \/\/ Iterate through the second list and add elements to the intersection set\n        \/\/ if they are present in the first list's set\n        foreach (long num in array_nums2) {\n            if (set.Contains(num)) {\n                intersection.Add(num);\n            }\n        }\n\n        \/\/ Convert the HashSet to a List and return\n        return intersection.ToList();\n    }\n}\n```\n\nThis implementation uses `HashSet` to achieve O(1) average time complexity for lookups, making the intersection operation efficient. The resulting intersection list only contains unique elements due to the nature of `HashSet`."}
{"name":"mbpp_250_count_X","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function that takes in a tuple and an element and counts the occcurences of the element in the list.\n    public static long CountX(List<long> tup, long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_250_count_X.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (4L)) == (0L));\n    Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (10L)) == (3L));\n    Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (8L)) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_250_count_X","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function that takes in a list and an element and counts the occurrences of the element in the list.\n    public static long CountX(List<long> tup, long x) {\n        long count = 0;\n        foreach (long element in tup) {\n            if (element == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_251_insert_element","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    public static List<string> InsertElement(List<string> list, string element) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_251_insert_element.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Black\"})), (\"c\")).Equals((new List<string>(new string[]{(string)\"c\", (string)\"Red\", (string)\"c\", (string)\"Green\", (string)\"c\", (string)\"Black\"}))));\n    Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"python\", (string)\"java\"})), (\"program\")).Equals((new List<string>(new string[]{(string)\"program\", (string)\"python\", (string)\"program\", (string)\"java\"}))));\n    Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"happy\", (string)\"sad\"})), (\"laugh\")).Equals((new List<string>(new string[]{(string)\"laugh\", (string)\"happy\", (string)\"laugh\", (string)\"sad\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_251_insert_element","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    public static List<string> InsertElement(List<string> list, string element) {\n        List<string> result = new List<string>();\n\n        foreach (var item in list) {\n            result.Add(element);\n            result.Add(item);\n        }\n\n        return result;\n    }\n}\n```\n\nIn this code, the `InsertElement` function takes a list of strings and an element (also a string), and inserts the given element before each item in the list. The result is returned in a new list."}
{"name":"mbpp_252_convert","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to convert complex numbers to polar coordinates.\n    public static Tuple<float, float> Convert(long numbers) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_252_convert.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Convert((1L)).Equals((Tuple.Create(1.0f, 0.0f))));\n    Debug.Assert(Convert((4L)).Equals((Tuple.Create(4.0f, 0.0f))));\n    Debug.Assert(Convert((5L)).Equals((Tuple.Create(5.0f, 0.0f))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_252_convert","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\n\nclass Problem {\n    \/\/ Write a function to convert complex numbers to polar coordinates.\n    public static Tuple<float, float> Convert(Complex number) {\n        \/\/ Calculate the magnitude (r) of the complex number\n        float r = (float)number.Magnitude;\n        \n        \/\/ Calculate the phase (theta) of the complex number\n        float theta = (float)number.Phase;\n        \n        \/\/ Return the polar coordinates as a tuple (r, theta)\n        return new Tuple<float, float>(r, theta);\n    }\n}\n```"}
{"name":"mbpp_255_combinations_colors","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n    public static List<List<string>> CombinationsColors(List<string> l, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_255_combinations_colors.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (1L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\"})}))));\n    Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (2L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\", (string)\"Blue\"})}))));\n    Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (3L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Blue\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Blue\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\", (string)\"Blue\", (string)\"Blue\"})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_255_combinations_colors","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem \n{\n    \/\/ Write a function that takes in a list and length n, \n    \/\/ and generates all combinations (with repetition) of \n    \/\/ the elements of the list and returns a list with a list for each combination.\n    public static List<List<string>> CombinationsColors(List<string> l, long n) \n    {\n        List<List<string>> results = new List<List<string>>();\n        GenerateCombinations(l, new List<string>(), n, results);\n        return results;\n    }\n\n    private static void GenerateCombinations(List<string> l, List<string> current, long n, List<List<string>> results)\n    {\n        if (current.Count == n)\n        {\n            results.Add(new List<string>(current));\n            return;\n        }\n\n        foreach (string element in l)\n        {\n            current.Add(element);\n            GenerateCombinations(l, current, n, results);\n            current.RemoveAt(current.Count - 1);\n        }\n    }\n}\n```"}
{"name":"mbpp_256_count_Primes_nums","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    public static long CountPrimesNums(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_256_count_Primes_nums.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPrimesNums((5L)) == (2L));\n    Debug.Assert(CountPrimesNums((10L)) == (4L));\n    Debug.Assert(CountPrimesNums((100L)) == (25L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_256_count_Primes_nums","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a C# function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    public static long CountPrimeNums(long n) {\n        if (n <= 2)\n            return 0;\n\n        bool[] isPrime = new bool[n];\n        for (long i = 2; i < n; i++)\n            isPrime[i] = true;\n\n        for (long i = 2; i * i < n; i++) {\n            if (isPrime[i]) {\n                for (long j = i * i; j < n; j += i)\n                    isPrime[j] = false;\n            }\n        }\n\n        long count = 0;\n        for (long i = 2; i < n; i++) {\n            if (isPrime[i])\n                count++;\n        }\n\n        return count;\n    }\n}\n```"}
{"name":"mbpp_257_swap_numbers","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    public static List<long> SwapNumbers(long a, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_257_swap_numbers.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SwapNumbers((10L), (20L)).Equals((new List<long>(new long[]{(long)20L, (long)10L}))));\n    Debug.Assert(SwapNumbers((15L), (17L)).Equals((new List<long>(new long[]{(long)17L, (long)15L}))));\n    Debug.Assert(SwapNumbers((100L), (200L)).Equals((new List<long>(new long[]{(long)200L, (long)100L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_257_swap_numbers","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    public static List<long> SwapNumbers(long a, long b) {\n        return new List<long>{ b, a };\n    }\n}\n```"}
{"name":"mbpp_259_maximize_elements","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to maximize the given two lists.\n    public static List<List<long>> MaximizeElements(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_259_maximize_elements.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)9L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)7L, (long)10L})}))));\n    Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)5L, (long)10L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)8L, (long)11L})}))));\n    Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)11L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)9L, (long)12L})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_259_maximize_elements","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to maximize the given two lists.\n    public static List<List<long>> MaximizeElements(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n        List<List<long>> result = new List<List<long>>();\n\n        for (int i = 0; i < test_tup1.Count; i++) {\n            List<long> maxList = new List<long>();\n            for (int j = 0; j < test_tup1[i].Count; j++) {\n                long maxVal = Math.Max(test_tup1[i][j], test_tup2[i][j]);\n                maxList.Add(maxVal);\n            }\n            result.Add(maxList);\n        }\n\n        return result;\n    }\n}\n```\n"}
{"name":"mbpp_260_newman_prime","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    public static long NewmanPrime(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_260_newman_prime.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NewmanPrime((3L)) == (7L));\n    Debug.Assert(NewmanPrime((4L)) == (17L));\n    Debug.Assert(NewmanPrime((5L)) == (41L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_260_newman_prime","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\n\nclass Problem {\n    \/\/ Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    public static long NewmanPrime(long n) {\n        if (n == 0) return 1;\n        if (n == 1) return 1;\n\n        long[] nswp = new long[n + 1];\n        nswp[0] = 1;\n        nswp[1] = 1;\n\n        for (long i = 2; i <= n; i++) {\n            nswp[i] = 2 * nswp[i - 1] + nswp[i - 2];\n        }\n\n        return nswp[n];\n    }\n}\n```"}
{"name":"mbpp_261_division_elements","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    public static Tuple<long, long, long, long> DivisionElements(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_261_division_elements.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DivisionElements((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(2L, 2L, 2L, 3L))));\n    Debug.Assert(DivisionElements((Tuple.Create(12L, 6L, 8L, 16L)), (Tuple.Create(6L, 3L, 4L, 4L))).Equals((Tuple.Create(2L, 2L, 2L, 4L))));\n    Debug.Assert(DivisionElements((Tuple.Create(20L, 14L, 36L, 18L)), (Tuple.Create(5L, 7L, 6L, 9L))).Equals((Tuple.Create(4L, 2L, 6L, 2L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_261_division_elements","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    public static Tuple<long, long, long, long> DivisionElements(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        if (test_tup2.Item1 == 0 || test_tup2.Item2 == 0 || test_tup2.Item3 == 0 || test_tup2.Item4 == 0) {\n            throw new DivideByZeroException(\"Division by zero is not allowed in one or more elements of the tuples.\");\n        }\n\n        return new Tuple<long, long, long, long>(\n            test_tup1.Item1 \/ test_tup2.Item1,\n            test_tup1.Item2 \/ test_tup2.Item2,\n            test_tup1.Item3 \/ test_tup2.Item3,\n            test_tup1.Item4 \/ test_tup2.Item4\n        );\n    }\n}\n```"}
{"name":"mbpp_262_split_two_parts","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    public static object SplitTwoParts(List<object> list1, long L) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_262_split_two_parts.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SplitTwoParts((new List<object>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L})), (3L)).Equals(Tuple.Create(new List<long>(new long[]{(long)1L, (long)1L, (long)2L}), new List<long>(new long[]{(long)3L, (long)4L, (long)4L, (long)5L, (long)1L}))));\n    Debug.Assert(SplitTwoParts((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"})), (2L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"a\", (string)\"b\"}), new List<string>(new string[]{(string)\"c\", (string)\"d\"}))));\n    Debug.Assert(SplitTwoParts((new List<object>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"})), (4L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\"}), new List<string>(new string[]{(string)\"o\", (string)\"n\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_262_split_two_parts","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    public static (List<object>, List<object>) SplitTwoParts(List<object> list1, long L) {\n        \/\/ Ensure L is within the bounds of the list\n        if (L < 0 || L > list1.Count) {\n            throw new ArgumentOutOfRangeException(nameof(L), \"L must be within the bounds of the list.\");\n        }\n        \n        \/\/ Create the two parts of the list\n        List<object> firstPart = list1.GetRange(0, (int)L);\n        List<object> secondPart = list1.GetRange((int)L, list1.Count - (int)L);\n\n        return (firstPart, secondPart);\n    }\n}\n```"}
{"name":"mbpp_264_dog_age","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate a dog's age in dog's years.\n    public static long DogAge(long h_age) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_264_dog_age.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DogAge((12L)) == (61L));\n    Debug.Assert(DogAge((15L)) == (73L));\n    Debug.Assert(DogAge((24L)) == (109L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_264_dog_age","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to calculate a dog's age in dog's years.\n    \/\/ Assume 1 human year is approximately 7 dog years.\n    public static long DogAge(long h_age) {\n        return h_age * 7;\n    }\n}\n```"}
{"name":"mbpp_265_list_split","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    public static List<List<object>> ListSplit(List<object> S, long step) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_265_list_split.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListSplit((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"e\", (string)\"f\", (string)\"g\", (string)\"h\", (string)\"i\", (string)\"j\", (string)\"k\", (string)\"l\", (string)\"m\", (string)\"n\"})), (3L)).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"d\", (string)\"g\", (string)\"j\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"b\", (string)\"e\", (string)\"h\", (string)\"k\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"f\", (string)\"i\", (string)\"l\"})}))));\n    Debug.Assert(ListSplit((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L, (long)12L, (long)13L, (long)14L})), (3L)).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)10L, (long)13L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L, (long)8L, (long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)12L})}))));\n    Debug.Assert(ListSplit((new List<object>(new string[]{(string)\"python\", (string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\", (string)\"SQL\"})), (2L)).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"python\", (string)\"C\", (string)\"DBMS\"}), (List<string>)new List<string>(new string[]{(string)\"java\", (string)\"C++\", (string)\"SQL\"})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_265_list_split","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    public static List<List<object>> ListSplit(List<object> S, long step) {\n        List<List<object>> result = new List<List<object>>();\n        \n        if (S == null || step <= 0) {\n            throw new ArgumentException(\"The list should not be null and step should be greater than 0.\");\n        }\n        \n        for (int i = 0; i < S.Count; i += (int)step) {\n            List<object> subset = S.GetRange(i, Math.Min((int)step, S.Count - i));\n            result.Add(subset);\n        }\n        \n        return result;\n    }\n}\n```"}
{"name":"mbpp_266_lateralsurface_cube","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the lateral surface area of a cube given its side length.\n    public static long LateralsurfaceCube(long l) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_266_lateralsurface_cube.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LateralsurfaceCube((5L)) == (100L));\n    Debug.Assert(LateralsurfaceCube((9L)) == (324L));\n    Debug.Assert(LateralsurfaceCube((10L)) == (400L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_266_lateralsurface_cube","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the lateral surface area of a cube given its side length.\n    public static long LateralSurfaceCube(long l) {\n        \/\/ The lateral surface area of a cube with side length l\n        \/\/ is given by 4 * l * l\n        return 4 * l * l;\n    }\n}\n```"}
{"name":"mbpp_267_square_Sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    public static long SquareSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_267_square_Sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SquareSum((2L)) == (10L));\n    Debug.Assert(SquareSum((3L)) == (35L));\n    Debug.Assert(SquareSum((4L)) == (84L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_267_square_Sum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    public static long SquareSum(long n) {\n        long sum = 0;\n        for (long i = 1; i <= 2 * n - 1; i += 2) {\n            sum += i * i;\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_268_find_star_num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the n'th star number.\n    public static long FindStarNum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_268_find_star_num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindStarNum((3L)) == (37L));\n    Debug.Assert(FindStarNum((4L)) == (73L));\n    Debug.Assert(FindStarNum((5L)) == (121L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_268_find_star_num","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the n'th star number.\n    public static long FindStarNum(long n) {\n        \/\/ nth star number can be found using the formula: 6 * n * (n - 1) + 1\n        return 6 * n * (n - 1) + 1;\n    }\n}\n```"}
{"name":"mbpp_269_ascii_value","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the ascii value of a character.\n    public static long AsciiValue(string k) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_269_ascii_value.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AsciiValue((\"A\")) == (65L));\n    Debug.Assert(AsciiValue((\"R\")) == (82L));\n    Debug.Assert(AsciiValue((\"S\")) == (83L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_269_ascii_value","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the ascii value of a character.\n    public static long AsciiValue(string k) {\n        if (string.IsNullOrEmpty(k) || k.Length != 1) {\n            throw new ArgumentException(\"Input must be a single character string.\");\n        }\n        return (long)k[0];\n    }\n}\n```"}
{"name":"mbpp_270_sum_even_and_even_index","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of even numbers at even positions of a list.\n    public static long SumEvenAndEvenIndex(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_270_sum_even_and_even_index.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)5L, (long)6L, (long)12L, (long)1L, (long)18L, (long)8L}))) == (30L));\n    Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)3L, (long)20L, (long)17L, (long)9L, (long)2L, (long)10L, (long)18L, (long)13L, (long)6L, (long)18L}))) == (26L));\n    Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)5L, (long)6L, (long)12L, (long)1L}))) == (12L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_270_sum_even_and_even_index","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a csharp function to find the sum of even numbers at even positions of a list.\n    public static long SumEvenAndEvenIndex(List<long> arr) {\n        long sum = 0;\n        \n        for (int i = 0; i < arr.Count; i += 2) {\n            if (arr[i] % 2 == 0) {\n                sum += arr[i];\n            }\n        }\n        \n        return sum;\n    }\n}\n```"}
{"name":"mbpp_271_even_Power_Sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    public static long EvenPowerSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_271_even_Power_Sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenPowerSum((2L)) == (1056L));\n    Debug.Assert(EvenPowerSum((3L)) == (8832L));\n    Debug.Assert(EvenPowerSum((1L)) == (32L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_271_even_Power_Sum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    public static long EvenPowerSum(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            long even = 2 * i;\n            sum += (long)Math.Pow(even, 5);\n        }\n        return sum;\n    }\n}\n```\n\nThis code defines a class `Problem` with a static method `EvenPowerSum` that calculates and returns the sum of the first `n` even natural numbers raised to the fifth power."}
{"name":"mbpp_272_rear_extract","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    public static List<long> RearExtract(List<Tuple<long, string, long>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_272_rear_extract.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Rash\", 21L), (Tuple<long, string, long>)Tuple.Create(2L, \"Varsha\", 20L), (Tuple<long, string, long>)Tuple.Create(3L, \"Kil\", 19L)}))).Equals((new List<long>(new long[]{(long)21L, (long)20L, (long)19L}))));\n    Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Sai\", 36L), (Tuple<long, string, long>)Tuple.Create(2L, \"Ayesha\", 25L), (Tuple<long, string, long>)Tuple.Create(3L, \"Salman\", 45L)}))).Equals((new List<long>(new long[]{(long)36L, (long)25L, (long)45L}))));\n    Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Sudeep\", 14L), (Tuple<long, string, long>)Tuple.Create(2L, \"Vandana\", 36L), (Tuple<long, string, long>)Tuple.Create(3L, \"Dawood\", 56L)}))).Equals((new List<long>(new long[]{(long)14L, (long)36L, (long)56L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_272_rear_extract","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    public static List<long> RearExtract(List<Tuple<long, string, long>> test_list) {\n        List<long> rearElements = new List<long>();\n        foreach (var tuple in test_list) {\n            rearElements.Add(tuple.Item3);\n        }\n        return rearElements;\n    }\n}\n```"}
{"name":"mbpp_273_substract_elements","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    public static Tuple<long, long, long> SubstractElements(Tuple<long, long, long> test_tup1, Tuple<long, long, long> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_273_substract_elements.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SubstractElements((Tuple.Create(10L, 4L, 5L)), (Tuple.Create(2L, 5L, 18L))).Equals((Tuple.Create(8L, -1L, -13L))));\n    Debug.Assert(SubstractElements((Tuple.Create(11L, 2L, 3L)), (Tuple.Create(24L, 45L, 16L))).Equals((Tuple.Create(-13L, -43L, -13L))));\n    Debug.Assert(SubstractElements((Tuple.Create(7L, 18L, 9L)), (Tuple.Create(10L, 11L, 12L))).Equals((Tuple.Create(-3L, 7L, -3L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_273_substract_elements","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    public static Tuple<long, long, long> SubtractElements(Tuple<long, long, long> test_tup1, Tuple<long, long, long> test_tup2) {\n        if(test_tup1 == null || test_tup2 == null) {\n            throw new ArgumentNullException(\"Input tuples cannot be null\");\n        }\n\n        long result1 = test_tup1.Item1 - test_tup2.Item1;\n        long result2 = test_tup1.Item2 - test_tup2.Item2;\n        long result3 = test_tup1.Item3 - test_tup2.Item3;\n        \n        return new Tuple<long, long, long>(result1, result2, result3);\n    }\n}\n```"}
{"name":"mbpp_274_even_binomial_Coeff_Sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    public static long EvenBinomialCoeffSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_274_even_binomial_Coeff_Sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenBinomialCoeffSum((4L)) == (8L));\n    Debug.Assert(EvenBinomialCoeffSum((6L)) == (32L));\n    Debug.Assert(EvenBinomialCoeffSum((2L)) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_274_even_binomial_Coeff_Sum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    public static long EvenBinomialCoeffSum(long n) {\n        long sum = 0;\n        for (long k = 0; k <= n; k += 2) {\n            sum += BinomialCoefficient(n, k);\n        }\n        return sum;\n    }\n\n    private static long BinomialCoefficient(long n, long k) {\n        if (k > n - k) {\n            k = n - k;\n        }\n        long res = 1;\n        for (long i = 0; i < k; ++i) {\n            res *= (n - i);\n            res \/= (i + 1);\n        }\n        return res;\n    }\n}\n```\n\nNote: This code defines a C# function `EvenBinomialCoeffSum(long n)` that calculates the sum of the even-index binomial coefficients for a given positive integer `n`. It uses a helper function `BinomialCoefficient(long n, long k)` to find individual binomial coefficients. The code computes the sum by iterating through even indices (0, 2, 4, ...) up to `n` and summing up the corresponding binomial coefficients."}
{"name":"mbpp_277_dict_filter","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    public static Dictionary<string,long> DictFilter(Dictionary<string,long> dict, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_277_dict_filter.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (170L)).Equals((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Pierre Cox\", 190L}})));\n    Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (180L)).Equals((new Dictionary<string,long>(){{\"Alden Cantrell\", 180L}, {\"Pierre Cox\", 190L}})));\n    Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (190L)).Equals((new Dictionary<string,long>(){{\"Pierre Cox\", 190L}})));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_277_dict_filter","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    public static Dictionary<string,long> DictFilter(Dictionary<string,long> dict, long n) {\n        \/\/ Create a new dictionary to store the filtered entries\n        Dictionary<string, long> filteredDict = new Dictionary<string, long>();\n\n        \/\/ Iterate through each entry in the input dictionary\n        foreach (var entry in dict) {\n            \/\/ Check if the value of the current entry is greater than or equal to n\n            if (entry.Value >= n) {\n                \/\/ Add the entry to the filtered dictionary\n                filteredDict.Add(entry.Key, entry.Value);\n            }\n        }\n\n        \/\/ Return the filtered dictionary\n        return filteredDict;\n    }\n}\n```"}
{"name":"mbpp_279_is_num_decagonal","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the nth decagonal number.\n    public static long IsNumDecagonal(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_279_is_num_decagonal.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNumDecagonal((3L)) == (27L));\n    Debug.Assert(IsNumDecagonal((7L)) == (175L));\n    Debug.Assert(IsNumDecagonal((10L)) == (370L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_279_is_num_decagonal","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the nth decagonal number.\n    \/\/ A decagonal number for a given n is given by the formula: n(4n-3)\n    public static long IsNumDecagonal(long n) {\n        return n * (4 * n - 3);\n    }\n}\n```"}
{"name":"mbpp_280_sequential_search","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n    public static Tuple<bool, long> SequentialSearch(List<long> dlist, long item) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_280_sequential_search.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)11L, (long)23L, (long)58L, (long)31L, (long)56L, (long)77L, (long)43L, (long)12L, (long)65L, (long)19L})), (31L)).Equals((Tuple.Create(true, 3L))));\n    Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)12L, (long)32L, (long)45L, (long)62L, (long)35L, (long)47L, (long)44L, (long)61L})), (61L)).Equals((Tuple.Create(true, 7L))));\n    Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)9L, (long)10L, (long)17L, (long)19L, (long)22L, (long)39L, (long)48L, (long)56L})), (48L)).Equals((Tuple.Create(true, 6L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_280_sequential_search","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n    public static Tuple<bool, long> SequentialSearch(List<long> dlist, long item)\n    {\n        for (int i = 0; i < dlist.Count; i++)\n        {\n            if (dlist[i] == item)\n            {\n                return Tuple.Create(true, (long)i);\n            }\n        }\n        return Tuple.Create(false, -1L);\n    }\n}\n```"}
{"name":"mbpp_281_all_unique","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check if the elements of a given list are unique or not.\n    public static bool AllUnique(List<long> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_281_all_unique.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_281_all_unique","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check if the elements of a given list are unique or not.\n    public static bool AllUnique(List<long> test_list) {\n        HashSet<long> seenElements = new HashSet<long>();\n        foreach (var element in test_list) {\n            if (seenElements.Contains(element)) {\n                return false;\n            }\n            seenElements.Add(element);\n        }\n        return true;\n    }\n}\n```\n\nThis method utilizes a `HashSet` to keep track of elements that have already been encountered in the list. If an element is found that is already in the `HashSet`, the method returns `false`, indicating that the list contains duplicate elements. If it finishes iterating through the list without finding duplicates, it returns `true`, indicating that all elements in the list are unique."}
{"name":"mbpp_282_sub_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to subtract two lists element-wise.\n    public static List<long> SubList(List<long> nums1, List<long> nums2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_282_sub_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SubList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)-3L, (long)-3L, (long)-3L}))));\n    Debug.Assert(SubList((new List<long>(new long[]{(long)1L, (long)2L})), (new List<long>(new long[]{(long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)-2L, (long)-2L}))));\n    Debug.Assert(SubList((new List<long>(new long[]{(long)90L, (long)120L})), (new List<long>(new long[]{(long)50L, (long)70L}))).Equals((new List<long>(new long[]{(long)40L, (long)50L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_282_sub_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to subtract two lists element-wise.\n    public static List<long> SubList(List<long> nums1, List<long> nums2) {\n        if (nums1 == null || nums2 == null) {\n            throw new ArgumentNullException(\"Input lists cannot be null\");\n        }\n        \n        if (nums1.Count != nums2.Count) {\n            throw new ArgumentException(\"Both lists must have the same length\");\n        }\n\n        List<long> result = new List<long>();\n\n        for (int i = 0; i < nums1.Count; i++) {\n            result.Add(nums1[i] - nums2[i]);\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_283_validate","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    public static bool Validate(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_283_validate.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Validate((1234L)) == (true));\n    Debug.Assert(Validate((51241L)) == (false));\n    Debug.Assert(Validate((321L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_283_validate","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Writes a C# function that takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    public static bool Validate(long n) {\n        string numberString = Math.Abs(n).ToString();\n        Dictionary<char, int> digitFrequency = new Dictionary<char, int>();\n\n        \/\/ Count the frequency of each digit\n        foreach (char digit in numberString) {\n            if (digitFrequency.ContainsKey(digit)) {\n                digitFrequency[digit]++;\n            } else {\n                digitFrequency[digit] = 1;\n            }\n        }\n\n        \/\/ Validate the frequency condition\n        foreach (KeyValuePair<char, int> entry in digitFrequency) {\n            int digitValue = entry.Key - '0'; \/\/ Convert char digit to integer\n            if (entry.Value > digitValue) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n```\n\nThis code defines a function `Validate` that checks whether the frequency of each digit in the integer `n` is less than or equal to the digit itself. The function creates a dictionary to store the frequency of each digit in the given number, then checks the condition for each digit. If any digit fails the condition, it returns false. If all digits satisfy the condition, it returns true."}
{"name":"mbpp_284_check_element","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    public static bool CheckElement(List<object> list, object element) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_284_check_element.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckElement((new List<object>(new string[]{(string)\"green\", (string)\"orange\", (string)\"black\", (string)\"white\"})), (object(\"blue\"))) == (false));\n    Debug.Assert(CheckElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (object(7L))) == (false));\n    Debug.Assert(CheckElement((new List<object>(new string[]{(string)\"green\", (string)\"green\", (string)\"green\", (string)\"green\"})), (object(\"green\"))) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_284_check_element","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    public static bool CheckElement(List<object> list, object element) {\n        foreach (var item in list) {\n            if (!item.Equals(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_285_text_match_two_three","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    public static bool TextMatchTwoThree(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_285_text_match_two_three.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchTwoThree((\"ac\")) == (false));\n    Debug.Assert(TextMatchTwoThree((\"dc\")) == (false));\n    Debug.Assert(TextMatchTwoThree((\"abbbba\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_285_text_match_two_three","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    public static bool TextMatchTwoThree(string text) {\n        for(int i = 0; i < text.Length - 2; i++) {\n            if(text[i] == 'a' && text[i + 1] == 'b' && text[i + 2] == 'b') {\n                if (i + 3 < text.Length && text[i + 3] == 'b') {\n                    return true;\n                } else if (i + 3 >= text.Length || text[i + 3] != 'b') {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n```"}
{"name":"mbpp_286_max_sub_array_sum_repeated","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n    public static long MaxSubArraySumRepeated(List<long> a, long n, long k) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_286_max_sub_array_sum_repeated.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)10L, (long)20L, (long)-30L, (long)-1L})), (4L), (3L)) == (30L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)10L, (long)20L})), (3L), (2L)) == (59L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})), (3L), (3L)) == (-1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_286_max_sub_array_sum_repeated","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n    public static long MaxSubArraySumRepeated(List<long> a, long n, long k) {\n        \/\/ Handle the case when k is 0\n        if (k == 0) return 0;\n\n        \/\/ Helper function for standard Kadane's algorithm to find max subarray sum\n        long MaxSubArraySum(List<long> list) {\n            long maxSoFar = list[0], maxEndingHere = list[0];\n            for (int i = 1; i < list.Count; i++) {\n                maxEndingHere = Math.Max(list[i], maxEndingHere + list[i]);\n                maxSoFar = Math.Max(maxSoFar, maxEndingHere);\n            }\n            return maxSoFar;\n        }\n\n        \/\/ Find the sum of one complete array\n        long arraySum = a.Sum();\n        \n        \/\/ Apply Kadane's algorithm for one array\n        long singleArrayMaxSum = MaxSubArraySum(a);\n\n        if (k == 1) return singleArrayMaxSum;\n\n        \/\/ Find the maximum prefix sum and suffix sum\n        long prefixSum = 0, maxPrefixSum = long.MinValue;\n        for (int i = 0; i < n; i++) {\n            prefixSum += a[i];\n            maxPrefixSum = Math.Max(maxPrefixSum, prefixSum);\n        }\n\n        long suffixSum = 0, maxSuffixSum = long.MinValue;\n        for (int i = (int)n - 1; i >= 0; i--) {\n            suffixSum += a[i];\n            maxSuffixSum = Math.Max(maxSuffixSum, suffixSum);\n        }\n\n        \/\/ Case 1: max sum subarray lies within one array\n        long maxSingleArray = singleArrayMaxSum;\n\n        \/\/ Case 2: max sum subarray spans across different arrays\n        long maxMultipleArray = maxPrefixSum + maxSuffixSum;\n        if (k > 2) {\n            maxMultipleArray += (k - 2) * arraySum;\n        }\n\n        return Math.Max(maxSingleArray, maxMultipleArray);\n    }\n}\n```"}
{"name":"mbpp_287_square_Sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    public static long SquareSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_287_square_Sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SquareSum((2L)) == (20L));\n    Debug.Assert(SquareSum((3L)) == (56L));\n    Debug.Assert(SquareSum((4L)) == (120L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_287_square_Sum","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    public static long SquareSum(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            long evenNumber = 2 * i;\n            sum += evenNumber * evenNumber;\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_290_max_length","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the list of maximum length in a list of lists.\n    public static Tuple<long, List<long>> MaxLength(List<List<long>> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_290_max_length.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)13L, (long)15L, (long)17L})))));\n    Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)10L, (long)12L, (long)14L, (long)15L})}))).Equals((Tuple.Create(4L, new List<long>(new long[]{(long)10L, (long)12L, (long)14L, (long)15L})))));\n    Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L}), (List<long>)new List<long>(new long[]{(long)15L, (long)20L, (long)25L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)15L, (long)20L, (long)25L})))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_290_max_length","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the list of maximum length in a list of lists.\n    public static Tuple<long, List<long>> MaxLength(List<List<long>> list1) {\n        if (list1 == null || !list1.Any()) {\n            return new Tuple<long, List<long>>(0, new List<long>());\n        }\n\n        List<long> maxLengthList = list1[0];\n        foreach (var l in list1) {\n            if (l.Count > maxLengthList.Count) {\n                maxLengthList = l;\n            }\n        }\n\n        return new Tuple<long, List<long>>(maxLengthList.Count, maxLengthList);\n    }\n}\n```\n\nThis function, `MaxLength`, takes a list of lists of long integers (`List<List<long>>`) and returns a tuple. The tuple contains two items: the length of the longest list (as a long) and the longest list itself. If the input list is empty or null, the function returns a tuple with the length 0 and an empty list."}
{"name":"mbpp_291_count_no_of_ways","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    public static long CountNoOfWays(long n, long k) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_291_count_no_of_ways.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNoOfWays((2L), (4L)) == (16L));\n    Debug.Assert(CountNoOfWays((3L), (2L)) == (6L));\n    Debug.Assert(CountNoOfWays((4L), (4L)) == (228L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_291_count_no_of_ways","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    public static long CountNoOfWays(long n, long k) {\n        if (n == 0) return 0;\n        if (n == 1) return k;\n\n        long same = k;\n        long diff = k * (k - 1);\n\n        for (long i = 3; i <= n; i++) {\n            long temp = diff;\n            diff = (same + diff) * (k - 1);\n            same = temp;\n        }\n\n        return same + diff;\n    }\n}\n```\n\nThis code defines the `CountNoOfWays` function that calculates the number of ways to paint a fence with `n` posts such that at most two adjacent posts have the same color given `k` colors. The approach uses dynamic programming to iteratively calculate the number of ways to paint the fence considering the constraints."}
{"name":"mbpp_292_find","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_292_find.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_292_find","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n        if (m == 0) {\n            throw new DivideByZeroException(\"Division by zero is not allowed.\");\n        }\n        return n \/ m;\n    }\n}\n```"}
{"name":"mbpp_293_otherside_rightangle","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the third side of a right angled triangle.\n    public static float OthersideRightangle(long w, long h) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_293_otherside_rightangle.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OthersideRightangle((7L), (8L)) == (10.63014581273465f));\n    Debug.Assert(OthersideRightangle((3L), (4L)) == (float)5L);\n    Debug.Assert(OthersideRightangle((7L), (15L)) == (16.55294535724685f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_293_otherside_rightangle","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the third side of a right angled triangle.\n    public static float OthersideRightangle(long w, long h) {\n        \/\/ Use the Pythagorean theorem to calculate the third side\n        \/\/ c^2 = a^2 + b^2, where c is the hypotenuse\n        float c = (float)Math.Sqrt(w * w + h * h);\n        return c;\n    }\n}\n```"}
{"name":"mbpp_295_sum_div","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to return the sum of all divisors of a number.\n    public static long SumDiv(long number) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_295_sum_div.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumDiv((8L)) == (7L));\n    Debug.Assert(SumDiv((12L)) == (16L));\n    Debug.Assert(SumDiv((7L)) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_295_sum_div","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to return the sum of all divisors of a number.\n    public static long SumDiv(long number) {\n        long sum = 0;\n        for (long i = 1; i <= Math.Sqrt(number); i++) {\n            if (number % i == 0) {\n                if (i == number \/ i) {\n                    sum += i; \/\/ add the divisor only once if it's the square root\n                } else {\n                    sum += i + number \/ i; \/\/ add both divisors\n                }\n            }\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_296_get_Inv_Count","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count inversions in a list.\n    public static long GetInvCount(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_296_get_Inv_Count.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)20L, (long)6L, (long)4L, (long)5L}))) == (5L));\n    Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)2L, (long)5L, (long)6L, (long)1L}))) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_296_get_Inv_Count","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function to count inversions in a list.\n    public static long GetInvCount(List<long> arr) {\n        if (arr == null || arr.Count < 2) {\n            return 0;\n        }\n        return MergeSortAndCount(arr, 0, arr.Count - 1);\n    }\n\n    private static long MergeSortAndCount(List<long> arr, int left, int right) {\n        long count = 0;\n        if (left < right) {\n            int mid = (left + right) \/ 2;\n\n            count += MergeSortAndCount(arr, left, mid);\n            count += MergeSortAndCount(arr, mid + 1, right);\n            count += MergeAndCount(arr, left, mid, right);\n        }\n        return count;\n    }\n\n    private static long MergeAndCount(List<long> arr, int left, int mid, int right) {\n        int lenLeft = mid - left + 1;\n        int lenRight = right - mid;\n\n        List<long> leftArr = new List<long>(lenLeft);\n        List<long> rightArr = new List<long>(lenRight);\n\n        for (int i = 0; i < lenLeft; i++) {\n            leftArr.Add(arr[left + i]);\n        }\n        for (int j = 0; j < lenRight; j++) {\n            rightArr.Add(arr[mid + 1 + j]);\n        }\n\n        int iLeft = 0, jRight = 0, k = left;\n        long count = 0;\n\n        while (iLeft < lenLeft && jRight < lenRight) {\n            if (leftArr[iLeft] <= rightArr[jRight]) {\n                arr[k++] = leftArr[iLeft++];\n            } else {\n                arr[k++] = rightArr[jRight++];\n                count += lenLeft - iLeft;\n            }\n        }\n\n        while (iLeft < lenLeft) {\n            arr[k++] = leftArr[iLeft++];\n        }\n\n        while (jRight < lenRight) {\n            arr[k++] = rightArr[jRight++];\n        }\n\n        return count;\n    }\n}\n```"}
{"name":"mbpp_299_max_aggregate","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate the maximum aggregate from the list of tuples.\n    public static Tuple<string, long> MaxAggregate(List<Tuple<string, long>> stdata) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_299_max_aggregate.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 90L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 88L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 7L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 122L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 84L)}))).Equals((Tuple.Create(\"Juan Whelan\", 212L))));\n    Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 50L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 48L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 37L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 22L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 14L)}))).Equals((Tuple.Create(\"Juan Whelan\", 72L))));\n    Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 10L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 20L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 30L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 40L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 50L)}))).Equals((Tuple.Create(\"Sabah Colley\", 70L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_299_max_aggregate","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to calculate the maximum aggregate from the list of tuples.\n    public static Tuple<string, long> MaxAggregate(List<Tuple<string, long>> stdata) {\n        \/\/ Create a dictionary to store the aggregate sums\n        Dictionary<string, long> aggregateSums = new Dictionary<string, long>();\n\n        \/\/ Iterate through each tuple in the list\n        foreach (var data in stdata) {\n            string key = data.Item1;\n            long value = data.Item2;\n\n            \/\/ Aggregate the values by key\n            if (aggregateSums.ContainsKey(key)) {\n                aggregateSums[key] += value;\n            } else {\n                aggregateSums[key] = value;\n            }\n        }\n\n        \/\/ Find the key with the maximum aggregate value\n        var maxAggregate = aggregateSums.Aggregate((l, r) => l.Value > r.Value ? l : r);\n\n        \/\/ Return the result as a tuple\n        return new Tuple<string, long>(maxAggregate.Key, maxAggregate.Value);\n    }\n}\n```"}
{"name":"mbpp_304_find_Element","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find element at a given index after number of rotations.\n    public static long FindElement(List<long> arr, List<List<long>> ranges, long rotations, long index) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_304_find_Element.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)2L}), (List<long>)new List<long>(new long[]{(long)0L, (long)3L})})), (2L), (1L)) == (3L));\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)2L})})), (1L), (2L)) == (3L));\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)2L})})), (1L), (1L)) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_304_find_Element","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a c# function to find element at a given index after number of rotations.\n    public static long FindElement(List<long> arr, List<List<long>> ranges, long rotations, long index) {\n        \/\/ Find the effective number of rotations\n        rotations %= ranges.Count;\n\n        \/\/ Apply rotations in reverse order\n        for(int i = 0; i < rotations; i++) {\n            List<long> range = ranges[ranges.Count - 1 - i];\n            long left = range[0] - 1;\n            long right = range[1] - 1;\n\n            \/\/ Preserve the element which will be moved to right\n            long lastElement = arr[(int)right];\n\n            \/\/ Shift the elements within the given range to the right\n            for(long j = right; j > left; j--) {\n                arr[(int)j] = arr[(int)(j - 1)];\n            }\n\n            \/\/ Place the last element to the first position of the range\n            arr[(int)left] = lastElement;\n        }\n\n        \/\/ Return the element at the requested index (convert 1-based index to 0-based)\n        return arr[(int)(index - 1)];\n    }\n}\n```"}
{"name":"mbpp_305_start_withp","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to return two words from a list of words starting with letter 'p'.\n    public static Tuple<string, string> StartWithp(List<string> words) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_305_start_withp.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python PHP\", (string)\"Java JavaScript\", (string)\"c c++\"}))).Equals((Tuple.Create(\"Python\", \"PHP\"))));\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python Programming\", (string)\"Java Programming\"}))).Equals((Tuple.Create(\"Python\", \"Programming\"))));\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Pqrst Pqr\", (string)\"qrstuv\"}))).Equals((Tuple.Create(\"Pqrst\", \"Pqr\"))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_305_start_withp","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to return two words from a list of words starting with letter 'p'.\n    public static Tuple<string, string> StartWithp(List<string> words) {\n        var result = words.Where(w => w.StartsWith(\"p\", StringComparison.OrdinalIgnoreCase)).Take(2).ToList();\n        \n        if (result.Count < 2) {\n            throw new ArgumentException(\"Not enough words starting with 'p' in the list\");\n        }\n\n        return Tuple.Create(result[0], result[1]);\n    }\n}\n```"}
{"name":"mbpp_306_max_sum_increasing_subseq","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_306_max_sum_increasing_subseq.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_306_max_sum_increasing_subseq","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the maximum sum of increasing subsequence from prefix until ith index \n    \/\/ and also including a given kth element which is after i, i.e., k > i.\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n        \/\/ To handle the edge cases\n        if (k <= index || index < 0 || k < 0 || index >= n || k >= n || n <= 0) {\n            throw new ArgumentException(\"Invalid arguments\");\n        }\n\n        \/\/ DP array to store the maximum sum of increasing subsequence until each index\n        long[] dp = new long[n];\n        \n        \/\/ Initialization of dp array\n        for (int i = 0; i < n; i++) dp[i] = a[i];\n        \n        \/\/ Fill the dp array where each dp[i] contains the maximum sum until i\n        for (int i = 1; i <= index; i++) {\n            for (int j = 0; j < i; j++) {\n                if (a[j] < a[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + a[i]);\n                }\n            }\n        }\n        \n        \/\/ Calculate the maximum sum of the increasing subsequence until index and including kth element\n        long maxSumIncludingK = 0;\n        for (int i = 0; i <= index; i++) {\n            \/\/ Check if the element a[i] can be included in the subsequence ending at k\n            if (a[i] < a[k]) {\n                maxSumIncludingK = Math.Max(maxSumIncludingK, dp[i] + a[k]);\n            }\n        }\n        \n        return maxSumIncludingK;\n    }\n}\n```"}
{"name":"mbpp_308_large_product","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    public static List<long> LargeProduct(List<long> nums1, List<long> nums2, long N) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_308_large_product.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (3L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L}))));\n    Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (4L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L, (long)48L}))));\n    Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (5L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L, (long)48L, (long)45L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_308_large_product","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    public static List<long> LargeProduct(List<long> nums1, List<long> nums2, long N) {\n        List<long> products = new List<long>();\n\n        \/\/ Generate all possible products\n        foreach (var num1 in nums1) {\n            foreach (var num2 in nums2) {\n                products.Add(num1 * num2);\n            }\n        }\n\n        \/\/ Sort the products in descending order\n        products.Sort((x, y) => y.CompareTo(x));\n\n        \/\/ Take the first N products\n        if (N > products.Count) {\n            N = products.Count;\n        }\n\n        return products.Take((int)N).ToList();\n    }\n}\n```\n\nExplanation:\n- The `LargeProduct` method takes two lists of long integers (`nums1` and `nums2`) and a long integer `N`.\n- It initializes an empty list `products` to store all possible products of elements from the two lists.\n- Using nested loops, it computes the product of each pair of elements from `nums1` and `nums2` and adds them to the `products` list.\n- The list `products` is then sorted in descending order.\n- Finally, it takes the first `N` elements from the sorted list. If `N` is larger than the number of available products, it adjusts `N` to the size of the products list.\n- The method returns the top `N` largest products as a list."}
{"name":"mbpp_309_maximum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the maximum of two numbers.\n    public static long Maximum(long a, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_309_maximum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((5L), (10L)) == (10L));\n    Debug.Assert(Maximum((-1L), (-2L)) == (-1L));\n    Debug.Assert(Maximum((9L), (7L)) == (9L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_309_maximum","gpt_solution":"Certainly! Here is the completed code wrapped in markdown syntax:\n\n```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to find the maximum of two numbers.\n    public static long Maximum(long a, long b) {\n        return a > b ? a : b;\n    }\n}\n```"}
{"name":"mbpp_310_string_to_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a given string to a list of characters.\n    public static List<string> StringToTuple(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_310_string_to_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringToTuple((\"python 3.0\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\", (string)\"3\", (string)\".\", (string)\"0\"}))));\n    Debug.Assert(StringToTuple((\"item1\")).Equals((new List<string>(new string[]{(string)\"i\", (string)\"t\", (string)\"e\", (string)\"m\", (string)\"1\"}))));\n    Debug.Assert(StringToTuple((\"15.10\")).Equals((new List<string>(new string[]{(string)\"1\", (string)\"5\", (string)\".\", (string)\"1\", (string)\"0\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_310_string_to_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a given string to a list of characters.\n    public static List<string> StringToTuple(string str1) {\n        List<string> charList = new List<string>();\n        foreach (char c in str1)\n        {\n            charList.Add(c.ToString());\n        }\n        return charList;\n    }\n}\n```"}
{"name":"mbpp_388_highest_Power_of_2","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the highest power of 2 that is less than or equal to n.\n    public static long HighestPowerOf2(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_388_highest_Power_of_2.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HighestPowerOf2((10L)) == (8L));\n    Debug.Assert(HighestPowerOf2((19L)) == (16L));\n    Debug.Assert(HighestPowerOf2((32L)) == (32L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_388_highest_Power_of_2","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the highest power of 2 that is less than or equal to n.\n    public static long HighestPowerOf2(long n) {\n        if (n < 1) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Input must be greater than 0\");\n        }\n\n        long p = 1;\n        while (p <= n) {\n            p <<= 1;\n        }\n\n        return p >> 1;\n    }\n}\n```"}
{"name":"mbpp_389_find_lucas","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the n'th lucas number.\n    public static long FindLucas(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_389_find_lucas.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLucas((9L)) == (76L));\n    Debug.Assert(FindLucas((4L)) == (7L));\n    Debug.Assert(FindLucas((3L)) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_389_find_lucas","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the n'th lucas number.\n    public static long FindLucas(long n) {\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n\n        long a = 2;\n        long b = 1;\n        long lucas = 0;\n\n        for (long i = 2; i <= n; i++) {\n            lucas = a + b;\n            a = b;\n            b = lucas;\n        }\n\n        return lucas;\n    }\n}\n```"}
{"name":"mbpp_390_add_string","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to apply a given format string to all of the elements in a list.\n    public static List<string> AddString(List<object> list_, string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_390_add_string.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddString((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (\"temp{0}\")).Equals((new List<string>(new string[]{(string)\"temp1\", (string)\"temp2\", (string)\"temp3\", (string)\"temp4\"}))));\n    Debug.Assert(AddString((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"})), (\"python{0}\")).Equals((new List<string>(new string[]{(string)\"pythona\", (string)\"pythonb\", (string)\"pythonc\", (string)\"pythond\"}))));\n    Debug.Assert(AddString((new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})), (\"string{0}\")).Equals((new List<string>(new string[]{(string)\"string5\", (string)\"string6\", (string)\"string7\", (string)\"string8\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_390_add_string","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem\n{\n    \/\/ Write a function to apply a given format string to all of the elements in a list.\n    public static List<string> AddString(List<object> list_, string str)\n    {\n        List<string> result = new List<string>();\n\n        foreach (var item in list_)\n        {\n            result.Add(string.Format(str, item));\n        }\n\n        return result;\n    }\n}\n```\n\nThis function `AddString` takes in a list of objects and a format string, then applies the format string to each element in the list, and finally returns a list of the formatted strings. The `string.Format` method is used to apply the format to each item in the list."}
{"name":"mbpp_391_convert_list_dictionary","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert more than one list to nested dictionary.\n    public static List<Dictionary<string,Dictionary<string,long>>> ConvertListDictionary(List<string> l1, List<string> l2, List<long> l3) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_391_convert_list_dictionary.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"S001\", (string)\"S002\", (string)\"S003\", (string)\"S004\"})), (new List<string>(new string[]{(string)\"Adina Park\", (string)\"Leyton Marsh\", (string)\"Duncan Boyle\", (string)\"Saim Richards\"})), (new List<long>(new long[]{(long)85L, (long)98L, (long)89L, (long)92L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S001\", new Dictionary<string,long>(){{\"Adina Park\", 85L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S002\", new Dictionary<string,long>(){{\"Leyton Marsh\", 98L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S003\", new Dictionary<string,long>(){{\"Duncan Boyle\", 89L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S004\", new Dictionary<string,long>(){{\"Saim Richards\", 92L}}}}}))));\n    Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"abc\", (string)\"def\", (string)\"ghi\", (string)\"jkl\"})), (new List<string>(new string[]{(string)\"python\", (string)\"program\", (string)\"language\", (string)\"programs\"})), (new List<long>(new long[]{(long)100L, (long)200L, (long)300L, (long)400L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"abc\", new Dictionary<string,long>(){{\"python\", 100L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"def\", new Dictionary<string,long>(){{\"program\", 200L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"ghi\", new Dictionary<string,long>(){{\"language\", 300L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"jkl\", new Dictionary<string,long>(){{\"programs\", 400L}}}}}))));\n    Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"A1\", (string)\"A2\", (string)\"A3\", (string)\"A4\"})), (new List<string>(new string[]{(string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\"})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A1\", new Dictionary<string,long>(){{\"java\", 10L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A2\", new Dictionary<string,long>(){{\"C\", 20L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A3\", new Dictionary<string,long>(){{\"C++\", 30L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A4\", new Dictionary<string,long>(){{\"DBMS\", 40L}}}}}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_391_convert_list_dictionary","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert more than one list to nested dictionary.\n    public static List<Dictionary<string,Dictionary<string,long>>> ConvertListDictionary(List<string> l1, List<string> l2, List<long> l3) {\n        var result = new List<Dictionary<string,Dictionary<string,long>>>();\n        \n        for (int i = 0; i < l1.Count; i++) {\n            var innerDict = new Dictionary<string, long>();\n            if (i < l2.Count && i < l3.Count) {\n                innerDict.Add(l2[i], l3[i]);\n            }\n\n            var outerDict = new Dictionary<string, Dictionary<string, long>>();\n            outerDict.Add(l1[i], innerDict);\n\n            result.Add(outerDict);\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_392_get_max_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n\/2) + f(n\/3) + f(n\/4) + f(n\/5)), n).\n    public static long GetMaxSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_392_get_max_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxSum((60L)) == (106L));\n    Debug.Assert(GetMaxSum((10L)) == (12L));\n    Debug.Assert(GetMaxSum((2L)) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_392_get_max_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Dictionary to memoize the results of f(n)\n    private static Dictionary<long, long> memo = new Dictionary<long, long>();\n\n    \/\/ Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n\/2) + f(n\/3) + f(n\/4) + f(n\/5)), n).\n    public static long GetMaxSum(long n) {\n        \/\/ Base case for memoization\n        if (n == 0) {\n            return 0;\n        }\n\n        \/\/ Check if the result is already computed\n        if (memo.ContainsKey(n)) {\n            return memo[n];\n        }\n\n        \/\/ Recursive case to calculate the maximum sum\n        long sumUsingSubdivisions = GetMaxSum(n \/ 2) + GetMaxSum(n \/ 3) + GetMaxSum(n \/ 4) + GetMaxSum(n \/ 5);\n        long maxSum = Math.Max(sumUsingSubdivisions, n);\n\n        \/\/ Memoize the result\n        memo[n] = maxSum;\n\n        return maxSum;\n    }\n}\n```"}
{"name":"mbpp_393_max_length_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the list with maximum length.\n    public static Tuple<long, List<long>> MaxLengthList(List<List<long>> input_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_393_max_length_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)13L, (long)15L, (long)17L})))));\n    Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L})}))).Equals((Tuple.Create(5L, new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))));\n    Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)12L})}))).Equals((Tuple.Create(4L, new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L})))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_393_max_length_list","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the list with maximum length.\n    public static Tuple<long, List<long>> MaxLengthList(List<List<long>> input_list) {\n        if (input_list == null || input_list.Count == 0) {\n            return new Tuple<long, List<long>>(0, new List<long>());\n        }\n\n        List<long> maxLengthList = input_list[0];\n        foreach (var list in input_list) {\n            if (list.Count > maxLengthList.Count) {\n                maxLengthList = list;\n            }\n        }\n\n        return new Tuple<long, List<long>>(maxLengthList.Count, maxLengthList);\n    }\n}\n```"}
{"name":"mbpp_394_check_distinct","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if given list contains no duplicates.\n    public static bool CheckDistinct(List<long> test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_394_check_distinct.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)1L, (long)4L, (long)5L, (long)6L, (long)1L, (long)4L}))) == (false));\n    Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)1L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_394_check_distinct","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if given list contains no duplicates.\n    public static bool CheckDistinct(List<long> test_tup) {\n        HashSet<long> uniqueElements = new HashSet<long>(test_tup);\n        return uniqueElements.Count == test_tup.Count;\n    }\n}\n```"}
{"name":"mbpp_395_first_non_repeating_character","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the first non-repeated character in a given string.\n    public static string FirstNonRepeatingCharacter(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_395_first_non_repeating_character.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstNonRepeatingCharacter((\"abcabc\")).Equals(null));\n    Debug.Assert(FirstNonRepeatingCharacter((\"abc\")).Equals((\"a\")));\n    Debug.Assert(FirstNonRepeatingCharacter((\"ababc\")).Equals((\"c\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_395_first_non_repeating_character","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Problem {\n    \/\/ Write a function to find the first non-repeated character in a given string.\n    public static string FirstNonRepeatingCharacter(string str1) {\n        \/\/ Dictionary to store the count of each character\n        var charCount = new Dictionary<char, int>();\n\n        \/\/ Traverse the string to fill the dictionary\n        foreach (char c in str1) {\n            if (charCount.ContainsKey(c)) {\n                charCount[c]++;\n            } else {\n                charCount[c] = 1;\n            }\n        }\n\n        \/\/ Traverse the string again to find the first non-repeated character\n        foreach (char c in str1) {\n            if (charCount[c] == 1) {\n                return c.ToString();\n            }\n        }\n\n        \/\/ If every character is repeated\n        return null;\n    }\n}\n```"}
{"name":"mbpp_396_check_char","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given string starts and ends with the same character or not.\n    public static string CheckChar(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_396_check_char.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckChar((\"abba\")).Equals((\"Valid\")));\n    Debug.Assert(CheckChar((\"a\")).Equals((\"Valid\")));\n    Debug.Assert(CheckChar((\"abcd\")).Equals((\"Invalid\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_396_check_char","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether the given string starts and ends with the same character or not.\n    public static string CheckChar(string str) {\n        if (string.IsNullOrEmpty(str)) {\n            return \"Invalid input\";\n        }\n\n        if (str[0] == str[str.Length - 1]) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n```"}
{"name":"mbpp_397_median_numbers","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the median of three numbers.\n    public static float MedianNumbers(long a, long b, long c) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_397_median_numbers.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MedianNumbers((25L), (55L), (65L)) == (55.0f));\n    Debug.Assert(MedianNumbers((20L), (10L), (30L)) == (20.0f));\n    Debug.Assert(MedianNumbers((15L), (45L), (75L)) == (45.0f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_397_median_numbers","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the median of three numbers.\n    public static float MedianNumbers(long a, long b, long c) {\n        if ((a > b && a < c) || (a < b && a > c)) {\n            return a;\n        } else if ((b > a && b < c) || (b < a && b > c)) {\n            return b;\n        } else {\n            return c;\n        }\n    }\n}\n```"}
{"name":"mbpp_398_sum_of_digits","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to compute the sum of digits of each number of a given list.\n    public static long SumOfDigits(List<object> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_398_sum_of_digits.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfDigits((new List<object>(new long[]{(long)10L, (long)2L, (long)56L}))) == (14L));\n    Debug.Assert(SumOfDigits((new List<object>(new List<long>[]{(List<long>)new List<object>(new object[]{10L, 20L, 4L, 5L, \"b\", 70L, \"a\"})}))) == (19L));\n    Debug.Assert(SumOfDigits((new List<object>(new long[]{(long)10L, (long)20L, (long)-4L, (long)5L, (long)-70L}))) == (19L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_398_sum_of_digits","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to compute the sum of digits of each number of a given list.\n    public static long SumOfDigits(List<object> nums) {\n        long totalSum = 0;\n\n        foreach (var item in nums) {\n            if (item is int number || item is long numberLong || item is BigInteger bigIntNumber) {\n                var numberString = item.ToString();\n                foreach (char digit in numberString) {\n                    if (char.IsDigit(digit)) {\n                        totalSum += digit - '0';\n                    }\n                }\n            }\n        }\n\n        return totalSum;\n    }\n}\n```"}
{"name":"mbpp_399_bitwise_xor","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    public static Tuple<long, long, long, long> BitwiseXor(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_399_bitwise_xor.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BitwiseXor((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(15L, 6L, 5L, 10L))));\n    Debug.Assert(BitwiseXor((Tuple.Create(11L, 5L, 7L, 10L)), (Tuple.Create(6L, 3L, 4L, 4L))).Equals((Tuple.Create(13L, 6L, 3L, 14L))));\n    Debug.Assert(BitwiseXor((Tuple.Create(12L, 6L, 8L, 11L)), (Tuple.Create(7L, 4L, 5L, 6L))).Equals((Tuple.Create(11L, 2L, 13L, 13L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_399_bitwise_xor","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    public static Tuple<long, long, long, long> BitwiseXor(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        long result1 = test_tup1.Item1 ^ test_tup2.Item1;\n        long result2 = test_tup1.Item2 ^ test_tup2.Item2;\n        long result3 = test_tup1.Item3 ^ test_tup2.Item3;\n        long result4 = test_tup1.Item4 ^ test_tup2.Item4;\n\n        return new Tuple<long, long, long, long>(result1, result2, result3, result4);\n    }\n}\n```"}
{"name":"mbpp_400_extract_freq","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract the number of unique tuples in the given list.\n    public static long ExtractFreq(List<Tuple<long, long>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_400_extract_freq.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long, long>)Tuple.Create(5L, 6L)}))) == (3L));\n    Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 15L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long, long>)Tuple.Create(6L, 7L)}))) == (4L));\n    Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 16L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(6L, 9L)}))) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_400_extract_freq","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to extract the number of unique tuples in the given list.\n    public static long ExtractFreq(List<Tuple<long, long>> test_list) {\n        \/\/ Use a HashSet to automatically handle unique tuples\n        HashSet<Tuple<long, long>> uniqueTuples = new HashSet<Tuple<long, long>>(test_list);\n        \n        \/\/ Return the count of unique tuples\n        return uniqueTuples.Count;\n    }\n}\n```\n\nThe above code defines a class `Problem` with a static method `ExtractFreq`. The method takes a list of tuples as input, uses a `HashSet` to store unique tuples, and then returns the count of unique tuples."}
{"name":"mbpp_401_add_nested_tuples","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to perform index wise addition of list elements in the given two nested lists.\n    public static List<List<long>> AddNestedTuples(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_401_add_nested_tuples.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)10L}), (List<long>)new List<long>(new long[]{(long)7L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)8L, (long)13L})}))));\n    Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)9L, (long)12L}), (List<long>)new List<long>(new long[]{(long)9L, (long)16L}), (List<long>)new List<long>(new long[]{(long)5L, (long)12L}), (List<long>)new List<long>(new long[]{(long)10L, (long)15L})}))));\n    Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)11L, (long)18L}), (List<long>)new List<long>(new long[]{(long)7L, (long)14L}), (List<long>)new List<long>(new long[]{(long)12L, (long)17L})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_401_add_nested_tuples","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to perform index wise addition of list elements in the given two nested lists.\n    public static List<List<long>> AddNestedTuples(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n        \/\/ Determine the minimum number of outer lists to iterate through\n        int outerCount = Math.Min(test_tup1.Count, test_tup2.Count);\n        List<List<long>> result = new List<List<long>>(outerCount);\n\n        for (int i = 0; i < outerCount; i++) {\n            \/\/ Determine the minimum number of inner list elements to iterate through\n            int innerCount = Math.Min(test_tup1[i].Count, test_tup2[i].Count);\n            List<long> innerResult = new List<long>(innerCount);\n\n            for (int j = 0; j < innerCount; j++) {\n                innerResult.Add(test_tup1[i][j] + test_tup2[i][j]);\n            }\n\n            \/\/ Add the inner list result to the outer result list\n            result.Add(innerResult);\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_404_minimum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the minimum of two numbers.\n    public static long Minimum(long a, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_404_minimum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minimum((1L), (2L)) == (1L));\n    Debug.Assert(Minimum((-5L), (-4L)) == (-5L));\n    Debug.Assert(Minimum((0L), (0L)) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_404_minimum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the minimum of two numbers.\n    public static long Minimum(long a, long b) {\n        return a < b ? a : b;\n    }\n    \n    \/\/ Additional Example Methods (if necessary for context)\n    \/\/ If you need other context-specific methods, add them here\n}\n```"}
{"name":"mbpp_406_find_Parity","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find whether the parity of a given number is odd.\n    public static bool FindParity(long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_406_find_Parity.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindParity((12L)) == (false));\n    Debug.Assert(FindParity((7L)) == (true));\n    Debug.Assert(FindParity((10L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_406_find_Parity","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a C# function to find whether the parity of a given number is odd.\n    public static bool FindParity(long x) {\n        int count = 0;\n        while (x != 0) {\n            count += (int)(x & 1);\n            x >>= 1;\n        }\n        return (count % 2) != 0;\n    }\n}\n```\n\nThis implementation counts the number of bits set to `1` in the binary representation of the number and checks if it's odd. If the count is odd, the function returns `true`, otherwise it returns `false`."}
{"name":"mbpp_407_rearrange_bigger","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to create the next bigger number by rearranging the digits of a given number.\n    public static object RearrangeBigger(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_407_rearrange_bigger.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RearrangeBigger((12L)).Equals((object(21L))));\n    Debug.Assert(RearrangeBigger((10L)).Equals((object(false))));\n    Debug.Assert(RearrangeBigger((102L)).Equals((object(120L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_407_rearrange_bigger","gpt_solution":"```csharp\nusing System;\nusing System.Linq;\n\nclass Problem \n{\n    \/\/ Write a function to create the next bigger number by rearranging the digits of a given number.\n    public static object RearrangeBigger(long n) \n    {\n        char[] digits = n.ToString().ToCharArray();\n        int i = digits.Length - 1;\n        \n        \/\/ Find the first digit that is smaller than the digit next to it when traversing from the right\n        while (i > 0 && digits[i - 1] >= digits[i])\n        {\n            i--;\n        }\n        \n        \/\/ If no such digit is found, it means the digits are in non-increasing order\n        \/\/ So, there can't be a bigger number with the same digits\n        if (i <= 0)\n        {\n            return -1;\n        }\n        \n        int j = digits.Length - 1;\n        \n        \/\/ Find the smallest digit on the right side of (i-1) that is larger than digits[i-1]\n        while (digits[j] <= digits[i - 1])\n        {\n            j--;\n        }\n        \n        \/\/ Swap the found digit with digits[i-1]\n        char temp = digits[i - 1];\n        digits[i - 1] = digits[j];\n        digits[j] = temp;\n        \n        \/\/ Reverse the digits after position i-1\n        Array.Reverse(digits, i, digits.Length - i);\n        \n        \/\/ Convert the array back to a number\n        return long.Parse(new string(digits));\n    }\n}\n```"}
{"name":"mbpp_408_k_smallest_pairs","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n    public static List<List<long>> KSmallestPairs(List<long> nums1, List<long> nums2, long k) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_408_k_smallest_pairs.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (2L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L})}))));\n    Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))));\n    Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (7L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)2L})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_408_k_smallest_pairs","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n    public static List<List<long>> KSmallestPairs(List<long> nums1, List<long> nums2, long k) {\n        \/\/ List to store the k smallest pairs\n        List<List<long>> result = new List<List<long>>();\n        \n        \/\/ Edge cases\n        if (nums1 == null || nums2 == null || nums1.Count == 0 || nums2.Count == 0 || k <= 0) {\n            return result;\n        }\n        \n        \/\/ Use a min-heap to keep track of pairs by their sum\n        var priorityQueue = new SortedSet<(long sum, int index1, int index2)>();\n        \n        \/\/ Initialize the priority queue with the first row\n        for (int i = 0; i < nums1.Count && i < k; i++) {\n            priorityQueue.Add((nums1[i] + nums2[0], i, 0));\n        }\n        \n        \/\/ Extract the smallest pairs from the priority queue\n        while (k-- > 0 && priorityQueue.Count > 0) {\n            var smallest = priorityQueue.Min;\n            priorityQueue.Remove(smallest);\n            \n            int i = smallest.index1;\n            int j = smallest.index2;\n            \n            result.Add(new List<long> { nums1[i], nums2[j] });\n            \n            \/\/ If there is a next element in the row, add the new pair to the heap\n            if (j + 1 < nums2.Count) {\n                priorityQueue.Add((nums1[i] + nums2[j + 1], i, j + 1));\n            }\n        }\n        \n        return result;\n    }\n}\n```\n\nThis code defines a method `KSmallestPairs` that accepts two lists of long integers (`nums1` and `nums2`) and a long integer `k`. It returns a list of the `k` smallest pairs, where each pair consists of one element from each of the two lists. The pairs are determined based on their pairwise sum. The implementation uses a min-heap (priority queue) to efficiently keep track of and retrieve the smallest pairs."}
{"name":"mbpp_409_min_product_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the minimum product from the pairs of tuples within a given list.\n    public static long MinProductTuple(List<Tuple<long, long>> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_409_min_product_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 7L), (Tuple<long, long>)Tuple.Create(2L, 6L), (Tuple<long, long>)Tuple.Create(1L, 8L), (Tuple<long, long>)Tuple.Create(4L, 9L)}))) == (8L));\n    Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 20L), (Tuple<long, long>)Tuple.Create(15L, 2L), (Tuple<long, long>)Tuple.Create(5L, 10L)}))) == (30L));\n    Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(11L, 44L), (Tuple<long, long>)Tuple.Create(10L, 15L), (Tuple<long, long>)Tuple.Create(20L, 5L), (Tuple<long, long>)Tuple.Create(12L, 9L)}))) == (100L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_409_min_product_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the minimum product from the pairs of tuples within a given list.\n    public static long MinProductTuple(List<Tuple<long, long>> list1) {\n        if (list1 == null || list1.Count == 0) {\n            throw new ArgumentException(\"The list must contain at least one tuple.\");\n        }\n\n        long minProduct = long.MaxValue;\n\n        foreach (var tuple in list1) {\n            long product = tuple.Item1 * tuple.Item2;\n            if (product < minProduct) {\n                minProduct = product;\n            }\n        }\n\n        return minProduct;\n    }\n}\n```"}
{"name":"mbpp_411_snake_to_camel","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert the given snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_411_snake_to_camel.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"android_tv\")).Equals((\"AndroidTv\")));\n    Debug.Assert(SnakeToCamel((\"google_pixel\")).Equals((\"GooglePixel\")));\n    Debug.Assert(SnakeToCamel((\"apple_watch\")).Equals((\"AppleWatch\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_411_snake_to_camel","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to convert the given snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n        if (string.IsNullOrEmpty(word)) return word;\n\n        var parts = word.Split('_');\n        for (int i = 1; i < parts.Length; i++) {\n            if(parts[i].Length > 0) {\n                parts[i] = parts[i].Substring(0, 1).ToUpper() + parts[i].Substring(1).ToLower();\n            }\n        }\n        return string.Concat(parts);\n    }\n}\n```\n\nThis code defines a function `SnakeToCamel` within the `Problem` class that converts a given snake_case string to camelCase string. The function splits the input string on underscores, capitalizes the first letter of each subsequent part, and then joins these parts back together."}
{"name":"mbpp_412_remove_odd","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to remove odd numbers from a given list.\n    public static List<long> RemoveOdd(List<long> l) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_412_remove_odd.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)10L, (long)20L, (long)3L}))).Equals((new List<long>(new long[]{(long)10L, (long)20L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_412_remove_odd","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to remove odd numbers from a given list.\n    public static List<long> RemoveOdd(List<long> l) {\n        List<long> result = new List<long>();\n        foreach (long number in l) {\n            if (number % 2 == 0) {\n                result.Add(number);\n            }\n        }\n        return result;\n    }\n}\n```"}
{"name":"mbpp_413_extract_nth_element","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract the nth element from a given list of tuples.\n    public static List<object> ExtractNthElement(List<Tuple<string, long, long>> list1, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_413_extract_nth_element.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (0L)).Equals((new List<object>(new string[]{(string)\"Greyson Fulton\", (string)\"Brady Kent\", (string)\"Wyatt Knott\", (string)\"Beau Turnbull\"}))));\n    Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (2L)).Equals((new List<object>(new long[]{(long)99L, (long)96L, (long)94L, (long)98L}))));\n    Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (1L)).Equals((new List<object>(new long[]{(long)98L, (long)97L, (long)91L, (long)94L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_413_extract_nth_element","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to extract the nth element from a given list of tuples.\n    public static List<object> ExtractNthElement(List<Tuple<string, long, long>> list1, long n) {\n        List<object> result = new List<object>();\n        \n        foreach (var tuple in list1) {\n            if (n == 0) {\n                result.Add(tuple.Item1);\n            } else if (n == 1) {\n                result.Add(tuple.Item2);\n            } else if (n == 2) {\n                result.Add(tuple.Item3);\n            } else {\n                throw new ArgumentOutOfRangeException(\"n\", \"The value of n must be 0, 1, or 2.\");\n            }\n        }\n        \n        return result;\n    }\n}\n```"}
{"name":"mbpp_414_overlapping","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether any value in a sequence exists in a sequence or not.\n    public static bool Overlapping(List<long> list1, List<long> list2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_414_overlapping.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))) == (false));\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_414_overlapping","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a c# function to check whether any value in a sequence exists in another sequence or not.\n    public static bool Overlapping(List<long> list1, List<long> list2) {\n        HashSet<long> set = new HashSet<long>(list1);\n        foreach (long value in list2) {\n            if (set.Contains(value)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\nThe above code defines the method `Overlapping` that takes two lists of long integers as input and checks if any value from the first list exists in the second list. The use of `HashSet` ensures efficient lookup times for checking overlaps."}
{"name":"mbpp_415_max_Product","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find a pair with highest product from a given list of integers.\n    public static Tuple<long, long> MaxProduct(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_415_max_Product.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)7L, (long)0L, (long)8L, (long)4L}))).Equals((Tuple.Create(7L, 8L))));\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)0L, (long)-1L, (long)-2L, (long)-4L, (long)5L, (long)0L, (long)-6L}))).Equals((Tuple.Create(-4L, -6L))));\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((Tuple.Create(2L, 3L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_415_max_Product","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function to find a pair with highest product from a given list of integers.\n    public static Tuple<long, long> MaxProduct(List<long> arr) {\n        if (arr == null || arr.Count < 2) {\n            throw new ArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        long max1 = long.MinValue;\n        long max2 = long.MinValue;\n        long min1 = long.MaxValue;\n        long min2 = long.MaxValue;\n\n        foreach (long num in arr) {\n            if (num > max1) {\n                max2 = max1;\n                max1 = num;\n            } else if (num > max2) {\n                max2 = num;\n            }\n\n            if (num < min1) {\n                min2 = min1;\n                min1 = num;\n            } else if (num < min2) {\n                min2 = num;\n            }\n        }\n\n        long product1 = max1 * max2;\n        long product2 = min1 * min2;\n\n        if (product1 > product2) {\n            return Tuple.Create(max1, max2);\n        } else {\n            return Tuple.Create(min1, min2);\n        }\n    }\n}\n```"}
{"name":"mbpp_417_group_tuples","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find common first element in given list of lists.\n    public static List<List<string>> GroupTuples(List<List<string>> Input) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_417_group_tuples.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"w\", (string)\"t\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"w\", (string)\"t\"})}))));\n    Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"e\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"e\"})}))));\n    Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"h\", (string)\"i\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"h\", (string)\"i\"})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_417_group_tuples","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find common first element in given list of lists.\n    public static List<List<string>> GroupTuples(List<List<string>> input) {\n        \/\/ Dictionary to hold the grouped lists based on common first element.\n        Dictionary<string, List<List<string>>> groupedLists = new Dictionary<string, List<List<string>>>();\n\n        \/\/ Iterate over each list in the input.\n        foreach (var list in input) {\n            if (list != null && list.Count > 0) {\n                \/\/ Extract the first element.\n                string firstElement = list[0];\n\n                \/\/ Check if the first element is already a key in the dictionary.\n                if (!groupedLists.ContainsKey(firstElement)) {\n                    \/\/ If not, create a new list for this first element.\n                    groupedLists[firstElement] = new List<List<string>>();\n                }\n                \/\/ Add the current list to the corresponding group in the dictionary.\n                groupedLists[firstElement].Add(list);\n            }\n        }\n\n        \/\/ Extract the grouped lists and return them.\n        List<List<string>> result = new List<List<string>>();\n        foreach (var group in groupedLists.Values) {\n            result.AddRange(group);\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_418_Find_Max","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the element of a list having maximum length.\n    public static List<object> FindMax(List<List<object>> lst) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_418_Find_Max.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\", (string)\"C\"})}))).Equals((new List<object>(new string[]{(string)\"A\", (string)\"B\", (string)\"C\"}))));\n    Debug.Assert(FindMax((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))).Equals((new List<object>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    Debug.Assert(FindMax((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)5L, (long)6L, (long)1L})}))).Equals((new List<object>(new long[]{(long)1L, (long)5L, (long)6L, (long)1L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_418_Find_Max","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a csharp function to find the element of a list having maximum length.\n    public static List<object> FindMax(List<List<object>> lst) {\n        if (lst == null || lst.Count == 0) {\n            return null;\n        }\n\n        List<object> maxList = lst[0];\n        foreach (var subList in lst) {\n            if (subList.Count > maxList.Count) {\n                maxList = subList;\n            }\n        }\n        return maxList;\n    }\n}\n```"}
{"name":"mbpp_420_cube_Sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the cube sum of first n even natural numbers.\n    public static long CubeSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_420_cube_Sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CubeSum((2L)) == (72L));\n    Debug.Assert(CubeSum((3L)) == (288L));\n    Debug.Assert(CubeSum((4L)) == (800L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_420_cube_Sum","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csharp function to find the cube sum of first n even natural numbers.\n    public static long CubeSum(long n) {\n        long sum = 0;\n        for (long i = 1; i <= n; i++) {\n            long evenNumber = 2 * i;\n            sum += evenNumber * evenNumber * evenNumber;\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_421_concatenate_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to concatenate each element of tuple by the delimiter.\n    public static string ConcatenateTuple(Tuple<string, string, long, string> test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_421_concatenate_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ConcatenateTuple((Tuple.Create(\"ID\", \"is\", 4L, \"UTS\"))).Equals((\"ID-is-4-UTS\")));\n    Debug.Assert(ConcatenateTuple((Tuple.Create(\"QWE\", \"is\", 4L, \"RTY\"))).Equals((\"QWE-is-4-RTY\")));\n    Debug.Assert(ConcatenateTuple((Tuple.Create(\"ZEN\", \"is\", 4L, \"OP\"))).Equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_421_concatenate_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to concatenate each element of tuple by the delimiter.\n    public static string ConcatenateTuple(Tuple<string, string, long, string> test_tup) {\n        \/\/ Define the delimiter\n        string delimiter = \" \";\n\n        \/\/ Convert each element to string (long should be converted) and concatenate using delimiter\n        string result = $\"{test_tup.Item1}{delimiter}{test_tup.Item2}{delimiter}{test_tup.Item3}{delimiter}{test_tup.Item4}\";\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_422_find_Average_Of_Cube","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the average of cubes of first n natural numbers.\n    public static float FindAverageOfCube(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_422_find_Average_Of_Cube.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindAverageOfCube((2L)) == (4.5f));\n    Debug.Assert(FindAverageOfCube((3L)) == (float)12L);\n    Debug.Assert(FindAverageOfCube((1L)) == (float)1L);\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_422_find_Average_Of_Cube","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csthon function to find the average of cubes of first n natural numbers.\n    public static float FindAverageOfCube(long n) {\n        if (n <= 0)\n        {\n            throw new ArgumentException(\"The input must be a positive integer.\");\n        }\n\n        \/\/ Sum of first n natural numbers cubes is given by: (n(n + 1) \/ 2)^2\n        long sumOfCubes = (long)Math.Pow(n * (n + 1) \/ 2, 2);\n\n        \/\/ Average is sum of cubes divided by the number of elements, which is n\n        return (float)sumOfCubes \/ n;\n    }\n}\n```"}
{"name":"mbpp_424_extract_rear","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract only the rear index element of each string in the given tuple.\n    public static List<string> ExtractRear(Tuple<string, string, string> test_tuple) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_424_extract_rear.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractRear((Tuple.Create(\"Mers\", \"for\", \"Vers\"))).Equals((new List<string>(new string[]{(string)\"s\", (string)\"r\", (string)\"s\"}))));\n    Debug.Assert(ExtractRear((Tuple.Create(\"Avenge\", \"for\", \"People\"))).Equals((new List<string>(new string[]{(string)\"e\", (string)\"r\", (string)\"e\"}))));\n    Debug.Assert(ExtractRear((Tuple.Create(\"Gotta\", \"get\", \"go\"))).Equals((new List<string>(new string[]{(string)\"a\", (string)\"t\", (string)\"o\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_424_extract_rear","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract only the rear index element of each string in the given tuple.\n    public static List<string> ExtractRear(Tuple<string, string, string> test_tuple) {\n        \/\/ Initialize a list to hold the rear elements\n        List<string> rearElements = new List<string>();\n\n        \/\/ Extract the last character of each string in the tuple\n        if (!string.IsNullOrEmpty(test_tuple.Item1))\n            rearElements.Add(test_tuple.Item1.Substring(test_tuple.Item1.Length - 1));\n\n        if (!string.IsNullOrEmpty(test_tuple.Item2))\n            rearElements.Add(test_tuple.Item2.Substring(test_tuple.Item2.Length - 1));\n\n        if (!string.IsNullOrEmpty(test_tuple.Item3))\n            rearElements.Add(test_tuple.Item3.Substring(test_tuple.Item3.Length - 1));\n\n        \/\/ Return the list of rear elements\n        return rearElements;\n    }\n}\n```"}
{"name":"mbpp_425_count_element_in_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count the number of sublists containing a particular element.\n    public static long CountElementInList(List<List<object>> list1, object x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_425_count_element_in_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountElementInList((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)1L, (long)11L}), (List<long>)new List<long>(new long[]{(long)1L, (long)15L, (long)7L})})), (object(1L))) == (3L));\n    Debug.Assert(CountElementInList((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"C\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"D\", (string)\"E\"}), (List<string>)new List<string>(new string[]{(string)\"B\", (string)\"C\", (string)\"D\"})})), (object(\"A\"))) == (3L));\n    Debug.Assert(CountElementInList((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"C\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"D\", (string)\"E\"}), (List<string>)new List<string>(new string[]{(string)\"B\", (string)\"C\", (string)\"D\"})})), (object(\"E\"))) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_425_count_element_in_list","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count the number of sublists containing a particular element.\n    public static long CountElementInList(List<List<object>> list1, object x) {\n        long count = 0;\n        foreach (var sublist in list1) {\n            if (sublist.Contains(x)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_426_filter_oddnumbers","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to filter odd numbers.\n    public static List<long> FilterOddnumbers(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_426_filter_oddnumbers.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L}))));\n    Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)10L, (long)20L, (long)45L, (long)67L, (long)84L, (long)93L}))).Equals((new List<long>(new long[]{(long)45L, (long)67L, (long)93L}))));\n    Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)8L, (long)6L, (long)4L, (long)3L}))).Equals((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)3L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_426_filter_oddnumbers","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to filter odd numbers.\n    public static List<long> FilterOddNumbers(List<long> nums) {\n        return nums.Where(num => num % 2 != 0).ToList();\n    }\n}\n```"}
{"name":"mbpp_427_change_date_format","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    public static string ChangeDateFormat(string dt) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_427_change_date_format.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeDateFormat((\"2026-01-02\")).Equals((\"02-01-2026\")));\n    Debug.Assert(ChangeDateFormat((\"2020-11-13\")).Equals((\"13-11-2020\")));\n    Debug.Assert(ChangeDateFormat((\"2021-04-26\")).Equals((\"26-04-2021\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_427_change_date_format","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    public static string ChangeDateFormat(string dt) {\n        \/\/ Split the date by '-'\n        string[] parts = dt.Split('-');\n        \n        \/\/ Ensure the input format is correct\n        if (parts.Length != 3) {\n            throw new FormatException(\"Date format is incorrect. Expected format is yyyy-mm-dd.\");\n        }\n        \n        \/\/ Re-arrange the parts to dd-mm-yyyy format\n        string day = parts[2];\n        string month = parts[1];\n        string year = parts[0];\n        \n        \/\/ Return the new format\n        return $\"{day}-{month}-{year}\";\n    }\n}\n```"}
{"name":"mbpp_428_shell_sort","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort the given list by using shell sort.\n    public static List<long> ShellSort(List<long> my_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_428_shell_sort.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ShellSort((new List<long>(new long[]{(long)12L, (long)23L, (long)4L, (long)5L, (long)3L, (long)2L, (long)12L, (long)81L, (long)56L, (long)95L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)12L, (long)12L, (long)23L, (long)56L, (long)81L, (long)95L}))));\n    Debug.Assert(ShellSort((new List<long>(new long[]{(long)24L, (long)22L, (long)39L, (long)34L, (long)87L, (long)73L, (long)68L}))).Equals((new List<long>(new long[]{(long)22L, (long)24L, (long)34L, (long)39L, (long)68L, (long)73L, (long)87L}))));\n    Debug.Assert(ShellSort((new List<long>(new long[]{(long)32L, (long)30L, (long)16L, (long)96L, (long)82L, (long)83L, (long)74L}))).Equals((new List<long>(new long[]{(long)16L, (long)30L, (long)32L, (long)74L, (long)82L, (long)83L, (long)96L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_428_shell_sort","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to sort the given list by using shell sort.\n    public static List<long> ShellSort(List<long> my_list) {\n        int n = my_list.Count;\n\n        \/\/ Start with a large gap, then reduce the gap\n        for (int gap = n \/ 2; gap > 0; gap \/= 2) {\n            \/\/ Do a gapped insertion sort for this gap size.\n            for (int i = gap; i < n; i += 1) {\n                \/\/ add a[i] to the elements that have been gap sorted\n                \/\/ save a[i] in temp and make a hole at position i\n                long temp = my_list[i];\n                \n                \/\/ shift earlier gap-sorted elements up until the correct location for a[i] is found\n                int j;\n                for (j = i; j >= gap && my_list[j - gap] > temp; j -= gap) {\n                    my_list[j] = my_list[j - gap];\n                }\n                \n                \/\/ put temp (the original a[i]) in its correct location\n                my_list[j] = temp;\n            }\n        }\n\n        return my_list;\n    }\n}\n```"}
{"name":"mbpp_429_and_tuples","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract the elementwise and tuples from the given two tuples.\n    public static Tuple<long, long, long, long> AndTuples(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_429_and_tuples.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AndTuples((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(0L, 0L, 2L, 1L))));\n    Debug.Assert(AndTuples((Tuple.Create(1L, 2L, 3L, 4L)), (Tuple.Create(5L, 6L, 7L, 8L))).Equals((Tuple.Create(1L, 2L, 3L, 0L))));\n    Debug.Assert(AndTuples((Tuple.Create(8L, 9L, 11L, 12L)), (Tuple.Create(7L, 13L, 14L, 17L))).Equals((Tuple.Create(0L, 9L, 10L, 0L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_429_and_tuples","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to extract the elementwise and tuples from the given two tuples.\n    public static Tuple<long, long, long, long> AndTuples(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        \/\/ Extracting elementwise AND of tuples\n        long and1 = test_tup1.Item1 & test_tup2.Item1;\n        long and2 = test_tup1.Item2 & test_tup2.Item2;\n        long and3 = test_tup1.Item3 & test_tup2.Item3;\n        long and4 = test_tup1.Item4 & test_tup2.Item4;\n\n        \/\/ Returning the result as a new tuple\n        return new Tuple<long, long, long, long>(and1, and2, and3, and4);\n    }\n}\n```"}
{"name":"mbpp_430_parabola_directrix","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the directrix of a parabola.\n    public static long ParabolaDirectrix(long a, long b, long c) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_430_parabola_directrix.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParabolaDirectrix((5L), (3L), (2L)) == (-198L));\n    Debug.Assert(ParabolaDirectrix((9L), (8L), (4L)) == (-2336L));\n    Debug.Assert(ParabolaDirectrix((2L), (4L), (6L)) == (-130L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_430_parabola_directrix","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the directrix of a parabola.\n    public static long ParabolaDirectrix(long a, long b, long c) {\n        \/\/ The directrix of a parabolic equation y = ax^2 + bx + c can be calculated \n        \/\/ using the formula: y = c - (b^2 - 1)\/(4a)\n        \/\/ Note: This computation is valid for a parabolic equation in the form y = ax^2 + bx + c.\n        \n        if (a == 0) {\n            throw new ArgumentException(\"The coefficient 'a' should not be zero for a parabolic equation.\");\n        }\n        \n        \/\/ Calculate the vertex x-coordinate\n        double vertexX = -b \/ (2.0 * a);\n        \/\/ Calculate the y-coordinate of the directrix\n        double directrixY = c - (b * b - 1) \/ (4.0 * a);\n        \n        return (long)directrixY;\n    }\n}\n```"}
{"name":"mbpp_431_common_element","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes two lists and returns true if they have at least one common element.\n    public static Nullable<bool> CommonElement(List<object> list1, List<object> list2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_431_common_element.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CommonElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals(true));\n    Debug.Assert(CommonElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))).Equals(null));\n    Debug.Assert(CommonElement((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})), (new List<object>(new string[]{(string)\"d\", (string)\"b\", (string)\"e\"}))).Equals(true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_431_common_element","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes two lists and returns true if they have at least one common element.\n    public static Nullable<bool> CommonElement(List<object> list1, List<object> list2) {\n        if (list1 == null || list2 == null) {\n            return null; \/\/ If any of the lists is null, return null.\n        }\n\n        HashSet<object> set = new HashSet<object>(list1);\n\n        foreach (var item in list2) {\n            if (set.Contains(item)) {\n                return true; \/\/ Return true if there is at least one common element.\n            }\n        }\n\n        return false; \/\/ Return false if there are no common elements.\n    }\n}\n```"}
{"name":"mbpp_432_median_trapezium","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the median length of a trapezium.\n    public static float MedianTrapezium(long base1, long base2, long height) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_432_median_trapezium.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MedianTrapezium((15L), (25L), (35L)) == (float)20L);\n    Debug.Assert(MedianTrapezium((10L), (20L), (30L)) == (float)15L);\n    Debug.Assert(MedianTrapezium((6L), (9L), (4L)) == (7.5f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_432_median_trapezium","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the median length of a trapezium.\n    public static float MedianTrapezium(long base1, long base2, long height) {\n        \/\/ The median length of a trapezium is the average of the lengths of the two bases.\n        float median = (base1 + base2) \/ 2.0f;\n        return median;\n    }\n}\n```"}
{"name":"mbpp_433_check_greater","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the entered number is greater than the elements of the given list.\n    public static bool CheckGreater(List<long> arr, long number) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_433_check_greater.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckGreater((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (4L)) == (false));\n    Debug.Assert(CheckGreater((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (8L)) == (true));\n    Debug.Assert(CheckGreater((new List<long>(new long[]{(long)9L, (long)7L, (long)4L, (long)8L, (long)6L, (long)1L})), (11L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_433_check_greater","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to check whether the entered number is greater than the elements of the given list.\n    public static bool CheckGreater(List<long> arr, long number) {\n        foreach (var item in arr) {\n            if (number <= item) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_434_text_match_one","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that matches a string that has an a followed by one or more b's.\n    public static bool TextMatchOne(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_434_text_match_one.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchOne((\"ac\")) == (false));\n    Debug.Assert(TextMatchOne((\"dc\")) == (false));\n    Debug.Assert(TextMatchOne((\"abba\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_434_text_match_one","gpt_solution":"```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    public static bool TextMatchOne(string text) {\n        if (string.IsNullOrEmpty(text)) {\n            return false;\n        }\n\n        \/\/ Regular expression to match 'a' followed by one or more 'b's.\n        string pattern = @\"a+b+\";\n\n        \/\/ Check if the text matches the pattern\n        return Regex.IsMatch(text, pattern);\n    }\n}\n```\n\nIn this code, `TextMatchOne` method takes a string as input and uses the `Regex.IsMatch` method to determine if the string matches the pattern `'a'` followed by one or more `'b's. The regular expression pattern `@\"a+b+\"` ensures that the string contains at least one 'a' followed by one or more 'b's."}
{"name":"mbpp_435_last_Digit","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the last digit of a given number.\n    public static long LastDigit(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_435_last_Digit.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LastDigit((123L)) == (3L));\n    Debug.Assert(LastDigit((25L)) == (5L));\n    Debug.Assert(LastDigit((30L)) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_435_last_Digit","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a c# function to find the last digit of a given number.\n    public static long LastDigit(long n) {\n        return Math.Abs(n % 10);\n    }\n}\n```"}
{"name":"mbpp_436_neg_nos","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to return the negative numbers in a list.\n    public static List<long> NegNos(List<long> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_436_neg_nos.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NegNos((new List<long>(new long[]{(long)-1L, (long)4L, (long)5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-6L}))));\n    Debug.Assert(NegNos((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-2L}))));\n    Debug.Assert(NegNos((new List<long>(new long[]{(long)-7L, (long)-6L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)-7L, (long)-6L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_436_neg_nos","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a C# function to return the negative numbers in a list.\n    public static List<long> NegNos(List<long> list1) {\n        \/\/ Initialize an empty list to store negative numbers\n        List<long> negNumbers = new List<long>();\n\n        \/\/ Iterate through the original list and add negative numbers to the negNumbers list\n        foreach (long num in list1) {\n            if (num < 0) {\n                negNumbers.Add(num);\n            }\n        }\n\n        \/\/ Return the list of negative numbers\n        return negNumbers;\n    }\n}\n```"}
{"name":"mbpp_437_remove_odd","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove odd characters in a string.\n    public static string RemoveOdd(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_437_remove_odd.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveOdd((\"python\")).Equals((\"yhn\")));\n    Debug.Assert(RemoveOdd((\"program\")).Equals((\"rga\")));\n    Debug.Assert(RemoveOdd((\"language\")).Equals((\"agae\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_437_remove_odd","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to remove odd characters in a string.\n    public static string RemoveOdd(string str1) {\n        if (string.IsNullOrEmpty(str1)) {\n            return str1;\n        }\n\n        StringBuilder strBuilder = new StringBuilder();\n        for (int i = 0; i < str1.Length; i++) {\n            if (i % 2 == 0) {\n                strBuilder.Append(str1[i]);\n            }\n        }\n        \n        return strBuilder.ToString();\n    }\n}\n```"}
{"name":"mbpp_438_count_bidirectional","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count bidirectional tuple pairs.\n    public static long CountBidirectional(List<Tuple<long, long>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_438_count_bidirectional.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 1L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (3L));\n    Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 3L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 1L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (2L));\n    Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_438_count_bidirectional","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to count bidirectional tuple pairs.\n    public static long CountBidirectional(List<Tuple<long, long>> test_list) {\n        var countDict = new Dictionary<Tuple<long, long>, int>();\n        long bidirectionalCount = 0;\n\n        foreach (var pair in test_list) {\n            var reversePair = new Tuple<long, long>(pair.Item2, pair.Item1);\n\n            \/\/ Check if the reverse pair exists in the dictionary\n            if (countDict.ContainsKey(reversePair)) {\n                bidirectionalCount += countDict[reversePair];\n            }\n\n            \/\/ Add the current pair to the dictionary\n            if (!countDict.ContainsKey(pair)) {\n                countDict[pair] = 0;\n            }\n\n            countDict[pair]++;\n        }\n\n        return bidirectionalCount;\n    }\n}\n```"}
{"name":"mbpp_439_multiple_to_single","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to join a list of multiple integers into a single integer.\n    public static long MultipleToSingle(List<long> L) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_439_multiple_to_single.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)11L, (long)33L, (long)50L}))) == (113350L));\n    Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (-123456L));\n    Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)10L, (long)15L, (long)20L, (long)25L}))) == (10152025L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_439_multiple_to_single","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to join a list of multiple integers into a single integer.\n    public static long MultipleToSingle(List<long> L) {\n        \/\/ Convert each number to its string representation\n        List<string> stringNumbers = L.Select(num => num.ToString()).ToList();\n        \/\/ Join them to form a single string\n        string concatenatedString = string.Join(\"\", stringNumbers);\n        \/\/ Convert the concatenated string back to a long integer\n        return long.Parse(concatenatedString);\n    }\n}\n```\n\nThis function takes a list of integers, converts each integer to its string representation, concatenates these strings, and then parses the concatenated string back to a long integer. Note that this approach will work correctly as long as the concatenated result fits within the limits of a long data type in C#. If the final number exceeds the `long` limits, consider returning a different data type like `BigInteger`."}
{"name":"mbpp_440_find_adverb_position","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the first adverb and their positions in a given sentence.\n    public static Tuple<long, long, string> FindAdverbPosition(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_440_find_adverb_position.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindAdverbPosition((\"clearly!! we can see the sky\")).Equals((Tuple.Create(0L, 7L, \"clearly\"))));\n    Debug.Assert(FindAdverbPosition((\"seriously!! there are many roses\")).Equals((Tuple.Create(0L, 9L, \"seriously\"))));\n    Debug.Assert(FindAdverbPosition((\"unfortunately!! sita is going to home\")).Equals((Tuple.Create(0L, 13L, \"unfortunately\"))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_440_find_adverb_position","gpt_solution":"```csharp\nusing System;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function to find the first adverb and their positions in a given sentence.\n    public static Tuple<long, long, string> FindAdverbPosition(string text) {\n        \/\/ Regular expression to match adverbs typically ending in 'ly'\n        Regex adverbRegex = new Regex(@\"\\b\\w+ly\\b\", RegexOptions.IgnoreCase);\n\n        \/\/ Find the first match in the text\n        Match match = adverbRegex.Match(text);\n\n        \/\/ If a match is found, return its start and end positions along with the matched word\n        if (match.Success) {\n            long startPosition = match.Index;\n            long endPosition = match.Index + match.Length - 1;\n            string adverb = match.Value;\n            return new Tuple<long, long, string>(startPosition, endPosition, adverb);\n        } else {\n            \/\/ If no adverb is found, return null\n            return null;\n        }\n    }\n}\n```"}
{"name":"mbpp_441_surfacearea_cube","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the surface area of a cube of a given size.\n    public static long SurfaceareaCube(long l) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_441_surfacearea_cube.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SurfaceareaCube((5L)) == (150L));\n    Debug.Assert(SurfaceareaCube((3L)) == (54L));\n    Debug.Assert(SurfaceareaCube((10L)) == (600L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_441_surfacearea_cube","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the surface area of a cube of a given size.\n    public static long SurfaceareaCube(long l) {\n        \/\/ A cube has 6 faces and the area of each face is l*l.\n        \/\/ The total surface area is then 6 * l * l.\n        return 6 * l * l;\n    }\n}\n```\n\nThis code defines a class `Problem` containing a method `SurfaceareaCube` which calculates the surface area of a cube based on the length of its side provided as the parameter `l`. The surface area of a cube is given by the formula `6 * l * l`, since a cube has 6 faces and each face is a square with area `l * l`."}
{"name":"mbpp_442_positive_count","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the ration of positive numbers in a list of integers.\n    public static float PositiveCount(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_442_positive_count.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)0L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (0.54f));\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (0.69f));\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L}))) == (0.56f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_442_positive_count","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the ratio of positive numbers in a list of integers.\n    public static float PositiveCount(List<long> nums) {\n        if (nums == null || nums.Count == 0) {\n            return 0f;\n        }\n        \n        int positiveCount = nums.Count(num => num > 0);\n        return (float)positiveCount \/ nums.Count;\n    }\n}\n```"}
{"name":"mbpp_443_largest_neg","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the largest negative number from the given list.\n    public static long LargestNeg(List<long> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_443_largest_neg.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-4L, (long)-6L}))) == (-6L));\n    Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-8L, (long)-9L}))) == (-9L));\n    Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)-1L}))) == (-1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_443_largest_neg","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csharp function to find the largest negative number from the given list.\n    public static long LargestNeg(List<long> list1) {\n        \/\/ Filter out all non-negative numbers\n        var negativeNumbers = list1.Where(n => n < 0);\n\n        \/\/ If there are no negative numbers, return the minimum long value\n        if (!negativeNumbers.Any()) {\n            return long.MinValue;\n        }\n\n        \/\/ Return the maximum value among the negative numbers\n        return negativeNumbers.Max();\n    }\n}\n```"}
{"name":"mbpp_444_trim_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to trim each list by k in the given lists.\n    public static List<List<long>> TrimTuple(List<List<long>> test_list, long K) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_444_trim_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)9L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)1L, (long)2L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L, (long)2L, (long)1L, (long)7L})})), (2L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)9L}), (List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)2L})}))));\n    Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)9L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)1L, (long)2L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L, (long)2L, (long)1L, (long)7L})})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)9L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)8L, (long)2L, (long)1L})}))));\n    Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)4L, (long)9L}), (List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)12L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)7L})})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)4L}), (List<long>)new List<long>(new long[]{(long)8L, (long)12L}), (List<long>)new List<long>(new long[]{(long)1L, (long)7L}), (List<long>)new List<long>(new long[]{(long)6L, (long)9L})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_444_trim_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to trim each list by k in the given lists.\n    public static List<List<long>> TrimTuple(List<List<long>> test_list, long K) {\n        List<List<long>> trimmedLists = new List<List<long>>();\n\n        foreach (var sublist in test_list) {\n            int trimCount = (int)Math.Min(K, sublist.Count);\n            List<long> trimmedSublist = sublist.Take(trimCount).ToList();\n            trimmedLists.Add(trimmedSublist);\n        }\n\n        return trimmedLists;\n    }\n}\n``` \n\nThis function iterates through each list in the given list of lists, trims each sublist to the first `K` elements (or the entire list if `K` is greater than the list size), and returns a new list containing all the trimmed sublists."}
{"name":"mbpp_445_index_multiplication","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to perform index wise multiplication of list elements in the given two lists.\n    public static List<List<long>> IndexMultiplication(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_445_index_multiplication.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)21L}), (List<long>)new List<long>(new long[]{(long)12L, (long)45L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)7L, (long)30L})}))));\n    Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)14L, (long)32L}), (List<long>)new List<long>(new long[]{(long)20L, (long)60L}), (List<long>)new List<long>(new long[]{(long)6L, (long)20L}), (List<long>)new List<long>(new long[]{(long)16L, (long)44L})}))));\n    Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)24L, (long)45L}), (List<long>)new List<long>(new long[]{(long)30L, (long)77L}), (List<long>)new List<long>(new long[]{(long)12L, (long)33L}), (List<long>)new List<long>(new long[]{(long)27L, (long)60L})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_445_index_multiplication","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to perform index wise multiplication of list elements in the given two lists.\n    public static List<List<long>> IndexMultiplication(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n        List<List<long>> result = new List<List<long>>();\n\n        \/\/ Ensure that the outer and inner dimensions of the two lists match\n        if (test_tup1.Count != test_tup2.Count || test_tup1.Any(innerList => innerList.Count != test_tup2[test_tup1.IndexOf(innerList)].Count)) {\n            throw new ArgumentException(\"Dimensions of the two input lists do not match.\");\n        }\n\n        \/\/ Perform index wise multiplication\n        for (int i = 0; i < test_tup1.Count; i++) {\n            List<long> innerResult = new List<long>();\n            for (int j = 0; j < test_tup1[i].Count; j++) {\n                innerResult.Add(test_tup1[i][j] * test_tup2[i][j]);\n            }\n            result.Add(innerResult);\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_446_count_Occurrence","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the occurence of all elements of list in a tuple.\n    public static long CountOccurrence(object tup, List<object> lst) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_446_count_Occurrence.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountOccurrence(Tuple.Create(\"a\", \"a\", \"c\", \"b\", \"d\"), (new List<object>(new string[]{(string)\"a\", (string)\"b\"}))) == (3L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 1L, 4L, 6L, 7L, 1L, 4L), (new List<object>(new long[]{(long)1L, (long)4L, (long)7L}))) == (6L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L), (new List<object>(new long[]{(long)1L, (long)2L}))) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_446_count_Occurrence","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a csharp function to count the occurrence of all elements of list in a tuple.\n    public static long CountOccurrence(object tup, List<object> lst) {\n        if (!(tup is Tuple<Object, Object, Object> tuple))\n            throw new ArgumentException(\"Input must be a tuple of length 3.\", nameof(tup));\n    \n        Dictionary<object, long> occurrenceDict = new Dictionary<object, long>();\n        long count = 0;\n\n        foreach (var item in lst) {\n            occurrenceDict[item] = 0;\n        }\n\n        var tupleArray = new object[] { tuple.Item1, tuple.Item2, tuple.Item3 };\n\n        foreach (var element in tupleArray) {\n            if (occurrenceDict.ContainsKey(element)) {\n                occurrenceDict[element]++;\n            }\n        }\n\n        foreach(var key in occurrenceDict.Keys) {\n            if(occurrenceDict[key] > 0) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n```"}
{"name":"mbpp_447_cube_nums","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find cubes of individual elements in a list.\n    public static List<long> CubeNums(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_447_cube_nums.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CubeNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)27L, (long)64L, (long)125L, (long)216L, (long)343L, (long)512L, (long)729L, (long)1000L}))));\n    Debug.Assert(CubeNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L}))).Equals((new List<long>(new long[]{(long)1000L, (long)8000L, (long)27000L}))));\n    Debug.Assert(CubeNums((new List<long>(new long[]{(long)12L, (long)15L}))).Equals((new List<long>(new long[]{(long)1728L, (long)3375L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_447_cube_nums","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find cubes of individual elements in a list.\n    public static List<long> CubeNums(List<long> nums) {\n        List<long> cubedNums = new List<long>();\n        \n        foreach (var num in nums) {\n            cubedNums.Add(num * num * num);\n        }\n        \n        return cubedNums;\n    }\n}\n```"}
{"name":"mbpp_448_cal_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate the sum of perrin numbers.\n    public static long CalSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_448_cal_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CalSum((9L)) == (49L));\n    Debug.Assert(CalSum((10L)) == (66L));\n    Debug.Assert(CalSum((11L)) == (88L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_448_cal_sum","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to calculate the sum of perrin numbers.\n    public static long CalSum(long n) {\n        if (n < 0) {\n            throw new ArgumentException(\"The input number must be non-negative.\");\n        }\n        \n        if (n == 0) {\n            return 3; \/\/ The sum of Perrin numbers up to P(0)\n        } else if (n == 1) {\n            return 3; \/\/ The sum of Perrin numbers up to P(1)\n        } else if (n == 2) {\n            return 4; \/\/ The sum of Perrin numbers up to P(2)\n        }\n        \n        long[] perrin = new long[n + 1];\n        perrin[0] = 3;\n        perrin[1] = 0;\n        perrin[2] = 2;\n        \n        long sum = 3 + 0 + 2; \/\/ Sum up initial Perrin numbers P(0), P(1), and P(2)\n        \n        for (int i = 3; i <= n; i++) {\n            perrin[i] = perrin[i - 2] + perrin[i - 3];\n            sum += perrin[i];\n        }\n        \n        return sum;\n    }\n}\n```"}
{"name":"mbpp_450_extract_string","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract specified size of strings from a given list of string values.\n    public static List<string> ExtractString(List<string> str, long l) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_450_extract_string.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (8L)).Equals((new List<string>(new string[]{(string)\"practice\", (string)\"solution\"}))));\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (6L)).Equals((new List<string>(new string[]{(string)\"Python\"}))));\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (9L)).Equals((new List<string>(new string[]{(string)\"exercises\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_450_extract_string","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to extract specified size of strings from a given list of string values.\n    public static List<string> ExtractString(List<string> str, long l) {\n        List<string> result = new List<string>();\n        \n        foreach (string s in str) {\n            if (s.Length == l) {\n                result.Add(s);\n            }\n        }\n        \n        return result;\n    }\n}\n```"}
{"name":"mbpp_451_remove_whitespaces","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove all whitespaces from the given string.\n    public static string RemoveWhitespaces(string text1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_451_remove_whitespaces.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveWhitespaces((\" Google    Flutter \")).Equals((\"GoogleFlutter\")));\n    Debug.Assert(RemoveWhitespaces((\" Google    Dart \")).Equals((\"GoogleDart\")));\n    Debug.Assert(RemoveWhitespaces((\" iOS    Swift \")).Equals((\"iOSSwift\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_451_remove_whitespaces","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to remove all whitespaces from the given string.\n    public static string RemoveWhitespaces(string text1) {\n        \/\/ Check if the input string is null or empty\n        if (string.IsNullOrEmpty(text1)) {\n            return text1;\n        }\n\n        \/\/ Use StringBuilder for better performance with multiple concatenations\n        StringBuilder result = new StringBuilder();\n\n        \/\/ Iterate through each character in the input string\n        foreach (char c in text1) {\n            \/\/ Append non-whitespace characters to the result\n            if (!char.IsWhiteSpace(c)) {\n                result.Append(c);\n            }\n        }\n\n        \/\/ Convert the StringBuilder to a string and return\n        return result.ToString();\n    }\n}\n```"}
{"name":"mbpp_452_loss_amount","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    public static long LossAmount(long actual_cost, long sale_amount) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_452_loss_amount.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LossAmount((1500L), (1200L)) == (0L));\n    Debug.Assert(LossAmount((100L), (200L)) == (100L));\n    Debug.Assert(LossAmount((2000L), (5000L)) == (3000L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_452_loss_amount","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    public static long LossAmount(long actual_cost, long sale_amount) {\n        if (sale_amount < actual_cost) {\n            return actual_cost - sale_amount;\n        } else {\n            return 0;\n        }\n    }\n}\n```"}
{"name":"mbpp_453_sumofFactors","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of even factors of a number.\n    public static long Sumoffactors(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_453_sumofFactors.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Sumoffactors((18L)) == (26L));\n    Debug.Assert(Sumoffactors((30L)) == (48L));\n    Debug.Assert(Sumoffactors((6L)) == (8L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_453_sumofFactors","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the sum of even factors of a number.\n    public static long SumOfEvenFactors(long n) {\n        long sum = 0;\n        for (long i = 2; i <= n; i += 2) {\n            if (n % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_454_text_match_wordz","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that matches a word containing 'z'.\n    public static bool TextMatchWordz(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_454_text_match_wordz.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchWordz((\"pythonz.\")) == (true));\n    Debug.Assert(TextMatchWordz((\"xyz.\")) == (true));\n    Debug.Assert(TextMatchWordz((\"  lang  .\")) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_454_text_match_wordz","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function that matches a word containing 'z'.\n    public static bool TextMatchWordz(string text) {\n        if (string.IsNullOrEmpty(text)) {\n            return false;\n        }\n\n        \/\/ Split the text into words\n        var words = text.Split(new char[] { ' ', '\\t', '\\n', '\\r', '.', ',', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);\n\n        \/\/ Check if any word contains 'z'\n        foreach (var word in words) {\n            if (word.IndexOf('z') != -1 || word.IndexOf('Z') != -1) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n```"}
{"name":"mbpp_455_check_monthnumb_number","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given month number contains 31 days or not.\n    public static bool CheckMonthnumbNumber(long monthnum2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_455_check_monthnumb_number.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckMonthnumbNumber((5L)) == (true));\n    Debug.Assert(CheckMonthnumbNumber((2L)) == (false));\n    Debug.Assert(CheckMonthnumbNumber((6L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_455_check_monthnumb_number","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether the given month number contains 31 days or not.\n    public static bool CheckMonthNumber(long monthnum2) {\n        \/\/ Check if the given number is within the valid month range\n        if (monthnum2 < 1 || monthnum2 > 12) {\n            throw new ArgumentOutOfRangeException(\"monthnum2\", \"Month number must be between 1 and 12.\");\n        }\n\n        \/\/ List of months that have 31 days: January, March, May, July, August, October, December\n        bool[] has31Days = { true, false, true, false, true, false, true, true, false, true, false, true };\n\n        return has31Days[monthnum2 - 1];\n    }\n}\n```"}
{"name":"mbpp_456_reverse_string_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to reverse each string in a given list of string values.\n    public static List<string> ReverseStringList(List<string> stringlist) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_456_reverse_string_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\", (string)\"White\", (string)\"Black\"}))).Equals((new List<string>(new string[]{(string)\"deR\", (string)\"neerG\", (string)\"eulB\", (string)\"etihW\", (string)\"kcalB\"}))));\n    Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"john\", (string)\"amal\", (string)\"joel\", (string)\"george\"}))).Equals((new List<string>(new string[]{(string)\"nhoj\", (string)\"lama\", (string)\"leoj\", (string)\"egroeg\"}))));\n    Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"jack\", (string)\"john\", (string)\"mary\"}))).Equals((new List<string>(new string[]{(string)\"kcaj\", (string)\"nhoj\", (string)\"yram\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_456_reverse_string_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to reverse each string in a given list of string values.\n    public static List<string> ReverseStringList(List<string> stringlist) {\n        List<string> reversedList = new List<string>();\n\n        foreach (string str in stringlist) {\n            char[] charArray = str.ToCharArray();\n            Array.Reverse(charArray);\n            reversedList.Add(new string(charArray));\n        }\n\n        return reversedList;\n    }\n}\n```"}
{"name":"mbpp_457_Find_Min","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sublist having minimum length.\n    public static List<object> FindMin(List<List<object>> lst) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_457_Find_Min.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMin((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))).Equals((new List<object>(new long[]{(long)1L}))));\n    Debug.Assert(FindMin((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)7L, (long)8L})}))).Equals((new List<object>(new long[]{(long)1L, (long)1L}))));\n    Debug.Assert(FindMin((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"})}))).Equals((new List<object>(new string[]{(string)\"x\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_457_Find_Min","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a csharp function to find the sublist having minimum length.\n    public static List<object> FindMin(List<List<object>> lst) {\n        if (lst == null || lst.Count == 0) {\n            throw new ArgumentException(\"The input list cannot be null or empty.\");\n        }\n\n        List<object> minLengthSublist = lst[0];\n        int minLength = minLengthSublist.Count;\n\n        foreach (var sublist in lst) {\n            if (sublist.Count < minLength) {\n                minLengthSublist = sublist;\n                minLength = sublist.Count;\n            }\n        }\n\n        return minLengthSublist;\n    }\n}\n```\n\nThis code provides the implementation of the `FindMin` method, which finds and returns the sublist with the minimum length from a list of lists. If the input list is null or empty, it throws an `ArgumentException`."}
{"name":"mbpp_458_rectangle_area","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the area of a rectangle.\n    public static long RectangleArea(long l, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_458_rectangle_area.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RectangleArea((10L), (20L)) == (200L));\n    Debug.Assert(RectangleArea((10L), (5L)) == (50L));\n    Debug.Assert(RectangleArea((4L), (2L)) == (8L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_458_rectangle_area","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the area of a rectangle.\n    public static long RectangleArea(long l, long b) {\n        \/\/ The area of a rectangle is given by the formula: length * breadth\n        return l * b;\n    }\n}\n```"}
{"name":"mbpp_459_remove_uppercase","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove uppercase substrings from a given string.\n    public static string RemoveUppercase(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_459_remove_uppercase.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveUppercase((\"cAstyoUrFavoRitETVshoWs\")).Equals((\"cstyoravoitshos\")));\n    Debug.Assert(RemoveUppercase((\"wAtchTheinTernEtrAdIo\")).Equals((\"wtchheinerntrdo\")));\n    Debug.Assert(RemoveUppercase((\"VoicESeaRchAndreComMendaTionS\")).Equals((\"oiceachndreomendaion\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_459_remove_uppercase","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to remove uppercase substrings from a given string.\n    public static string RemoveUppercase(string str1) {\n        StringBuilder result = new StringBuilder();\n        bool inUppercaseSubstring = false;\n\n        foreach (char c in str1) {\n            if (char.IsUpper(c)) {\n                inUppercaseSubstring = true;\n            } else {\n                if (inUppercaseSubstring) {\n                    inUppercaseSubstring = false;\n                }\n                result.Append(c);\n            }\n        }\n\n        return result.ToString();\n    }\n}\n```"}
{"name":"mbpp_460_Extract","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to get the first element of each sublist.\n    public static List<long> Extract(List<List<long>> lst) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_460_Extract.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L})}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)6L}))));\n    Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))).Equals((new List<long>(new long[]{(long)1L, (long)4L}))));\n    Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)9L, (long)8L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))).Equals((new List<long>(new long[]{(long)9L, (long)1L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_460_Extract","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to get the first element of each sublist.\n    public static List<long> Extract(List<List<long>> lst) {\n        List<long> result = new List<long>();\n\n        foreach (var sublist in lst) {\n            if (sublist != null && sublist.Count > 0) {\n                result.Add(sublist[0]);\n            }\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_461_upper_ctr","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the upper case characters in a given string.\n    public static long UpperCtr(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_461_upper_ctr.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(UpperCtr((\"PYthon\")) == (1L));\n    Debug.Assert(UpperCtr((\"BigData\")) == (1L));\n    Debug.Assert(UpperCtr((\"program\")) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_461_upper_ctr","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csharp function to count the upper case characters in a given string.\n    public static long UpperCtr(string str) {\n        if (str == null) {\n            throw new ArgumentNullException(nameof(str));\n        }\n        \n        long upperCaseCount = 0;\n        \n        foreach (char c in str) {\n            if (char.IsUpper(c)) {\n                upperCaseCount++;\n            }\n        }\n        \n        return upperCaseCount;\n    }\n}\n```"}
{"name":"mbpp_463_max_subarray_product","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_463_max_subarray_product.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_463_max_subarray_product","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the maximum product sublist of the given list.\n    public static long MaxSubarrayProduct(List<long> arr) {\n        if (arr == null || arr.Count == 0) return 0;\n\n        long maxProduct = arr[0];\n        long minProduct = arr[0];\n        long result = arr[0];\n\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < 0) {\n                \/\/ Swap maxProduct and minProduct\n                long temp = maxProduct;\n                maxProduct = minProduct;\n                minProduct = temp;\n            }\n\n            maxProduct = Math.Max(arr[i], maxProduct * arr[i]);\n            minProduct = Math.Min(arr[i], minProduct * arr[i]);\n\n            if (maxProduct > result) {\n                result = maxProduct;\n            }\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_464_check_value","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if all values are same in a dictionary.\n    public static bool CheckValue(Dictionary<string,long> dict, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_464_check_value.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (10L)) == (false));\n    Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (12L)) == (true));\n    Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (5L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_464_check_value","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check if all values are same in a dictionary.\n    public static bool CheckValue(Dictionary<string, long> dict, long n) {\n        foreach (var value in dict.Values) {\n            if (value != n) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_465_drop_empty","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to drop empty items from a given dictionary.\n    public static Dictionary<string,string> DropEmpty(Dictionary<string,string> dict1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_465_drop_empty.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", \"Green\"}})));\n    Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", null}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c1\", \"Red\"}})));\n    Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", null}, {\"c2\", \"Green\"}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c2\", \"Green\"}})));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_465_drop_empty","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to drop empty items from a given dictionary.\n    public static Dictionary<string, string> DropEmpty(Dictionary<string, string> dict1) {\n        \/\/ Create a new dictionary to store non-empty items\n        Dictionary<string, string> result = new Dictionary<string, string>();\n\n        \/\/ Iterate through the original dictionary\n        foreach (var kvp in dict1) {\n            \/\/ Check if the value is not null or empty\n            if (!string.IsNullOrEmpty(kvp.Value)) {\n                \/\/ Add the non-empty item to the result dictionary\n                result.Add(kvp.Key, kvp.Value);\n            }\n        }\n\n        \/\/ Return the new dictionary with non-empty items\n        return result;\n    }\n}\n```"}
{"name":"mbpp_468_max_product","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n    public static long MaxProduct(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_468_max_product.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)3L, (long)100L, (long)4L, (long)5L, (long)150L, (long)6L}))) == (3000L));\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)4L, (long)42L, (long)55L, (long)68L, (long)80L}))) == (50265600L));\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)10L, (long)22L, (long)9L, (long)33L, (long)21L, (long)50L, (long)41L, (long)60L}))) == (2460L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_468_max_product","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n    public static long MaxProduct(List<long> arr) {\n        int n = arr.Count;\n        if (n == 0) return 0;\n\n        \/\/ Initialize dp array to store maximum product ending at each index\n        long[] dp = new long[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = arr[i];\n        }\n\n        long maxProduct = arr[0];\n\n        \/\/ Fill dp array with maximum products\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j]) {\n                    dp[i] = Math.Max(dp[i], dp[j] * arr[i]);\n                }\n            }\n            \/\/ Update maximum product\n            maxProduct = Math.Max(maxProduct, dp[i]);\n        }\n\n        return maxProduct;\n    }\n}\n```"}
{"name":"mbpp_470_add_pairwise","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    public static Tuple<long, long, long, long> AddPairwise(Tuple<long, long, long, long, long> test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_470_add_pairwise.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddPairwise((Tuple.Create(1L, 5L, 7L, 8L, 10L))).Equals((Tuple.Create(6L, 12L, 15L, 18L))));\n    Debug.Assert(AddPairwise((Tuple.Create(2L, 6L, 8L, 9L, 11L))).Equals((Tuple.Create(8L, 14L, 17L, 20L))));\n    Debug.Assert(AddPairwise((Tuple.Create(3L, 7L, 9L, 10L, 12L))).Equals((Tuple.Create(10L, 16L, 19L, 22L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_470_add_pairwise","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    public static Tuple<long, long, long, long> AddPairwise(Tuple<long, long, long, long, long> test_tup) {\n        \/\/ Pairwise addition of neighboring elements\n        long first = test_tup.Item1 + test_tup.Item2;\n        long second = test_tup.Item2 + test_tup.Item3;\n        long third = test_tup.Item3 + test_tup.Item4;\n        long fourth = test_tup.Item4 + test_tup.Item5;\n        \n        \/\/ Return the result as a new tuple\n        return new Tuple<long, long, long, long>(first, second, third, fourth);\n    }\n}\n```"}
{"name":"mbpp_471_find_remainder","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the product of the list multiplication modulo n.\n    public static long FindRemainder(List<long> arr, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_471_find_remainder.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindRemainder((new List<long>(new long[]{(long)100L, (long)10L, (long)5L, (long)25L, (long)35L, (long)14L})), (11L)) == (9L));\n    Debug.Assert(FindRemainder((new List<long>(new long[]{(long)1L, (long)1L, (long)1L})), (1L)) == (0L));\n    Debug.Assert(FindRemainder((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (2L)) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_471_find_remainder","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a C# function to find the product of the list multiplication modulo n.\n    public static long FindRemainder(List<long> arr, long n) {\n        if (arr == null || arr.Count == 0) {\n            throw new ArgumentException(\"The list cannot be null or empty.\");\n        }\n\n        BigInteger product = 1;\n        foreach (long num in arr) {\n            product *= num;\n            product %= n; \/\/ Taking modulo at each multiplication step to avoid overflow\n        }\n\n        return (long)(product % n);\n    }\n}\n```\n\nExplanation:\n- The `FindRemainder` function accepts a list of long integers (`arr`) and another long integer (`n`).\n- The function calculates the product of all the elements in the list modulo `n`.\n- To prevent overflow, each multiplication step is followed by taking the modulo with `n`.\n- The `BigInteger` type is used for the product to handle very large numbers.\n- If the input list is null or empty, the function throws an `ArgumentException`."}
{"name":"mbpp_472_check_Consecutive","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_472_check_Consecutive.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_472_check_Consecutive","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n        \/\/ If the list is empty or has only one element, they are considered not consecutive\n        if (l == null || l.Count < 2)\n            return false;\n\n        \/\/ Sort the list\n        l.Sort();\n\n        \/\/ Check if each number in the sorted list is exactly one more than the previous number\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] != l[i - 1] + 1) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n```\n\nThis function first checks if the list is null or has fewer than two elements, in which case it simply returns false as there aren't enough elements to be consecutive. It then sorts the list and checks if each element is exactly one more than the previous element."}
{"name":"mbpp_474_replace_char","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to replace characters in a string.\n    public static string ReplaceChar(string str1, string ch, string newch) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_474_replace_char.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceChar((\"polygon\"), (\"y\"), (\"l\")).Equals((\"pollgon\")));\n    Debug.Assert(ReplaceChar((\"character\"), (\"c\"), (\"a\")).Equals((\"aharaater\")));\n    Debug.Assert(ReplaceChar((\"python\"), (\"l\"), (\"a\")).Equals((\"python\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_474_replace_char","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to replace characters in a string.\n    public static string ReplaceChar(string str1, string ch, string newch) {\n        if (string.IsNullOrEmpty(str1) || string.IsNullOrEmpty(ch) || string.IsNullOrEmpty(newch)) {\n            throw new ArgumentException(\"Input strings cannot be null or empty\");\n        }\n\n        if (ch.Length != 1 || newch.Length != 1) {\n            throw new ArgumentException(\"Both 'ch' and 'newch' should be a single character string\");\n        }\n\n        StringBuilder result = new StringBuilder();\n\n        foreach (char c in str1) {\n            if (c.ToString() == ch) {\n                result.Append(newch);\n            } else {\n                result.Append(c);\n            }\n        }\n\n        return result.ToString();\n    }\n}\n```\n\nThis C# code defines a class `Problem` with a static method `ReplaceChar` that replaces a specific character in a string with another character. The method includes error checking to ensure that the input strings are not null or empty and that the characters are single characters."}
{"name":"mbpp_475_sort_counter","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort a dictionary by value.\n    public static List<Tuple<string, long>> SortCounter(Dictionary<string,long> dict1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_475_sort_counter.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 81L}, {\"Physics\", 83L}, {\"Chemistry\", 87L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Chemistry\", 87L), (Tuple<string, long>)Tuple.Create(\"Physics\", 83L), (Tuple<string, long>)Tuple.Create(\"Math\", 81L)}))));\n    Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 400L}, {\"Physics\", 300L}, {\"Chemistry\", 250L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Math\", 400L), (Tuple<string, long>)Tuple.Create(\"Physics\", 300L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 250L)}))));\n    Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 900L}, {\"Physics\", 1000L}, {\"Chemistry\", 1250L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Chemistry\", 1250L), (Tuple<string, long>)Tuple.Create(\"Physics\", 1000L), (Tuple<string, long>)Tuple.Create(\"Math\", 900L)}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_475_sort_counter","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to sort a dictionary by value.\n    public static List<Tuple<string, long>> SortCounter(Dictionary<string, long> dict1) {\n        return dict1.OrderBy(pair => pair.Value)\n                    .Select(pair => new Tuple<string, long>(pair.Key, pair.Value))\n                    .ToList();\n    }\n}\n```\n\nThis code defines a function `SortCounter` that takes a dictionary and returns a list of tuples sorted by the values in the dictionary. The function uses LINQ to order the dictionary by values and then projects the ordered pairs into tuples."}
{"name":"mbpp_476_big_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of the largest and smallest value in a given list.\n    public static long BigSum(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_476_big_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BigSum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(BigSum((new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L}))) == (3L));\n    Debug.Assert(BigSum((new List<long>(new long[]{(long)2L, (long)3L, (long)6L}))) == (8L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_476_big_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the sum of the largest and smallest value in a given list.\n    public static long BigSum(List<long> nums) {\n        if (nums == null || nums.Count == 0) {\n            throw new ArgumentException(\"The list cannot be null or empty.\");\n        }\n\n        long min = long.MaxValue;\n        long max = long.MinValue;\n\n        foreach (long num in nums) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        return min + max;\n    }\n}\n```"}
{"name":"mbpp_477_is_lower","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to convert the given string to lower case.\n    public static string IsLower(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_477_is_lower.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsLower((\"InValid\")).Equals((\"invalid\")));\n    Debug.Assert(IsLower((\"TruE\")).Equals((\"true\")));\n    Debug.Assert(IsLower((\"SenTenCE\")).Equals((\"sentence\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_477_is_lower","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a C# function to convert the given string to lower case.\n    public static string IsLower(string str) {\n        if (str == null) {\n            throw new ArgumentNullException(nameof(str), \"Input string cannot be null\");\n        }\n\n        return str.ToLower();\n    }\n}\n```\n\nThis complete function `IsLower` will convert the given input string to lowercase. The code also includes a check for `null` input to avoid any runtime exceptions."}
{"name":"mbpp_478_remove_lowercase","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove lowercase substrings from a given string.\n    public static string RemoveLowercase(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_478_remove_lowercase.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveLowercase((\"PYTHon\")).Equals((\"PYTH\")));\n    Debug.Assert(RemoveLowercase((\"FInD\")).Equals((\"FID\")));\n    Debug.Assert(RemoveLowercase((\"STRinG\")).Equals((\"STRG\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_478_remove_lowercase","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to remove lowercase substrings from a given string.\n    public static string RemoveLowercase(string str1) {\n        StringBuilder sb = new StringBuilder();\n        \n        bool inLowercaseSubstring = false;\n\n        foreach (char c in str1) {\n            if (char.IsLower(c)) {\n                inLowercaseSubstring = true;\n            } else {\n                if (!inLowercaseSubstring) {\n                    sb.Append(c);\n                }\n                inLowercaseSubstring = false;\n            }\n        }\n\n        \/\/ Append the last segment if it's not lowercase\n        if (!inLowercaseSubstring) {\n            sb.Append(str1.LastOrDefault(c => !char.IsLower(c)));\n        }\n\n        return sb.ToString();\n    }\n}\n```"}
{"name":"mbpp_479_first_Digit","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the first digit of a given number.\n    public static long FirstDigit(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_479_first_Digit.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstDigit((123L)) == (1L));\n    Debug.Assert(FirstDigit((456L)) == (4L));\n    Debug.Assert(FirstDigit((12L)) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_479_first_Digit","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a C# function to find the first digit of a given number.\n    public static long FirstDigit(long n) {\n        \/\/ Make sure to handle negative numbers\n        n = Math.Abs(n);\n\n        \/\/ Loop to remove the last digit of the number until we're left with only the first digit\n        while (n >= 10) {\n            n \/= 10;\n        }\n\n        return n;\n    }\n}\n```"}
{"name":"mbpp_554_Split","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function which takes a list of integers and only returns the odd ones.\n    public static List<long> Split(List<long> list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_554_Split.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Split((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))));\n    Debug.Assert(Split((new List<long>(new long[]{(long)10L, (long)11L, (long)12L, (long)13L}))).Equals((new List<long>(new long[]{(long)11L, (long)13L}))));\n    Debug.Assert(Split((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)7L, (long)9L, (long)1L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_554_Split","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function which takes a list of integers and only returns the odd ones.\n    public static List<long> Split(List<long> list) {\n        List<long> oddNumbers = new List<long>();\n        foreach (long number in list) {\n            if (number % 2 != 0) {\n                oddNumbers.Add(number);\n            }\n        }\n        return oddNumbers;\n    }\n}\n```"}
{"name":"mbpp_555_difference","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    public static long Difference(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_555_difference.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Difference((3L)) == (30L));\n    Debug.Assert(Difference((5L)) == (210L));\n    Debug.Assert(Difference((2L)) == (6L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_555_difference","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    public static long Difference(long n) {\n        long sumOfNumbers = 0;\n        long sumOfCubes = 0;\n\n        for (long i = 1; i <= n; i++) {\n            sumOfNumbers += i;\n            sumOfCubes += i * i * i;\n        }\n\n        return sumOfCubes - sumOfNumbers;\n    }\n}\n```"}
{"name":"mbpp_556_find_Odd_Pair","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_556_find_Odd_Pair.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_556_find_Odd_Pair","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n        long count = 0;\n        \n        \/\/ Iterate through the list to find pairs with odd XOR\n        for (long i = 0; i < N; i++) {\n            for (long j = i + 1; j < N; j++) {\n                if ((A[(int)i] ^ A[(int)j]) % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n}\n```\n\nThis code defines a `FindOddPair` function that takes a list of long integers `A` and a long integer `N` representing the number of elements in `A`. The function counts the number of pairs whose XOR value is odd. This is achieved by iterating through the list and checking each pair to see if their XOR results in an odd number. The function then returns the count of such pairs."}
{"name":"mbpp_557_toggle_string","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to toggle the case of all characters in a string.\n    public static string ToggleString(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_557_toggle_string.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ToggleString((\"Python\")).Equals((\"pYTHON\")));\n    Debug.Assert(ToggleString((\"Pangram\")).Equals((\"pANGRAM\")));\n    Debug.Assert(ToggleString((\"LIttLE\")).Equals((\"liTTle\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_557_toggle_string","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to toggle the case of all characters in a string.\n    public static string ToggleString(string str) {\n        StringBuilder toggledString = new StringBuilder();\n        foreach (char c in str) {\n            if (char.IsUpper(c)) {\n                toggledString.Append(char.ToLower(c));\n            } else if (char.IsLower(c)) {\n                toggledString.Append(char.ToUpper(c));\n            } else {\n                toggledString.Append(c);\n            }\n        }\n        return toggledString.ToString();\n    }\n}\n```"}
{"name":"mbpp_558_digit_distance_nums","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of the per-digit difference between two integers.\n    public static long DigitDistanceNums(long n1, long n2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_558_digit_distance_nums.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DigitDistanceNums((1L), (2L)) == (1L));\n    Debug.Assert(DigitDistanceNums((23L), (56L)) == (6L));\n    Debug.Assert(DigitDistanceNums((123L), (256L)) == (7L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_558_digit_distance_nums","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the sum of the per-digit difference between two integers.\n    public static long DigitDistanceNums(long n1, long n2) {\n        \/\/ Convert both numbers to strings to easily access individual digits\n        string s1 = Math.Abs(n1).ToString();\n        string s2 = Math.Abs(n2).ToString();\n\n        \/\/ Pad the shorter number with leading zeros\n        int maxLength = Math.Max(s1.Length, s2.Length);\n        s1 = s1.PadLeft(maxLength, '0');\n        s2 = s2.PadLeft(maxLength, '0');\n\n        long distanceSum = 0;\n\n        \/\/ Calculate the per-digit difference and sum them up\n        for (int i = 0; i < maxLength; i++) {\n            int digit1 = s1[i] - '0';\n            int digit2 = s2[i] - '0';\n            distanceSum += Math.Abs(digit1 - digit2);\n        }\n\n        return distanceSum;\n    }\n}\n```"}
{"name":"mbpp_559_max_sub_array_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the sum of the largest contiguous sublist in the given list.\n    public static long MaxSubArraySum(List<long> a, long size) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_559_max_sub_array_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-2L, (long)-3L, (long)4L, (long)-1L, (long)-2L, (long)1L, (long)5L, (long)-3L})), (8L)) == (7L));\n    Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L, (long)-2L, (long)-3L, (long)2L, (long)6L, (long)-4L})), (8L)) == (8L));\n    Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-4L, (long)-5L, (long)6L, (long)-3L, (long)-4L, (long)3L, (long)7L, (long)-5L})), (8L)) == (10L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_559_max_sub_array_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the sum of the largest contiguous sublist in the given list.\n    public static long MaxSubArraySum(List<long> a, long size) {\n        long max_so_far = long.MinValue, max_ending_here = 0;\n\n        for (int i = 0; i < size; i++) {\n            max_ending_here = max_ending_here + a[i];\n\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n        return max_so_far;\n    }\n}\n```\n\nThis implementation uses Kadane's Algorithm to find the sum of the largest contiguous sublist in the given list."}
{"name":"mbpp_560_union_elements","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the union of the elements of two given lists and output them in sorted order.\n    public static List<long> UnionElements(List<long> test_tup1, List<long> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_560_union_elements.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(UnionElements((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)4L, (long)10L}))).Equals((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)10L}))));\n    Debug.Assert(UnionElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))));\n    Debug.Assert(UnionElements((new List<long>(new long[]{(long)11L, (long)12L, (long)13L, (long)14L})), (new List<long>(new long[]{(long)13L, (long)15L, (long)16L, (long)17L}))).Equals((new List<long>(new long[]{(long)11L, (long)12L, (long)13L, (long)14L, (long)15L, (long)16L, (long)17L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_560_union_elements","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the union of the elements of two given lists and output them in sorted order.\n    public static List<long> UnionElements(List<long> test_tup1, List<long> test_tup2) {\n        \/\/ Create a new HashSet to store unique elements\n        HashSet<long> unionSet = new HashSet<long>();\n\n        \/\/ Add elements from the first list to the set\n        foreach (long element in test_tup1) {\n            unionSet.Add(element);\n        }\n\n        \/\/ Add elements from the second list to the set\n        foreach (long element in test_tup2) {\n            unionSet.Add(element);\n        }\n\n        \/\/ Convert the set to a list and sort it\n        List<long> unionList = unionSet.ToList();\n        unionList.Sort();\n\n        \/\/ Return the sorted list\n        return unionList;\n    }\n}\n```\n\nThis code defines a method `UnionElements` that takes two lists of long integers and returns a sorted list containing the union of the elements in the given lists."}
{"name":"mbpp_562_Find_Max_Length","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the length of the longest sublists.\n    public static long FindMaxLength(List<List<long>> lst) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_562_Find_Max_Length.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})}))) == (4L));\n    Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L})}))) == (3L));\n    Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L}), (List<long>)new List<long>(new long[]{(long)22L, (long)23L}), (List<long>)new List<long>(new long[]{(long)13L, (long)14L, (long)15L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)50L})}))) == (5L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_562_Find_Max_Length","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the length of the longest sublists.\n    public static long FindMaxLength(List<List<long>> lst) {\n        long maxLength = 0;\n        foreach (var sublist in lst) {\n            if (sublist.Count > maxLength) {\n                maxLength = sublist.Count;\n            }\n        }\n        return maxLength;\n    }\n}\n```"}
{"name":"mbpp_563_extract_values","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract values between quotation marks from a string.\n    public static List<string> ExtractValues(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_563_extract_values.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractValues((\"\"Python\", \"PHP\", \"Java\"\")).Equals((new List<string>(new string[]{(string)\"Python\", (string)\"PHP\", (string)\"Java\"}))));\n    Debug.Assert(ExtractValues((\"\"python\",\"program\",\"language\"\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"program\", (string)\"language\"}))));\n    Debug.Assert(ExtractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).Equals((new List<string>(new string[]{(string)\"red\", (string)\"blue\", (string)\"green\", (string)\"yellow\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_563_extract_values","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function to extract values between quotation marks from a string.\n    public static List<string> ExtractValues(string text) {\n        List<string> result = new List<string>();\n        \n        \/\/ Regular expression to match values between quotation marks\n        string pattern = \"\\\"([^\\\"]*)\\\"\";\n        MatchCollection matches = Regex.Matches(text, pattern);\n        \n        \/\/ Extracting the values\n        foreach (Match match in matches) {\n            result.Add(match.Groups[1].Value);\n        }\n        \n        return result;\n    }\n}\n```"}
{"name":"mbpp_564_count_Pairs","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_564_count_Pairs.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_564_count_Pairs","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n        Dictionary<long, long> frequencyMap = new Dictionary<long, long>();\n        \n        \/\/ Count the frequency of each element in the list\n        foreach (long number in arr) {\n            if (frequencyMap.ContainsKey(number)) {\n                frequencyMap[number]++;\n            } else {\n                frequencyMap[number] = 1;\n            }\n        }\n\n        long totalPairs = 0;\n        long remainingElements = n;\n\n        \/\/ Calculate total pairs of elements where both are unequal\n        foreach (var pair in frequencyMap) {\n            totalPairs += pair.Value * (remainingElements - pair.Value);\n            remainingElements -= pair.Value;\n        }\n\n        return totalPairs;\n    }\n}\n```\n\nThis code defines a class `Problem` with a static method `CountPairs` that takes a list of long integers and counts the number of unordered pairs where both elements are unequal. The approach uses a dictionary to count the frequency of each element, and then it calculates the number of valid pairs by iterating over these frequencies."}
{"name":"mbpp_565_split","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to split a string into characters.\n    public static List<string> Split(string word) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_565_split.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Split((\"python\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"}))));\n    Debug.Assert(Split((\"Name\")).Equals((new List<string>(new string[]{(string)\"N\", (string)\"a\", (string)\"m\", (string)\"e\"}))));\n    Debug.Assert(Split((\"program\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"r\", (string)\"o\", (string)\"g\", (string)\"r\", (string)\"a\", (string)\"m\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_565_split","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to split a string into characters.\n    public static List<string> Split(string word) {\n        List<string> characters = new List<string>();\n        foreach (char c in word) {\n            characters.Add(c.ToString());\n        }\n        return characters;\n    }\n}\n```"}
{"name":"mbpp_566_sum_digits","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to get the sum of the digits of a non-negative integer.\n    public static long SumDigits(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_566_sum_digits.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumDigits((345L)) == (12L));\n    Debug.Assert(SumDigits((12L)) == (3L));\n    Debug.Assert(SumDigits((97L)) == (16L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_566_sum_digits","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to get the sum of the digits of a non-negative integer.\n    public static long SumDigits(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n \/= 10;\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_567_issort_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether a specified list is sorted or not.\n    public static bool IssortList(List<long> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_567_issort_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)17L}))) == (true));\n    Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)20L, (long)17L}))) == (false));\n    Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)15L, (long)14L, (long)20L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_567_issort_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check whether a specified list is sorted or not.\n    public static bool IsSortedList(List<long> list1) {\n        for(int i = 1; i < list1.Count; i++) {\n            if (list1[i] < list1[i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_568_empty_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to create a list of N empty dictionaries.\n    public static List<Dictionary<null,null>> EmptyList(long length) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_568_empty_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EmptyList((5L)).Equals((new List<List<Dictionary<null,null>>()}))));\n    Debug.Assert(EmptyList((6L)).Equals((new List<List<Dictionary<null,null>>()}))));\n    Debug.Assert(EmptyList((7L)).Equals((new List<List<Dictionary<null,null>>()}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_568_empty_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to create a list of N empty dictionaries.\n    public static List<Dictionary<object, object>> EmptyList(long length) {\n        List<Dictionary<object, object>> list = new List<Dictionary<object, object>>();\n        for (long i = 0; i < length; i++) {\n            list.Add(new Dictionary<object, object>());\n        }\n        return list;\n    }\n}\n```"}
{"name":"mbpp_569_sort_sublists","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort each sublist of strings in a given list of lists.\n    public static List<List<string>> SortSublists(List<List<string>> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_569_sort_sublists.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"white\", (string)\"black\", (string)\"orange\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"orange\", (string)\"white\"})}))));\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\"}), (List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"white\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\"}), (List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"white\"})}))));\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"g\", (string)\"h\"}), (List<string>)new List<string>(new string[]{(string)\"f\", (string)\"e\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"d\"}), (List<string>)new List<string>(new string[]{(string)\"g\", (string)\"h\"}), (List<string>)new List<string>(new string[]{(string)\"e\", (string)\"f\"})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_569_sort_sublists","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to sort each sublist of strings in a given list of lists.\n    public static List<List<string>> SortSublists(List<List<string>> list1) {\n        for (int i = 0; i < list1.Count; i++) {\n            list1[i].Sort(); \/\/ Sort each sublist individually\n        }\n        return list1;\n    }\n}\n```"}
{"name":"mbpp_572_two_unique_nums","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to remove duplicate numbers from a given number of lists.\n    public static List<long> TwoUniqueNums(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_572_two_unique_nums.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_572_two_unique_nums","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Function to remove duplicate numbers from a given list of numbers.\n    public static List<long> RemoveDuplicates(List<long> nums) {\n        \/\/ Use a HashSet to store only unique numbers\n        HashSet<long> uniqueNums = new HashSet<long>(nums);\n        \/\/ Convert the HashSet back to a List and return it\n        return uniqueNums.ToList();\n    }\n}\n```"}
{"name":"mbpp_573_unique_product","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_573_unique_product.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_573_unique_product","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n        HashSet<long> uniqueNumbers = new HashSet<long>(list_data);\n        long product = 1;\n        foreach (long number in uniqueNumbers) {\n            product *= number;\n        }\n        return product;\n    }\n}\n```\n\nThis code defines a method `UniqueProduct` that takes a list of long integers and calculates the product of unique numbers in the list. The method uses a `HashSet` to capture only unique numbers and then iterates through this set to compute the product."}
{"name":"mbpp_574_surfacearea_cylinder","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the surface area of a cylinder.\n    public static float SurfaceareaCylinder(long r, long h) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_574_surfacearea_cylinder.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SurfaceareaCylinder((10L), (5L)) == (942.45f));\n    Debug.Assert(SurfaceareaCylinder((4L), (5L)) == (226.18800000000002f));\n    Debug.Assert(SurfaceareaCylinder((4L), (10L)) == (351.848f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_574_surfacearea_cylinder","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the surface area of a cylinder.\n    public static float SurfaceareaCylinder(long r, long h) {\n        \/\/ Formula for the surface area of a cylinder:\n        \/\/ Surface Area = 2 * \u03c0 * r * h + 2 * \u03c0 * r^2\n        float pi = (float)Math.PI;\n        float lateralSurfaceArea = 2 * pi * r * h;\n        float topAndBottomSurfaceArea = 2 * pi * r * r;\n        return lateralSurfaceArea + topAndBottomSurfaceArea;\n    }\n}\n```"}
{"name":"mbpp_576_is_Sub_Array","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether a list is sublist of another or not.\n    public static bool IsSubArray(List<long> A, List<long> B) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_576_is_Sub_Array.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)2L}))) == (false));\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (true));\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)2L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)0L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_576_is_Sub_Array","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function to check whether a list is sublist of another or not.\n    public static bool IsSubArray(List<long> A, List<long> B) {\n        if (A == null || B == null || A.Count == 0 || B.Count == 0) return false;\n\n        \/\/ Check if A (shorter list) is a sublist of B (longer list)\n        if (A.Count > B.Count) return false;\n\n        for (int i = 0; i <= B.Count - A.Count; i++) {\n            bool isSubArray = true;\n            for (int j = 0; j < A.Count; j++) {\n                if (B[i + j] != A[j]) {\n                    isSubArray = false;\n                    break;\n                }\n            }\n            if (isSubArray) return true;\n        }\n        return false;\n    }\n}\n```"}
{"name":"mbpp_577_last_Digit_Factorial","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the last digit in factorial of a given number.\n    public static long LastDigitFactorial(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_577_last_Digit_Factorial.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LastDigitFactorial((4L)) == (4L));\n    Debug.Assert(LastDigitFactorial((21L)) == (0L));\n    Debug.Assert(LastDigitFactorial((30L)) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_577_last_Digit_Factorial","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a C# function to find the last digit in factorial of a given number.\n    public static int LastDigitFactorial(long n) {\n        if (n < 0)\n            throw new ArgumentException(\"The input number cannot be negative.\");\n    \n        if (n == 0 || n == 1)\n            return 1;\n\n        int lastDigit = 1;\n        for (int i = 2; i <= n; i++) {\n            lastDigit = (lastDigit * i) % 10;\n\n            \/\/ Since multiplying by 0 will always result in 0, and will not affect the result, we can break early.\n            if (lastDigit == 0)\n                break;\n        }\n        return lastDigit;\n    }\n}\n```"}
{"name":"mbpp_578_interleave_lists","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to interleave 3 lists of the same length into a single flat list.\n    public static List<long> InterleaveLists(List<long> list1, List<long> list2, List<long> list3) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_578_interleave_lists.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)50L, (long)60L, (long)70L})), (new List<long>(new long[]{(long)100L, (long)200L, (long)300L, (long)400L, (long)500L, (long)600L, (long)700L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)100L, (long)2L, (long)20L, (long)200L, (long)3L, (long)30L, (long)300L, (long)4L, (long)40L, (long)400L, (long)5L, (long)50L, (long)500L, (long)6L, (long)60L, (long)600L, (long)7L, (long)70L, (long)700L}))));\n    Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)10L, (long)20L})), (new List<long>(new long[]{(long)15L, (long)2L})), (new List<long>(new long[]{(long)5L, (long)10L}))).Equals((new List<long>(new long[]{(long)10L, (long)15L, (long)5L, (long)20L, (long)2L, (long)10L}))));\n    Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)11L, (long)44L})), (new List<long>(new long[]{(long)10L, (long)15L})), (new List<long>(new long[]{(long)20L, (long)5L}))).Equals((new List<long>(new long[]{(long)11L, (long)10L, (long)20L, (long)44L, (long)15L, (long)5L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_578_interleave_lists","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to interleave 3 lists of the same length into a single flat list.\n    public static List<long> InterleaveLists(List<long> list1, List<long> list2, List<long> list3) {\n        \/\/ Check if all lists are of the same length\n        if (list1.Count != list2.Count || list2.Count != list3.Count) {\n            throw new ArgumentException(\"All lists must be of the same length\");\n        }\n\n        \/\/ Create a list to store the interleaved results\n        List<long> interleavedList = new List<long>();\n\n        \/\/ Interleave the elements from the three lists\n        for (int i = 0; i < list1.Count; i++) {\n            interleavedList.Add(list1[i]);\n            interleavedList.Add(list2[i]);\n            interleavedList.Add(list3[i]);\n        }\n\n        return interleavedList;\n    }\n}\n```"}
{"name":"mbpp_579_find_dissimilar","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the dissimilar elements in the given two tuples.\n    public static Tuple<long, long, long, long> FindDissimilar(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_579_find_dissimilar.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindDissimilar((Tuple.Create(3L, 4L, 5L, 6L)), (Tuple.Create(5L, 7L, 4L, 10L))).Equals((Tuple.Create(3L, 6L, 7L, 10L))));\n    Debug.Assert(FindDissimilar((Tuple.Create(1L, 2L, 3L, 4L)), (Tuple.Create(7L, 2L, 3L, 9L))).Equals((Tuple.Create(1L, 4L, 7L, 9L))));\n    Debug.Assert(FindDissimilar((Tuple.Create(21L, 11L, 25L, 26L)), (Tuple.Create(26L, 34L, 21L, 36L))).Equals((Tuple.Create(34L, 36L, 11L, 25L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_579_find_dissimilar","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the dissimilar elements in the given two tuples.\n    public static Tuple<long, long, long, long> FindDissimilar(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        List<long> dissimilarElements = new List<long>();\n\n        \/\/ Flatten both tuples into lists\n        List<long> elements1 = new List<long> { test_tup1.Item1, test_tup1.Item2, test_tup1.Item3, test_tup1.Item4 };\n        List<long> elements2 = new List<long> { test_tup2.Item1, test_tup2.Item2, test_tup2.Item3, test_tup2.Item4 };\n\n        \/\/ Add elements to the dissimilar list based on the condition\n        foreach (long element in elements1)\n        {\n            if (!elements2.Contains(element))\n            {\n                dissimilarElements.Add(element);\n            }\n        }\n\n        foreach (long element in elements2)\n        {\n            if (!elements1.Contains(element))\n            {\n                dissimilarElements.Add(element);\n            }\n        }\n\n        \/\/ Ensure the dissimilar elements list has exactly 4 elements\n        if (dissimilarElements.Count < 4)\n        {\n            int diff = 4 - dissimilarElements.Count;\n            for (int i = 0; i < diff; i++)\n            {\n                dissimilarElements.Add(0);\n            }\n        }\n\n        \/\/ Return results as a tuple with exactly 4 elements\n        return new Tuple<long, long, long, long>(\n            dissimilarElements[0], \n            dissimilarElements[1], \n            dissimilarElements[2], \n            dissimilarElements[3]\n        );\n    }\n}\n```"}
{"name":"mbpp_580_extract_even","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove uneven elements in the nested mixed tuple.\n    public static object ExtractEven(Tuple<long, long, Tuple<long, long, Tuple<long, long>>, long, long> test_tuple) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_580_extract_even.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractEven((Tuple.Create(4L, 5L, Tuple.Create(7L, 6L, Tuple.Create(2L, 4L)), 6L, 8L))).Equals(Tuple.Create(4L, Tuple.Create(6L, Tuple.Create(2L, 4L)), 6L, 8L)));\n    Debug.Assert(ExtractEven((Tuple.Create(5L, 6L, Tuple.Create(8L, 7L, Tuple.Create(4L, 8L)), 7L, 9L))).Equals(Tuple.Create(6L, Tuple.Create(8L, Tuple.Create(4L, 8L)))));\n    Debug.Assert(ExtractEven((Tuple.Create(5L, 6L, Tuple.Create(9L, 8L, Tuple.Create(4L, 6L)), 8L, 10L))).Equals(Tuple.Create(6L, Tuple.Create(8L, Tuple.Create(4L, 6L)), 8L, 10L)));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_580_extract_even","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to remove uneven elements in the nested mixed tuple.\n    public static object ExtractEven(Tuple<long, long, Tuple<long, long, Tuple<long, long>>, long, long> test_tuple) {\n        \/\/ Helper function to filter even elements from a tuple.\n        Tuple<long, long> FilterEven(Tuple<long, long> innerTuple) {\n            return new Tuple<long, long>(\n                innerTuple.Item1 % 2 == 0 ? innerTuple.Item1 : 0,\n                innerTuple.Item2 % 2 == 0 ? innerTuple.Item2 : 0\n            );\n        }\n\n        \/\/ Process the deepest nested tuple first.\n        var deepestInnerTuple = test_tuple.Item3.Item3;\n        var filteredDeepestInnerTuple = FilterEven(deepestInnerTuple);\n\n        \/\/ Process the next level tuple.\n        var innerTuple = new Tuple<long, long, Tuple<long, long>>(\n            test_tuple.Item3.Item1 % 2 == 0 ? test_tuple.Item3.Item1 : 0,\n            test_tuple.Item3.Item2 % 2 == 0 ? test_tuple.Item3.Item2 : 0,\n            filteredDeepestInnerTuple\n        );\n\n        \/\/ Process the outermost tuple.\n        var filteredTuple = new Tuple<long, long, Tuple<long, long, Tuple<long, long>>, long, long>(\n            test_tuple.Item1 % 2 == 0 ? test_tuple.Item1 : 0,\n            test_tuple.Item2 % 2 == 0 ? test_tuple.Item2 : 0,\n            innerTuple,\n            test_tuple.Item4 % 2 == 0 ? test_tuple.Item4 : 0,\n            test_tuple.Item5 % 2 == 0 ? test_tuple.Item5 : 0\n        );\n\n        return filteredTuple;\n    }\n}\n```"}
{"name":"mbpp_581_surface_Area","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the surface area of a square csramid with a given base edge and height.\n    public static long SurfaceArea(long b, long s) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_581_surface_Area.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SurfaceArea((3L), (4L)) == (33L));\n    Debug.Assert(SurfaceArea((4L), (5L)) == (56L));\n    Debug.Assert(SurfaceArea((1L), (2L)) == (5L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_581_surface_Area","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Function to find the surface area of a square pyramid with a given base edge and height.\n    public static long SurfaceArea(long b, long h) {\n        \/\/ Calculate the slant height of the pyramid.\n        double slantHeight = Math.Sqrt(h * h + (b \/ 2.0) * (b \/ 2.0));\n        \n        \/\/ Calculate the area of the base (square) and the four triangular faces.\n        double baseArea = b * b;\n        double sideArea = 2 * b * slantHeight;\n        \n        \/\/ Total surface area is the sum of the base area and the side area.\n        double totalSurfaceArea = baseArea + sideArea;\n        \n        \/\/ Return the surface area as a long.\n        return (long) Math.Round(totalSurfaceArea);\n    }\n}\n```"}
{"name":"mbpp_583_catalan_number","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function which returns nth catalan number.\n    public static long CatalanNumber(long num) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_583_catalan_number.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CatalanNumber((10L)) == (16796L));\n    Debug.Assert(CatalanNumber((9L)) == (4862L));\n    Debug.Assert(CatalanNumber((7L)) == (429L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_583_catalan_number","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function which returns nth catalan number.\n    public static long CatalanNumber(long num) {\n        if (num == 0)\n            return 1;\n\n        long[] catalan = new long[num + 1];\n        catalan[0] = 1;\n\n        for (long i = 1; i <= num; i++) {\n            catalan[i] = 0;\n            for (long j = 0; j < i; j++) {\n                catalan[i] += catalan[j] * catalan[i - 1 - j];\n            }\n        }\n\n        return catalan[num];\n    }\n}\n```"}
{"name":"mbpp_584_find_adverbs","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the first adverb ending with ly and its positions in a given string.\n    public static string FindAdverbs(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_584_find_adverbs.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindAdverbs((\"Clearly, he has no excuse for such behavior.\")).Equals((\"0-7: Clearly\")));\n    Debug.Assert(FindAdverbs((\"Please handle the situation carefuly\")).Equals((\"28-36: carefuly\")));\n    Debug.Assert(FindAdverbs((\"Complete the task quickly\")).Equals((\"18-25: quickly\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_584_find_adverbs","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the first adverb ending with ly and its positions in a given string.\n    public static string FindAdverbs(string text) {\n        if (string.IsNullOrEmpty(text)) return string.Empty;\n\n        List<string> words = text.Split(new[] { ' ', '.', ',', '!', '?' }, StringSplitOptions.RemoveEmptyEntries)\n                                 .ToList();\n\n        for (int i = 0; i < words.Count; i++) {\n            if (words[i].EndsWith(\"ly\", StringComparison.OrdinalIgnoreCase)) {\n                List<int> positions = new List<int>();\n                int pos = text.IndexOf(words[i], StringComparison.OrdinalIgnoreCase);\n                while (pos != -1) {\n                    positions.Add(pos);\n                    pos = text.IndexOf(words[i], pos + words[i].Length, StringComparison.OrdinalIgnoreCase);\n                }\n\n                string positionsString = string.Join(\", \", positions);\n                return $\"Adverb: {words[i]}, Positions: {positionsString}\";\n            }\n        }\n\n        return \"No adverb ending with 'ly' found.\";\n    }\n}\n```"}
{"name":"mbpp_586_split_Arr","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to split a list at the nth eelment and add the first part to the end.\n    public static List<long> SplitArr(List<long> l, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_586_split_Arr.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)12L, (long)10L, (long)5L, (long)6L, (long)52L, (long)36L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)6L, (long)52L, (long)36L, (long)12L, (long)10L}))));\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (1L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L}))));\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (3L)).Equals((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)0L, (long)1L, (long)2L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_586_split_Arr","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csthon function to split a list at the nth element and add the first part to the end.\n    public static List<long> SplitArr(List<long> l, long n) {\n        \/\/ Handle cases where the list is empty or n is out of bounds\n        if (l == null || l.Count == 0 || n < 0 || n >= l.Count) {\n            return l;\n        }\n\n        \/\/ Split the list at the nth element\n        List<long> firstPart = l.GetRange(0, (int)n);\n        List<long> secondPart = l.GetRange((int)n, l.Count - (int)n);\n\n        \/\/ Add the first part to the end of the second part\n        secondPart.AddRange(firstPart);\n\n        return secondPart;\n    }\n}\n```"}
{"name":"mbpp_587_list_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert a list to a tuple.\n    public static object ListTuple(List<long> listx) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_587_list_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListTuple((new List<long>(new long[]{(long)5L, (long)10L, (long)7L, (long)4L, (long)15L, (long)3L}))).Equals(Tuple.Create(5L, 10L, 7L, 4L, 15L, 3L)));\n    Debug.Assert(ListTuple((new List<long>(new long[]{(long)2L, (long)4L, (long)5L, (long)6L, (long)2L, (long)3L, (long)4L, (long)4L, (long)7L}))).Equals(Tuple.Create(2L, 4L, 5L, 6L, 2L, 3L, 4L, 4L, 7L)));\n    Debug.Assert(ListTuple((new List<long>(new long[]{(long)58L, (long)44L, (long)56L}))).Equals(Tuple.Create(58L, 44L, 56L)));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_587_list_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to convert a list to a tuple.\n    public static (long, long, long, long, long) ListTuple(List<long> listx) {\n        if (listx == null || listx.Count != 5) {\n            throw new ArgumentException(\"The list must contain exactly 5 elements.\");\n        }\n        return (listx[0], listx[1], listx[2], listx[3], listx[4]);\n    }\n}\n```"}
{"name":"mbpp_588_big_diff","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the difference between largest and smallest value in a given list.\n    public static long BigDiff(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_588_big_diff.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BigDiff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (3L));\n    Debug.Assert(BigDiff((new List<long>(new long[]{(long)4L, (long)5L, (long)12L}))) == (8L));\n    Debug.Assert(BigDiff((new List<long>(new long[]{(long)9L, (long)2L, (long)3L}))) == (7L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_588_big_diff","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the difference between largest and smallest value in a given list.\n    public static long BigDiff(List<long> nums) {\n        if (nums == null || nums.Count == 0) {\n            throw new ArgumentException(\"The list cannot be null or empty.\");\n        }\n        \n        long max = nums[0];\n        long min = nums[0];\n        \n        foreach (long num in nums) {\n            if (num > max) {\n                max = num;\n            }\n            if (num < min) {\n                min = num;\n            }\n        }\n        \n        return max - min;\n    }\n}\n```"}
{"name":"mbpp_589_perfect_squares","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find perfect squares between two given numbers.\n    public static List<long> PerfectSquares(long a, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_589_perfect_squares.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PerfectSquares((1L), (30L)).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L}))));\n    Debug.Assert(PerfectSquares((50L), (100L)).Equals((new List<long>(new long[]{(long)64L, (long)81L, (long)100L}))));\n    Debug.Assert(PerfectSquares((100L), (200L)).Equals((new List<long>(new long[]{(long)100L, (long)121L, (long)144L, (long)169L, (long)196L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_589_perfect_squares","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Write a function to find perfect squares between two given numbers.\n    public static List<long> PerfectSquares(long a, long b)\n    {\n        List<long> perfectSquares = new List<long>();\n\n        \/\/ Swap if a is greater than b to ensure a is less than or equal to b\n        if (a > b)\n        {\n            long temp = a;\n            a = b;\n            b = temp;\n        }\n\n        \/\/ Find the smallest perfect square greater than or equal to a\n        long start = (long)Math.Ceiling(Math.Sqrt(a));\n\n        \/\/ Continue finding perfect squares until the square of the number exceeds b\n        for (long i = start; i * i <= b; i++)\n        {\n            perfectSquares.Add(i * i);\n        }\n\n        return perfectSquares;\n    }\n}\n```"}
{"name":"mbpp_591_swap_List","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to interchange the first and last elements in a list.\n    public static List<long> SwapList(List<long> newList) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_591_swap_List.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)12L, (long)35L, (long)9L, (long)56L, (long)24L}))).Equals((new List<long>(new long[]{(long)24L, (long)35L, (long)9L, (long)56L, (long)12L}))));\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))));\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_591_swap_List","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a C# function to interchange the first and last elements in a list.\n    public static List<long> SwapList(List<long> newList) {\n        \/\/ Check if the list is empty or has only one element\n        if (newList.Count <= 1) {\n            return newList;\n        }\n\n        \/\/ Swap the first and last elements\n        long temp = newList[0];\n        newList[0] = newList[newList.Count - 1];\n        newList[newList.Count - 1] = temp;\n\n        return newList;\n    }\n}\n```"}
{"name":"mbpp_592_sum_Of_product","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of the product of consecutive binomial co-efficients.\n    public static long SumOfProduct(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_592_sum_Of_product.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfProduct((3L)) == (15L));\n    Debug.Assert(SumOfProduct((4L)) == (56L));\n    Debug.Assert(SumOfProduct((1L)) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_592_sum_Of_product","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csthon function to find the sum of the product of consecutive binomial co-efficients.\n    public static long SumOfProduct(long n) {\n        \/\/ Function to calculate binomial coefficients\n        long BinomialCoefficient(long n, long k) {\n            if (k > n - k) {\n                k = n - k;\n            }\n            long res = 1;\n            for (long i = 0; i < k; ++i) {\n                res *= (n - i);\n                res \/= (i + 1);\n            }\n            return res;\n        }\n\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n            long binom1 = BinomialCoefficient(n, i);\n            long binom2 = BinomialCoefficient(n, i + 1);\n            sum += binom1 * binom2;\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_593_removezero_ip","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove leading zeroes from an ip address.\n    public static string RemovezeroIp(string ip) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_593_removezero_ip.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemovezeroIp((\"216.08.094.196\")).Equals((\"216.8.94.196\")));\n    Debug.Assert(RemovezeroIp((\"12.01.024\")).Equals((\"12.1.24\")));\n    Debug.Assert(RemovezeroIp((\"216.08.094.0196\")).Equals((\"216.8.94.196\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_593_removezero_ip","gpt_solution":"```csharp\nusing System;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to remove leading zeroes from an ip address.\n    public static string RemovezeroIp(string ip) {\n        var parts = ip.Split('.');\n        for (int i = 0; i < parts.Length; i++) {\n            parts[i] = int.Parse(parts[i]).ToString();\n        }\n        return string.Join(\".\", parts);\n    }\n}\n```"}
{"name":"mbpp_594_diff_even_odd","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the difference of the first even and first odd number of a given list.\n    public static long DiffEvenOdd(List<long> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_594_diff_even_odd.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)1L, (long)6L, (long)8L}))) == (3L));\n    Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (1L));\n    Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))) == (9L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_594_diff_even_odd","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the difference of the first even and first odd number of a given list.\n    public static long DiffEvenOdd(List<long> list1) {\n        long? firstEven = null;\n        long? firstOdd = null;\n\n        foreach (var number in list1) {\n            if (firstEven == null && number % 2 == 0) {\n                firstEven = number;\n            } else if (firstOdd == null && number % 2 != 0) {\n                firstOdd = number;\n            }\n\n            \/\/ If both firstEven and firstOdd are found, break the loop\n            if (firstEven != null && firstOdd != null) {\n                break;\n            }\n        }\n\n        \/\/ Check if both an even and an odd number were found\n        if (firstEven.HasValue && firstOdd.HasValue) {\n            return firstEven.Value - firstOdd.Value;\n        } else {\n            throw new ArgumentException(\"List does not contain both an even and an odd number\");\n        }\n    }\n}\n```"}
{"name":"mbpp_595_min_Swaps","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static object MinSwaps(string str1, string str2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_595_min_Swaps.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinSwaps((\"1101\"), (\"1110\")).Equals((object(1L))));\n    Debug.Assert(MinSwaps((\"111\"), (\"000\")).Equals((object(\"Not Possible\"))));\n    Debug.Assert(MinSwaps((\"111\"), (\"110\")).Equals((object(\"Not Possible\"))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_595_min_Swaps","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static object MinSwaps(string str1, string str2) {\n        if (str1.Length != str2.Length) {\n            throw new ArgumentException(\"Both strings must be of the same length\");\n        }\n\n        int count1 = 0, count2 = 0;\n        foreach (char c in str1) {\n            if (c == '1') count1++;\n        }\n\n        foreach (char c in str2) {\n            if (c == '1') count2++;\n        }\n\n        if (count1 != count2) {\n            return -1; \/\/ It's not possible to convert if the number of 1's are different\n        }\n\n        int swaps = 0;\n        int temp = 0; \/\/ This will be used to count the number of mismatches\n        for (int i = 0; i < str1.Length; ++i) {\n            if (str1[i] != str2[i]) {\n                if (str1[i] == '1') {\n                    temp++;\n                } else {\n                    swaps += temp;\n                }\n            }\n        }\n\n        return swaps;\n    }\n}\n```\n\nNote that this implementation checks if the binary strings have the same number of '1's, as otherwise it's impossible to convert one to the other just by swapping. The main logic leverages the fact that minimum swaps are achieved by counting how many '1's in the first string up to any point need to be swapped to match a '1' or '0' in the second string."}
{"name":"mbpp_597_find_kth","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_597_find_kth.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_597_find_kth","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find kth element from the given two sorted lists.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n        int n1 = arr1.Count;\n        int n2 = arr2.Count;\n\n        \/\/ Ensure arr1 is the smaller array\n        if (n1 > n2) {\n            return FindKth(arr2, arr1, k);\n        }\n\n        int l = 0, r = n1;\n\n        while (l <= r) {\n            int m1 = l + (r - l) \/ 2;\n            int m2 = (int)k - m1;\n\n            \/\/ Check if m2 is valid\n            if (m2 < 0) {\n                r = m1 - 1;\n                continue;\n            } else if (m2 > n2) {\n                l = m1 + 1;\n                continue;\n            }\n\n            long l1 = (m1 == 0) ? long.MinValue : arr1[m1 - 1];\n            long r1 = (m1 == n1) ? long.MaxValue : arr1[m1];\n            long l2 = (m2 == 0) ? long.MinValue : arr2[m2 - 1];\n            long r2 = (m2 == n2) ? long.MaxValue : arr2[m2];\n\n            if (l1 <= r2 && l2 <= r1) {\n                return Math.Max(l1, l2);\n            } else if (l1 > r2) {\n                r = m1 - 1;\n            } else {\n                l = m1 + 1;\n            }\n        }\n\n        throw new ArgumentException(\"Arguments are invalid.\");\n    }\n}\n```"}
{"name":"mbpp_598_armstrong_number","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given number is armstrong or not.\n    public static bool ArmstrongNumber(long number) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_598_armstrong_number.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ArmstrongNumber((153L)) == (true));\n    Debug.Assert(ArmstrongNumber((259L)) == (false));\n    Debug.Assert(ArmstrongNumber((4458L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_598_armstrong_number","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether the given number is armstrong or not.\n    public static bool ArmstrongNumber(long number) {\n        \/\/ Convert the number to a string to easily count the digits\n        string numStr = number.ToString();\n        int numDigits = numStr.Length;\n        \n        long sum = 0;\n        long temp = number;\n\n        \/\/ Calculate the sum of each digit raised to the power of the number of digits\n        while (temp > 0) {\n            long digit = temp % 10;\n            sum += (long)Math.Pow(digit, numDigits);\n            temp \/= 10;\n        }\n\n        \/\/ Check if the sum is equal to the original number\n        return sum == number;\n    }\n}\n```\n\nThis code defines a method `ArmstrongNumber` in a class `Problem` that checks whether a given long integer is an Armstrong number. An Armstrong number of order `n` is a number that is equal to the sum of its own digits each raised to the power of `n`. For example, 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153."}
{"name":"mbpp_599_sum_average","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find sum and average of first n natural numbers.\n    public static Tuple<long, float> SumAverage(long number) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_599_sum_average.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumAverage((10L)).Equals((Tuple.Create(55L, 5.5f))));\n    Debug.Assert(SumAverage((15L)).Equals((Tuple.Create(120L, 8.0f))));\n    Debug.Assert(SumAverage((20L)).Equals((Tuple.Create(210L, 10.5f))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_599_sum_average","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find sum and average of first n natural numbers.\n    public static Tuple<long, float> SumAverage(long number) {\n        long sum = number * (number + 1) \/ 2;\n        float average = (float)sum \/ number;\n        return Tuple.Create(sum, average);\n    }\n}\n```"}
{"name":"mbpp_600_is_Even","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the given number is even or not.\n    public static bool IsEven(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_600_is_Even.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsEven((1L)) == (false));\n    Debug.Assert(IsEven((2L)) == (true));\n    Debug.Assert(IsEven((3L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_600_is_Even","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether the given number is even or not.\n    public static bool IsEven(long n) {\n        return n % 2 == 0;\n    }\n}\n```"}
{"name":"mbpp_602_first_repeated_char","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the first repeated character in a given string.\n    public static string FirstRepeatedChar(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_602_first_repeated_char.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstRepeatedChar((\"abcabc\")).Equals((\"a\")));\n    Debug.Assert(FirstRepeatedChar((\"abc\")).Equals(null));\n    Debug.Assert(FirstRepeatedChar((\"123123\")).Equals((\"1\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_602_first_repeated_char","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a C# function to find the first repeated character in a given string.\n    public static string FirstRepeatedChar(string str1) {\n        \/\/ Create a HashSet to store seen characters\n        HashSet<char> seenChars = new HashSet<char>();\n\n        \/\/ Iterate over each character in the string\n        foreach (char ch in str1) {\n            \/\/ If the character is already in the HashSet, it is the first repeated character\n            if (seenChars.Contains(ch)) {\n                return ch.ToString();\n            }\n            \/\/ Add the character to the HashSet\n            seenChars.Add(ch);\n        }\n\n        \/\/ If no repeated character is found, return an appropriate message\n        return \"No repeated characters\";\n    }\n}\n```"}
{"name":"mbpp_603_get_ludic","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to get all lucid numbers smaller than or equal to a given integer.\n    public static List<long> GetLudic(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_603_get_ludic.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetLudic((10L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(GetLudic((25L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)23L, (long)25L}))));\n    Debug.Assert(GetLudic((45L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)23L, (long)25L, (long)29L, (long)37L, (long)41L, (long)43L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_603_get_ludic","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to get all lucid numbers smaller than or equal to a given integer.\n    public static List<long> GetLudic(long n) {\n        List<long> ludicNumbers = new List<long>();\n\n        \/\/ Initialize the list with numbers from 1 to n\n        for (long i = 1; i <= n; i++) {\n            ludicNumbers.Add(i);\n        }\n\n        \/\/ Index to start removing\n        int index = 1;\n\n        while (index < ludicNumbers.Count) {\n            long step = ludicNumbers[index];\n            \/\/ Remove every step-th number from the list, starting from index + step\n            for (long i = index + step; i < ludicNumbers.Count; i += step - 1) {\n                ludicNumbers.RemoveAt((int)i);\n            }\n            index++;\n        }\n\n        return ludicNumbers;\n    }\n}\n```"}
{"name":"mbpp_604_reverse_words","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to reverse words seperated by spaces in a given string.\n    public static string ReverseWords(string s) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_604_reverse_words.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseWords((\"python program\")).Equals((\"program python\")));\n    Debug.Assert(ReverseWords((\"java language\")).Equals((\"language java\")));\n    Debug.Assert(ReverseWords((\"indian man\")).Equals((\"man indian\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_604_reverse_words","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to reverse words separated by spaces in a given string.\n    public static string ReverseWords(string s) {\n        if (string.IsNullOrWhiteSpace(s)) {\n            return s;\n        }\n\n        \/\/ Split the string by spaces\n        string[] words = s.Split(' ');\n\n        \/\/ Reverse the order of words\n        Array.Reverse(words);\n\n        \/\/ Join the words back into a single string separated by spaces\n        return string.Join(\" \", words);\n    }\n}\n```"}
{"name":"mbpp_605_prime_num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if the given integer is a prime number.\n    public static bool PrimeNum(long num) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_605_prime_num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeNum((13L)) == (true));\n    Debug.Assert(PrimeNum((7L)) == (true));\n    Debug.Assert(PrimeNum((-1010L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_605_prime_num","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to check if the given integer is a prime number.\n    public static bool PrimeNum(long num) {\n        \/\/ Check for edge cases\n        if (num <= 1) return false;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n\n        \/\/ Check for factors from 3 to the square root of the number\n        for (long i = 3; i <= Math.Sqrt(num); i += 2) {\n            if (num % i == 0) return false;\n        }\n        \n        return true;\n    }\n}\n```"}
{"name":"mbpp_606_radian_degree","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert degrees to radians.\n    public static float RadianDegree(long degree) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_606_radian_degree.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RadianDegree((90L)) == (1.5707963267948966f));\n    Debug.Assert(RadianDegree((60L)) == (1.0471975511965976f));\n    Debug.Assert(RadianDegree((120L)) == (2.0943951023931953f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_606_radian_degree","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to convert degrees to radians.\n    public static float RadianDegree(long degree) {\n        \/\/ Convert degree to radians\n        return (float)(degree * (Math.PI \/ 180));\n    }\n}\n```\n\nThis code defines a class `Problem` with a static method `RadianDegree` that converts an angle given in degrees to its equivalent in radians. The conversion is done using the formula: radians = degrees * (\u03c0 \/ 180)."}
{"name":"mbpp_607_find_literals","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    public static Tuple<string, long, long> FindLiterals(string text, string pattern) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_607_find_literals.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).Equals((Tuple.Create(\"fox\", 16L, 19L))));\n    Debug.Assert(FindLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).Equals((Tuple.Create(\"crazy\", 16L, 21L))));\n    Debug.Assert(FindLiterals((\"Hardest choices required strongest will\"), (\"will\")).Equals((Tuple.Create(\"will\", 35L, 39L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_607_find_literals","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    public static Tuple<string, long, long> FindLiterals(string text, string pattern) {\n        \/\/ Create a regular expression object with the provided pattern\n        Regex regex = new Regex(pattern);\n        \n        \/\/ Match the regular expression pattern to the given text\n        Match match = regex.Match(text);\n        \n        \/\/ If a match is found\n        if (match.Success) {\n            \/\/ Extract the matched substring\n            string matchedSubstring = match.Value;\n            \/\/ Calculate start and end indices\n            long startIndex = match.Index;\n            long endIndex = match.Index + match.Length - 1;\n            \/\/ Return the substring along with the start and end indices as a tuple\n            return new Tuple<string, long, long>(matchedSubstring, startIndex, endIndex);\n        } else {\n            \/\/ If no match is found, return null (or you could throw an exception, based on your requirement)\n            return null;\n        }\n    }\n}\n```"}
{"name":"mbpp_608_bell_Number","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find nth bell number.\n    public static long BellNumber(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_608_bell_Number.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(BellNumber((2L)) == (2L));\n    Debug.Assert(BellNumber((3L)) == (5L));\n    Debug.Assert(BellNumber((4L)) == (15L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_608_bell_Number","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find nth bell number.\n    public static long BellNumber(long n) {\n        \/\/ Create a 2D array to store the Bell triangle\n        long[,] bell = new long[n + 1, n + 1];\n\n        \/\/ Set the first Bell number\n        bell[0, 0] = 1;\n\n        \/\/ Fill the Bell triangle\n        for (int i = 1; i <= n; i++) {\n            \/\/ Explicitly put the last value of the previous row at the start of the current row\n            bell[i, 0] = bell[i - 1, i - 1];\n\n            \/\/ Fill the current row except for the first cell\n            for (int j = 1; j <= i; j++) {\n                bell[i, j] = bell[i - 1, j - 1] + bell[i, j - 1];\n            }\n        }\n\n        \/\/ The desired Bell number will be the last element of the nth row\n        return bell[n, n];\n    }\n}\n```\n\nThe function `BellNumber` calculates the nth Bell number using a dynamic programming approach and constructs a Bell triangle. The result is found as the last element of the nth row of the Bell triangle. The function does not include a `Main` method for direct execution as per the instructions."}
{"name":"mbpp_610_remove_kth_element","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function which takes a list and returns a list with the same elements, but the k'th element removed.\n    public static List<long> RemoveKthElement(List<long> list1, long L) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_610_remove_kth_element.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L})), (3L)).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L}))));\n    Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))));\n    Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L})), (5L)).Equals((new List<long>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_610_remove_kth_element","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem\n{\n    \/\/ Write a C# function which takes a list and returns a list with the same elements, but the k'th element removed.\n    public static List<long> RemoveKthElement(List<long> list1, long k)\n    {\n        if (k < 0 || k >= list1.Count)\n        {\n            throw new ArgumentOutOfRangeException(\"k\", \"k is out of the range of the list\");\n        }\n\n        \/\/ Creating a new list so the original list remains unmodified\n        List<long> newList = new List<long>(list1);\n        newList.RemoveAt((int)k);\n\n        return newList;\n    }\n}\n```"}
{"name":"mbpp_611_max_of_nth","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long MaxOfNth(List<List<long>> test_list, long N) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_611_max_of_nth.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)9L, (long)19L})})), (2L)) == (19L));\n    Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)20L})})), (1L)) == (10L));\n    Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)21L})})), (1L)) == (11L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_611_max_of_nth","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long MaxOfNth(List<List<long>> test_list, int N) {\n        \/\/ Validate input\n        if (test_list == null || test_list.Count == 0 || test_list[0].Count <= N) {\n            throw new ArgumentException(\"Invalid matrix or column index.\");\n        }\n        \n        long maxVal = long.MinValue;\n        \n        foreach (var row in test_list) {\n            if (row.Count > N) {\n                if (row[N] > maxVal) {\n                    maxVal = row[N];\n                }\n            }\n        }\n        \n        return maxVal;\n    }\n}\n```"}
{"name":"mbpp_612_merge","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    public static List<List<object>> Merge(List<List<object>> lst) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_612_merge.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Merge((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"m\", (string)\"n\"})}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"a\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"y\", (string)\"b\", (string)\"n\"})}))));\n    Debug.Assert(Merge((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L})}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L})}))));\n    Debug.Assert(Merge((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"m\", (string)\"n\", (string)\"o\"})}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"a\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"y\", (string)\"b\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"z\", (string)\"c\", (string)\"o\"})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_612_merge","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function which takes a list of lists, where each sublist has two elements,\n    \/\/ and returns a list of two lists where the first list has the first element of each sublist\n    \/\/ and the second one has the second.\n    public static List<List<object>> Merge(List<List<object>> lst) {\n        List<object> firstElements = new List<object>();\n        List<object> secondElements = new List<object>();\n\n        foreach (var sublist in lst) {\n            if (sublist.Count == 2) {\n                firstElements.Add(sublist[0]);\n                secondElements.Add(sublist[1]);\n            } else {\n                throw new ArgumentException(\"Each sublist must contain exactly two elements.\");\n            }\n        }\n\n        return new List<List<object>> { firstElements, secondElements };\n    }\n}\n```"}
{"name":"mbpp_614_cummulative_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n    public static long CummulativeSum(List<List<long>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_614_cummulative_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)2L, (long)6L})}))) == (30L));\n    Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)3L, (long)7L})}))) == (37L));\n    Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L})}))) == (44L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_614_cummulative_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n    public static long CumulativeSum(List<List<long>> test_list) {\n        long sum = 0;\n        foreach (var innerList in test_list) {\n            foreach (var value in innerList) {\n                sum += value;\n            }\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_615_average_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n    public static List<float> AverageTuple(List<List<long>> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_615_average_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)10L, (long)10L, (long)10L, (long)12L}), (List<long>)new List<long>(new long[]{(long)30L, (long)45L, (long)56L, (long)45L}), (List<long>)new List<long>(new long[]{(long)81L, (long)80L, (long)39L, (long)32L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})}))).Equals((new List<float>(new float[]{(float)30.5f, (float)34.25f, (float)27.0f, (float)23.25f}))));\n    Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)30L, (long)-15L, (long)56L}), (List<long>)new List<long>(new long[]{(long)81L, (long)-60L, (long)-39L}), (List<long>)new List<long>(new long[]{(long)-10L, (long)2L, (long)3L})}))).Equals((new List<float>(new float[]{(float)25.5f, (float)-18.0f, (float)3.75f}))));\n    Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)100L, (long)100L, (long)100L, (long)120L}), (List<long>)new List<long>(new long[]{(long)300L, (long)450L, (long)560L, (long)450L}), (List<long>)new List<long>(new long[]{(long)810L, (long)800L, (long)390L, (long)320L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new List<float>(new float[]{(float)305.0f, (float)342.5f, (float)270.0f, (float)232.5f}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_615_average_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n    public static List<float> AverageTuple(List<List<long>> nums) {\n        List<float> averages = new List<float>();\n        \n        foreach (var sublist in nums) {\n            if (sublist.Count > 0) {\n                float average = sublist.Average(v => (float)v);\n                averages.Add(average);\n            } else {\n                averages.Add(0); \/\/ or whatever you prefer to handle empty sublists\n            }\n        }\n        \n        return averages;\n    }\n}\n```"}
{"name":"mbpp_616_tuple_modulo","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function which takes two tuples of the same length and performs the element wise modulo.\n    public static Tuple<long, long, long, long> TupleModulo(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_616_tuple_modulo.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleModulo((Tuple.Create(10L, 4L, 5L, 6L)), (Tuple.Create(5L, 6L, 7L, 5L))).Equals((Tuple.Create(0L, 4L, 5L, 1L))));\n    Debug.Assert(TupleModulo((Tuple.Create(11L, 5L, 6L, 7L)), (Tuple.Create(6L, 7L, 8L, 6L))).Equals((Tuple.Create(5L, 5L, 6L, 1L))));\n    Debug.Assert(TupleModulo((Tuple.Create(12L, 6L, 7L, 8L)), (Tuple.Create(7L, 8L, 9L, 7L))).Equals((Tuple.Create(5L, 6L, 7L, 1L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_616_tuple_modulo","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function which takes two tuples of the same length and performs the element-wise modulo.\n    public static Tuple<long, long, long, long> TupleModulo(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n        if (test_tup1 == null || test_tup2 == null) \n        {\n            throw new ArgumentNullException(\"Input tuples cannot be null.\");\n        }\n        \n        return new Tuple<long, long, long, long>(\n            test_tup1.Item1 % test_tup2.Item1,\n            test_tup1.Item2 % test_tup2.Item2,\n            test_tup1.Item3 % test_tup2.Item3,\n            test_tup1.Item4 % test_tup2.Item4\n        );\n    }\n}\n```"}
{"name":"mbpp_617_min_Jumps","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    public static float MinJumps(Tuple<long, long> steps, long d) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_617_min_Jumps.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinJumps((Tuple.Create(3L, 4L)), (11L)) == (3.5f));\n    Debug.Assert(MinJumps((Tuple.Create(3L, 4L)), (0L)) == (float)0L);\n    Debug.Assert(MinJumps((Tuple.Create(11L, 14L)), (11L)) == (float)1L);\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_617_min_Jumps","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check for the number of jumps required of given length\n    \/\/ to reach a point of form (d, 0) from origin in a 2d plane.\n    public static float MinJumps(Tuple<long, long> steps, long d) {\n        long xStep = steps.Item1;\n        long yStep = steps.Item2;\n\n        \/\/ We only need xStep since reaching (d, 0) involves only moving horizontally in the 2D plane\n        if (xStep == 0) {\n            throw new ArgumentException(\"The x-step length cannot be zero.\");\n        }\n\n        \/\/ Calculate the number of jumps required\n        float jumps = (float) d \/ xStep;\n\n        return jumps;\n    }\n}\n```\n\nThis code defines a method `MinJumps` which calculates the number of jumps of given `steps` length required to reach the point `(d, 0)` from the origin `(0, 0)` in a 2D plane. This implementation assumes that the horizontal step length `xStep` is not zero."}
{"name":"mbpp_618_div_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to divide two lists element wise.\n    public static List<float> DivList(List<long> nums1, List<long> nums2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_618_div_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DivList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<float>(new float[]{(float)4.0f, (float)2.5f, (float)2.0f}))));\n    Debug.Assert(DivList((new List<long>(new long[]{(long)3L, (long)2L})), (new List<long>(new long[]{(long)1L, (long)4L}))).Equals((new List<float>(new float[]{(float)3.0f, (float)0.5f}))));\n    Debug.Assert(DivList((new List<long>(new long[]{(long)90L, (long)120L})), (new List<long>(new long[]{(long)50L, (long)70L}))).Equals((new List<float>(new float[]{(float)1.8f, (float)1.7142857142857142f}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_618_div_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to divide two lists element wise.\n    public static List<float> DivList(List<long> nums1, List<long> nums2) {\n        if (nums1.Count != nums2.Count) {\n            throw new ArgumentException(\"Lists must have the same length.\");\n        }\n\n        List<float> result = new List<float>();\n\n        for (int i = 0; i < nums1.Count; i++) {\n            if (nums2[i] == 0) {\n                throw new DivideByZeroException(\"Division by zero in the input list.\");\n            }\n            result.Add((float)nums1[i] \/ nums2[i]);\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_619_move_num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to move all the numbers to the end of the given string.\n    public static string MoveNum(string test_str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_619_move_num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveNum((\"I1love143you55three3000thousand\")).Equals((\"Iloveyouthreethousand1143553000\")));\n    Debug.Assert(MoveNum((\"Avengers124Assemble\")).Equals((\"AvengersAssemble124\")));\n    Debug.Assert(MoveNum((\"Its11our12path13to14see15things16do17things\")).Equals((\"Itsourpathtoseethingsdothings11121314151617\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_619_move_num","gpt_solution":"```csharp\nusing System;\nusing System.Linq;\nusing System.Text;\n\nclass Problem {\n    \/\/ Write a function to move all the numbers to the end of the given string.\n    public static string MoveNum(string test_str) {\n        if (string.IsNullOrEmpty(test_str)) {\n            return test_str;\n        }\n\n        StringBuilder numbers = new StringBuilder();\n        StringBuilder nonNumbers = new StringBuilder();\n\n        foreach (char ch in test_str) {\n            if (char.IsDigit(ch)) {\n                numbers.Append(ch);\n            } else {\n                nonNumbers.Append(ch);\n            }\n        }\n\n        return nonNumbers.ToString() + numbers.ToString();\n    }\n}\n```"}
{"name":"mbpp_622_get_median","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_622_get_median.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_622_get_median","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n        if (n <= 0) return -1;\n        if (n == 1) return (arr1[0] + arr2[0]) \/ 2.0f;\n        if (n == 2) return (Math.Max(arr1[0], arr2[0]) + Math.Min(arr1[1], arr2[1])) \/ 2.0f;\n\n        long m1 = Median(arr1, n);\n        long m2 = Median(arr2, n);\n\n        if (m1 == m2) return m1;\n\n        if (m1 < m2) {\n            if (n % 2 == 0) \n                return GetMedian(arr1.GetRange((int)n \/ 2 - 1, (int)(n - (n \/ 2 - 1))), arr2.GetRange(0, (int)n \/ 2 + 1), (int)(n \/ 2) + 1);\n            return GetMedian(arr1.GetRange((int)n \/ 2, (int)(n - (n \/ 2))), arr2.GetRange(0, (int)n \/ 2 + 1), (int)(n \/ 2) + 1);\n        }\n\n        if (n % 2 == 0) \n            return GetMedian(arr1.GetRange(0, (int)n \/ 2 + 1), arr2.GetRange((int)n \/ 2 - 1, (int)(n - (n \/ 2 - 1))), (int)(n \/ 2) + 1);\n        return GetMedian(arr1.GetRange(0, (int)n \/ 2 + 1), arr2.GetRange((int)n \/ 2, (int)(n - (n \/ 2))), (int)(n \/ 2) + 1);\n    }\n\n    private static long Median(List<long> arr, long n) {\n        if (n % 2 == 0)\n            return (arr[(int)n \/ 2] + arr[(int)n \/ 2 - 1]) \/ 2;\n        return arr[(int)n \/ 2];\n    }\n}\n```"}
{"name":"mbpp_623_nth_nums","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to compute the n-th power of each number in a list.\n    public static List<long> NthNums(List<long> nums, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_623_nth_nums.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NthNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L, (long)36L, (long)49L, (long)64L, (long)81L, (long)100L}))));\n    Debug.Assert(NthNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L})), (3L)).Equals((new List<long>(new long[]{(long)1000L, (long)8000L, (long)27000L}))));\n    Debug.Assert(NthNums((new List<long>(new long[]{(long)12L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)248832L, (long)759375L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_623_nth_nums","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to compute the n-th power of each number in a list.\n    public static List<long> NthNums(List<long> nums, long n) {\n        List<long> result = new List<long>();\n        foreach (long num in nums) {\n            result.Add((long)Math.Pow(num, n));\n        }\n        return result;\n    }\n}\n```"}
{"name":"mbpp_624_is_upper","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to convert a given string to uppercase.\n    public static string IsUpper(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_624_is_upper.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUpper((\"person\")).Equals((\"PERSON\")));\n    Debug.Assert(IsUpper((\"final\")).Equals((\"FINAL\")));\n    Debug.Assert(IsUpper((\"Valid\")).Equals((\"VALID\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_624_is_upper","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csthon function to convert a given string to uppercase.\n    public static string IsUpper(string str) {\n        if (string.IsNullOrEmpty(str)) {\n            return str;\n        }\n        return str.ToUpper();\n    }\n}\n```"}
{"name":"mbpp_625_swap_List","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to interchange the first and last element in a given list.\n    public static List<long> SwapList(List<long> newList) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_625_swap_List.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))));\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))).Equals((new List<long>(new long[]{(long)4L, (long)2L, (long)3L, (long)4L, (long)1L}))));\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_625_swap_List","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to interchange the first and last element in a given list.\n    public static List<long> SwapList(List<long> newList) {\n        if (newList == null || newList.Count < 2) {\n            return newList;\n        }\n\n        long temp = newList[0];\n        newList[0] = newList[newList.Count - 1];\n        newList[newList.Count - 1] = temp;\n\n        return newList;\n    }\n}\n```"}
{"name":"mbpp_626_triangle_area","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    public static Nullable<long> TriangleArea(long r) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_626_triangle_area.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((-1L)).Equals(null));\n    Debug.Assert(TriangleArea((0L)).Equals(0L));\n    Debug.Assert(TriangleArea((2L)).Equals(4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_626_triangle_area","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a c# function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    public static Nullable<long> TriangleArea(long r) {\n        \/\/ The largest triangle that can be inscribed in a semicircle is a right-angled triangle with the diameter as the hypotenuse.\n        \/\/ For a semicircle with radius r, the diameter is 2*r, and thus the largest triangle will have legs of length r.\n        \/\/ The area of a right-angled triangle is (1\/2) * base * height\n        if (r <= 0) {\n            return null; \/\/ return null if the radius is non-positive\n        }\n\n        long area = (r * r) \/ 2;\n        return area;\n    }\n}\n```"}
{"name":"mbpp_627_find_First_Missing","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_627_find_First_Missing.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_627_find_First_Missing","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n        long left = 0;\n        long right = array.Count - 1;\n\n        while (left <= right) {\n            long mid = left + (right - left) \/ 2;\n\n            \/\/ Check if the missing number is in the left half\n            if (array[(int)mid] != mid) {\n                right = mid - 1;\n            } else {\n                \/\/ Otherwise, it's in the right half\n                left = mid + 1;\n            }\n        }\n\n        \/\/ 'left' now points to the first missing number\n        return left;\n    }\n}\n```"}
{"name":"mbpp_628_replace_spaces","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to replace all spaces in the given string with '%20'.\n    public static string ReplaceSpaces(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_628_replace_spaces.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceSpaces((\"My Name is Dawood\")).Equals((\"My%20Name%20is%20Dawood\")));\n    Debug.Assert(ReplaceSpaces((\"I am a Programmer\")).Equals((\"I%20am%20a%20Programmer\")));\n    Debug.Assert(ReplaceSpaces((\"I love Coding\")).Equals((\"I%20love%20Coding\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_628_replace_spaces","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to replace all spaces in the given string with '%20'.\n    public static string ReplaceSpaces(string str) {\n        if (str == null) {\n            return null;\n        }\n        return str.Replace(\" \", \"%20\");\n    }\n}\n```"}
{"name":"mbpp_629_Split","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find even numbers from a list of numbers.\n    public static List<long> Split(List<long> list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_629_Split.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Split((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L}))));\n    Debug.Assert(Split((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)0L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)0L}))));\n    Debug.Assert(Split((new List<long>(new long[]{(long)8L, (long)12L, (long)15L, (long)19L}))).Equals((new List<long>(new long[]{(long)8L, (long)12L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_629_Split","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a csthon function to find even numbers from a list of numbers.\n    public static List<long> Split(List<long> list) {\n        List<long> evenNumbers = new List<long>();\n        foreach (var number in list) {\n            if (number % 2 == 0) {\n                evenNumbers.Add(number);\n            }\n        }\n        return evenNumbers;\n    }\n}\n```"}
{"name":"mbpp_630_get_coordinates","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    public static List<List<long>> GetCoordinates(Tuple<long, long> test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_630_get_coordinates.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetCoordinates((Tuple.Create(3L, 4L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))));\n    Debug.Assert(GetCoordinates((Tuple.Create(4L, 5L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L})}))));\n    Debug.Assert(GetCoordinates((Tuple.Create(5L, 6L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)7L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_630_get_coordinates","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    public static List<List<long>> GetCoordinates(Tuple<long, long> test_tup) {\n        List<List<long>> adjacentCoordinates = new List<List<long>>();\n        long x = test_tup.Item1;\n        long y = test_tup.Item2;\n\n        \/\/ Define the relative positions of adjacent coordinates\n        List<Tuple<long, long>> directions = new List<Tuple<long, long>> {\n            Tuple.Create(-1L, 0L), \/\/ Left\n            Tuple.Create(1L, 0L),  \/\/ Right\n            Tuple.Create(0L, -1L), \/\/ Down\n            Tuple.Create(0L, 1L),  \/\/ Up\n            Tuple.Create(-1L, -1L), \/\/ Lower Left Diagonal\n            Tuple.Create(-1L, 1L),  \/\/ Upper Left Diagonal\n            Tuple.Create(1L, -1L),  \/\/ Lower Right Diagonal\n            Tuple.Create(1L, 1L)    \/\/ Upper Right Diagonal\n        };\n\n        \/\/ Calculate and add all adjacent coordinates to the list\n        foreach (var direction in directions) {\n            long newX = x + direction.Item1;\n            long newY = y + direction.Item2;\n            adjacentCoordinates.Add(new List<long> { newX, newY });\n        }\n\n        return adjacentCoordinates;\n    }\n}\n```"}
{"name":"mbpp_631_replace_spaces","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    public static string ReplaceSpaces(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_631_replace_spaces.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceSpaces((\"Jumanji The Jungle\")).Equals((\"Jumanji_The_Jungle\")));\n    Debug.Assert(ReplaceSpaces((\"The_Avengers\")).Equals((\"The Avengers\")));\n    Debug.Assert(ReplaceSpaces((\"Fast and Furious\")).Equals((\"Fast_and_Furious\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_631_replace_spaces","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    public static string ReplaceSpaces(string text) {\n        if (text == null) return null;\n        \n        StringBuilder result = new StringBuilder();\n\n        foreach (char c in text) {\n            if (c == ' ') {\n                result.Append('_');\n            } else if (c == '_') {\n                result.Append(' ');\n            } else {\n                result.Append(c);\n            }\n        }\n\n        return result.ToString();\n    }\n}\n```"}
{"name":"mbpp_632_move_zero","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to move all zeroes to the end of the given list.\n    public static List<long> MoveZero(List<long> num_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_632_move_zero.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveZero((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)0L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)0L, (long)0L}))));\n    Debug.Assert(MoveZero((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)0L, (long)0L, (long)4L, (long)0L, (long)5L, (long)0L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)4L, (long)5L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(MoveZero((new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)1L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)0L, (long)0L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_632_move_zero","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to move all zeroes to the end of the given list.\n    public static List<long> MoveZero(List<long> num_list) {\n        int count = 0; \/\/ Count of non-zero elements\n\n        \/\/ Traverse the list. If element encountered is non-zero,\n        \/\/ then replace the element at index 'count' with this element\n        for (int i = 0; i < num_list.Count; i++) {\n            if (num_list[i] != 0) {\n                num_list[count++] = num_list[i]; \/\/ here count is incremented\n            }\n        }\n\n        \/\/ Now all non-zero elements have been shifted to \n        \/\/ front and 'count' is set as index of first 0. \n        \/\/ Make all elements 0 from count to end.\n        while (count < num_list.Count) {\n            num_list[count++] = 0;\n        }\n\n        return num_list;\n    }\n}\n```"}
{"name":"mbpp_633_pair_xor_Sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of xor of all pairs of numbers in the given list.\n    public static long PairXorSum(List<long> arr, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_633_pair_xor_Sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairXorSum((new List<long>(new long[]{(long)5L, (long)9L, (long)7L, (long)6L})), (4L)) == (47L));\n    Debug.Assert(PairXorSum((new List<long>(new long[]{(long)7L, (long)3L, (long)5L})), (3L)) == (12L));\n    Debug.Assert(PairXorSum((new List<long>(new long[]{(long)7L, (long)3L})), (2L)) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_633_pair_xor_Sum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the sum of xor of all pairs of numbers in the given list.\n    public static long PairXorSum(List<long> arr, long n) {\n        long totalSum = 0;\n\n        for (int i = 0; i < arr.Count; i++) {\n            for (int j = i + 1; j < arr.Count; j++) {\n                totalSum += arr[i] ^ arr[j];\n            }\n        }\n\n        return totalSum;\n    }\n}\n\n\/\/ Example usage (commented out since no Main function is required):\n\/\/ List<long> inputArr = new List<long> { 1, 2, 3 };\n\/\/ long count = inputArr.Count;\n\/\/ long result = Problem.PairXorSum(inputArr, count);\n\/\/ Console.WriteLine(result);\n```\n\nThis function `PairXorSum` iterates through each pair of numbers in the list `arr` and calculates their XOR value, and then adds it to `totalSum`. The total sum of all these XOR values is returned. Note that in this version, we assume `n` is the size of the list, though it isn't used within the function itself, since we compute the list size directly with `arr.Count`."}
{"name":"mbpp_635_heap_sort","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort the given list.\n    public static List<long> HeapSort(List<long> iterable) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_635_heap_sort.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(HeapSort((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)2L, (long)4L, (long)6L, (long)8L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n    Debug.Assert(HeapSort((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)25L, (long)58L}))).Equals((new List<long>(new long[]{(long)14L, (long)22L, (long)25L, (long)25L, (long)35L, (long)58L, (long)65L, (long)75L, (long)85L}))));\n    Debug.Assert(HeapSort((new List<long>(new long[]{(long)7L, (long)1L, (long)9L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_635_heap_sort","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Write a function to sort the given list.\n    public static List<long> HeapSort(List<long> iterable)\n    {\n        int n = iterable.Count;\n\n        \/\/ Build a max heap\n        for (int i = n \/ 2 - 1; i >= 0; i--)\n            Heapify(iterable, n, i);\n\n        \/\/ One by one extract elements from heap\n        for (int i = n - 1; i > 0; i--)\n        {\n            \/\/ Move current root to end\n            long temp = iterable[0];\n            iterable[0] = iterable[i];\n            iterable[i] = temp;\n\n            \/\/ Call max heapify on the reduced heap\n            Heapify(iterable, i, 0);\n        }\n\n        return iterable;\n    }\n\n    \/\/ A utility function to heapify a subtree rooted with node i which is an index in iterable[]. n is size of heap\n    static void Heapify(List<long> iterable, int n, int i)\n    {\n        int largest = i; \/\/ Initialize largest as root\n        int left = 2 * i + 1; \/\/ left = 2*i + 1\n        int right = 2 * i + 2; \/\/ right = 2*i + 2\n\n        \/\/ If left child is larger than root\n        if (left < n && iterable[left] > iterable[largest])\n            largest = left;\n\n        \/\/ If right child is larger than largest so far\n        if (right < n && iterable[right] > iterable[largest])\n            largest = right;\n\n        \/\/ If largest is not root\n        if (largest != i)\n        {\n            long swap = iterable[i];\n            iterable[i] = iterable[largest];\n            iterable[largest] = swap;\n\n            \/\/ Recursively heapify the affected sub-tree\n            Heapify(iterable, n, largest);\n        }\n    }\n}\n```"}
{"name":"mbpp_637_noprofit_noloss","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given amount has no profit and no loss\n    public static bool NoprofitNoloss(long actual_cost, long sale_amount) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_637_noprofit_noloss.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NoprofitNoloss((1500L), (1200L)) == (false));\n    Debug.Assert(NoprofitNoloss((100L), (100L)) == (true));\n    Debug.Assert(NoprofitNoloss((2000L), (5000L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_637_noprofit_noloss","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether the given amount has no profit and no loss\n    public static bool NoprofitNoloss(long actual_cost, long sale_amount) {\n        return actual_cost == sale_amount;\n    }\n}\n```\n\nThis C# function `NoprofitNoloss` will check if `actual_cost` is equal to `sale_amount`. If they are equal, it returns `true`, indicating no profit and no loss; otherwise, it returns `false`."}
{"name":"mbpp_638_wind_chill","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km\/h and a temperature in celsius.\n    public static long WindChill(long v, long t) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_638_wind_chill.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(WindChill((120L), (35L)) == (40L));\n    Debug.Assert(WindChill((40L), (20L)) == (19L));\n    Debug.Assert(WindChill((10L), (8L)) == (6L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_638_wind_chill","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km\/h and a temperature in celsius.\n    public static long WindChill(long v, long t) {\n        \/\/ Constants based on the formula for wind chill in Celsius\n        double windChillIndex = 13.12 + (0.6215 * t) - (11.37 * Math.Pow(v, 0.16)) + (0.3965 * t * Math.Pow(v, 0.16));\n        \/\/ Round results to the nearest integer\n        return (long)Math.Round(windChillIndex);\n    }\n}\n```"}
{"name":"mbpp_639_sample_nam","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    public static long SampleNam(List<string> sample_names) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_639_sample_nam.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"sally\", (string)\"Dylan\", (string)\"rebecca\", (string)\"Diana\", (string)\"Joanne\", (string)\"keith\"}))) == (16L));\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"php\", (string)\"res\", (string)\"Python\", (string)\"abcd\", (string)\"Java\", (string)\"aaa\"}))) == (10L));\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"abcd\", (string)\"Python\", (string)\"abba\", (string)\"aba\"}))) == (6L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_639_sample_nam","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    public static long SampleNam(List<string> sample_names) {\n        \/\/ Filter names that do not start with a lowercase letter\n        var filteredNames = sample_names.Where(name => !char.IsLower(name[0])).ToList();\n        \n        \/\/ Sum the lengths of the filtered names\n        long totalLength = filteredNames.Sum(name => name.Length);\n        \n        return totalLength;\n    }\n}\n```"}
{"name":"mbpp_640_remove_parenthesis","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove the parenthesis and what is inbetween them from a string.\n    public static string RemoveParenthesis(List<string> items) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_640_remove_parenthesis.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"python (chrome)\"}))).Equals((\"python\")));\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"string(.abc)\"}))).Equals((\"string\")));\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"alpha(num)\"}))).Equals((\"alpha\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_640_remove_parenthesis","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to remove the parenthesis and what is in between them from a string.\n    public static string RemoveParenthesis(List<string> items) {\n        List<string> result = new List<string>();\n        \n        foreach (string item in items) {\n            int openParen = item.IndexOf('(');\n            while (openParen != -1) {\n                int closeParen = item.IndexOf(')', openParen);\n                if (closeParen == -1) break;\n\n                \/\/ Remove the parenthesis and the content between them\n                item = item.Remove(openParen, closeParen - openParen + 1);\n                openParen = item.IndexOf('(');\n            }\n            result.Add(item);\n        }\n        \n        return string.Join(\", \", result);\n    }\n}\n```\n\nExplanation: \n\n1. The function `RemoveParenthesis` takes a `List<string>` called `items`.\n2. An empty `List<string>` called `result` is initialized to store the strings after removing the parentheses and their content.\n3. The code loops through each string in the `items` list.\n4. Inside the loop, it searches for the first occurrence of an opening parenthesis `(`.\n5. If an `(` is found, it looks for the corresponding closing parenthesis `)`. If a closing parenthesis is found, it removes the portion of the string between and including the parentheses.\n6. This process continues until no more parentheses are found in the string.\n7. Each modified string is added to the `result` list.\n8. Finally, the function joins all the strings in the `result` list into a single string separated by a comma and a space and returns it."}
{"name":"mbpp_641_is_nonagonal","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the nth nonagonal number.\n    public static long IsNonagonal(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_641_is_nonagonal.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNonagonal((10L)) == (325L));\n    Debug.Assert(IsNonagonal((15L)) == (750L));\n    Debug.Assert(IsNonagonal((18L)) == (1089L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_641_is_nonagonal","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the nth nonagonal number.\n    public static long IsNonagonal(long n) {\n        if (n <= 0)\n            throw new ArgumentOutOfRangeException(\"n\", \"The input must be a positive integer.\");\n\n        \/\/ Nonagonal number formula: Nn = n(7n - 5) \/ 2\n        return n * (7 * n - 5) \/ 2;\n    }\n}\n```"}
{"name":"mbpp_643_text_match_wordz_middle","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    public static bool TextMatchWordzMiddle(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_643_text_match_wordz_middle.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchWordzMiddle((\"pythonzabc.\")) == (true));\n    Debug.Assert(TextMatchWordzMiddle((\"zxyabc.\")) == (false));\n    Debug.Assert(TextMatchWordzMiddle((\"  lang  .\")) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_643_text_match_wordz_middle","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function that checks if a string contains 'z', except at the start and end of the word.\n    public static bool TextMatchWordzMiddle(string text) {\n        if (string.IsNullOrEmpty(text)) {\n            return false;\n        }\n\n        \/\/ Check all characters except the first and last for 'z'\n        for (int i = 1; i < text.Length - 1; i++) {\n            if (text[i] == 'z' || text[i] == 'Z') {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```"}
{"name":"mbpp_644_reverse_Array_Upto_K","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to reverse a list upto a given position.\n    public static List<long> ReverseArrayUptoK(List<long> input, long k) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_644_reverse_Array_Upto_K.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (4L)).Equals((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L, (long)5L, (long)6L}))));\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)4L, (long)6L, (long)7L}))));\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)9L, (long)8L, (long)7L, (long)6L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)6L, (long)5L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_644_reverse_Array_Upto_K","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to reverse a list up to a given position.\n    public static List<long> ReverseArrayUptoK(List<long> input, long k) {\n        if (input == null) {\n            throw new ArgumentNullException(nameof(input), \"Input list cannot be null.\");\n        }\n\n        if (k > input.Count || k < 0) {\n            throw new ArgumentOutOfRangeException(nameof(k), \"k must be within the bounds of the input list.\");\n        }\n\n        List<long> result = new List<long>(input);\n        result.Reverse(0, (int)k);\n        return result;\n    }\n}\n```\n\nThis code defines a method `ReverseArrayUptoK` which takes a list of long integers and an integer `k` as input, and returns a new list where the elements from the start of the list up to the `k`th position have been reversed."}
{"name":"mbpp_720_add_dict_to_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to add a dictionary to the tuple. The output should be a tuple.\n    public static Tuple<long, long, long, Dictionary<string,long>> AddDictToTuple(Tuple<long, long, long> test_tup, Dictionary<string,long> test_dict) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_720_add_dict_to_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddDictToTuple((Tuple.Create(4L, 5L, 6L)), (new Dictionary<string,long>(){{\"MSAM\", 1L}, {\"is\", 2L}, {\"best\", 3L}})).Equals((Tuple.Create(4L, 5L, 6L, new Dictionary<string,long>(){{\"MSAM\", 1L}, {\"is\", 2L}, {\"best\", 3L}}))));\n    Debug.Assert(AddDictToTuple((Tuple.Create(1L, 2L, 3L)), (new Dictionary<string,long>(){{\"UTS\", 2L}, {\"is\", 3L}, {\"Worst\", 4L}})).Equals((Tuple.Create(1L, 2L, 3L, new Dictionary<string,long>(){{\"UTS\", 2L}, {\"is\", 3L}, {\"Worst\", 4L}}))));\n    Debug.Assert(AddDictToTuple((Tuple.Create(8L, 9L, 10L)), (new Dictionary<string,long>(){{\"POS\", 3L}, {\"is\", 4L}, {\"Okay\", 5L}})).Equals((Tuple.Create(8L, 9L, 10L, new Dictionary<string,long>(){{\"POS\", 3L}, {\"is\", 4L}, {\"Okay\", 5L}}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_720_add_dict_to_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to add a dictionary to the tuple. The output should be a tuple.\n    public static Tuple<long, long, long, Dictionary<string, long>> AddDictToTuple(Tuple<long, long, long> test_tup, Dictionary<string, long> test_dict) {\n        \/\/ Extract the values from the input tuple\n        long item1 = test_tup.Item1;\n        long item2 = test_tup.Item2;\n        long item3 = test_tup.Item3;\n\n        \/\/ Create a new tuple with the original tuple values and the dictionary\n        var newTuple = new Tuple<long, long, long, Dictionary<string, long>>(item1, item2, item3, test_dict);\n\n        return newTuple;\n    }\n}\n```"}
{"name":"mbpp_721_maxAverageOfPath","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_721_maxAverageOfPath.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_721_maxAverageOfPath","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    \/\/ A path is defined as a specific sequence of cells that starts from the top-left cell, \n    \/\/ moves only right or down, and ends on the bottom-right cell. \n    \/\/ We want to find a path with the maximum average over all existing paths. \n    \/\/ The average is computed as the total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost)\n    {\n        var n = cost.Count;\n        if (n == 0 || cost[0].Count != n) throw new ArgumentException(\"Input must be a non-empty square matrix.\");\n\n        \/\/ DP matrix to store the sum of the costs of the paths\n        long[,] dp = new long[n, n];\n\n        \/\/ Initialize the dp matrix with the initial cost\n        dp[0, 0] = cost[0][0];\n\n        \/\/ Fill the first row (can only come from the left)\n        for (int j = 1; j < n; j++)\n        {\n            dp[0, j] = dp[0, j - 1] + cost[0][j];\n        }\n\n        \/\/ Fill the first column (can only come from above)\n        for (int i = 1; i < n; i++)\n        {\n            dp[i, 0] = dp[i - 1, 0] + cost[i][0];\n        }\n\n        \/\/ Fill the rest of the dp matrix\n        for (int i = 1; i < n; i++)\n        {\n            for (int j = 1; j < n; j++)\n            {\n                dp[i, j] = Math.Max(dp[i - 1, j], dp[i, j - 1]) + cost[i][j];\n            }\n        }\n\n        \/\/ The path length from top-left to bottom-right in an N*N matrix\n        int pathLength = 2 * n - 1;\n\n        \/\/ Get the maximum sum path cost from top-left to bottom-right\n        long maxPathSum = dp[n - 1, n - 1];\n\n        \/\/ Calculate the average over the path\n        return (float)maxPathSum \/ pathLength;\n    }\n}\n```"}
{"name":"mbpp_722_filter_data","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    public static Dictionary<string,Tuple<float, long>> FilterData(Dictionary<string,Tuple<float, long>> students, float h, long w) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_722_filter_data.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (6.0f), (70L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}})));\n    Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (5.9f), (67L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}})));\n    Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (5.7f), (64L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}})));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_722_filter_data","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ The input is given as:\n    \/\/ - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    \/\/ - minimal height,\n    \/\/ - minimal weight.\n    \/\/ Write a function to filter students that have height and weight above the minimum.\n    public static Dictionary<string, Tuple<float, long>> FilterData(Dictionary<string, Tuple<float, long>> students, float minHeight, long minWeight) {\n        \/\/ Define a new dictionary to hold the filtered students\n        var filteredStudents = new Dictionary<string, Tuple<float, long>>();\n        \n        \/\/ Loop through each student in the input dictionary\n        foreach (var student in students) {\n            \/\/ Get the student's height and weight\n            var height = student.Value.Item1;\n            var weight = student.Value.Item2;\n            \n            \/\/ Check if both height and weight are above the minimum thresholds\n            if (height > minHeight && weight > minWeight) {\n                \/\/ Add the student to the filtered dictionary if they meet the criteria\n                filteredStudents[student.Key] = student.Value;\n            }\n        }\n        \n        \/\/ Return the filtered dictionary\n        return filteredStudents;\n    }\n}\n```"}
{"name":"mbpp_723_count_same_pair","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    public static long CountSamePair(List<long> nums1, List<long> nums2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_723_count_same_pair.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamePair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (4L));\n    Debug.Assert(CountSamePair((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)0L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (11L));\n    Debug.Assert(CountSamePair((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (1L));\n    Debug.Assert(CountSamePair((new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)2L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)2L}))) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_723_count_same_pair","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    public static long CountSamePair(List<long> nums1, List<long> nums2) {\n        if (nums1 == null || nums2 == null) {\n            throw new ArgumentNullException(\"Input lists cannot be null\");\n        }\n        if (nums1.Count != nums2.Count) {\n            throw new ArgumentException(\"Input lists must have the same length\");\n        }\n\n        long count = 0;\n        for (int i = 0; i < nums1.Count; i++) {\n            if (nums1[i] == nums2[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_724_power_base_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    public static long PowerBaseSum(long numBase, long power) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_724_power_base_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PowerBaseSum((2L), (100L)) == (115L));\n    Debug.Assert(PowerBaseSum((8L), (10L)) == (37L));\n    Debug.Assert(PowerBaseSum((8L), (15L)) == (62L));\n    Debug.Assert(PowerBaseSum((3L), (3L)) == (9L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_724_power_base_sum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    public static long PowerBaseSum(long numBase, long power) {\n        \/\/ Calculate the base raised to the power using BigInteger since the result can be very large\n        BigInteger result = BigInteger.Pow(numBase, (int)power);\n        \n        \/\/ Convert the result to a string to iterate over each digit\n        string resultString = result.ToString();\n        \n        \/\/ Sum the digits\n        long sumOfDigits = 0;\n        foreach (char digit in resultString) {\n            sumOfDigits += (digit - '0'); \/\/ Convert character to its numeric value\n        }\n        \n        \/\/ Return the sum of the digits\n        return sumOfDigits;\n    }\n}\n```\n\nThis code defines a method `PowerBaseSum` which takes a base and a power, calculates the base raised to the power using `BigInteger` to handle large numbers, converts the result to a string to easily iterate over each digit, sums the digits, and returns the sum."}
{"name":"mbpp_725_extract_quotation","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to extract values between quotation marks \" \" of the given string.\n    public static List<object> ExtractQuotation(string text1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_725_extract_quotation.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractQuotation((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")).Equals((new List<object>(new string[]{(string)\"A53\", (string)\"multi\", (string)\"Processor\"}))));\n    Debug.Assert(ExtractQuotation((\"Cast your \"favorite\" entertainment \"apps\"\")).Equals((new List<object>(new string[]{(string)\"favorite\", (string)\"apps\"}))));\n    Debug.Assert(ExtractQuotation((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")).Equals((new List<object>(new string[]{(string)\"4k Ultra HD\", (string)\"HDR 10\"}))));\n    Debug.Assert(ExtractQuotation((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")).Equals((new List<object>())));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_725_extract_quotation","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function to extract values between quotation marks \" \" of the given string.\n    public static List<string> ExtractQuotation(string text1) {\n        List<string> results = new List<string>();\n        Regex regex = new Regex(\"\\\"(.*?)\\\"\");\n        MatchCollection matches = regex.Matches(text1);\n        \n        foreach (Match match in matches) {\n            results.Add(match.Groups[1].Value);\n        }\n        \n        return results;\n    }\n}\n```"}
{"name":"mbpp_726_multiply_elements","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    public static List<object> MultiplyElements(List<long> test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_726_multiply_elements.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)8L, (long)10L}))).Equals((new List<object>(new long[]{(long)5L, (long)35L, (long)56L, (long)80L}))));\n    Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))).Equals((new List<object>(new long[]{(long)8L, (long)20L, (long)30L, (long)42L}))));\n    Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)12L, (long)13L, (long)14L, (long)9L, (long)15L}))).Equals((new List<object>(new long[]{(long)156L, (long)182L, (long)126L, (long)135L}))));\n    Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)12L}))).Equals((new List<object>())));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_726_multiply_elements","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    public static List<long> MultiplyElements(List<long> test_tup) {\n        List<long> result = new List<long>();\n\n        for (int i = 0; i < test_tup.Count - 1; i++) {\n            result.Add(test_tup[i] * test_tup[i + 1]);\n        }\n\n        return result;\n    }\n}\n```\n\nIn this code, the `MultiplyElements` method takes a list of long integers as input, multiplies each adjacent pair of elements in the list, and returns a new list containing the results. The method iterates through the input list, multiplies each element `t_i` by the next element `t_{i+1}`, and adds the result to the new list. This process continues until the second-to-last element of the input list."}
{"name":"mbpp_728_sum_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    public static List<long> SumList(List<long> lst1, List<long> lst2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_728_sum_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumList((new List<long>(new long[]{(long)10L, (long)20L, (long)30L})), (new List<long>(new long[]{(long)15L, (long)25L, (long)35L}))).Equals((new List<long>(new long[]{(long)25L, (long)45L, (long)65L}))));\n    Debug.Assert(SumList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)5L, (long)6L, (long)7L}))).Equals((new List<long>(new long[]{(long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(SumList((new List<long>(new long[]{(long)15L, (long)20L, (long)30L})), (new List<long>(new long[]{(long)15L, (long)45L, (long)75L}))).Equals((new List<long>(new long[]{(long)30L, (long)65L, (long)105L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_728_sum_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    public static List<long> SumList(List<long> lst1, List<long> lst2) {\n        if (lst1.Count != lst2.Count)\n            throw new ArgumentException(\"Both lists must have the same number of elements\");\n\n        List<long> result = new List<long>();\n\n        for (int i = 0; i < lst1.Count; i++) {\n            result.Add(lst1[i] + lst2[i]);\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_730_consecutive_duplicates","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove consecutive duplicates of a given list.\n    public static List<object> ConsecutiveDuplicates(List<object> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_730_consecutive_duplicates.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ConsecutiveDuplicates((new List<object>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))).Equals((new List<object>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L}))));\n    Debug.Assert(ConsecutiveDuplicates((new List<object>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))).Equals((new List<object>(new long[]{(long)10L, (long)15L, (long)19L, (long)18L, (long)17L, (long)26L, (long)17L, (long)18L, (long)10L}))));\n    Debug.Assert(ConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\"}))).Equals((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"}))));\n    Debug.Assert(ConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\", (string)\"a\", (string)\"a\"}))).Equals((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"a\"}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_730_consecutive_duplicates","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to remove consecutive duplicates of a given list.\n    public static List<object> ConsecutiveDuplicates(List<object> nums) {\n        if (nums == null || nums.Count == 0) {\n            return new List<object>();\n        }\n\n        List<object> result = new List<object>();\n        object previous = null;\n\n        foreach (var item in nums) {\n            if (item != previous) {\n                result.Add(item);\n                previous = item;\n            }\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_731_lateralsurface_cone","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the lateral surface area of a cone given radius r and the height h.\n    public static float LateralsurfaceCone(long r, long h) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_731_lateralsurface_cone.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LateralsurfaceCone((5L), (12L)) == (204.20352248333654f));\n    Debug.Assert(LateralsurfaceCone((10L), (15L)) == (566.3586699569488f));\n    Debug.Assert(LateralsurfaceCone((19L), (17L)) == (1521.8090132193388f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_731_lateralsurface_cone","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the lateral surface area of a cone given radius r and the height h.\n    public static double LateralSurfaceCone(long r, long h) {\n        \/\/ Calculate slant height using Pythagoras theorem\n        double slantHeight = Math.Sqrt(r * r + h * h);\n        \/\/ Lateral surface area of the cone = \u03c0 * r * slantHeight\n        return Math.PI * r * slantHeight;\n    }\n}\n```"}
{"name":"mbpp_732_replace_specialchar","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    public static string ReplaceSpecialchar(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_732_replace_specialchar.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceSpecialchar((\"Python language, Programming language.\")).Equals((\"Python:language::Programming:language:\")));\n    Debug.Assert(ReplaceSpecialchar((\"a b c,d e f\")).Equals((\"a:b:c:d:e:f\")));\n    Debug.Assert(ReplaceSpecialchar((\"ram reshma,ram rahim\")).Equals((\"ram:reshma:ram:rahim\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_732_replace_specialchar","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    public static string ReplaceSpecialchar(string text) {\n        \/\/ Replace spaces with a colon.\n        text = text.Replace(' ', ':');\n        \/\/ Replace commas with a colon.\n        text = text.Replace(',', ':');\n        \/\/ Replace dots with a colon.\n        text = text.Replace('.', ':');\n        \n        return text;\n    }\n}\n```\n\nThis small function `ReplaceSpecialchar` will take a string and replace all occurrences of spaces, commas, and dots with a colon as required by the docstring."}
{"name":"mbpp_733_find_first_occurrence","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the index of the first occurrence of a given number in a sorted list.\n    public static long FindFirstOccurrence(List<long> A, long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_733_find_first_occurrence.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)5L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (1L));\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (2L));\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (6L)) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_733_find_first_occurrence","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the index of the first occurrence of a given number in a sorted list.\n    public static long FindFirstOccurrence(List<long> A, long x) {\n        int left = 0;\n        int right = A.Count - 1;\n        int result = -1;\n        \n        while (left <= right) {\n            int middle = left + (right - left) \/ 2;\n            \n            if (A[middle] == x) {\n                result = middle; \/\/ found x, but continue to search for first occurrence\n                right = middle - 1;\n            } else if (A[middle] < x) {\n                left = middle + 1;\n            } else {\n                right = middle - 1;\n            }\n        }\n        \n        return result;\n    }\n}\n```\n\nThis code defines a function `FindFirstOccurrence` that uses binary search to find the index of the first occurrence of a given number `x` in a sorted list `A`. If the number is not found, it returns `-1`. This approach ensures that the function runs efficiently with a time complexity of \\(O(\\log n)\\)."}
{"name":"mbpp_734_sum_Of_Subarray_Prod","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find sum of products of all possible sublists of a given list. https:\/\/www.geeksforgeeks.org\/sum-of-products-of-all-possible-sublists\/\n    public static long SumOfSubarrayProd(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_734_sum_Of_Subarray_Prod.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_734_sum_Of_Subarray_Prod","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the sum of products of all possible sublists of a given list.\n    \/\/ https:\/\/www.geeksforgeeks.org\/sum-of-products-of-all-possible-sublists\/\n    public static long SumOfSubarrayProd(List<long> arr) {\n        int n = arr.Count;\n        long result = 0;\n\n        for (int i = 0; i < n; i++) {\n            long product = 1;\n            for (int j = i; j < n; j++) {\n                product *= arr[j];\n                result += product;\n            }\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_735_toggle_middle_bits","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to toggle bits of the number except the first and the last bit. https:\/\/www.geeksforgeeks.org\/toggle-bits-number-expect-first-last-bits\/\n    public static long ToggleMiddleBits(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_735_toggle_middle_bits.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ToggleMiddleBits((9L)) == (15L));\n    Debug.Assert(ToggleMiddleBits((10L)) == (12L));\n    Debug.Assert(ToggleMiddleBits((11L)) == (13L));\n    Debug.Assert(ToggleMiddleBits((65L)) == (127L));\n    Debug.Assert(ToggleMiddleBits((77L)) == (115L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_735_toggle_middle_bits","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csharp function to toggle bits of the number except the first and the last bit.\n    \/\/ https:\/\/www.geeksforgeeks.org\/toggle-bits-number-expect-first-last-bits\/\n    public static long ToggleMiddleBits(long n) {\n        \/\/ Count number of bits in the given number\n        int totalBits = (int)Math.Floor(Math.Log(n, 2)) + 1;\n        if (totalBits <= 2)\n            return n; \/\/ No bit to toggle if the number is less than 4 (including the case of 1 and 2 bits)\n\n        \/\/ Generate mask with all bits set to 1 of the length of the number.\n        long mask = (1L << totalBits) - 1;\n        \n        \/\/ Toggle all bits of n\n        long toggledAll = n ^ mask;\n        \n        \/\/ Create a mask to retain first and last bits\n        long resultMask = (1L << (totalBits - 1)) | 1L;\n        \n        \/\/ Combine the toggled number with the mask to restore first and last bits\n        long result = (toggledAll & ~resultMask) | (n & resultMask);\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_736_left_insertion","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to locate the left insertion point for a specified value in sorted order. https:\/\/www.w3resource.com\/csthon-exercises\/data-structures-and-algorithms\/csthon-data-structure-exercise-24.php\n    public static long LeftInsertion(List<long> a, long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_736_left_insertion.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_736_left_insertion","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to locate the left insertion point for a specified value in sorted order.\n    \/\/ https:\/\/www.w3resource.com\/csthon-exercises\/data-structures-and-algorithms\/csthon-data-structure-exercise-24.php\n    public static long LeftInsertion(List<long> a, long x) {\n        int left = 0;\n        int right = a.Count;\n\n        \/\/ Perform binary search to find the insertion point\n        while (left < right) {\n            int mid = (left + right) \/ 2;\n            if (a[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n\n        return left;\n    }\n}\n```"}
{"name":"mbpp_737_check_str","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given string is starting with a vowel or not using regex.\n    public static bool CheckStr(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_737_check_str.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckStr((\"annie\")) == (true));\n    Debug.Assert(CheckStr((\"dawood\")) == (false));\n    Debug.Assert(CheckStr((\"Else\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_737_check_str","gpt_solution":"```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function to check whether the given string is starting with a vowel or not using regex.\n    public static bool CheckStr(string str) {\n        if (string.IsNullOrEmpty(str)) {\n            return false;\n        }\n\n        \/\/ Define a regex pattern to match strings starting with a vowel (case insensitive)\n        string pattern = \"^[AEIOUaeiou]\";\n        Regex regex = new Regex(pattern);\n\n        \/\/ Return true if the string matches the pattern, otherwise false\n        return regex.IsMatch(str);\n    }\n}\n```"}
{"name":"mbpp_738_geometric_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to calculate the geometric sum of n-1. https:\/\/www.w3resource.com\/csthon-exercises\/data-structures-and-algorithms\/csthon-recursion-exercise-9.php\n    public static float GeometricSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_738_geometric_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GeometricSum((7L)) == (1.9921875f));\n    Debug.Assert(GeometricSum((4L)) == (1.9375f));\n    Debug.Assert(GeometricSum((8L)) == (1.99609375f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_738_geometric_sum","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to calculate the geometric sum of n-1. https:\/\/www.w3resource.com\/csthon-exercises\/data-structures-and-algorithms\/csthon-recursion-exercise-9.php\n    public static float GeometricSum(long n) {\n        \/\/ Base case: If n is 0, return 1 (2^0)\n        if (n == 0) {\n            return 1.0f;\n        }\n        \n        \/\/ Recursive case: 1 \/ 2^n + GeometricSum(n-1)\n        return 1.0f \/ (float)Math.Pow(2, n) + GeometricSum(n - 1);\n    }\n}\n```"}
{"name":"mbpp_739_find_Index","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the index of smallest triangular number with n digits. https:\/\/www.geeksforgeeks.org\/index-of-smallest-triangular-number-with-n-digits\/\n    public static long FindIndex(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_739_find_Index.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindIndex((2L)) == (4L));\n    Debug.Assert(FindIndex((3L)) == (14L));\n    Debug.Assert(FindIndex((4L)) == (45L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_739_find_Index","gpt_solution":"Sure! Here is the complete code to find the index of the smallest triangular number with `n` digits:\n\n```csharp\nusing System;\nusing System.Numerics;\n\nclass Problem {\n    \/\/ Function to find the index of smallest triangular number with n digits\n    public static long FindIndex(long n) {\n        \/\/ Lower bound of the number with n digits is 10^(n-1)\n        BigInteger lowerBound = BigInteger.Pow(10, (int)(n - 1));\n        \n        \/\/ Triangular number is given by T_k = k * (k + 1) \/ 2\n        \/\/ We need to solve the inequality k * (k + 1) \/ 2 >= 10^(n-1)\n        \/\/ Which gives us a quadratic equation k^2 + k - 2 * 10^(n-1) >= 0\n        \n        \/\/ Calculate the discriminant of the quadratic equation\n        BigInteger discriminant = 1 + 8 * lowerBound;\n        \n        \/\/ Calculate the square root of discriminant\n        BigInteger sqrtDiscriminant = Sqrt(discriminant);\n\n        \/\/ Calculate k from the quadratic formula\n        BigInteger k = (-1 + sqrtDiscriminant) \/ 2;\n        \n        \/\/ Return k as long\n        return (long)k;\n    }\n    \n    \/\/ Function to compute the square root of a BigInteger using binary search\n    private static BigInteger Sqrt(BigInteger number) {\n        if (number == 0) return 0;\n        if (number > 0) {\n            int bitLength = (int)Math.Ceiling(BigInteger.Log(number, 2));\n            BigInteger root = BigInteger.One << (bitLength \/ 2);\n\n            while (!IsSqrt(number, root)) {\n                root += number \/ root;\n                root \/= 2;\n            }\n\n            return root;\n        }\n\n        throw new ArithmeticException(\"NaN\");\n    }\n\n    \/\/ Helper function to check if root is the correct square root of number\n    private static bool IsSqrt(BigInteger number, BigInteger root) {\n        BigInteger lowerBound = root * root;\n        BigInteger upperBound = (root + 1) * (root + 1);\n\n        return (number >= lowerBound && number < upperBound);\n    }\n}\n```\n\nThis code defines a function `FindIndex` which computes the index of the smallest triangular number with `n` digits by solving a quadratic inequality and calculates the square root using a helper function for BigInteger. The `Main` function is not included, as per the requirements."}
{"name":"mbpp_740_tuple_to_dict","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https:\/\/www.geeksforgeeks.org\/csthon-convert-tuple-to-adjacent-pair-dictionary\/\n    public static Dictionary<long,long> TupleToDict(Tuple<long, long, long, long, long, long> test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_740_tuple_to_dict.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L))).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L))).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L))).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_740_tuple_to_dict","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    public static Dictionary<long, long> TupleToDict(Tuple<long, long, long, long, long, long> test_tup) {\n        Dictionary<long, long> result = new Dictionary<long, long>();\n        \n        \/\/ Ensure the tuple has pairs of elements to be used as key-value in the dictionary\n        if (test_tup != null) {\n            result[test_tup.Item1] = test_tup.Item2;\n            result[test_tup.Item3] = test_tup.Item4;\n            result[test_tup.Item5] = test_tup.Item6;\n        }\n\n        return result;\n    }\n}\n```"}
{"name":"mbpp_741_all_Characters_Same","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether all the characters are same or not.\n    public static bool AllCharactersSame(string s) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_741_all_Characters_Same.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllCharactersSame((\"python\")) == (false));\n    Debug.Assert(AllCharactersSame((\"aaa\")) == (true));\n    Debug.Assert(AllCharactersSame((\"data\")) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_741_all_Characters_Same","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csharp function to check whether all the characters are same or not.\n    public static bool AllCharactersSame(string s) {\n        if (string.IsNullOrEmpty(s)) {\n            throw new ArgumentException(\"Input string should not be null or empty.\");\n        }\n        \n        char firstChar = s[0];\n        foreach (char c in s) {\n            if (c != firstChar) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\nThis complete code includes the function `AllCharactersSame` which checks if all characters in the given string are the same. It also handles the case where the input string is null or empty by throwing an appropriate exception."}
{"name":"mbpp_742_area_tetrahedron","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to caluclate the area of a tetrahedron.\n    public static float AreaTetrahedron(long side) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_742_area_tetrahedron.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AreaTetrahedron((3L)) == (15.588457268119894f));\n    Debug.Assert(AreaTetrahedron((20L)) == (692.8203230275509f));\n    Debug.Assert(AreaTetrahedron((10L)) == (173.20508075688772f));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_742_area_tetrahedron","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to calculate the area of a tetrahedron.\n    public static float AreaTetrahedron(long side) {\n        \/\/ The formula for the surface area of a regular tetrahedron is: Area = a^2 * sqrt(3)\n        \/\/ where 'a' is the side length of the tetrahedron\n        return (float)(Math.Sqrt(3) * side * side);\n    }\n}\n```\n\nThis function computes the surface area of a regular tetrahedron given the length of its side. The formula used is `a^2 * sqrt(3)`, where `a` is the side length of the tetrahedron."}
{"name":"mbpp_743_rotate_right","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to rotate a given list by specified number of items to the right direction. https:\/\/www.geeksforgeeks.org\/csthon-program-right-rotate-list-n\/\n    public static List<long> RotateRight(List<long> list, long m) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_743_rotate_right.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (3L)).Equals((new List<long>(new long[]{(long)8L, (long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))));\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))));\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (5L)).Equals((new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_743_rotate_right","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to rotate a given list by specified number of items to the right direction. https:\/\/www.geeksforgeeks.org\/csthon-program-right-rotate-list-n\/\n    public static List<long> RotateRight(List<long> list, long m) {\n        int n = list.Count;\n        \n        \/\/ Normalize m in case it's bigger than the list size\n        m = m % n;\n        \n        \/\/ If m is zero, the list remains unchanged\n        if (m == 0) return list;\n        \n        \/\/ Rotating the list\n        List<long> rotatedList = new List<long>();\n\n        \/\/ Add the last m elements to the beginning\n        rotatedList.AddRange(list.Skip(n - (int)m));\n        \n        \/\/ Add the rest of the list\n        rotatedList.AddRange(list.Take(n - (int)m));\n        \n        return rotatedList;\n    }\n}\n```"}
{"name":"mbpp_744_check_none","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if the given tuple has any none value or not.\n    public static bool CheckNone(object test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_744_check_none.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckNone(Tuple.Create(10L, 4L, 5L, 6L, (Nullable<long>)null)) == (true));\n    Debug.Assert(CheckNone(Tuple.Create(7L, 8L, 9L, 11L, 14L)) == (false));\n    Debug.Assert(CheckNone(Tuple.Create(1L, 2L, 3L, 4L, (Nullable<long>)null)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_744_check_none","gpt_solution":"```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check if the given tuple has any none value or not.\n    public static bool CheckNone(object test_tup) {\n        \/\/ Check if the provided object is a tuple\n        if (test_tup is IStructuralComparable tuple) {\n            \/\/ Convert tuple to collection to iterate and check null values\n            foreach (var item in (tuple as IEnumerable)) {\n                if (item == null) {\n                    return true; \/\/ None (null) value found\n                }\n            }\n            return false; \/\/ No None (null) values found\n        } else {\n            throw new ArgumentException(\"The provided object is not a tuple\");\n        }\n    }\n}\n```"}
{"name":"mbpp_745_divisible_by_digits","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https:\/\/www.w3resource.com\/csthon-exercises\/lambda\/csthon-lambda-exercise-24.php\n    public static List<long> DivisibleByDigits(long startnum, long endnum) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_745_divisible_by_digits.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(DivisibleByDigits((1L), (22L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)11L, (long)12L, (long)15L, (long)22L}))));\n    Debug.Assert(DivisibleByDigits((1L), (15L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)11L, (long)12L, (long)15L}))));\n    Debug.Assert(DivisibleByDigits((20L), (25L)).Equals((new List<long>(new long[]{(long)22L, (long)24L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_745_divisible_by_digits","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Problem\n{\n    \/\/ Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. https:\/\/www.w3resource.com\/csthon-exercises\/lambda\/csthon-lambda-exercise-24.php\n    public static List<long> DivisibleByDigits(long startnum, long endnum)\n    {\n        \/\/ list to store numbers which satisfy the condition\n        List<long> resultList = new List<long>();\n\n        \/\/ iterate through each number in the range\n        for (long num = startnum; num <= endnum; num++)\n        {\n            if (IsDivisibleByDigits(num))\n            {\n                resultList.Add(num);\n            }\n        }\n\n        return resultList;\n    }\n\n    \/\/ helper function to check if a number is divisible by all its non-zero digits\n    private static bool IsDivisibleByDigits(long num)\n    {\n        long originalNum = num;\n\n        while (num > 0)\n        {\n            long digit = num % 10;\n            num \/= 10;\n\n            if (digit == 0 || originalNum % digit != 0)\n            {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n```"}
{"name":"mbpp_746_sector_area","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_746_sector_area.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_746_sector_area","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n        if (a > 360) {\n            return null;\n        }\n        \/\/ Area of a sector = (\u03b8 \/ 360) * \u03c0 * r\u00b2\n        float area = (float)(a \/ 360.0 * Math.PI * r * r);\n        return area;\n    }\n}\n```"}
{"name":"mbpp_747_lcs_of_three","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the longest common subsequence for the given three string sequence. https:\/\/www.geeksforgeeks.org\/lcs-longest-common-subsequence-three-strings\/\n    public static long LcsOfThree(string X, string Y, string Z) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_747_lcs_of_three.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_747_lcs_of_three","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the longest common subsequence for the given three string sequence.\n    \/\/ https:\/\/www.geeksforgeeks.org\/lcs-longest-common-subsequence-three-strings\/\n    public static int LcsOfThree(string X, string Y, string Z) {\n        int m = X.Length;\n        int n = Y.Length;\n        int o = Z.Length;\n\n        \/\/ Creating a 3D array to store the LCS lengths\n        int[,,] L = new int[m + 1, n + 1, o + 1];\n\n        \/\/ Filling the dp array\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                for (int k = 0; k <= o; k++) {\n                    if (i == 0 || j == 0 || k == 0) {\n                        L[i, j, k] = 0;\n                    } else if (X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1]) {\n                        L[i, j, k] = L[i - 1, j - 1, k - 1] + 1;\n                    } else {\n                        L[i, j, k] = Math.Max(Math.Max(L[i - 1, j, k], L[i, j - 1, k]), L[i, j, k - 1]);\n                    }\n                }\n            }\n        }\n\n        \/\/ L[m, n, o] contains the length of LCS for X[0..m\u20131], Y[0..n-1] and Z[0..o-1]\n        return L[m, n, o];\n    }\n}\n```"}
{"name":"mbpp_748_capital_words_spaces","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to put spaces between words starting with capital letters in a given string.\n    public static string CapitalWordsSpaces(string str1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_748_capital_words_spaces.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CapitalWordsSpaces((\"Python\")).Equals((\"Python\")));\n    Debug.Assert(CapitalWordsSpaces((\"PythonProgrammingExamples\")).Equals((\"Python Programming Examples\")));\n    Debug.Assert(CapitalWordsSpaces((\"GetReadyToBeCodingFreak\")).Equals((\"Get Ready To Be Coding Freak\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_748_capital_words_spaces","gpt_solution":"```csharp\nusing System;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to put spaces between words starting with capital letters in a given string.\n    public static string CapitalWordsSpaces(string str1) {\n        if (string.IsNullOrEmpty(str1)) {\n            return str1;\n        }\n\n        var result = new System.Text.StringBuilder();\n        result.Append(str1[0]); \/\/ Append first character as is\n\n        \/\/ Iterate through the string, starting from the second character\n        for (int i = 1; i < str1.Length; i++) {\n            \/\/ Check if the current character is uppercase and the previous character is lowercase\n            if (char.IsUpper(str1[i]) && char.IsLower(str1[i - 1])) {\n                result.Append(' '); \/\/ Insert a space before the capital letter\n            }\n            result.Append(str1[i]); \/\/ Append the current character\n        }\n\n        return result.ToString();\n    }\n}\n```"}
{"name":"mbpp_749_sort_numeric_strings","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to sort a given list of strings of numbers numerically. https:\/\/www.geeksforgeeks.org\/csthon-sort-numeric-strings-in-a-list\/\n    public static List<long> SortNumericStrings(List<string> nums_str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_749_sort_numeric_strings.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"4\", (string)\"12\", (string)\"45\", (string)\"7\", (string)\"0\", (string)\"100\", (string)\"200\", (string)\"-12\", (string)\"-500\"}))).Equals((new List<long>(new long[]{(long)-500L, (long)-12L, (long)0L, (long)4L, (long)7L, (long)12L, (long)45L, (long)100L, (long)200L}))));\n    Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"2\", (string)\"3\", (string)\"8\", (string)\"4\", (string)\"7\", (string)\"9\", (string)\"8\", (string)\"2\", (string)\"6\", (string)\"5\", (string)\"1\", (string)\"6\", (string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"6\", (string)\"9\", (string)\"1\", (string)\"2\"}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)8L, (long)9L, (long)9L}))));\n    Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"1\", (string)\"3\", (string)\"5\", (string)\"7\", (string)\"1\", (string)\"3\", (string)\"13\", (string)\"15\", (string)\"17\", (string)\"5\", (string)\"7 \", (string)\"9\", (string)\"1\", (string)\"11\"}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)3L, (long)3L, (long)5L, (long)5L, (long)7L, (long)7L, (long)9L, (long)11L, (long)13L, (long)15L, (long)17L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_749_sort_numeric_strings","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to sort a given list of strings of numbers numerically. https:\/\/www.geeksforgeeks.org\/csthon-sort-numeric-strings-in-a-list\/\n    public static List<long> SortNumericStrings(List<string> nums_str) {\n        \/\/ Convert the list of strings to a list of longs.\n        List<long> nums = nums_str.ConvertAll<long>(long.Parse);\n        \n        \/\/ Sort the list of longs.\n        nums.Sort();\n        \n        return nums;\n    }\n}\n```\n\nHere, the `SortNumericStrings` method takes a list of strings representing numbers, converts them to a list of long integers, sorts them numerically, and then returns the sorted list."}
{"name":"mbpp_750_add_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to add the given tuple to the given list.\n    public static List<long> AddTuple(List<long> test_list, Tuple<long, long> test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_750_add_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddTuple((new List<long>(new long[]{(long)5L, (long)6L, (long)7L})), (Tuple.Create(9L, 10L))).Equals((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)9L, (long)10L}))));\n    Debug.Assert(AddTuple((new List<long>(new long[]{(long)6L, (long)7L, (long)8L})), (Tuple.Create(10L, 11L))).Equals((new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)10L, (long)11L}))));\n    Debug.Assert(AddTuple((new List<long>(new long[]{(long)7L, (long)8L, (long)9L})), (Tuple.Create(11L, 12L))).Equals((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)11L, (long)12L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_750_add_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to add the given tuple to the given list.\n    public static List<long> AddTuple(List<long> test_list, Tuple<long, long> test_tup) {\n        \/\/ Add the items of the tuple to the list\n        test_list.Add(test_tup.Item1);\n        test_list.Add(test_tup.Item2);\n        \n        \/\/ Return the updated list\n        return test_list;\n    }\n}\n```"}
{"name":"mbpp_751_check_min_heap","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if the given list represents min heap or not. https:\/\/www.geeksforgeeks.org\/how-to-check-if-a-given-list-represents-a-binary-heap\/\n    public static bool CheckMinHeap(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_751_check_min_heap.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)10L, (long)15L}))) == (true));\n    Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)5L, (long)3L, (long)15L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_751_check_min_heap","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check if the given list represents min heap or not. https:\/\/www.geeksforgeeks.org\/how-to-check-if-a-given-list-represents-a-binary-heap\/\n    public static bool CheckMinHeap(List<long> arr) {\n        int n = arr.Count;\n        \n        \/\/ Check for each node i\n        for (int i = 0; i <= (n - 2) \/ 2; i++) {\n            \/\/ If left child is greater, return false\n            if (2 * i + 1 < n && arr[i] > arr[2 * i + 1])\n                return false;\n            \n            \/\/ If right child is greater, return false\n            if (2 * i + 2 < n && arr[i] > arr[2 * i + 2])\n                return false;\n        }\n        \n        \/\/ If all internal nodes are checked and satisfy min-heap property\n        return true;\n    }\n}\n```"}
{"name":"mbpp_752_jacobsthal_num","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the nth jacobsthal number. https:\/\/www.geeksforgeeks.org\/jacobsthal-and-jacobsthal-lucas-numbers\/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_752_jacobsthal_num.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_752_jacobsthal_num","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to find the nth jacobsthal number. https:\/\/www.geeksforgeeks.org\/jacobsthal-and-jacobsthal-lucas-numbers\/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n\n        long prev2 = 0; \/\/ J(0)\n        long prev1 = 1; \/\/ J(1)\n        long current = 0;\n\n        for (long i = 2; i <= n; i++) {\n            current = prev1 + 2 * prev2;\n            prev2 = prev1;\n            prev1 = current;\n        }\n\n        return current;\n    }\n}\n```"}
{"name":"mbpp_753_min_k","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find minimum k records from tuple list. https:\/\/www.geeksforgeeks.org\/csthon-find-minimum-k-records-from-tuple-list\/ - in this case a verbatim cocs of test cases\n    public static List<Tuple<string, long>> MinK(List<Tuple<string, long>> test_list, long K) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_753_min_k.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Manjeet\", 10L), (Tuple<string, long>)Tuple.Create(\"Akshat\", 4L), (Tuple<string, long>)Tuple.Create(\"Akash\", 2L), (Tuple<string, long>)Tuple.Create(\"Nikhil\", 8L)})), (2L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Akash\", 2L), (Tuple<string, long>)Tuple.Create(\"Akshat\", 4L)}))));\n    Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Sanjeev\", 11L), (Tuple<string, long>)Tuple.Create(\"Angat\", 5L), (Tuple<string, long>)Tuple.Create(\"Akash\", 3L), (Tuple<string, long>)Tuple.Create(\"Nepin\", 9L)})), (3L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Akash\", 3L), (Tuple<string, long>)Tuple.Create(\"Angat\", 5L), (Tuple<string, long>)Tuple.Create(\"Nepin\", 9L)}))));\n    Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"tanmay\", 14L), (Tuple<string, long>)Tuple.Create(\"Amer\", 11L), (Tuple<string, long>)Tuple.Create(\"Ayesha\", 9L), (Tuple<string, long>)Tuple.Create(\"SKD\", 16L)})), (1L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Ayesha\", 9L)}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_753_min_k","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find minimum k records from tuple list. https:\/\/www.geeksforgeeks.org\/csthon-find-minimum-k-records-from-tuple-list\/\n    public static List<Tuple<string, long>> MinK(List<Tuple<string, long>> test_list, long K) {\n        \/\/ Sort the list based on the second item of the tuple (i.e., the long value)\n        var sortedList = test_list.OrderBy(t => t.Item2).ToList();\n        \n        \/\/ Take the first K elements from the sorted list\n        return sortedList.Take((int) K).ToList();\n    }\n}\n```"}
{"name":"mbpp_754_extract_index_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    public static List<object> ExtractIndexList(List<long> l1, List<long> l2, List<long> l3) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_754_extract_index_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)7L}))));\n    Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)5L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)6L}))));\n    Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)6L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)5L}))));\n    Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)6L, (long)6L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>())));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_754_extract_index_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    \/\/ Write a function to find common elements from three lists. The function should return a list.\n    public static List<object> ExtractIndexList(List<long> l1, List<long> l2, List<long> l3) {\n        List<object> commonElements = new List<object>();\n\n        \/\/ Ensure all lists have the same size; otherwise, we can't compare elements at the same indices.\n        if (l1.Count != l2.Count || l1.Count != l3.Count) {\n            throw new ArgumentException(\"All three lists must have the same number of elements.\");\n        }\n\n        for (int i = 0; i < l1.Count; i++) {\n            if (l1[i] == l2[i] && l1[i] == l3[i]) {\n                commonElements.Add(l1[i]);\n            }\n        }\n\n        return commonElements;\n    }\n}\n```"}
{"name":"mbpp_756_text_match_zero_one","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that matches a string that has an 'a' followed by one or more 'b's. https:\/\/www.w3resource.com\/csthon-exercises\/re\/csthon-re-exercise-3.php\n    public static bool TextMatchZeroOne(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_756_text_match_zero_one.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchZeroOne((\"ac\")) == (false));\n    Debug.Assert(TextMatchZeroOne((\"dc\")) == (false));\n    Debug.Assert(TextMatchZeroOne((\"abbbba\")) == (true));\n    Debug.Assert(TextMatchZeroOne((\"dsabbbba\")) == (true));\n    Debug.Assert(TextMatchZeroOne((\"asbbbba\")) == (false));\n    Debug.Assert(TextMatchZeroOne((\"abaaa\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_756_text_match_zero_one","gpt_solution":"```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function that matches a string that has an 'a' followed by one or more 'b's. https:\/\/www.w3resource.com\/csharp-exercises\/re\/csharp-re-exercise-3.php\n    public static bool TextMatchZeroOne(string text) {\n        \/\/ Regex pattern to match 'a' followed by one or more 'b's\n        string pattern = @\"ab+\";\n        \n        \/\/ Match the pattern with the input text\n        Regex regex = new Regex(pattern);\n        return regex.IsMatch(text);\n    }\n}\n```"}
{"name":"mbpp_757_count_reverse_pairs","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count the pairs of reverse strings in the given string list. https:\/\/www.geeksforgeeks.org\/csthon-program-to-count-the-pairs-of-reverse-strings\/\n    public static long CountReversePairs(List<string> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_757_count_reverse_pairs.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"julia\", (string)\"best\", (string)\"tseb\", (string)\"for\", (string)\"ailuj\"}))) == (2L));\n    Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"geeks\", (string)\"best\", (string)\"for\", (string)\"skeeg\"}))) == (1L));\n    Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"makes\", (string)\"best\", (string)\"sekam\", (string)\"for\", (string)\"rof\"}))) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_757_count_reverse_pairs","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to count the pairs of reverse strings in the given string list.\n    \/\/ https:\/\/www.geeksforgeeks.org\/csthon-program-to-count-the-pairs-of-reverse-strings\/\n    public static long CountReversePairs(List<string> test_list) {\n        long count = 0;\n        HashSet<string> seen = new HashSet<string>();\n\n        foreach (string str in test_list) {\n            string reversedStr = new string(str.Reverse().ToArray());\n\n            if (seen.Contains(reversedStr)) {\n                count++;\n                seen.Remove(reversedStr); \/\/ To avoid double counting\n            } else {\n                seen.Add(str);\n            }\n        }\n\n        return count;\n    }\n}\n```"}
{"name":"mbpp_759_is_decimal","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether a given string is a decimal number with a precision of 2.\n    public static bool IsDecimal(string num) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_759_is_decimal.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsDecimal((\"123.11\")) == (true));\n    Debug.Assert(IsDecimal((\"e666.86\")) == (false));\n    Debug.Assert(IsDecimal((\"3.124587\")) == (false));\n    Debug.Assert(IsDecimal((\"1.11\")) == (true));\n    Debug.Assert(IsDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_759_is_decimal","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether a given string is a decimal number with a precision of 2.\n    public static bool IsDecimal(string num) {\n        if (string.IsNullOrEmpty(num))\n            return false;\n\n        \/\/ Split the number by the decimal point\n        string[] parts = num.Split('.');\n\n        \/\/ There must be exactly one '.' character\n        if (parts.Length != 2)\n            return false;\n\n        \/\/ Check if both parts are numeric\n        if (!IsNumeric(parts[0]) || !IsNumeric(parts[1]))\n            return false;\n\n        \/\/ The part after the decimal point must be exactly 2 digits\n        if (parts[1].Length != 2)\n            return false;\n\n        return true;\n    }\n\n    private static bool IsNumeric(string str) {\n        \/\/ Return false if the string is null or empty\n        if (string.IsNullOrEmpty(str))\n            return false;\n\n        foreach (char c in str) {\n            if (!char.IsDigit(c))\n                return false;\n        }\n\n        return true;\n    }\n}\n```"}
{"name":"mbpp_760_unique_Element","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether a list of numbers contains only one distinct element or not.\n    public static bool UniqueElement(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_760_unique_Element.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))) == (true));\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_760_unique_Element","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csharp function to check whether a list of numbers contains only one distinct element or not.\n    public static bool UniqueElement(List<long> arr) {\n        if(arr == null || arr.Count == 0) {\n            return false;\n        }\n        \n        long firstElement = arr[0];\n        foreach (long element in arr) {\n            if (element != firstElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_762_check_monthnumber_number","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    public static bool CheckMonthnumberNumber(long monthnum3) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_762_check_monthnumber_number.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckMonthnumberNumber((6L)) == (true));\n    Debug.Assert(CheckMonthnumberNumber((2L)) == (false));\n    Debug.Assert(CheckMonthnumberNumber((12L)) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_762_check_monthnumber_number","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    public static bool CheckMonthnumberNumber(long monthnum3) {\n        \/\/ List of months that have 30 days: April, June, September, November\n        \/\/ Corresponding month numbers: 4, 6, 9, 11\n        int[] monthsWith30Days = {4, 6, 9, 11};\n\n        if (monthnum3 < 1 || monthnum3 > 12) {\n            throw new ArgumentOutOfRangeException(nameof(monthnum3), \"Month number must be between 1 and 12.\");\n        }\n\n        return Array.Exists(monthsWith30Days, month => month == monthnum3);\n    }\n}\n```"}
{"name":"mbpp_763_find_min_diff","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the minimum difference between any two elements in a given list. https:\/\/www.geeksforgeeks.org\/find-minimum-difference-pair\/\n    public static long FindMinDiff(List<long> arr, long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_763_find_min_diff.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)19L, (long)18L, (long)25L})), (6L)) == (1L));\n    Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)6L})), (4L)) == (1L));\n    Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)30L, (long)5L, (long)20L, (long)9L})), (4L)) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_763_find_min_diff","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the minimum difference between any two elements in a given list. \n    \/\/ https:\/\/www.geeksforgeeks.org\/find-minimum-difference-pair\/\n    public static long FindMinDiff(List<long> arr, long n) {\n        if (n < 2) {\n            \/\/ If there are less than 2 elements, there's no pair to compare.\n            return -1;\n        }\n        \n        \/\/ Sort the array\n        arr.Sort();\n        \n        \/\/ Initialize the minimum difference as a large number\n        long minDiff = long.MaxValue;\n        \n        \/\/ Find the adjacent differences and update the minimum difference\n        for (int i = 1; i < n; i++) {\n            long diff = arr[i] - arr[i - 1];\n            if (diff < minDiff) {\n                minDiff = diff;\n            }\n        }\n        \n        return minDiff;\n    }\n}\n```"}
{"name":"mbpp_764_number_ctr","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count number of digits in a given string.\n    public static long NumberCtr(string str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_764_number_ctr.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumberCtr((\"program2bedone\")) == (1L));\n    Debug.Assert(NumberCtr((\"3wonders\")) == (1L));\n    Debug.Assert(NumberCtr((\"123\")) == (3L));\n    Debug.Assert(NumberCtr((\"3wond-1ers2\")) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_764_number_ctr","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csharp function to count number of digits in a given string.\n    public static long NumberCtr(string str) {\n        long count = 0;\n        foreach (char c in str) {\n            if (char.IsDigit(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n```"}
{"name":"mbpp_765_is_polite","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find nth polite number. geeksforgeeks.org\/n-th-polite-number\/\n    public static long IsPolite(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_765_is_polite.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPolite((7L)) == (11L));\n    Debug.Assert(IsPolite((4L)) == (7L));\n    Debug.Assert(IsPolite((9L)) == (13L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_765_is_polite","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find nth polite number. geeksforgeeks.org\/n-th-polite-number\/\n    public static long IsPolite(long n) {\n        List<long> politeNumbers = new List<long>();\n        long currentNumber = 1;\n\n        while (politeNumbers.Count < n) {\n            if (!IsPowerOfTwo(currentNumber)) {\n                politeNumbers.Add(currentNumber);\n            }\n            currentNumber++;\n        }\n\n        return politeNumbers[n - 1];\n    }\n\n    \/\/ Helper function to check if a number is a power of two\n    private static bool IsPowerOfTwo(long x) {\n        return (x & (x - 1)) == 0;\n    }\n}\n```\n\nThis implementation defines a method `IsPolite` that calculates the nth polite number by iterating over natural numbers and collecting those that are not powers of two. The method `IsPowerOfTwo` is a helper method that checks if a given number is a power of two."}
{"name":"mbpp_766_pair_wise","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to return a list of all pairs of consecutive items in a given list.\n    public static List<Tuple<long, long>> PairWise(List<long> l1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_766_pair_wise.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(3L, 3L), (Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(4L, 4L), (Tuple<long, long>)Tuple.Create(4L, 5L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 5L), (Tuple<long, long>)Tuple.Create(5L, 7L), (Tuple<long, long>)Tuple.Create(7L, 9L), (Tuple<long, long>)Tuple.Create(9L, 10L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)5L, (long)1L, (long)9L, (long)7L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 1L), (Tuple<long, long>)Tuple.Create(1L, 9L), (Tuple<long, long>)Tuple.Create(9L, 7L), (Tuple<long, long>)Tuple.Create(7L, 10L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(4L, 5L), (Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(6L, 7L), (Tuple<long, long>)Tuple.Create(7L, 8L), (Tuple<long, long>)Tuple.Create(8L, 9L), (Tuple<long, long>)Tuple.Create(9L, 10L)}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_766_pair_wise","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to return a list of all pairs of consecutive items in a given list.\n    public static List<Tuple<long, long>> PairWise(List<long> l1) {\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i < l1.Count - 1; i++) {\n            result.Add(new Tuple<long, long>(l1[i], l1[i + 1]));\n        }\n        return result;\n    }\n}\n```"}
{"name":"mbpp_767_get_pairs_count","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_767_get_pairs_count.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_767_get_pairs_count","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n        \/\/ Dictionary to store the frequency of elements\n        Dictionary<long, long> freq = new Dictionary<long, long>();\n        long pairsCount = 0;\n        \n        \/\/ Traverse through each element in the array and calculate the pairs\n        foreach(long number in arr) {\n            \/\/ Check if there is a number which can be paired with current number to get the sum\n            long complement = sum - number;\n            if (freq.ContainsKey(complement)) {\n                pairsCount += freq[complement];\n            }\n            \n            \/\/ Add the current number to the frequency dictionary\n            if (freq.ContainsKey(number)) {\n                freq[number]++;\n            } else {\n                freq[number] = 1;\n            }\n        }\n\n        return pairsCount;\n    }\n}\n```"}
{"name":"mbpp_769_Diff","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to get the difference between two lists.\n    public static List<long> Diff(List<long> li1, List<long> li2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_769_Diff.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Diff((new List<long>(new long[]{(long)10L, (long)15L, (long)20L, (long)25L, (long)30L, (long)35L, (long)40L})), (new List<long>(new long[]{(long)25L, (long)40L, (long)35L}))).Equals((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)15L}))));\n    Debug.Assert(Diff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))));\n    Debug.Assert(Diff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_769_Diff","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csthon function to get the difference between two lists.\n    public static List<long> Diff(List<long> li1, List<long> li2) {\n        HashSet<long> set2 = new HashSet<long>(li2);\n        List<long> result = new List<long>();\n\n        foreach(long item in li1) {\n            if(!set2.Contains(item)) {\n                result.Add(item);\n            }\n        }\n\n        return result;\n    }\n}\n```\n\nThis code defines a `Diff` function that takes two lists of long integers and returns a new list containing the elements that are in the first list but not in the second list. The use of a `HashSet` helps optimize the lookup operations."}
{"name":"mbpp_770_odd_num_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of fourth power of first n odd natural numbers.\n    public static long OddNumSum(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_770_odd_num_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddNumSum((2L)) == (82L));\n    Debug.Assert(OddNumSum((3L)) == (707L));\n    Debug.Assert(OddNumSum((4L)) == (3108L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_770_odd_num_sum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csthon function to find the sum of fourth power of first n odd natural numbers.\n    public static long OddNumSum(long n) {\n        long sum = 0;\n        long oddNumber = 1;\n        for(long i = 0; i < n; i++) {\n            sum += (long)Math.Pow(oddNumber, 4);\n            oddNumber += 2;  \/\/ increment to the next odd number\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_771_check_expression","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if the given expression is balanced or not. https:\/\/www.geeksforgeeks.org\/check-for-balanced-parentheses-in-an-expression\/\n    public static bool CheckExpression(string exp) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_771_check_expression.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckExpression((\"{()}[{}]\")) == (true));\n    Debug.Assert(CheckExpression((\"{()}[{]\")) == (false));\n    Debug.Assert(CheckExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_771_check_expression","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check if the given expression is balanced or not. https:\/\/www.geeksforgeeks.org\/check-for-balanced-parentheses-in-an-expression\/\n    public static bool CheckExpression(string exp) {\n        Stack<char> stack = new Stack<char>();\n\n        foreach (char ch in exp) {\n            if (ch == '(' || ch == '{' || ch == '[') {\n                stack.Push(ch);\n            } else if (ch == ')' || ch == '}' || ch == ']') {\n                if (stack.Count == 0) {\n                    return false;\n                }\n\n                char top = stack.Pop();\n\n                if ((ch == ')' && top != '(') ||\n                    (ch == '}' && top != '{') ||\n                    (ch == ']' && top != '[')) {\n                    return false;\n                }\n            }\n        }\n\n        return stack.Count == 0;\n    }\n}\n```"}
{"name":"mbpp_772_remove_length","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove all the words with k length in the given string.\n    public static string RemoveLength(string test_str, long K) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_772_remove_length.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveLength((\"The person is most value tet\"), (3L)).Equals((\"person is most value\")));\n    Debug.Assert(RemoveLength((\"If you told me about this ok\"), (4L)).Equals((\"If you me about ok\")));\n    Debug.Assert(RemoveLength((\"Forces of darkeness is come into the play\"), (4L)).Equals((\"Forces of darkeness is the\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_772_remove_length","gpt_solution":"```csharp\nusing System;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to remove all the words with k length in the given string.\n    public static string RemoveLength(string test_str, long K) {\n        \/\/ Split the input string into an array of words\n        string[] words = test_str.Split(new char[] { ' ', '\\t', '\\n', '\\r' }, StringSplitOptions.RemoveEmptyEntries);\n        \n        \/\/ Select words that do not match the length K\n        var filteredWords = words.Where(word => word.Length != K);\n        \n        \/\/ Join the filtered words back into a single string\n        string result = string.Join(\" \", filteredWords);\n        \n        return result;\n    }\n}\n```\n\nThis code defines a method named `RemoveLength` that removes all words of length `K` from the input string `test_str`. It splits the input string into words, filters out those words that do not have the specified length `K`, and then joins the remaining words back into a single string with spaces in between."}
{"name":"mbpp_773_occurance_substring","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\n    public static Tuple<string, long, long> OccuranceSubstring(string text, string pattern) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_773_occurance_substring.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OccuranceSubstring((\"python programming, python language\"), (\"python\")).Equals((Tuple.Create(\"python\", 0L, 6L))));\n    Debug.Assert(OccuranceSubstring((\"python programming,programming language\"), (\"programming\")).Equals((Tuple.Create(\"programming\", 7L, 18L))));\n    Debug.Assert(OccuranceSubstring((\"python programming,programming language\"), (\"language\")).Equals((Tuple.Create(\"language\", 31L, 39L))));\n    Debug.Assert(OccuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).Equals(null));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_773_occurance_substring","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\n    public static List<Tuple<string, long, long>> OccurrenceSubstring(string text, string pattern) {\n        var result = new List<Tuple<string, long, long>>();\n        int index = 0;\n        while ((index = text.IndexOf(pattern, index)) != -1) {\n            result.Add(Tuple.Create(pattern, (long)index, (long)(index + pattern.Length - 1)));\n            index += pattern.Length;\n        }\n        return result.Count > 0 ? result : null;\n    }\n}\n```"}
{"name":"mbpp_775_odd_position","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_775_odd_position.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_775_odd_position","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a C# function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n        for (int i = 1; i < nums.Count; i += 2) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_776_count_vowels","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to count those characters which have vowels as their neighbors in the given string.\n    public static long CountVowels(string test_str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_776_count_vowels.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountVowels((\"bestinstareels\")) == (7L));\n    Debug.Assert(CountVowels((\"partofthejourneyistheend\")) == (12L));\n    Debug.Assert(CountVowels((\"amazonprime\")) == (5L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_776_count_vowels","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to count those characters which have vowels as their neighbors in the given string.\n    public static long CountVowels(string test_str) {\n        if (string.IsNullOrEmpty(test_str) || test_str.Length < 3) {\n            return 0;\n        }\n\n        HashSet<char> vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };\n        long count = 0;\n\n        for (int i = 1; i < test_str.Length - 1; i++) {\n            if (vowels.Contains(test_str[i - 1]) && vowels.Contains(test_str[i + 1])) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n}\n```"}
{"name":"mbpp_777_find_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of non-repeated elements in a given list.\n    public static long FindSum(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_777_find_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L, (long)1L, (long)4L, (long)5L, (long)6L}))) == (21L));\n    Debug.Assert(FindSum((new List<long>(new long[]{(long)1L, (long)10L, (long)9L, (long)4L, (long)2L, (long)10L, (long)10L, (long)45L, (long)4L}))) == (71L));\n    Debug.Assert(FindSum((new List<long>(new long[]{(long)12L, (long)10L, (long)9L, (long)45L, (long)2L, (long)10L, (long)10L, (long)45L, (long)10L}))) == (78L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_777_find_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Problem {\n    \/\/ Write a function to find the sum of non-repeated elements in a given list.\n    public static long FindSum(List<long> arr) {\n        \/\/ Dictionary to keep track of the count of each element\n        Dictionary<long, int> elementCount = new Dictionary<long, int>();\n\n        \/\/ Count the occurrences of each element in the list\n        foreach (long element in arr) {\n            if (elementCount.ContainsKey(element)) {\n                elementCount[element]++;\n            } else {\n                elementCount[element] = 1;\n            }\n        }\n\n        \/\/ Sum up the elements that appear only once\n        long sum = 0;\n        foreach (var pair in elementCount) {\n            if (pair.Value == 1) {\n                sum += pair.Key;\n            }\n        }\n\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_778_pack_consecutive_duplicates","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to pack consecutive duplicates of a given list elements into sublists.\n    public static List<List<object>> PackConsecutiveDuplicates(List<object> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_778_pack_consecutive_duplicates.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(PackConsecutiveDuplicates((new List<object>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L}), (List<long>)new List<long>(new long[]{(long)8L}), (List<long>)new List<long>(new long[]{(long)9L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L})}))));\n    Debug.Assert(PackConsecutiveDuplicates((new List<object>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)10L, (long)10L}), (List<long>)new List<long>(new long[]{(long)15L}), (List<long>)new List<long>(new long[]{(long)19L}), (List<long>)new List<long>(new long[]{(long)18L, (long)18L}), (List<long>)new List<long>(new long[]{(long)17L}), (List<long>)new List<long>(new long[]{(long)26L, (long)26L}), (List<long>)new List<long>(new long[]{(long)17L}), (List<long>)new List<long>(new long[]{(long)18L}), (List<long>)new List<long>(new long[]{(long)10L})}))));\n    Debug.Assert(PackConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\"}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"a\"}), (List<string>)new List<string>(new string[]{(string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"d\"})}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_778_pack_consecutive_duplicates","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to pack consecutive duplicates of a given list elements into sublists.\n    public static List<List<object>> PackConsecutiveDuplicates(List<object> list1) {\n        List<List<object>> result = new List<List<object>>();\n        \n        if (list1 == null || list1.Count == 0) {\n            return result;\n        }\n        \n        List<object> tempList = new List<object>();\n        tempList.Add(list1[0]);\n        \n        for (int i = 1; i < list1.Count; i++) {\n            if (list1[i].Equals(list1[i - 1])) {\n                tempList.Add(list1[i]);\n            } else {\n                result.Add(tempList);\n                tempList = new List<object>();\n                tempList.Add(list1[i]);\n            }\n        }\n        \n        \/\/ Add the last sublist\n        result.Add(tempList);\n        \n        return result;\n    }\n}\n```"}
{"name":"mbpp_780_find_combinations","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the combinations of sums with tuples in the given tuple list. https:\/\/www.geeksforgeeks.org\/csthon-combinations-of-sum-with-tuples-in-tuple-list\/\n    public static List<Tuple<long, long>> FindCombinations(List<Tuple<long, long>> test_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_780_find_combinations.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 4L), (Tuple<long, long>)Tuple.Create(6L, 7L), (Tuple<long, long>)Tuple.Create(5L, 1L), (Tuple<long, long>)Tuple.Create(6L, 10L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(8L, 11L), (Tuple<long, long>)Tuple.Create(7L, 5L), (Tuple<long, long>)Tuple.Create(8L, 14L), (Tuple<long, long>)Tuple.Create(11L, 8L), (Tuple<long, long>)Tuple.Create(12L, 17L), (Tuple<long, long>)Tuple.Create(11L, 11L)}))));\n    Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 5L), (Tuple<long, long>)Tuple.Create(7L, 8L), (Tuple<long, long>)Tuple.Create(6L, 2L), (Tuple<long, long>)Tuple.Create(7L, 11L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 13L), (Tuple<long, long>)Tuple.Create(9L, 7L), (Tuple<long, long>)Tuple.Create(10L, 16L), (Tuple<long, long>)Tuple.Create(13L, 10L), (Tuple<long, long>)Tuple.Create(14L, 19L), (Tuple<long, long>)Tuple.Create(13L, 13L)}))));\n    Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 6L), (Tuple<long, long>)Tuple.Create(8L, 9L), (Tuple<long, long>)Tuple.Create(7L, 3L), (Tuple<long, long>)Tuple.Create(8L, 12L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(12L, 15L), (Tuple<long, long>)Tuple.Create(11L, 9L), (Tuple<long, long>)Tuple.Create(12L, 18L), (Tuple<long, long>)Tuple.Create(15L, 12L), (Tuple<long, long>)Tuple.Create(16L, 21L), (Tuple<long, long>)Tuple.Create(15L, 15L)}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_780_find_combinations","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    public static List<Tuple<long, long>> FindCombinations(List<Tuple<long, long>> test_list) {\n        \/\/ Dictionary to store sum with corresponding Tuple (pair)\n        Dictionary<long, List<Tuple<long, long>>> sums = new Dictionary<long, List<Tuple<long, long>>>();\n\n        \/\/ List to store the result Tuples\n        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\n        \/\/ Iterate over each pair in the test list\n        foreach (Tuple<long, long> item in test_list) {\n            long a = item.Item1;\n            long b = item.Item2;\n\n            \/\/ Find all possible sums with existing pairs in the dictionary\n            foreach (var kvp in sums) {\n                long current_sum = kvp.Key;\n                List<Tuple<long, long>> pairs = kvp.Value;\n\n                long new_sum = current_sum + a;\n                if (!sums.ContainsKey(new_sum)) {\n                    sums[new_sum] = new List<Tuple<long, long>>();\n                }\n\n                foreach (Tuple<long, long> pair in pairs) {\n                    sums[new_sum].Add(new Tuple<long, long>(pair.Item1, a));\n                }\n            }\n\n            \/\/ Add the current pair to the dictionary\n            if (!sums.ContainsKey(a)) {\n                sums[a] = new List<Tuple<long, long>>();\n            }\n            sums[a].Add(new Tuple<long, long>(a, b));\n\n            if (!sums.ContainsKey(b)) {\n                sums[b] = new List<Tuple<long, long>>();\n            }\n            sums[b].Add(new Tuple<long, long>(b, a));\n        }\n\n        \/\/ Flatten the dictionary to get only the result Tuples\n        foreach (var kvp in sums) {\n            foreach (Tuple<long, long> pair in kvp.Value) {\n                result.Add(pair);\n            }\n        }\n\n        return result;\n    }\n}\n```\n\nThis code defines the `FindCombinations` method which processes a list of tuples and finds all possible combinations of sums within the given list."}
{"name":"mbpp_781_count_divisors","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether the count of divisors is even. https:\/\/www.w3resource.com\/csthon-exercises\/basic\/csthon-basic-1-exercise-24.php\n    public static bool CountDivisors(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_781_count_divisors.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDivisors((10L)) == (true));\n    Debug.Assert(CountDivisors((100L)) == (false));\n    Debug.Assert(CountDivisors((125L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_781_count_divisors","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a csthon function to check whether the count of divisors is even. https:\/\/www.w3resource.com\/csthon-exercises\/basic\/csthon-basic-1-exercise-24.php\n    public static bool CountDivisors(long n) {\n        if (n < 1) \n            throw new ArgumentException(\"Input must be a positive integer.\");\n        \n        int count = 0;\n\n        for (long i = 1; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n                if (i * i == n) \n                    count += 1; \/\/ Perfect square\n                else \n                    count += 2; \/\/ Pair of divisors\n            }\n        }\n\n        return count % 2 == 0;\n    }\n}\n```"}
{"name":"mbpp_782_odd_length_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of all odd length sublists. https:\/\/www.geeksforgeeks.org\/sum-of-all-odd-length-sublists\/\n    public static long OddLengthSum(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_782_odd_length_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)2L, (long)4L}))) == (14L));\n    Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (15L));\n    Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)7L}))) == (8L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_782_odd_length_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csthon function to find the sum of all odd length sublists. https:\/\/www.geeksforgeeks.org\/sum-of-all-odd-length-sublists\/\n    public static long OddLengthSum(List<long> arr) {\n        long totalSum = 0;\n        int n = arr.Count;\n        \n        \/\/ Iterate over each element of the list\n        for (int i = 0; i < n; i++) {\n            \/\/ Calculate the number of sublists in which arr[i] will appear\n            int end = i + 1;\n            int start = n - i;\n            int totalSubarrays = start * end;\n\n            \/\/ Only consider the subarrays of odd lengths\n            int oddSubarrays = (totalSubarrays + 1) \/ 2;\n\n            \/\/ Add the contribution of arr[i] in all odd length sublists\n            totalSum += arr[i] * oddSubarrays;\n        }\n\n        return totalSum;\n    }\n}\n```"}
{"name":"mbpp_783_rgb_to_hsv","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert rgb color to hsv color. https:\/\/www.geeksforgeeks.org\/program-change-rgb-color-model-hsv-color-model\/\n    public static List<float> RgbToHsv(long r, long g, long b) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_783_rgb_to_hsv.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RgbToHsv((255L), (255L), (255L)).Equals((new List<float>(new float[]{(float)0.0f, (float)0.0f, (float)100.0f}))));\n    Debug.Assert(RgbToHsv((0L), (215L), (0L)).Equals((new List<float>(new float[]{(float)120.0f, (float)100.0f, (float)84.31372549019608f}))));\n    Debug.Assert(RgbToHsv((10L), (215L), (110L)).Equals((new List<float>(new float[]{(float)149.26829268292684f, (float)95.34883720930233f, (float)84.31372549019608f}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_783_rgb_to_hsv","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to convert rgb color to hsv color. https:\/\/www.geeksforgeeks.org\/program-change-rgb-color-model-hsv-color\/\n    public static List<float> RgbToHsv(long r, long g, long b) {\n        float rf = r \/ 255.0f;\n        float gf = g \/ 255.0f;\n        float bf = b \/ 255.0f;\n\n        float max = Math.Max(rf, Math.Max(gf, bf));\n        float min = Math.Min(rf, Math.Min(gf, bf));\n        float delta = max - min;\n\n        float h = 0;\n        if (delta == 0) {\n            h = 0;\n        } else if (max == rf) {\n            h = ((gf - bf) \/ delta) % 6;\n        } else if (max == gf) {\n            h = ((bf - rf) \/ delta) + 2;\n        } else if (max == bf) {\n            h = ((rf - gf) \/ delta) + 4;\n        }\n\n        h *= 60;\n        if (h < 0) {\n            h += 360;\n        }\n\n        float s = (max == 0) ? 0 : (delta \/ max);\n\n        float v = max;\n\n        return new List<float> { h, s * 100, v * 100 };\n    }\n}\n```"}
{"name":"mbpp_784_mul_even_odd","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find the product of first even and odd number of a given list.\n    public static long MulEvenOdd(List<long> list1) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_784_mul_even_odd.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)1L, (long)6L, (long)8L}))) == (4L));\n    Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))) == (10L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_784_mul_even_odd","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to find the product of the first even and odd number of a given list.\n    public static long MulEvenOdd(List<long> list1) {\n        long firstEven = 0;\n        long firstOdd = 0;\n        \n        foreach (var number in list1) {\n            if (firstEven == 0 && number % 2 == 0) {\n                firstEven = number;\n            }\n            if (firstOdd == 0 && number % 2 != 0) {\n                firstOdd = number;\n            }\n            if (firstEven != 0 && firstOdd != 0) {\n                break;\n            }\n        }\n        \n        if (firstEven != 0 && firstOdd != 0) {\n            return firstEven * firstOdd;\n        } else {\n            return 0; \/\/ or throw an exception if both even and odd numbers are required to exist\n        }\n    }\n}\n```"}
{"name":"mbpp_785_tuple_str_int","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to convert tuple string to integer tuple.\n    public static Tuple<long, long, long> TupleStrInt(string test_str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_785_tuple_str_int.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleStrInt((\"(7, 8, 9)\")).Equals((Tuple.Create(7L, 8L, 9L))));\n    Debug.Assert(TupleStrInt((\"(1, 2, 3)\")).Equals((Tuple.Create(1L, 2L, 3L))));\n    Debug.Assert(TupleStrInt((\"(4, 5, 6)\")).Equals((Tuple.Create(4L, 5L, 6L))));\n    Debug.Assert(TupleStrInt((\"(7, 81, 19)\")).Equals((Tuple.Create(7L, 81L, 19L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_785_tuple_str_int","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to convert tuple string to integer tuple.\n    public static Tuple<long, long, long> TupleStrInt(string test_str) {\n        \/\/ Removing parentheses and spaces\n        string cleanedStr = test_str.Trim('(', ')').Replace(\" \", \"\");\n        \n        \/\/ Splitting the string by comma to get individual elements\n        string[] parts = cleanedStr.Split(',');\n\n        \/\/ Converting the string array to long integer array\n        long[] values = Array.ConvertAll(parts, long.Parse);\n\n        \/\/ Creating and returning the tuple\n        return new Tuple<long, long, long>(values[0], values[1], values[2]);\n    }\n}\n```"}
{"name":"mbpp_786_right_insertion","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to locate the right insertion point for a specified value in sorted order.\n    public static long RightInsertion(List<long> a, long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_786_right_insertion.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_786_right_insertion","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to locate the right insertion point for a specified value in sorted order.\n    public static long RightInsertion(List<long> a, long x) {\n        int left = 0;\n        int right = a.Count;\n\n        while (left < right) {\n            int mid = left + (right - left) \/ 2;\n            if (a[mid] <= x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n\n        return left;\n    }\n}\n```"}
{"name":"mbpp_787_text_match_three","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that matches a string that has an a followed by three 'b'.\n    public static bool TextMatchThree(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_787_text_match_three.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchThree((\"ac\")) == (false));\n    Debug.Assert(TextMatchThree((\"dc\")) == (false));\n    Debug.Assert(TextMatchThree((\"abbbba\")) == (true));\n    Debug.Assert(TextMatchThree((\"caacabbbba\")) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_787_text_match_three","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function that matches a string that has an a followed by three 'b'.\n    public static bool TextMatchThree(string text) {\n        \/\/ Define the regex pattern\n        string pattern = @\"a{1}b{3}\";\n        \/\/ Use the regular expression to check if the pattern matches the input text\n        return Regex.IsMatch(text, pattern);\n    }\n}\n```\n\nIn this code, the `TextMatchThree` function uses a regular expression to match a string that contains 'a' followed by exactly three 'b's. The `Regex.IsMatch` method is used to check if the input string matches the specified pattern."}
{"name":"mbpp_788_new_tuple","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to create a new tuple from the given string and list.\n    public static Tuple<string, string, string> NewTuple(List<string> test_list, string test_str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_788_new_tuple.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"WEB\", (string)\"is\"})), (\"best\")).Equals((Tuple.Create(\"WEB\", \"is\", \"best\"))));\n    Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"We\", (string)\"are\"})), (\"Developers\")).Equals((Tuple.Create(\"We\", \"are\", \"Developers\"))));\n    Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"Part\", (string)\"is\"})), (\"Wrong\")).Equals((Tuple.Create(\"Part\", \"is\", \"Wrong\"))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_788_new_tuple","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to create a new tuple from the given string and list.\n    public static Tuple<string, string, string> NewTuple(List<string> test_list, string test_str) {\n        \/\/ Assume the list has at least two elements, and we need to create a tuple\n        \/\/ using the first two elements of the list and the given string.\n        if (test_list.Count < 2) {\n            throw new ArgumentException(\"The list must contain at least two elements.\");\n        }\n\n        string firstElement = test_list[0];\n        string secondElement = test_list[1];\n\n        return Tuple.Create(firstElement, secondElement, test_str);\n    }\n}\n```"}
{"name":"mbpp_790_even_position","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to check whether every even index contains even numbers of a given list.\n    public static bool EvenPosition(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_790_even_position.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenPosition((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(EvenPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    Debug.Assert(EvenPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L}))) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_790_even_position","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csthon function to check whether every even index contains even numbers of a given list.\n    public static bool EvenPosition(List<long> nums) {\n        for (int i = 0; i < nums.Count; i += 2) {\n            if (nums[i] % 2 != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"}
{"name":"mbpp_791_remove_nested","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove tuples from the given tuple.\n    public static Tuple<long, long, long, long> RemoveNested(object test_tup) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_791_remove_nested.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveNested(Tuple.Create(1L, 5L, 7L, Tuple.Create(4L, 6L), 10L)).Equals((Tuple.Create(1L, 5L, 7L, 10L))));\n    Debug.Assert(RemoveNested(Tuple.Create(2L, 6L, 8L, Tuple.Create(5L, 7L), 11L)).Equals((Tuple.Create(2L, 6L, 8L, 11L))));\n    Debug.Assert(RemoveNested(Tuple.Create(3L, 7L, 9L, Tuple.Create(6L, 8L), 12L)).Equals((Tuple.Create(3L, 7L, 9L, 12L))));\n    Debug.Assert(RemoveNested(Tuple.Create(3L, 7L, 9L, Tuple.Create(6L, 8L), Tuple.Create(5L, 12L), 12L)).Equals((Tuple.Create(3L, 7L, 9L, 12L))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_791_remove_nested","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to remove nested tuples from the given tuple.\n    public static Tuple<long, long, long, long> RemoveNested(object test_tup) {\n        List<long> elements = new List<long>();\n        FlattenTuple(test_tup, elements);\n        if (elements.Count >= 4) {\n            return Tuple.Create(elements[0], elements[1], elements[2], elements[3]);\n        } else {\n            throw new ArgumentException(\"The flattened list contains less than 4 elements.\");\n        }\n    }\n\n    private static void FlattenTuple(object tup, List<long> elements) {\n        if (tup is Tuple<long, long, long, long>) {\n            elements.Add(((Tuple<long, long, long, long>)tup).Item1);\n            elements.Add(((Tuple<long, long, long, long>)tup).Item2);\n            elements.Add(((Tuple<long, long, long, long>)tup).Item3);\n            elements.Add(((Tuple<long, long, long, long>)tup).Item4);\n        } else if (tup is Tuple<long, long, long, object>) {\n            elements.Add(((Tuple<long, long, long, object>)tup).Item1);\n            elements.Add(((Tuple<long, long, long, object>)tup).Item2);\n            elements.Add(((Tuple<long, long, long, object>)tup).Item3);\n            FlattenTuple(((Tuple<long, long, long, object>)tup).Item4, elements);\n        } else if (tup is Tuple<long, long, object, object>) {\n            elements.Add(((Tuple<long, long, object, object>)tup).Item1);\n            elements.Add(((Tuple<long, long, object, object>)tup).Item2);\n            FlattenTuple(((Tuple<long, long, object, object>)tup).Item3, elements);\n            FlattenTuple(((Tuple<long, object, object, object>)tup).Item4, elements);\n        } else if (tup is Tuple<long, object, object, object>) {\n            elements.Add(((Tuple<long, object, object, object>)tup).Item1);\n            FlattenTuple(((Tuple<long, object, object, object>)tup).Item2, elements);\n            FlattenTuple(((Tuple<long, object, object, object>)tup).Item3, elements);\n            FlattenTuple(((Tuple<long, object, object, object>)tup).Item4, elements);\n        } else if (tup is Tuple<object, object, object, object>) {\n            FlattenTuple(((Tuple<object, object, object, object>)tup).Item1, elements);\n            FlattenTuple(((Tuple<object, object, object, object>)tup).Item2, elements);\n            FlattenTuple(((Tuple<object, object, object, object>)tup).Item3, elements);\n            FlattenTuple(((Tuple<object, object, object, object>)tup).Item4, elements);\n        } else {\n            throw new ArgumentException(\"Tuple contains unsupported or non-tuple nested elements.\");\n        }\n    }\n}\n```"}
{"name":"mbpp_792_count_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of lists in a given number of lists.\n    public static long CountList(List<List<long>> input_list) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_792_count_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))) == (4L));\n    Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))) == (3L));\n    Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)2L, (long)0L})}))) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_792_count_list","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Function to count the number of lists in a given number of lists.\n    public static long CountList(List<List<long>> input_list) {\n        return input_list.Count;\n    }\n}\n```\n\nThis code defines a class `Problem` with a static method `CountList` that takes a list of lists (`input_list`) as an argument and returns the count of the number of lists within the `input_list`."}
{"name":"mbpp_793_last","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the last position of an element in a sorted list.\n    public static long Last(List<long> arr, long x) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_793_last.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Last((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (1L)) == (0L));\n    Debug.Assert(Last((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)4L})), (1L)) == (2L));\n    Debug.Assert(Last((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)3L, (long)6L, (long)8L, (long)9L})), (3L)) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_793_last","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to find the last position of an element in a sorted list.\n    public static long Last(List<long> arr, long x) {\n        int left = 0;\n        int right = arr.Count - 1;\n        int result = -1;\n\n        while (left <= right) {\n            int mid = left + (right - left) \/ 2;\n\n            \/\/ Check if arr[mid] is the target value\n            if (arr[mid] == x) {\n                result = mid; \/\/ update result because we're looking for the last occurrence\n                left = mid + 1; \/\/ move to the right half to find the last occurrence\n            } else if (arr[mid] > x) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n\n        return result;\n    }\n}\n```\n\nThe code above defines the method `Last`, which finds the last position of an element `x` in a sorted list `arr` using a binary search algorithm."}
{"name":"mbpp_794_text_starta_endb","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    public static bool TextStartaEndb(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_794_text_starta_endb.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextStartaEndb((\"aabbbb\")) == (true));\n    Debug.Assert(TextStartaEndb((\"aabAbbbc\")) == (false));\n    Debug.Assert(TextStartaEndb((\"accddbbjjj\")) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_794_text_starta_endb","gpt_solution":"```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nclass Problem {\n    \/\/ Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    public static bool TextStartaEndb(string text) {\n        \/\/ Define the regex pattern to match strings that start with 'a' and end with 'b'\n        string pattern = @\"a.*b$\";\n        \/\/ Use Regex.IsMatch to determine if the text matches the pattern\n        return Regex.IsMatch(text, pattern);\n    }\n}\n```\n\nThis code defines a `TextStartaEndb` method that checks if a given string starts with 'a' and ends with 'b' using regular expressions."}
{"name":"mbpp_796_return_sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write function to find the sum of all items in the given dictionary.\n    public static long ReturnSum(Dictionary<string,long> dict) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_796_return_sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 100L}, {\"b\", 200L}, {\"c\", 300L}})) == (600L));\n    Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 25L}, {\"b\", 18L}, {\"c\", 45L}})) == (88L));\n    Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 36L}, {\"b\", 39L}, {\"c\", 49L}})) == (124L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_796_return_sum","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write function to find the sum of all items in the given dictionary.\n    public static long ReturnSum(Dictionary<string,long> dict) {\n        long sum = 0;\n        foreach (var value in dict.Values) {\n            sum += value;\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_797_sum_in_range","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of all odd natural numbers within the range l and r.\n    public static long SumInRange(long l, long r) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_797_sum_in_range.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumInRange((2L), (5L)) == (8L));\n    Debug.Assert(SumInRange((5L), (7L)) == (12L));\n    Debug.Assert(SumInRange((7L), (13L)) == (40L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_797_sum_in_range","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of all odd natural numbers within the range l and r.\n    public static long SumInRange(long l, long r) {\n        long sum = 0;\n        for(long i = l; i <= r; i++) {\n            if(i % 2 != 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_798__sum","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the sum of a list.\n    public static long Sum(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_798__sum.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(Sum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (6L));\n    Debug.Assert(Sum((new List<long>(new long[]{(long)15L, (long)12L, (long)13L, (long)10L}))) == (50L));\n    Debug.Assert(Sum((new List<long>(new long[]{(long)0L, (long)1L, (long)2L}))) == (3L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_798__sum","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a c# function to find the sum of a list.\n    public static long Sum(List<long> arr) {\n        long sum = 0;\n        foreach (long number in arr)\n        {\n            sum += number;\n        }\n        return sum;\n    }\n}\n```"}
{"name":"mbpp_799_left_rotate","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    public static long LeftRotate(long n, long d) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_799_left_rotate.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(LeftRotate((16L), (2L)) == (64L));\n    Debug.Assert(LeftRotate((10L), (2L)) == (40L));\n    Debug.Assert(LeftRotate((99L), (3L)) == (792L));\n    Debug.Assert(LeftRotate((99L), (3L)) == (792L));\n    Debug.Assert(LeftRotate((1L), (3L)) == (8L));\n    Debug.Assert(LeftRotate((5L), (3L)) == (40L));\n    Debug.Assert(LeftRotate((29L), (3L)) == (232L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_799_left_rotate","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    public static long LeftRotate(long n, long d) {\n        \/\/ Since we are dealing with 32-bit numbers, take modulo 32 of the shift amount to \n        \/\/ handle cases where d >= 32\n        d = d % 32;\n        \n        \/\/ Left rotate the number n by d bits\n        long rotated = (n << (int)d) | (n >> (32 - (int)d));\n        \n        \/\/ Mask the result to ensure it fits in 32-bits\n        rotated = rotated & 0xFFFFFFFF;\n        \n        return rotated;\n    }\n}\n```"}
{"name":"mbpp_800_remove_all_spaces","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to remove all whitespaces from a string.\n    public static string RemoveAllSpaces(string text) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_800_remove_all_spaces.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveAllSpaces((\"python  program\")).Equals((\"pythonprogram\")));\n    Debug.Assert(RemoveAllSpaces((\"python   programming    language\")).Equals((\"pythonprogramminglanguage\")));\n    Debug.Assert(RemoveAllSpaces((\"python                     program\")).Equals((\"pythonprogram\")));\n    Debug.Assert(RemoveAllSpaces((\"   python                     program\")).Equals((\"pythonprogram\")));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_800_remove_all_spaces","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a function to remove all whitespaces from a string.\n    public static string RemoveAllSpaces(string text) {\n        if (text == null) {\n            throw new ArgumentNullException(nameof(text), \"Input text cannot be null\");\n        }\n\n        \/\/ Use StringBuilder for better performance when modifying strings\n        StringBuilder result = new StringBuilder();\n        \n        foreach (char c in text) {\n            if (!char.IsWhiteSpace(c)) {\n                result.Append(c);\n            }\n        }\n\n        return result.ToString();\n    }\n}\n```\n\nThis code snippet defines a `Problem` class with a static method `RemoveAllSpaces` that removes all whitespace characters from an input string using a `StringBuilder` for performance reasons. The method also includes input validation to handle null input strings."}
{"name":"mbpp_801_test_three_equal","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of equal numbers from three given integers.\n    public static long TestThreeEqual(long x, long y, long z) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_801_test_three_equal.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestThreeEqual((1L), (1L), (1L)) == (3L));\n    Debug.Assert(TestThreeEqual((-1L), (-2L), (-3L)) == (0L));\n    Debug.Assert(TestThreeEqual((1L), (2L), (2L)) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_801_test_three_equal","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Write a csharp function to count the number of equal numbers from three given integers.\n    public static long TestThreeEqual(long x, long y, long z) {\n        if (x == y && y == z) {\n            return 3;\n        } else if (x == y || y == z || x == z) {\n            return 2;\n        } else {\n            return 0;\n        }\n    }\n}\n```"}
{"name":"mbpp_802_count_rotation","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to count the number of rotations required to generate a sorted list. https:\/\/www.geeksforgeeks.org\/count-of-rotations-required-to-generate-a-sorted-list\/\n    public static long CountRotation(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_802_count_rotation.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_802_count_rotation","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a csthon function to count the number of rotations required to generate a sorted list. https:\/\/www.geeksforgeeks.org\/count-of-rotations-required-to-generate-a-sorted-list\/\n    public static long CountRotation(List<long> arr) {\n        int n = arr.Count;\n        int low = 0, high = n - 1;\n\n        \/\/ Find the index of the minimum element\n        while (low <= high) {\n            if (arr[low] <= arr[high]) {\n                \/\/ The sub-array is already sorted\n                return low;\n            }\n\n            int mid = (low + high) \/ 2;\n            int next = (mid + 1) % n;\n            int prev = (mid - 1 + n) % n;\n\n            \/\/ Check if the mid element is the minimum one\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n                return mid;\n            }\n\n            \/\/ Decide the next search space\n            if (arr[mid] <= arr[high]) {\n                high = mid - 1;\n            } else if (arr[mid] >= arr[low]) {\n                low = mid + 1;\n            }\n        }\n\n        return -1;\n    }\n}\n```\n\nIn this code, we use binary search to find the minimum element in the list, which helps us determine the number of rotations required to generate a sorted list. The function `CountRotation` returns the index of the minimum element, which corresponds to the number of rotations."}
{"name":"mbpp_803_is_perfect_square","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the given number is a perfect square or not. https:\/\/www.geeksforgeeks.org\/check-if-given-number-is-perfect-square-in-cpp\/\n    public static bool IsPerfectSquare(long n) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_803_is_perfect_square.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPerfectSquare((10L)) == (false));\n    Debug.Assert(IsPerfectSquare((36L)) == (true));\n    Debug.Assert(IsPerfectSquare((14L)) == (false));\n    Debug.Assert(IsPerfectSquare((196L)) == (true));\n    Debug.Assert(IsPerfectSquare((125L)) == (false));\n    Debug.Assert(IsPerfectSquare((15625L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_803_is_perfect_square","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check whether the given number is a perfect square or not. https:\/\/www.geeksforgeeks.org\/check-if-given-number-is-perfect-square-in-cpp\/\n    public static bool IsPerfectSquare(long n) {\n        if (n < 0)\n            return false;\n        \n        long left = 0, right = n;\n        while (left <= right) {\n            long mid = left + (right - left) \/ 2;\n            long midSquared = mid * mid;\n\n            if (midSquared == n)\n                return true;\n            else if (midSquared < n)\n                left = mid + 1;\n            else\n                right = mid - 1;\n        }\n\n        return false;\n    }\n}\n```"}
{"name":"mbpp_804_is_product_even","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check whether the product of numbers in a list is even or not.\n    public static bool IsProductEven(List<long> arr) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_804_is_product_even.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L}))) == (true));\n    Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)1L}))) == (false));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_804_is_product_even","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check whether the product of numbers in a list is even or not.\n    public static bool IsProductEven(List<long> arr) {\n        \/\/ If the list is empty, return false (the product is undefined but typically considered neutral)\n        if (arr == null || arr.Count == 0) {\n            return false;\n        }\n\n        foreach (long num in arr) {\n            \/\/ If any number in the list is even, the product will be even\n            if (num % 2 == 0) {\n                return true;\n            }\n        }\n\n        \/\/ If none of the numbers are even, the product cannot be even\n        return false;\n    }\n}\n```"}
{"name":"mbpp_805_max_sum_list","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    public static List<long> MaxSumList(List<List<long>> lists) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_805_max_sum_list.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)12L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))).Equals((new List<long>(new long[]{(long)10L, (long)11L, (long)12L}))));\n    Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)12L, (long)11L, (long)10L})}))).Equals((new List<long>(new long[]{(long)12L, (long)11L, (long)10L}))));\n    Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)1L})}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L}))));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_805_max_sum_list","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem\n{\n    \/\/ Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    public static List<long> MaxSumList(List<List<long>> lists)\n    {\n        if (lists == null || lists.Count == 0)\n        {\n            throw new ArgumentException(\"The list of lists cannot be null or empty.\");\n        }\n        \n        List<long> maxSumList = null;\n        long maxSum = long.MinValue;\n\n        foreach (var list in lists)\n        {\n            if (list == null)\n            {\n                throw new ArgumentException(\"One of the lists is null.\");\n            }\n\n            long currentSum = 0;\n            foreach (var item in list)\n            {\n                currentSum += item;\n            }\n\n            if (currentSum > maxSum)\n            {\n                maxSum = currentSum;\n                maxSumList = list;\n            }\n        }\n\n        return maxSumList;\n    }\n}\n```"}
{"name":"mbpp_806_max_run_uppercase","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_806_max_run_uppercase.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_806_max_run_uppercase","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n        long maxRun = 0;\n        long currentRun = 0;\n\n        foreach (char c in test_str)\n        {\n            if (char.IsUpper(c))\n            {\n                currentRun++;\n                if (currentRun > maxRun)\n                {\n                    maxRun = currentRun;\n                }\n            }\n            else\n            {\n                currentRun = 0;\n            }\n        }\n        \n        return maxRun;\n    }\n}\n```"}
{"name":"mbpp_807_first_odd","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a csthon function to find the first odd number in a given list of numbers.\n    public static long FirstOdd(List<long> nums) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_807_first_odd.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))) == (1L));\n    Debug.Assert(FirstOdd((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(FirstOdd((new List<long>(new long[]{(long)8L, (long)9L, (long)1L}))) == (9L));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_807_first_odd","gpt_solution":"```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\nclass Problem {\n    \/\/ Function to find the first odd number in a given list of numbers.\n    public static long FirstOdd(List<long> nums) {\n        foreach (long num in nums) {\n            if (num % 2 != 0) {\n                return num;\n            }\n        }\n        \/\/ If there is no odd number, we can return a specific value, e.g., -1 to indicate no odd numbers found.\n        return -1;\n    }\n}\n```"}
{"name":"mbpp_808_check_K","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if the given tuples contain the k or not.\n    public static bool CheckK(List<long> test_tup, long K) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_808_check_K.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckK((new List<long>(new long[]{(long)10L, (long)4L, (long)5L, (long)6L, (long)8L})), (6L)) == (true));\n    Debug.Assert(CheckK((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (7L)) == (false));\n    Debug.Assert(CheckK((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)44L, (long)11L, (long)12L})), (11L)) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_808_check_K","gpt_solution":"```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Problem {\n    \/\/ Write a function to check if the given tuples contain the k or not.\n    public static bool CheckK(List<long> test_tup, long K) {\n        \/\/ Check if the given long K is present in the list of long test_tup\n        return test_tup.Contains(K);\n    }\n}\n```"}
{"name":"mbpp_809_check_smaller","language":"cs","prompt":"using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    \/\/ Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    public static bool CheckSmaller(Tuple<long, long, long> test_tup1, Tuple<long, long, long> test_tup2) {\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_809_check_smaller.py","prompt_terminology":"reworded","tests":"    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckSmaller((Tuple.Create(1L, 2L, 3L)), (Tuple.Create(2L, 3L, 4L))) == (false));\n    Debug.Assert(CheckSmaller((Tuple.Create(4L, 5L, 6L)), (Tuple.Create(3L, 4L, 5L))) == (true));\n    Debug.Assert(CheckSmaller((Tuple.Create(11L, 12L, 13L)), (Tuple.Create(10L, 11L, 12L))) == (true));\n    }\n\n}\n","stop_tokens":["\n    }\n"],"task_id":"mbpp_809_check_smaller","gpt_solution":"```csharp\nusing System;\n\nclass Problem {\n    \/\/ Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    public static bool CheckSmaller(Tuple<long, long, long> test_tup1, Tuple<long, long, long> test_tup2) {\n        return test_tup1.Item1 > test_tup2.Item1 &&\n               test_tup1.Item2 > test_tup2.Item2 &&\n               test_tup1.Item3 > test_tup2.Item3;\n    }\n}\n```"}
