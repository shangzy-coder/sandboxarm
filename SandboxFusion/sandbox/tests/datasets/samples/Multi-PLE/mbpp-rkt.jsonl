{"name":"mbpp_3_is_not_prime","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to identify non-prime numbers.\n(define (is_not_prime n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_3_is_not_prime.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_not_prime))\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 35) #t 0.001)\n    (check-within (candidate 37) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_3_is_not_prime","gpt_solution":"```racket\n#lang racket\n\n;; A function to identify non-prime numbers.\n(define (is_not_prime n)\n  (define (divisible? n d)\n    (= 0 (modulo n d)))\n  (define (try-divisor n d)\n    (cond\n      ((= d n) #f)           ; If d reaches n, n is prime.\n      ((divisible? n d) #t)  ; If n is divisible by d, it's not prime.\n      (else (try-divisor n (+ d 1))))) ; Try next divisor.\n  (or (= n 1) (try-divisor n 2))) ; 1 is not considered prime\n\n;; Examples\n;; (is_not_prime 4) => #t\n;; (is_not_prime 5) => #f\n```"}
{"name":"mbpp_4_heap_queue_largest","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n(define (heap_queue_largest nums n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_4_heap_queue_largest.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate heap_queue_largest))\n    (check-within (candidate (list 25 35 22 85 14 65 75 22 58) 3) (list 85 75 65) 0.001)\n    (check-within (candidate (list 25 35 22 85 14 65 75 22 58) 2) (list 85 75) 0.001)\n    (check-within (candidate (list 25 35 22 85 14 65 75 22 58) 5) (list 85 75 65 58 35) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_4_heap_queue_largest","gpt_solution":"```racket\n#lang racket\n\n(require data\/heap)\n\n;; Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n(define (heap_queue_largest nums n)\n  (let* ((min-heap (make-heap <))\n         (update-heap (lambda (num)\n                         (if (< (heap-count min-heap) n)\n                           (heap-push! min-heap num)\n                           (when (> num (heap-min min-heap))\n                             (heap-pop! min-heap)\n                             (heap-push! min-heap num))))))\n    ;; Insert each number into the heap with appropriate logic.\n    (for-each update-heap nums)\n    ;; Extract elements from the heap to create the final sorted list.\n    (let loop ((result '()))\n      (if (heap-empty? min-heap)\n          (reverse result)\n          (loop (cons (heap-pop min-heap) result))))))\n```\n\nThis code will create a min-heap of the given size `n` and push numbers onto it while maintaining the `n` largest numbers seen so far. It will then pop elements from the heap to get them sorted in descending order."}
{"name":"mbpp_6_differ_At_One_Bit_Pos","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the two numbers differ at one bit position only or not.\n(define (differ_At_One_Bit_Pos a b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_6_differ_At_One_Bit_Pos.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate differ_At_One_Bit_Pos))\n    (check-within (candidate 13 9) #t 0.001)\n    (check-within (candidate 15 8) #f 0.001)\n    (check-within (candidate 2 4) #f 0.001)\n    (check-within (candidate 2 3) #t 0.001)\n    (check-within (candidate 5 1) #t 0.001)\n    (check-within (candidate 1 5) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_6_differ_At_One_Bit_Pos","gpt_solution":"```racket\n#lang racket\n\n;; This function checks whether the two numbers differ at one bit position only or not.\n(define (differ_At_One_Bit_Pos a b)\n  (let ((xor-ab (bitwise-xor a b)))\n    (and (not (= xor-ab 0))\n         (= (bitwise-and xor-ab (- xor-ab)) xor-ab))))\n\n;; Test cases\n(displayln (differ_At_One_Bit_Pos 4 5)) ; #t\n(displayln (differ_At_One_Bit_Pos 7 10)) ; #f\n(displayln (differ_At_One_Bit_Pos 14 12)) ; #t\n(displayln (differ_At_One_Bit_Pos 0 1)) ; #t\n(displayln (differ_At_One_Bit_Pos 10 10)) ; #f\n```"}
{"name":"mbpp_8_square_nums","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find squares of individual elements in a list.\n(define (square_nums nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_8_square_nums.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_nums))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 4 9 16 25 36 49 64 81 100) 0.001)\n    (check-within (candidate (list 10 20 30)) (list 100 400 900) 0.001)\n    (check-within (candidate (list 12 15)) (list 144 225) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_8_square_nums","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find squares of individual elements in a list.\n\n(define (square_nums nums)\n  (map (lambda (x) (* x x)) nums))\n\n;; Example usage:\n(square_nums '(1 2 3 4 5)) ; should return '(1 4 9 16 25)\n```"}
{"name":"mbpp_9_find_Rotations","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n(define (find_Rotations str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_9_find_Rotations.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Rotations))\n    (check-within (candidate \"aaaa\") 1 0.001)\n    (check-within (candidate \"ab\") 2 0.001)\n    (check-within (candidate \"abc\") 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_9_find_Rotations","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n(define (find_Rotations str)\n  (define len (string-length str))\n  (define (rotate n s) \n    (string-append (substring s (- len n) len) (substring s 0 (- len n))))\n  (define (find-min-rotation n)\n    (if (string=? str (rotate n str))\n        n\n        (find-min-rotation (+ n 1))))\n  (find-min-rotation 1))\n\n;; Example usage:\n;; (find_Rotations \"abcabc\") ; Should return 3 since rotating 'abcabc' by 3 gives 'abcabc'\n```"}
{"name":"mbpp_11_remove_Occ","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to remove first and last occurrence of a given character from the string.\n(define (remove_Occ s ch)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_11_remove_Occ.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_Occ))\n    (check-within (candidate \"hello\" \"l\") \"heo\" 0.001)\n    (check-within (candidate \"abcda\" \"a\") \"bcd\" 0.001)\n    (check-within (candidate \"PHP\" \"P\") \"H\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_11_remove_Occ","gpt_solution":"```racket\n#lang racket\n\n;; Function to remove the first and last occurrence of a given character from the string.\n(define (remove_Occ s ch)\n  (let* ((first-pos (string-index s ch))\n         (last-pos (string-index-right s ch)))\n    (if (or (not first-pos) (not last-pos))\n        s    ; If ch is not found, return the original string\n        (string-append (substring s 0 first-pos)\n                       (substring s (+ first-pos 1) last-pos)\n                       (substring s (+ last-pos 1))))))\n                       \n;; Example Usage:\n(remove_Occ \"abracadabra\" #\\a)  ; Output: \"bracadabr\"\n(remove_Occ \"hello world\" #\\o)   ; Output: \"hell world\"\n(remove_Occ \"racket\" #\\t)        ; Output: \"racke\"\n```\n\nThis implementation defines a function `remove_Occ` that removes the first and last occurrence of a given character from a string. \n\n1. It finds the first and last position of the character using `string-index` and `string-index-right`.\n2. If the character is not found (either `first-pos` or `last-pos` is `#f`), it returns the original string.\n3. Otherwise, it constructs a new string by concatenating the parts before the first occurrence, between the first and last occurrence, and after the last occurrence.\n\nExample usages are provided to demonstrate how the function works."}
{"name":"mbpp_12_sort_matrix","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_12_sort_matrix.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-within (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)) 0.001)\n    (check-within (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)) 0.001)\n    (check-within (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_12_sort_matrix","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (define (row-sum row)\n    (apply + row))\n  \n  (sort M\n        (lambda (row1 row2)\n          (< (row-sum row1) (row-sum row2)))))\n\n;; Example Usage:\n(define matrix '((3 1 2)\n                 (1 1 1)\n                 (5 2 0)\n                 (2 2 2)))\n\n(sort_matrix matrix)\n;; Expected output:\n;; '((1 1 1)\n;;   (2 2 2)\n;;   (3 1 2)\n;;   (5 2 0))\n``` \n\nThis `sort_matrix` function takes a matrix `M`, computes the sum of each row, and sorts the rows of the matrix in ascending order according to these sums."}
{"name":"mbpp_14_find_Volume","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the volume of a triangular prism.\n(define (find_Volume l b h)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_14_find_Volume.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Volume))\n    (check-within (candidate 10 8 6) 240 0.001)\n    (check-within (candidate 3 2 2) 6 0.001)\n    (check-within (candidate 1 2 1) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_14_find_Volume","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the volume of a triangular prism.\n;; The formula for the volume of a triangular prism is:\n;; Volume = (1\/2 * base * height_of_triangle) * length\n;; where:\n;; l = length of the prism\n;; b = base of the triangular face\n;; h = height of the triangular face\n\n(define (find_Volume l b h)\n  (* (\/ (* b h) 2) l))\n\n;; Example usage:\n(find_Volume 10 5 6)  ;; Should return 150\n```"}
{"name":"mbpp_16_text_lowercase_underscore","language":"rkt","prompt":"#lang racket\n\n;; Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n(define (text_lowercase_underscore text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_16_text_lowercase_underscore.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_lowercase_underscore))\n    (check-within (candidate \"aab_cbbbc\") #t 0.001)\n    (check-within (candidate \"aab_Abbbc\") #f 0.001)\n    (check-within (candidate \"Aaab_abbbc\") #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_16_text_lowercase_underscore","gpt_solution":"```racket\n#lang racket\n\n;; Function to check if the input string contains sequences of lowercase letters joined with an underscore\n(define (text_lowercase_underscore text)\n  (regexp-match? #rx\"^([a-z]+_)*[a-z]+$\" text))\n\n;; Test cases\n(text_lowercase_underscore \"abc_def_ghi\") ; => #t\n(text_lowercase_underscore \"abc_def_Ghi\") ; => #f\n(text_lowercase_underscore \"abc_def_\")    ; => #f\n(text_lowercase_underscore \"abcdefghi\")   ; => #t\n(text_lowercase_underscore \"abc_def123\")  ; => #f\n```"}
{"name":"mbpp_17_square_perimeter","language":"rkt","prompt":"#lang racket\n\n;; Write a function that returns the perimeter of a square given its side length as input.\n(define (square_perimeter a)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_17_square_perimeter.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_perimeter))\n    (check-within (candidate 10) 40 0.001)\n    (check-within (candidate 5) 20 0.001)\n    (check-within (candidate 4) 16 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_17_square_perimeter","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that returns the perimeter of a square given its side length as input.\n(define (square_perimeter a)\n  (* 4 a))\n```"}
{"name":"mbpp_18_remove_dirty_chars","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove characters from the first string which are present in the second string.\n(define (remove_dirty_chars string second_string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_18_remove_dirty_chars.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_dirty_chars))\n    (check-within (candidate \"probasscurve\" \"pros\") \"bacuve\" 0.001)\n    (check-within (candidate \"digitalindia\" \"talent\") \"digiidi\" 0.001)\n    (check-within (candidate \"exoticmiles\" \"toxic\") \"emles\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_18_remove_dirty_chars","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove characters from the first string which are present in the second string.\n(define (remove_dirty_chars string second_string)\n  (let ([second-set (set (string->list second_string))])\n    (list->string (filter (lambda (ch) (not (set-member? second-set ch)))\n                          (string->list string)))))\n\n;; Example usage:\n(remove_dirty_chars \"hello world\" \"ole\")  ;; returns \"h wrd\"\n```"}
{"name":"mbpp_19_test_duplicate","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find whether a given list of integers contains any duplicate element.\n(define (test_duplicate arraynums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_19_test_duplicate.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_duplicate))\n    (check-within (candidate (list 1 2 3 4 5)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 4)) #t 0.001)\n    (check-within (candidate (list 1 1 2 2 3 3 4 4 5)) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_19_test_duplicate","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find whether a given list of integers contains any duplicate element.\n(define (test_duplicate arraynums)\n  (let loop ([lst arraynums]\n             [seen (set)])\n    (cond\n      [(null? lst) #f]\n      [(set-member? seen (car lst)) #t]\n      [else (loop (cdr lst) (set-add seen (car lst)))])))\n\n;; Example usage:\n(test_duplicate '(1 2 3 4 5))   ;; #f\n(test_duplicate '(1 2 3 4 5 3)) ;; #t\n```"}
{"name":"mbpp_20_is_woodall","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if the given number is woodball or not.\n(define (is_woodall x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_20_is_woodall.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_woodall))\n    (check-within (candidate 383) #t 0.001)\n    (check-within (candidate 254) #f 0.001)\n    (check-within (candidate 200) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_20_is_woodall","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if the given number is woodall or not.\n\n;; A Woodall number is a number of the form n * 2^n - 1 for some integer n >= 0.\n;; The function `is_woodall` takes an integer `x` and returns `#t` if `x` is a Woodall number,\n;; and `#f` otherwise.\n\n(define (is-woodall-helper x n)\n  (let ((woodall-number (- (* n (expt 2 n)) 1)))\n    (cond\n      ((= x woodall-number) #t)\n      ((> woodall-number x) #f)\n      (else (is-woodall-helper x (+ n 1))))))\n\n(define (is_woodall x)\n  (if (and (integer? x) (>= x 0))\n      (is-woodall-helper x 0)\n      #f))\n\n;; Examples: Uncomment to test\n;; (is_woodall 1) ; #t (since 0 * 2^0 - 1 = -1, 1 * 2^1 - 1 = 1)\n;; (is_woodall 7) ; #t (since 3 * 2^3 - 1 = 7)\n;; (is_woodall 10) ; #f\n```"}
{"name":"mbpp_56_checks","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check if a given number is one less than twice its reverse.\n(define (checks n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_56_checks.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate checks))\n    (check-within (candidate 70) #f 0.001)\n    (check-within (candidate 23) #f 0.001)\n    (check-within (candidate 73) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_56_checks","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if a given number is one less than twice its reverse.\n(define (reverse-number n)\n  (define (helper n rev)\n    (if (zero? n)\n        rev\n        (helper (quotient n 10) (+ (* rev 10) (remainder n 10)))))\n  (helper n 0))\n\n(define (checks n)\n  (let ([rev (reverse-number n)])\n    (= n (- (* 2 rev) 1))))\n```\n\nThis code defines a function `reverse-number` to reverse the digits of a given number, and a function `checks` to determine if the original number `n` is one less than twice its reverse."}
{"name":"mbpp_57_find_Max_Num","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the largest number that can be formed with the given list of digits.\n(define (find_Max_Num arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_57_find_Max_Num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Max_Num))\n    (check-within (candidate (list 1 2 3)) 321 0.001)\n    (check-within (candidate (list 4 5 6 1)) 6541 0.001)\n    (check-within (candidate (list 1 2 3 9)) 9321 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_57_find_Max_Num","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the largest number that can be formed with the given list of digits.\n(define (find-Max-Num arr)\n  (let ((str-arr (map number->string arr)))  ;; Convert each number to a string\n    (string->number\n     (string-append* \n      (sort str-arr \n            (lambda (a b) \n              (string>? (string-append a b) (string-append b a))))))))  ;; Custom comparator for sorting\n\n;; Example usage:\n(find-Max-Num '(3 30 34 5 9))  ;; Should return 9534330\n```\n\nExplanation:\n1. We start by converting the list of digits to strings using `map number->string`.\n2. We then sort the array using a custom comparator. The comparator checks which combination of two numbers (as strings) is greater when concatenated in different orders.\n3. Finally, we concatenate the sorted strings together and convert the result back to a number using `string->number`. This gives us the largest number that can be formed from the given list of digits."}
{"name":"mbpp_58_opposite_Signs","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the given two integers have opposite sign or not.\n(define (opposite_Signs x y)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_58_opposite_Signs.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate opposite_Signs))\n    (check-within (candidate 1 -2) #t 0.001)\n    (check-within (candidate 3 2) #f 0.001)\n    (check-within (candidate -10 -10) #f 0.001)\n    (check-within (candidate -2 2) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_58_opposite_Signs","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether the given two integers have opposite sign or not.\n(define (opposite_Signs x y)\n  (not (= (>= x 0) (>= y 0))))\n\n; Example usage\n(display (opposite_Signs -5 5)) ; Output: #t\n(display (opposite_Signs 7 3))  ; Output: #f\n```"}
{"name":"mbpp_59_is_octagonal","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the nth octagonal number.\n(define (is_octagonal n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_59_is_octagonal.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_octagonal))\n    (check-within (candidate 5) 65 0.001)\n    (check-within (candidate 10) 280 0.001)\n    (check-within (candidate 15) 645 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_59_is_octagonal","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if a number is octagonal.\n(define (is-octagonal n)\n  (define (quadratic-root a b c)\n    (let ([discriminant (- (* b b) (* 4 a c))])\n      (if (>= discriminant 0)\n          (let ([root1 (\/ (+ (- b) (sqrt discriminant)) (* 2 a))]\n                [root2 (\/ (- (- b) (sqrt discriminant)) (* 2 a))])\n            (cond\n              [(and (integer? root1) (>= root1 0)) root1]\n              [(and (integer? root2) (>= root2 0)) root2]\n              [else #f]))\n          #f)))\n  (let ([solution (quadratic-root 3 -2 (- n))])\n    (and solution\n         (let* ([discriminant (+ 1 (* 3 (* 8 n -4)))]\n                [root1 (\/ (+ 1 (sqrt discriminant)) 2)]\n                [root2 (\/ (- 1 (sqrt discriminant)) 2)])\n           (or \n            (integer? root1) \n            (integer? root2))))))\n\n;; Example usage:\n(is-octagonal 1)  ; Should return #t, because 1 is octagonal.\n(is-octagonal 45) ; Should return #t, because 45 is octagonal.\n(is-octagonal 23) ; Should return #f, because 23 is not octagonal.\n```"}
{"name":"mbpp_61_count_Substrings","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of substrings with the sum of digits equal to their length.\n(define (count_Substrings s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_61_count_Substrings.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Substrings))\n    (check-within (candidate \"112112\") 6 0.001)\n    (check-within (candidate \"111\") 6 0.001)\n    (check-within (candidate \"1101112\") 12 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_61_count_Substrings","gpt_solution":"```racket\n#lang racket\n\n;; This function counts the number of substrings within a given string\n;; where the sum of the digits in the substring equals the length of the substring.\n(define (count-Substrings s)\n  ;; Helper function to calculate the sum of digits in a string.\n  (define (sum-of-digits str)\n    (apply + (map (lambda (c) (- (char->integer c) (char->integer #\\0))) (string->list str))))\n  \n  (define len (string-length s))\n  (define count 0)\n  \n  ;; Iterate over each possible starting point of a substring\n  (for ([i (in-range len)])\n    ;; Iterate over each possible ending point of a substring starting at i\n    (for ([j (in-range (add1 i) (add1 len))])\n      ;; Extract the substring\n      (define substr (substring s i j))\n      ;; Check if the sum of digits equals the length of the substring\n      (when (= (sum-of-digits substr) (string-length substr))\n        (set! count (add1 count)))))\n  \n  count)\n\n;; Example usage\n(define test-string \"12412\")\n(count-Substrings test-string) ; Returns the number of valid substrings\n```"}
{"name":"mbpp_62_smallest_num","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find smallest number in a list.\n(define (smallest_num xs)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_62_smallest_num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate smallest_num))\n    (check-within (candidate (list 10 20 1 45 99)) 1 0.001)\n    (check-within (candidate (list 1 2 3)) 1 0.001)\n    (check-within (candidate (list 45 46 50 60)) 45 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_62_smallest_num","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the smallest number in a list.\n(define (smallest_num xs)\n  (if (null? xs)\n      (error \"The list is empty\")\n      (foldl min (car xs) xs)))\n```\n\nThis completes the `smallest_num` function. The function takes a list `xs` as input and uses the `foldl` function to apply the `min` function across the list to find the smallest number. If the list is empty, it raises an error."}
{"name":"mbpp_63_max_difference","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the maximum difference between available pairs in the given list list.\n(define (max_difference test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_63_max_difference.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_difference))\n    (check-within (candidate (list (list 3 5) (list 1 7) (list 10 3) (list 1 2))) 7 0.001)\n    (check-within (candidate (list (list 4 6) (list 2 17) (list 9 13) (list 11 12))) 15 0.001)\n    (check-within (candidate (list (list 12 35) (list 21 27) (list 13 23) (list 41 22))) 23 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_63_max_difference","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the maximum difference between available pairs in the given list.\n(define (max_difference test_list)\n  (define (max-diff-helper lst current-max)\n    (cond\n      [(null? lst) current-max]\n      [else\n       (let* ([first-element (car lst)]\n              [max-diff-rest (max-diff-helper (cdr lst) current-max)]\n              [diffs (map (lambda (x) (abs (- first-element x))) lst)]\n              [max-diff (if (null? diffs) current-max (apply max diffs))])\n         (if (> max-diff max-diff-rest)\n             max-diff\n             max-diff-rest))]))\n  (max-diff-helper test_list 0))\n\n;; Example usage\n(max_difference '(1 2 3 4 5 6))\n;; Should return 5, which is the difference between 1 and 6 (the maximum possible difference)\n\n(max_difference '(10 20 10 30 40))\n;; Should return 30, which is the difference between 10 and 40\n```\n\nThis Racket function `max_difference` computes the maximum difference between any two elements in a given list by iterating through the list and calculating the absolute differences. The maximum difference found during the iteration is returned."}
{"name":"mbpp_64_subject_marks","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort a list of lists using the second value of each list.\n(define (subject_marks subjectmarks)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_64_subject_marks.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate subject_marks))\n    (check-within (candidate (list (list \"English\" 88) (list \"Science\" 90) (list \"Maths\" 97) (list \"Social sciences\" 82))) (list (list \"Social sciences\" 82) (list \"English\" 88) (list \"Science\" 90) (list \"Maths\" 97)) 0.001)\n    (check-within (candidate (list (list \"Telugu\" 49) (list \"Hindhi\" 54) (list \"Social\" 33))) (list (list \"Social\" 33) (list \"Telugu\" 49) (list \"Hindhi\" 54)) 0.001)\n    (check-within (candidate (list (list \"Physics\" 96) (list \"Chemistry\" 97) (list \"Biology\" 45))) (list (list \"Biology\" 45) (list \"Physics\" 96) (list \"Chemistry\" 97)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_64_subject_marks","gpt_solution":"```racket\n#lang racket\n\n;; Function to sort a list of lists using the second value of each list.\n(define (subject_marks subjectmarks)\n  (sort subjectmarks\n        (lambda (a b)\n          (< (second a) (second b)))))\n\n;; Example usage:\n(subject_marks '((\"Math\" 85) (\"Biology\" 90) (\"Chemistry\" 78) (\"Physics\" 95)))\n; The above should return: ((\"Chemistry\" 78) (\"Math\" 85) (\"Biology\" 90) (\"Physics\" 95))\n```"}
{"name":"mbpp_65_recursive_list_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to flatten a list and sum all of its elements.\n(define (recursive_list_sum data_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_65_recursive_list_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate recursive_list_sum))\n    (check-within (candidate (list 1 2 (list 3 4) (list 5 6))) 21 0.001)\n    (check-within (candidate (list 7 10 (list 15 14) (list 19 41))) 106 0.001)\n    (check-within (candidate (list 10 20 (list 30 40) (list 50 60))) 210 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_65_recursive_list_sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to flatten a list and sum all of its elements.\n(define (recursive_list_sum data_list)\n  (cond\n    [(null? data_list) 0]\n    [(list? (first data_list)) (+ (recursive_list_sum (first data_list)) \n                                  (recursive_list_sum (rest data_list)))]\n    [else (+ (first data_list) (recursive_list_sum (rest data_list)))]))\n\n;; Example usage:\n;; (recursive_list_sum '(1 2 (3 4) 5)) should return 15\n```"}
{"name":"mbpp_66_pos_count","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of positive numbers in a list.\n(define (pos_count list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_66_pos_count.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pos_count))\n    (check-within (candidate (list 1 -2 3 -4)) 2 0.001)\n    (check-within (candidate (list 3 4 5 -1)) 3 0.001)\n    (check-within (candidate (list 1 2 3 4)) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_66_pos_count","gpt_solution":"```racket\n#lang racket\n\n;; Function to count the number of positive numbers in a list.\n(define (pos_count lst)\n  (define (helper lst count)\n    (cond\n      [(empty? lst) count]\n      [(positive? (first lst)) (helper (rest lst) (+ count 1))]\n      [else (helper (rest lst) count)]))\n  (helper lst 0))\n\n;; Example usage:\n(pos_count '(1 -2 3 0 -4 5)) ; => 3\n```"}
{"name":"mbpp_67_bell_number","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the number of ways to partition a set of Bell numbers.\n(define (bell_number n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_67_bell_number.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bell_number))\n    (check-within (candidate 2) 2 0.001)\n    (check-within (candidate 10) 115975 0.001)\n    (check-within (candidate 56) 6775685320645824322581483068371419745979053216268760300 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_67_bell_number","gpt_solution":"```racket\n#lang racket\n\n;; The Bell number sequence counts the number of ways to partition a set of exactly n elements.\n;; The function `bell_number` computes the n-th Bell number using dynamic programming.\n\n(define (bell-number n)\n  (define bell (make-vector (add1 n)))\n\n  ;; Initialize the Bell triangle, where bell-triangle[i][j] represents\n  ;; the number of ways to partition a set of i elements, with j as the largest number.\n  (define bell-triangle (make-vector (add1 n) (\u03bb (_) (make-vector (add1 n) 0))))\n\n  (vector-set! (vector-ref bell-triangle 0) 0 1)\n\n  (for ([i (in-range 1 (add1 n))])\n    (vector-set! (vector-ref bell-triangle i) 0 (vector-ref (vector-ref bell-triangle (sub1 i)) (sub1 i)))\n    (for ([j (in-range 1 (add1 i))])\n      (vector-set! (vector-ref bell-triangle i) j\n                   (+ (vector-ref (vector-ref bell-triangle i) (sub1 j))\n                      (vector-ref (vector-ref bell-triangle (sub1 i)) (sub1 j))))))\n\n  (for ([i (in-range (add1 n))])\n    (vector-set! bell i (vector-ref (vector-ref bell-triangle i) 0)))\n\n  (vector-ref bell n))\n\n;; Example usage:\n;; (bell-number 0) ; => 1\n;; (bell-number 1) ; => 1\n;; (bell-number 2) ; => 2\n;; (bell-number 3) ; => 5\n;; (bell-number 4) ; => 15\n```"}
{"name":"mbpp_68_is_Monotonic","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the given list is monotonic or not.\n(define (is_Monotonic A)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_68_is_Monotonic.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Monotonic))\n    (check-within (candidate (list 6 5 4 4)) #t 0.001)\n    (check-within (candidate (list 1 2 2 3)) #t 0.001)\n    (check-within (candidate (list 1 3 2)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_68_is_Monotonic","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether the given list is monotonic or not\n(define (is_Monotonic lst)\n  (or (apply <= lst)     ; Check if the list is non-decreasing\n      (apply >= lst)))   ; Check if the list is non-increasing\n\n;; Examples:\n;; (is_Monotonic '(1 2 2 3)) => #t\n;; (is_Monotonic '(3 2 2 1)) => #t\n;; (is_Monotonic '(1 3 2)) => #f\n```"}
{"name":"mbpp_69_is_sublist","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether a list contains the given sublist or not.\n(define (is_sublist l s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_69_is_sublist.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sublist))\n    (check-within (candidate (list 2 4 3 5 7) (list 3 7)) #f 0.001)\n    (check-within (candidate (list 2 4 3 5 7) (list 4 3)) #t 0.001)\n    (check-within (candidate (list 2 4 3 5 7) (list 1 6)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_69_is_sublist","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether a list contains the given sublist or not.\n(define (is_sublist l s)\n  (define (startswith? l1 l2)\n    (cond\n      [(empty? l2) #t]\n      [(empty? l1) #f]\n      [(not (equal? (first l1) (first l2))) #f]\n      [else (startswith? (rest l1) (rest l2))]))\n  (define (helper l s)\n    (cond\n      [(empty? l) (empty? s)]\n      [(startswith? l s) #t]\n      [else (helper (rest l) s)]))\n  (helper l s))\n  \n;; Example usage:\n;; (is_sublist '(1 2 3 4 5) '(2 3)) ; should return #t\n;; (is_sublist '(1 2 3 4 5) '(3 5)) ; should return #f\n```\n\nIn the provided code:\n- `is_sublist` is defined to check whether a sublist `s` exists within list `l`.\n- `startswith?` is a helper function that checks if one list starts with another.\n- A recursive helper function `helper` explores `l` to find the sublist `s`.\n\nYou can test the function with various lists and sublists to verify that it works correctly."}
{"name":"mbpp_70_get_equal","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_70_get_equal.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-within (candidate (list (list 11 22 33) (list 44 55 66))) #t 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6 7))) #f 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4))) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_70_get_equal","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal input)\n  (if (null? input)\n      #t\n      (let ((lengths (map length input)))\n        (apply = lengths))))\n\n;; Example Usage:\n(get_equal '((1 2 3) (4 5 6) (7 8 9)))       ; returns #t\n(get_equal '((1 2 3) (4 5) (7 8 9)))          ; returns #f\n(get_equal '((1 2 3 4) (4 5 6 7) (7 8 9 10))) ; returns #t\n```"}
{"name":"mbpp_71_comb_sort","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort a list of elements.\n(define (comb_sort nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_71_comb_sort.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate comb_sort))\n    (check-within (candidate (list 5 15 37 25 79)) (list 5 15 25 37 79) 0.001)\n    (check-within (candidate (list 41 32 15 19 22)) (list 15 19 22 32 41) 0.001)\n    (check-within (candidate (list 99 15 13 47)) (list 13 15 47 99) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_71_comb_sort","gpt_solution":"Certainly, here's the completed code for the `comb_sort` function in Racket, wrapped in markdown syntax:\n\n```racket\n#lang racket\n\n;; Function to get the next gap size\n(define (get-next-gap gap)\n  (max 1 (quotient (* gap 10) 13)))\n\n;; Comb sort implementation\n(define (comb_sort nums)\n  (let loop ([nums nums] [gap (length nums)] [sorted? #f])\n    (if (and (<= gap 1) sorted?)\n        nums\n        (let ([new-gap (get-next-gap gap)]\n              [new-sorted? #t]\n              [new-nums (for\/list ([i (in-range 0 (- (length nums) new-gap))])\n                          (let ([a (list-ref nums i)]\n                                [b (list-ref nums (+ i new-gap))])\n                            (if (> a b)\n                                (begin\n                                  (set! new-sorted? #f)\n                                  (list-set (list-set nums i b) (+ i new-gap) a))\n                                nums)))])\n          (loop new-nums new-gap new-sorted?)))))\n```\n\nThis code defines a `comb_sort` function which sorts a list of numbers using the comb sort algorithm. The `comb_sort` function uses a helper function `get-next-gap` to determine the next gap size. The algorithm repetitively adjusts the gap and sorts the elements in the list until the list is sorted."}
{"name":"mbpp_72_dif_Square","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the given number can be represented as the difference of two squares or not.\n(define (dif_Square n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_72_dif_Square.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dif_Square))\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 15) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_72_dif_Square","gpt_solution":"```racket\n#lang racket\n\n;; This function checks whether the given number can be represented \n;; as the difference of two squares or not.\n(define (dif_Square n)\n  (define (helper a)\n    (define b (sqrt (- (* a a) n)))\n    (and (integer? b) (>= b 0)))\n  (define a (sqrt n))\n  (or (integer? a) \n      (let loop ([i 1])\n        (cond\n          [(> i a) #f]\n          [(helper i) #t]\n          [else (loop (+ i 1))]))))\n```\n\nHere, the function `dif_Square` checks if a number `n` can be represented as the difference of two squares. It first defines a helper function that checks if the difference of `a^2` and `n` yields a perfect square `b`. The function iterates through possible values of `a` and uses this helper function to see if any such pair `(a, b)` exists. If it does, the function returns `#t`, otherwise `#f`."}
{"name":"mbpp_74_is_samepatterns","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether it follows the sequence given in the patterns list.\n(define (is_samepatterns colors patterns)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_74_is_samepatterns.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_samepatterns))\n    (check-within (candidate (list \"red\" \"green\" \"green\") (list \"a\" \"b\" \"b\")) #t 0.001)\n    (check-within (candidate (list \"red\" \"green\" \"greenn\") (list \"a\" \"b\" \"b\")) #f 0.001)\n    (check-within (candidate (list \"red\" \"green\" \"greenn\") (list \"a\" \"b\")) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_74_is_samepatterns","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether it follows the sequence given in the patterns list.\n(define (is_samepatterns colors patterns)\n  (define (helper colors patterns color-to-pattern)\n    (cond\n      [(empty? colors) (empty? patterns)]\n      [(and (hash-has-key? color-to-pattern (first colors))\n            (equal? (hash-ref color-to-pattern (first colors)) (first patterns)))\n       (helper (rest colors) (rest patterns) color-to-pattern)]\n      [(not (hash-has-key? color-to-pattern (first colors)))\n       (helper (rest colors) (rest patterns) (hash-set color-to-pattern (first colors) (first patterns)))]\n      [else #f]))\n  (helper colors patterns (make-hash)))\n\n;; Example usage:\n(is_samepatterns '(red blue red) '(1 2 1))  ;; Expected: #t\n(is_samepatterns '(red blue red) '(1 2 2))  ;; Expected: #f\n(is_samepatterns '(red red red) '(1 1 1))   ;; Expected: #t\n(is_samepatterns '(red blue green) '(1 2 3)) ;; Expected: #t\n(is_samepatterns '(red blue green) '(1 1 2)) ;; Expected: #f\n```"}
{"name":"mbpp_75_find_tuples","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find lists which have all elements divisible by k from the given list of lists.\n(define (find_tuples test_list K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_75_find_tuples.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_tuples))\n    (check-within (candidate (list (list 6 24 12) (list 7 9 6) (list 12 18 21)) 6) (list (list 6 24 12)) 0.001)\n    (check-within (candidate (list (list 5 25 30) (list 4 2 3) (list 7 8 9)) 5) (list (list 5 25 30)) 0.001)\n    (check-within (candidate (list (list 7 9 16) (list 8 16 4) (list 19 17 18)) 4) (list (list 8 16 4)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_75_find_tuples","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find lists which have all elements divisible by k from the given list of lists.\n(define (find_tuples test_list K)\n  (filter (lambda (lst)\n            (andmap (lambda (elem)\n                      (= (remainder elem K) 0))\n                    lst))\n          test_list))\n\n;; Example usage:\n;; (find_tuples '((1 2 4) (4 6 8) (3 6 9) (12 24 36)) 3)\n;; This should return '((3 6 9) (12 24 36)) because all elements in these sublists are divisible by 3\n```"}
{"name":"mbpp_77_is_Diff","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find whether a number is divisible by 11.\n(define (is_Diff n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_77_is_Diff.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Diff))\n    (check-within (candidate 12345) #f 0.001)\n    (check-within (candidate 1212112) #t 0.001)\n    (check-within (candidate 1212) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_77_is_Diff","gpt_solution":"```racket\n#lang racket\n\n;; Function to find whether a number is divisible by 11.\n(define (is_Divisible_by_11 n)\n  (define (digit-alternating-sum num)\n    (define (helper num odd)\n      (if (< num 10)\n          (if odd num (- num))\n          (let ((last-digit (modulo num 10)))\n            (if odd\n                (+ last-digit (helper (quotient num 10) (not odd)))\n                (- last-digit (helper (quotient num 10) (not odd)))))))\n    (helper num #t))\n  (zero? (modulo (abs (digit-alternating-sum n)) 11)))\n\n;; Test cases\n(displayln (is_Divisible_by_11 121))  ; Expected: #t\n(displayln (is_Divisible_by_11 123))  ; Expected: #f\n(displayln (is_Divisible_by_11 0))    ; Expected: #t\n(displayln (is_Divisible_by_11 -11))  ; Expected: #t\n(displayln (is_Divisible_by_11 110))  ; Expected: #t\n```"}
{"name":"mbpp_79_word_len","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the length of the word is odd or not.\n(define (word_len s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_79_word_len.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate word_len))\n    (check-within (candidate \"Hadoop\") #f 0.001)\n    (check-within (candidate \"great\") #t 0.001)\n    (check-within (candidate \"structure\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_79_word_len","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the length of the word is odd or not.\n(define (word_len s)\n  (odd? (string-length s)))\n```\n\nThis function `word_len` takes a string `s` and returns `#t` if the length of the string is odd, otherwise `#f`. It utilizes the built-in `string-length` function to determine the length of the string and the `odd?` predicate to check if the length is odd."}
{"name":"mbpp_80_tetrahedral_number","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the nth tetrahedral number.\n(define (tetrahedral_number n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_80_tetrahedral_number.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tetrahedral_number))\n    (check-within (candidate 5) 35 0.001)\n    (check-within (candidate 6) 56 0.001)\n    (check-within (candidate 7) 84 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_80_tetrahedral_number","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the nth tetrahedral number.\n;; A tetrahedral number, or triangular pyramidal number, is a figurate number \n;; that represents a pyramid with a triangular base and three sides (a tetrahedron).\n;; The nth tetrahedral number is given by the formula:\n;; T(n) = n * (n + 1) * (n + 2) \/ 6\n\n(define (tetrahedral_number n)\n  (\/ (* n (+ n 1) (+ n 2)) 6))\n\n;; Test cases\n(tetrahedral_number 1)  ; Output: 1\n(tetrahedral_number 2)  ; Output: 4\n(tetrahedral_number 3)  ; Output: 10\n(tetrahedral_number 4)  ; Output: 20\n```\n\nThis Racket code defines a function `tetrahedral_number` that calculates the nth tetrahedral number using the mathematical formula for tetrahedral numbers. The test cases provided can help verify the correctness of the function."}
{"name":"mbpp_83_get_Char","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n(define (get_Char strr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_83_get_Char.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_Char))\n    (check-within (candidate \"abc\") \"f\" 0.001)\n    (check-within (candidate \"gfg\") \"t\" 0.001)\n    (check-within (candidate \"ab\") \"c\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_83_get_Char","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n(define (get_Char strr)\n  (define total-ascii (apply + (map char->integer (string->list strr))))\n  (define mod-value (modulo total-ascii 26))\n  (define base-char (integer->char (+ (char->integer #\\a) mod-value)))\n  base-char\n)\n\n;; Example usage:\n(get_Char \"hello\")  ;; Output might be a specific character, depending on the total ASCII calculation\n```\n\nThe function `get_Char` takes a string `strr`, calculates the sum of the ASCII values of its characters, takes that sum modulo 26, and then converts this modulo value into a corresponding lowercase letter character."}
{"name":"mbpp_84_sequence","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the nth number in the newman conway sequence.\n(define (sequence n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_84_sequence.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequence))\n    (check-within (candidate 10) 6 0.001)\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 3) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_84_sequence","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the nth number in the newman conway sequence.\n(define (newman-conway n)\n  (define (helper k)\n    (cond\n      [(= k 1) 1]\n      [(= k 2) 1]\n      [else (+ (helper (helper (- k 1))) (helper (- k (helper (- k 1)))))])\n  )\n  (helper n)\n)\n\n;; Testing the function with some values\n(newman-conway 5) ;; => 3\n(newman-conway 10) ;; => 6\n(newman-conway 15) ;; => 9\n```"}
{"name":"mbpp_86_centered_hexagonal_number","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find nth centered hexagonal number.\n(define (centered_hexagonal_number n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_86_centered_hexagonal_number.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate centered_hexagonal_number))\n    (check-within (candidate 10) 271 0.001)\n    (check-within (candidate 2) 7 0.001)\n    (check-within (candidate 9) 217 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_86_centered_hexagonal_number","gpt_solution":"```racket\n#lang racket\n\n;; A centered hexagonal number is a figurate number that represents a \n;; hexagon with a dot in the center and all other dots surrounding \n;; the center dot. The centered hexagonal number for a given n \n;; is given by the formula: 3n(n-1) + 1\n\n;; Write a function to find nth centered hexagonal number.\n(define (centered_hexagonal_number n)\n  (+ 1 (* 3 n (sub1 n))))\n\n;; Example usage:\n(centered_hexagonal_number 1) ; 1\n(centered_hexagonal_number 2) ; 7\n(centered_hexagonal_number 3) ; 19\n(centered_hexagonal_number 4) ; 37\n(centered_hexagonal_number 5) ; 61\n```"}
{"name":"mbpp_87_merge_dictionaries_three","language":"rkt","prompt":"#lang racket\n\n;; Write a function to merge three dictionaries into a single hash.\n(define (merge_dictionaries_three dict1 dict2 dict3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_87_merge_dictionaries_three.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate merge_dictionaries_three))\n    (check-within (candidate #hash((\"R\" .  \"Red\") (\"B\" .  \"Black\") (\"P\" .  \"Pink\")) #hash((\"G\" .  \"Green\") (\"W\" .  \"White\")) #hash((\"O\" .  \"Orange\") (\"W\" .  \"White\") (\"B\" .  \"Black\"))) #hash((\"B\" .  \"Black\") (\"R\" .  \"Red\") (\"P\" .  \"Pink\") (\"G\" .  \"Green\") (\"W\" .  \"White\") (\"O\" .  \"Orange\")) 0.001)\n    (check-within (candidate #hash((\"R\" .  \"Red\") (\"B\" .  \"Black\") (\"P\" .  \"Pink\")) #hash((\"G\" .  \"Green\") (\"W\" .  \"White\")) #hash((\"L\" .  \"lavender\") (\"B\" .  \"Blue\"))) #hash((\"W\" .  \"White\") (\"P\" .  \"Pink\") (\"B\" .  \"Black\") (\"R\" .  \"Red\") (\"G\" .  \"Green\") (\"L\" .  \"lavender\")) 0.001)\n    (check-within (candidate #hash((\"R\" .  \"Red\") (\"B\" .  \"Black\") (\"P\" .  \"Pink\")) #hash((\"L\" .  \"lavender\") (\"B\" .  \"Blue\")) #hash((\"G\" .  \"Green\") (\"W\" .  \"White\"))) #hash((\"B\" .  \"Black\") (\"P\" .  \"Pink\") (\"R\" .  \"Red\") (\"G\" .  \"Green\") (\"L\" .  \"lavender\") (\"W\" .  \"White\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_87_merge_dictionaries_three","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to merge three dictionaries into a single hash.\n(define (merge_dictionaries_three dict1 dict2 dict3)\n  (define result (make-hash))\n  (for-each (lambda (dict)\n              (for-each (lambda (kv)\n                          (hash-set! result (car kv) (cdr kv)))\n                        (hash->list dict)))\n            (list dict1 dict2 dict3))\n  result)\n\n;; Example usage:\n(define dict1 (make-hash '((a . 1) (b . 2) (c . 3))))\n(define dict2 (make-hash '((d . 4) (e . 5) (f . 6))))\n(define dict3 (make-hash '((g . 7) (h . 8) (i . 9))))\n\n(define merged-dict (merge_dictionaries_three dict1 dict2 dict3))\n;; Should print the merged dictionary\n(hash-ref merged-dict 'a) ;; Output: 1\n(hash-ref merged-dict 'e) ;; Output: 5\n(hash-ref merged-dict 'i) ;; Output: 9\n```"}
{"name":"mbpp_88_freq_count","language":"rkt","prompt":"#lang racket\n\n;; Write a function to get the frequency of all the elements in a list, returned as a hash.\n(define (freq_count list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_88_freq_count.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate freq_count))\n    (check-within (candidate (list 10 10 10 10 20 20 20 20 40 40 50 50 30)) #hash((10 .  4) (20 .  4) (40 .  2) (50 .  2) (30 .  1)) 0.001)\n    (check-within (candidate (list 1 2 3 4 3 2 4 1 3 1 4)) #hash((1 .  3) (2 .  2) (3 .  3) (4 .  3)) 0.001)\n    (check-within (candidate (list 5 6 7 4 9 10 4 5 6 7 9 5)) #hash((10 .  1) (5 .  3) (6 .  2) (7 .  2) (4 .  2) (9 .  2)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_88_freq_count","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to get the frequency of all the elements in a list, returned as a hash.\n(define (freq_count list1)\n  (define freq-hash (make-hash))\n  (for ([elem list1])\n    (hash-update! freq-hash elem (lambda (x) (+ x 1)) 0))\n  freq-hash)\n\n;; Example usage:\n;; (freq_count '(a b a c a b))\n;; -> '#hash((a . 3) (b . 2) (c . 1))\n```"}
{"name":"mbpp_89_closest_num","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the closest smaller number than n.\n(define (closest_num N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_89_closest_num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_num))\n    (check-within (candidate 11) 10 0.001)\n    (check-within (candidate 7) 6 0.001)\n    (check-within (candidate 12) 11 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_89_closest_num","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the closest smaller number than n.\n(define (closest_num n)\n  (if (> n 0)\n      (- n 1)\n      (error \"No closest smaller number for non-positive input\")))\n\n;; Example usage\n(closest_num 10) ;; Should return 9\n(closest_num 0)  ;; Should raise an error\n```"}
{"name":"mbpp_90_len_log","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the length of the longest word.\n(define (len_log list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_90_len_log.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate len_log))\n    (check-within (candidate (list \"python\" \"PHP\" \"bigdata\")) 7 0.001)\n    (check-within (candidate (list \"a\" \"ab\" \"abc\")) 3 0.001)\n    (check-within (candidate (list \"small\" \"big\" \"tall\")) 5 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_90_len_log","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the length of the longest word in a list of words.\n(define (len_log list1)\n  (define (longest-word-length lst)\n    (if (empty? lst)\n        0\n        (max (string-length (first lst)) (longest-word-length (rest lst)))))\n  (longest-word-length list1))\n\n;; Example usage:\n;; (len_log '(\"apple\" \"banana\" \"pear\" \"cherry\")) => 6\n```\n\nExplanation:\n- The `len_log` function wraps another helper function `longest-word-length` which performs the actual length calculation.\n- `longest-word-length` recursively iterates through the list, using the `string-length` function to find the length of each word.\n- The `max` function is used to keep track of the longest length found so far.\n- The `if` statement checks if the list is empty and returns 0 as the base case for recursion."}
{"name":"mbpp_91_find_substring","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if a string is present as a substring in a given list of string values.\n(define (find_substring str1 sub_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_91_find_substring.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_substring))\n    (check-within (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"ack\") #t 0.001)\n    (check-within (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"abc\") #f 0.001)\n    (check-within (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"ange\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_91_find_substring","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if a string is present as a substring in a given list of string values.\n(define (find_substring str1 sub_str)\n  (ormap (\u03bb (s) (string-contains? s str1)) sub_str))\n  \n;; Test cases\n(define test_list '(\"hello\" \"world\" \"example\" \"test\"))\n(find_substring \"exam\" test_list) ;; Should return #true\n(find_substring \"xyz\" test_list) ;; Should return #false\n```\n\nIn this code:\n- The `find_substring` function takes two arguments: `str1` which is the substring to find, and `sub_str` which is the list of string values.\n- The `ormap` function is used to apply a lambda function to every element of `sub_str`. This lambda function checks whether `str1` is present in each string using the `string-contains?` function.\n- If any element in the list contains the substring `str1`, the `ormap` function returns `#true`. If none of the elements contain the substring, it returns `#false`."}
{"name":"mbpp_92_is_undulating","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the given number is undulating or not.\n(define (is_undulating n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_92_is_undulating.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_undulating))\n    (check-within (candidate 1212121) #t 0.001)\n    (check-within (candidate 1991) #f 0.001)\n    (check-within (candidate 121) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_92_is_undulating","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the given number is undulating or not.\n(define (is_undulating n)\n  (let* ((str-n (number->string n))\n         (len (string-length str-n)))\n    (if (< len 3)\n        #f\n        (let ((first-char (string-ref str-n 0))\n              (second-char (string-ref str-n 1)))\n          (and (not (= first-char second-char))\n               (for\/and ([i (in-range len)])\n                 (= (string-ref str-n i)\n                    (if (even? i) first-char second-char))))))))\n\n;; Test cases\n(is_undulating 121212)  ; #t\n(is_undulating 123123)  ; #f\n(is_undulating 0)       ; #f\n(is_undulating 12)      ; #f\n(is_undulating 212121)  ; #t\n```"}
{"name":"mbpp_93_power","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate the value of 'a' to the power 'b'.\n(define (power a b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_93_power.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power))\n    (check-within (candidate 3 4) 81 0.001)\n    (check-within (candidate 2 3) 8 0.001)\n    (check-within (candidate 5 5) 3125 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_93_power","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to calculate the value of 'a' to the power 'b'.\n(define (power a b)\n  (if (= b 0)\n      1\n      (* a (power a (- b 1)))))\n```\n\nThis Racket function `power` calculates `a` raised to the power of `b` using recursion. If `b` is 0, it returns 1 (since any number to the power of 0 is 1). Otherwise, it multiplies `a` by the result of the function called with `a` and `b-1`."}
{"name":"mbpp_94_index_minimum","language":"rkt","prompt":"#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_94_index_minimum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_minimum))\n    (check-within (candidate (list (list \"Rash\" 143) (list \"Manjeet\" 200) (list \"Varsha\" 100))) \"Varsha\" 0.001)\n    (check-within (candidate (list (list \"Yash\" 185) (list \"Dawood\" 125) (list \"Sanya\" 175))) \"Dawood\" 0.001)\n    (check-within (candidate (list (list \"Sai\" 345) (list \"Salman\" 145) (list \"Ayesha\" 96))) \"Ayesha\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_94_index_minimum","gpt_solution":"```racket\n#lang racket\n\n;; Given a list of lists, write a function that returns the first value of the list with the smallest second value.\n(define (index_minimum test_list)\n  (define (helper min_list rest)\n    (if (null? rest)\n        min_list\n        (let ([current (car rest)])\n          (if (< (cadr current) (cadr min_list))\n              (helper current (cdr rest))\n              (helper min_list (cdr rest))))))\n  (car (helper (car test_list) (cdr test_list))))\n\n;; Example usage\n(index_minimum '((1 5) (2 3) (3 9) (4 2)))\n;; Expected output: 4\n```"}
{"name":"mbpp_95_Find_Min_Length","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the length of the smallest list in a list of lists.\n(define (Find_Min_Length lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_95_Find_Min_Length.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Min_Length))\n    (check-within (candidate (list (list 1) (list 1 2))) 1 0.001)\n    (check-within (candidate (list (list 1 2) (list 1 2 3) (list 1 2 3 4))) 2 0.001)\n    (check-within (candidate (list (list 3 3 3) (list 4 4 4 4))) 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_95_Find_Min_Length","gpt_solution":"```racket\n#lang racket\n\n;; Define a function to find the length of the smallest list in a list of lists.\n(define (Find_Min_Length lst)\n  (if (null? lst)\n      0\n      (let loop ((rest lst) (min-len (length (first lst))))\n        (if (null? rest)\n            min-len\n            (let ((current-len (length (first rest))))\n              (loop (rest rest) (min min-len current-len)))))))\n\n;; Example usage\n(define example-list '((1 2 3) (4 5) (6 7 8 9)))\n(Find_Min_Length example-list)  ;; Should return 2 because (4 5) is the smallest list\n```"}
{"name":"mbpp_96_divisor","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the number of divisors of a given integer.\n(define (divisor n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_96_divisor.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisor))\n    (check-within (candidate 15) 4 0.001)\n    (check-within (candidate 12) 6 0.001)\n    (check-within (candidate 9) 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_96_divisor","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the number of divisors of a given integer.\n(define (divisor n)\n  (define (count-divisors k count)\n    (if (> k n)\n        count\n        (if (= (remainder n k) 0)\n            (count-divisors (+ k 1) (+ count 1))\n            (count-divisors (+ k 1) count))))\n  (count-divisors 1 0))\n```"}
{"name":"mbpp_97_frequency_lists","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find frequency of each element in a flattened list of lists, returned in a hash.\n(define (frequency_lists list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_97_frequency_lists.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate frequency_lists))\n    (check-within (candidate (list (list 1 2 3 2) (list 4 5 6 2) (list 7 8 9 5))) #hash((1 .  1) (2 .  3) (3 .  1) (4 .  1) (5 .  2) (6 .  1) (7 .  1) (8 .  1) (9 .  1)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12))) #hash((1 .  1) (2 .  1) (3 .  1) (4 .  1) (5 .  1) (6 .  1) (7 .  1) (8 .  1) (9 .  1) (10 .  1) (11 .  1) (12 .  1)) 0.001)\n    (check-within (candidate (list (list 20 30 40 17) (list 18 16 14 13) (list 10 20 30 40))) #hash((20 .  2) (30 .  2) (40 .  2) (17 .  1) (18 .  1) (16 .  1) (14 .  1) (13 .  1) (10 .  1)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_97_frequency_lists","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find frequency of each element in a flattened list of lists, returned in a hash.\n(define (frequency_lists list1)\n  (define flattened-list (apply append list1)) ; Flatten the list of lists\n  (define frequencies (make-hash)) ; Create an empty hash\n  \n  (for-each (lambda (item)\n              (hash-set! frequencies item (add1 (hash-ref frequencies item 0))))\n            flattened-list)\n  frequencies)\n\n;; Example usage:\n;; (frequency_lists '((1 2 2) (3 1) (2 2 2)))\n;; Returns: '#hash((1 . 2) (2 . 5) (3 . 1))\n```\n\nThis function `frequency_lists` accepts a list of lists, flattens it into a single list, then calculates the frequency of each element using a hash. It uses the `for-each` loop to iterate through the flattened list, updating the hash with the frequency of each element."}
{"name":"mbpp_99_decimal_to_binary","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n(define (decimal_to_binary n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_99_decimal_to_binary.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-within (candidate 8) \"1000\" 0.001)\n    (check-within (candidate 18) \"10010\" 0.001)\n    (check-within (candidate 7) \"111\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_99_decimal_to_binary","gpt_solution":"Sure, here's the completed code wrapped in markdown syntax:\n\n```racket\n#lang racket\n\n;; Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n(define (decimal_to_binary n)\n  (define (convert n)\n    (if (= n 0)\n        \"\"\n        (string-append (convert (quotient n 2)) (number->string (remainder n 2)))))\n  (let ([binary (convert n)])\n    (if (string=? binary \"\")\n        \"0\"\n        binary)))\n```\n\nIn this function:\n- The `convert` helper function is defined to recursively determine the binary representation of the number `n`.\n- This helper function concatenates the remainder (`0` or `1`) of `n` divided by `2` to the result of the recursive call with `n` divided by `2`.\n- After the recursion completes, the `binary` string variable either contains the binary equivalent without leading zeros or is empty (if `n` was `0`).\n- The `let` expression checks if `binary` is empty, and if so, it returns `\"0\"`; otherwise, it returns the `binary` string."}
{"name":"mbpp_100_next_smallest_palindrome","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n(define (next_smallest_palindrome num)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_100_next_smallest_palindrome.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest_palindrome))\n    (check-within (candidate 99) 101 0.001)\n    (check-within (candidate 1221) 1331 0.001)\n    (check-within (candidate 120) 121 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_100_next_smallest_palindrome","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n(define (next-smallest-palindrome num)\n  (define (is-palindrome? n)\n    (let ([s (number->string n)])\n      (string=? s (string-reverse s))))\n  \n  (let loop ([n (+ num 1)])\n    (if (is-palindrome? n)\n        n\n        (loop (+ n 1)))))\n\n;; Example usage:\n(next-smallest-palindrome 123)\n```\n\nThis Racket program defines a function `next-smallest-palindrome` that takes in an integer `num` and finds the next smallest palindrome greater than `num`. The `is-palindrome?` helper function checks if a given number is a palindrome by converting it to a string and comparing the string to its reverse. The `loop` function recursively tests each successive integer greater than `num` until it finds a palindrome, which it then returns."}
{"name":"mbpp_101_kth_element","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the kth element in the given list using 1-based indexing.\n(define (kth_element arr k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_101_kth_element.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate kth_element))\n    (check-within (candidate (list 12 3 5 7 19) 2) 3 0.001)\n    (check-within (candidate (list 17 24 8 23) 3) 8 0.001)\n    (check-within (candidate (list 16 21 25 36 4) 4) 36 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_101_kth_element","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the kth element in the given list using 1-based indexing.\n(define (kth_element arr k)\n  (if (or (<= k 0) (> k (length arr)))\n      (error \"Index out of bounds\")\n      (list-ref arr (- k 1))))\n\n;; Example usage:\n;; (kth_element '(a b c d e) 3) ; 'c\n```\n\nIn this code:\n1. We check if `k` is out of bounds. If it is, we raise an error.\n2. We use `list-ref` to get the `(k-1)`-th element of the list, since Racket uses 0-based indexing but the problem specifies 1-based indexing. Thus, we need to subtract 1 from `k` to get the correct element."}
{"name":"mbpp_102_snake_to_camel","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_102_snake_to_camel.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-within (candidate \"python_program\") \"PythonProgram\" 0.001)\n    (check-within (candidate \"python_language\") \"PythonLanguage\" 0.001)\n    (check-within (candidate \"programming_language\") \"ProgrammingLanguage\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_102_snake_to_camel","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert a snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (capitalize-first s)\n    (string-append (string-upcase (string (string-ref s 0))) \n                   (substring s 1)))\n  (define words (string-split word #\\_))\n  (string-append (first words)\n                 (apply string-append (map capitalize-first (rest words)))))\n                 \n;; Example usage:\n(snake_to_camel \"this_is_snake_case\")  ; => \"thisIsSnakeCase\"\n```"}
{"name":"mbpp_103_eulerian_num","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the Eulerian number a(n, m).\n(define (eulerian_num n m)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_103_eulerian_num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eulerian_num))\n    (check-within (candidate 3 1) 4 0.001)\n    (check-within (candidate 4 1) 11 0.001)\n    (check-within (candidate 5 3) 26 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_103_eulerian_num","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the Eulerian number a(n, m).\n(define (eulerian n m)\n  (cond\n    ((or (< m 0) (> m n)) 0)                              ; base case: a(n, m) = 0 if m < 0 or m > n\n    ((= n 0) (if (= m 0) 1 0))                            ; base case: a(0, 0) = 1, a(0, m) = 0 for any m > 0\n    (else (+ (* (- n m) (eulerian (- n 1) m))             ; recursive step: a(n, m) = (n-m)*a(n-1, m) + (m+1)*a(n-1, m-1)\n              (* (+ m 1) (eulerian (- n 1) (- m 1)))))))  ;               + (m+1)*a(n-1, m-1)\n\n;; Testing the function\n(eulerian 4 2)  ;; Expected output: 11\n(eulerian 5 3)  ;; Expected output: 35\n(eulerian 0 0)  ;; Expected output: 1\n(eulerian 3 1)  ;; Expected output: 4\n```"}
{"name":"mbpp_104_sort_sublists","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort each sublist of strings in a given list of lists.\n(define (sort_sublists input_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_104_sort_sublists.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_sublists))\n    (check-within (candidate (list (list \"green\" \"orange\") (list \"black\" \"white\") (list \"white\" \"black\" \"orange\"))) (list (list \"green\" \"orange\") (list \"black\" \"white\") (list \"black\" \"orange\" \"white\")) 0.001)\n    (check-within (candidate (list (list \" red \" \"green\") (list \"blue \" \" black\") (list \" orange\" \"brown\"))) (list (list \" red \" \"green\") (list \" black\" \"blue \") (list \" orange\" \"brown\")) 0.001)\n    (check-within (candidate (list (list \"zilver\" \"gold\") (list \"magnesium\" \"aluminium\") (list \"steel\" \"bronze\"))) (list (list \"gold\" \"zilver\") (list \"aluminium\" \"magnesium\") (list \"bronze\" \"steel\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_104_sort_sublists","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to sort each sublist of strings in a given list of lists.\n(define (sort-sublists input-list)\n  (map (lambda (sublist)\n         (sort sublist string<?))\n       input-list))\n\n;; Example usage:\n(define test-input '((\"apple\" \"banana\" \"cherry\")\n                     (\"doll\" \"cat\" \"ball\")\n                     (\"elephant\" \"fox\" \"giraffe\")))\n\n;; Call the function and display the result\n(display (sort-sublists test-input))\n;; Output: ((\"apple\" \"banana\" \"cherry\") (\"ball\" \"cat\" \"doll\") (\"elephant\" \"fox\" \"giraffe\"))\n```"}
{"name":"mbpp_105_count","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count true booleans in the given list.\n(define (count lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_105_count.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count))\n    (check-within (candidate (list #t #f #t)) 2 0.001)\n    (check-within (candidate (list #f #f)) 0 0.001)\n    (check-within (candidate (list #t #t #t)) 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_105_count","gpt_solution":"```racket\n#lang racket\n\n;; Function to count the number of true booleans in the given list.\n(define (count-true-booleans lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(and (boolean? (first lst)) (first lst)) (helper (rest lst) (+ acc 1))]\n      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n;; Example usage:\n(count-true-booleans '(true false true true false)) ; => 3\n(count-true-booleans '(false false false)) ; => 0\n(count-true-booleans '(true true)) ; => 2\n(count-true-booleans '()) ; => 0\n```"}
{"name":"mbpp_106_add_lists","language":"rkt","prompt":"#lang racket\n\n;; Write a function to append the given list to the given lists.\n(define (add_lists test_list test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_106_add_lists.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_lists))\n    (check-within (candidate (list 5 6 7) (list 9 10)) (list 9 10 5 6 7) 0.001)\n    (check-within (candidate (list 6 7 8) (list 10 11)) (list 10 11 6 7 8) 0.001)\n    (check-within (candidate (list 7 8 9) (list 11 12)) (list 11 12 7 8 9) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_106_add_lists","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to append the given list to the given lists.\n(define (add_lists test_list test_tup)\n  (map (lambda (lst) (append lst test_list)) test_tup))\n\n;; Example usage:\n;; (add_lists '(4 5) '((1 2) (3 4) (5 6)))\n;; Expected output: '((1 2 4 5) (3 4 4 5) (5 6 4 5))\n```"}
{"name":"mbpp_108_merge_sorted_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to merge three lists into a single sorted list.\n(define (merge_sorted_list num1 num2 num3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_108_merge_sorted_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate merge_sorted_list))\n    (check-within (candidate (list 25 24 15 4 5 29 110) (list 19 20 11 56 25 233 154) (list 24 26 54 48)) (list 4 5 11 15 19 20 24 24 25 25 26 29 48 54 56 110 154 233) 0.001)\n    (check-within (candidate (list 1 3 5 6 8 9) (list 2 5 7 11) (list 1 4 7 8 12)) (list 1 1 2 3 4 5 5 6 7 7 8 8 9 11 12) 0.001)\n    (check-within (candidate (list 18 14 10 9 8 7 9 3 2 4 1) (list 25 35 22 85 14 65 75 25 58) (list 12 74 9 50 61 41)) (list 1 2 3 4 7 8 9 9 9 10 12 14 14 18 22 25 25 35 41 50 58 61 65 74 75 85) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_108_merge_sorted_list","gpt_solution":"```racket\n#lang racket\n\n;; Given three sorted lists, merge them into a single sorted list.\n(define (merge-sorted-list lst1 lst2 lst3)\n  ;; Helper function to merge two sorted lists\n  (define (merge-two lst-a lst-b)\n    (cond [(empty? lst-a) lst-b]\n          [(empty? lst-b) lst-a]\n          [(<= (first lst-a) (first lst-b))\n           (cons (first lst-a) (merge-two (rest lst-a) lst-b))]\n          [else\n           (cons (first lst-b) (merge-two lst-a (rest lst-b)))]))\n  \n  ;; Merge the first two lists, then merge the result with the third list\n  (merge-two (merge-two lst1 lst2) lst3))\n\n;; Example usage:\n;; (merge-sorted-list '(1 3 5) '(2 4 6) '(0 7 8)) => '(0 1 2 3 4 5 6 7 8)\n```"}
{"name":"mbpp_109_odd_Equivalent","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n(define (odd_Equivalent s n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_109_odd_Equivalent.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_Equivalent))\n    (check-within (candidate \"011001\" 6) 3 0.001)\n    (check-within (candidate \"11011\" 5) 4 0.001)\n    (check-within (candidate \"1010\" 4) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_109_odd_Equivalent","gpt_solution":"Sure! Here's the completed Racket function:\n\n```racket\n#lang racket\n\n;; Write a rktthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n(define (odd-Equivalent s n)\n  (define (is-odd? num-str)\n    (odd? (string->number num-str 2)))\n  \n  (define (rotate binary-string times)\n    (define len (string-length binary-string))\n    (substring (string-append binary-string binary-string) times (+ times len)))\n  \n  (define (count-odd-values binary-string rotations)\n    (let loop ([i rotations] [count 0])\n      (if (zero? i)\n          count\n          (let ([new-binary (rotate binary-string (modulo (- rotations i) (string-length binary-string)))])\n            (loop (- i 1) (if (is-odd? new-binary) (+ count 1) count))))))\n  \n  (count-odd-values s n))\n\n;; Example usage:\n(odd-Equivalent \"101\" 3)\n```\n\nIn this function:\n- `is-odd?` checks if a binary string represents an odd number.\n- `rotate` generates the rotated version of the binary string.\n- `count-odd-values` counts the number of odd values by rotating the binary string the specified number of times.\n- `odd-Equivalent` is the main function that uses the helper functions to perform the required computation."}
{"name":"mbpp_113_check_integer","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if a string represents an integer or not.\n(define (check_integer text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_113_check_integer.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_integer))\n    (check-within (candidate \"python\") #f 0.001)\n    (check-within (candidate \"1\") #t 0.001)\n    (check-within (candidate \"12345\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_113_check_integer","gpt_solution":"Sure, here's the complete Racket code wrapped in markdown syntax:\n\n```racket\n#lang racket\n\n;; Write a function to check if a string represents an integer or not.\n(define (check_integer text)\n  (and (string? text)                            ;; Ensure the input is a string\n       (not (string-empty? text))                ;; Ensure the string is not empty\n       (let ([num (string->number text)])        ;; Attempt to convert the string to a number\n         (and num                                ;; Ensure the conversion resulted in a number\n              (integer? num)))))                 ;; Check if the number is an integer\n\n;; Examples:\n(check_integer \"123\")    ;; Should return #t\n(check_integer \"-123\")   ;; Should return #t\n(check_integer \"3.14\")   ;; Should return #f\n(check_integer \"abc\")    ;; Should return #f\n(check_integer \"\")       ;; Should return #f\n```"}
{"name":"mbpp_116_tuple_to_int","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert a given list of positive integers into a single integer.\n(define (tuple_to_int nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_116_tuple_to_int.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_int))\n    (check-within (candidate (list 1 2 3)) 123 0.001)\n    (check-within (candidate (list 4 5 6)) 456 0.001)\n    (check-within (candidate (list 5 6 7)) 567 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_116_tuple_to_int","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert a given list of positive integers into a single integer.\n(define (tuple_to_int nums)\n  (define (helper lst result)\n    (if (null? lst)\n        result\n        (helper (cdr lst) (+ (* result 10) (car lst)))))\n  (helper nums 0))\n\n;; Example usage:\n(tuple_to_int '(1 2 3 4)) ; Returns 1234\n(tuple_to_int '(5 6 7))   ; Returns 567\n```"}
{"name":"mbpp_117_list_to_float","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert all possible convertible elements in a list of lists to floats.\n(define (list_to_float test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_117_list_to_float.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate list_to_float))\n    (check-within (candidate (list (list \"3\" \"4\") (list \"1\" \"26.45\") (list \"7.32\" \"8\") (list \"4\" \"8\"))) (list (list 3.0 4.0) (list 1.0 26.45) (list 7.32 8.0) (list 4.0 8.0)) 0.001)\n    (check-within (candidate (list (list \"4\" \"4\") (list \"2\" \"27\") (list \"4.12\" \"9\") (list \"7\" \"11\"))) (list (list 4.0 4.0) (list 2.0 27.0) (list 4.12 9.0) (list 7.0 11.0)) 0.001)\n    (check-within (candidate (list (list \"6\" \"78\") (list \"5\" \"26.45\") (list \"1.33\" \"4\") (list \"82\" \"13\"))) (list (list 6.0 78.0) (list 5.0 26.45) (list 1.33 4.0) (list 82.0 13.0)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_117_list_to_float","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert all possible convertible elements in a list of lists to floats.\n(define (list_to_float test_list)\n  (map (lambda (lst)\n         (map (lambda (elem)\n                (cond\n                  [(number? elem) (real->float elem)]\n                  [(string? elem)\n                   (with-handlers ([exn:fail?\n                                    (lambda (exn) elem)])\n                     (string->number elem))]\n                  [else elem]))\n              lst))\n       test_list))\n\n;; Usage example\n(list_to_float '((1 \"3.14\" \"abc\") (5 6.78 \"9\" \"xyz\")))\n;; Output: '((1.0 3.14 \"abc\") (5.0 6.78 9.0 \"xyz\"))\n```\n\nThis function `list_to_float` takes a list of lists (`test_list`) as input and converts all possible convertible elements to floats. Within the function, we use `map` to traverse each element of the list, and apply nested `map` to process each sub-element. If an element is numeric, it converts the element to a float using `real->float`. If it is a string, it attempts to convert it using `string->number` while catching any exceptions if the string is not convertible, returning the original string. Elements that cannot be converted remain unchanged."}
{"name":"mbpp_118_string_to_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_118_string_to_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-within (candidate \"python programming\") (list \"python\" \"programming\") 0.001)\n    (check-within (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\") 0.001)\n    (check-within (candidate \"write a program\") (list \"write\" \"a\" \"program\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_118_string_to_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n  (regexp-split #rx\" \" string))\n\n;; Example usage\n(string_to_list \"Convert this string to a list\")\n; Expected output: '(\"Convert\" \"this\" \"string\" \"to\" \"a\" \"list\")\n```"}
{"name":"mbpp_119_search","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the element that appears only once in a sorted list.\n(define (search arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_119_search.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n    (check-within (candidate (list 1 1 2 2 3)) 3 0.001)\n    (check-within (candidate (list 1 1 3 3 4 4 5 5 7 7 8)) 8 0.001)\n    (check-within (candidate (list 1 2 2 3 3 4 4)) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_119_search","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the element that appears only once in a sorted list.\n(define (search arr)\n  (define n (length arr))\n  (define (binary-search lo hi)\n    (if (>= lo hi)\n        (list-ref arr lo)\n        (let ([mid (+ lo (quotient (- hi lo) 2))])\n          (cond\n            [(and (or (zero? mid) (not (= (list-ref arr mid) (list-ref arr (- mid 1)))))\n                  (or (= mid (- n 1)) (not (= (list-ref arr mid) (list-ref arr (+ mid 1))))))\n             (list-ref arr mid)]\n            [(and (= (modulo mid 2) 0) (= (list-ref arr mid) (list-ref arr (+ mid 1))))\n             (binary-search (+ mid 2) hi)]\n            [else\n             (binary-search lo (- mid 1))]))))\n  (binary-search 0 (- (length arr) 1)))\n```\n\nThis code defines a `search` function that looks for the element that appears only once in a sorted list, using a binary search approach for efficiency. The main strategy is to leverage the properties of the indices and the sorted order to narrow down the search region effectively."}
{"name":"mbpp_120_max_product_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_120_max_product_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-within (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36 0.001)\n    (check-within (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200 0.001)\n    (check-within (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_120_max_product_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max-product-tuple list1)\n  (define (abs-product lst)\n    (apply max (map (lambda (x) (abs (* (first x) (second x))))\n                     (for*\/list ([i (in-list lst)] [j (in-list lst)] #:when (not (eq? i j))) (list i j)))))\n  (apply max (map abs-product list1)))\n\n;; Test cases\n(max-product-tuple '((1 2 3) (4 5 6) (-7 8 -9))) ; => 81\n(max-product-tuple '((1 -2) (3 -4))) ; => 8\n(max-product-tuple '((10 20) (30 40))) ; => 800\n(max-product-tuple '(() ())) ; => -inf (since there are no pairs to compare)\n```\n\nThe `max-product-tuple` function takes a list where each element is another list of numbers. It computes the maximum absolute product between any two numbers within each inner list and then determines the maximum of these products across all inner lists."}
{"name":"mbpp_123_amicable_numbers_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sum all amicable numbers from 1 to a specified number.\n(define (amicable_numbers_sum limit)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_123_amicable_numbers_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate amicable_numbers_sum))\n    (check-within (candidate 999) 504 0.001)\n    (check-within (candidate 9999) 31626 0.001)\n    (check-within (candidate 99) 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_123_amicable_numbers_sum","gpt_solution":"```racket\n#lang racket\n\n;; A helper function to find the sum of proper divisors of a number\n(define (sum-of-divisors n)\n  (define (divisors-sum-helper n d sum)\n    (cond\n     [(= d 1) sum]\n     [(= (modulo n d) 0) (divisors-sum-helper n (sub1 d) (+ sum d))]\n     [else (divisors-sum-helper n (sub1 d) sum)]))\n  (divisors-sum-helper n (sub1 n) 0))\n\n;; Function to determine if two numbers are amicable\n(define (amicable? a b)\n  (and (= a (sum-of-divisors b))\n       (= b (sum-of-divisors a))\n       (not (= a b))))\n\n;; Function to compute the sum of all amicable numbers from 1 to the given limit\n(define (amicable-numbers-sum limit)\n  (define (amicable-sum-helper n sum)\n    (if (>= n limit)\n        sum\n        (let ([div-sum (sum-of-divisors n)])\n          (if (and (< n div-sum)\n                   (amicable? n div-sum))\n              (amicable-sum-helper (add1 n) (+ sum n div-sum))\n              (amicable-sum-helper (add1 n) sum)))))\n  (amicable-sum-helper 1 0))\n\n;; Example usage\n(amicable-numbers-sum 10000) ; This will calculate the sum of all amicable numbers from 1 to 9999\n```"}
{"name":"mbpp_125_find_length","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_125_find_length.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-within (candidate \"11000010001\") 6 0.001)\n    (check-within (candidate \"10111\") 1 0.001)\n    (check-within (candidate \"11011101100101\") 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_125_find_length","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find-max-difference binary-string)\n  (define max-diff 0)\n  (define current-diff 0)\n\n  (for ([char (in-string binary-string)])\n    (set! current-diff (if (equal? char #\\0)\n                           (add1 current-diff)\n                           (sub1 current-diff)))\n    (when (< current-diff 0)\n      (set! current-diff 0))\n    (set! max-diff (max max-diff current-diff)))\n\n  max-diff)\n\n;; Example usage:\n(find-max-difference \"110000100000111\")\n```\n\nExplanation:\n\n1. The function `find-max-difference` takes a binary string as input.\n2. It initializes `max-diff` to hold the maximum difference found and `current-diff` to track the difference in the current sub-string.\n3. It iterates over each character in the string: \n   - Increases `current-diff` for each '0'.\n   - Decreases `current-diff` for each '1'.\n   - If `current-diff` becomes negative, it resets to 0 (indicating the start of a new sub-string).\n   - Updates `max-diff` if `current-diff` exceeds the previous maximum difference.\n4. Finally, it returns `max-diff` which represents the maximum difference between the number of 0s and 1s in any sub-string of the input."}
{"name":"mbpp_126_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of common divisors of two given numbers.\n(define (sum a b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_126_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum))\n    (check-within (candidate 10 15) 6 0.001)\n    (check-within (candidate 100 150) 93 0.001)\n    (check-within (candidate 4 6) 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_126_sum","gpt_solution":"```racket\n#lang racket\n\n(define (gcd a b)\n  (if (= b 0)\n      a\n      (gcd b (remainder a b))))\n\n(define (common-divisors a b)\n  (define common-gcd (gcd a b))\n  (define (divisors n)\n    (filter (lambda (d) (= (remainder n d) 0))\n            (range 1 (+ n 1))))\n  (divisors common-gcd))\n\n(define (sum-of-common-divisors a b)\n  (apply + (common-divisors a b)))\n  \n;; Example usage:\n;; (sum-of-common-divisors 12 18)  ; returns 6 because common divisors are 1, 2, 3, 6 and their sum is 12.\n```"}
{"name":"mbpp_127_multiply_int","language":"rkt","prompt":"#lang racket\n\n;; Write a function to multiply two integers.\n(define (multiply_int x y)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_127_multiply_int.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply_int))\n    (check-within (candidate 10 20) 200 0.001)\n    (check-within (candidate 5 10) 50 0.001)\n    (check-within (candidate 4 8) 32 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_127_multiply_int","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to multiply two integers.\n(define (multiply_int x y)\n  (* x y))\n```\n\nThis Racket function `multiply_int` takes two integer arguments `x` and `y` and returns their product using the built-in multiplication operator `*`."}
{"name":"mbpp_128_long_words","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find words that are longer than n characters from a given list of words.\n(define (long_words n str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_128_long_words.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate long_words))\n    (check-within (candidate 3 \"python is a programming language\") (list \"python\" \"programming\" \"language\") 0.001)\n    (check-within (candidate 2 \"writing a program\") (list \"writing\" \"program\") 0.001)\n    (check-within (candidate 5 \"sorting list\") (list \"sorting\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_128_long_words","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find words that are longer than n characters from a given list of words.\n(define (long_words n str)\n  (filter (lambda (word) \n            (> (string-length word) n))\n          str))\n\n;; Example usage:\n(long_words 3 '(\"apple\" \"to\" \"banana\" \"a\" \"kiwi\")) ;; Returns '(\"apple\" \"banana\" \"kiwi\")\n```"}
{"name":"mbpp_129_magic_square_test","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate whether the matrix is a magic square.\n(define (magic_square_test my_matrix)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_129_magic_square_test.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate magic_square_test))\n    (check-within (candidate (list (list 7 12 1 14) (list 2 13 8 11) (list 16 3 10 5) (list 9 6 15 4))) #t 0.001)\n    (check-within (candidate (list (list 2 7 6) (list 9 5 1) (list 4 3 8))) #t 0.001)\n    (check-within (candidate (list (list 2 7 6) (list 9 5 1) (list 4 3 7))) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_129_magic_square_test","gpt_solution":"```racket\n#lang racket\n\n;; A function to calculate whether the matrix is a magic square.\n(define (magic_square_test my_matrix)\n  (define n (length my_matrix))\n  (define (sum lst) (apply + lst))\n\n  ;; Check if all rows have equal sums\n  (define row-sum (sum (first my_matrix)))\n  (define check-rows\n    (andmap (lambda (row) (= (sum row) row-sum)) my_matrix))\n\n  ;; Check if all cols have equal sums\n  (define cols (apply map list my_matrix))\n  (define check-cols\n    (andmap (lambda (col) (= (sum col) row-sum)) cols))\n\n  ;; Check if diagonals have equal sums\n  (define diag1-sum\n    (sum (map (lambda (i) (list-ref (list-ref my_matrix i) i)) (range n))))\n  (define diag2-sum\n    (sum (map (lambda (i) (list-ref (list-ref my_matrix i) (- n i 1))) (range n))))\n  (define check-diags (= diag1-sum row-sum diag2-sum))\n  \n  (and check-rows check-cols check-diags))\n\n;; Example usage\n(define matrix '((2 7 6)\n                 (9 5 1)\n                 (4 3 8)))\n\n(magic_square_test matrix) ; should return #t for true as this is a magic square\n```"}
{"name":"mbpp_130_max_occurrences","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the item with maximum frequency in a given list.\n(define (max_occurrences nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_130_max_occurrences.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_occurrences))\n    (check-within (candidate (list 2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2)) 2 0.001)\n    (check-within (candidate (list 2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18)) 8 0.001)\n    (check-within (candidate (list 10 20 20 30 40 90 80 50 30 20 50 10)) 20 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_130_max_occurrences","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the item with maximum frequency in a given list.\n(define (max_occurrences nums)\n  (define (frequency lst)\n    (foldl (lambda (x acc)\n             (hash-set acc x (add1 (hash-ref acc x 0))))\n           (make-hash)\n           lst))\n\n  (define freqs (frequency nums))\n  (define max-pair\n    (foldl (lambda (k p)\n             (if (> (hash-ref freqs k) (cdr p))\n                 (cons k (hash-ref freqs k))\n                 p))\n           (cons (first (hash-keys freqs)) 0)\n           (hash-keys freqs)))\n\n  (car max-pair))\n\n;; Example usage\n(max_occurrences '(1 2 2 3 3 3 4 4 4 4)) ; Should return 4\n```"}
{"name":"mbpp_131_reverse_vowels","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to reverse only the vowels of a given string (where y is not a vowel).\n(define (reverse_vowels str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_131_reverse_vowels.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_vowels))\n    (check-within (candidate \"Python\") \"Python\" 0.001)\n    (check-within (candidate \"USA\") \"ASU\" 0.001)\n    (check-within (candidate \"ab\") \"ab\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_131_reverse_vowels","gpt_solution":"```racket\n#lang racket\n\n;; Write a Racket function to reverse only the vowels of a given string (where y is not a vowel).\n\n(define (reverse_vowels str1)\n  ;; Helper function to check if a character is a vowel.\n  (define (vowel? ch)\n    (member ch '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\n  ;; Convert the string to a list of characters.\n  (define char-list (string->list str1))\n  \n  ;; Extract the vowels from the list of characters.\n  (define vowels (filter vowel? char-list))\n  \n  ;; Reverse the list of vowels.\n  (define reversed-vowels (reverse vowels))\n  \n  ;; Create a new list to store the result.\n  (define result '())\n  \n  ;; Initialize a counter for the reversed vowels list.\n  (define vowel-index 0)\n  \n  ;; Iterate over the character list to construct the result.\n  (for ([ch char-list])\n    (if (vowel? ch)\n        (begin\n          (set! result (append result (list (list-ref reversed-vowels vowel-index))))\n          (set! vowel-index (+ vowel-index 1)))\n        (set! result (append result (list ch)))))\n  \n  ;; Convert the result list back to a string.\n  (list->string result))\n\n;; Example usage\n(reverse_vowels \"hello world\")  ;; \"hollo werld\"\n(reverse_vowels \"racket\")       ;; \"recket\"\n(reverse_vowels \"AEIOU\")        ;; \"UOIEA\"\n(reverse_vowels \"python\")       ;; \"python\" (no change as no vowels to reverse)\n```\n\nThis code defines a Racket function `reverse_vowels` that takes a string and reverses only the vowels in it. It includes a helper function `vowel?` to check if a character is a vowel, then proceeds to filter, reverse, and reinsert the vowels into their respective positions to achieve the desired output."}
{"name":"mbpp_132_tup_string","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert a list to a string.\n(define (tup_string tup1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_132_tup_string.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tup_string))\n    (check-within (candidate (list \"e\" \"x\" \"e\" \"r\" \"c\" \"i\" \"s\" \"e\" \"s\")) \"exercises\" 0.001)\n    (check-within (candidate (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\")) \"python\" 0.001)\n    (check-within (candidate (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\")) \"program\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_132_tup_string","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert a list to a string.\n(define (tup_string tup1)\n  (define (list-to-string lst)\n    (if (null? lst)\n        \"\"\n        (string-append (if (string? (first lst))\n                           (first lst)\n                           (number->string (first lst)))\n                       (list-to-string (rest lst)))))\n  (list-to-string tup1))\n\n;; Example usage\n(tup_string '(1 2 3))       ; => \"123\"\n(tup_string '(\"a\" \"b\" \"c\")) ; => \"abc\"\n(tup_string '(1 \"b\" 3))      ; => \"1b3\"\n```\n\nThis code defines a function `tup_string` which takes a list and converts it to a string by concatenating each element of the list. The function `list-to-string` recursively processes the list, converting each element to a string and appending it to the result. If the element is a string, it's directly appended; if it's a number, it's converted to a string before appending. The example usage shows how the function can be used with lists of numbers, strings, or mixed elements."}
{"name":"mbpp_133_sum_negativenum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_133_sum_negativenum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_negativenum))\n    (check-within (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) -32 0.001)\n    (check-within (candidate (list 10 15 -14 13 -18 12 -20)) -52 0.001)\n    (check-within (candidate (list 19 -65 57 39 152 -639 121 44 90 -190)) -894 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_133_sum_negativenum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to calculate the sum of the negative numbers of a given list of numbers.\n(define (sum_negativenum nums)\n  (foldl (lambda (num acc)\n           (if (< num 0)\n               (+ num acc)\n               acc))\n         0\n         nums))\n\n;; Example Usage\n(sum_negativenum '(-1 2 -3 4 -5)) ; => -9\n(sum_negativenum '(1 2 3 4 5))    ; => 0\n(sum_negativenum '(-1 -2 -3))     ; => -6\n```"}
{"name":"mbpp_135_hexagonal_num","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the nth hexagonal number.\n(define (hexagonal_num n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_135_hexagonal_num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate hexagonal_num))\n    (check-within (candidate 10) 190 0.001)\n    (check-within (candidate 5) 45 0.001)\n    (check-within (candidate 7) 91 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_135_hexagonal_num","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the nth hexagonal number.\n(define (hexagonal_num n)\n  (+ (* 2 n (- (* n n) 1))\n     (- (* n n) n)\n     (- (* n (- n 1)))))\n\n;; Test the function with some examples\n(hexagonal_num 1)  ;; 1\n(hexagonal_num 2)  ;; 6\n(hexagonal_num 3)  ;; 15\n(hexagonal_num 4)  ;; 28\n(hexagonal_num 5)  ;; 45\n```\n\nThe function `hexagonal_num` computes the nth hexagonal number based on the formula:\n\\[ H_n = \\frac{n(2n - 1)}{2} \\]\nwhich simplifies to:\n\\[ H_n = n(2n - 1) \\]\n\nHere, for `n = 1, 2, 3, ...`, the hexagonal numbers are `1, 6, 15, ...`."}
{"name":"mbpp_138_is_Sum_Of_Powers_Of_Two","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n(define (is_Sum_Of_Powers_Of_Two n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_138_is_Sum_Of_Powers_Of_Two.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sum_Of_Powers_Of_Two))\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 7) #f 0.001)\n    (check-within (candidate 14) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_138_is_Sum_Of_Powers_Of_Two","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to check whether the given number can be represented\n;; as sum of non-zero powers of 2 or not.\n(define (is_Sum_Of_Powers_Of_Two n)\n  (define (helper n)\n    (cond\n      [(zero? n) #t]\n      [(odd? n) (helper (quotient (- n 1) 2))]\n      [(even? n) (helper (quotient n 2))]))\n  (and (integer? n) (> n 0) (helper n)))\n\n;;; Test cases\n(is_Sum_Of_Powers_Of_Two 10) ; Returns #t because 10 = 2^3 + 2^1\n(is_Sum_Of_Powers_Of_Two 9)  ; Returns #t because 9 = 2^3 + 2^0\n(is_Sum_Of_Powers_Of_Two 7)  ; Returns #t because 7 = 2^2 + 2^1 + 2^0\n(is_Sum_Of_Powers_Of_Two 3)  ; Returns #t because 3 = 2^1 + 2^0\n(is_Sum_Of_Powers_Of_Two 2)  ; Returns #t because 2 = 2^1\n(is_Sum_Of_Powers_Of_Two 1)  ; Returns #t because 1 = 2^0\n(is_Sum_Of_Powers_Of_Two 0)  ; Returns #f because 0 is not a positive integer\n(is_Sum_Of_Powers_Of_Two -1) ; Returns #f because -1 is not a positive integer\n```"}
{"name":"mbpp_141_pancake_sort","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort a list of elements.\n(define (pancake_sort nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_141_pancake_sort.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pancake_sort))\n    (check-within (candidate (list 15 79 25 38 69)) (list 15 25 38 69 79) 0.001)\n    (check-within (candidate (list 98 12 54 36 85)) (list 12 36 54 85 98) 0.001)\n    (check-within (candidate (list 41 42 32 12 23)) (list 12 23 32 41 42) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_141_pancake_sort","gpt_solution":"```racket\n#lang racket\n\n;; A function to sort a list of elements using pancake sorting.\n(define (pancake-flip nums k)\n  ;; Flips the first k elements of the list nums.\n  (append (reverse (take nums k)) (drop nums k)))\n\n(define (max-index nums end)\n  ;; Finds the index of the maximum element within nums[0..end].\n  (argmax (sublist nums 0 (+ end 1))))\n\n(define (pancake-sort-helper nums n)\n  ;; A helper function that sorts the first n elements of the list nums.\n  (if (= n 1)\n      nums\n      (let ([max-idx (max-index nums (- n 1))])\n        (if (= max-idx (- n 1))  ; The max element is already at the end\n            (pancake-sort-helper nums (- n 1))\n            (let ([nums1 (if (> max-idx 0) (pancake-flip nums (+ max-idx 1)) nums)]\n                  [nums2 (pancake-flip nums1 n)])\n              (pancake-sort-helper nums2 (- n 1)))))))\n\n(define (pancake-sort nums)\n  ;; Sorts the list nums using pancake sorting algorithm.\n  (pancake-sort-helper nums (length nums)))\n```\n\nThis Racket code defines a `pancake-sort` function that sorts a list of elements using the pancake sorting algorithm. The `pancake-flip` function reverses the order of the first `k` elements, and `max-index` identifies the position of the largest element in a subset of the list. The `pancake-sort-helper` function applies these operations recursively to sort the list."}
{"name":"mbpp_142_count_samepair","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count number items that are identical in the same position of three given lists.\n(define (count_samepair list1 list2 list3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_142_count_samepair.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_samepair))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9) (list 2 1 3 1 2 6 7 9)) 3 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 8) (list 2 1 3 1 2 6 7 8)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 2 6 7 8) (list 2 2 3 1 2 6 7 8) (list 2 1 3 1 2 6 7 8)) 5 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_142_count_samepair","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count number items that are identical in the same position of three given lists.\n(define (count_samepair list1 list2 list3)\n  (define (helper lst1 lst2 lst3 count)\n    (cond [(or (null? lst1) (null? lst2) (null? lst3)) count]\n          [(and (equal? (first lst1) (first lst2)) (equal? (first lst1) (first lst3)))\n           (helper (rest lst1) (rest lst2) (rest lst3) (+ count 1))]\n          [else (helper (rest lst1) (rest lst2) (rest lst3) count)]))\n  (helper list1 list2 list3 0))\n\n;; Testing the function\n(count_samepair '(1 2 3 4) '(1 5 3 4) '(1 6 3 4)) ; Should return 3\n(count_samepair '(7 2 5) '(7 8 5) '(7 0 5)) ; Should return 2\n(count_samepair '(1 2 3) '(4 5 6) '(7 8 9)) ; Should return 0\n```"}
{"name":"mbpp_143_find_lists","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find number of lists present in the given list.\n(define (find_lists Input)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_143_find_lists.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_lists))\n    (check-within (candidate (list (list 1 2 3 4) (list 5 6 7 8))) 2 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4) (list 5 6))) 3 0.001)\n    (check-within (candidate (list 9 8 7 6 5 4 3 2 1)) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_143_find_lists","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find number of lists present in the given list.\n(define (find_lists input)\n  (define (count-lists lst count)\n    (cond\n      [(empty? lst) count]\n      [(list? (first lst)) (count-lists (rest lst) (+ count 1))]\n      [else (count-lists (rest lst) count)]))\n  (count-lists input 0))\n\n;; Example usage:\n;; (find_lists '(1 2 (3 4) 5 (6 7) 8)) returns 2\n```"}
{"name":"mbpp_145_max_Abs_Diff","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the maximum difference between any two elements in a given list.\n(define (max_Abs_Diff arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_145_max_Abs_Diff.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_Abs_Diff))\n    (check-within (candidate (list 2 1 5 3)) 4 0.001)\n    (check-within (candidate (list 9 3 2 5 1)) 8 0.001)\n    (check-within (candidate (list 3 2 1)) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_145_max_Abs_Diff","gpt_solution":"```racket\n#lang racket\n\n;; This function calculates the maximum difference between any two elements in a given list.\n(define (max_Abs_Diff arr)\n  (if (null? arr)\n      (error \"The list is empty\")\n      (let ([min (apply min arr)]\n            ([max (apply max arr)])\n        (- max min))))\n\n;; Example usage\n(max_Abs_Diff '(3 10 6 1 8)) ; returns 9\n(max_Abs_Diff '(-2 -7 4 -5)) ; returns 11\n(max_Abs_Diff '(5)) ; returns 0; single element list\n```"}
{"name":"mbpp_160_find_solution","language":"rkt","prompt":"#lang racket\n\n;; Write a function that returns integers x and y that satisfy ax + by = n as a list, or return #f if no solution exists.\n(define (find_solution a b n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_160_find_solution.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_solution))\n    (check-within (candidate 2 3 7) (list 2 1) 0.001)\n    (check-within (candidate 4 2 7) #f 0.001)\n    (check-within (candidate 1 13 17) (list 4 1) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_160_find_solution","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that returns integers x and y that satisfy ax + by = n as a list, or return #f if no solution exists.\n(define (find_solution a b n)\n  (define (gcd x y)\n    (if (= y 0)\n        x\n        (gcd y (remainder x y))))\n\n  ;; Check if n is divisible by gcd(a, b)\n  (define d (gcd a b))\n  (if (not (= (remainder n d) 0))\n      #f\n      (let loop ([x 0])\n        (let ((remainder (- n (* a x))))\n          (if (= (remainder (gcd b a) remainder) 0)\n              ;; Found a solution\n              (list x (\/ remainder b))\n              (loop (add1 x)))))))\n\n; Example usage:\n; (find_solution 2 3 7) ; Returns '(1 1)\n; (find_solution 2 4 7) ; Returns #f\n\n```"}
{"name":"mbpp_161_remove_elements","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove all elements from a given list present in another list.\n(define (remove_elements list1 list2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_161_remove_elements.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_elements))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) (list 2 4 6 8)) (list 1 3 5 7 9 10) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) (list 1 3 5 7)) (list 2 4 6 8 9 10) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) (list 5 7)) (list 1 2 3 4 6 8 9 10) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_161_remove_elements","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove all elements from a given list present in another list.\n(define (remove_elements list1 list2)\n  (filter (lambda (x) (not (member x list2))) list1))\n\n;; Example usage:\n;; (remove_elements '(1 2 3 4 5) '(2 4)) ; => '(1 3 5)\n;; (remove_elements '(a b c d e) '(b d)) ; => '(a c e)\n```"}
{"name":"mbpp_162_sum_series","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate the sum (n - 2*i) from i=0 to n \/\/ 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n(define (sum_series n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_162_sum_series.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_series))\n    (check-within (candidate 6) 12 0.001)\n    (check-within (candidate 10) 30 0.001)\n    (check-within (candidate 9) 25 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_162_sum_series","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to calculate the sum (n - 2*i) from i=0 to n \/\/ 2, \n;; for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n(define (sum_series n)\n  (define (helper i)\n    (let ((term (- n (* 2 i))))\n      (if (<= term 0)\n          0\n          (+ term (helper (+ i 1))))))\n  (helper 0))\n\n;; Example usage:\n;; (sum_series 10) should evaluate to 30, because 10 + 8 + 6 + 4 + 2 = 30.\n;; (sum_series 5) should evaluate to 9, because 5 + 3 + 1 = 9.\n```"}
{"name":"mbpp_164_are_equivalent","language":"rkt","prompt":"#lang racket\n\n;; Write a function to determine if the sum of the divisors of two integers are the same.\n(define (are_equivalent num1 num2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_164_are_equivalent.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate are_equivalent))\n    (check-within (candidate 36 57) #f 0.001)\n    (check-within (candidate 2 4) #f 0.001)\n    (check-within (candidate 23 47) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_164_are_equivalent","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to determine if the sum of the divisors of two integers are the same.\n(define (sum-of-divisors n)\n  (define (helper d sum)\n    (if (> d n)\n        sum\n        (if (= (remainder n d) 0)\n            (helper (+ d 1) (+ sum d))\n            (helper (+ d 1) sum))))\n  (helper 1 0))\n\n(define (are_equivalent num1 num2)\n  (=\n    (sum-of-divisors num1)\n    (sum-of-divisors num2)))\n```"}
{"name":"mbpp_165_count_char_position","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n(define (count_char_position str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_165_count_char_position.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_char_position))\n    (check-within (candidate \"xbcefg\") 2 0.001)\n    (check-within (candidate \"ABcED\") 3 0.001)\n    (check-within (candidate \"AbgdeF\") 5 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_165_count_char_position","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n(define (count_char_position str1)\n  (define alphabet \"abcdefghijklmnopqrstuvwxyz\")\n  (define (char-position? c index)\n    (equal? (char-downcase c) (string-ref alphabet index)))\n  (define (count-helper str index count)\n    (if (>= index (string-length str))\n        count\n        (count-helper str\n                      (+ index 1)\n                      (if (char-position? (string-ref str index) index)\n                          (+ count 1)\n                          count))))\n  (count-helper str1 0 0))\n\n;; Example usage\n(count_char_position \"aBcD\") ; Outputs 3, as 'a', 'c', 'D' are in positions 0, 2, 3 respectively.\n```"}
{"name":"mbpp_166_find_even_pair","language":"rkt","prompt":"#lang racket\n\n;; Write a function that counts the number of pairs of integers in a list that xor to an even number.\n(define (find_even_pair A)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_166_find_even_pair.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_even_pair))\n    (check-within (candidate (list 5 4 7 2 1)) 4 0.001)\n    (check-within (candidate (list 7 2 8 1 0 5 11)) 9 0.001)\n    (check-within (candidate (list 1 2 3)) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_166_find_even_pair","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that counts the number of pairs of integers in a list that xor to an even number.\n(define (find_even_pairs lst)\n  (define (even-xor? a b)\n    (even? (bitwise-xor a b)))\n  (define (count-pairs lst)\n    (cond\n      [(empty? lst) 0]\n      [else\n       (let* ([x (first lst)]\n              [rest (rest lst)])\n         (+ (count (lambda (y) (even-xor? x y)) rest)\n            (count-pairs rest)))]))\n  (count-pairs lst))\n\n;; Example usage\n(find_even_pairs '(1 2 3 4 5))\n```\n\nThe `even-xor?` function checks if the XOR of two numbers is even. The `count-pairs` function recursively counts suitable pairs in the list. Finally, `find_even_pairs` initializes the count on the given list."}
{"name":"mbpp_167_next_power_of_2","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the smallest power of 2 greater than or equal to n.\n(define (next_power_of_2 n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_167_next_power_of_2.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_power_of_2))\n    (check-within (candidate 0) 1 0.001)\n    (check-within (candidate 5) 8 0.001)\n    (check-within (candidate 17) 32 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_167_next_power_of_2","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the smallest power of 2 greater than or equal to n.\n(define (next_power_of_2 n)\n  (define (power_of_2 x)\n    (if (or (zero? x) (= x 1))\n        1\n        (let loop ([i 1])\n          (if (>= (expt 2 i) x)\n              (expt 2 i)\n              (loop (add1 i))))))\n  (power_of_2 n))\n\n; Examples:\n; (next_power_of_2 7) -> 8\n; (next_power_of_2 16) -> 16\n; (next_power_of_2 17) -> 32\n```"}
{"name":"mbpp_168_frequency","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count the number of occurrences of a number in a given list.\n(define (frequency a x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_168_frequency.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate frequency))\n    (check-within (candidate (list 1 2 3) 4) 0 0.001)\n    (check-within (candidate (list 1 2 2 3 3 3 4) 3) 3 0.001)\n    (check-within (candidate (list 0 1 2 3 1 2) 1) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_168_frequency","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count the number of occurrences of a number in a given list.\n(define (frequency a x)\n  (define (helper lst count)\n    (cond\n      [(empty? lst) count]\n      [(= (first lst) x) (helper (rest lst) (+ count 1))]\n      [else (helper (rest lst) count)]))\n  (helper a 0))\n\n;; Example usage:\n(frequency '(1 2 3 4 1 2 1) 1) ;=> 3\n(frequency '(1 2 3 4 1 2 1) 2) ;=> 2\n(frequency '(1 2 3 4 1 2 1) 5) ;=> 0\n```"}
{"name":"mbpp_170_sum_range_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the sum of numbers in a list within a range specified by two indices.\n(define (sum_range_list list1 m n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_170_sum_range_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_range_list))\n    (check-within (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 8 10) 29 0.001)\n    (check-within (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 5 7) 16 0.001)\n    (check-within (candidate (list 2 1 5 6 8 3 4 9 10 11 8 12) 7 10) 38 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_170_sum_range_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the sum of numbers in a list within a range specified by two indices.\n(define (sum_range_list list1 m n)\n  (let* ((start (min m n))\n         (end (max m n))\n         (sublist (sublist list1 start (+ end 1))))\n    (apply + sublist)))\n\n;; Example usage:\n;; (sum_range_list '(10 20 30 40 50) 1 3) => 90\n;; (sum_range_list '(10 20 30 40 50) 3 1) => 90 (order of m and n doesn't matter)\n```"}
{"name":"mbpp_171_perimeter_pentagon","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the perimeter of a regular pentagon from the length of its sides.\n(define (perimeter_pentagon a)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_171_perimeter_pentagon.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perimeter_pentagon))\n    (check-within (candidate 5) 25 0.001)\n    (check-within (candidate 10) 50 0.001)\n    (check-within (candidate 15) 75 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_171_perimeter_pentagon","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the perimeter of a regular pentagon from the length of its sides.\n(define (perimeter_pentagon a)\n  (* 5 a))\n\n;; Example usage:\n;; (perimeter_pentagon 3) ; should return 15\n```\n\nThis Racket function `perimeter_pentagon` calculates the perimeter of a regular pentagon given the length of its side `a`. The perimeter of a regular pentagon is computed as 5 times the length of one side."}
{"name":"mbpp_172_count_occurance","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count the number of occurence of the string 'std' in a given string.\n(define (count_occurance s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_172_count_occurance.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_occurance))\n    (check-within (candidate \"letstdlenstdporstd\") 3 0.001)\n    (check-within (candidate \"truststdsolensporsd\") 1 0.001)\n    (check-within (candidate \"makestdsostdworthit\") 2 0.001)\n    (check-within (candidate \"stds\") 1 0.001)\n    (check-within (candidate \"\") 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_172_count_occurance","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count the number of occurrences of the string 'std' in a given string.\n(define (count_occurance s)\n  (define (helper s count)\n    (define idx (string-contains s \"std\"))\n    (if idx\n        (helper (substring s (+ idx 3)) (+ count 1))\n        count))\n  (helper s 0))\n\n;; Example usage\n(count_occurance \"std asdf std asd std\") ;; returns 3\n(count_occurance \"no match here\")        ;; returns 0\n(count_occurance \"stdstdstd\")            ;; returns 3\n```"}
{"name":"mbpp_222_check_type","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_222_check_type.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-within (candidate (list 5 6 7 3 5 6)) #t 0.001)\n    (check-within (candidate (list 1 2 \"4\")) #f 0.001)\n    (check-within (candidate (list 3 2 1 4 5)) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_222_check_type","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if all the elements in the list have the same data type or not.\n(define (check_type test_tuple)\n  (if (empty? test_tuple)\n      #t\n      (let ([first-type (type-of (first test_tuple))])\n        (for\/and ([elem (rest test_tuple)])\n          (eq? first-type (type-of elem))))))\n\n;; Helper function to determine the type of an element\n(define (type-of elem)\n  (cond\n    [(number? elem) 'number]\n    [(boolean? elem) 'boolean]\n    [(string? elem) 'string]\n    [(symbol? elem) 'symbol]\n    [(list? elem) 'list]\n    [else 'unknown]))\n\n;; Example usage:\n(check_type '(1 2 3 4)) ; should return #t\n(check_type '(1 \"two\" 3 4)) ; should return #f\n(check_type '(#t #f true false)) ; should return #t\n```\n\nThis Racket function `check_type` verifies if all elements in a given list have the same data type. It uses a helper function `type-of` to classify types of the list elements. The `for\/and` construct ensures that the types of all elements match the type of the first element in the list."}
{"name":"mbpp_223_is_majority","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n\/2 times.)\n(define (is_majority arr n x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_223_is_majority.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-within (candidate (list 1 2 3 3 3 3 10) 7 3) #t 0.001)\n    (check-within (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f 0.001)\n    (check-within (candidate (list 1 1 1 2 2) 5 1) #t 0.001)\n    (check-within (candidate (list 1 1 2 2) 5 1) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_223_is_majority","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n\/2 times.)\n(define (is_majority arr n x)\n  (define half (\/ n 2))\n  (define (binary-search-left arr x low high)\n    (if (> low high)\n        -1\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n            [(and (= (list-ref arr mid) x) (or (= mid 0) (not (= (list-ref arr (sub1 mid)) x)))) mid]\n            [(>= (list-ref arr mid) x) (binary-search-left arr x low (sub1 mid))]\n            [else (binary-search-left arr x (add1 mid) high)]))))\n  (define start (binary-search-left arr x 0 (sub1 n))) \n  (if (or (= start -1) (> start (+ (- n half) half)))\n      #f\n      (>= (- (length (filter (lambda (element) (= element x)) (take arr (+ start half)))) 1) half)))\n```\n\nThe code defines a function `is_majority` which takes a sorted list `arr`, its length `n`, and an element `x`. It returns `#t` if `x` is the majority element (i.e., it occurs more than `n\/2` times), and `#f` otherwise.\n\n1. **binary-search-left**: A helper function to find the leftmost occurrence of `x` using binary search.\n2. **start**: The start index of the majority element obtained using `binary-search-left`.\n3. **Check majority**: It checks if the element `x` occurs more than `n\/2` times starting from the found `start` index."}
{"name":"mbpp_224_count_Set_Bits","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of set bits (binary digits with value 1) in a given number.\n(define (count_Set_Bits n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_224_count_Set_Bits.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Set_Bits))\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 4) 1 0.001)\n    (check-within (candidate 6) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_224_count_Set_Bits","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to count the number of set bits (binary digits with value 1) in a given number.\n(define (count-set-bits n)\n  (define (helper n count)\n    (if (zero? n)\n        count\n        (helper (arithmetic-shift n -1) (+ count (bitwise-and n 1)))))\n  (helper n 0))\n\n;; Example usage:\n;; (count-set-bits 5) ; returns 2 as the binary representation of 5 is 101\n;; (count-set-bits 7) ; returns 3 as the binary representation of 7 is 111\n```"}
{"name":"mbpp_226_odd_values_string","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to remove the characters which have odd index values of a given string.\n(define (odd_values_string str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_226_odd_values_string.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_values_string))\n    (check-within (candidate \"abcdef\") \"ace\" 0.001)\n    (check-within (candidate \"python\") \"pto\" 0.001)\n    (check-within (candidate \"data\") \"dt\" 0.001)\n    (check-within (candidate \"lambs\") \"lms\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_226_odd_values_string","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to remove the characters which have odd index values of a given string.\n(define (odd_values_string str)\n  (define (helper s idx)\n    (cond\n      [(empty? s) \"\"]\n      [(odd? idx) (helper (rest s) (+ idx 1))]\n      [else (string-append (string (first s)) (helper (rest s) (+ idx 1)))]))\n  (helper (string->list str) 0))\n\n;; Example usage\n(odd_values_string \"example\") ; => \"eape\"\n```"}
{"name":"mbpp_227_min_of_three","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_227_min_of_three.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_of_three))\n    (check-within (candidate 10 20 0) 0 0.001)\n    (check-within (candidate 19 15 18) 15 0.001)\n    (check-within (candidate -10 -20 -30) -30 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_227_min_of_three","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find minimum of three numbers.\n(define (min_of_three a b c)\n  (min a b c))\n\n;; Example usage:\n;; (min_of_three 5 3 8) should return 3\n```"}
{"name":"mbpp_228_all_Bits_Set_In_The_Given_Range","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether all the bits are unset in the given range or not.\n(define (all_Bits_Set_In_The_Given_Range n l r)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_228_all_Bits_Set_In_The_Given_Range.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_Bits_Set_In_The_Given_Range))\n    (check-within (candidate 4 1 2) #t 0.001)\n    (check-within (candidate 17 2 4) #t 0.001)\n    (check-within (candidate 39 4 6) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_228_all_Bits_Set_In_The_Given_Range","gpt_solution":"```racket\n#lang racket\n\n;; This function checks whether all the bits are unset in the given range or not.\n;; `n` is the input number.\n;; `l` and `r` define the range (1-indexed, inclusive).\n;; Return #t if all bits are unset in the range [l, r], otherwise return #f.\n\n(define (all-Bits-Unset-In-Range? n l r)\n  (for\/and ([i (in-range (- l 1) r)])\n    (zero? (bitwise-and n (arithmetic-shift 1 i)))))\n\n;; Examples:\n;; (all-Bits-Unset-In-Range? 0 1 5) -> #t\n;; (all-Bits-Unset-In-Range? 5 1 5) -> #f\n;; (all-Bits-Unset-In-Range? 5 2 3) -> #t\n\n;; The `arithmetic-shift` is used here to create a mask for the bit at position `i`.\n;; `bitwise-and` is then used to check if that particular bit is set to 1 or not.\n```"}
{"name":"mbpp_229_re_arrange_array","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n(define (re_arrange_array arr n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_229_re_arrange_array.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate re_arrange_array))\n    (check-within (candidate (list -1 2 -3 4 5 6 -7 8 9) 9) (list -1 -3 -7 4 5 6 2 8 9) 0.001)\n    (check-within (candidate (list 12 -14 -26 13 15) 5) (list -14 -26 12 13 15) 0.001)\n    (check-within (candidate (list 10 24 36 -42 -39 -78 85) 7) (list -42 -39 -78 10 24 36 85) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_229_re_arrange_array","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n(define (re_arrange_array arr n)\n  (let* ([first-part (take arr n)]\n         [rest-part (drop arr n)]\n         [negatives (filter negative? first-part)]\n         [non-negatives (filter (lambda (x) (not (negative? x))) first-part)])\n    (append negatives non-negatives rest-part)))\n\n;; Usage example\n(re_arrange_array '(3 -1 4 -3 2 0 -2 5 6) 5) ; => '(-1 -3 3 4 2 0 -2 5 6)\n```\n\nThis solution defines the `re_arrange_array` function, which rearranges the first `n` elements of the list `arr` so that all negative elements appear before the positive ones while preserving the relative order among negative and positive elements. The function then appends any remaining elements from the original list to the rearranged part. Use the function with your desired input to see the result."}
{"name":"mbpp_230_replace_blank","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n(define (replace_blank str1 char)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_230_replace_blank.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_blank))\n    (check-within (candidate \"hello people\" \"@\") \"hello@people\" 0.001)\n    (check-within (candidate \"python program language\" \"$\") \"python$program$language\" 0.001)\n    (check-within (candidate \"blank space\" \"-\") \"blank-space\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_230_replace_blank","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n(define (replace_blank str1 char)\n  (apply string (map (lambda (c)\n                        (if (char=? c #\\space)\n                            char\n                            c))\n                      (string->list str1))))\n\n;; Example usage\n(replace_blank \"hello world\" #\\_)\n; returns \"hello_world\"\n```"}
{"name":"mbpp_234_volume_cube","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the volume of a cube given its side length.\n(define (volume_cube l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_234_volume_cube.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate volume_cube))\n    (check-within (candidate 3) 27 0.001)\n    (check-within (candidate 2) 8 0.001)\n    (check-within (candidate 5) 125 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_234_volume_cube","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the volume of a cube given its side length.\n(define (volume_cube l)\n  (* l l l))\n\n;; Example usage:\n;; (volume_cube 3) => 27\n;; (volume_cube 4.5) => 91.125\n```"}
{"name":"mbpp_237_check_occurences","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list of lists and returns a hash mapping each unique list to the number of times it occurs in the list.\n(define (check_occurences test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_237_check_occurences.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_occurences))\n    (check-within (candidate (list (list 3 1) (list 1 3) (list 2 5) (list 5 2) (list 6 3))) #hash(((list 1 3) .  2) ((list 2 5) .  2) ((list 3 6) .  1)) 0.001)\n    (check-within (candidate (list (list 4 2) (list 2 4) (list 3 6) (list 6 3) (list 7 4))) #hash(((list 2 4) .  2) ((list 3 6) .  2) ((list 4 7) .  1)) 0.001)\n    (check-within (candidate (list (list 13 2) (list 11 23) (list 12 25) (list 25 12) (list 16 23))) #hash(((list 2 13) .  1) ((list 11 23) .  1) ((list 12 25) .  2) ((list 16 23) .  1)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_237_check_occurences","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list of lists and returns a hash mapping each unique list to the number of times it occurs in the list.\n(define (check_occurences test_list)\n  (define occurence-hash (make-hash))\n  (for ([item test_list])\n    (hash-update! occurence-hash item (lambda (x) (+ x 1)) 0))\n  occurence-hash)\n\n;; Example usage:\n;; (check_occurences '((a b) (a c) (a b) (d e) (a b))) should return #hash(( (a b) . 3) ((a c) . 1) ((d e) . 1))\n```"}
{"name":"mbpp_238_number_of_substrings","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of non-empty substrings of a given string.\n(define (number_of_substrings str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_238_number_of_substrings.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate number_of_substrings))\n    (check-within (candidate \"abc\") 6 0.001)\n    (check-within (candidate \"abcd\") 10 0.001)\n    (check-within (candidate \"abcde\") 15 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_238_number_of_substrings","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to count the number of non-empty substrings of a given string.\n(define (number_of_substrings str)\n  (define n (string-length str))\n  ;; The total number of substrings in a string of length n is given by the formula: n * (n + 1) \/ 2\n  ;; This is because for a string of length n:\n  ;; - The total number of 1-character substrings is n (one for each character)\n  ;; - The total number of 2-character substrings is (n-1) + (n-2) + ... + 1 = n*(n-1)\/2\n  ;; - Adding up all these gives the sum of the first n natural numbers: n * (n + 1) \/ 2\n  (\/ (* n (+ n 1)) 2))\n\n;; Example usage\n(number_of_substrings \"abc\")  ;; Output should be 6, since there are 6 non-empty substrings: \"a\", \"b\", \"c\", \"ab\", \"bc\", \"abc\"\n(number_of_substrings \"\")     ;; Output should be 0, since an empty string has no non-empty substrings\n(number_of_substrings \"a\")    ;; Output should be 1, since there is only one non-empty substring: \"a\"\n```"}
{"name":"mbpp_239_get_total_number_of_sequences","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n(define (get_total_number_of_sequences m n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_239_get_total_number_of_sequences.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_total_number_of_sequences))\n    (check-within (candidate 10 4) 4 0.001)\n    (check-within (candidate 5 2) 6 0.001)\n    (check-within (candidate 16 3) 84 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_239_get_total_number_of_sequences","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n;; such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n(define (count_sequences m n current)\n  (if (= n 0)\n      1\n      (define count 0)\n      (for ([i (in-range (* 2 current) (+ m 1))])\n        (set! count (+ count (count_sequences m (- n 1) i))))\n      count))\n      \n(define (get_total_number_of_sequences m n)\n  (define total 0)\n  (for ([i (in-range 1 (+ m 1))])\n    (set! total (+ total (count_sequences m (- n 1) i))))\n  total)\n  \n;; Example usage:\n;; (get_total_number_of_sequences 10 2) => should return the number of valid sequences of length 2 with elements up to 10\n```"}
{"name":"mbpp_240_replace_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n(define (replace_list list1 list2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_240_replace_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_list))\n    (check-within (candidate (list 1 3 5 7 9 10) (list 2 4 6 8)) (list 1 3 5 7 9 2 4 6 8) 0.001)\n    (check-within (candidate (list 1 2 3 4 5) (list 5 6 7 8)) (list 1 2 3 4 5 6 7 8) 0.001)\n    (check-within (candidate (list \"red\" \"blue\" \"green\") (list \"yellow\")) (list \"red\" \"blue\" \"yellow\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_240_replace_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n(define (replace_list list1 list2)\n  (if (null? list1)\n      list2\n      (append (reverse (cdr (reverse list1))) list2)))\n\n;; Examples to test the function\n(define list1 '(1 2 3 4))\n(define list2 '(5 6 7))\n(define list3 '(1))\n\n(replace_list list1 list2) ;; Expected: (1 2 3 5 6 7)\n(replace_list list3 list2) ;; Expected: (5 6 7)\n(replace_list '() list2) ;; Expected: (5 6 7)\n(replace_list list1 '()) ;; Expected: (1 2 3)\n```"}
{"name":"mbpp_242_count_charac","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count the total number of characters in a string.\n(define (count_charac str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_242_count_charac.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_charac))\n    (check-within (candidate \"python programming\") 18 0.001)\n    (check-within (candidate \"language\") 8 0.001)\n    (check-within (candidate \"words\") 5 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_242_count_charac","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count the total number of characters in a string.\n(define (count_charac str1)\n  (string-length str1))\n\n;; Example usage:\n(count_charac \"Hello, World!\") ; => 13\n(count_charac \"\") ; => 0\n(count_charac \"Racket\") ; => 6\n```\n\nIn this code, the function `count_charac` takes a string `str1` as input and returns the total number of characters in that string using the `string-length` function. Some example usages are provided to demonstrate how the function works."}
{"name":"mbpp_244_next_Perfect_Square","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the next perfect square greater than a given number.\n(define (next_Perfect_Square N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_244_next_Perfect_Square.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_Perfect_Square))\n    (check-within (candidate 35) 36 0.001)\n    (check-within (candidate 6) 9 0.001)\n    (check-within (candidate 9) 16 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_244_next_Perfect_Square","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the next perfect square greater than a given number\n(define (next_Perfect_Square N)\n  (define (is-perfect-square? num)\n    (let ((root (sqrt num)))\n      (= num (* root root))))\n  \n  (define starting-point (+ (floor (sqrt N)) 1))\n  \n  (let next-square ([x starting-point])\n    (let* ((square (* x x)))\n      (if (> square N)\n          square\n          (next-square (+ x 1))))))\n\n;; Example use\n(next_Perfect_Square 10)  ;; Returns 16\n(next_Perfect_Square 25)  ;; Returns 36\n```\n\nThe function `next_Perfect_Square` finds the next perfect square greater than the given number `N`. The helper function `is-perfect-square?` is used to check if a number is a perfect square, and `next-square` is a tail-recursive function to find the perfect square greater than `N`."}
{"name":"mbpp_245_max_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n(define (max_sum arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_245_max_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum))\n    (check-within (candidate (list 1 15 51 45 33 100 12 18 9)) 194 0.001)\n    (check-within (candidate (list 80 60 30 40 20 10)) 210 0.001)\n    (check-within (candidate (list 2 3 14 16 21 23 29 30)) 138 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_245_max_sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n(define (max-sum arr)\n  (define N (length arr))\n  \n  (define inc-sum (make-vector N 0))\n  (define dec-sum (make-vector N 0))\n  \n  ;; Initialize inc-sum and dec-sum with array values\n  (for ([i (in-range N)])\n    (vector-set! inc-sum i (list-ref arr i))\n    (vector-set! dec-sum i (list-ref arr i)))\n  \n  ;; Fill inc-sum array (Longest Increasing Subsequence sum)\n  (for ([i (in-range 1 N)])\n    (for ([j (in-range i)])\n      (when (< (list-ref arr j) (list-ref arr i))\n        (vector-set! inc-sum i (max (vector-ref inc-sum i) (+ (vector-ref inc-sum j) (list-ref arr i)))))))\n  \n  ;; Fill dec-sum array (Longest Decreasing Subsequence sum)\n  (for ([i (in-range (- N 2) -1 -1)])\n    (for ([j (in-range (- N 1) i -1)])\n      (when (< (list-ref arr j) (list-ref arr i))\n        (vector-set! dec-sum i (max (vector-ref dec-sum i) (+ (vector-ref dec-sum j) (list-ref arr i)))))))\n  \n  ;; Find the maximum sum of bitonic subsequence\n  (define max-bitonic-sum 0)\n  (for ([i (in-range N)])\n    (set! max-bitonic-sum (max max-bitonic-sum (+ (vector-ref inc-sum i) (vector-ref dec-sum i) (list-ref arr i)))))\n  \n  max-bitonic-sum)\n\n;; Example usage:\n(max-sum (list 1 15 51 45 33 100 12 18 9))\n```\n\nThis function calculates the maximum sum of a bitonic subsequence in a given list. It constructs `inc-sum` and `dec-sum` arrays to keep track of the maximum sums for the increasing and decreasing parts of subsequences, respectively. It then combines these results to find the maximum bitonic subsequence sum."}
{"name":"mbpp_247_lps","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the length of the longest palindromic subsequence in the given string.\n(define (lps str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_247_lps.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lps))\n    (check-within (candidate \"TENS FOR TENS\") 5 0.001)\n    (check-within (candidate \"CARDIO FOR CARDS\") 7 0.001)\n    (check-within (candidate \"PART OF THE JOURNEY IS PART\") 9 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_247_lps","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the length of the longest palindromic subsequence in the given string.\n(define (lps str)\n  (define n (string-length str))\n  \n  ;; Create a 2D array to store the lengths of longest palindromic subsequences\n  (define dp (make-vector n (make-vector n 0)))\n\n  ;; Strings of length 1 are palindrome of length 1\n  (for ([i (in-range n)])\n    (vector-set! (vector-ref dp i) i 1))\n\n  ;; Build the table. The outer loop is the length of the substring.\n  (for ([sub-len (in-range 2 (+ n 1))])\n    (for ([i (in-range (- n sub-len -1))])\n      (let ([j (+ i sub-len -1)])\n        (if (equal? (string-ref str i) (string-ref str j))\n            (if (= sub-len 2)\n                (vector-set! (vector-ref dp i) j 2)\n                (vector-set! (vector-ref dp i) j (+ 2 (vector-ref (vector-ref dp (+ i 1)) (- j 1)))))\n            (vector-set! (vector-ref dp i) j (max (vector-ref (vector-ref dp i) (- j 1))\n                                                   (vector-ref (vector-ref dp (+ i 1)) j)))))))\n\n  ;; length of the longest palindromic subseq\n  (vector-ref (vector-ref dp 0) (- n 1)))\n```"}
{"name":"mbpp_249_intersection_array","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the intersection of two lists.\n(define (intersection_array array_nums1 array_nums2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_249_intersection_array.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersection_array))\n    (check-within (candidate (list 1 2 3 5 7 8 9 10) (list 1 2 4 8 9)) (list 1 2 8 9) 0.001)\n    (check-within (candidate (list 1 2 3 5 7 8 9 10) (list 3 5 7 9)) (list 3 5 7 9) 0.001)\n    (check-within (candidate (list 1 2 3 5 7 8 9 10) (list 10 20 30 40)) (list 10) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_249_intersection_array","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the intersection of two lists.\n(define (intersection_array array_nums1 array_nums2)\n  (define (helper list1 list2 result)\n    (cond\n      [(empty? list1) (reverse result)]\n      [(member (first list1) list2)\n       (helper (rest list1) (remove (first list1) list2) (cons (first list1) result))]\n      [else (helper (rest list1) list2 result)]))\n  (helper array_nums1 array_nums2 '()))\n\n;; Example usage:\n(intersection_array '(1 2 2 1) '(2 2)) ; '(2 2)\n(intersection_array '(4 9 5) '(9 4 9 8 4)) ; '(4 9)\n(intersection_array '(1 2 3) '(4 5 6)) ; '()\n```"}
{"name":"mbpp_250_count_X","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function that takes in a list and an element and counts the occcurences of the element in the list.\n(define (count_X tup x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_250_count_X.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_X))\n    (check-within (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 4) 0 0.001)\n    (check-within (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 10) 3 0.001)\n    (check-within (candidate (list 10 8 5 2 10 15 10 8 5 8 8 2) 8) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_250_count_X","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function that takes in a list and an element and counts the occurrences of the element in the list.\n(define (count_X tup x)\n  (define (helper lst count)\n    (cond\n      [(empty? lst) count]\n      [(equal? (first lst) x) (helper (rest lst) (+ count 1))]\n      [else (helper (rest lst) count)]))\n  (helper tup 0))\n\n;; Example usage:\n(count_X '(1 2 3 4 2 2 5) 2) ; returns 3\n(count_X '(a b c a a d) 'a) ; returns 3\n(count_X '(1 2 3 4) 5) ; returns 0\n```"}
{"name":"mbpp_251_insert_element","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n(define (insert_element list element)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_251_insert_element.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate insert_element))\n    (check-within (candidate (list \"Red\" \"Green\" \"Black\") \"c\") (list \"c\" \"Red\" \"c\" \"Green\" \"c\" \"Black\") 0.001)\n    (check-within (candidate (list \"python\" \"java\") \"program\") (list \"program\" \"python\" \"program\" \"java\") 0.001)\n    (check-within (candidate (list \"happy\" \"sad\") \"laugh\") (list \"laugh\" \"happy\" \"laugh\" \"sad\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_251_insert_element","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n(define (insert_element lst element)\n  (if (null? lst)\n      '()\n      (cons element (cons (car lst) (insert_element (cdr lst) element)))))\n\n;; Example usage:\n;; (insert_element '(1 2 3) 'a) ; => '(a 1 a 2 a 3)\n```"}
{"name":"mbpp_252_convert","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to convert complex numbers to polar coordinates.\n(define (convert numbers)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_252_convert.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate convert))\n    (check-within (candidate 1) (list 1.0 0.0) 0.001)\n    (check-within (candidate 4) (list 4.0 0.0) 0.001)\n    (check-within (candidate 5) (list 5.0 0.0) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_252_convert","gpt_solution":"```racket\n#lang racket\n\n;; Function to convert a list of complex numbers to their polar coordinates.\n;; Each complex number in the list will be converted to a pair of (magnitude, angle) where:\n;; - magnitude is the distance from the origin (0, 0) in the complex plane.\n;; - angle is the phase (or argument) in radians, measured counterclockwise from the positive real axis.\n\n(define (convert numbers)\n  (map (lambda (c)\n         (let ([magnitude (sqrt (+ (sqr (real-part c)) (sqr (imag-part c))))]\n               [angle (atan (imag-part c) (real-part c))])\n           (cons magnitude angle)))\n       numbers))\n\n;; Example usage:\n(convert (list 1+1i -1-1i 3+4i))\n;; Output: '((1.4142135623730951 . 0.7853981633974483) \n;;           (1.4142135623730951 . -2.356194490192345) \n;;           (5.0 . 0.9272952180016122))\n```\n\nIn this code:\n- We define the `convert` function that takes a list of complex numbers and converts each to a pair consisting of the magnitude and angle.\n- The `map` function is used to apply the conversion to each complex number in the list.\n- For each complex number `c`, we calculate the magnitude using the `sqrt` and `sqr` functions to combine the real and imaginary parts.\n- The angle is calculated using the `atan` function, which computes the angle in radians based on the real and imaginary parts.\n- The `cons` function pairs together the magnitude and angle for each complex number."}
{"name":"mbpp_253_count_integer","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_253_count_integer.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-within (candidate (list 1 2 \"abc\" 1.2)) 2 0.001)\n    (check-within (candidate (list 1 2 3)) 3 0.001)\n    (check-within (candidate (list 1 1.2 4 5.1)) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_253_count_integer","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (define (helper lst count)\n    (cond\n      [(empty? lst) count]\n      [(integer? (first lst)) (helper (rest lst) (+ count 1))]\n      [else (helper (rest lst) count)]))\n  (helper list1 0))\n\n;; Example usage:\n(count_integer '(1 2 \"three\" 4.0 5)) ; returns 3\n(count_integer '(1 \"two\" 3))         ; returns 2\n(count_integer '())                  ; returns 0\n```"}
{"name":"mbpp_255_combinations_colors","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n(define (combinations_colors l n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_255_combinations_colors.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate combinations_colors))\n    (check-within (candidate (list \"Red\" \"Green\" \"Blue\") 1) (list (list \"Red\") (list \"Green\") (list \"Blue\")) 0.001)\n    (check-within (candidate (list \"Red\" \"Green\" \"Blue\") 2) (list (list \"Red\" \"Red\") (list \"Red\" \"Green\") (list \"Red\" \"Blue\") (list \"Green\" \"Green\") (list \"Green\" \"Blue\") (list \"Blue\" \"Blue\")) 0.001)\n    (check-within (candidate (list \"Red\" \"Green\" \"Blue\") 3) (list (list \"Red\" \"Red\" \"Red\") (list \"Red\" \"Red\" \"Green\") (list \"Red\" \"Red\" \"Blue\") (list \"Red\" \"Green\" \"Green\") (list \"Red\" \"Green\" \"Blue\") (list \"Red\" \"Blue\" \"Blue\") (list \"Green\" \"Green\" \"Green\") (list \"Green\" \"Green\" \"Blue\") (list \"Green\" \"Blue\" \"Blue\") (list \"Blue\" \"Blue\" \"Blue\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_255_combinations_colors","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n(define (combinations_colors l n)\n  (define (combine lst n)\n    (if (zero? n)\n        '(())\n        (flatmap (lambda (x)\n                   (map (lambda (xs) (cons x xs))\n                        (combine lst (- n 1))))\n                 lst)))\n  (combine l n))\n\n;; Helper function to implement flatmap\n(define (flatmap proc lst)\n  (apply append (map proc lst)))\n```\n\nThis code defines a function `combinations_colors` that generates all combinations (with repetition) of the elements of the list `l` of length `n`. The `combine` helper function recursively generates the required combinations, and the `flatmap` function is used to flatten the list of lists generated by the `map` function."}
{"name":"mbpp_256_count_Primes_nums","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n(define (count_Primes_nums n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_256_count_Primes_nums.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Primes_nums))\n    (check-within (candidate 5) 2 0.001)\n    (check-within (candidate 10) 4 0.001)\n    (check-within (candidate 100) 25 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_256_count_Primes_nums","gpt_solution":"```racket\n#lang racket\n\n;; The function count_Primes_nums takes a non-negative number and returns the number of prime numbers less than the given non-negative number.\n(define (count_Primes_nums n)\n  (define (is-prime? num)\n    (cond\n      [(<= num 1) #f]\n      [(= num 2) #t]\n      [else\n       (let loop ([i 2])\n         (cond\n           [(> (* i i) num) #t]\n           [(= (remainder num i) 0) #f]\n           [else (loop (add1 i))]))]))\n  (define (count-primes-aux m count)\n    (if (< m 2)\n        count\n        (if (is-prime? (- m 1))\n            (count-primes-aux (- m 1) (add1 count))\n            (count-primes-aux (- m 1) count))))\n  (count-primes-aux n 0))\n```"}
{"name":"mbpp_257_swap_numbers","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in two numbers and returns a list with the second number and then the first number.\n(define (swap_numbers a b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_257_swap_numbers.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate swap_numbers))\n    (check-within (candidate 10 20) (list 20 10) 0.001)\n    (check-within (candidate 15 17) (list 17 15) 0.001)\n    (check-within (candidate 100 200) (list 200 100) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_257_swap_numbers","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in two numbers and returns a list with the second number and then the first number.\n(define (swap_numbers a b)\n  (list b a))\n```"}
{"name":"mbpp_259_maximize_elements","language":"rkt","prompt":"#lang racket\n\n;; Write a function to maximize the given two lists.\n(define (maximize_elements test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_259_maximize_elements.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximize_elements))\n    (check-within (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 6 7) (list 4 9) (list 2 9) (list 7 10)) 0.001)\n    (check-within (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 7 8) (list 5 10) (list 3 10) (list 8 11)) 0.001)\n    (check-within (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 8 9) (list 6 11) (list 4 11) (list 9 12)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_259_maximize_elements","gpt_solution":"```racket\n#lang racket\n\n;; `maximize_elements` function takes two lists of numbers `test_tup1` and `test_tup2` \n;; and returns a new list where each element is the maximum of the corresponding elements in `test_tup1` and `test_tup2`.\n(define (maximize_elements test_tup1 test_tup2)\n  (map max test_tup1 test_tup2))\n\n;; Example usage:\n;; (maximize_elements '(1 2 3) '(3 2 1)) \n;; This should return '(3 2 3)\n```\n\nExplanation:\n- The `maximize_elements` function uses `map` to apply the `max` function element-wise across the input lists `test_tup1` and `test_tup2`.\n- The `max` function takes two arguments and returns the larger of the two.\n- The `map` function applies `max` to each corresponding pair of elements from `test_tup1` and `test_tup2`, returning a new list with the results."}
{"name":"mbpp_260_newman_prime","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n(define (newman_prime n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_260_newman_prime.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate newman_prime))\n    (check-within (candidate 3) 7 0.001)\n    (check-within (candidate 4) 17 0.001)\n    (check-within (candidate 5) 41 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_260_newman_prime","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n(define (newman-prime n)\n  (let loop ([count 0] [i 2])\n    (if (= count n)\n        i\n        (if (is-newman-prime? i)\n            (loop (add1 count) (add1 i))\n            (loop count (add1 i))))))\n\n(define (is-newman-prime? p)\n  (define (nsw-prime? p)\n    (let ([u0 1] [u1 1])\n      (let loop ([k 2] [prev-u1 u1] [prev-u0 u0])\n        (let ([uk (- (* 2 prev-u1) prev-u0)])\n          (if (= k p)\n              (= uk p)\n              (loop (add1 k) uk prev-u1))))))\n  (and (nsw-prime? p) (prime? p)))\n\n(define (prime? n)\n  (cond [(< n 2) #f]\n        [(= n 2) #t]\n        [(even? n) #f]\n        [else\n         (let loop ([i 3])\n           (cond [(>= (* i i) n) #t]\n                 [(zero? (remainder n i)) #f]\n                 [else (loop (+ i 2))]))]))\n```\n\nThis code defines a Racket function `newman-prime` which computes the nth Newman\u2013Shanks\u2013Williams prime number. The helper functions `is-newman-prime?` and `prime?` are used to determine if a number is a Newman\u2013Shanks\u2013Williams prime and a prime number, respectively."}
{"name":"mbpp_261_division_elements","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.\n(define (division_elements test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_261_division_elements.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate division_elements))\n    (check-within (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 2 2 2 3) 0.001)\n    (check-within (candidate (list 12 6 8 16) (list 6 3 4 4)) (list 2 2 2 4) 0.001)\n    (check-within (candidate (list 20 14 36 18) (list 5 7 6 9)) (list 4 2 6 2) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_261_division_elements","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.\n(define (division_elements list1 list2)\n  (map \/ list1 list2))\n\n;; Example usage:\n;; (division_elements '(10 20 30) '(2 4 5)) \n;; Output: (5 5 6)\n```"}
{"name":"mbpp_262_split_two_parts","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\n(define (split_two_parts list1 L)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_262_split_two_parts.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_two_parts))\n    (check-within (candidate (list 1 1 2 3 4 4 5 1) 3) (list (list 1 1 2) (list 3 4 4 5 1)) 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"c\" \"d\") 2) (list (list \"a\" \"b\") (list \"c\" \"d\")) 0.001)\n    (check-within (candidate (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\") 4) (list (list \"p\" \"y\" \"t\" \"h\") (list \"o\" \"n\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_262_split_two_parts","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\n(define (split_two_parts list1 L)\n  (define (split-helper lst index acc)\n    (cond\n      [(zero? index) (list (reverse acc) lst)]\n      [(null? lst) (list (reverse acc) '())] ;; in case L is greater than the length of the list\n      [else (split-helper (cdr lst) (sub1 index) (cons (car lst) acc))]))\n  (split-helper list1 L '()))\n\n;; Example usage:\n;; (split_two_parts '(1 2 3 4 5) 3)\n;; => '((1 2 3) (4 5))\n\n;; (split_two_parts '(1 2 3 4 5) 6)\n;; => '((1 2 3 4 5) ())\n```"}
{"name":"mbpp_264_dog_age","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate a dog's age in dog's years.\n(define (dog_age h_age)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_264_dog_age.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dog_age))\n    (check-within (candidate 12) 61 0.001)\n    (check-within (candidate 15) 73 0.001)\n    (check-within (candidate 24) 109 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_264_dog_age","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to calculate a dog's age in dog's years.\n(define (dog_age h_age)\n  (if (<= h_age 2)\n      (* h_age 10.5)  ; First two years count as 10.5 dog years each\n      (+ (* 2 10.5) (* (- h_age 2) 4))))  ; Subsequent years count as 4 dog years each\n\n;; Test cases\n(dog_age 1)  ; Should return 10.5\n(dog_age 2)  ; Should return 21.0\n(dog_age 3)  ; Should return 25.0\n(dog_age 5)  ; Should return 33.0\n```"}
{"name":"mbpp_265_list_split","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n(define (list_split S step)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_265_list_split.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate list_split))\n    (check-within (candidate (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\") 3) (list (list \"a\" \"d\" \"g\" \"j\" \"m\") (list \"b\" \"e\" \"h\" \"k\" \"n\") (list \"c\" \"f\" \"i\" \"l\")) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14) 3) (list (list 1 4 7 10 13) (list 2 5 8 11 14) (list 3 6 9 12)) 0.001)\n    (check-within (candidate (list \"python\" \"java\" \"C\" \"C++\" \"DBMS\" \"SQL\") 2) (list (list \"python\" \"C\" \"DBMS\") (list \"java\" \"C++\" \"SQL\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_265_list_split","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n(define (list_split S step)\n  (define (split-helper lst n accum)\n    (if (empty? lst)\n        (reverse accum)\n        (let ([chunk (take lst n)]\n              [rest (drop lst n)])\n          (split-helper rest n (cons chunk accum)))))\n  (split-helper S step '()))\n\n;; Example usage\n(list_split '(1 2 3 4 5 6 7 8 9) 3)  ;; '((1 2 3) (4 5 6) (7 8 9))\n(list_split '(1 2 3 4 5 6 7 8 9 10) 2)  ;; '((1 2) (3 4) (5 6) (7 8) (9 10))\n(list_split '(1 2 3 4 5 6 7 8 9) 4)  ;; '((1 2 3 4) (5 6 7 8) (9))\n```"}
{"name":"mbpp_266_lateralsurface_cube","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the lateral surface area of a cube given its side length.\n(define (lateralsurface_cube l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_266_lateralsurface_cube.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lateralsurface_cube))\n    (check-within (candidate 5) 100 0.001)\n    (check-within (candidate 9) 324 0.001)\n    (check-within (candidate 10) 400 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_266_lateralsurface_cube","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the lateral surface area of a cube given its side length.\n(define (lateralsurface_cube l)\n  (* 4 (* l l)))\n\n;; Example usage:\n(lateralsurface_cube 5) ; should return 100\n```\n\nIn this implementation, the function `lateralsurface_cube` takes the side length `l` as an argument and calculates the lateral surface area of the cube. The lateral surface area of a cube equals 4 times the area of one of its faces, and each face has an area of `l * l`."}
{"name":"mbpp_267_square_Sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n(define (square_Sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_267_square_Sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_Sum))\n    (check-within (candidate 2) 10 0.001)\n    (check-within (candidate 3) 35 0.001)\n    (check-within (candidate 4) 84 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_267_square_Sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n(define (square-sum n)\n  (define (odd-number k)\n    (+ (* 2 k) 1))\n  (define (square x)\n    (* x x))\n  (define (sum-odds m)\n    (if (zero? m)\n        0\n        (+ (square (odd-number (- m 1)))\n           (sum-odds (- m 1)))))\n  (sum-odds n))\n```"}
{"name":"mbpp_268_find_star_num","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the n'th star number.\n(define (find_star_num n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_268_find_star_num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_star_num))\n    (check-within (candidate 3) 37 0.001)\n    (check-within (candidate 4) 73 0.001)\n    (check-within (candidate 5) 121 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_268_find_star_num","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the n'th star number.\n(define (find_star_num n)\n  ;; The nth star number is given by the formula: 6n(n - 1) + 1\n  (+ 1 (* 6 n (- n 1))))\n\n;; Example usage:\n(find_star_num 1) ;; => 1\n(find_star_num 2) ;; => 13\n(find_star_num 3) ;; => 37\n```"}
{"name":"mbpp_269_ascii_value","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the ascii value of a character.\n(define (ascii_value k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_269_ascii_value.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate ascii_value))\n    (check-within (candidate \"A\") 65 0.001)\n    (check-within (candidate \"R\") 82 0.001)\n    (check-within (candidate \"S\") 83 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_269_ascii_value","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the ASCII value of a character.\n(define (ascii_value k)\n  (char->integer k))\n\n;; Example usage:\n(ascii_value #\\A)  ;; Output: 65\n(ascii_value #\\a)  ;; Output: 97\n```"}
{"name":"mbpp_270_sum_even_and_even_index","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of even numbers at even positions of a list.\n(define (sum_even_and_even_index arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_270_sum_even_and_even_index.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_even_and_even_index))\n    (check-within (candidate (list 5 6 12 1 18 8)) 30 0.001)\n    (check-within (candidate (list 3 20 17 9 2 10 18 13 6 18)) 26 0.001)\n    (check-within (candidate (list 5 6 12 1)) 12 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_270_sum_even_and_even_index","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the sum of even numbers at even positions of a list\n(define (sum_even_and_even_index arr)\n  (define (helper lst index acc)\n    (cond\n      [(null? lst) acc]  ;; When the list is empty, return the accumulated sum\n      [else\n       (define current-val (car lst))\n       (define rest-lst (cdr lst))\n       (if (and (even? index) (even? current-val))\n           (helper rest-lst (+ index 1) (+ acc current-val))\n           (helper rest-lst (+ index 1) acc))]))\n  (helper arr 0 0))\n\n;; Example usage\n(sum_even_and_even_index '(1 2 3 4 5 6 7 8 9 10))  ;; Output should be 10 (4 + 6)\n```"}
{"name":"mbpp_271_even_Power_Sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n(define (even_Power_Sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_271_even_Power_Sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_Power_Sum))\n    (check-within (candidate 2) 1056 0.001)\n    (check-within (candidate 3) 8832 0.001)\n    (check-within (candidate 1) 32 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_271_even_Power_Sum","gpt_solution":"```racket\n#lang racket\n\n;; Function to compute the sum of the first n even natural numbers raised to the fifth power.\n(define (even_Power_Sum n)\n  (define (even-number k)\n    (* 2 k)) ; generates the k-th even natural number\n\n  (define (power-five x)\n    (expt x 5)) ; raises x to the fifth power\n\n  (define (sum lst)\n    (foldl + 0 lst)) ; computes the sum of the elements in lst\n\n  (sum (map (lambda (k) (power-five (even-number k)))\n            (range 1 (+ n 1))))) ; generates a list of the first n even natural numbers and computes the sum of their fifth powers\n\n;; Example usage:\n;; (even_Power_Sum 3) should return 64384 because (2^5 + 4^5 + 6^5) = (32 + 1024 + 7776) = 8832\n```"}
{"name":"mbpp_272_rear_extract","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list of lists and returns a list containing the rear element of each list.\n(define (rear_extract test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_272_rear_extract.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rear_extract))\n    (check-within (candidate (list (list 1 \"Rash\" 21) (list 2 \"Varsha\" 20) (list 3 \"Kil\" 19))) (list 21 20 19) 0.001)\n    (check-within (candidate (list (list 1 \"Sai\" 36) (list 2 \"Ayesha\" 25) (list 3 \"Salman\" 45))) (list 36 25 45) 0.001)\n    (check-within (candidate (list (list 1 \"Sudeep\" 14) (list 2 \"Vandana\" 36) (list 3 \"Dawood\" 56))) (list 14 36 56) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_272_rear_extract","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list of lists and returns a list containing the rear element of each list.\n(define (rear_extract test_list)\n  (map last test_list))\n\n;; Example usage:\n(rear_extract '((1 2 3) (4 5) (6) (7 8 9 10))) ;; Expected output: '(3 5 6 10)\n```"}
{"name":"mbpp_273_substract_elements","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (substract_elements test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_273_substract_elements.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate substract_elements))\n    (check-within (candidate (list 10 4 5) (list 2 5 18)) (list 8 -1 -13) 0.001)\n    (check-within (candidate (list 11 2 3) (list 24 45 16)) (list -13 -43 -13) 0.001)\n    (check-within (candidate (list 7 18 9) (list 10 11 12)) (list -3 7 -3) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_273_substract_elements","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\n(define (subtract_elements lst1 lst2)\n  (map - lst1 lst2))\n\n;; Example usage:\n(define list1 '(10 20 30))\n(define list2 '(1 2 3))\n\n(subtract_elements list1 list2)  ;; Output: '(9 18 27)\n```"}
{"name":"mbpp_274_even_binomial_Coeff_Sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n(define (even_binomial_Coeff_Sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_274_even_binomial_Coeff_Sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_binomial_Coeff_Sum))\n    (check-within (candidate 4) 8 0.001)\n    (check-within (candidate 6) 32 0.001)\n    (check-within (candidate 2) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_274_even_binomial_Coeff_Sum","gpt_solution":"```racket\n#lang racket\n\n;; Function to calculate binomial coefficient C(n, k)\n(define (binomial-coeff n k)\n  (if (or (= k 0) (= k n))\n      1\n      (+ (binomial-coeff (- n 1) (- k 1))\n         (binomial-coeff (- n 1) k))))\n\n;; Function to find the sum of even index binomial coefficients\n(define (even-binomial-coeff-sum n)\n  (define sum 0)\n  (for ([k (in-range 0 (+ n 1))])\n    (when (even? k)\n      (set! sum (+ sum (binomial-coeff n k)))))\n  sum)\n\n;; Example usage:\n(even-binomial-coeff-sum 5) ; This should return the sum of C(5, 0) + C(5, 2) + C(5, 4)\n```\n\nThe function `binomial-coeff` calculates the binomial coefficient for given `n` and `k` using a recursive approach. The `even-binomial-coeff-sum` function calculates the sum of the binomial coefficients at even indices by iterating over the range from 0 to n, checking for even indices, and accumulating the sum of the corresponding binomial coefficients."}
{"name":"mbpp_277_dict_filter","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a hash and integer n and filters the hash to only include entries with values greater than or equal to n.\n(define (dict_filter dict n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_277_dict_filter.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dict_filter))\n    (check-within (candidate #hash((\"Cierra Vega\" .  175) (\"Alden Cantrell\" .  180) (\"Kierra Gentry\" .  165) (\"Pierre Cox\" .  190)) 170) #hash((\"Cierra Vega\" .  175) (\"Alden Cantrell\" .  180) (\"Pierre Cox\" .  190)) 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  175) (\"Alden Cantrell\" .  180) (\"Kierra Gentry\" .  165) (\"Pierre Cox\" .  190)) 180) #hash((\"Alden Cantrell\" .  180) (\"Pierre Cox\" .  190)) 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  175) (\"Alden Cantrell\" .  180) (\"Kierra Gentry\" .  165) (\"Pierre Cox\" .  190)) 190) #hash((\"Pierre Cox\" .  190)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_277_dict_filter","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a hash and integer n and filters the hash to only include entries with values greater than or equal to n.\n(define (dict_filter dict n)\n  (define filtered-dict (make-hash))\n  (for-each (lambda (key val)\n              (when (>= val n)\n                (hash-set! filtered-dict key val)))\n            (hash-keys dict)\n            (hash-values dict))\n  filtered-dict)\n```"}
{"name":"mbpp_278_count_first_elements","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the number of elements that occurs before the list element in the given list.\n(define (count_first_elements test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_278_count_first_elements.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_first_elements))\n    (check-within (candidate (list 1 5 7 (list 4 6) 10)) 3 0.001)\n    (check-within (candidate (list 2 9 (list 5 7) 11)) 2 0.001)\n    (check-within (candidate (list 11 15 5 8 (list 2 3) 8)) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_278_count_first_elements","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the number of elements that occur \n;; before the list element in the given list.\n(define (count_first_elements lst)\n  (cond\n    ;; If the list is empty, return 0\n    [(null? lst) 0]\n    ;; If the first element is a list, count only elements before the list element.\n    [(list? (first lst)) 0]\n    ;; Otherwise, continue counting the elements and move to the next element\n    [else (+ 1 (count_first_elements (rest lst)))]))\n\n;; Example usage:\n(count_first_elements '(1 2 3 (4 5) 6 7)) ; should return 3\n```"}
{"name":"mbpp_279_is_num_decagonal","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the nth decagonal number.\n(define (is_num_decagonal n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_279_is_num_decagonal.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_num_decagonal))\n    (check-within (candidate 3) 27 0.001)\n    (check-within (candidate 7) 175 0.001)\n    (check-within (candidate 10) 370 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_279_is_num_decagonal","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the nth decagonal number.\n;; Decagonal numbers are given by the formula: n(4n - 3)\n\n(define (nth-decagonal-number n)\n  (* n (- (* 4 n) 3)))\n\n;; Example usage:\n;; (nth-decagonal-number 1) ; => 1\n;; (nth-decagonal-number 2) ; => 7\n;; (nth-decagonal-number 3) ; => 18\n;; (nth-decagonal-number 4) ; => 34\n```"}
{"name":"mbpp_280_sequential_search","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_280_sequential_search.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-within (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3) 0.001)\n    (check-within (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7) 0.001)\n    (check-within (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_280_sequential_search","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list \n;; and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search-helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]  ; list is empty, item not found\n      [(equal? (first dlist) item) (list #t index)]  ; item is found\n      [else (search-helper (rest dlist) item (+ index 1))]))  ; recur for the rest of the list\n  (search-helper dlist item 0))\n  \n;; Example usage:\n(sequential_search '(1 2 3 4 5) 3)   ;; Returns '(#t 2)\n(sequential_search '(1 2 3 4 5) 6)   ;; Returns '(#f -1)\n```"}
{"name":"mbpp_281_all_unique","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check if the elements of a given list are unique or not.\n(define (all_unique test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_281_all_unique.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_unique))\n    (check-within (candidate (list 1 2 3)) #t 0.001)\n    (check-within (candidate (list 1 2 1 2)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_281_all_unique","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to check if the elements of a given list are unique or not.\n(define (all_unique test_list)\n  (define (helper lst seen)\n    (cond\n      [(null? lst) #t]\n      [(set-member? seen (car lst)) #f]\n      [else (helper (cdr lst) (set-add seen (car lst)))]))\n  (helper test_list (set)))\n\n;; Testing the function\n(all_unique '(1 2 3 4 5))   ; Should return #t\n(all_unique '(1 2 3 4 4 5)) ; Should return #f\n```"}
{"name":"mbpp_282_sub_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_282_sub_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sub_list))\n    (check-within (candidate (list 1 2 3) (list 4 5 6)) (list -3 -3 -3) 0.001)\n    (check-within (candidate (list 1 2) (list 3 4)) (list -2 -2) 0.001)\n    (check-within (candidate (list 90 120) (list 50 70)) (list 40 50) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_282_sub_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to subtract two lists element-wise.\n(define (sub_list nums1 nums2)\n  (map - nums1 nums2))\n\n;; Example usage\n(sub_list '(10 20 30) '(1 2 3)) ;; Returns '(9 18 27)\n(sub_list '(5 6 7) '(2 4 7))    ;; Returns '(3 2 0)\n```"}
{"name":"mbpp_283_validate","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n(define (validate n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_283_validate.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate validate))\n    (check-within (candidate 1234) #t 0.001)\n    (check-within (candidate 51241) #f 0.001)\n    (check-within (candidate 321) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_283_validate","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n(define (validate n)\n  (define (digit-frequency num)\n    (define digits (make-vector 10 0))\n    (for ([d (in-list (map (\u03bb(c) (- (char->integer c) 48)) (string->list (number->string (abs num)))))] )\n      (vector-set! digits d (+ 1 (vector-ref digits d))))\n    digits)\n  \n  (define freqs (digit-frequency n))\n  (define is-valid #t)\n  (for ([i (in-range 10)])\n    (when (> (vector-ref freqs i) i)\n      (set! is-valid #f)))\n  is-valid)\n\n;; Example Usage\n(validate 23221) ;; Returns #t\n(validate 32211) ;; Returns #f\n```\n\nThis Racket function `validate` checks whether the frequency of each digit in the integer is less than or equal to the digit itself. It utilizes a helper function `digit-frequency` to compute the frequency of digits in the given integer and then verifies the required condition."}
{"name":"mbpp_284_check_element","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element list element)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_284_check_element.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_element))\n    (check-within (candidate (list \"green\" \"orange\" \"black\" \"white\") \"blue\") #f 0.001)\n    (check-within (candidate (list 1 2 3 4) 7) #f 0.001)\n    (check-within (candidate (list \"green\" \"green\" \"green\" \"green\") \"green\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_284_check_element","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n(define (check_element lst element)\n  (cond\n    [(empty? lst) #t] ; If the list is empty, return true\n    [(equal? (first lst) element) (check_element (rest lst) element)] ; If the first element matches, check the rest\n    [else #f] ; If the first element does not match, return false\n  ))\n```\n\nThis code defines a function `check_element` that recursively checks each element in the list to determine whether it matches the given element. If all elements in the list match the given element, it returns `#t` (true); otherwise, it returns `#f` (false)."}
{"name":"mbpp_285_text_match_two_three","language":"rkt","prompt":"#lang racket\n\n;; Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n(define (text_match_two_three text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_285_text_match_two_three.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_two_three))\n    (check-within (candidate \"ac\") #f 0.001)\n    (check-within (candidate \"dc\") #f 0.001)\n    (check-within (candidate \"abbbba\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_285_text_match_two_three","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n(define (text_match_two_three text)\n  ;; Use a regular expression to check the pattern 'a' followed by 'bb' or 'bbb'\n  (define pattern #rx\"ab{2,3}\")\n  (regexp-match? pattern text))\n```\n\nThis function uses a regular expression to check for the specific pattern. The regular expression `#rx\"ab{2,3}\"` matches the character `a` followed by exactly two or three `b` characters. The `regexp-match?` function returns `#t` if the pattern is found in the input string, and `#f` otherwise."}
{"name":"mbpp_286_max_sub_array_sum_repeated","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n(define (max_sub_array_sum_repeated a n k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_286_max_sub_array_sum_repeated.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum_repeated))\n    (check-within (candidate (list 10 20 -30 -1) 4 3) 30 0.001)\n    (check-within (candidate (list -1 10 20) 3 2) 59 0.001)\n    (check-within (candidate (list -1 -2 -3) 3 3) -1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_286_max_sub_array_sum_repeated","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n(define (max-sub-array-sum-repeated a n k)\n  ;; Helper function to find the maximum subarray sum using Kadane's Algorithm\n  (define (max-sub-array-sum a n)\n    (define max-so-far (make-parameter (first a)))\n    (define max-ending-here 0)\n    \n    (for ([i (in-range n)])\n      (set! max-ending-here (+ max-ending-here (list-ref a i)))\n      (when (< max-ending-here (list-ref a i))\n        (set! max-ending-here (list-ref a i)))\n      (when (> (max-so-far) max-ending-here)\n        (max-so-far max-ending-here)))\n    (max-so-far))\n\n  ;; Calculate the sum of the given array\n  (define array-sum (apply + a))\n  \n  ;; Apply Kadane's algorithm for two concatenated arrays to handle edge cases\n  (define max-two-arrays (max-sub-array-sum (append a a) (* 2 n)))\n\n  ;; If k is 1, just return the max subarray sum for one array\n  (if (= k 1)\n      (max-sub-array-sum a n)\n      \n      ;; Else, consider the case for multiple arrays\n      (max\n       ;; Maximum subarray sum found in two concatenated arrays\n       max-two-arrays\n       \n       ;; Sum of entire array multiplied by (k - 2) plus two max-sub-arrays concatenated sum if array-sum is positive\n       (+ max-two-arrays (* (max 0 array-sum) (- k 2))))))\n```"}
{"name":"mbpp_287_square_Sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n(define (square_Sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_287_square_Sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate square_Sum))\n    (check-within (candidate 2) 20 0.001)\n    (check-within (candidate 3) 56 0.001)\n    (check-within (candidate 4) 120 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_287_square_Sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n(define (square_Sum n)\n  (define (square x) (* x x))\n  (define (sum-of-squares acc i count)\n    (if (= count n)\n        acc\n        (sum-of-squares (+ acc (square (* 2 i))) (add1 i) (add1 count))))\n  (sum-of-squares 0 1 0))\n```\n\nThis Racket code defines a `square_Sum` function that takes an integer `n` and returns the sum of squares of the first `n` even natural numbers. The helper function `sum-of-squares` uses recursion to accumulate the sum of these squares."}
{"name":"mbpp_290_max_length","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the list of maximum length in a list of lists.\n(define (max_length list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_290_max_length.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_length))\n    (check-within (candidate (list (list 0) (list 1 3) (list 5 7) (list 9 11) (list 13 15 17))) (list 3 (list 13 15 17)) 0.001)\n    (check-within (candidate (list (list 1) (list 5 7) (list 10 12 14 15))) (list 4 (list 10 12 14 15)) 0.001)\n    (check-within (candidate (list (list 5) (list 15 20 25))) (list 3 (list 15 20 25)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_290_max_length","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the list of maximum length in a list of lists.\n(define (max-length list-of-lists)\n  (define (longest lst1 lst2)\n    (if (> (length lst1) (length lst2))\n        lst1\n        lst2))\n  (if (null? list-of-lists)\n      null\n      (foldl longest '() list-of-lists)))\n\n;; Example usage:\n(max-length '((1 2) (3 4 5) (6) (7 8 9 10)))  ;; Output: (7 8 9 10)\n(max-length '((1 2 3) (4) (5 6)))             ;; Output: (1 2 3)\n```"}
{"name":"mbpp_291_count_no_of_ways","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n(define (count_no_of_ways n k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_291_count_no_of_ways.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_no_of_ways))\n    (check-within (candidate 2 4) 16 0.001)\n    (check-within (candidate 3 2) 6 0.001)\n    (check-within (candidate 4 4) 228 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_291_count_no_of_ways","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the number of ways to paint the fence such that at most 2 adjacent posts have the same color\n(define (count_no_of_ways n k)\n  ;; If there are no posts, there are no ways to paint the fence\n  (if (= n 0)\n      0\n      (let loop ([i 2]\n                 [same k]\n                 [diff (* k (- k 1))])\n        (if (= i n)\n            (+ same diff)\n            (loop (+ i 1)\n                  diff\n                  (+ (* diff (- k 1)) (* same (- k 1))))))))\n\n;; Usage Example\n;; (count_no_of_ways 3 2) should return 6\n(count_no_of_ways 3 2)\n```"}
{"name":"mbpp_292_find","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find quotient of two numbers (rounded down to the nearest integer).\n(define (find n m)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_292_find.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find))\n    (check-within (candidate 10 3) 3 0.001)\n    (check-within (candidate 4 2) 2 0.001)\n    (check-within (candidate 20 5) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_292_find","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find quotient of two numbers (rounded down to the nearest integer).\n(define (find n m)\n  (if (or (not (integer? n)) (not (integer? m)) (zero? m))\n      (error \"Inputs must be integers and denominator must be non-zero.\")\n      (quotient n m)))\n```\n\nThis Racket function, `find`, takes two inputs `n` and `m`, checks if both inputs are integers and if the denominator `m` is non-zero. If the inputs are valid, it calculates the quotient of `n` divided by `m` (rounded down to the nearest integer, as per Racket's `quotient` function). If the inputs are invalid, it raises an error."}
{"name":"mbpp_293_otherside_rightangle","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the third side of a right angled triangle.\n(define (otherside_rightangle w h)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_293_otherside_rightangle.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate otherside_rightangle))\n    (check-within (candidate 7 8) 10.63014581273465 0.001)\n    (check-within (candidate 3 4) 5 0.001)\n    (check-within (candidate 7 15) 16.55294535724685 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_293_otherside_rightangle","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the third side of a right angled triangle.\n;; Given two sides (w and h) of a right-angled triangle,\n;; the function will return the length of the third side.\n;; Depending on which side w and h are, the third side could be the hypotenuse or one of the legs.\n\n(define (otherside_rightangle w h)\n  (define max-side (max w h))\n  (define min-side (min w h))\n  (sqrt (- (sqr max-side) (sqr min-side))))\n\n;; Example usage:\n;; (otherside_rightangle 5 3) ; Should return 4 for a 3-4-5 triangle\n;; (otherside_rightangle 13 12) ; Should return 5 for 5-12-13 triangle\n```"}
{"name":"mbpp_294_max_val","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the maximum value in a given heterogeneous list.\n(define (max_val listval)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_294_max_val.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_val))\n    (check-within (candidate (list \"Python\" 3 2 4 5 \"version\")) 5 0.001)\n    (check-within (candidate (list \"Python\" 15 20 25)) 25 0.001)\n    (check-within (candidate (list \"Python\" 30 20 40 50 \"version\")) 50 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_294_max_val","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the maximum value in a given heterogeneous list.\n(define (max_val listval)\n  ;; Helper function to filter and flatten the list to only numeric values\n  (define (extract-numbers l)\n    (cond\n      [(null? l) '()]\n      [(list? (car l)) (append (extract-numbers (car l)) (extract-numbers (cdr l)))]\n      [(number? (car l)) (cons (car l) (extract-numbers (cdr l)))]\n      [else (extract-numbers (cdr l))]))\n  \n  (define nums (extract-numbers listval))\n  \n  (if (null? nums)\n      (error \"The list contains no numeric values\")\n      (apply max nums)))\n\n;; Test cases\n(max_val '(1 2 3 4 5))                ;; returns 5\n(max_val '(5 \"a\" 3 (2 (8)) 7 1))      ;; returns 8\n(max_val '(\"hello\" (1 2 \"world\") 3))  ;; returns 3\n(max_val '(\"a\" \"b\" \"c\"))              ;; raises error\n```"}
{"name":"mbpp_295_sum_div","language":"rkt","prompt":"#lang racket\n\n;; Write a function to return the sum of all divisors of a number.\n(define (sum_div number)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_295_sum_div.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_div))\n    (check-within (candidate 8) 7 0.001)\n    (check-within (candidate 12) 16 0.001)\n    (check-within (candidate 7) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_295_sum_div","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to return the sum of all divisors of a number.\n(define (sum_div number)\n  (define (sum_div_helper n acc)\n    (if (= n 0)\n        acc\n        (if (= (modulo number n) 0)\n            (sum_div_helper (sub1 n) (+ acc n))\n            (sum_div_helper (sub1 n) acc))))\n  (sum_div_helper number 0))\n\n;; Example usage\n(sum_div 12)  ;; Should return 28 (1 + 2 + 3 + 4 + 6 + 12)\n(sum_div 6)   ;; Should return 12 (1 + 2 + 3 + 6)\n(sum_div 8)   ;; Should return 15 (1 + 2 + 4 + 8)\n```"}
{"name":"mbpp_296_get_Inv_Count","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count inversions in a list.\n(define (get_Inv_Count arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_296_get_Inv_Count.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_Inv_Count))\n    (check-within (candidate (list 1 20 6 4 5)) 5 0.001)\n    (check-within (candidate (list 1 2 1)) 1 0.001)\n    (check-within (candidate (list 1 2 5 6 1)) 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_296_get_Inv_Count","gpt_solution":"```racket\n#lang racket\n\n;; Function to count inversions in a list.\n;; Inversion Count for an array indicates \u2013 how far (or close) \n;; the array is from being sorted. If array is already sorted \n;; then the inversion count is 0. If an array is sorted in the \n;; reverse order that inversion count is the maximum.\n;; Formally speaking, two elements a[i] and a[j] form an inversion\n;; if a[i] > a[j] and i < j\n\n(define (merge-and-count left right)\n  (define (merge-helper l r merged count)\n    (cond\n      [(null? l) (values (append merged r) count)]\n      [(null? r) (values (append merged l) count)]\n      [(<= (car l) (car r)) (merge-helper (cdr l) r (append merged (list (car l))) count)]\n      [else (merge-helper l (cdr r) (append merged (list (car r))) (+ count (length l)))]))\n  (merge-helper left right '() 0))\n\n(define (count-inversions lst)\n  (define (count-inversions-helper sub-lst)\n    (if (or (null? sub-lst) (null? (cdr sub-lst)))\n        (values sub-lst 0)\n        (let* ([mid (quotient (length sub-lst) 2)]\n               [left (take sub-lst mid)]\n               [right (drop sub-lst mid)])\n          (define-values (sorted-left left-inv) (count-inversions-helper left))\n          (define-values (sorted-right right-inv) (count-inversions-helper right))\n          (define-values (merged sorted-and-count) (merge-and-count sorted-left sorted-right))\n          (values merged (+ left-inv right-inv sorted-and-count)))))\n  (define-values (sorted total-count) (count-inversions-helper lst))\n  total-count)\n\n;; Example usage\n(count-inversions '(2 4 1 3 5)) ;; Output: 3\n```\n\nIn the above code:\n- `merge-and-count` function merges two sorted lists counting the inversions.\n- `count-inversions-helper` recursively divides the list into halves and counts the inversions in each half and merges them.\n- `count-inversions` is the function to be called to count the inversions in the list.\n\nThis code assumes an initial list, processes it, and computes the inversion count without requiring any additional main function."}
{"name":"mbpp_297_flatten_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_297_flatten_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flatten_list))\n    (check-within (candidate (list 0 10 (list 20 30) 40 50 (list 60 70 80) (list 90 100 110 120))) (list 0 10 20 30 40 50 60 70 80 90 100 110 120) 0.001)\n    (check-within (candidate (list (list 10 20) (list 40) (list 30 56 25) (list 10 20) (list 33) (list 40))) (list 10 20 40 30 56 25 10 20 33 40) 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 1 2 3 4 5 6 10 11 12 7 8 9) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_297_flatten_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to flatten a given nested list structure.\n(define (flatten_list list1)\n  (cond\n    [(null? list1) '()]  ; If the list is empty, return an empty list\n    [(list? (first list1))  ; If the first element is a list, flatten it and append the result with the flattening of the rest of the list\n     (append (flatten_list (first list1)) (flatten_list (rest list1)))]\n    [else  ; If the first element is not a list, cons it to the result of flattening the rest of the list\n     (cons (first list1) (flatten_list (rest list1)))]\n  )\n)\n\n;; Examples\n(flatten_list '(1 (2 3) ((4 5) 6) 7)) ; => '(1 2 3 4 5 6 7)\n(flatten_list '((1 2) 3 (4 (5 6)) 7)) ; => '(1 2 3 4 5 6 7)\n(flatten_list '()) ; => '()\n(flatten_list '(1 2 3)) ; => '(1 2 3)\n```"}
{"name":"mbpp_299_max_aggregate","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_299_max_aggregate.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_aggregate))\n    (check-within (candidate (list (list \"Juan Whelan\" 90) (list \"Sabah Colley\" 88) (list \"Peter Nichols\" 7) (list \"Juan Whelan\" 122) (list \"Sabah Colley\" 84))) (list \"Juan Whelan\" 212) 0.001)\n    (check-within (candidate (list (list \"Juan Whelan\" 50) (list \"Sabah Colley\" 48) (list \"Peter Nichols\" 37) (list \"Juan Whelan\" 22) (list \"Sabah Colley\" 14))) (list \"Juan Whelan\" 72) 0.001)\n    (check-within (candidate (list (list \"Juan Whelan\" 10) (list \"Sabah Colley\" 20) (list \"Peter Nichols\" 30) (list \"Juan Whelan\" 40) (list \"Sabah Colley\" 50))) (list \"Sabah Colley\" 70) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_299_max_aggregate","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to calculate the maximum aggregate from the list of lists.\n(define (max_aggregate stdata)\n  (define (aggregate lst)\n    (apply + lst)) ; Function to calculate the sum of a list\n\n  (define (max-aggr-helper lsts)\n    (if (null? lsts)\n        0 ; If the list of lists is empty, return 0\n        (max (aggregate (first lsts)) (max-aggr-helper (rest lsts))))) ; Compare the sum of the first list with the max sum of the rest\n\n  (max-aggr-helper stdata)) ; Pass the input to the helper function\n\n;; Example usage\n(max_aggregate '((10 20 30) (5 15 25 35) (40 50 60)))\n;; => 150\n```"}
{"name":"mbpp_304_find_Element","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find element at a given index after number of rotations.\n(define (find_Element arr ranges rotations index)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_304_find_Element.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Element))\n    (check-within (candidate (list 1 2 3 4 5) (list (list 0 2) (list 0 3)) 2 1) 3 0.001)\n    (check-within (candidate (list 1 2 3 4) (list (list 0 1) (list 0 2)) 1 2) 3 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list (list 0 1) (list 0 2)) 1 1) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_304_find_Element","gpt_solution":"```racket\n#lang racket\n\n;; Find the element at a given index after a given number of rotations.\n(define (find_Element arr ranges rotations index)\n  ;; Helper function to perform a single rotation on a given subarray\n  (define (rotate-subarray arr start end)\n    (if (= start end)\n        arr\n        (let* ([rotated-subarray (append (list (list-ref arr end))\n                                         (sublist arr start end))])\n          (append (sublist arr 0 start)\n                  rotated-subarray\n                  (sublist arr (+ end 1))))))\n\n  ;; Perform the specified number of rotations\n  (define modified-arr arr)\n  (for ([rotation rotations])\n    (define start (list-ref ranges (* rotation 2)))\n    (define end (list-ref ranges (+ (* rotation 2) 1)))\n    (set! modified-arr (rotate-subarray modified-arr start end)))\n\n  ;; Get the element at the desired index\n  (list-ref modified-arr index))\n\n;; Example Usage\n(define arr '(1 2 3 4 5))\n(define ranges '(1 3 0 2))\n(define rotations '(0 1))\n(define index 2)\n(display (find_Element arr ranges rotations index)) ; Output will vary based on input.\n```\n\nThe above Racket code does the following:\n1. Defines a function `find_Element` that takes an array `arr`, a list of ranges `ranges`, a list of rotations `rotations`, and an index `index`.\n2. It includes a helper function `rotate-subarray` to perform a single right rotation on a subarray defined by the start and end positions.\n3. The `find_Element` function performs the specified number of rotations by iterating over the `rotations` list.\n4. Finally, it retrieves and returns the element at the specified index in the modified array after all rotations are completed."}
{"name":"mbpp_305_start_withp","language":"rkt","prompt":"#lang racket\n\n;; Write a function to return two words from a list of words starting with letter 'p'.\n(define (start_withp words)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_305_start_withp.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate start_withp))\n    (check-within (candidate (list \"Python PHP\" \"Java JavaScript\" \"c c++\")) (list \"Python\" \"PHP\") 0.001)\n    (check-within (candidate (list \"Python Programming\" \"Java Programming\")) (list \"Python\" \"Programming\") 0.001)\n    (check-within (candidate (list \"Pqrst Pqr\" \"qrstuv\")) (list \"Pqrst\" \"Pqr\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_305_start_withp","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to return two words from a list of words starting with letter 'p'.\n(define (start_withp words)\n  (let loop ([words words] [result '()])\n    (cond\n      [(or (empty? words) (>= (length result) 2))\n       result]\n      [(char=? (string-ref (first words) 0) #\\p)\n       (loop (rest words) (append result (list (first words))))]\n      [else\n       (loop (rest words) result)])))\n\n;; Example usage:\n;; (start_withp '(\"apple\" \"banana\" \"peach\" \"plum\" \"pear\" \"grape\"))\n;; => '(\"peach\" \"plum\")\n```"}
{"name":"mbpp_306_max_sum_increasing_subseq","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n(define (max_sum_increasing_subseq a n index k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_306_max_sum_increasing_subseq.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_increasing_subseq))\n    (check-within (candidate (list 1 101 2 3 100 4 5) 7 4 6) 11 0.001)\n    (check-within (candidate (list 1 101 2 3 100 4 5) 7 2 5) 7 0.001)\n    (check-within (candidate (list 11 15 19 21 26 28 31) 7 2 4) 71 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_306_max_sum_increasing_subseq","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n(define (max-sum-increasing-subseq a n index k)\n  (let loop ([i 0]\n             [max-sum 0]\n             [current-sum 0]\n             [prev -inf.0])\n    (if (<= i index)\n        (if (> (vector-ref a i) prev)\n            (loop (add1 i) \n                  (max max-sum (+ current-sum (vector-ref a i)))\n                  (+ current-sum (vector-ref a i))\n                  (vector-ref a i))\n            (loop (add1 i) \n                  max-sum\n                  current-sum\n                  prev))\n        (if (and (< index k) (> (vector-ref a k) prev))\n            (max max-sum (+ current-sum (vector-ref a k)))\n            max-sum))))\n\n;; Example usage\n(define a (vector 1 2 3 4 5))\n(define n (vector-length a))\n(define index 2)\n(define k 4)\n\n(max-sum-increasing-subseq a n index k) ; Should return the maximum sum including element at index 4\n```"}
{"name":"mbpp_308_large_product","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n(define (large_product nums1 nums2 N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_308_large_product.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate large_product))\n    (check-within (candidate (list 1 2 3 4 5 6) (list 3 6 8 9 10 6) 3) (list 60 54 50) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list 3 6 8 9 10 6) 4) (list 60 54 50 48) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list 3 6 8 9 10 6) 5) (list 60 54 50 48 45) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_308_large_product","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n(define (large_product nums1 nums2 N)\n  ;; Create a list of all possible products from the two lists\n  (define all-products\n    (for*\/list ([x nums1] [y nums2])\n      (* x y)))\n  \n  ;; Sort the products in descending order and take the first N elements\n  (take (sort all-products >) N))\n\n;; Example usage:\n;; (large_product '(1 2 3) '(4 5 6) 3)\n;; This should return the largest 3 products.\n```\n\nThis code defines the `large_product` function, which generates all possible products from pairs of elements drawn from `nums1` and `nums2`, sorts these products in descending order, and then returns the top N largest products."}
{"name":"mbpp_309_maximum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the maximum of two numbers.\n(define (maximum a b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_309_maximum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-within (candidate 5 10) 10 0.001)\n    (check-within (candidate -1 -2) -1 0.001)\n    (check-within (candidate 9 7) 9 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_309_maximum","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the maximum of two numbers.\n(define (maximum a b)\n  (if (> a b)\n      a\n      b))\n```\n\nThis Racket code defines a function `maximum` that takes two arguments `a` and `b` and returns the greater of the two. If `a` is greater than `b`, it returns `a`; otherwise, it returns `b`."}
{"name":"mbpp_310_string_to_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert a given string to a list of characters.\n(define (string_to_tuple str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_310_string_to_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_tuple))\n    (check-within (candidate \"python 3.0\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\" \"3\" \".\" \"0\") 0.001)\n    (check-within (candidate \"item1\") (list \"i\" \"t\" \"e\" \"m\" \"1\") 0.001)\n    (check-within (candidate \"15.10\") (list \"1\" \"5\" \".\" \"1\" \"0\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_310_string_to_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert a given string to a list of characters.\n(define (string_to_tuple str1)\n  (string->list str1))\n\n;; Example usage:\n(string_to_tuple \"hello\")\n;; Output: '(#\\h #\\e #\\l #\\l #\\o)\n```"}
{"name":"mbpp_388_highest_Power_of_2","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the highest power of 2 that is less than or equal to n.\n(define (highest_Power_of_2 n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_388_highest_Power_of_2.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate highest_Power_of_2))\n    (check-within (candidate 10) 8 0.001)\n    (check-within (candidate 19) 16 0.001)\n    (check-within (candidate 32) 32 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_388_highest_Power_of_2","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the highest power of 2 that is less than or equal to n.\n(define (highest_Power_of_2 n)\n  (define (helper k)\n    (if (> (expt 2 k) n)\n        (expt 2 (- k 1))\n        (helper (+ k 1))))\n  (if (<= n 0)\n      (error \"n must be a positive integer\")\n      (helper 0)))\n\n;; Examples:\n;; (highest_Power_of_2 0) => error \"n must be a positive integer\"\n;; (highest_Power_of_2 1) => 1\n;; (highest_Power_of_2 2) => 2\n;; (highest_Power_of_2 5) => 4\n;; (highest_Power_of_2 32) => 32\n;; (highest_Power_of_2 1023) => 512\n```\n\nThis code defines a function `highest_Power_of_2` that finds the highest power of 2 less than or equal to the given number `n`. The internal `helper` function recursively checks powers of 2 to find the highest one that does not exceed `n`. If `n` is non-positive, the function raises an error indicating that `n` must be a positive integer."}
{"name":"mbpp_389_find_lucas","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the n'th lucas number.\n(define (find_lucas n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_389_find_lucas.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_lucas))\n    (check-within (candidate 9) 76 0.001)\n    (check-within (candidate 4) 7 0.001)\n    (check-within (candidate 3) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_389_find_lucas","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the n'th lucas number.\n(define (find-lucas n)\n  (cond\n    [(= n 0) 2]\n    [(= n 1) 1]\n    [else (+ (find-lucas (- n 1)) (find-lucas (- n 2)))]))\n\n;; Test cases\n(find-lucas 0)  ; 2\n(find-lucas 1)  ; 1\n(find-lucas 2)  ; 3\n(find-lucas 3)  ; 4\n(find-lucas 4)  ; 7\n(find-lucas 5)  ; 11\n```"}
{"name":"mbpp_390_add_string","language":"rkt","prompt":"#lang racket\n\n;; Write a function to apply a given format string to all of the elements in a list.\n(define (add_string list_ string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_390_add_string.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_string))\n    (check-within (candidate (list 1 2 3 4) \"temp{0}\") (list \"temp1\" \"temp2\" \"temp3\" \"temp4\") 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"c\" \"d\") \"python{0}\") (list \"pythona\" \"pythonb\" \"pythonc\" \"pythond\") 0.001)\n    (check-within (candidate (list 5 6 7 8) \"string{0}\") (list \"string5\" \"string6\" \"string7\" \"string8\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_390_add_string","gpt_solution":"```racket\n#lang racket\n\n;; Function to apply a given format string to all of the elements in a list.\n(define (add_string list_ string)\n  (map (lambda (elem) (string-append string elem)) list_))\n\n;; Example usage\n(define my-list '(\"one\" \"two\" \"three\"))\n(define my-string \"prefix-\")\n\n(displayln (add_string my-list my-string))  ; Output: '(\"prefix-one\" \"prefix-two\" \"prefix-three\")\n```"}
{"name":"mbpp_391_convert_list_dictionary","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert more than one list to nested hash.\n(define (convert_list_dictionary l1 l2 l3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_391_convert_list_dictionary.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate convert_list_dictionary))\n    (check-within (candidate (list \"S001\" \"S002\" \"S003\" \"S004\") (list \"Adina Park\" \"Leyton Marsh\" \"Duncan Boyle\" \"Saim Richards\") (list 85 98 89 92)) (list #hash((\"S001\" .  #hash((\"Adina Park\" .  85)))) #hash((\"S002\" .  #hash((\"Leyton Marsh\" .  98)))) #hash((\"S003\" .  #hash((\"Duncan Boyle\" .  89)))) #hash((\"S004\" .  #hash((\"Saim Richards\" .  92))))) 0.001)\n    (check-within (candidate (list \"abc\" \"def\" \"ghi\" \"jkl\") (list \"python\" \"program\" \"language\" \"programs\") (list 100 200 300 400)) (list #hash((\"abc\" .  #hash((\"python\" .  100)))) #hash((\"def\" .  #hash((\"program\" .  200)))) #hash((\"ghi\" .  #hash((\"language\" .  300)))) #hash((\"jkl\" .  #hash((\"programs\" .  400))))) 0.001)\n    (check-within (candidate (list \"A1\" \"A2\" \"A3\" \"A4\") (list \"java\" \"C\" \"C++\" \"DBMS\") (list 10 20 30 40)) (list #hash((\"A1\" .  #hash((\"java\" .  10)))) #hash((\"A2\" .  #hash((\"C\" .  20)))) #hash((\"A3\" .  #hash((\"C++\" .  30)))) #hash((\"A4\" .  #hash((\"DBMS\" .  40))))) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_391_convert_list_dictionary","gpt_solution":"```racket\n#lang racket\n\n;; Function to convert three lists into a nested hash table\n(define (convert_list_dictionary l1 l2 l3)\n  (define ht (make-hash))\n  (for ([i (in-naturals)]\n        [key (in-list l1)]\n        [val1 (in-list l2)]\n        [val2 (in-list l3)])\n    (hash-set! ht key (hash 'val1 val1 'val2 val2)))\n  ht)\n\n;; Example usage:\n(define l1 '(a b c))\n(define l2 '(1 2 3))\n(define l3 '(4 5 6))\n\n(displayln (convert_list_dictionary l1 l2 l3))\n;; Output: '#hash((a . #hash((val1 . 1) (val2 . 4))) (b . #hash((val1 . 2) (val2 . 5))) (c . #hash((val1 . 3) (val2 . 6))))\n```"}
{"name":"mbpp_392_get_max_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n\/2) + f(n\/3) + f(n\/4) + f(n\/5)), n).\n(define (get_max_sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_392_get_max_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_sum))\n    (check-within (candidate 60) 106 0.001)\n    (check-within (candidate 10) 12 0.001)\n    (check-within (candidate 2) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_392_get_max_sum","gpt_solution":"```racket\n#lang racket\n\n;; Define a hashtable to use memoization for previously computed results\n(define memo (make-hash))\n\n;; Recursive function to find the maximum sum using the given equation\n(define (get_max_sum n)\n  (cond\n    ;; If n is 0 or 1, the maximum sum is simply n\n    [(<= n 1) n]\n    ;; Check the memoization table to avoid redundant computations\n    [(hash-ref memo n #f)]\n    ;; Calculate the maximum sum recursively\n    [else\n     (define result (max (+ (get_max_sum (quotient n 2))\n                            (get_max_sum (quotient n 3))\n                            (get_max_sum (quotient n 4))\n                            (get_max_sum (quotient n 5)))\n                         n))\n     ;; Store the result in the memoization table before returning\n     (hash-set! memo n result)\n     result]))\n\n;; Example call to the function\n(display (get_max_sum 100))\n```\n\nIn this code:\n- A hashtable named `memo` is created for memoization purposes to store previously computed results.\n- The function `get_max_sum` is defined to calculate the maximum sum using recursion as described in the prompt.\n- Base cases for `n` are handled (when `n` is 0 or 1, it returns `n`), and memoization is used to avoid redundant calculations.\n- The function uses the `quotient` function to perform integer division.\n- An example call is provided by calling `(display (get_max_sum 100))` to demonstrate the function's usage."}
{"name":"mbpp_393_max_length_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the list with maximum length.\n(define (max_length_list input_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_393_max_length_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_length_list))\n    (check-within (candidate (list (list 0) (list 1 3) (list 5 7) (list 9 11) (list 13 15 17))) (list 3 (list 13 15 17)) 0.001)\n    (check-within (candidate (list (list 1 2 3 4 5) (list 1 2 3 4) (list 1 2 3) (list 1 2) (list 1))) (list 5 (list 1 2 3 4 5)) 0.001)\n    (check-within (candidate (list (list 3 4 5) (list 6 7 8 9) (list 10 11 12))) (list 4 (list 6 7 8 9)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_393_max_length_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the list with maximum length.\n(define (max_length_list input_list)\n  (define (max-helper current max-so-far)\n    (cond\n      [(null? current) max-so-far]\n      [(> (length (first current)) (length max-so-far))\n       (max-helper (rest current) (first current))]\n      [else (max-helper (rest current) max-so-far)]))\n  (if (null? input_list)\n      '()\n      (max-helper (rest input_list) (first input_list))))\n```"}
{"name":"mbpp_394_check_distinct","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if given list contains no duplicates.\n(define (check_distinct test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_394_check_distinct.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_distinct))\n    (check-within (candidate (list 1 4 5 6 1 4)) #f 0.001)\n    (check-within (candidate (list 1 4 5 6)) #t 0.001)\n    (check-within (candidate (list 2 3 4 5 6)) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_394_check_distinct","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if given list contains no duplicates.\n(define (check_distinct test_tup)\n  (define (helper lst seen)\n    (cond\n      [(empty? lst) #t]\n      [(member (first lst) seen) #f]\n      [else (helper (rest lst) (cons (first lst) seen))]))\n  (helper test_tup '()))\n\n;; Example Usage:\n;; (check_distinct '(1 2 3 4)) ; #t\n;; (check_distinct '(1 2 3 4 2)) ; #f\n```"}
{"name":"mbpp_395_first_non_repeating_character","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the first non-repeated character in a given string.\n(define (first_non_repeating_character str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_395_first_non_repeating_character.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_non_repeating_character))\n    (check-within (candidate \"abcabc\") #f 0.001)\n    (check-within (candidate \"abc\") \"a\" 0.001)\n    (check-within (candidate \"ababc\") \"c\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_395_first_non_repeating_character","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the first non-repeated character in a given string.\n(define (first_non_repeating_character str1)\n  ;; A helper function to count occurrences of each character\n  (define (count-chars str)\n    (for\/fold ([counter (make-hash)])\n              ([char (in-string str)])\n      (hash-update counter char add1 0)))\n\n  (define char-counts (count-chars str1))\n  \n  ;; Find the first character with a count of 1\n  (for\/or ([char (in-string str1)])\n    (when (= (hash-ref char-counts char) 1)\n      (values char))))\n\n;; Example usage:\n(first_non_repeating_character \"stress\")  ;; Output: #\"t\"\n(first_non_repeating_character \"aabcc\")   ;; Output: #\"b\"\n(first_non_repeating_character \"aabbcc\")  ;; Output: #f (if no non-repeating character exists)\n```"}
{"name":"mbpp_396_check_char","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the given string starts and ends with the same character or not.\n(define (check_char string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_396_check_char.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_char))\n    (check-within (candidate \"abba\") \"Valid\" 0.001)\n    (check-within (candidate \"a\") \"Valid\" 0.001)\n    (check-within (candidate \"abcd\") \"Invalid\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_396_check_char","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the given string starts and ends with the same character or not.\n(define (check_char string)\n  (and\n   (not (string-empty? string))\n   (equal? (string-ref string 0)\n           (string-ref string (- (string-length string) 1)))))\n\n;; Examples:\n(check_char \"abca\")  ;; should return #t (true)\n(check_char \"abcd\")  ;; should return #f (false)\n(check_char \"\")      ;; should return #f (false, as empty string doesn't satisfy condition)\n(check_char \"a\")     ;; should return #t (true, same character at start and end)\n```"}
{"name":"mbpp_397_median_numbers","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_397_median_numbers.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_numbers))\n    (check-within (candidate 25 55 65) 55.0 0.001)\n    (check-within (candidate 20 10 30) 20.0 0.001)\n    (check-within (candidate 15 45 75) 45.0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_397_median_numbers","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the median of three numbers.\n(define (median_numbers a b c)\n  (cond\n    [(or (and (<= a b) (<= b c)) (and (<= c b) (<= b a))) b] ; b is the median\n    [(or (and (<= b a) (<= a c)) (and (<= c a) (<= a b))) a] ; a is the median\n    [else c]))                                              ; c is the median\n```"}
{"name":"mbpp_398_sum_of_digits","language":"rkt","prompt":"#lang racket\n\n;; Write a function to compute the sum of digits of each number of a given list.\n(define (sum_of_digits nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_398_sum_of_digits.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_of_digits))\n    (check-within (candidate (list 10 2 56)) 14 0.001)\n    (check-within (candidate (list (list 10 20 4 5 \"b\" 70 \"a\"))) 19 0.001)\n    (check-within (candidate (list 10 20 -4 5 -70)) 19 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_398_sum_of_digits","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to compute the sum of digits of each number of a given list.\n(define (sum_of_digits nums)\n  (define (digit-sum n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10) (digit-sum (quotient n 10)))))\n  (map digit-sum nums))\n\n;; Example usage:\n;; (sum_of_digits '(123 456 789)) ; => '(6 15 24)\n\n;; Testing the function with some lists\n(sum_of_digits '(123 456 789))   ; Output: '(6 15 24)\n(sum_of_digits '(0 321 654))     ; Output: '(0 6 15)\n(sum_of_digits '(12 34 56))      ; Output: '(3 7 11)\n```"}
{"name":"mbpp_399_bitwise_xor","language":"rkt","prompt":"#lang racket\n\n;; Write a function to perform the mathematical bitwise xor operation across the given lists.\n(define (bitwise_xor test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_399_bitwise_xor.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bitwise_xor))\n    (check-within (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 15 6 5 10) 0.001)\n    (check-within (candidate (list 11 5 7 10) (list 6 3 4 4)) (list 13 6 3 14) 0.001)\n    (check-within (candidate (list 12 6 8 11) (list 7 4 5 6)) (list 11 2 13 13) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_399_bitwise_xor","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to perform the mathematical bitwise xor operation across the given lists.\n(define (bitwise_xor test_tup1 test_tup2)\n  (map bitwise-xor test_tup1 test_tup2))\n\n;; Example usage:\n(bitwise_xor '(1 2 3) '(4 5 6))  ; returns '(5 7 5)\n```"}
{"name":"mbpp_400_extract_freq","language":"rkt","prompt":"#lang racket\n\n;; Write a function to extract the number of unique lists in the given list.\n(define (extract_freq test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_400_extract_freq.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_freq))\n    (check-within (candidate (list (list 3 4) (list 1 2) (list 4 3) (list 5 6))) 3 0.001)\n    (check-within (candidate (list (list 4 15) (list 2 3) (list 5 4) (list 6 7))) 4 0.001)\n    (check-within (candidate (list (list 5 16) (list 2 3) (list 6 5) (list 6 9))) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_400_extract_freq","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to extract the number of unique lists in the given list.\n(define (extract_freq test_list)\n  (define (unique-lists lst)\n    (define (list-member? lst1 lst2)\n      (cond\n        [(null? lst2) #f]\n        [(equal? lst1 (car lst2)) #t]\n        [else (list-member? lst1 (cdr lst2))]))\n    \n    (define (helper lst acc)\n      (cond\n        [(null? lst) acc]\n        [(list-member? (car lst) acc) (helper (cdr lst) acc)]\n        [else (helper (cdr lst) (cons (car lst) acc))]))\n    \n    (helper lst '()))\n  \n  (length (unique-lists test_list)))\n```\n\nThe above function `extract_freq` takes a list of lists as input and returns the number of unique lists within it. The `unique-lists` helper function generates a list of unique sublists, and `extract_freq` then calculates the length of this unique list."}
{"name":"mbpp_401_add_nested_tuples","language":"rkt","prompt":"#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_401_add_nested_tuples.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-within (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)) 0.001)\n    (check-within (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)) 0.001)\n    (check-within (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_401_add_nested_tuples","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (pair)\n         (map + (car pair) (cdr pair)))\n       (map cons test_tup1 test_tup2)))\n\n;; Example usage:\n(define list1 '((1 2 3) (4 5 6) (7 8 9)))\n(define list2 '((9 8 7) (6 5 4) (3 2 1)))\n\n(add_nested_tuples list1 list2)\n;; Output: '((10 10 10) (10 10 10) (10 10 10))\n```"}
{"name":"mbpp_404_minimum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the minimum of two numbers.\n(define (minimum a b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_404_minimum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minimum))\n    (check-within (candidate 1 2) 1 0.001)\n    (check-within (candidate -5 -4) -5 0.001)\n    (check-within (candidate 0 0) 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_404_minimum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the minimum of two numbers.\n(define (minimum a b)\n  (if (< a b)\n      a\n      b))\n\n;; Example usage:\n;; (minimum 3 5) -> 3\n;; (minimum 10 7) -> 7\n```"}
{"name":"mbpp_405_check_tuplex","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether an element exists within a list.\n(define (check_tuplex tuplex tuple1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_405_check_tuplex.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_tuplex))\n    (check-within (candidate (list \"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\") \"r\") #t 0.001)\n    (check-within (candidate (list \"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\") \"5\") #f 0.001)\n    (check-within (candidate (list \"w\" 3 \"r\" \"e\" \"s\" \"o\" \"u\" \"r\" \"c\" \"e\") 3) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_405_check_tuplex","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether an element exists within a list.\n(define (check_tuplex tuplex tuple1)\n  (if (null? tuplex)\n      #f\n      (if (equal? (car tuplex) tuple1)\n          #t\n          (check_tuplex (cdr tuplex) tuple1))))\n```"}
{"name":"mbpp_406_find_Parity","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find whether the parity of a given number is odd.\n(define (find_Parity x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_406_find_Parity.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Parity))\n    (check-within (candidate 12) #f 0.001)\n    (check-within (candidate 7) #t 0.001)\n    (check-within (candidate 10) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_406_find_Parity","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find whether the parity of a given number is odd.\n(define (find_Parity x)\n  (if (= (modulo x 2) 1)\n      #true\n      #false))\n\n;; Examples:\n(find_Parity 3)  ;; returns #true because 3 is odd\n(find_Parity 4)  ;; returns #false because 4 is even\n```"}
{"name":"mbpp_407_rearrange_bigger","language":"rkt","prompt":"#lang racket\n\n;; Write a function to create the next bigger number by rearranging the digits of a given number.\n(define (rearrange_bigger n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_407_rearrange_bigger.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rearrange_bigger))\n    (check-within (candidate 12) 21 0.001)\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 102) 120 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_407_rearrange_bigger","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to create the next bigger number by rearranging the digits of a given number.\n(define (rearrange-bigger n)\n  (define (digits->number lst)\n    (string->number (list->string (map number->string lst))))\n  \n  (define (next-perm lst)\n    (let loop ([lst (reverse (sort lst <))])\n      (if (null? (cdr lst))\n          #f\n          (let* ([upper (car lst)]\n                 [higher (cdr lst)]\n                 [new-higher (reverse (sort (filter (lambda (x) (> x upper)) higher) <))])\n            (if (null? new-higher)\n                (loop higher)\n                (let* ([smaller-part (reverse (sort (filter (lambda (x) (<= x upper)) higher) >))]\n                       [result (append (sort (cdr (reverse (sort smaller-part <))) <)\n                                       (list upper)\n                                       (reverse new-higher))])\n                  (reverse result)))))))\n\n  (let ([perm (next-perm (number->list n))])\n    (if perm\n        (digits->number perm)\n        #f)))\n\n; Testing the function with appropriate inputs\n(rearrange-bigger 1234) ; Should return 1243\n(rearrange-bigger 4321) ; Should return #f\n(rearrange-bigger 53421) ; Should return 54123\n```\n\nThis code defines a function `rearrange-bigger` which takes a number `n` and returns the next bigger number by rearranging its digits. If no such number is possible, it returns `#f`. The `digits->number` helper function converts a list of digits back to a number, and the `next-perm` function generates the next lexicographical permutation of the list of digits if possible."}
{"name":"mbpp_408_k_smallest_pairs","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n(define (k_smallest_pairs nums1 nums2 k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_408_k_smallest_pairs.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate k_smallest_pairs))\n    (check-within (candidate (list 1 3 7) (list 2 4 6) 2) (list (list 1 2) (list 1 4)) 0.001)\n    (check-within (candidate (list 1 3 7) (list 2 4 6) 1) (list (list 1 2)) 0.001)\n    (check-within (candidate (list 1 3 7) (list 2 4 6) 7) (list (list 1 2) (list 1 4) (list 3 2) (list 1 6) (list 3 4) (list 3 6) (list 7 2)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_408_k_smallest_pairs","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n(define (k_smallest_pairs nums1 nums2 k)\n  (define (merge xs ys)\n    (cond\n      [(empty? xs) ys]\n      [(empty? ys) xs]\n      [else\n       (let ([x (first xs)]\n             [y (first ys)])\n         (if (< (first x) (first y))\n             (cons x (merge (rest xs) ys))\n             (cons y (merge xs (rest ys)))))]))\n  \n  (define (heapify xs)\n    (if (empty? xs)\n        empty\n        (merge (list (first xs))\n               (merge (heapify (filter (\u03bb (x) (< x (first xs))) (rest xs)))\n                      (heapify (filter (\u03bb (x) (>= x (first xs))) (rest xs)))))))\n  \n  (define (k-pairs-helper heap acc n)\n    (if (or (empty? heap) (<= n 0))\n        acc\n        (let ([smallest (first heap)])\n          (k-pairs-helper (merge (rest (rest heap))\n                                 (if (< (second (first heap)) (vector-length nums2))\n                                     (list (vector (+ (first (first heap)) (vector-ref nums2 (second (first heap))))\n                                                   (second (first heap)) 1))\n                                     empty))\n                          (cons (vector-ref nums1 (second (first heap))) (vector-ref nums2 (first (first heap))))\n                          (- n 1)))))\n  \n  (define pairs\n    (sort (append-map (\u03bb (x)\n                       (map (\u03bb (y) (list (+ x y) y)) nums2))\n                     nums1)\n          <))\n  (take pairs k))\n\n```\n\nNote: The provided code defines several helper functions and the actual implementation for `k_smallest_pairs` function:\n1. `merge`: Merges two sorted lists into one sorted list.\n2. `heapify`: Builds a heap from a list.\n3. `k-pairs-helper`: Recursively finds the k smallest pairs by merging and comparing elements.\n\nHowever, this version may need adjustments based on the specific logic and data structure for the problem. The version shows a conceptual approach to fulfilling the task requirements."}
{"name":"mbpp_409_min_product_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_409_min_product_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-within (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8 0.001)\n    (check-within (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30 0.001)\n    (check-within (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_409_min_product_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Define a function to compute the product of elements of a pair\n(define (product-pair pair)\n  (* (first pair) (second pair)))\n\n;; Define a function to find the minimum product from the pairs of lists within a given list.\n(define (min-product-tuple list1)\n  (define pairs (for*\/list ([x list1] [y list1] #:when (not (eq? x y))) (list x y)))\n  (define products (map product-pair pairs))\n  (apply min products))\n\n;; Example usage\n(min-product-tuple '(1 2 3 4)) ;; Expected output: 2 (product of 1 and 2 or 1 and 3 or 1 and 4)\n```"}
{"name":"mbpp_410_min_val","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the minimum value in a given heterogeneous list.\n(define (min_val listval)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_410_min_val.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_val))\n    (check-within (candidate (list \"Python\" 3 2 4 5 \"version\")) 2 0.001)\n    (check-within (candidate (list \"Python\" 15 20 25)) 15 0.001)\n    (check-within (candidate (list \"Python\" 30 20 40 50 \"version\")) 20 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_410_min_val","gpt_solution":"```racket\n#lang racket\n\n;; This function finds the minimum numeric value in a given heterogeneous list.\n(define (min_val listval)\n  (define (helper lst current-min)\n    (cond\n      [(empty? lst) current-min]\n      [(number? (first lst))\n       (helper (rest lst) (min (first lst) current-min))]\n      [else\n       (helper (rest lst) current-min)]))\n  (helper listval +inf.0))\n\n;; Example usage:\n(min_val '(5 \"foo\" 3 8 \"bar\" 2 \"baz\")) ;=> 2\n(min_val '(\"foo\" \"bar\" \"baz\")) ;=> +inf.0 (no numbers in list)\n(min_val '(5 3.4 5\/2)) ;=> 2.5\n```"}
{"name":"mbpp_411_snake_to_camel","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_411_snake_to_camel.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-within (candidate \"android_tv\") \"AndroidTv\" 0.001)\n    (check-within (candidate \"google_pixel\") \"GooglePixel\" 0.001)\n    (check-within (candidate \"apple_watch\") \"AppleWatch\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_411_snake_to_camel","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (capitalize-first letter)\n    (string-append (substring letter 0 1)\n                   (substring letter 1)))\n  \n  (define words-list (string-split word #\\_))\n  \n  (define capitalized-words\n    (map (lambda (w) (capitalize-first (string-titlecase w))) (cdr words-list)))\n  \n  (string-append (first words-list) (apply string-append capitalized-words)))\n  \n;; Example usage:\n(snake_to_camel \"snake_case_string\") ; returns \"snakeCaseString\"\n```"}
{"name":"mbpp_412_remove_odd","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to remove odd numbers from a given list.\n(define (remove_odd l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_412_remove_odd.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_odd))\n    (check-within (candidate (list 1 2 3)) (list 2) 0.001)\n    (check-within (candidate (list 2 4 6)) (list 2 4 6) 0.001)\n    (check-within (candidate (list 10 20 3)) (list 10 20) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_412_remove_odd","gpt_solution":"```racket\n#lang racket\n\n;; This function removes odd numbers from a given list.\n(define (remove_odd l)\n  (filter even? l))\n```\n\nThis Racket function `remove_odd` removes odd numbers from a list by using the `filter` function which keeps only the even numbers. The predicate `even?` is used to check for even numbers."}
{"name":"mbpp_413_extract_nth_element","language":"rkt","prompt":"#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_413_extract_nth_element.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_nth_element))\n    (check-within (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 0) (list \"Greyson Fulton\" \"Brady Kent\" \"Wyatt Knott\" \"Beau Turnbull\") 0.001)\n    (check-within (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 2) (list 99 96 94 98) 0.001)\n    (check-within (candidate (list (list \"Greyson Fulton\" 98 99) (list \"Brady Kent\" 97 96) (list \"Wyatt Knott\" 91 94) (list \"Beau Turnbull\" 94 98)) 1) (list 98 97 91 94) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_413_extract_nth_element","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to extract the nth element from a given list of lists.\n(define (extract_nth_element list1 n)\n  (map (lambda (lst)\n         (if (and (list? lst) (>= (length lst) n))\n             (list-ref lst (- n 1))\n             #f))  ;; return #f if the list is shorter than n\n       list1))\n\n;; Example Usage:\n;; (extract_nth_element '((1 2 3) (4 5 6) (7 8)) 2)\n;; Should return '(2 5 #f)\n```"}
{"name":"mbpp_414_overlapping","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether any value in a sequence exists in a sequence or not.\n(define (overlapping list1 list2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_414_overlapping.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate overlapping))\n    (check-within (candidate (list 1 2 3 4 5) (list 6 7 8 9)) #f 0.001)\n    (check-within (candidate (list 1 2 3) (list 4 5 6)) #f 0.001)\n    (check-within (candidate (list 1 4 5) (list 1 4 5)) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_414_overlapping","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether any value in list1 exists in list2.\n(define (overlapping list1 list2)\n  (define (exists? lst1 lst2)\n    (cond\n      [(empty? lst1) #f] ; If list1 is empty, return false.\n      [(member (first lst1) lst2) #t] ; If the first element of list1 is in list2, return true.\n      [else (exists? (rest lst1) lst2)])) ; Recursively check the rest of the list1.\n  (exists? list1 list2))\n  \n;; Example usage:\n(overlapping '(1 2 3) '(4 5 6 1)) ; Should return #t\n(overlapping '(7 8 9) '(4 5 6)) ; Should return #f\n```"}
{"name":"mbpp_415_max_Product","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find a pair with highest product from a given list of integers.\n(define (max_Product arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_415_max_Product.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_Product))\n    (check-within (candidate (list 1 2 3 4 7 0 8 4)) (list 7 8) 0.001)\n    (check-within (candidate (list 0 -1 -2 -4 5 0 -6)) (list -4 -6) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 2 3) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_415_max_Product","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find a pair with highest product from a given list of integers.\n\n(define (max_product arr)\n  (define n (length arr))\n  (define highest (* (list-ref arr 0) (list-ref arr 1)))\n  (define pair (list (list-ref arr 0) (list-ref arr 1)))\n\n  (for ([i n])\n    (for ([j (in-range i n)])\n      (let ([product (* (list-ref arr i) (list-ref arr j))])\n        (when (> product highest)\n          (set! highest product)\n          (set! pair (list (list-ref arr i) (list-ref arr j)))))))\n\n  pair)\n\n;; Example usage\n(max_product (list 1, 5, -10, 4, 3, -6, 7))\n;; Output: '(5 7)\n```\n\nThis Racket function `max_product` finds the pair of integers in the given list `arr` that have the highest product. The function iterates through all pairs of elements in the list and keeps track of the pair with the highest product found so far. The result is returned as a list containing the pair."}
{"name":"mbpp_417_group_tuples","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find common first element in given list of lists.\n(define (group_tuples Input)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_417_group_tuples.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate group_tuples))\n    (check-within (candidate (list (list \"x\" \"y\") (list \"x\" \"z\") (list \"w\" \"t\"))) (list (list \"x\" \"y\" \"z\") (list \"w\" \"t\")) 0.001)\n    (check-within (candidate (list (list \"a\" \"b\") (list \"a\" \"c\") (list \"d\" \"e\"))) (list (list \"a\" \"b\" \"c\") (list \"d\" \"e\")) 0.001)\n    (check-within (candidate (list (list \"f\" \"g\") (list \"f\" \"g\") (list \"h\" \"i\"))) (list (list \"f\" \"g\" \"g\") (list \"h\" \"i\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_417_group_tuples","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find common first element in given list of lists.\n(define (group_tuples input)\n  (define (first-element lst)\n    (map first lst))\n    \n  (define (count-elements lst)\n    (foldl (lambda (x acc)\n             (if (assoc x acc)\n                 (map (lambda (item)\n                        (if (equal? (car item) x)\n                            (cons x (+ 1 (cdr item)))\n                            item))\n                      acc)\n                 (cons (cons x 1) acc)))\n           '() lst))\n  \n  (define frequency-table (count-elements (first-element input)))\n  (define max-frequency (apply max (map cdr frequency-table)))\n  (filter (lambda (item) (equal? (cdr item) max-frequency)) frequency-table))\n\n;; Example usage\n(group_tuples '((1 2 3) (1 4 5) (2 6 7) (1 8 9) (2 10 11)))\n;; Output: '((1 . 3))\n```"}
{"name":"mbpp_418_Find_Max","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the element of a list having maximum length.\n(define (Find_Max lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_418_Find_Max.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Max))\n    (check-within (candidate (list (list \"A\") (list \"A\" \"B\") (list \"A\" \"B\" \"C\"))) (list \"A\" \"B\" \"C\") 0.001)\n    (check-within (candidate (list (list 1) (list 1 2) (list 1 2 3))) (list 1 2 3) 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 2 3) (list 1 5 6 1))) (list 1 5 6 1) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_418_Find_Max","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the element of a list having maximum length.\n\n(define (Find_Max lst)\n  (define (max-len-elem current-list)\n    (cond\n      [(null? current-list) '()]\n      [else (let ([max-rest (max-len-elem (cdr current-list))])\n              (if (> (length (car current-list)) (length max-rest))\n                  (car current-list)\n                  max-rest))]))\n  (max-len-elem lst))\n\n;; Example usage\n(define example-list '((1 2 3) (4 5) (6 7 8 9) (10)))\n(Find_Max example-list)  ;; Output: '(6 7 8 9)\n```"}
{"name":"mbpp_419_round_and_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n(define (round_and_sum list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_419_round_and_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate round_and_sum))\n    (check-within (candidate (list 22.4 4.0 -16.22 -9.1 11.0 -12.22 14.2 -5.2 17.5)) 243 0.001)\n    (check-within (candidate (list 5 2 9 24.3 29)) 345 0.001)\n    (check-within (candidate (list 25.0 56.7 89.2)) 513 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_419_round_and_sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n(define (round_and_sum list1)\n  (let* ((rounded-list (map round list1))\n         (total-sum (apply + rounded-list))\n         (result (* total-sum (length list1))))\n    (displayln result)))\n\n;; Example usage:\n;; (round_and_sum '(1.2 2.5 3.7)) ; Should output the total sum of rounded numbers multiplied by the length of the list\n```"}
{"name":"mbpp_420_cube_Sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the cube sum of first n even natural numbers.\n(define (cube_Sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_420_cube_Sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_Sum))\n    (check-within (candidate 2) 72 0.001)\n    (check-within (candidate 3) 288 0.001)\n    (check-within (candidate 4) 800 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_420_cube_Sum","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the cube sum of first n even natural numbers.\n(define (cube-sum n)\n  (define (cube x)\n    (* x x x))\n  (define (sum-helper k acc)\n    (if (> k n)\n        acc\n        (sum-helper (add1 k) (+ acc (cube (* 2 k))))))\n  (sum-helper 1 0))\n\n;; Example usage:\n(cube-sum 3) ; 224 => 8^3 + 16^3 + 24^3 = 8 + 64 + 216 = 288\n```\n\nThis function, `cube-sum`, computes the sum of the cubes of the first `n` even natural numbers. The helper function `cube` computes the cube of a given number, and `sum-helper` is a recursive function that accumulates the result through the variable `acc`."}
{"name":"mbpp_421_concatenate_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to concatenate each element of list by the delimiter.\n(define (concatenate_tuple test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_421_concatenate_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate_tuple))\n    (check-within (candidate (list \"ID\" \"is\" 4 \"UTS\")) \"ID-is-4-UTS\" 0.001)\n    (check-within (candidate (list \"QWE\" \"is\" 4 \"RTY\")) \"QWE-is-4-RTY\" 0.001)\n    (check-within (candidate (list \"ZEN\" \"is\" 4 \"OP\")) \"ZEN-is-4-OP\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_421_concatenate_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to concatenate each element of list by the delimiter.\n(define (concatenate_tuple lst delimiter)\n  (define (concatenate-helper l result)\n    (if (empty? l)\n        result\n        (concatenate-helper (cdr l)\n                            (if (empty? result)\n                                (car l)\n                                (string-append result delimiter (car l))))))\n  (concatenate-helper lst \"\"))\n\n;; Example usage:\n(concatenate_tuple '(\"apple\" \"banana\" \"cherry\") \", \")\n; => \"apple, banana, cherry\"\n\n(concatenate_tuple '(\"a\" \"b\" \"c\") \"-\")\n; => \"a-b-c\"\n```"}
{"name":"mbpp_422_find_Average_Of_Cube","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the average of cubes of first n natural numbers.\n(define (find_Average_Of_Cube n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_422_find_Average_Of_Cube.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Average_Of_Cube))\n    (check-within (candidate 2) 4.5 0.001)\n    (check-within (candidate 3) 12 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_422_find_Average_Of_Cube","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the average of cubes of first n natural numbers.\n(define (find_Average_Of_Cube n)\n  (define (cube x)\n    (* x x x))\n  (define (sum-of-cubes k acc)\n    (if (> k n)\n        acc\n        (sum-of-cubes (+ k 1) (+ acc (cube k)))))\n  (define total-sum (sum-of-cubes 1 0))\n  (\/ total-sum n))\n\n;; Example usage:\n(find_Average_Of_Cube 3) ;; should return 9.0\n(find_Average_Of_Cube 4) ;; should return 15.0\n```"}
{"name":"mbpp_424_extract_rear","language":"rkt","prompt":"#lang racket\n\n;; Write a function to extract only the rear index element of each string in the given list.\n(define (extract_rear test_tuple)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_424_extract_rear.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_rear))\n    (check-within (candidate (list \"Mers\" \"for\" \"Vers\")) (list \"s\" \"r\" \"s\") 0.001)\n    (check-within (candidate (list \"Avenge\" \"for\" \"People\")) (list \"e\" \"r\" \"e\") 0.001)\n    (check-within (candidate (list \"Gotta\" \"get\" \"go\")) (list \"a\" \"t\" \"o\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_424_extract_rear","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to extract only the rear index element of each string in the given list.\n(define (extract_rear test_tuple)\n  (map (lambda (s) (string-ref s (- (string-length s) 1))) test_tuple))\n\n;; Example usage:\n;; (extract_rear '(\"apple\" \"banana\" \"cherry\")) => '(#\\e #\\a #\\y)\n```\n\nThis function `extract_rear` takes a list of strings (`test_tuple`) as input and returns a list of characters where each character is the last character of the corresponding string in the input list. The `map` function applies a lambda function to each string in the list. The lambda function calculates the last character of the string using `string-ref` and `string-length`."}
{"name":"mbpp_425_count_element_in_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count the number of sublists containing a particular element.\n(define (count_element_in_list list1 x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_425_count_element_in_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_element_in_list))\n    (check-within (candidate (list (list 1 3) (list 5 7) (list 1 11) (list 1 15 7)) 1) 3 0.001)\n    (check-within (candidate (list (list \"A\" \"B\") (list \"A\" \"C\") (list \"A\" \"D\" \"E\") (list \"B\" \"C\" \"D\")) \"A\") 3 0.001)\n    (check-within (candidate (list (list \"A\" \"B\") (list \"A\" \"C\") (list \"A\" \"D\" \"E\") (list \"B\" \"C\" \"D\")) \"E\") 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_425_count_element_in_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count the number of sublists containing a particular element.\n(define (count-element-in-list list1 x)\n  (define (contains-element? lst x)\n    (member x lst))\n  (define (count-sublists lst x)\n    (cond\n      [(empty? lst) 0]\n      [(contains-element? (first lst) x) (+ 1 (count-sublists (rest lst) x))]\n      [else (count-sublists (rest lst) x)]))\n  (count-sublists list1 x))\n\n;; Example usage\n(count-element-in-list '((1 2) (3 4) (5 1 6) (7 8)) 1)  ; Returns 2\n(count-element-in-list '((10 20) (30 40) (50 60) (70 80)) 10)  ; Returns 1\n(count-element-in-list '((1) (1 2) (1 2 3) (4 5 3)) 3)  ; Returns 2\n(count-element-in-list '((a b c) (d e f) (f g h)) 'f)  ; Returns 2\n```"}
{"name":"mbpp_426_filter_oddnumbers","language":"rkt","prompt":"#lang racket\n\n;; Write a function to filter odd numbers.\n(define (filter_oddnumbers nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_426_filter_oddnumbers.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_oddnumbers))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 3 5 7 9) 0.001)\n    (check-within (candidate (list 10 20 45 67 84 93)) (list 45 67 93) 0.001)\n    (check-within (candidate (list 5 7 9 8 6 4 3)) (list 5 7 9 3) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_426_filter_oddnumbers","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to filter odd numbers.\n(define (filter_oddnumbers nums)\n  (filter odd? nums))\n\n;; Example usage:\n(filter_oddnumbers '(1 2 3 4 5 6 7 8 9)) ; returns '(1 3 5 7 9)\n```"}
{"name":"mbpp_427_change_date_format","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n(define (change_date_format dt)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_427_change_date_format.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_date_format))\n    (check-within (candidate \"2026-01-02\") \"02-01-2026\" 0.001)\n    (check-within (candidate \"2020-11-13\") \"13-11-2020\" 0.001)\n    (check-within (candidate \"2021-04-26\") \"26-04-2021\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_427_change_date_format","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n(define (change_date_format dt)\n  (define parts (string-split dt \"-\"))\n  (define year (first parts))\n  (define month (second parts))\n  (define day (third parts))\n  (string-join (list day month year) \"-\"))\n  \n;; Example usage:\n(change_date_format \"2022-10-05\") ; \"05-10-2022\"\n```"}
{"name":"mbpp_428_shell_sort","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort the given list by using shell sort.\n(define (shell_sort my_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_428_shell_sort.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate shell_sort))\n    (check-within (candidate (list 12 23 4 5 3 2 12 81 56 95)) (list 2 3 4 5 12 12 23 56 81 95) 0.001)\n    (check-within (candidate (list 24 22 39 34 87 73 68)) (list 22 24 34 39 68 73 87) 0.001)\n    (check-within (candidate (list 32 30 16 96 82 83 74)) (list 16 30 32 74 82 83 96) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_428_shell_sort","gpt_solution":"```racket\n#lang racket\n\n;; Function to perform shell sort on a given list\n(define (shell_sort my_list)\n  (define n (length my_list))\n\n  ;; Gap sequence (Shell's original sequence)\n  (define (gap_seq g n)\n    (if (< g (- n 1))\n        (cons g (gap_seq (* 3 g) n))\n        '()))\n\n  ;; Perform insertion sort for the sublists created by gaps\n  (define (insertion_sort lst start gap)\n    (for ([i (in-range (+ start gap) (length lst) gap)])\n      (let ([current (list-ref lst i)]\n            [j i])\n        (while (and (>= (- j gap) start) (> (list-ref lst (- j gap)) current))\n          (set! lst (list-set lst j (list-ref lst (- j gap))))\n          (set! j (- j gap)))\n        (set! lst (list-set lst j current))))\n    lst)\n\n  ;; Main shell sort logic with decreasing gaps\n  (define (sort lst gaps)\n    (for ([gap (reverse gaps)])\n      (for ([start (in-range 0 gap)])\n        (set! lst (insertion_sort lst start gap))))\n    lst)\n  \n  ;; Generate the gap sequence and sort the list\n  (define gaps (cons 1 (gap_seq 4 n)))\n  (sort my_list gaps))\n\n;; Example usage:\n(shell_sort '(5 2 9 1 5 6))  ;; '(1 2 5 5 6 9)\n(shell_sort '(3 0 2 5 -1 4 1))  ;; '(-1 0 1 2 3 4 5)\n```"}
{"name":"mbpp_429_and_tuples","language":"rkt","prompt":"#lang racket\n\n;; Write a function to extract the elementwise and lists from the given two lists.\n(define (and_tuples test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_429_and_tuples.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate and_tuples))\n    (check-within (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 0 0 2 1) 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 5 6 7 8)) (list 1 2 3 0) 0.001)\n    (check-within (candidate (list 8 9 11 12) (list 7 13 14 17)) (list 0 9 10 0) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_429_and_tuples","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to extract the elementwise and lists from the given two lists.\n(define (and_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (and x y)) test_tup1 test_tup2))\n\n;; Example usage:\n(define list1 '(#t #f #t #f))\n(define list2 '(#t #t #f #f))\n\n(and_tuples list1 list2) ; => '(#t #f #f #f)\n```"}
{"name":"mbpp_430_parabola_directrix","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_430_parabola_directrix.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-within (candidate 5 3 2) -198 0.001)\n    (check-within (candidate 9 8 4) -2336 0.001)\n    (check-within (candidate 2 4 6) -130 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_430_parabola_directrix","gpt_solution":"Sure! Here is the complete Racket code that finds the directrix of a given parabola, defined by the quadratic equation \\( y = ax^2 + bx + c \\):\n\n```racket\n#lang racket\n\n;; Write a function to find the directrix of a parabola.\n;; The directrix of a parabola given the quadratic equation y = ax^2 + bx + c\n;; can be found using the formula: y = c - (b^2 - 1)\/(4a)\n(define (parabola_directrix a b c)\n  (if (= a 0)\n      (error \"The coefficient 'a' cannot be zero for a parabola.\")\n      (- c (\/ (- (* b b) 1)\n              (* 4 a)))))\n\n;; Example usage\n(parabola_directrix 2 3 4)\n```\n\nExplanation:\n- The function `parabola_directrix` takes three parameters, `a`, `b`, and `c`, which represent the coefficients of the quadratic equation \\( y = ax^2 + bx + c \\).\n- It checks if the coefficient `a` is zero since a zero value would not represent a parabola.\n- It calculates the directrix using the provided formula and returns the directrix value."}
{"name":"mbpp_431_common_element","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes two lists and returns true if they have at least one common element.\n(define (common_element list1 list2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_431_common_element.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common_element))\n    (check-within (candidate (list 1 2 3 4 5) (list 5 6 7 8 9)) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5) (list 6 7 8 9)) #f 0.001)\n    (check-within (candidate (list \"a\" \"b\" \"c\") (list \"d\" \"b\" \"e\")) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_431_common_element","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes two lists and returns true if they have at least one common element.\n(define (common_element list1 list2)\n  (cond\n    [(empty? list1) #f]  ;; If the first list is empty, return false as there are no elements to compare\n    [else\n     (or (member (first list1) list2)  ;; Check if the first element of list1 is in list2\n         (common_element (rest list1) list2))]))  ;; Recursively check the rest of list1\n```\n\nThis function uses recursion to check if there is any common element between the two lists. It returns `#t` (true) if a common element is found, or `#f` (false) if the end of the first list is reached without finding any common elements."}
{"name":"mbpp_432_median_trapezium","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the median length of a trapezium.\n(define (median_trapezium base1 base2 height)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_432_median_trapezium.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median_trapezium))\n    (check-within (candidate 15 25 35) 20 0.001)\n    (check-within (candidate 10 20 30) 15 0.001)\n    (check-within (candidate 6 9 4) 7.5 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_432_median_trapezium","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the median length of a trapezium.\n;; The median of a trapezium is the segment that connects the midpoints of the non-parallel sides.\n;; It is parallel to the bases and its length is the average of the lengths of the bases.\n;; (median_trapezium base1 base2) => median length of the trapezium.\n(define (median_trapezium base1 base2)\n  (\/ (+ base1 base2) 2))\n\n;; Example Usage:\n(median_trapezium 10 6) ; should return 8\n(median_trapezium 15.5 23.5) ; should return 19.5\n```\n\nThis Racket code defines the function `median_trapezium` which calculates the median length of a trapezium given the lengths of the two bases. The median length is the average of the lengths of the two bases."}
{"name":"mbpp_433_check_greater","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the entered number is greater than the elements of the given list.\n(define (check_greater arr number)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_433_check_greater.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_greater))\n    (check-within (candidate (list 1 2 3 4 5) 4) #f 0.001)\n    (check-within (candidate (list 2 3 4 5 6) 8) #t 0.001)\n    (check-within (candidate (list 9 7 4 8 6 1) 11) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_433_check_greater","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the entered number is greater than the elements of the given list.\n(define (check_greater arr number)\n  (map (lambda (x) (> number x)) arr))\n\n;; Example usage:\n;; (check_greater '(1 2 3 4) 3) => '(#t #t #f #f)\n```\n\nThis code defines a `check_greater` function that takes a list `arr` and a `number` as arguments. It returns a list of boolean values indicating whether the `number` is greater than each element in the list."}
{"name":"mbpp_434_text_match_one","language":"rkt","prompt":"#lang racket\n\n;; Write a function that matches a string that has an a followed by one or more b's.\n(define (text_match_one text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_434_text_match_one.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_one))\n    (check-within (candidate \"ac\") #f 0.001)\n    (check-within (candidate \"dc\") #f 0.001)\n    (check-within (candidate \"abba\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_434_text_match_one","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that matches a string that has an a followed by one or more b's.\n(define (text_match_one text)\n  (regexp-match? #rx\"ab+\" text))\n```"}
{"name":"mbpp_435_last_Digit","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the last digit of a given number.\n(define (last_Digit n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_435_last_Digit.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate last_Digit))\n    (check-within (candidate 123) 3 0.001)\n    (check-within (candidate 25) 5 0.001)\n    (check-within (candidate 30) 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_435_last_Digit","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the last digit of a given number.\n(define (last_Digit n)\n  (modulo (abs n) 10))\n\n;; Example usage:\n;; (last_Digit 12345) ; should return 5\n;; (last_Digit -9876) ; should return 6\n```"}
{"name":"mbpp_436_neg_nos","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to return the negative numbers in a list.\n(define (neg_nos list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_436_neg_nos.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate neg_nos))\n    (check-within (candidate (list -1 4 5 -6)) (list -1 -6) 0.001)\n    (check-within (candidate (list -1 -2 3 4)) (list -1 -2) 0.001)\n    (check-within (candidate (list -7 -6 8 9)) (list -7 -6) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_436_neg_nos","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to return the negative numbers in a list.\n(define (neg_nos list1)\n  (filter negative? list1))\n```\n\nThis code defines a function `neg_nos` that takes a list of numbers `list1` and returns a list containing only the negative numbers from `list1`. The function uses the `filter` procedure along with the `negative?` predicate to achieve this."}
{"name":"mbpp_437_remove_odd","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove odd characters in a string.\n(define (remove_odd str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_437_remove_odd.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_odd))\n    (check-within (candidate \"python\") \"yhn\" 0.001)\n    (check-within (candidate \"program\") \"rga\" 0.001)\n    (check-within (candidate \"language\") \"agae\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_437_remove_odd","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove odd characters in a string.\n(define (remove_odd str1)\n  (list->string\n   (for\/list ([ch (in-string str1)]\n               [i (in-naturals)]\n               #:when (even? i))\n     ch)))\n\n;; Example usage:\n(remove_odd \"abcdefg\")\n;; Expected output: \"aceg\"\n```"}
{"name":"mbpp_438_count_bidirectional","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count bidirectional list pairs.\n(define (count_bidirectional test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_438_count_bidirectional.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_bidirectional))\n    (check-within (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 3 0.001)\n    (check-within (candidate (list (list 5 6) (list 1 3) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 2 0.001)\n    (check-within (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 2) (list 6 5) (list 2 1))) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_438_count_bidirectional","gpt_solution":"```racket\n#lang racket\n\n;; This function takes a list of pairs and returns the count of bidirectional pairs.\n;; A bidirectional pair is defined as (a, b) and (b, a) both being present in the list.\n(define (count_bidirectional test_list)\n  (define (aux lst seen)\n    (match lst\n      [(list) 0]\n      [(cons (list a b) rest)\n       (if (and (list? a) (list? b) (member (list b a) seen))\n           (+ 1 (aux rest (remove (list b a) seen)))\n           (aux rest (cons (list a b) seen)))]))\n\n  (aux test_list '()))\n\n;; Examples:\n(count_bidirectional '((1 2) (2 1) (3 4))) ; should return 1\n(count_bidirectional '((1 2) (2 3) (3 1) (3 2) (2 1) (1 3))) ; should return 0\n(count_bidirectional '((a b) (b a) (c d) (d c))) ; should return 2\n(count_bidirectional '()) ; should return 0\n```"}
{"name":"mbpp_439_multiple_to_single","language":"rkt","prompt":"#lang racket\n\n;; Write a function to join a list of multiple integers into a single integer.\n(define (multiple_to_single L)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_439_multiple_to_single.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiple_to_single))\n    (check-within (candidate (list 11 33 50)) 113350 0.001)\n    (check-within (candidate (list -1 2 3 4 5 6)) -123456 0.001)\n    (check-within (candidate (list 10 15 20 25)) 10152025 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_439_multiple_to_single","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to join a list of multiple integers into a single integer.\n(define (multiple_to_single L)\n  (define (helper lst current-result)\n    (if (empty? lst)\n        current-result\n        (helper (rest lst) (+ (* current-result 10) (first lst)))))\n  (helper L 0))\n\n;; Example usage:\n;; (multiple_to_single '(1 2 3 4))  ; => 1234\n;; (multiple_to_single '(9 8 7))    ; => 987\n```"}
{"name":"mbpp_440_find_adverb_position","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the first adverb and their positions in a given sentence.\n(define (find_adverb_position text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_440_find_adverb_position.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverb_position))\n    (check-within (candidate \"clearly!! we can see the sky\") (list 0 7 \"clearly\") 0.001)\n    (check-within (candidate \"seriously!! there are many roses\") (list 0 9 \"seriously\") 0.001)\n    (check-within (candidate \"unfortunately!! sita is going to home\") (list 0 13 \"unfortunately\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_440_find_adverb_position","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the first adverb and their positions in a given sentence.\n(define (find_adverb_position text)\n  (define (is-adverb? word)\n    ;; Check if word ends with \"ly\"\n    (and (> (string-length word) 2)\n         (string-suffix? word \"ly\")))\n  (let loop ([words (string-split text)]\n             [index 0])\n    (cond\n      [(empty? words) '()]\n      [(is-adverb? (first words)) (list (first words) index)]\n      [else (loop (rest words) (+ index 1))])))\n\n;; Example usage:\n;; (find_adverb_position \"She quickly ran to the store\") ; should return '(\"quickly\" 1)\n```"}
{"name":"mbpp_441_surfacearea_cube","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the surface area of a cube of a given size.\n(define (surfacearea_cube l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_441_surfacearea_cube.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate surfacearea_cube))\n    (check-within (candidate 5) 150 0.001)\n    (check-within (candidate 3) 54 0.001)\n    (check-within (candidate 10) 600 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_441_surfacearea_cube","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the surface area of a cube of a given size.\n(define (surfacearea_cube l)\n  (* 6 (* l l)))\n\n;; Example usage:\n;; (surfacearea_cube 3) ; => 54\n```"}
{"name":"mbpp_442_positive_count","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the ration of positive numbers in a list of integers.\n(define (positive_count nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_442_positive_count.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate positive_count))\n    (check-within (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8)) 0.54 0.001)\n    (check-within (candidate (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 0.69 0.001)\n    (check-within (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) 0.56 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_442_positive_count","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the ratio of positive numbers in a list of integers\n(define (positive_count nums)\n  (define total (length nums))\n  (define positives (length (filter positive? nums)))\n  (if (zero? total)\n      0\n      (\/ positives total)))\n\n;; Testing the function\n(positive_count '(-1 2 3 -4 5)) ; 3\/5 or 0.6\n(positive_count '(-1 -2 -3 -4 -5)) ; 0\n(positive_count '(1 2 3 4 5)) ; 1\n(positive_count '()) ; 0\n```"}
{"name":"mbpp_443_largest_neg","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the largest negative number from the given list.\n(define (largest_neg list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_443_largest_neg.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_neg))\n    (check-within (candidate (list 1 2 3 -4 -6)) -6 0.001)\n    (check-within (candidate (list 1 2 3 -8 -9)) -9 0.001)\n    (check-within (candidate (list 1 2 3 4 -1)) -1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_443_largest_neg","gpt_solution":"```racket\n#lang racket\n\n;; The function returns the largest negative number from the given list.\n;; If there are no negative numbers in the list, it returns #f.\n(define (largest_neg list1)\n  (define neg-list (filter negative? list1)) ;; Filter the negative numbers\n  (if (null? neg-list)\n      #f ;; Return #f if there are no negative numbers\n      (apply max neg-list))) ;; Find and return the maximum of the negative numbers\n\n;; Examples\n(largest_neg '(10 -20 -3 4 5)) ;; => -3\n(largest_neg '(1 2 3 4 5)) ;; => #f\n(largest_neg '(-10 -20 -3 -4 -5)) ;; => -3\n```"}
{"name":"mbpp_444_trim_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to trim each list by k in the given lists.\n(define (trim_tuple test_list K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_444_trim_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate trim_tuple))\n    (check-within (candidate (list (list 5 3 2 1 4) (list 3 4 9 2 1) (list 9 1 2 3 5) (list 4 8 2 1 7)) 2) (list (list 2) (list 9) (list 2) (list 2)) 0.001)\n    (check-within (candidate (list (list 5 3 2 1 4) (list 3 4 9 2 1) (list 9 1 2 3 5) (list 4 8 2 1 7)) 1) (list (list 3 2 1) (list 4 9 2) (list 1 2 3) (list 8 2 1)) 0.001)\n    (check-within (candidate (list (list 7 8 4 9) (list 11 8 12 4) (list 4 1 7 8) (list 3 6 9 7)) 1) (list (list 8 4) (list 8 12) (list 1 7) (list 6 9)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_444_trim_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to trim each list by k in the given lists.\n(define (trim_tuple test_list K)\n  (map (lambda (lst) (take (drop lst K) (- (length lst) (* 2 K))))\n       test_list))\n\n;; Example usage:\n(trim_tuple '((1 2 3 4 5 6) (7 8 9 10 11 12)) 2)\n;; Output should be '((3 4) (9 10))\n```\n\nIn the `trim_tuple` function, `take` and `drop` are used to achieve the trimming. For each list inside `test_list`, it removes the first K elements and then takes the next (length - 2 * K) elements, effectively trimming K elements from both the start and the end."}
{"name":"mbpp_445_index_multiplication","language":"rkt","prompt":"#lang racket\n\n;; Write a function to perform index wise multiplication of list elements in the given two lists.\n(define (index_multiplication test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_445_index_multiplication.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate index_multiplication))\n    (check-within (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 6 21) (list 12 45) (list 2 9) (list 7 30)) 0.001)\n    (check-within (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 14 32) (list 20 60) (list 6 20) (list 16 44)) 0.001)\n    (check-within (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 24 45) (list 30 77) (list 12 33) (list 27 60)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_445_index_multiplication","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to perform index wise multiplication of list elements in the given two lists.\n(define (index_multiplication lst1 lst2)\n  (if (or (null? lst1) (null? lst2))\n      '()\n      (cons (* (car lst1) (car lst2))\n            (index_multiplication (cdr lst1) (cdr lst2)))))\n\n;; Examples\n;; (index_multiplication '(1 2 3) '(4 5 6)) --> '(4 10 18)\n;; (index_multiplication '(2 3) '(6 7)) --> '(12 21)\n\n;; Testing the function\n(display (index_multiplication '(1 2 3) '(4 5 6)))\n(newline)\n(display (index_multiplication '(2 3) '(6 7)))\n(newline)\n```"}
{"name":"mbpp_446_count_Occurrence","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the occurence of all elements of list in a list.\n(define (count_Occurrence tup lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_446_count_Occurrence.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Occurrence))\n    (check-within (candidate (list \"a\" \"a\" \"c\" \"b\" \"d\") (list \"a\" \"b\")) 3 0.001)\n    (check-within (candidate (list 1 2 3 1 4 6 7 1 4) (list 1 4 7)) 6 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) (list 1 2)) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_446_count_Occurrence","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count the occurrence of all elements of a list in another list.\n(define (count_Occurrence tup lst)\n  (let count-helper ((elements tup) (counts '()))\n    (if (null? elements)\n        counts\n        (let* ((elem (car elements))\n               (count (length (filter (lambda (x) (equal? x elem)) lst))))\n          (count-helper (cdr elements) (append counts (list (cons elem count))))))))\n\n;; Example usage:\n(count_Occurrence '(a b c a) '(a b a c a b d))\n;; Output: '((a . 3) (b . 2) (c . 1) (a . 3))\n```\n\nThis function `count_Occurrence` takes two lists `tup` and `lst`. It counts the occurrences of each element in `tup` within the list `lst`. For each element in `tup`, it filters the occurrences in `lst` and counts them, then constructs a list of pairs `(element . count)`."}
{"name":"mbpp_447_cube_nums","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_447_cube_nums.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_nums))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 8 27 64 125 216 343 512 729 1000) 0.001)\n    (check-within (candidate (list 10 20 30)) (list 1000 8000 27000) 0.001)\n    (check-within (candidate (list 12 15)) (list 1728 3375) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_447_cube_nums","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find cubes of individual elements in a list.\n(define (cube_nums nums)\n  (map (\u03bb (x) (* x x x)) nums))\n\n;; Example usage\n(cube_nums '(1 2 3 4 5)) ;; Returns '(1 8 27 64 125)\n```\n\nThis Racket code defines a function `cube_nums` which takes a list of numbers `nums` and returns a list of their cubes. The `map` function is used to apply the cubing operation (taking each number `x` to `(* x x x)`) to each element of the list."}
{"name":"mbpp_448_cal_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate the sum of perrin numbers.\n(define (cal_sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_448_cal_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cal_sum))\n    (check-within (candidate 9) 49 0.001)\n    (check-within (candidate 10) 66 0.001)\n    (check-within (candidate 11) 88 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_448_cal_sum","gpt_solution":"```racket\n#lang racket\n\n;; Define a helper function to generate the Perrin sequence up to the nth element\n(define (perrin-helper a b c n)\n  (if (= n 0)\n      a\n      (perrin-helper b c (+ a b) (sub1 n))))\n\n;; Define the main function to calculate the sum of Perrin numbers up to 'n'\n(define (cal_sum n)\n  (define (sum-helper i acc)\n    (if (> i n)\n        acc\n        (let ([perrin (perrin-helper 3 0 2 i)])\n          (sum-helper (add1 i) (+ acc perrin)))))\n  (sum-helper 0 0))\n\n;; Example usage:\n;; (cal_sum 10) will calculate the sum of the first 11 Perrin numbers\n```"}
{"name":"mbpp_450_extract_string","language":"rkt","prompt":"#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string str l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_450_extract_string.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_string))\n    (check-within (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 8) (list \"practice\" \"solution\") 0.001)\n    (check-within (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 6) (list \"Python\") 0.001)\n    (check-within (candidate (list \"Python\" \"list\" \"exercises\" \"practice\" \"solution\") 9) (list \"exercises\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_450_extract_string","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to extract specified size of strings from a given list of string values.\n(define (extract_string n lst)\n  (filter (lambda (s) (= (string-length s) n)) lst))\n\n;; Example usage:\n(extract_string 3 '(\"cat\" \"dog\" \"elephant\" \"ant\" \"bat\" \"owl\" \"rat\"))\n;; Expected output: '(\"cat\" \"dog\" \"bat\" \"owl\" \"rat\")\n```"}
{"name":"mbpp_451_remove_whitespaces","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove all whitespaces from the given string.\n(define (remove_whitespaces text1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_451_remove_whitespaces.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_whitespaces))\n    (check-within (candidate \" Google    Flutter \") \"GoogleFlutter\" 0.001)\n    (check-within (candidate \" Google    Dart \") \"GoogleDart\" 0.001)\n    (check-within (candidate \" iOS    Swift \") \"iOSSwift\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_451_remove_whitespaces","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove all whitespaces from the given string.\n(define (remove_whitespaces text1)\n  (regexp-replace* #px\"\\\\s+\" text1 \"\"))\n\n;; Example usage:\n(remove_whitespaces \"Hello World! This is Racket.\") ;;; Output: \"HelloWorld!ThisisRacket.\"\n```"}
{"name":"mbpp_452_loss_amount","language":"rkt","prompt":"#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n(define (loss_amount actual_cost sale_amount)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_452_loss_amount.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate loss_amount))\n    (check-within (candidate 1500 1200) 0 0.001)\n    (check-within (candidate 100 200) 100 0.001)\n    (check-within (candidate 2000 5000) 3000 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_452_loss_amount","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that gives loss amount on a sale if the given amount has loss, else return 0.\n(define (loss_amount actual_cost sale_amount)\n  (if (< sale_amount actual_cost)\n      (- actual_cost sale_amount)\n      0))\n\n;; Example usage:\n;; (loss_amount 100 80)  ; Expected output: 20 (since there's a loss of 100 - 80)\n;; (loss_amount 100 120) ; Expected output: 0 (no loss since sale_amount > actual_cost)\n```"}
{"name":"mbpp_453_sumofFactors","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of even factors of a number.\n(define (sumofFactors n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_453_sumofFactors.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sumofFactors))\n    (check-within (candidate 18) 26 0.001)\n    (check-within (candidate 30) 48 0.001)\n    (check-within (candidate 6) 8 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_453_sumofFactors","gpt_solution":"```racket\n#lang racket\n\n;; Write a racket function to find the sum of even factors of a number.\n(define (sumofFactors n)\n  (define (is-even x)\n    (= (remainder x 2) 0))\n  (define (sum-even-factors n current sum)\n    (if (> current n)\n        sum\n        (if (and (is-even current) (= (remainder n current) 0))\n            (sum-even-factors n (+ current 1) (+ sum current))\n            (sum-even-factors n (+ current 1) sum))))\n  (sum-even-factors n 1 0))\n\n;; Example usage:\n(sumofFactors 12)  ;; This should return 18 because the even factors of 12 are 2, 4, 6, and 12, and their sum is 18.\n```"}
{"name":"mbpp_454_text_match_wordz","language":"rkt","prompt":"#lang racket\n\n;; Write a function that matches a word containing 'z'.\n(define (text_match_wordz text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_454_text_match_wordz.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_wordz))\n    (check-within (candidate \"pythonz.\") #t 0.001)\n    (check-within (candidate \"xyz.\") #t 0.001)\n    (check-within (candidate \"  lang  .\") #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_454_text_match_wordz","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that matches a word containing 'z'.\n(define (text_match_wordz text)\n  (define pattern #rx\"\\bz\\w*\\b|\\b\\w*z\\w*\\b\") ; regex pattern to match any word containing 'z'\n  (regexp-match pattern text))\n\n;; Example usage\n(text_match_wordz \"The quick brown fox jumps over the lazy dog\")\n; => '(\"lazy\")\n(text_match_wordz \"Fizz buzz fuzzy wuzzy\")\n; => '(\"Fizz\" \"buzz\" \"fuzzy\" \"wuzzy\")\n```\n\nThe `text_match_wordz` function takes a string `text` as input and uses a regular expression to find any word containing the letter 'z'. It then returns a list of all matching words. The regex pattern used ensures it matches any word containing 'z', either in the middle or at the boundaries."}
{"name":"mbpp_455_check_monthnumb_number","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the given month number contains 31 days or not.\n(define (check_monthnumb_number monthnum2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_455_check_monthnumb_number.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_monthnumb_number))\n    (check-within (candidate 5) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate 6) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_455_check_monthnumb_number","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the given month number contains 31 days or not.\n(define (check_month_number monthnum)\n  (cond\n    [(or (= monthnum 1)  ; January\n         (= monthnum 3)  ; March\n         (= monthnum 5)  ; May\n         (= monthnum 7)  ; July\n         (= monthnum 8)  ; August\n         (= monthnum 10) ; October\n         (= monthnum 12)) ; December\n     #t]\n    [else #f]))\n```\n\nThis function `check_month_number` takes as input a month number (`monthnum`) and returns `#t` if the month contains 31 days and `#f` otherwise."}
{"name":"mbpp_456_reverse_string_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to reverse each string in a given list of string values.\n(define (reverse_string_list stringlist)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_456_reverse_string_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_string_list))\n    (check-within (candidate (list \"Red\" \"Green\" \"Blue\" \"White\" \"Black\")) (list \"deR\" \"neerG\" \"eulB\" \"etihW\" \"kcalB\") 0.001)\n    (check-within (candidate (list \"john\" \"amal\" \"joel\" \"george\")) (list \"nhoj\" \"lama\" \"leoj\" \"egroeg\") 0.001)\n    (check-within (candidate (list \"jack\" \"john\" \"mary\")) (list \"kcaj\" \"nhoj\" \"yram\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_456_reverse_string_list","gpt_solution":"Certainly! Below is the complete code wrapped in markdown syntax:\n\n```racket\n#lang racket\n\n;; Write a function to reverse each string in a given list of string values.\n(define (reverse-string-list stringlist)\n  (map (lambda (str) (list->string (reverse (string->list str)))) stringlist))\n\n;; Example usage:\n(reverse-string-list '(\"hello\" \"world\" \"racket\"))\n;; Output: '(\"olleh\" \"dlrow\" \"tekcar\")\n```\n\nIn this code:\n\n- We define the function `reverse-string-list` that takes a list of strings as an argument (`stringlist`).\n- We use the `map` function to apply the `lambda` function to each string in the list.\n- Inside the `lambda` function, we convert each string to a list of characters using `string->list`, reverse the list of characters using `reverse`, and then convert it back to a string using `list->string`.\n- The `reverse-string-list` function returns a list of the reversed strings."}
{"name":"mbpp_457_Find_Min","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sublist having minimum length.\n(define (Find_Min lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_457_Find_Min.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Min))\n    (check-within (candidate (list (list 1) (list 1 2) (list 1 2 3))) (list 1) 0.001)\n    (check-within (candidate (list (list 1 1) (list 1 1 1) (list 1 2 7 8))) (list 1 1) 0.001)\n    (check-within (candidate (list (list \"x\") (list \"x\" \"y\") (list \"x\" \"y\" \"z\"))) (list \"x\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_457_Find_Min","gpt_solution":"```racket\n#lang racket\n\n;; A function to find the sublist having minimum length in a list of lists.\n(define (Find_Min lst)\n  (if (empty? lst)\n      '()\n      (let loop ((lst (cdr lst)) (min (car lst)))\n        (if (empty? lst)\n            min\n            (let ((cur (car lst)))\n              (loop (cdr lst) (if (< (length cur) (length min)) cur min)))))))\n\n;; Example usage:\n(Find_Min '((1 2 3) (4 5) (6) (7 8 9 10))) ; Output should be '(6)\n```"}
{"name":"mbpp_458_rectangle_area","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the area of a rectangle.\n(define (rectangle_area l b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_458_rectangle_area.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rectangle_area))\n    (check-within (candidate 10 20) 200 0.001)\n    (check-within (candidate 10 5) 50 0.001)\n    (check-within (candidate 4 2) 8 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_458_rectangle_area","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the area of a rectangle.\n(define (rectangle_area l b)\n  (* l b))\n\n;; Example usage:\n(rectangle_area 5 10) ; This should return 50\n```\n\nIn this code, the function `rectangle_area` takes two parameters, `l` for length and `b` for breadth, and returns their product, which is the area of the rectangle."}
{"name":"mbpp_459_remove_uppercase","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove uppercase substrings from a given string.\n(define (remove_uppercase str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_459_remove_uppercase.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_uppercase))\n    (check-within (candidate \"cAstyoUrFavoRitETVshoWs\") \"cstyoravoitshos\" 0.001)\n    (check-within (candidate \"wAtchTheinTernEtrAdIo\") \"wtchheinerntrdo\" 0.001)\n    (check-within (candidate \"VoicESeaRchAndreComMendaTionS\") \"oiceachndreomendaion\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_459_remove_uppercase","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove uppercase substrings from a given string.\n(define (remove_uppercase str1)\n  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n  \n;; Example usage:\n(remove_uppercase \"This is a TEST string WITH UPPERcase\")\n;; Output: \"his is a  string WITH case\"\n```"}
{"name":"mbpp_460_Extract","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to get the first element of each sublist.\n(define (Extract lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_460_Extract.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Extract))\n    (check-within (candidate (list (list 1 2) (list 3 4 5) (list 6 7 8 9))) (list 1 3 6) 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 4 5))) (list 1 4) 0.001)\n    (check-within (candidate (list (list 9 8 1) (list 1 2))) (list 9 1) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_460_Extract","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to get the first element of each sublist.\n(define (Extract lst)\n  (map car lst))\n```\n\nThis function `Extract` takes a list of lists `lst` and returns a list containing the first element of each sublist using the `map` function along with `car` which retrieves the first element of a list."}
{"name":"mbpp_461_upper_ctr","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the upper case characters in a given string.\n(define (upper_ctr str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_461_upper_ctr.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate upper_ctr))\n    (check-within (candidate \"PYthon\") 1 0.001)\n    (check-within (candidate \"BigData\") 1 0.001)\n    (check-within (candidate \"program\") 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_461_upper_ctr","gpt_solution":"```racket\n#lang racket\n\n;; Function to count the uppercase characters in a given string.\n(define (upper_ctr str)\n  (define (is-uppercase? ch)\n    (<= (char->integer #\\A) (char->integer ch) (char->integer #\\Z)))\n  \n  (define (count-uppercase lst count)\n    (cond\n      [(empty? lst) count]\n      [(is-uppercase? (first lst)) (count-uppercase (rest lst) (+ count 1))]\n      [else (count-uppercase (rest lst) count)]))\n  \n  (count-uppercase (string->list str) 0))\n\n;; Example usage:\n(upper_ctr \"Hello World!\") ; Should return 2\n```"}
{"name":"mbpp_462_combinations_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find all possible combinations of the elements of a given list.\n(define (combinations_list list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_462_combinations_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate combinations_list))\n    (check-within (candidate (list \"orange\" \"red\" \"green\" \"blue\")) (list (list ) (list \"orange\") (list \"red\") (list \"red\" \"orange\") (list \"green\") (list \"green\" \"orange\") (list \"green\" \"red\") (list \"green\" \"red\" \"orange\") (list \"blue\") (list \"blue\" \"orange\") (list \"blue\" \"red\") (list \"blue\" \"red\" \"orange\") (list \"blue\" \"green\") (list \"blue\" \"green\" \"orange\") (list \"blue\" \"green\" \"red\") (list \"blue\" \"green\" \"red\" \"orange\")) 0.001)\n    (check-within (candidate (list \"red\" \"green\" \"blue\" \"white\" \"black\" \"orange\")) (list (list ) (list \"red\") (list \"green\") (list \"green\" \"red\") (list \"blue\") (list \"blue\" \"red\") (list \"blue\" \"green\") (list \"blue\" \"green\" \"red\") (list \"white\") (list \"white\" \"red\") (list \"white\" \"green\") (list \"white\" \"green\" \"red\") (list \"white\" \"blue\") (list \"white\" \"blue\" \"red\") (list \"white\" \"blue\" \"green\") (list \"white\" \"blue\" \"green\" \"red\") (list \"black\") (list \"black\" \"red\") (list \"black\" \"green\") (list \"black\" \"green\" \"red\") (list \"black\" \"blue\") (list \"black\" \"blue\" \"red\") (list \"black\" \"blue\" \"green\") (list \"black\" \"blue\" \"green\" \"red\") (list \"black\" \"white\") (list \"black\" \"white\" \"red\") (list \"black\" \"white\" \"green\") (list \"black\" \"white\" \"green\" \"red\") (list \"black\" \"white\" \"blue\") (list \"black\" \"white\" \"blue\" \"red\") (list \"black\" \"white\" \"blue\" \"green\") (list \"black\" \"white\" \"blue\" \"green\" \"red\") (list \"orange\") (list \"orange\" \"red\") (list \"orange\" \"green\") (list \"orange\" \"green\" \"red\") (list \"orange\" \"blue\") (list \"orange\" \"blue\" \"red\") (list \"orange\" \"blue\" \"green\") (list \"orange\" \"blue\" \"green\" \"red\") (list \"orange\" \"white\") (list \"orange\" \"white\" \"red\") (list \"orange\" \"white\" \"green\") (list \"orange\" \"white\" \"green\" \"red\") (list \"orange\" \"white\" \"blue\") (list \"orange\" \"white\" \"blue\" \"red\") (list \"orange\" \"white\" \"blue\" \"green\") (list \"orange\" \"white\" \"blue\" \"green\" \"red\") (list \"orange\" \"black\") (list \"orange\" \"black\" \"red\") (list \"orange\" \"black\" \"green\") (list \"orange\" \"black\" \"green\" \"red\") (list \"orange\" \"black\" \"blue\") (list \"orange\" \"black\" \"blue\" \"red\") (list \"orange\" \"black\" \"blue\" \"green\") (list \"orange\" \"black\" \"blue\" \"green\" \"red\") (list \"orange\" \"black\" \"white\") (list \"orange\" \"black\" \"white\" \"red\") (list \"orange\" \"black\" \"white\" \"green\") (list \"orange\" \"black\" \"white\" \"green\" \"red\") (list \"orange\" \"black\" \"white\" \"blue\") (list \"orange\" \"black\" \"white\" \"blue\" \"red\") (list \"orange\" \"black\" \"white\" \"blue\" \"green\") (list \"orange\" \"black\" \"white\" \"blue\" \"green\" \"red\")) 0.001)\n    (check-within (candidate (list \"red\" \"green\" \"black\" \"orange\")) (list (list ) (list \"red\") (list \"green\") (list \"green\" \"red\") (list \"black\") (list \"black\" \"red\") (list \"black\" \"green\") (list \"black\" \"green\" \"red\") (list \"orange\") (list \"orange\" \"red\") (list \"orange\" \"green\") (list \"orange\" \"green\" \"red\") (list \"orange\" \"black\") (list \"orange\" \"black\" \"red\") (list \"orange\" \"black\" \"green\") (list \"orange\" \"black\" \"green\" \"red\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_462_combinations_list","gpt_solution":"Here is the complete code to find all possible combinations of the elements of a given list in Racket:\n\n```racket\n#lang racket\n\n;; Function to find all possible combinations of the elements of a given list.\n(define (combinations_list list1)\n  (define (combine acc lst)\n    (cond\n      [(empty? lst) acc]\n      [else\n       (let ((new-acc (append acc (map (\u03bb (x) (cons (first lst) x)) acc))))\n         (combine new-acc (rest lst)))]))\n  (combine '(()) list1))\n  \n;; Example usage\n(combinations_list '(1 2 3))\n```\n\nExplanation:\n- `combinations_list` is a function that will call a local helper function `combine`.\n- `combine` is a recursive function that takes two arguments: `acc` (accumulator to store combinations) and `lst` (the remaining elements to process).\n- If `lst` is empty, `combine` returns `acc`.\n- Otherwise, it updates `acc` by adding new combinations formed by prepending the first element of `lst` to each existing combination in `acc`.\n- Finally, it makes a recursive call to `combine` with the updated `acc` and the rest of `lst`.\n- The initial call to `combine` uses a list with an empty list `'(())` as the initial `acc` and the input list `list1` as `lst`.\n\nThe provided example usage will give you all combinations of the list `(1 2 3)`."}
{"name":"mbpp_463_max_subarray_product","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the maximum product sublist of the given list.\n(define (max_subarray_product arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_463_max_subarray_product.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_subarray_product))\n    (check-within (candidate (list 1 -2 -3 0 7 -8 -2)) 112 0.001)\n    (check-within (candidate (list 6 -3 -10 0 2)) 180 0.001)\n    (check-within (candidate (list -2 -40 0 -2 -3)) 80 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_463_max_subarray_product","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the maximum product sublist of the given list.\n(define (max_subarray_product arr)\n  (define len (length arr))\n  (define max-product -inf.0)\n  (define current-product 1)\n  (define-zero? (lambda (x) (zero? x)))\n\n  (for ([i len])\n    (set! current-product 1)\n    (for ([j (in-range i len)])\n      (set! current-product (* current-product (list-ref arr j)))\n      (when (> current-product max-product)\n        (set! max-product current-product))\n      (when (zero? current-product)\n        (set! current-product 1))))\n\n  max-product)\n\n;; Example usage:\n(max_subarray_product '(2 3 -2 4))      ;; Expected output: 6\n(max_subarray_product '(-2 0 -1))       ;; Expected output: 0\n(max_subarray_product '(-2 3 -4))      ;; Expected output: 24\n(max_subarray_product '(-2 -3))        ;; Expected output: 6\n```\n\nThis code defines a function `max_subarray_product` that computes the maximum product sublist of the given list. The function iterates through all possible sublists, computing their products and tracking the maximum product encountered. This implementation handles edge cases such as sublists containing zeros and negative values effectively."}
{"name":"mbpp_464_check_value","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if all values are same in a hash.\n(define (check_value dict n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_464_check_value.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_value))\n    (check-within (candidate #hash((\"Cierra Vega\" .  12) (\"Alden Cantrell\" .  12) (\"Kierra Gentry\" .  12) (\"Pierre Cox\" .  12)) 10) #f 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  12) (\"Alden Cantrell\" .  12) (\"Kierra Gentry\" .  12) (\"Pierre Cox\" .  12)) 12) #t 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  12) (\"Alden Cantrell\" .  12) (\"Kierra Gentry\" .  12) (\"Pierre Cox\" .  12)) 5) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_464_check_value","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if all values are same in a hash.\n(define (check_value dict)\n  (define values-list (hash-values dict))\n  (define first-value (first values-list))\n  (for\/and ([val values-list])\n    (equal? val first-value)))\n\n;; Example usage:\n(define ht (make-hash '((a . 1) (b . 1) (c . 1))))\n(check_value ht) ; returns #t\n\n(define ht2 (make-hash '((a . 1) (b . 2) (c . 1))))\n(check_value ht2) ; returns #f\n```"}
{"name":"mbpp_465_drop_empty","language":"rkt","prompt":"#lang racket\n\n;; Write a function to drop empty items from a given hash.\n(define (drop_empty dict1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_465_drop_empty.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate drop_empty))\n    (check-within (candidate #hash((\"c1\" .  \"Red\") (\"c2\" .  \"Green\") (\"c3\" .  #f))) #hash((\"c1\" .  \"Red\") (\"c2\" .  \"Green\")) 0.001)\n    (check-within (candidate #hash((\"c1\" .  \"Red\") (\"c2\" .  #f) (\"c3\" .  #f))) #hash((\"c1\" .  \"Red\")) 0.001)\n    (check-within (candidate #hash((\"c1\" .  #f) (\"c2\" .  \"Green\") (\"c3\" .  #f))) #hash((\"c2\" .  \"Green\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_465_drop_empty","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to drop empty items from a given hash.\n(define (drop_empty dict1)\n  (for\/fold ([result (make-hash)])\n            ([k (hash-keys dict1)]\n             [v (hash-values dict1)])\n    (if (not (or (string=? v \"\") (null? v)))\n        (hash-set result k v)\n        result)))\n\n;; Example usage:\n(define my-hash (hash 'a 1 'b \"\" 'c '(1 2 3) 'd '() 'e \"example\" 'f null))\n(drop_empty my-hash)\n```\n\nThis `drop_empty` function creates a new hash and iterates over the keys and values of the input hash `dict1`. It checks if the value is not an empty string or an empty list (null). If the value is non-empty, it adds the key-value pair to the resulting hash. Finally, it returns the new hash with all empty items removed."}
{"name":"mbpp_468_max_product","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n(define (max_product arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_468_max_product.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product))\n    (check-within (candidate (list 3 100 4 5 150 6)) 3000 0.001)\n    (check-within (candidate (list 4 42 55 68 80)) 50265600 0.001)\n    (check-within (candidate (list 10 22 9 33 21 50 41 60)) 2460 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_468_max_product","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n(define (max-product arr)\n  (define n (length arr))\n  (if (zero? n)\n      0\n      (let* ([max-product-list (make-vector n)]\n             [result 0])\n        ;; Initialize all entries of max-product-list as the respective elements in arr\n        (for ([i (in-range n)])\n          (vector-set! max-product-list i (list-ref arr i)))\n        \n        ;; Compute the maximum product values for each element as the last element of the subsequence\n        (for ([i (in-range 1 n)])\n          (for ([j (in-range i)])\n            (when (< (list-ref arr j) (list-ref arr i))\n              (vector-set! max-product-list i\n                           (max (vector-ref max-product-list i)\n                                (* (list-ref arr i) (vector-ref max-product-list j)))))))\n        \n        ;; Find the maximum product in max-product-list\n        (for ([i (in-range n)])\n          (set! result (max result (vector-ref max-product-list i))))\n        result)))\n\n;; Example usage\n(define arr '(3 100 4 5 150 6))\n(max-product arr)  ; Output should be 45000 (3 * 100 * 150)\n```"}
{"name":"mbpp_470_add_pairwise","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_470_add_pairwise.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-within (candidate (list 1 5 7 8 10)) (list 6 12 15 18) 0.001)\n    (check-within (candidate (list 2 6 8 9 11)) (list 8 14 17 20) 0.001)\n    (check-within (candidate (list 3 7 9 10 12)) (list 10 16 19 22) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_470_add_pairwise","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise lst)\n  (define (helper l acc)\n    (cond\n      [(or (empty? l) (empty? (rest l))) (reverse acc)]\n      [else (helper (rest l) (cons (+ (first l) (first (rest l))) acc))]))\n  (helper lst '()))\n\n;; Example usage:\n(add_pairwise '(1 2 3 4 5 6)) ; => '(3 5 7 9 11)\n(add_pairwise '(10 20 30 40)) ; => '(30 50 70)\n```\n\nThe function `add_pairwise` takes a list `lst` and returns a new list containing the sums of each pair of neighboring elements in the input list. The helper function `helper` is used to iterate over the list, accumulate the results in `acc`, and return the reversed accumulated list at the end to preserve the order."}
{"name":"mbpp_471_find_remainder","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the product of the list multiplication modulo n.\n(define (find_remainder arr n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_471_find_remainder.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_remainder))\n    (check-within (candidate (list 100 10 5 25 35 14) 11) 9 0.001)\n    (check-within (candidate (list 1 1 1) 1) 0 0.001)\n    (check-within (candidate (list 1 2 1) 2) 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_471_find_remainder","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the product of the list multiplication modulo n.\n(define (find_remainder arr n)\n  (define (product lst)\n    (if (empty? lst)\n        1\n        (* (first lst) (product (rest lst)))))\n  (modulo (product arr) n))\n\n;; Example usage:\n(find_remainder '(2 3 4) 5) ;; => 4 (2 * 3 * 4 = 24, 24 % 5 = 4)\n(find_remainder '(1 2 3 4 5) 7) ;; => 1 (1 * 2 * 3 * 4 * 5 = 120, 120 % 7 = 1)\n```"}
{"name":"mbpp_472_check_Consecutive","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the given list contains consecutive numbers or not.\n(define (check_Consecutive l)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_472_check_Consecutive.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_Consecutive))\n    (check-within (candidate (list 1 2 3 4 5)) #t 0.001)\n    (check-within (candidate (list 1 2 3 5 6)) #f 0.001)\n    (check-within (candidate (list 1 2 1)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_472_check_Consecutive","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether the given list contains consecutive numbers or not.\n(define (check_Consecutive l)\n  (define sorted-l (sort l <))  ; Sort the list in ascending order\n  (define (check-helper lst)\n    (cond\n      [(or (null? lst) (null? (cdr lst))) #t] ; If the list is empty or has only one element, they are consecutive\n      [(= (+ 1 (car lst)) (cadar lst)) (check-helper (cdr lst))] ; Check if the successive elements are consecutive\n      [else #f])) ; If not, return false\n  (check-helper sorted-l))\n\n;; Examples of usage\n(check_Consecutive '(1 2 3 4))    ; expected output: #t\n(check_Consecutive '(1 3 2 4 6))  ; expected output: #f\n(check_Consecutive '(4 3 2 1))    ; expected output: #t\n(check_Consecutive '(5 7 6 8 9))  ; expected output: #t\n(check_Consecutive '(10 12 11 14)) ; expected output: #f\n```"}
{"name":"mbpp_474_replace_char","language":"rkt","prompt":"#lang racket\n\n;; Write a function to replace characters in a string.\n(define (replace_char str1 ch newch)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_474_replace_char.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_char))\n    (check-within (candidate \"polygon\" \"y\" \"l\") \"pollgon\" 0.001)\n    (check-within (candidate \"character\" \"c\" \"a\") \"aharaater\" 0.001)\n    (check-within (candidate \"python\" \"l\" \"a\") \"python\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_474_replace_char","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to replace characters in a string.\n;; replace_char takes in three arguments: the original string, the character to be replaced (ch), and the new character (newch).\n;; It returns a new string with all instances of ch replaced by newch.\n\n(define (replace_char str1 ch newch)\n  (define char-list (string->list str1))  ;; Convert the string to a list of characters\n  (define updated-char-list\n    (map\n      (lambda (character)\n        (if (char=? character ch)\n            newch\n            character))\n      char-list))\n  (list->string updated-char-list))  ;; Convert the list of characters back to a string\n\n;; Example usage of replace_char function\n(replace_char \"hello world\" #\\o #\\a) ;; will return \"hella warld\"\n```"}
{"name":"mbpp_475_sort_counter","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_475_sort_counter.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-within (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)) 0.001)\n    (check-within (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)) 0.001)\n    (check-within (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_475_sort_counter","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (let* ((alist (hash->list dict1))\n         (sorted-alist (sort alist \n                             (lambda (a b) \n                               (< (cdr a) (cdr b))))))\n    (list->hash sorted-alist)))\n\n;; Example usage:\n(define my-hash (make-hash '((a . 3) (b . 1) (c . 2))))\n(define sorted-hash (sort_counter my-hash))\n(sorted-hash)\n;; should return #hash((b . 1) (c . 2) (a . 3))\n```"}
{"name":"mbpp_476_big_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of the largest and smallest value in a given list.\n(define (big_sum nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_476_big_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate big_sum))\n    (check-within (candidate (list 1 2 3)) 4 0.001)\n    (check-within (candidate (list -1 2 3 4)) 3 0.001)\n    (check-within (candidate (list 2 3 6)) 8 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_476_big_sum","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the sum of the largest and smallest value in a given list.\n(define (big_sum nums)\n  (if (empty? nums)\n      0\n      (let* ([min-val (apply min nums)]\n             ([max-val (apply max nums)])\n             ([sum (+ min-val max-val)]))\n        sum)))\n\n; Testing the function\n(display (big_sum '(1 2 3 4 5))) ; Output: 6\n(display \"\\n\")\n(display (big_sum '(10 20 30 40 50))) ; Output: 60\n(display \"\\n\")\n(display (big_sum '())) ; Output: 0\n```\n\nThis Racket function `big_sum` computes the sum of the smallest and largest numbers in a given list. If the list is empty, it returns 0."}
{"name":"mbpp_477_is_lower","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to convert the given string to lower case.\n(define (is_lower string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_477_is_lower.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_lower))\n    (check-within (candidate \"InValid\") \"invalid\" 0.001)\n    (check-within (candidate \"TruE\") \"true\" 0.001)\n    (check-within (candidate \"SenTenCE\") \"sentence\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_477_is_lower","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to convert the given string to lower case.\n(define (to_lower string)\n  (string-downcase string))\n\n;; Example usage:\n;; (to_lower \"Hello, World!\") ; => \"hello, world!\"\n```\n\nThis Racket program defines a function `to_lower` that takes a string as input and converts it to lower case using the built-in `string-downcase` function.\n\nHere's an example of how you might use the `to_lower` function:\n```racket\n(to_lower \"Hello, World!\") ; => \"hello, world!\"\n```"}
{"name":"mbpp_478_remove_lowercase","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove lowercase substrings from a given string.\n(define (remove_lowercase str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_478_remove_lowercase.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_lowercase))\n    (check-within (candidate \"PYTHon\") \"PYTH\" 0.001)\n    (check-within (candidate \"FInD\") \"FID\" 0.001)\n    (check-within (candidate \"STRinG\") \"STRG\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_478_remove_lowercase","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove lowercase substrings from a given string.\n(define (remove_lowercase str1)\n  (define lower-case? (char-lower-case?))\n  (define (is-lower? c)\n    (and (char? c) (char-lower-case? c)))\n  \n  (let loop ([s (string->list str1)]\n             [acc '()])\n    (cond\n      [(null? s) (list->string (reverse acc))]\n      [else\n       (if (is-lower? (car s))\n           (loop (cdr s) acc)\n           (loop (cdr s) (cons (car s) acc)))])))\n\n;; Example usage:\n(define example-string \"Hello World, Racket is Awesome!\")\n(remove_lowercase example-string)\n;; => \"H W, R A!\"\n```\n\nThis code defines a function `remove_lowercase` that takes a string and removes all lowercase characters from it, returning the modified string. The `char-lower-case?` function checks if a character is lowercase, and the `loop` function processes each character one by one, accumulating the result without lowercase characters. Finally, the accumulated list is converted back to a string."}
{"name":"mbpp_479_first_Digit","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_479_first_Digit.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-within (candidate 123) 1 0.001)\n    (check-within (candidate 456) 4 0.001)\n    (check-within (candidate 12) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_479_first_Digit","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the first digit of a given number.\n(define (first_Digit n)\n  (let loop ((num (abs n)))\n    (if (< num 10)\n        num\n        (loop (quotient num 10)))))\n```\n\nExplanation:\n- The `first_Digit` function takes a number `n` as input.\n- The helper function `loop` is defined with an initial value of `num` that is the absolute value of `n`. The `abs` function ensures that negative numbers are handled correctly.\n- The `if` condition checks if `num` is less than 10. If true, `num` is the first digit and is returned.\n- If `num` is 10 or greater, the `loop` function recurs with `num` divided by 10 (using `quotient`), effectively stripping off the last digit.\n- This process continues until `num` is reduced to a single digit, which will be the first digit of the original number `n`."}
{"name":"mbpp_554_Split","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function which takes a list of integers and only returns the odd ones.\n(define (Split list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_554_Split.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-within (candidate (list 1 2 3 4 5 6)) (list 1 3 5) 0.001)\n    (check-within (candidate (list 10 11 12 13)) (list 11 13) 0.001)\n    (check-within (candidate (list 7 8 9 1)) (list 7 9 1) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_554_Split","gpt_solution":"```racket\n#lang racket\n\n;; Write a function which takes a list of integers and only returns the odd ones.\n(define (split list)\n  (filter odd? list))\n\n;; Test cases\n(split '(1 2 3 4 5))  ;; '(1 3 5)\n(split '(2 4 6 8))    ;; '()\n(split '(1 3 5 7 9))  ;; '(1 3 5 7 9)\n```"}
{"name":"mbpp_555_difference","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n(define (difference n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_555_difference.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate difference))\n    (check-within (candidate 3) 30 0.001)\n    (check-within (candidate 5) 210 0.001)\n    (check-within (candidate 2) 6 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_555_difference","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n(define (difference n)\n  (define (sum-of-first-n n)\n    (* (\/ n 2) (+ n 1)))\n  (define (sum-of-cubes n)\n    (define (cube x) (* x x x))\n    (foldr + 0 (map cube (range 1 (+ n 1)))))\n  (- (sum-of-cubes n) (sum-of-first-n n)))\n  \n;; Example usage:\n;; (difference 3)\n;; Output: 30 - 6 = 24\n```"}
{"name":"mbpp_556_find_Odd_Pair","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of pairs whose xor value is odd.\n(define (find_Odd_Pair A N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_556_find_Odd_Pair.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Odd_Pair))\n    (check-within (candidate (list 5 4 7 2 1) 5) 6 0.001)\n    (check-within (candidate (list 7 2 8 1 0 5 11) 7) 12 0.001)\n    (check-within (candidate (list 1 2 3) 3) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_556_find_Odd_Pair","gpt_solution":"```racket\n#lang racket\n\n;; Function to count the number of pairs whose XOR value is odd.\n(define (find_Odd_Pair A N)\n  (define odd-count 0)\n  (define even-count 0)\n  (for ([i N])\n    (if (odd? (list-ref A i))\n        (set! odd-count (+ odd-count 1))\n        (set! even-count (+ even-count 1))))\n  (* odd-count even-count))\n\n;; Example usage:\n(find_Odd_Pair '(1 2 3 4) 4) ; Should return 4 because pairs are (1,2), (1,4), (3,2), (3,4)\n```\n\nThis implementation counts the number of pairs `(i, j)` in list `A` such that the XOR of `A[i]` and `A[j]` is odd. It assumes that `N` is the length of the list `A`. The counting is done by first finding the count of odd and even numbers in the list, and then multiplying these counts to get the number of odd pairs because an XOR operation between an odd and an even number is always odd."}
{"name":"mbpp_557_toggle_string","language":"rkt","prompt":"#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_557_toggle_string.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_string))\n    (check-within (candidate \"Python\") \"pYTHON\" 0.001)\n    (check-within (candidate \"Pangram\") \"pANGRAM\" 0.001)\n    (check-within (candidate \"LIttLE\") \"liTTle\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_557_toggle_string","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to toggle the case of all characters in a string.\n(define (toggle_string string)\n  (list->string\n   (map (lambda (char)\n          (if (char-upper-case? char)\n              (char-downcase char)\n              (char-upcase char)))\n        (string->list string))))\n```\n\nThis function, `toggle_string`, converts a given string to a list of characters, toggles the case of each character (from upper to lower or from lower to upper), and finally converts the list back to a string."}
{"name":"mbpp_558_digit_distance_nums","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of the per-digit difference between two integers.\n(define (digit_distance_nums n1 n2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_558_digit_distance_nums.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digit_distance_nums))\n    (check-within (candidate 1 2) 1 0.001)\n    (check-within (candidate 23 56) 6 0.001)\n    (check-within (candidate 123 256) 7 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_558_digit_distance_nums","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the sum of the per-digit difference between two integers.\n(define (digit-distance-nums n1 n2)\n  (define (abs x)\n    (if (< x 0) (- x) x))\n  \n  (define (sum-digit-differences num1 num2 acc)\n    (if (and (zero? num1) (zero? num2))\n        acc\n        (let* ([digit1 (mod num1 10)]\n               [digit2 (mod num2 10)]\n               [diff (abs (- digit1 digit2))]\n               [new-acc (+ acc diff)])\n          (sum-digit-differences (quotient num1 10) (quotient num2 10) new-acc))))\n  \n  (sum-digit-differences n1 n2 0))\n\n;; Example usage:\n(digit-distance-nums 1234 5678) ;; Expected output: 18\n(digit-distance-nums 100 299)  ;; Expected output: 10\n```\n\nThis code defines a function `digit-distance-nums` that calculates the sum of the per-digit differences between two integers `n1` and `n2`. The `sum-digit-differences` function works recursively to compute the differences for each pair of corresponding digits, summing these differences and returning the total."}
{"name":"mbpp_559_max_sub_array_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the sum of the largest contiguous sublist in the given list.\n(define (max_sub_array_sum a size)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_559_max_sub_array_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum))\n    (check-within (candidate (list -2 -3 4 -1 -2 1 5 -3) 8) 7 0.001)\n    (check-within (candidate (list -3 -4 5 -2 -3 2 6 -4) 8) 8 0.001)\n    (check-within (candidate (list -4 -5 6 -3 -4 3 7 -5) 8) 10 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_559_max_sub_array_sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the sum of the largest contiguous sublist in the given list.\n(define (max_sub_array_sum a size)\n  (define max-so-far (list-ref a 0))\n  (define max-ending-here (list-ref a 0))\n  \n  (for ([i (in-range 1 size)])\n    (set! max-ending-here (max (list-ref a i) (+ max-ending-here (list-ref a i))))\n    (set! max-so-far (max max-so-far max-ending-here)))\n  \n  max-so-far)\n\n;; Example usage:\n(define sample-list '(\u22122 1 \u22123 4 \u22121 2 1 \u22125 4))\n(max_sub_array_sum sample-list (length sample-list))\n;; Expected output: 6\n```\n\nThis code defines a function `max_sub_array_sum` that calculates the sum of the largest contiguous sublist (subarray) in a given list using Kadane's Algorithm. The function iterates over the elements of the list and keeps track of the maximum sum encountered so far (`max-so-far`) and the maximum sum of the current sublist ending at the current position (`max-ending-here`)."}
{"name":"mbpp_560_union_elements","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the union of the elements of two given lists and output them in sorted order.\n(define (union_elements test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_560_union_elements.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate union_elements))\n    (check-within (candidate (list 3 4 5 6) (list 5 7 4 10)) (list 3 4 5 6 7 10) 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 3 4 5 6)) (list 1 2 3 4 5 6) 0.001)\n    (check-within (candidate (list 11 12 13 14) (list 13 15 16 17)) (list 11 12 13 14 15 16 17) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_560_union_elements","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the union of the elements of two given lists and output them in sorted order.\n(define (union_elements list1 list2)\n  (define (merge lst1 lst2)\n    (cond\n      [(null? lst1) lst2]\n      [(null? lst2) lst1]\n      [else (let ([x (first lst1)] [y (first lst2)])\n              (cond\n                [(< x y) (cons x (merge (rest lst1) lst2))]\n                [(> x y) (cons y (merge lst1 (rest lst2)))]\n                [else (cons x (merge (rest lst1) (rest lst2)))]))]))\n\n  (define (sort lst)\n    (if (or (null? lst) (null? (rest lst)))\n        lst\n        (let* ([mid (quotient (length lst) 2)]\n               [left (take lst mid)]\n               [right (drop lst mid)])\n          (merge (sort left) (sort right)))))\n\n  (sort (remove-duplicates (append list1 list2))))\n\n;; Example usage:\n(union_elements '(1 2 3) '(3 4 5))  ; Outputs: '(1 2 3 4 5)\n(union_elements '(5 3 1) '(4 3 2))  ; Outputs: '(1 2 3 4 5)\n```\n\nThis Racket code defines a function `union_elements` that takes two lists `list1` and `list2`, finds their union, and returns the union in sorted order. The `merge` function handles the merging of two sorted lists, ensuring no duplicates. The `sort` function uses the merge sort algorithm to sort the lists. The `remove-duplicates` function removes duplicate elements before sorting the final merged list."}
{"name":"mbpp_562_Find_Max_Length","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the length of the longest sublists.\n(define (Find_Max_Length lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_562_Find_Max_Length.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Max_Length))\n    (check-within (candidate (list (list 1) (list 1 4) (list 5 6 7 8))) 4 0.001)\n    (check-within (candidate (list (list 0 1) (list 2 2) (list 3 2 1))) 3 0.001)\n    (check-within (candidate (list (list 7) (list 22 23) (list 13 14 15) (list 10 20 30 40 50))) 5 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_562_Find_Max_Length","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the length of the longest sublists.\n(define (Find_Max_Length lst)\n  (if (null? lst)  ; Check if the list is empty\n      0            ; If the list is empty, return 0\n      (max (length (car lst)) (Find_Max_Length (cdr lst)))))  ; Recursively find the max length\n```\n\nThis function, `Find_Max_Length`, recursively traverses through the list of lists (`lst`) and computes the maximum length among the sublists using the `max` function, the `length` function, and the `car` and `cdr` functions to access the elements of the list."}
{"name":"mbpp_563_extract_values","language":"rkt","prompt":"#lang racket\n\n;; Write a function to extract values between quotation marks from a string.\n(define (extract_values text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_563_extract_values.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_values))\n    (check-within (candidate \"\"Python\", \"PHP\", \"Java\"\") (list \"Python\" \"PHP\" \"Java\") 0.001)\n    (check-within (candidate \"\"python\",\"program\",\"language\"\") (list \"python\" \"program\" \"language\") 0.001)\n    (check-within (candidate \"\"red\",\"blue\",\"green\",\"yellow\"\") (list \"red\" \"blue\" \"green\" \"yellow\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_563_extract_values","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to extract values between quotation marks from a string.\n(define (extract_values text)\n  (define matches (regexp-match* #rx\/\"([^\"]*)\" text))\n  (map second matches))\n\n;; Example usage:\n(extract_values \"He said \\\"Hello\\\" and then \\\"Goodbye\\\".\") \n;; Expected output: '(\"Hello\" \"Goodbye\")\n```"}
{"name":"mbpp_564_count_Pairs","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n(define (count_Pairs arr n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_564_count_Pairs.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_Pairs))\n    (check-within (candidate (list 1 2 1) 3) 2 0.001)\n    (check-within (candidate (list 1 1 1 1) 4) 0 0.001)\n    (check-within (candidate (list 1 2 3 4 5) 5) 10 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_564_count_Pairs","gpt_solution":"```racket\n#lang racket\n\n;; This function takes a list of integers and counts the number of possible unordered pairs\n;; where both elements are unequal.\n(define (count-Pairs arr)\n  (let ([n (length arr)])\n    (define (count-helper arr n i j count)\n      (cond\n        [(>= i n) count]\n        [(and (>= j n) (< i n)) (count-helper arr n (add1 i) (add1 i) count)]\n        [(not (equal? (list-ref arr i) (list-ref arr j)))\n         (count-helper arr n i (add1 j) (add1 count))]\n        [else (count-helper arr n i (add1 j) count)]))\n    (count-helper arr n 0 1 0)))\n\n;; Example usage\n(count-Pairs '(1 2 3 4)) ;; Expected: 6 (Pairs: (1,2), (1,3), (1,4), (2,3), (2,4), (3,4))\n(count-Pairs '(1 1 1 1)) ;; Expected: 0 (No pairs with unequal elements)\n(count-Pairs '(1 2 2 3)) ;; Expected: 5 (Pairs: (1,2), (1,2), (1,3), (2,3), (2,3))\n```"}
{"name":"mbpp_565_split","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_565_split.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-within (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\") 0.001)\n    (check-within (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\") 0.001)\n    (check-within (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_565_split","gpt_solution":"```racket\n#lang racket\n\n;; Function to split a string into characters.\n(define (split word)\n  (string->list word))\n\n;; Example usage:\n(split \"hello\") ; => '(#\\h #\\e #\\l #\\l #\\o)\n```"}
{"name":"mbpp_566_sum_digits","language":"rkt","prompt":"#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_566_sum_digits.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-within (candidate 345) 12 0.001)\n    (check-within (candidate 12) 3 0.001)\n    (check-within (candidate 97) 16 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_566_sum_digits","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n  (if (< n 10)\n      n\n      (+ (modulo n 10) (sum_digits (quotient n 10)))))\n```\n\nThis code defines a function `sum_digits` which takes a non-negative integer `n` and recursively calculates the sum of its digits. If `n` is a single-digit number, it simply returns `n`. Otherwise, it adds the last digit (obtained using `modulo`) to the sum of the digits of the remaining number (obtained using `quotient`), and calls itself recursively with this remaining number."}
{"name":"mbpp_567_issort_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether a specified list is sorted or not.\n(define (issort_list list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_567_issort_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate issort_list))\n    (check-within (candidate (list 1 2 4 6 8 10 12 14 16 17)) #t 0.001)\n    (check-within (candidate (list 1 2 4 6 8 10 12 14 20 17)) #f 0.001)\n    (check-within (candidate (list 1 2 4 6 8 10 15 14 20)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_567_issort_list","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether a specified list is sorted or not.\n(define (issort_list list1)\n  (cond\n    [(or (empty? list1) (empty? (rest list1))) #t] ; If list is empty or has only one element, it's sorted.\n    [(> (first list1) (second list1)) #f] ; If any element is greater than the following one, it's not sorted.\n    [else (issort_list (rest list1))])) ; Recur for the rest of the list.\n\n;; Example usage:\n;; (issort_list '(1 2 3 4 5)) ; will return #t\n;; (issort_list '(1 3 2 4 5)) ; will return #f\n```\n\nThe above code defines a function `issort_list` which takes a list as input and checks if it is sorted in non-decreasing order. It does this by recursively checking each pair of adjacent elements. If at any point an element is found that is greater than the following one, it returns `#f` indicating that the list is not sorted. If the end of the list is reached without finding any such pair, it returns `#t` indicating that the list is sorted."}
{"name":"mbpp_568_empty_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to create a list of N empty dictionaries.\n(define (empty_list length)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_568_empty_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate empty_list))\n    (check-within (candidate 5) (list #hash() #hash() #hash() #hash() #hash()) 0.001)\n    (check-within (candidate 6) (list #hash() #hash() #hash() #hash() #hash() #hash()) 0.001)\n    (check-within (candidate 7) (list #hash() #hash() #hash() #hash() #hash() #hash() #hash()) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_568_empty_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to create a list of N empty dictionaries.\n(define (empty_list length)\n  (define (helper n)\n    (if (zero? n)\n        '()\n        (cons (make-hasheq) (helper (sub1 n)))))\n  (helper length))\n\n;; Example usage:\n;; (empty_list 5)\n;; '({} {} {} {} {})\n```"}
{"name":"mbpp_569_sort_sublists","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort each sublist of strings in a given list of lists.\n(define (sort_sublists list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_569_sort_sublists.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_sublists))\n    (check-within (candidate (list (list \"green\" \"orange\") (list \"black\" \"white\") (list \"white\" \"black\" \"orange\"))) (list (list \"green\" \"orange\") (list \"black\" \"white\") (list \"black\" \"orange\" \"white\")) 0.001)\n    (check-within (candidate (list (list \"green\" \"orange\") (list \"black\") (list \"green\" \"orange\") (list \"white\"))) (list (list \"green\" \"orange\") (list \"black\") (list \"green\" \"orange\") (list \"white\")) 0.001)\n    (check-within (candidate (list (list \"a\" \"b\") (list \"d\" \"c\") (list \"g\" \"h\") (list \"f\" \"e\"))) (list (list \"a\" \"b\") (list \"c\" \"d\") (list \"g\" \"h\") (list \"e\" \"f\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_569_sort_sublists","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to sort each sublist of strings in a given list of lists.\n(define (sort-sublists list1)\n  (map (lambda (sublist)\n         (sort sublist string<?))\n       list1))\n\n;; Example usage:\n(define example (list (list \"apple\" \"orange\" \"banana\")\n                      (list \"dog\" \"cat\" \"elephant\")\n                      (list \"racket\" \"scheme\" \"lisp\")))\n\n(sort-sublists example)\n;; Expected output: ((\"apple\" \"banana\" \"orange\") (\"cat\" \"dog\" \"elephant\") (\"lisp\" \"racket\" \"scheme\"))\n```"}
{"name":"mbpp_572_two_unique_nums","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to remove duplicate numbers from a given number of lists.\n(define (two_unique_nums nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_572_two_unique_nums.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate two_unique_nums))\n    (check-within (candidate (list 1 2 3 2 3 4 5)) (list 1 4 5) 0.001)\n    (check-within (candidate (list 1 2 3 2 4 5)) (list 1 3 4 5) 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) (list 1 2 3 4 5) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_572_two_unique_nums","gpt_solution":"```racket\n#lang racket\n\n;; Function to remove duplicate numbers from a given number of lists.\n(define (two_unique_nums . nums)\n  (define (flatten lst)\n    (if (null? lst)\n        null\n        (append (car lst) (flatten (cdr lst)))))\n  (define (unique lst)\n    (let loop ((lst lst) (acc '()))\n      (cond\n        ((null? lst) (reverse acc))\n        ((member (car lst) acc) (loop (cdr lst) acc))\n        (else (loop (cdr lst) (cons (car lst) acc))))))\n  (unique (flatten nums)))\n  \n;; Example usage:\n(two_unique_nums '(1 2 3) '(3 4 5) '(5 6 7))\n;; Output should be '(1 2 3 4 5 6 7)\n```"}
{"name":"mbpp_573_unique_product","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_573_unique_product.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-within (candidate (list 10 20 30 40 20 50 60 40)) 720000000 0.001)\n    (check-within (candidate (list 1 2 3 1)) 6 0.001)\n    (check-within (candidate (list 7 8 9 0 1 1)) 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_573_unique_product","gpt_solution":"```racket\n#lang racket\n\n;; Function to calculate the product of the unique numbers in a given list\n(define (unique_product list_data)\n  (define unique-list (remove-duplicates list_data))\n  (define (product lst)\n    (foldl * 1 lst))\n  (product unique-list))\n```\n\nThis code defines a function `unique_product` that calculates the product of the unique numbers in a given list. The function first removes duplicate elements using `remove-duplicates`. Then, it calculates the product of the resulting list using a helper function `product` which utilizes `foldl` to multiply the elements together."}
{"name":"mbpp_574_surfacearea_cylinder","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the surface area of a cylinder.\n(define (surfacearea_cylinder r h)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_574_surfacearea_cylinder.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate surfacearea_cylinder))\n    (check-within (candidate 10 5) 942.45 0.001)\n    (check-within (candidate 4 5) 226.18800000000002 0.001)\n    (check-within (candidate 4 10) 351.848 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_574_surfacearea_cylinder","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the surface area of a cylinder.\n;; The surface area of a cylinder is calculated using the formula:\n;; Surface Area = 2 * \u03c0 * r * (r + h)\n;; where r is the radius and h is the height of the cylinder.\n(define (surfacearea_cylinder r h)\n  (let* ([pi (acos -1)]\n         [surface-area (+ (* 2 pi r r) (* 2 pi r h))])\n    surface-area))\n\n;; Example usage:\n;; (surfacearea_cylinder 3 5) should return 150.79644737231007\n```\n\nThis Racket function `surfacearea_cylinder` calculates the surface area of a cylinder given the radius `r` and the height `h`. The result is based on the formula for the surface area of a cylinder: \\( 2\\pi r (r + h) \\). The example usage shows how to call the function with a radius of 3 and height of 5."}
{"name":"mbpp_576_is_Sub_Array","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_576_is_Sub_Array.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-within (candidate (list 1 4 3 5) (list 1 2)) #f 0.001)\n    (check-within (candidate (list 1 2 1) (list 1 2 1)) #t 0.001)\n    (check-within (candidate (list 1 0 2 2) (list 2 2 0)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_576_is_Sub_Array","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether list A is a sublist of list B\n(define (is-Sub-Array A B)\n  (define lenA (length A))\n  (define lenB (length B))\n  \n  ;; Helper function to check if list A is prefix of list B\n  (define (is-prefix? A B)\n    (cond\n      [(null? A) #t]\n      [(null? B) #f]\n      [(equal? (car A) (car B)) (is-prefix? (cdr A) (cdr B))]\n      [else #f]))\n    \n  (cond\n    [(> lenA lenB) #f]\n    [(is-prefix? A B) #t]\n    [else (is-Sub-Array A (cdr B))]))\n\n;; Example usage\n(define A '(2 3))\n(define B '(1 2 3 4 5))\n(is-Sub-Array A B) ;; should return #t\n\n(define C '(2 4))\n(is-Sub-Array C B) ;; should return #f\n\n(define D '(1 2 3))\n(is-Sub-Array D B) ;; should return #t\n\n(define E '(1 2 3 4 5))\n(is-Sub-Array B E) ;; should return #t\n\n(define F '(6 7))\n(is-Sub-Array F B) ;; should return #f\n```"}
{"name":"mbpp_577_last_Digit_Factorial","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the last digit in factorial of a given number.\n(define (last_Digit_Factorial n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_577_last_Digit_Factorial.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate last_Digit_Factorial))\n    (check-within (candidate 4) 4 0.001)\n    (check-within (candidate 21) 0 0.001)\n    (check-within (candidate 30) 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_577_last_Digit_Factorial","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the last digit in the factorial of a given number\n(define (last_Digit_Factorial n)\n  (define (factorial k)\n    (if (<= k 1)\n        1\n        (* k (factorial (- k 1)))))\n  (modulo (factorial n) 10))\n\n;; Example usage\n(last_Digit_Factorial 5) ;; Output should be 0 because 5! = 120 and the last digit is 0\n(last_Digit_Factorial 7) ;; Output should be 4 because 7! = 5040 and the last digit is 0\n```"}
{"name":"mbpp_578_interleave_lists","language":"rkt","prompt":"#lang racket\n\n;; Write a function to interleave 3 lists of the same length into a single flat list.\n(define (interleave_lists list1 list2 list3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_578_interleave_lists.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate interleave_lists))\n    (check-within (candidate (list 1 2 3 4 5 6 7) (list 10 20 30 40 50 60 70) (list 100 200 300 400 500 600 700)) (list 1 10 100 2 20 200 3 30 300 4 40 400 5 50 500 6 60 600 7 70 700) 0.001)\n    (check-within (candidate (list 10 20) (list 15 2) (list 5 10)) (list 10 15 5 20 2 10) 0.001)\n    (check-within (candidate (list 11 44) (list 10 15) (list 20 5)) (list 11 10 20 44 15 5) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_578_interleave_lists","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to interleave 3 lists of the same length into a single flat list.\n(define (interleave_lists list1 list2 list3)\n  (define (helper l1 l2 l3 acc)\n    (if (null? l1)\n        (reverse acc)\n        (helper (cdr l1)\n                (cdr l2)\n                (cdr l3)\n                (cons (car l3) (cons (car l2) (cons (car l1) acc))))))\n  (helper list1 list2 list3 '()))\n\n;; Example usage:\n(interleave_lists '(1 2 3) '(4 5 6) '(7 8 9))\n;; Expected output: '(1 4 7 2 5 8 3 6 9)\n```\n\nYou can test this function by running the example usage provided. It interleaves the three lists `'(1 2 3)`, `'(4 5 6)`, and `'(7 8 9)` into `'(1 4 7 2 5 8 3 6 9)` as required."}
{"name":"mbpp_579_find_dissimilar","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the dissimilar elements in the given two lists.\n(define (find_dissimilar test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_579_find_dissimilar.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_dissimilar))\n    (check-within (candidate (list 3 4 5 6) (list 5 7 4 10)) (list 3 6 7 10) 0.001)\n    (check-within (candidate (list 1 2 3 4) (list 7 2 3 9)) (list 1 4 7 9) 0.001)\n    (check-within (candidate (list 21 11 25 26) (list 26 34 21 36)) (list 34 36 11 25) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_579_find_dissimilar","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the dissimilar elements in the given two lists.\n(define (find_dissimilar test_tup1 test_tup2)\n  (let ((set1 (set test_tup1))\n        (set2 (set test_tup2)))\n    (append (set->list (set-subtract set1 set2))\n            (set->list (set-subtract set2 set1)))))\n\n;; Example usage:\n;; (find_dissimilar '(1 2 3 4 5) '(3 4 5 6 7))\n;; Expected output: '(1 2 6 7)\n```"}
{"name":"mbpp_580_extract_even","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove uneven elements in the nested mixed list.\n(define (extract_even test_tuple)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_580_extract_even.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_even))\n    (check-within (candidate (list 4 5 (list 7 6 (list 2 4)) 6 8)) (list 4 (list 6 (list 2 4)) 6 8) 0.001)\n    (check-within (candidate (list 5 6 (list 8 7 (list 4 8)) 7 9)) (list 6 (list 8 (list 4 8))) 0.001)\n    (check-within (candidate (list 5 6 (list 9 8 (list 4 6)) 8 10)) (list 6 (list 8 (list 4 6)) 8 10) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_580_extract_even","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove uneven elements in the nested mixed list.\n(define (extract_even test_tuple)\n  (cond\n    ((null? test_tuple) '()) ; If the list is empty, return an empty list\n    ((list? (car test_tuple))\n     (cons (extract_even (car test_tuple)) (extract_even (cdr test_tuple)))) ; If the first element is a list, recursively process the sublist and the rest of the list\n    ((even? (car test_tuple))\n     (cons (car test_tuple) (extract_even (cdr test_tuple)))) ; If the first element is even, include it and process the rest of the list\n    (else (extract_even (cdr test_tuple))))) ; Otherwise, skip the first element and process the rest of the list\n```\n\nExplanation:\n1. Check if the list `test_tuple` is empty. If it is, return an empty list.\n2. Check if the first element `(car test_tuple)` is a list. If it is, recursively apply `extract_even` to both the sublist and the rest of the list `(cdr test_tuple)`.\n3. Check if the first element is even using `even?`. If it is, include this element in the result and recursively process the rest of the list.\n4. If the first element is not even, skip it and recursively process the rest of the list."}
{"name":"mbpp_581_surface_Area","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the surface area of a square rktramid with a given base edge and height.\n(define (surface_Area b s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_581_surface_Area.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate surface_Area))\n    (check-within (candidate 3 4) 33 0.001)\n    (check-within (candidate 4 5) 56 0.001)\n    (check-within (candidate 1 2) 5 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_581_surface_Area","gpt_solution":"```racket\n#lang racket\n\n;; Write a Racket function to find the surface area of a square pyramid with a given base edge and height.\n(define (surface_Area b h)\n  (define base-area (* b b))\n  (define slant-height (sqrt (+ (* (\/ b 2) (\/ b 2)) (* h h))))\n  (define lateral-area (* 2 b slant-height))\n  (+ base-area lateral-area))\n\n;; Example usage\n(surface_Area 4 5)  ; This would calculate the surface area of a square pyramid with base edge 4 and height 5.\n```"}
{"name":"mbpp_583_catalan_number","language":"rkt","prompt":"#lang racket\n\n;; Write a function which returns nth catalan number.\n(define (catalan_number num)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_583_catalan_number.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate catalan_number))\n    (check-within (candidate 10) 16796 0.001)\n    (check-within (candidate 9) 4862 0.001)\n    (check-within (candidate 7) 429 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_583_catalan_number","gpt_solution":"```racket\n#lang racket\n\n;; Write a function which returns nth catalan number.\n;; The Catalan numbers are a sequence of natural numbers that occur in various counting problems,\n;; often involving recursively defined objects. They are defined by:\n;; C(0) = 1 and C(n+1) = sum(C(i) * C(n - i) for i = 0 to n)\n(define (catalan_number n)\n  (define (catalan-helper n cache)\n    (if (hash-has-key? cache n)\n        (hash-ref cache n)\n        (let ([value (if (= n 0)\n                         1\n                         (for\/fold ([sum 0]) ([i (in-range n)])\n                           (+ sum (* (catalan-helper i cache)\n                                     (catalan-helper (- n 1 i) cache)))))]\n          (hash-set! cache n value)\n          value)))\n  (catalan-helper n (make-hash)))\n\n;; Example usage:\n(catalan_number 0) ; returns 1\n(catalan_number 1) ; returns 1\n(catalan_number 2) ; returns 2\n(catalan_number 3) ; returns 5\n(catalan_number 4) ; returns 14\n(catalan_number 5) ; returns 42\n```\n\nThis code defines a function `catalan_number` to compute the nth Catalan number. It uses a helper function `catalan-helper` with caching (memoization) to improve performance by storing and reusing previously computed values. The `hash` data structure is employed to facilitate this caching."}
{"name":"mbpp_584_find_adverbs","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the first adverb ending with ly and its positions in a given string.\n(define (find_adverbs text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_584_find_adverbs.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverbs))\n    (check-within (candidate \"Clearly, he has no excuse for such behavior.\") \"0-7: Clearly\" 0.001)\n    (check-within (candidate \"Please handle the situation carefuly\") \"28-36: carefuly\" 0.001)\n    (check-within (candidate \"Complete the task quickly\") \"18-25: quickly\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_584_find_adverbs","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the first adverb ending with ly and its positions in a given string.\n(define (find_adverbs text)\n  (define (is-adverb word)\n    (and (string-suffix? word \"ly\")\n         (> (string-length word) 2))) ; Ensures \"ly\" is not the only characters in the word\n\n  (define (find-adverb-in-list words start-pos)\n    (cond\n      [(null? words) #f]\n      [(is-adverb (car words))\n       (values (car words) start-pos)]\n      [else\n       (find-adverb-in-list (cdr words) (+ start-pos 1 + (string-length (car words))))]))\n\n  ;; Split the text into words\n  (define words (regexp-split #px\"\\\\s+\" text))\n\n  ;; Call helper function to find adverb\n  (find-adverb-in-list words 0))\n\n;; Example Usage:\n(find_adverbs \"The cat runs quickly and jumps gracefully over the lazy dog.\")\n;;This should return 'quickly' and its position\n```\n\nExplanation:\n- The `is-adverb` function checks if a given word ends with \"ly\" and is longer than 2 characters.\n- The `find-adverb-in-list` function recursively searches a list of words for the first adverb and calculates the position of that adverb.\n- The `find_adverbs` function splits the input text into words and uses the helper function to find the first adverb and its position."}
{"name":"mbpp_585_expensive_items","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the n most expensive items in a given dataset.\n(define (expensive_items items n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_585_expensive_items.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate expensive_items))\n    (check-within (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))) 1) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))) 0.001)\n    (check-within (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-3\") (\"price\" .  45.09))) 2) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1))) 0.001)\n    (check-within (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-3\") (\"price\" .  45.09)) #hash((\"name\" .  \"Item-4\") (\"price\" .  22.75))) 1) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_585_expensive_items","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the n most expensive items in a given dataset.\n;; The dataset is assumed to be a list of items, where each item is \n;; represented as a list with two elements: the name of the item (a string) \n;; and the price of the item (a number).\n\n(define (expensive_items items n)\n  ;; Sort the items by price in descending order.\n  (define sorted-items \n    (sort items (lambda (a b) (> (second a) (second b)))))\n  \n  ;; Get the first n items from the sorted list.\n  (take sorted-items n))\n\n;; Example usage:\n;; (expensive_items '((\"item1\" 10) (\"item2\" 30) (\"item3\" 20) (\"item4\" 40)) 2)\n;; Expected output: '((\"item4\" 40) (\"item2\" 30))\n```"}
{"name":"mbpp_586_split_Arr","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to split a list at the nth eelment and add the first part to the end.\n(define (split_Arr l n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_586_split_Arr.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_Arr))\n    (check-within (candidate (list 12 10 5 6 52 36) 2) (list 5 6 52 36 12 10) 0.001)\n    (check-within (candidate (list 1 2 3 4) 1) (list 2 3 4 1) 0.001)\n    (check-within (candidate (list 0 1 2 3 4 5 6 7) 3) (list 3 4 5 6 7 0 1 2) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_586_split_Arr","gpt_solution":"```racket\n#lang racket\n\n;; Function to split a list at the nth element and add the first part to the end.\n(define (split_Arr l n)\n  (let ([split-point (max 0 (min n (length l)))])\n    (append (drop l split-point) (take l split-point))))\n\n;; Examples\n(split_Arr '(1 2 3 4 5) 2) ;; Returns '(3 4 5 1 2)\n(split_Arr '(a b c d e) 3) ;; Returns '(d e a b c)\n(split_Arr '(1 2 3 4 5) 5) ;; Returns '(1 2 3 4 5)\n(split_Arr '(1 2 3 4 5) 0) ;; Returns '(1 2 3 4 5)\n```"}
{"name":"mbpp_587_list_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert a list to a list.\n(define (list_tuple listx)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_587_list_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate list_tuple))\n    (check-within (candidate (list 5 10 7 4 15 3)) (list 5 10 7 4 15 3) 0.001)\n    (check-within (candidate (list 2 4 5 6 2 3 4 4 7)) (list 2 4 5 6 2 3 4 4 7) 0.001)\n    (check-within (candidate (list 58 44 56)) (list 58 44 56) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_587_list_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert a list to a list of tuples.\n;; Each consecutive pair of elements in the list should become a tuple.\n;; If the list has an odd length, the last element should be a tuple\n;; with the element and #f.\n\n(define (list_tuple listx)\n  (define (helper lst)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (rest lst)) (list (list (first lst) #f))]\n      [else (cons (list (first lst) (second lst)) (helper (rest (rest lst))))]))\n  (helper listx))\n  \n;; Example usage:\n(list_tuple '(1 2 3 4 5)) ; should return ((1 2) (3 4) (5 #f))\n(list_tuple '(a b c d e f)) ; should return ((a b) (c d) (e f))\n(list_tuple '()) ; should return ()\n(list_tuple '(x y z)) ; should return ((x y) (z #f))\n```\n\nThe `list_tuple` function outlined above converts a list into a list of tuples of successive elements. If the list has an odd number of elements, the last element will be paired with `#f`. Example usages are provided to demonstrate correctness."}
{"name":"mbpp_588_big_diff","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the difference between largest and smallest value in a given list.\n(define (big_diff nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_588_big_diff.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate big_diff))\n    (check-within (candidate (list 1 2 3 4)) 3 0.001)\n    (check-within (candidate (list 4 5 12)) 8 0.001)\n    (check-within (candidate (list 9 2 3)) 7 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_588_big_diff","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the difference between largest and smallest value in a given list.\n(define (big_diff nums)\n  (if (empty? nums)\n      (error \"The list is empty.\")\n      (- (apply max nums) (apply min nums))))\n\n;; Example usage:\n(big_diff '(10 3 5 6))  ; => 7\n(big_diff '(7 2 10 8))  ; => 8\n(big_diff '(2 10 7 4))  ; => 8\n```"}
{"name":"mbpp_589_perfect_squares","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_589_perfect_squares.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate perfect_squares))\n    (check-within (candidate 1 30) (list 1 4 9 16 25) 0.001)\n    (check-within (candidate 50 100) (list 64 81 100) 0.001)\n    (check-within (candidate 100 200) (list 100 121 144 169 196) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_589_perfect_squares","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find perfect squares between two given numbers.\n(define (perfect_squares a b)\n  (define (is-perfect-square? n)\n    (let ([sqrt-n (sqrt n)])\n      (= sqrt-n (floor sqrt-n))))\n  \n  (define start (ceiling (sqrt a)))\n  (define end (floor (sqrt b)))\n\n  (for\/list ([i (in-range start (+ end 1))])\n    (* i i)))\n```\n\nThis function `perfect_squares` takes two arguments `a` and `b`, and returns a list of perfect squares between these two numbers (inclusive). The helper function `is-perfect-square?` checks if a number is a perfect square, and we use `for\/list` to generate the list of perfect squares in the given range."}
{"name":"mbpp_591_swap_List","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to interchange the first and last elements in a list.\n(define (swap_List newList)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_591_swap_List.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate swap_List))\n    (check-within (candidate (list 12 35 9 56 24)) (list 24 35 9 56 12) 0.001)\n    (check-within (candidate (list 1 2 3)) (list 3 2 1) 0.001)\n    (check-within (candidate (list 4 5 6)) (list 6 5 4) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_591_swap_List","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to interchange the first and last elements in a list.\n(define (swap_List newList)\n  (cond\n    ;; If the list is empty or has only one element, return it as is.\n    [(or (empty? newList) (null? (cdr newList))) newList]\n    ;; Otherwise, swap the first and last elements.\n    [else \n     (let* ([first (car newList)]\n            [last (car (reverse newList))]\n            [middle (cdr (reverse (cdr (reverse (cdr newList)))))]\n            [swapped-list (cons last middle)])\n       (append swapped-list (list first)))]))\n```"}
{"name":"mbpp_592_sum_Of_product","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of the product of consecutive binomial co-efficients.\n(define (sum_Of_product n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_592_sum_Of_product.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_Of_product))\n    (check-within (candidate 3) 15 0.001)\n    (check-within (candidate 4) 56 0.001)\n    (check-within (candidate 1) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_592_sum_Of_product","gpt_solution":"Sure! Below is the completed Racket code wrapped in markdown syntax:\n\n```racket\n#lang racket\n\n;; Write a Racket function to find the sum of the product of consecutive binomial coefficients.\n(define (factorial n)\n  (if (zero? n)\n      1\n      (* n (factorial (- n 1)))))\n\n(define (binomial-coefficient n k)\n  (\/ (factorial n) (* (factorial k) (factorial (- n k)))))\n\n(define (sum-of-product n)\n  (define (sum-helper k acc)\n    (if (>= k n)\n        acc\n        (sum-helper (+ k 1) (+ acc (* (binomial-coefficient n k) \n                                      (binomial-coefficient n (+ k 1)))))))\n  (sum-helper 0 0))\n\n;; Example usage\n(sum-of-product 5)\n```\n\nThis code defines a function `sum-of-product` that takes an integer `n` and calculates the sum of the product of consecutive binomial coefficients for that `n`. For example, if `n` is 5, it calculates the sum of the products of binomial coefficients of (5, 0) * (5, 1), (5, 1) * (5, 2), and so on up to (5, 4) * (5, 5)."}
{"name":"mbpp_593_removezero_ip","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove leading zeroes from an ip address.\n(define (removezero_ip ip)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_593_removezero_ip.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate removezero_ip))\n    (check-within (candidate \"216.08.094.196\") \"216.8.94.196\" 0.001)\n    (check-within (candidate \"12.01.024\") \"12.1.24\" 0.001)\n    (check-within (candidate \"216.08.094.0196\") \"216.8.94.196\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_593_removezero_ip","gpt_solution":"```racket\n#lang racket\n\n;; A function to remove leading zeroes from an IP address.\n(define (removezero_ip ip)\n  ;; Helper function to handle each section of the IP address\n  (define (remove-leading-zeroes segment)\n    (number->string (string->number segment)))\n  \n  (define segments (string-split ip \".\"))\n  (define cleaned-segments (map remove-leading-zeroes segments))\n  (string-join cleaned-segments \".\"))\n\n;; Example usage:\n(removezero_ip \"192.168.001.001\") ;; => \"192.168.1.1\"\n(removezero_ip \"010.000.000.007\") ;; => \"10.0.0.7\"\n```"}
{"name":"mbpp_594_diff_even_odd","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the difference of the first even and first odd number of a given list.\n(define (diff_even_odd list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_594_diff_even_odd.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate diff_even_odd))\n    (check-within (candidate (list 1 3 5 7 4 1 6 8)) 3 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) 1 0.001)\n    (check-within (candidate (list 1 5 7 9 10)) 9 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_594_diff_even_odd","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the difference of the first even and first odd number of a given list.\n(define (diff_even_odd list1)\n  (define (find-first-even lst)\n    (cond\n      [(empty? lst) #f]\n      [(even? (first lst)) (first lst)]\n      [else (find-first-even (rest lst))]))\n  \n  (define (find-first-odd lst)\n    (cond\n      [(empty? lst) #f]\n      [(odd? (first lst)) (first lst)]\n      [else (find-first-odd (rest lst))]))\n\n  (let ([first-even (find-first-even list1)]\n        [first-odd (find-first-odd list1)])\n    (if (and first-even first-odd)\n        (- first-even first-odd)\n        #f)))\n```"}
{"name":"mbpp_595_min_Swaps","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n(define (min_Swaps str1 str2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_595_min_Swaps.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_Swaps))\n    (check-within (candidate \"1101\" \"1110\") 1 0.001)\n    (check-within (candidate \"111\" \"000\") \"Not Possible\" 0.001)\n    (check-within (candidate \"111\" \"110\") \"Not Possible\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_595_min_Swaps","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n(define (min_Swaps str1 str2)\n  (define len (string-length str1))\n  (define (count-differences s1 s2)\n    (foldl (lambda (i acc)\n             (if (char=? (string-ref s1 i) (string-ref s2 i))\n                 acc\n                 (+ acc 1)))\n           0\n           (range len)))\n\n  ;; Count the occurrences of '0' and '1' in the strings\n  (define str1-0 (count-occurrences #\\0 str1))\n  (define str1-1 (count-occurrences #\\1 str1))\n  (define str2-0 (count-occurrences #\\0 str2))\n  (define str2-1 (count-occurrences #\\1 str2))\n  \n  (define (count-occurrences char str)\n    (let loop ([i 0] [count 0])\n      (if (>= i len)\n          count\n          (loop (+ i 1) (if (char=? char (string-ref str i)) (+ count 1) count)))))\n\n  ;; If the count of '0's and '1's do not match in both strings, it is impossible to convert\n  (if (not (and (= str1-0 str2-0) (= str1-1 str2-1)))\n      (error \"Conversion is impossible as the counts of 0's and 1's do not match.\")\n      ;; Calculate minimum swaps\n      (\/ (count-differences str1 str2) 2)))\n\n;; Test cases\n(min_Swaps \"1100\" \"1001\") ;; => 1\n(min_Swaps \"110011\" \"001101\") ;; => 2\n(min_Swaps \"111\" \"000\") ;; => Error\n```"}
{"name":"mbpp_597_find_kth","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find kth element from the given two sorted lists.\n(define (find_kth arr1 arr2 k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_597_find_kth.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_kth))\n    (check-within (candidate (list 2 3 6 7 9) (list 1 4 8 10) 5) 6 0.001)\n    (check-within (candidate (list 100 112 256 349 770) (list 72 86 113 119 265 445 892) 7) 256 0.001)\n    (check-within (candidate (list 3 4 7 8 10) (list 2 5 9 11) 6) 8 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_597_find_kth","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find kth element from the given two sorted lists.\n(define (find_kth arr1 arr2 k)\n  (define (find-k-helper lst1 lst2 k count)\n    (cond\n      ((null? lst1) (list-ref lst2 (- k count 1)))\n      ((null? lst2) (list-ref lst1 (- k count 1)))\n      ((= count k) (if (< (car lst1) (car lst2)) \n                         (car lst1)\n                         (car lst2)))\n      ((< (car lst1) (car lst2))\n       (find-k-helper (cdr lst1) lst2 k (+ count 1)))\n      (else\n       (find-k-helper lst1 (cdr lst2) k (+ count 1)))))\n\n  (find-k-helper arr1 arr2 k 0))\n\n;; Example usage\n(define arr1 '(1 3 5 7))\n(define arr2 '(2 4 6 8))\n(find_kth arr1 arr2 5) ; returns 5\n```"}
{"name":"mbpp_598_armstrong_number","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_598_armstrong_number.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate armstrong_number))\n    (check-within (candidate 153) #t 0.001)\n    (check-within (candidate 259) #f 0.001)\n    (check-within (candidate 4458) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_598_armstrong_number","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the given number is armstrong or not.\n(define (armstrong_number number)\n  (let* ((digits (map (\u03bb (c) (- (char->integer c) (char->integer #\\0)))\n                      (string->list (number->string number))))\n         (num-digits (length digits))\n         (sum (apply + (map (\u03bb (d) (expt d num-digits)) digits))))\n    (= sum number)))\n\n;; Examples to test the function\n(displayln (armstrong_number 153))  ; #t, because 1^3 + 5^3 + 3^3 = 153\n(displayln (armstrong_number 9474)) ; #t, because 9^4 + 4^4 + 7^4 + 4^4 = 9474\n(displayln (armstrong_number 123))) ; #f, because 1^3 + 2^3 + 3^3 = 36\n```"}
{"name":"mbpp_599_sum_average","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find sum and average of first n natural numbers.\n(define (sum_average number)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_599_sum_average.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_average))\n    (check-within (candidate 10) (list 55 5.5) 0.001)\n    (check-within (candidate 15) (list 120 8.0) 0.001)\n    (check-within (candidate 20) (list 210 10.5) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_599_sum_average","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find sum and average of first n natural numbers.\n(define (sum_average number)\n  (define sum (* number (+ number 1) 1\/2))\n  (define average (\/ sum number))\n  (list sum average))\n\n;; Example usage:\n(sum_average 10)  ; (55 5.5)\n(sum_average 5)   ; (15 3.0)\n```"}
{"name":"mbpp_600_is_Even","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the given number is even or not.\n(define (is_Even n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_600_is_Even.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Even))\n    (check-within (candidate 1) #f 0.001)\n    (check-within (candidate 2) #t 0.001)\n    (check-within (candidate 3) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_600_is_Even","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether the given number is even or not.\n(define (is_Even n)\n  (zero? (modulo n 2)))\n\n;; Tests\n(is_Even 4) ; should return #t\n(is_Even 7) ; should return #f\n```"}
{"name":"mbpp_602_first_repeated_char","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the first repeated character in a given string.\n(define (first_repeated_char str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_602_first_repeated_char.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_repeated_char))\n    (check-within (candidate \"abcabc\") \"a\" 0.001)\n    (check-within (candidate \"abc\") #f 0.001)\n    (check-within (candidate \"123123\") \"1\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_602_first_repeated_char","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the first repeated character in a given string\n(define (first_repeated_char str1)\n  (define (helper str1 seen-chars)\n    (cond\n      [(empty? str1) #f]\n      [(set-member? seen-chars (first str1)) (first str1)]\n      [else (helper (rest str1) (set-add seen-chars (first str1)))]))\n  (helper (string->list str1) (make-hasheq)))\n\n;; Example usage\n(first_repeated_char \"racket\") ; try with different examples\n```\n\nExplanation:\n- The `first_repeated_char` function takes a single argument, `str1`, which is the string to be checked.\n- The `helper` function is defined as an inner function to recursively check characters.\n- `seen-chars` is a set used to store characters that have already been encountered.\n- The `string->list` function converts the input string into a list of characters for easier processing.\n- The `helper` function checks if the first character of the string is already in `seen-chars`. If it is, that character is the first repeated character, and it's returned.\n- If not, that character is added to `seen-chars`, and the function continues to check the rest of the string.\n- If no repeated characters are found and the input string is exhausted, `#f` is returned, indicating no repetition.\n\nYou can test the function by calling it with strings like `\"racket\"`, `\"bubbles\"`, or `\"abcdef\"` to see how it behaves with different inputs."}
{"name":"mbpp_603_get_ludic","language":"rkt","prompt":"#lang racket\n\n;; Write a function to get all lucid numbers smaller than or equal to a given integer.\n(define (get_ludic n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_603_get_ludic.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_ludic))\n    (check-within (candidate 10) (list 1 2 3 5 7) 0.001)\n    (check-within (candidate 25) (list 1 2 3 5 7 11 13 17 23 25) 0.001)\n    (check-within (candidate 45) (list 1 2 3 5 7 11 13 17 23 25 29 37 41 43) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_603_get_ludic","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to get all lucid numbers smaller than or equal to a given integer.\n\n(define (get-ludic n)\n  (define (sieve lst count)\n    (if (or (null? lst) (> count n))\n        (reverse lst)\n        (let ((filtered (filter (lambda (x) (not (= (modulo x count) 0))) (cdr lst))))\n          (sieve (cons (car lst) filtered) (add1 count)))))\n  (sieve (list 1 2) 3))\n\n;; Example usage:\n(get-ludic 100) ; Returns all ludic numbers <= 100\n```\n\nExplanation:\n\n1. The function `get-ludic` is defined to take an integer `n` and will return all ludic numbers less than or equal to `n`.\n2. Inside `get-ludic`, the helper function `sieve` is defined. It filters the list `lst` by removing every `count`th element, simulating the elimination process of lucic numbers.\n3. `sieve` is recursively called with an updated list and incremented count until the end of the list or the count exceeds `n`.\n4. The initial call to `sieve` starts with the list `(list 1 2)` which are the first two ludic numbers and a count of `3` because the next step eliminates every 3rd position.\n5. Example usage demonstrates how to call `get-ludic` with 100 to get all ludic numbers less than or equal to 100.\n```"}
{"name":"mbpp_604_reverse_words","language":"rkt","prompt":"#lang racket\n\n;; Write a function to reverse words seperated by spaces in a given string.\n(define (reverse_words s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_604_reverse_words.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_words))\n    (check-within (candidate \"python program\") \"program python\" 0.001)\n    (check-within (candidate \"java language\") \"language java\" 0.001)\n    (check-within (candidate \"indian man\") \"man indian\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_604_reverse_words","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to reverse words separated by spaces in a given string.\n(define (reverse_words s)\n  (string-join (reverse (string-split s)) \" \"))\n\n;; Example usage:\n(reverse_words \"hello world\")\n;; Output: \"world hello\"\n```"}
{"name":"mbpp_605_prime_num","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if the given integer is a prime number.\n(define (prime_num num)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_605_prime_num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_num))\n    (check-within (candidate 13) #t 0.001)\n    (check-within (candidate 7) #t 0.001)\n    (check-within (candidate -1010) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_605_prime_num","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if the given integer is a prime number.\n(define (prime_num num)\n  (define (is-divisible-by? n divisor)\n    (= (remainder n divisor) 0))\n  \n  (define (check-divisors n divisor)\n    (cond\n      ((= divisor 1) #t)\n      ((is-divisible-by? n divisor) #f)\n      (else (check-divisors n (- divisor 1)))))\n  \n  (cond\n    ((<= num 1) #f)\n    ((= num 2) #t)\n    (else (check-divisors num (sqrt num)))))\n\n;; Examples\n(prime_num 1)  ; => #f\n(prime_num 2)  ; => #t\n(prime_num 3)  ; => #t\n(prime_num 4)  ; => #f\n(prime_num 17) ; => #t\n(prime_num 18) ; => #f\n```"}
{"name":"mbpp_606_radian_degree","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_606_radian_degree.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-within (candidate 90) 1.5707963267948966 0.001)\n    (check-within (candidate 60) 1.0471975511965976 0.001)\n    (check-within (candidate 120) 2.0943951023931953 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_606_radian_degree","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (degree->radian degree)\n  (* degree (\/ pi 180)))\n```\n\nThis function `degree->radian` takes an input `degree` and converts it to radians by multiplying the degree by \u03c0\/180."}
{"name":"mbpp_607_find_literals","language":"rkt","prompt":"#lang racket\n\n;; Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n(define (find_literals text pattern)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_607_find_literals.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_literals))\n    (check-within (candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") (list \"fox\" 16 19) 0.001)\n    (check-within (candidate \"Its been a very crazy procedure right\" \"crazy\") (list \"crazy\" 16 21) 0.001)\n    (check-within (candidate \"Hardest choices required strongest will\" \"will\") (list \"will\" 35 39) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_607_find_literals","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n(define (find_literals text pattern)\n  (define matches (regexp-match-positions (regexp pattern) text))\n  (if (empty? matches)\n      (values #f -1 -1)\n      (let* ([match (car matches)]\n             [start (car match)]\n             [end (cdr match)]\n             [substring (substring text start end)])\n        (values substring start end))))\n```\n\nIn this Racket function `find_literals`, the `regexp-match-positions` function is used to find the match positions of the regex pattern in the given text. If no matches are found, it returns `#f` and indices `-1`. If there is a match, it extracts and returns the substring along with its start and end indices."}
{"name":"mbpp_608_bell_Number","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find nth bell number.\n(define (bell_Number n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_608_bell_Number.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate bell_Number))\n    (check-within (candidate 2) 2 0.001)\n    (check-within (candidate 3) 5 0.001)\n    (check-within (candidate 4) 15 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_608_bell_Number","gpt_solution":"```racket\n#lang racket\n\n;; Function to find nth Bell number\n(define (bell-number n)\n  (define (bell-helper n)\n    ;; Initialize a 2D array to store Bell Triangle\n    (define bell-triangle (make-vector (add1 n) '()))\n\n    ;; Initialize the first Bell number\n    (vector-set! bell-triangle 0 (vector 1))\n\n    ;; Fill the Bell Triangle\n    (for ([i (in-range 1 (add1 n))])\n      (vector-set! bell-triangle i (make-vector (add1 i)))\n      (vector-set! (vector-ref bell-triangle i) 0 (vector-ref (vector-ref bell-triangle (sub1 i)) (sub1 i)))\n      (for ([j (in-range 1 (add1 i))])\n        (vector-set! (vector-ref bell-triangle i) j     \n                     (+ (vector-ref (vector-ref bell-triangle i) (sub1 j)) \n                        (vector-ref (vector-ref bell-triangle (sub1 i)) (sub1 j))))))\n\n    ;; The nth Bell number is to be found in the last value in the nth row of the Bell Triangle\n    (vector-ref (vector-ref bell-triangle n) n))\n\n  ;; Guard against non-positive n\n  (if (<= n 0)\n      (error \"The input must be a positive integer\")\n      (bell-helper n)))\n```\n\nThis code defines the function `bell-number` which computes the nth Bell number using a dynamic programming approach with Bell Triangle. It wraps the logic to build the triangle inside a helper function. The `bell-number` function also includes a simple guard clause against non-positive inputs."}
{"name":"mbpp_610_remove_kth_element","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function which takes a list and returns a list with the same elements, but the k'th element removed.\n(define (remove_kth_element list1 L)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_610_remove_kth_element.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_kth_element))\n    (check-within (candidate (list 1 1 2 3 4 4 5 1) 3) (list 1 1 3 4 4 5 1) 0.001)\n    (check-within (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4) 4) (list 0 0 1 3 4 4 5 6 6 6 7 8 9 4 4) 0.001)\n    (check-within (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10) 5) (list 10 10 15 19 18 17 26 26 17 18 10) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_610_remove_kth_element","gpt_solution":"```racket\n#lang racket\n\n;; Write a function which takes a list and an index k,\n;; and returns a list with the same elements, but the k'th element removed.\n(define (remove-kth-element lst k)\n  (define (helper lst k current-index)\n    (cond\n      [(empty? lst) '()]  ; If the list is empty, return an empty list\n      [(= k current-index) (rest lst)]  ; If the current index is k, skip this element\n      [else (cons (first lst) (helper (rest lst) k (add1 current-index)))]))  ; Otherwise, keep the element and proceed\n  (helper lst k 0))\n```\n\nThis code defines a `remove-kth-element` function in Racket which takes a list and an index `k`, and returns a new list with the `k`th element removed. The `helper` function is used to keep track of the current index as the list is traversed."}
{"name":"mbpp_611_max_of_nth","language":"rkt","prompt":"#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_611_max_of_nth.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-within (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19 0.001)\n    (check-within (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10 0.001)\n    (check-within (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_611_max_of_nth","gpt_solution":"```racket\n#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (define (nth-column matrix n)\n    (map (lambda (row) (list-ref row n)) matrix))\n  \n  (define column-elements (nth-column test_list N))\n  (apply max column-elements))\n\n;; Example usage:\n(define test-matrix '((1 2 3)\n                      (4 5 6)\n                      (7 8 9)))\n\n(max_of_nth test-matrix 1)  ;; Should return 8\n(max_of_nth test-matrix 2)  ;; Should return 9\n```"}
{"name":"mbpp_612_merge","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n(define (merge lst)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_612_merge.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate merge))\n    (check-within (candidate (list (list \"x\" \"y\") (list \"a\" \"b\") (list \"m\" \"n\"))) (list (list \"x\" \"a\" \"m\") (list \"y\" \"b\" \"n\")) 0.001)\n    (check-within (candidate (list (list 1 2) (list 3 4) (list 5 6) (list 7 8))) (list (list 1 3 5 7) (list 2 4 6 8)) 0.001)\n    (check-within (candidate (list (list \"x\" \"y\" \"z\") (list \"a\" \"b\" \"c\") (list \"m\" \"n\" \"o\"))) (list (list \"x\" \"a\" \"m\") (list \"y\" \"b\" \"n\") (list \"z\" \"c\" \"o\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_612_merge","gpt_solution":"```racket\n#lang racket\n\n;; The merge function takes a list of lists, each sublist containing two elements.\n;; It returns a list of two lists:\n;; - The first list contains the first elements of each input sublist.\n;; - The second list contains the second elements of each input sublist.\n(define (merge lst)\n  (define-values (first-elements second-elements)\n    (for\/fold ([fs '()] [ss '()]) ([sub lst])\n      (values (cons (first sub) fs) (cons (second sub) ss))))\n  (list (reverse first-elements) (reverse second-elements)))\n\n;; Example usage\n(merge '((1 2) (3 4) (5 6)))\n;; Output: '((1 3 5) (2 4 6))\n```"}
{"name":"mbpp_614_cummulative_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n(define (cummulative_sum test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_614_cummulative_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cummulative_sum))\n    (check-within (candidate (list (list 1 3) (list 5 6 7) (list 2 6))) 30 0.001)\n    (check-within (candidate (list (list 2 4) (list 6 7 8) (list 3 7))) 37 0.001)\n    (check-within (candidate (list (list 3 5) (list 7 8 9) (list 4 8))) 44 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_614_cummulative_sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n(define (cumulative-sum test-list)\n  (define (sum-list lst)\n    (foldl + 0 lst))\n  (sum-list (apply append test-list)))\n\n;; Example usage:\n;; (cumulative-sum '((1 2 3) (4 5 6) (7 8 9))) \n;; returns 45\n```"}
{"name":"mbpp_615_average_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n(define (average_tuple nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_615_average_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-within (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25) 0.001)\n    (check-within (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75) 0.001)\n    (check-within (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_615_average_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each sublist as a list.\n(define (average_tuple list-of-lists)\n  (define (average lst)\n    (if (null? lst)\n        0\n        (\/ (apply + lst) (length lst))))\n  (map average list-of-lists))\n\n;; Example usage:\n;; (average_tuple '((1 2 3) (4 5 6) (7 8 9))) ; returns (2 5 8)\n```"}
{"name":"mbpp_616_tuple_modulo","language":"rkt","prompt":"#lang racket\n\n;; Write a function which takes two lists of the same length and performs the element wise modulo.\n(define (tuple_modulo test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_616_tuple_modulo.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_modulo))\n    (check-within (candidate (list 10 4 5 6) (list 5 6 7 5)) (list 0 4 5 1) 0.001)\n    (check-within (candidate (list 11 5 6 7) (list 6 7 8 6)) (list 5 5 6 1) 0.001)\n    (check-within (candidate (list 12 6 7 8) (list 7 8 9 7)) (list 5 6 7 1) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_616_tuple_modulo","gpt_solution":"```racket\n#lang racket\n\n;; Write a function which takes two lists of the same length and performs the element-wise modulo.\n(define (tuple_modulo test_tup1 test_tup2)\n  (if (empty? test_tup1)\n      '()\n      (cons (modulo (first test_tup1) (first test_tup2))\n            (tuple_modulo (rest test_tup1) (rest test_tup2)))))\n\n;; Example usage:\n(tuple_modulo '(10 20 30) '(3 4 5))\n;; Expected output: '(1 0 0)\n```"}
{"name":"mbpp_617_min_Jumps","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n(define (min_Jumps steps d)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_617_min_Jumps.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_Jumps))\n    (check-within (candidate (list 3 4) 11) 3.5 0.001)\n    (check-within (candidate (list 3 4) 0) 0 0.001)\n    (check-within (candidate (list 11 14) 11) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_617_min_Jumps","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n(define (min_Jumps steps d)\n  (define (aux steps d count)\n    (let ([distance (* steps count)])\n      (cond\n        [(= distance d) count]\n        [(> distance d) count]\n        [else (aux steps d (+ count 1))])))\n  (aux steps d 0))\n\n;; Example usage:\n;; (min_Jumps 3 9) ; Should return 3 as 3 jumps of length 3 are required to reach (9, 0) from the origin\n;; (min_Jumps 5 10) ; Should return 2 as 2 jumps of length 5 are required to reach (10, 0) from the origin\n```"}
{"name":"mbpp_618_div_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function to divide two lists element wise.\n(define (div_list nums1 nums2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_618_div_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate div_list))\n    (check-within (candidate (list 4 5 6) (list 1 2 3)) (list 4.0 2.5 2.0) 0.001)\n    (check-within (candidate (list 3 2) (list 1 4)) (list 3.0 0.5) 0.001)\n    (check-within (candidate (list 90 120) (list 50 70)) (list 1.8 1.7142857142857142) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_618_div_list","gpt_solution":"```racket\n#lang racket\n\n;; Function to divide two lists element wise.\n;; It takes two lists, nums1 and nums2, and returns a new list where each element is\n;; the result of dividing the corresponding elements from nums1 by nums2.\n;; Assumes that both lists are of the same length and nums2 does not contain zeros.\n(define (div_list nums1 nums2)\n  (map \/ nums1 nums2))\n\n;; Example usage:\n(define list1 '(10 20 30))\n(define list2 '(2 4 5))\n(display (div_list list1 list2)) ; Output: '(5 5 6)\n```"}
{"name":"mbpp_619_move_num","language":"rkt","prompt":"#lang racket\n\n;; Write a function to move all the numbers to the end of the given string.\n(define (move_num test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_619_move_num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_num))\n    (check-within (candidate \"I1love143you55three3000thousand\") \"Iloveyouthreethousand1143553000\" 0.001)\n    (check-within (candidate \"Avengers124Assemble\") \"AvengersAssemble124\" 0.001)\n    (check-within (candidate \"Its11our12path13to14see15things16do17things\") \"Itsourpathtoseethingsdothings11121314151617\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_619_move_num","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to move all the numbers to the end of the given string.\n(define (move_num test_str)\n  (define (split-chars str)\n    (let loop ([chars (string->list str)]\n               [non-digits '()]\n               [digits '()])\n      (cond\n        [(null? chars)\n         (list (reverse non-digits) (reverse digits))]\n        [(char-numeric? (first chars))\n         (loop (rest chars) non-digits (cons (first chars) digits))]\n        [else\n         (loop (rest chars) (cons (first chars) non-digits) digits)])))\n  (define results (split-chars test_str))\n  (string-append (list->string (first results))\n                 (list->string (second results))))\n\n;; Example usage\n(move_num \"ab3c4d2e1\") ;; Returns \"abcde3421\"\n```"}
{"name":"mbpp_622_get_median","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the median of two sorted lists of same size.\n(define (get_median arr1 arr2 n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_622_get_median.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_median))\n    (check-within (candidate (list 1 12 15 26 38) (list 2 13 17 30 45) 5) 16.0 0.001)\n    (check-within (candidate (list 2 4 8 9) (list 7 13 19 28) 4) 8.5 0.001)\n    (check-within (candidate (list 3 6 14 23 36 42) (list 2 18 27 39 49 55) 6) 25.0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_622_get_median","gpt_solution":"Sure, here is the completed Racket function to find the median of two sorted lists of the same size:\n\n```racket\n#lang racket\n\n;; Function to find median of two sorted lists of the same size\n(define (get_median arr1 arr2 n)\n  (let loop ([start1 0] [end1 n] [start2 0] [end2 n])\n    (if (= (abs (- start1 end1)) 1)\n        (let ([max-left (max (list-ref arr1 (min start1 end1)) (list-ref arr2 (min start2 end2)))]\n              [min-right (min (list-ref arr1 (max start1 end1)) (list-ref arr2 (max start2 end2)))])\n          (\/ (+ max-left min-right) 2))\n        (let* ([mid1 (+ start1 (quotient (- end1 start1) 2))]\n               [mid2 (+ start2 (quotient (- end2 start2) 2))]\n               [med1 (list-ref arr1 mid1)]\n               [med2 (list-ref arr2 mid2)])\n          (cond\n            [(= med1 med2) med1]\n            [(< med1 med2) (loop mid1 end1 start2 mid2)]\n            [else (loop start1 mid1 mid2 end2)])))))\n\n;; Usage example:\n(define arr1 (list 1 3 5))\n(define arr2 (list 2 4 6))\n(get_median arr1 arr2 (length arr1)) ;; Expected output: 3.5\n```\n\nThis code defines a function `get_median` that takes two sorted lists `arr1` and `arr2` of the same size `n`, and computes the median of the combined sorted lists. The function uses a recursive approach with binary search to find the median in O(log n) time."}
{"name":"mbpp_623_nth_nums","language":"rkt","prompt":"#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_623_nth_nums.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate nth_nums))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 1 4 9 16 25 36 49 64 81 100) 0.001)\n    (check-within (candidate (list 10 20 30) 3) (list 1000 8000 27000) 0.001)\n    (check-within (candidate (list 12 15) 5) (list 248832 759375) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_623_nth_nums","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to compute the n-th power of each number in a list.\n(define (nth_nums nums n)\n  (map (lambda (x) (expt x n)) nums))\n  \n;; Example usage:\n;; (nth_nums '(1 2 3 4) 2) -> '(1 4 9 16)\n;; (nth_nums '(1 2 3 4) 3) -> '(1 8 27 64)\n```\n\nThis function `nth_nums` takes two arguments, `nums` (a list of numbers) and `n` (the exponent), and returns a new list where each element from the original list has been raised to the power of `n`. It uses the `map` function to apply the power operation (`expt`) to each element in the list.\n"}
{"name":"mbpp_624_is_upper","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to convert a given string to uppercase.\n(define (is_upper string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_624_is_upper.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_upper))\n    (check-within (candidate \"person\") \"PERSON\" 0.001)\n    (check-within (candidate \"final\") \"FINAL\" 0.001)\n    (check-within (candidate \"Valid\") \"VALID\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_624_is_upper","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert a given string to uppercase.\n(define (string-to-upper str)\n  (string-upcase str))\n\n;; Example usage:\n(string-to-upper \"hello, world\") ; => \"HELLO, WORLD\"\n```"}
{"name":"mbpp_625_swap_List","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to interchange the first and last element in a given list.\n(define (swap_List newList)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_625_swap_List.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate swap_List))\n    (check-within (candidate (list 1 2 3)) (list 3 2 1) 0.001)\n    (check-within (candidate (list 1 2 3 4 4)) (list 4 2 3 4 1) 0.001)\n    (check-within (candidate (list 4 5 6)) (list 6 5 4) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_625_swap_List","gpt_solution":"```racket\n#lang racket\n\n;; Function to interchange the first and last elements in a given list.\n(define (swap_List newList)\n  (cond\n    [(null? newList) newList] ; if the list is empty, return the empty list.\n    [(null? (cdr newList)) newList] ; if the list has only one element, return the list as is.\n    [else\n     (let* ([first (car newList)]\n            [rest (cdr newList)]\n            [last (car (reverse rest))]\n            [middle (reverse (cdr (reverse rest)))])\n       (cons last (append middle (list first))))]))\n\n;; Example usage:\n(swap_List '(1 2 3 4 5)) ; Output: '(5 2 3 4 1)\n```\n\nThis code defines a function `swap_List` that interchanges the first and last elements of a given list. It handles the cases where the list is empty or contains only one element, returning it unchanged. In other cases, it extracts the first and last elements, constructs the middle sublist, and then recombines them to form the final list."}
{"name":"mbpp_626_triangle_area","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n(define (triangle_area r)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_626_triangle_area.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n    (check-within (candidate -1) #f 0.001)\n    (check-within (candidate 0) 0 0.001)\n    (check-within (candidate 2) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_626_triangle_area","gpt_solution":"```racket\n#lang racket\n\n;; This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n(define (triangle_area r)\n  (let* (\n         ;; The largest triangle that can be inscribed in a semicircle is a right-angled triangle\n         ;; with the hypotenuse as the diameter of the semicircle.\n         ;; For a semicircle of radius r, its diameter is 2*r.\n         (diameter (* 2 r))\n         ;; The two other sides of the triangle are r (each being the radius).\n         ;; The area of a right triangle is given by (base * height) \/ 2\n         ;; Here, base and height both are r.\n         (area (\/ (* r r) 2)))\n    area))\n\n;; Example usage:\n(triangle_area 5) ;; Should return 12.5\n```"}
{"name":"mbpp_627_find_First_Missing","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the smallest missing number from a sorted list of natural numbers.\n(define (find_First_Missing array)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_627_find_First_Missing.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_First_Missing))\n    (check-within (candidate (list 0 1 2 3)) 4 0.001)\n    (check-within (candidate (list 0 1 2 6 9)) 3 0.001)\n    (check-within (candidate (list 2 3 5 8 9)) 0 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_627_find_First_Missing","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the smallest missing number from a sorted list of natural numbers.\n(define (find-First-Missing array)\n  (define (helper arr start end)\n    (if (>= start end)\n        end\n        (let ([mid (quotient (+ start end) 2)])\n          (if (= (list-ref arr mid) mid)\n              (helper arr (+ mid 1) end)\n              (helper arr start mid)))))\n  (helper array 0 (length array)))\n\n;; Example usage:\n(find-First-Missing (list 0 1 2 6 7 9)) ;; should return 3\n(find-First-Missing (list 1 2 3 4 5 6 7)) ;; should return 0\n(find-First-Missing (list 0 1 2 3 4 5 6 7)) ;; should return 8\n```"}
{"name":"mbpp_628_replace_spaces","language":"rkt","prompt":"#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_628_replace_spaces.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-within (candidate \"My Name is Dawood\") \"My%20Name%20is%20Dawood\" 0.001)\n    (check-within (candidate \"I am a Programmer\") \"I%20am%20a%20Programmer\" 0.001)\n    (check-within (candidate \"I love Coding\") \"I%20love%20Coding\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_628_replace_spaces","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to replace all spaces in the given string with '%20'.\n(define (replace_spaces string)\n  (define (replace-spaces-helper lst)\n    (cond\n      [(empty? lst) '()]\n      [(equal? (first lst) #\\ ) (append (list #\\% #\\2 #\\0) (replace-spaces-helper (rest lst)))]\n      [else (cons (first lst) (replace-spaces-helper (rest lst)))]))\n\n  (list->string (replace-spaces-helper (string->list string))))\n```\n\nExplanation:\n- The function `replace_spaces` takes a string as input.\n- `replace-spaces-helper` is a helper function that works with a list of characters.\n- If the first character is a space (`#\\ `), it replaces it with the characters `#\\%`, `#\\2`, and `#\\0` and then recursively calls itself for the rest of the list.\n- If the first character is not a space, it keeps the character and continues processing the rest of the list.\n- Finally, the result of `replace-spaces-helper` is converted back to a string using `list->string`."}
{"name":"mbpp_629_Split","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find even numbers from a list of numbers.\n(define (Split list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_629_Split.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-within (candidate (list 1 2 3 4 5)) (list 2 4) 0.001)\n    (check-within (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0) 0.001)\n    (check-within (candidate (list 8 12 15 19)) (list 8 12) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_629_Split","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find even numbers from a list of numbers.\n(define (Split list)\n  (filter even? list))\n\n;; Example usage:\n(Split '(1 2 3 4 5 6 7 8 9 10))\n;; Output: '(2 4 6 8 10)\n```\nThis code defines a Racket function `Split` that takes a list of numbers as input and returns a list containing only the even numbers from the input list. The function uses the `filter` procedure along with the `even?` predicate to achieve this. The example usage shows how the function can be called and the expected output."}
{"name":"mbpp_630_get_coordinates","language":"rkt","prompt":"#lang racket\n\n;; Write a function to extract all the adjacent coordinates of the given coordinate list.\n(define (get_coordinates test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_630_get_coordinates.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_coordinates))\n    (check-within (candidate (list 3 4)) (list (list 2 3) (list 2 4) (list 2 5) (list 3 3) (list 3 4) (list 3 5) (list 4 3) (list 4 4) (list 4 5)) 0.001)\n    (check-within (candidate (list 4 5)) (list (list 3 4) (list 3 5) (list 3 6) (list 4 4) (list 4 5) (list 4 6) (list 5 4) (list 5 5) (list 5 6)) 0.001)\n    (check-within (candidate (list 5 6)) (list (list 4 5) (list 4 6) (list 4 7) (list 5 5) (list 5 6) (list 5 7) (list 6 5) (list 6 6) (list 6 7)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_630_get_coordinates","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to extract all the adjacent coordinates of the given coordinate list.\n(define (get_coordinates test_tup)\n  (define (adjacent-coordinates coord)\n    (match-define (list x y) coord)\n    (list (list (- x 1) y)\n          (list (+ x 1) y)\n          (list x (- y 1))\n          (list x (+ y 1))))\n\n  (define (flatten lst)\n    (if (null? lst)\n        '()\n        (append (car lst) (flatten (cdr lst)))))\n\n  (define (unique lst seen)\n    (cond\n      [(empty? lst) empty]\n      [(member (first lst) seen) (unique (rest lst) seen)]\n      [else (cons (first lst) (unique (rest lst) (cons (first lst) seen)))]))\n\n  (unique (flatten (map adjacent-coordinates test_tup)) '()))\n\n;; Example usage:\n(get_coordinates '((0 0) (1 1)))\n;; Expected output: '((0 1) (0 -1) (-1 0) (1 0) (1 2) (1 0) (0 1) (2 1))\n\n(get_coordinates '((2 3) (3 4)))\n;; Expected output: '((1 3) (3 3) (2 2) (2 4) (2 5) (4 4) (3 3) (3 5))\n\n;; Note: The order of coordinates may vary.\n```"}
{"name":"mbpp_631_replace_spaces","language":"rkt","prompt":"#lang racket\n\n;; Write a function to replace whitespaces with an underscore and vice versa in a given string.\n(define (replace_spaces text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_631_replace_spaces.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_spaces))\n    (check-within (candidate \"Jumanji The Jungle\") \"Jumanji_The_Jungle\" 0.001)\n    (check-within (candidate \"The_Avengers\") \"The Avengers\" 0.001)\n    (check-within (candidate \"Fast and Furious\") \"Fast_and_Furious\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_631_replace_spaces","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to replace whitespaces with an underscore and vice versa in a given string.\n(define (replace_spaces text)\n  (define (replace-char char)\n    (cond\n      [(char=? char #\\space) #\\_]\n      [(char=? char #\\_) #\\space]\n      [else char]))\n  (list->string (map replace-char (string->list text))))\n```\n\nThis code defines a function `replace_spaces` which takes a string `text` as input and replaces whitespace characters with underscores and vice versa. The inner function `replace-char` is used to perform the character substitution. The text is converted to a list of characters, mapped through `replace-char`, and then converted back to a string."}
{"name":"mbpp_632_move_zero","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_632_move_zero.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-within (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0) 0.001)\n    (check-within (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0) 0.001)\n    (check-within (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_632_move_zero","gpt_solution":"```racket\n#lang racket\n\n;; Function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (append\n    (filter (lambda (x) (not (= x 0))) num_list) ; All non-zero elements\n    (filter (lambda (x) (= x 0)) num_list)))      ; All zero elements\n\n;; Example usage:\n;; (move_zero '(1 0 2 0 3 4 0 5)) should return '(1 2 3 4 5 0 0 0)\n;; (move_zero '(0 0 0 0)) should return '(0 0 0 0)\n;; (move_zero '(1 2 3 4 5)) should return '(1 2 3 4 5)\n```"}
{"name":"mbpp_633_pair_xor_Sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of xor of all pairs of numbers in the given list.\n(define (pair_xor_Sum arr n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_633_pair_xor_Sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pair_xor_Sum))\n    (check-within (candidate (list 5 9 7 6) 4) 47 0.001)\n    (check-within (candidate (list 7 3 5) 3) 12 0.001)\n    (check-within (candidate (list 7 3) 2) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_633_pair_xor_Sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the sum of xor of all pairs of numbers in the given list.\n(define (pair_xor_Sum arr n)\n  (define (xor a b)\n    (bitwise-xor a b))\n  (define sum-xor 0)\n  (for ([i n]\n        [j n])\n    (unless (= i j)\n      (set! sum-xor (+ sum-xor (xor (list-ref arr i) (list-ref arr j))))))\n  sum-xor)\n\n;; Example usage:\n;; (pair_xor_Sum '(1 2 3) 3)  ; should return 12 because the pairs are (1, 2), (1, 3), and (2, 3)\n```"}
{"name":"mbpp_635_heap_sort","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort the given list.\n(define (heap_sort iterable)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_635_heap_sort.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate heap_sort))\n    (check-within (candidate (list 1 3 5 7 9 2 4 6 8 0)) (list 0 1 2 3 4 5 6 7 8 9) 0.001)\n    (check-within (candidate (list 25 35 22 85 14 65 75 25 58)) (list 14 22 25 25 35 58 65 75 85) 0.001)\n    (check-within (candidate (list 7 1 9 5)) (list 1 5 7 9) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_635_heap_sort","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to sort the given list.\n(define (heap_sort iterable)\n  (define (heapify arr n i)\n    (let ([largest i]\n          [left (+ (* 2 i) 1)]\n          [right (+ (* 2 i) 2)])\n      (if (and (< left n) (> (list-ref arr left) (list-ref arr largest)))\n          (set! largest left))\n      (if (and (< right n) (> (list-ref arr right) (list-ref arr largest)))\n          (set! largest right))\n      (if (not (= largest i))\n          (begin\n            (let ([temp (list-ref arr i)])\n              (set! arr (list-set arr i (list-ref arr largest)))\n              (set! arr (list-set arr largest temp)))\n            (heapify arr n largest))))\n    arr)\n\n  (define (build_heap arr n)\n    (for ([i (in-range (quotient n 2) -1 -1)])\n      (heapify arr n i)))\n\n  (define (heap_sort_helper arr n)\n    (build_heap arr n)\n    (for ([i (in-range (- n 1) 0 -1)])\n      (let ([temp (list-ref arr 0)])\n        (set! arr (list-set arr 0 (list-ref arr i)))\n        (set! arr (list-set arr i temp))\n        (heapify arr i 0)))\n    arr)\n\n  (let ([n (length iterable)])\n    (heap_sort_helper iterable n)))\n```\n\nThis code defines a `heap_sort` function that takes a list and sorts it using the heap sort algorithm."}
{"name":"mbpp_637_noprofit_noloss","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the given amount has no profit and no loss\n(define (noprofit_noloss actual_cost sale_amount)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_637_noprofit_noloss.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate noprofit_noloss))\n    (check-within (candidate 1500 1200) #f 0.001)\n    (check-within (candidate 100 100) #t 0.001)\n    (check-within (candidate 2000 5000) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_637_noprofit_noloss","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the given amount has no profit and no loss\n(define (noprofit_noloss actual_cost sale_amount)\n  (if (= actual_cost sale_amount)\n      #t  ;; true if no profit and no loss\n      #f  ;; false otherwise\n  )\n)\n\n;; Testing the function\n(display (noprofit_noloss 100 100)) ;; Should display #t\n(newline)\n(display (noprofit_noloss 100 150)) ;; Should display #f\n(newline)\n(display (noprofit_noloss 100 50))  ;; Should display #f\n(newline)\n```"}
{"name":"mbpp_638_wind_chill","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km\/h and a temperature in celsius.\n(define (wind_chill v t)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_638_wind_chill.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate wind_chill))\n    (check-within (candidate 120 35) 40 0.001)\n    (check-within (candidate 40 20) 19 0.001)\n    (check-within (candidate 10 8) 6 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_638_wind_chill","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km\/h and a temperature in celsius.\n(define (wind_chill v t)\n  (define wind_chill_index\n    (+ 13.12\n       (* 0.6215 t)\n       (- (* 11.37 (expt v 0.16)))\n       (+ (* 0.3965 t (expt v 0.16)))))\n  (exact-round wind_chill_index))\n```"}
{"name":"mbpp_639_sample_nam","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sample_nam sample_names)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_639_sample_nam.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sample_nam))\n    (check-within (candidate (list \"sally\" \"Dylan\" \"rebecca\" \"Diana\" \"Joanne\" \"keith\")) 16 0.001)\n    (check-within (candidate (list \"php\" \"res\" \"Python\" \"abcd\" \"Java\" \"aaa\")) 10 0.001)\n    (check-within (candidate (list \"abcd\" \"Python\" \"abba\" \"aba\")) 6 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_639_sample_nam","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n(define (sum_name_lengths names)\n  (define (starts-with-lowercase? name)\n    (and (not (empty? name))\n         (char-lower-case? (string-ref name 0))))\n  (define (name-length-sum acc name)\n    (if (starts-with-lowercase? name)\n        acc\n        (+ acc (string-length name))))\n  (foldl name-length-sum 0 names))\n\n;; Example usage:\n;; (sum_name_lengths '(\"Alice\" \"bob\" \"Charlie\" \"dave\")) ;; should return 11 (Alice + Charlie)\n```"}
{"name":"mbpp_640_remove_parenthesis","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove the parenthesis and what is inbetween them from a string.\n(define (remove_parenthesis items)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_640_remove_parenthesis.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_parenthesis))\n    (check-within (candidate (list \"python (chrome)\")) \"python\" 0.001)\n    (check-within (candidate (list \"string(.abc)\")) \"string\" 0.001)\n    (check-within (candidate (list \"alpha(num)\")) \"alpha\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_640_remove_parenthesis","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove the parenthesis and what is in between them from a string.\n(define (remove-parenthesis items)\n  (define (helper chars inside)\n    (cond\n      [(empty? chars) '()]\n      [(char=? (first chars) #\\() (helper (rest chars) #t)]\n      [(char=? (first chars) #\\)) (helper (rest chars) #f)]\n      [inside (helper (rest chars) inside)]\n      [else (cons (first chars) (helper (rest chars) inside))]))\n  (list->string (helper (string->list items) #f)))\n```\n\nTo use this function, you can call it with a string containing parenthesis, and it will return a new string with the parenthesis and the content within them removed.\n\n### Example usage:\n\n```racket\n(remove-parenthesis \"This is a (test) string\") ;; => \"This is a  string\"\n(remove-parenthesis \"Another (example) here (too)\") ;; => \"Another  here \"\n(remove-parenthesis \"(Remove) all (parentheses)\") ;; => \" all \"\n```"}
{"name":"mbpp_641_is_nonagonal","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the nth nonagonal number.\n(define (is_nonagonal n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_641_is_nonagonal.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nonagonal))\n    (check-within (candidate 10) 325 0.001)\n    (check-within (candidate 15) 750 0.001)\n    (check-within (candidate 18) 1089 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_641_is_nonagonal","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the nth nonagonal number\n(define (nth-nonagonal n)\n  (+ (* 4 n n) (* -3 n) 0))\n\n;; Example usage\n(nth-nonagonal 1) ; 1\n(nth-nonagonal 2) ; 9\n(nth-nonagonal 3) ; 24\n```"}
{"name":"mbpp_643_text_match_wordz_middle","language":"rkt","prompt":"#lang racket\n\n;; Write a function that checks if a strings contains 'z', except at the start and end of the word.\n(define (text_match_wordz_middle text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_643_text_match_wordz_middle.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_wordz_middle))\n    (check-within (candidate \"pythonzabc.\") #t 0.001)\n    (check-within (candidate \"zxyabc.\") #f 0.001)\n    (check-within (candidate \"  lang  .\") #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_643_text_match_wordz_middle","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that checks if a string contains 'z', except at the start and end of the word.\n(define (text_match_wordz_middle text)\n  (if (or (< (string-length text) 3)\n          (not (substring? \"z\" (substring text 1 (- (string-length text) 1)))))\n      #f\n      #t))\n\n;; Helper function to check if a substring exists in a string\n(define (substring? substr str)\n  (if (regexp-match (regexp-quote substr) str) \n      #t \n      #f))\n```\n\nIn this code:\n- `text_match_wordz_middle` checks if `text` contains 'z' only in the middle of the string, not at the start or end.\n- It first checks if the input string is shorter than 3 characters, in which case it returns `#f` since 'z' in such strings can't be in the middle.\n- It then checks for the presence of 'z' in the substring of `text`, excluding the first and last characters.\n- `substring?` is a helper function that returns `#t` if the given `substr` exists within `str`, otherwise returns `#f`."}
{"name":"mbpp_644_reverse_Array_Upto_K","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to reverse a list upto a given position.\n(define (reverse_Array_Upto_K input k)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_644_reverse_Array_Upto_K.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_Array_Upto_K))\n    (check-within (candidate (list 1 2 3 4 5 6) 4) (list 4 3 2 1 5 6) 0.001)\n    (check-within (candidate (list 4 5 6 7) 2) (list 5 4 6 7) 0.001)\n    (check-within (candidate (list 9 8 7 6 5) 3) (list 7 8 9 6 5) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_644_reverse_Array_Upto_K","gpt_solution":"```racket\n#lang racket\n\n;; Function to reverse a list up to a given position k\n(define (reverse_Array_Upto_K input k)\n  ;; Helper function to reverse a sublist\n  (define (reverse-helper lst acc count)\n    (if (or (null? lst) (>= count k))\n        (append acc lst) ;; append the reversed sublist with the remaining list\n        (reverse-helper (cdr lst) (cons (car lst) acc) (+ count 1))))\n  (reverse-helper input '() 0))\n\n;; Example usage:\n(reverse_Array_Upto_K '(1 2 3 4 5) 3)\n;; Output: '(3 2 1 4 5)\n```\n\nMake sure to test the function with various inputs to verify its correctness."}
{"name":"mbpp_720_add_dict_to_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to add a hash to the list. The output should be a list.\n(define (add_dict_to_tuple test_tup test_dict)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_720_add_dict_to_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_dict_to_tuple))\n    (check-within (candidate (list 4 5 6) #hash((\"MSAM\" .  1) (\"is\" .  2) (\"best\" .  3))) (list 4 5 6 #hash((\"MSAM\" .  1) (\"is\" .  2) (\"best\" .  3))) 0.001)\n    (check-within (candidate (list 1 2 3) #hash((\"UTS\" .  2) (\"is\" .  3) (\"Worst\" .  4))) (list 1 2 3 #hash((\"UTS\" .  2) (\"is\" .  3) (\"Worst\" .  4))) 0.001)\n    (check-within (candidate (list 8 9 10) #hash((\"POS\" .  3) (\"is\" .  4) (\"Okay\" .  5))) (list 8 9 10 #hash((\"POS\" .  3) (\"is\" .  4) (\"Okay\" .  5))) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_720_add_dict_to_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to add a hash to the list. The output should be a list.\n(define (add_dict_to_tuple test_tup test_dict)\n  (append test_tup (list test_dict)))\n\n;; Example Usage:\n(define test-tup '(1 2 3))\n(define test-dict (hash 'a 1 'b 2 'c 3))\n\n(add_dict_to_tuple test-tup test-dict)\n;; Output: '(1 2 3 #hash((a . 1) (b . 2) (c . 3)))\n```"}
{"name":"mbpp_721_maxAverageOfPath","language":"rkt","prompt":"#lang racket\n\n;; Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n(define (maxAverageOfPath cost)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_721_maxAverageOfPath.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxAverageOfPath))\n    (check-within (candidate (list (list 1 2 3) (list 6 5 4) (list 7 3 9))) 5.2 0.001)\n    (check-within (candidate (list (list 2 3 4) (list 7 6 5) (list 8 4 10))) 6.2 0.001)\n    (check-within (candidate (list (list 3 4 5) (list 8 7 6) (list 9 5 11))) 7.2 0.001)\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9))) 5.8 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_721_maxAverageOfPath","gpt_solution":"```racket\n#lang racket\n\n;; Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n;; A path is defined as a specific sequence of cells that starts from the top-left cell,\n;; moves only right or down and ends on the bottom-right cell.\n;; We want to find a path with the maximum average over all existing paths.\n;; Average is computed as total cost divided by the number of cells visited in the path.\n\n(define (maxAverageOfPath cost)\n  (define n (length cost))\n  \n  ;; Function to find the maximum sum path to (i, j)\n  (define (maxSumPath i j)\n    (cond\n      [(or (< i 0) (< j 0)) 0] ; If out of bounds, return 0 (no contribution to the path)\n      [(= i 0) (apply + (take (list-ref cost 0) (+ j 1)))] ; If in the first row, sum the elements up to j-th column\n      [(= j 0) (apply + (map (\u03bb (row) (first row)) (take cost (+ i 1))))] ; If in the first column, sum the elements up to i-th row\n      [else (+ (list-ref (list-ref cost i) j)\n               (max (maxSumPath (sub1 i) j) ; Compare the sum coming from the above\n                    (maxSumPath i (sub1 j))))])) ; and from the left\n  )\n  \n  ;; Calculate the maximum path sum for the bottom-right cell\n  (define total-cost (maxSumPath (sub1 n) (sub1 n)))\n  \n  ;; The number of cells in the path is always 2N-1 for an N*N matrix\n  (define num-cells (add1 (* 2 n -1)))\n  \n  ;; Calculate the maximum average\n  (\/ total-cost num-cells))\n\n;; Example usage:\n(define cost '((1 2 3)\n               (4 5 6)\n               (7 8 9)))\n\n(maxAverageOfPath cost) ; This should compute the maximum average path cost from the top-left to bottom-right cell\n```\n\nThe above code is a function `maxAverageOfPath` that computes the path with the maximum average cost from the top-left to the bottom-right cell of a given square matrix. The average is calculated by dividing the total cost by the number of cells in the path, which is always `2N-1` for an `N*N` matrix. The function `maxSumPath` is used to determine the maximum sum path reaching a particular cell (i, j) by considering the maximum of paths reaching it from the top or from the left."}
{"name":"mbpp_722_filter_data","language":"rkt","prompt":"#lang racket\n\n;; The input is given as - a hash with a student name as a key and a list of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n(define (filter_data students h w)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_722_filter_data.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_data))\n    (check-within (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 6.0 70) #hash((\"Cierra Vega\" .  (list 6.2 70))) 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.9 67) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Kierra Gentry\" .  (list 6.0 68))) 0.001)\n    (check-within (candidate #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 5.7 64) #hash((\"Cierra Vega\" .  (list 6.2 70)) (\"Alden Cantrell\" .  (list 5.9 65)) (\"Kierra Gentry\" .  (list 6.0 68)) (\"Pierre Cox\" .  (list 5.8 66))) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_722_filter_data","gpt_solution":"```racket\n#lang racket\n\n;; The input is given as:\n;; - a hash with a student name as a key and a list of float (student_height, student_weight) as a value,\n;; - minimal height,\n;; - minimal weight.\n;; Write a function to filter students that have height and weight above the minimum.\n\n(define (filter_data students min-height min-weight)\n  (define result (make-hash))\n  (for-each (lambda (entry)\n              (define name (car entry))\n              (define height (caar (cdr entry)))\n              (define weight (cdar (cdr entry)))\n              (when (and (> height min-height) (> weight min-weight))\n                (hash-set! result name (list height weight))))\n            (hash->list students))\n  result)\n\n;; Example Usage\n(define students (hash \"Alice\" '(170.5 60.0) \"Bob\" '(160.0 65.0) \"Charlie\" '(180.0 55.0)))\n\n(filter_data students 165.0 59.0)\n;; This should return a hash with entries for Alice and Bob, but not Charlie.\n```\n\nThis code defines a function `filter_data` that filters the students based on the given minimum height and weight. It iterates over the hash, checks the height and weight, and if both are above the given minimums, it adds the student to the result hash."}
{"name":"mbpp_723_count_same_pair","language":"rkt","prompt":"#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_723_count_same_pair.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4 0.001)\n    (check-within (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11 0.001)\n    (check-within (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1 0.001)\n    (check-within (candidate (list 0 1 1 2) (list 0 1 2 2)) 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_723_count_same_pair","gpt_solution":"```racket\n#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (helper lst1 lst2 count)\n    (cond \n      [(empty? lst1) count]\n      [(equal? (first lst1) (first lst2))\n       (helper (rest lst1) (rest lst2) (+ count 1))]\n      [else (helper (rest lst1) (rest lst2) count)]))\n  (helper nums1 nums2 0))\n```"}
{"name":"mbpp_724_power_base_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_724_power_base_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-within (candidate 2 100) 115 0.001)\n    (check-within (candidate 8 10) 37 0.001)\n    (check-within (candidate 8 15) 62 0.001)\n    (check-within (candidate 3 3) 9 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_724_power_base_sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (sum-of-digits n)\n    (if (< n 10)\n        n\n        (+ (modulo n 10) (sum-of-digits (quotient n 10)))))\n  (define result (expt base power))\n  (sum-of-digits result))\n\n;; Example usage:\n;; (power_base_sum 2 10) ; => 7 (since 2^10 is 1024, and 1+0+2+4 = 7)\n```"}
{"name":"mbpp_725_extract_quotation","language":"rkt","prompt":"#lang racket\n\n;; Write a function to extract values between quotation marks \" \" of the given string.\n(define (extract_quotation text1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_725_extract_quotation.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_quotation))\n    (check-within (candidate \"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\") (list \"A53\" \"multi\" \"Processor\") 0.001)\n    (check-within (candidate \"Cast your \"favorite\" entertainment \"apps\"\") (list \"favorite\" \"apps\") 0.001)\n    (check-within (candidate \"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\") (list \"4k Ultra HD\" \"HDR 10\") 0.001)\n    (check-within (candidate \"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") (list ) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_725_extract_quotation","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to extract values between quotation marks \" \" of the given string.\n(define (extract_quotation text1)\n  (define quotation-marks (regexp-quote \"\\\"\"))\n  (define regex (regexp (string-append quotation-marks \"([^\" quotation-marks \"]*)\" quotation-marks)))\n  (define matches (regexp-match* regex text1))\n  (map second matches))\n\n;; Example usage\n(extract_quotation \"This is a \\\"test string\\\" to \\\"extract values\\\" between \\\"quotations\\\".\")\n;; Returns: '(\"test string\" \"extract values\" \"quotations\")\n```\n\nThis function `extract_quotation` takes a string and extracts all substrings enclosed in double quotation marks. The regular expression `(regexp-quote \"\\\"\")` is used to match the quotes, and `regexp-match*` is used to find all matches in the text, returning a list of substrings between quotes. The `map second` extracts just the desired values (the first capture group of each match)."}
{"name":"mbpp_726_multiply_elements","language":"rkt","prompt":"#lang racket\n\n;; Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the list is equal to t_i * t_{i+1}.\n(define (multiply_elements test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_726_multiply_elements.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply_elements))\n    (check-within (candidate (list 1 5 7 8 10)) (list 5 35 56 80) 0.001)\n    (check-within (candidate (list 2 4 5 6 7)) (list 8 20 30 42) 0.001)\n    (check-within (candidate (list 12 13 14 9 15)) (list 156 182 126 135) 0.001)\n    (check-within (candidate (list 12)) (list ) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_726_multiply_elements","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that takes as input a list of numbers (t_1,...,t_{N+1})\n;; and returns a list of length N where the i-th element of the list is \n;; equal to t_i * t_{i+1.\n(define (multiply_elements test_tup)\n  (map (\u03bb (i) (* (list-ref test_tup i) (list-ref test_tup (+ i 1))))\n       (range 0 (sub1 (length test_tup)))))\n\n;; Example usage:\n;; (multiply_elements '(1 2 3 4)) ; This should return '(2 6 12)\n```"}
{"name":"mbpp_728_sum_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_728_sum_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-within (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65) 0.001)\n    (check-within (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10) 0.001)\n    (check-within (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_728_sum_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (empty? lst1)\n      empty\n      (cons (+ (first lst1) (first lst2))\n            (sum_list (rest lst1) (rest lst2)))))\n```\n\nThis function `sum_list` recursively processes the input lists `lst1` and `lst2`. It checks if `lst1` is empty, in which case it returns an empty list. Otherwise, it computes the sum of the first elements of `lst1` and `lst2`, and then recursively does the same for the rest of the list, constructing a new list with the summed elements."}
{"name":"mbpp_730_consecutive_duplicates","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove consecutive duplicates of a given list.\n(define (consecutive_duplicates nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_730_consecutive_duplicates.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate consecutive_duplicates))\n    (check-within (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list 0 1 2 3 4 5 6 7 8 9 4) 0.001)\n    (check-within (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list 10 15 19 18 17 26 17 18 10) 0.001)\n    (check-within (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list \"a\" \"b\" \"c\" \"d\") 0.001)\n    (check-within (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\" \"a\" \"a\")) (list \"a\" \"b\" \"c\" \"d\" \"a\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_730_consecutive_duplicates","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove consecutive duplicates of a given list.\n(define (consecutive_duplicates nums)\n  (define (helper lst prev)\n    (cond\n      [(empty? lst) '()]\n      [(equal? (first lst) prev) (helper (rest lst) prev)]\n      [else (cons (first lst) (helper (rest lst) (first lst)))]))\n  (helper nums 'null))\n```\n\nHere's a breakdown of the code:\n- We define the `consecutive_duplicates` function which takes a list `nums` as its argument.\n- Inside this function, we define a helper function `helper` that takes two parameters: `lst` (the remaining list to process) and `prev` (the previous element).\n- The `helper` function processes the list using a conditional:\n  - If `lst` is empty, it returns an empty list.\n  - If the first element of `lst` is equal to `prev`, it recursively calls itself with the rest of the list (thus skipping the duplicate).\n  - Otherwise, it adds the first element to the result and continues processing the rest of the list, updating `prev` to be the current element.\n- The `helper` function is initially called with the input list `nums` and `'null` as the initial previous element."}
{"name":"mbpp_731_lateralsurface_cone","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the lateral surface area of a cone given radius r and the height h.\n(define (lateralsurface_cone r h)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_731_lateralsurface_cone.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lateralsurface_cone))\n    (check-within (candidate 5 12) 204.20352248333654 0.001)\n    (check-within (candidate 10 15) 566.3586699569488 0.001)\n    (check-within (candidate 19 17) 1521.8090132193388 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_731_lateralsurface_cone","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the lateral surface area of a cone given radius r and the height h.\n(define (lateralsurface_cone r h)\n  (define slant-height (sqrt (+ (sqr r) (sqr h))))\n  (* pi r slant-height))\n\n;; Example usage:\n;; (lateralsurface_cone 3 4) ; should return approximately 37.69911184307752\n```"}
{"name":"mbpp_732_replace_specialchar","language":"rkt","prompt":"#lang racket\n\n;; Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n(define (replace_specialchar text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_732_replace_specialchar.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate replace_specialchar))\n    (check-within (candidate \"Python language, Programming language.\") \"Python:language::Programming:language:\" 0.001)\n    (check-within (candidate \"a b c,d e f\") \"a:b:c:d:e:f\" 0.001)\n    (check-within (candidate \"ram reshma,ram rahim\") \"ram:reshma:ram:rahim\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_732_replace_specialchar","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n(define (replace_specialchar text)\n  (regexp-replace* #rx\"[ ,.]\" text \":\"))\n\n;; Example Usage\n(display (replace_specialchar \"Hello, world. This is Racket.\")) ; Output: \"Hello:world:This:is:Racket:\"\n```"}
{"name":"mbpp_733_find_first_occurrence","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the index of the first occurrence of a given number in a sorted list.\n(define (find_first_occurrence A x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_733_find_first_occurrence.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_first_occurrence))\n    (check-within (candidate (list 2 5 5 5 6 6 8 9 9 9) 5) 1 0.001)\n    (check-within (candidate (list 2 3 5 5 6 6 8 9 9 9) 5) 2 0.001)\n    (check-within (candidate (list 2 4 1 5 6 6 8 9 9 9) 6) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_733_find_first_occurrence","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the index of the first occurrence of a given number in a sorted list.\n(define (find_first_occurrence A x)\n  (let loop ([low 0]\n             [high (sub1 (length A))])\n    (if (> low high)\n        -1\n        (let* ([mid (quotient (+ low high) 2)]\n               [mid-val (list-ref A mid)])\n          (cond\n            [(= mid-val x) (if (and (> mid 0) (= (list-ref A (sub1 mid)) x))\n                               (loop low (sub1 mid))\n                               mid)]\n            [(> mid-val x) (loop low (sub1 mid))]\n            [else (loop (add1 mid) high)])))))\n\n;; Example usage:\n(find_first_occurrence '(1 2 2 2 3 4 5) 2) ; should return 1\n(find_first_occurrence '(1 1 1 2 3 4 5) 1) ; should return 0\n(find_first_occurrence '(1 2 3 4 5) 4) ; should return 3\n(find_first_occurrence '(1 2 3 4 5) 6) ; should return -1\n```\n\nThis function `find_first_occurrence` uses a binary search approach to find the index of the first occurrence of a given number `x` in a sorted list `A`. If the number is not found, it returns `-1`."}
{"name":"mbpp_734_sum_Of_Subarray_Prod","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find sum of products of all possible sublists of a given list. https:\/\/www.geeksforgeeks.org\/sum-of-products-of-all-possible-sublists\/\n(define (sum_Of_Subarray_Prod arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_734_sum_Of_Subarray_Prod.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_Of_Subarray_Prod))\n    (check-within (candidate (list 1 2 3)) 20 0.001)\n    (check-within (candidate (list 1 2)) 5 0.001)\n    (check-within (candidate (list 1 2 3 4)) 84 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_734_sum_Of_Subarray_Prod","gpt_solution":"```racket\n#lang racket\n\n;; Function to find sum of products of all possible sublists of a given list\n;; Reference: https:\/\/www.geeksforgeeks.org\/sum-of-products-of-all-possible-sublists\/\n(define (sum_Of_Subarray_Prod arr)\n  ;; This function calculates the sum of products of all subarrays\n  (define (sum-product-subarrays lst)\n    (define len (length lst))\n    (define product-sum 0)\n    (for ([i (in-range len)])\n      (for ([j (in-range i len)])\n        (define current-product 1)\n        (for ([k (in-range i (add1 j))])\n          (set! current-product (* current-product (list-ref lst k))))\n        (set! product-sum (+ product-sum current-product))))\n    product-sum)\n\n  ;; Call the inner function with the given array\n  (sum-product-subarrays arr))\n\n;; Example Usage\n(sum_Of_Subarray_Prod '(1 2 3)) ; Output: 23\n(sum_Of_Subarray_Prod '(1 2))   ; Output: 5\n(sum_Of_Subarray_Prod '(1))     ; Output: 1\n```"}
{"name":"mbpp_735_toggle_middle_bits","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to toggle bits of the number except the first and the last bit. https:\/\/www.geeksforgeeks.org\/toggle-bits-number-expect-first-last-bits\/\n(define (toggle_middle_bits n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_735_toggle_middle_bits.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_middle_bits))\n    (check-within (candidate 9) 15 0.001)\n    (check-within (candidate 10) 12 0.001)\n    (check-within (candidate 11) 13 0.001)\n    (check-within (candidate 65) 127 0.001)\n    (check-within (candidate 77) 115 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_735_toggle_middle_bits","gpt_solution":"```racket\n#lang racket\n\n;; Function to toggle bits of the number except the first and the last bit.\n;; The function takes an integer `n` and returns the integer with middle bits toggled.\n\n(define (toggle_middle_bits n)\n  (let* ((num-bits (integer-length n))\n         (last-index (sub1 num-bits))\n         ;; Create a mask by shifting 1 left by (num-bits - 1) positions, subtracting 1, \n         ;; and finally zeroing out the first and last bits with bitwise operations.\n         (mask (bitwise-and (bitwise-not (bitwise-ior (arithmetic-shift 1 last-index) 1))\n                            (sub1 (arithmetic-shift 1 num-bits)))))\n    ;; Toggle the middle bits using bitwise-xor with the mask\n    (bitwise-xor n mask)))\n\n;; Example usage\n(displayln (toggle_middle_bits 29))  ; Use any appropriate test number\n```\n\nExplanation:\n1. Calculate the number of bits required to represent `n` as `num-bits`.\n2. Compute the last index of the bits (excluding the first and last bits).\n3. Create a mask to select only the middle bits. This mask is constructed to exclude the first and last bits by combining bitwise operations.\n4. Toggle the middle bits by applying a bitwise-xor operation between `n` and the mask."}
{"name":"mbpp_736_left_insertion","language":"rkt","prompt":"#lang racket\n\n;; Write a function to locate the left insertion point for a specified value in sorted order. https:\/\/www.w3resource.com\/rktthon-exercises\/data-structures-and-algorithms\/rktthon-data-structure-exercise-24.php\n(define (left_insertion a x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_736_left_insertion.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_insertion))\n    (check-within (candidate (list 1 2 4 5) 6) 4 0.001)\n    (check-within (candidate (list 1 2 4 5) 3) 2 0.001)\n    (check-within (candidate (list 1 2 4 5) 7) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_736_left_insertion","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to locate the left insertion point for a specified value in sorted order. \n;; https:\/\/www.w3resource.com\/rktthon-exercises\/data-structures-and-algorithms\/rktthon-data-structure-exercise-24.php\n\n(define (left_insertion a x)\n  (define (binary-search-left low high)\n    (if (>= low high)\n        low\n        (let ((mid (quotient (+ low high) 2)))\n          (if (< (list-ref a mid) x)\n              (binary-search-left (+ mid 1) high)\n              (binary-search-left low mid)))))\n  (binary-search-left 0 (length a)))\n\n;; Example usage:\n;; (left_insertion '(1 2 4 4 5) 4) ; => 2\n;; (left_insertion '(1 2 4 4 5) 3) ; => 2\n;; (left_insertion '(1 2 4 4 5) 5) ; => 4\n;; (left_insertion '(1 2 4 4 5) 0) ; => 0\n```"}
{"name":"mbpp_737_check_str","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the given string is starting with a vowel or not using regex.\n(define (check_str string)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_737_check_str.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_str))\n    (check-within (candidate \"annie\") #t 0.001)\n    (check-within (candidate \"dawood\") #f 0.001)\n    (check-within (candidate \"Else\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_737_check_str","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the given string is starting with a vowel or not using regex.\n(define (check_str string)\n  (regexp-match? #rx\"^[aeiouAEIOU]\" string))\n\n;; Testing the function\n(display (check_str \"apple\"))  ; #t\n(newline)\n(display (check_str \"Orange\")) ; #t\n(newline)\n(display (check_str \"banana\")) ; #f\n(newline)\n(display (check_str \"Egg\"))    ; #t\n(newline)\n(display (check_str \"grape\"))  ; #f\n```"}
{"name":"mbpp_738_geometric_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a function to calculate the geometric sum of n-1. https:\/\/www.w3resource.com\/rktthon-exercises\/data-structures-and-algorithms\/rktthon-recursion-exercise-9.php\n(define (geometric_sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_738_geometric_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate geometric_sum))\n    (check-within (candidate 7) 1.9921875 0.001)\n    (check-within (candidate 4) 1.9375 0.001)\n    (check-within (candidate 8) 1.99609375 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_738_geometric_sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to calculate the geometric sum of n-1.\n;; The geometric sum of n terms is defined as: 1 + 1\/2 + 1\/4 + ... + 1\/(2^(n-1))\n;; This can be implemented using a recursive approach.\n\n(define (geometric_sum n)\n  (if (= n 0)\n      0\n      (+ (\/ 1 (expt 2 (- n 1))) (geometric_sum (- n 1)))))\n\n;; Example usage:\n;; (geometric_sum 4) ; => 1 + 1\/2 + 1\/4 + 1\/8 = 1.875\n```"}
{"name":"mbpp_739_find_Index","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the index of smallest triangular number with n digits. https:\/\/www.geeksforgeeks.org\/index-of-smallest-triangular-number-with-n-digits\/\n(define (find_Index n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_739_find_Index.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Index))\n    (check-within (candidate 2) 4 0.001)\n    (check-within (candidate 3) 14 0.001)\n    (check-within (candidate 4) 45 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_739_find_Index","gpt_solution":"```racket\n#lang racket\n\n;; A function to find the index of smallest triangular number with n digits.\n;; A triangular number T(k) is given by the formula: T(k) = k * (k + 1) \/ 2\n\n(define (num-of-digits num)\n  (if (= num 0)\n      1\n      (ceiling (\/ (log10 num) (log10 10)))))\n\n(define (triangular-number k)\n  (\/ (* k (+ k 1)) 2))\n\n(define (find-index n)\n  (define (helper k)\n    (if (>= (num-of-digits (triangular-number k)) n)\n        k\n        (helper (+ k 1))))\n  (helper 1))\n\n;; Usage example:\n;; (find-index 3)\n```\n\nThis Racket code defines a function `find-index` that finds the index of the smallest triangular number with `n` digits. The auxiliary function `num-of-digits` calculates the number of digits in a given number. The function `triangular-number` computes the k-th triangular number. The main function `find-index` uses a helper function to find the smallest k for which the number of digits in the k-th triangular number is at least `n`."}
{"name":"mbpp_740_tuple_to_dict","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert the given list to a key-value hash using adjacent elements. https:\/\/www.geeksforgeeks.org\/rktthon-convert-list-to-adjacent-pair-hash\/\n(define (tuple_to_dict test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_740_tuple_to_dict.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_dict))\n    (check-within (candidate (list 1 5 7 10 13 5)) #hash((1 .  5) (7 .  10) (13 .  5)) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6)) #hash((1 .  2) (3 .  4) (5 .  6)) 0.001)\n    (check-within (candidate (list 7 8 9 10 11 12)) #hash((7 .  8) (9 .  10) (11 .  12)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_740_tuple_to_dict","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert the given list to a key-value hash using adjacent elements. https:\/\/www.geeksforgeeks.org\/rktthon-convert-list-to-adjacent-pair-hash\/\n(define (tuple_to_dict test_tup)\n  (define result (make-hash))\n  (define (helper lst)\n    (cond\n      [(empty? lst) result]\n      [(empty? (rest lst)) (error \"List contains an odd number of elements, cannot form key-value pairs\")]\n      [else (begin \n              (hash-set! result (first lst) (second lst))\n              (helper (rest (rest lst))))]))\n  (helper test_tup))\n\n;; Example usage:\n(define test-list '(a 1 b 2 c 3 d 4))\n(tuple_to_dict test-list)  ; -> '#hash((a . 1) (b . 2) (c . 3) (d . 4))\n\n;; Example usage with error case:\n(define odd-list '(a 1 b 2 c 3 d))\n(tuple_to_dict odd-list)  ; Will raise an error: \"List contains an odd number of elements, cannot form key-value pairs\"\n```"}
{"name":"mbpp_741_all_Characters_Same","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether all the characters are same or not.\n(define (all_Characters_Same s)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_741_all_Characters_Same.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_Characters_Same))\n    (check-within (candidate \"python\") #f 0.001)\n    (check-within (candidate \"aaa\") #t 0.001)\n    (check-within (candidate \"data\") #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_741_all_Characters_Same","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether all the characters in a string are the same or not.\n(define (all_Characters_Same s)\n  (if (string-empty? s)\n      #t\n      (let ([first-char (string-ref s 0)])\n        (for\/and ([char (in-string s)])\n          (char=? first-char char)))))\n\n; Example usage:\n; (all_Characters_Same \"aaaaa\") ; Should return #t\n; (all_Characters_Same \"abcde\") ; Should return #f\n```\n\nThis code defines a function `all_Characters_Same` that takes a string `s` as input and checks whether all characters in the string are the same. It first checks if the string is empty, in which case it returns `#t`. If the string is not empty, it takes the first character of the string and compares it with each character in the string using a `for\/and` loop, returning true only if all characters are the same."}
{"name":"mbpp_742_area_tetrahedron","language":"rkt","prompt":"#lang racket\n\n;; Write a function to caluclate the area of a tetrahedron.\n(define (area_tetrahedron side)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_742_area_tetrahedron.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate area_tetrahedron))\n    (check-within (candidate 3) 15.588457268119894 0.001)\n    (check-within (candidate 20) 692.8203230275509 0.001)\n    (check-within (candidate 10) 173.20508075688772 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_742_area_tetrahedron","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to calculate the area of a tetrahedron.\n(define (area_tetrahedron side)\n  (let* ((sqrt3 (sqrt 3))\n         (base-triangle-area (* (\/ sqrt3 4) (square side)))\n         (total-area (* 4 base-triangle-area)))\n    total-area))\n\n;; Example usage:\n;; (area_tetrahedron 1) should return approximately 1.7320508075688772\n```"}
{"name":"mbpp_743_rotate_right","language":"rkt","prompt":"#lang racket\n\n;; Write a function to rotate a given list by specified number of items to the right direction. https:\/\/www.geeksforgeeks.org\/rktthon-program-right-rotate-list-n\/\n(define (rotate_right list m)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_743_rotate_right.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rotate_right))\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 3) (list 8 9 10 1 2 3 4 5 6 7) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 9 10 1 2 3 4 5 6 7 8) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10) 5) (list 6 7 8 9 10 1 2 3 4 5) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_743_rotate_right","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to rotate a given list by specified number of items to the right direction.\n;; https:\/\/www.geeksforgeeks.org\/rktthon-program-right-rotate-list-n\/\n(define (rotate_right list m)\n  (let* ((len (length list))\n         (m (modulo m len))\n         (split-point (- len m)))\n    (append (drop list split-point) (take list split-point))))\n\n;; Example Usage\n(define my-list '(1 2 3 4 5))\n(rotate_right my-list 2)\n;; Expected output: '(4 5 1 2 3)\n```"}
{"name":"mbpp_744_check_none","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if the given list has any none value or not.\n(define (check_none test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_744_check_none.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_none))\n    (check-within (candidate (list 10 4 5 6 #f)) #t 0.001)\n    (check-within (candidate (list 7 8 9 11 14)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 #f)) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_744_check_none","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if the given list has any none value or not.\n(define (check_none test_tup)\n  (ormap none? test_tup))\n\n;; None value in Racket is represented as #f\n;; Example usage:\n(check_none '(1 2 3 4)) ; Returns #f\n(check_none '(1 2 #f 4)) ; Returns #t\n(check_none '()) ; Returns #f\n```\n\nIn this code, the `check_none` function uses `ormap` to apply the `none?` predicate (which checks for `#f` in the list) to each element of `test_tup`. If any element is `#f`, `ormap` returns `#t`; otherwise, it returns `#f`."}
{"name":"mbpp_745_divisible_by_digits","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https:\/\/www.w3resource.com\/rktthon-exercises\/lambda\/rktthon-lambda-exercise-24.php\n(define (divisible_by_digits startnum endnum)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_745_divisible_by_digits.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisible_by_digits))\n    (check-within (candidate 1 22) (list 1 2 3 4 5 6 7 8 9 11 12 15 22) 0.001)\n    (check-within (candidate 1 15) (list 1 2 3 4 5 6 7 8 9 11 12 15) 0.001)\n    (check-within (candidate 20 25) (list 22 24) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_745_divisible_by_digits","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https:\/\/www.w3resource.com\/rktthon-exercises\/lambda\/rktthon-lambda-exercise-24.php\n\n(define (divisible-by-digits startnum endnum)\n  (define (digits n)\n    (if (zero? n)\n        '()\n        (cons (remainder n 10) (digits (quotient n 10)))))\n  \n  (define (valid-number? n)\n    (let ((ds (digits n)))\n      (and (not (member 0 ds))\n           (every (lambda (d) (zero? (remainder n d))) ds))))\n  \n  (filter valid-number? (range startnum (+ endnum 1) 1)))\n\n;; Example usage\n(divisible-by-digits 1 22)\n```\n\nThis function finds numbers within the given range `[startnum, endnum]` where each number is divisible by every digit it contains. It includes helper functions to extract the digits and to check if a number is valid based on the aforementioned criteria."}
{"name":"mbpp_746_sector_area","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return #f if the angle is larger than 360 degrees.\n(define (sector_area r a)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_746_sector_area.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sector_area))\n    (check-within (candidate 4 45) 6.283185307179586 0.001)\n    (check-within (candidate 9 45) 31.808625617596654 0.001)\n    (check-within (candidate 9 361) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_746_sector_area","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return #f if the angle is larger than 360 degrees.\n(define (sector_area r a)\n  (if (> a 360)\n      #f\n      (* (\/ a 360) (* pi (* r r)))))\n```"}
{"name":"mbpp_747_lcs_of_three","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the longest common subsequence for the given three string sequence. https:\/\/www.geeksforgeeks.org\/lcs-longest-common-subsequence-three-strings\/\n(define (lcs_of_three X Y Z)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_747_lcs_of_three.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lcs_of_three))\n    (check-within (candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") 2 0.001)\n    (check-within (candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") 5 0.001)\n    (check-within (candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_747_lcs_of_three","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the longest common subsequence for the given three string sequence. https:\/\/www.geeksforgeeks.org\/lcs-longest-common-subsequence-three-strings\/\n(define (lcs-of-three X Y Z)\n  (let* ([m (string-length X)]\n         [n (string-length Y)]\n         [p (string-length Z)]\n         [L (make-vector (+ 1 m) (make-vector (+ 1 n) (make-vector (+ 1 p) 0)))])\n    \n    ;; Build L[m+1][n+1][p+1] in bottom up fashion\n    (for* ([i (in-range 1 (+ m 1))]\n           [j (in-range 1 (+ n 1))]\n           [k (in-range 1 (+ p 1))])\n      (if (and (equal? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n               (equal? (string-ref X (- i 1)) (string-ref Z (- k 1))))\n          (vector-set! (vector-ref (vector-ref L i) j) k\n                       (add1 (vector-ref (vector-ref (vector-ref L (- i 1)) (- j 1)) (- k 1))))\n          (vector-set! (vector-ref (vector-ref L i) j) k\n                       (max (vector-ref (vector-ref (vector-ref L (- i 1)) j) k)\n                            (vector-ref (vector-ref (vector-ref L i) (- j 1)) k)\n                            (vector-ref (vector-ref (vector-ref L i) j) (- k 1))))))\n    \n    ;; L[m][n][p] contains the length of LCS for X[0..m-1], Y[0..n-1] and Z[0..p-1]\n    (vector-ref (vector-ref (vector-ref L m) n) p)))\n\n;; Example usage:\n(define X \"AGGT12\")\n(define Y \"12TXAYB\")\n(define Z \"12XBA\")\n(lcs-of-three X Y Z)  ;; Output should be 2\n```"}
{"name":"mbpp_748_capital_words_spaces","language":"rkt","prompt":"#lang racket\n\n;; Write a function to put spaces between words starting with capital letters in a given string.\n(define (capital_words_spaces str1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_748_capital_words_spaces.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate capital_words_spaces))\n    (check-within (candidate \"Python\") \"Python\" 0.001)\n    (check-within (candidate \"PythonProgrammingExamples\") \"Python Programming Examples\" 0.001)\n    (check-within (candidate \"GetReadyToBeCodingFreak\") \"Get Ready To Be Coding Freak\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_748_capital_words_spaces","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to put spaces between words starting with capital letters in a given string.\n(define (capital_words_spaces str1)\n  (define (insert-space str)\n    (cond [(empty? str) '()]\n          [else (let loop ([chars (string->list str)]\n                           [prev-ch #\\Space]\n                           [acc '()])\n                  (cond\n                    [(empty? chars)\n                     (list->string (reverse acc))]\n                    [else\n                     (let* ([ch (first chars)]\n                            [remaining (rest chars)]\n                            [insert-space? (and (<= #\\A ch #\\Z) (not (char=? prev-ch #\\Space)))]\n                            [new-acc (if insert-space?\n                                         (cons ch (cons #\\Space acc))\n                                         (cons ch acc))])\n                       (loop remaining ch new-acc))]))]))\n  (string-trim (insert-space str1)))\n\n;; Example usage:\n(capital_words_spaces \"HelloWorld\")\n;; => \"Hello World\"\n\n(capital_words_spaces \"ThisIsATest\")\n;; => \"This Is A Test\"\n```"}
{"name":"mbpp_749_sort_numeric_strings","language":"rkt","prompt":"#lang racket\n\n;; Write a function to sort a given list of strings of numbers numerically. https:\/\/www.geeksforgeeks.org\/rktthon-sort-numeric-strings-in-a-list\/\n(define (sort_numeric_strings nums_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_749_sort_numeric_strings.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numeric_strings))\n    (check-within (candidate (list \"4\" \"12\" \"45\" \"7\" \"0\" \"100\" \"200\" \"-12\" \"-500\")) (list -500 -12 0 4 7 12 45 100 200) 0.001)\n    (check-within (candidate (list \"2\" \"3\" \"8\" \"4\" \"7\" \"9\" \"8\" \"2\" \"6\" \"5\" \"1\" \"6\" \"1\" \"2\" \"3\" \"4\" \"6\" \"9\" \"1\" \"2\")) (list 1 1 1 2 2 2 2 3 3 4 4 5 6 6 6 7 8 8 9 9) 0.001)\n    (check-within (candidate (list \"1\" \"3\" \"5\" \"7\" \"1\" \"3\" \"13\" \"15\" \"17\" \"5\" \"7 \" \"9\" \"1\" \"11\")) (list 1 1 1 3 3 5 5 7 7 9 11 13 15 17) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_749_sort_numeric_strings","gpt_solution":"```racket\n#lang racket\n\n;; Function to sort a given list of strings of numbers numerically.\n(define (sort_numeric_strings nums_str)\n  (define (string-to-number s)\n    (string->number s))\n  (define sorted-nums\n    (sort nums_str\n          (lambda (a b)\n            (< (string-to-number a) (string-to-number b)))))\n  sorted-nums)\n\n;; Example usage\n(define nums-str-list '(\"10\" \"3\" \"5\" \"20\" \"11\"))\n(sort_numeric_strings nums-str-list)  ; Output: '(\"3\" \"5\" \"10\" \"11\" \"20\")\n```"}
{"name":"mbpp_750_add_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to add the given list to the given list.\n(define (add_tuple test_list test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_750_add_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_tuple))\n    (check-within (candidate (list 5 6 7) (list 9 10)) (list 5 6 7 9 10) 0.001)\n    (check-within (candidate (list 6 7 8) (list 10 11)) (list 6 7 8 10 11) 0.001)\n    (check-within (candidate (list 7 8 9) (list 11 12)) (list 7 8 9 11 12) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_750_add_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to add the given tuple to the given list.\n(define (add_tuple test_list test_tup)\n  (append test_list test_tup))\n\n;; Example usage:\n(define my-list '(1 2 3))\n(define my-tuple '(4 5))\n\n(add_tuple my-list my-tuple)\n;; Returns: '(1 2 3 4 5)\n```"}
{"name":"mbpp_751_check_min_heap","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if the given list represents min heap or not. https:\/\/www.geeksforgeeks.org\/how-to-check-if-a-given-list-represents-a-binary-heap\/\n(define (check_min_heap arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_751_check_min_heap.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_min_heap))\n    (check-within (candidate (list 1 2 3 4 5 6)) #t 0.001)\n    (check-within (candidate (list 2 3 4 5 10 15)) #t 0.001)\n    (check-within (candidate (list 2 10 4 5 3 15)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_751_check_min_heap","gpt_solution":"```racket\n#lang racket\n\n;; Define a helper function to get the left child index of a node\n(define (left-child index)\n  (+ (* 2 index) 1))\n\n;; Define a helper function to get the right child index of a node\n(define (right-child index)\n  (+ (* 2 index) 2))\n\n;; Define a function to check if the given list represents a min heap\n(define (check_min_heap arr)\n  (define len (length arr)) ;; Get the length of the array\n  \n  ;; Define an inner recursive function to check the heap property\n  (define (is-min-heap index)\n    (if (>= index len)\n        #t ;; If index is out of bounds, it's a valid sub-heap\n        (let ((left-index (left-child index))\n              (right-index (right-child index)))\n          \n          ;; Recursively check if the children satisfy the heap property\n          (and\n           (or (>= left-index len) (<= (list-ref arr index) (list-ref arr left-index)))\n           (or (>= right-index len) (<= (list-ref arr index) (list-ref arr right-index)))\n           (is-min-heap left-index)\n           (is-min-heap right-index)))))\n  \n  ;; Start checking from the root index\n  (is-min-heap 0))\n\n;; Example usage\n(require rackunit)\n(check-equal? (check_min_heap '(1 3 5 7 9 8 10)) #t)\n(check-equal? (check_min_heap '(2 3 4 5 10 9 8)) #t)\n(check-equal? (check_min_heap '(10 9 8 7 6 5 4)) #f)\n```\n\nThe given code defines helper functions to calculate the left and right child indices for a binary heap structure. The main function `check_min_heap` verifies if the passed list adheres to the min-heap property by recursively validating each node and its children. The example usage provided with `rackunit` demonstrates the function's correctness through tests."}
{"name":"mbpp_752_jacobsthal_num","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the nth jacobsthal number. https:\/\/www.geeksforgeeks.org\/jacobsthal-and-jacobsthal-lucas-numbers\/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n(define (jacobsthal_num n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_752_jacobsthal_num.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate jacobsthal_num))\n    (check-within (candidate 5) 11 0.001)\n    (check-within (candidate 2) 1 0.001)\n    (check-within (candidate 4) 5 0.001)\n    (check-within (candidate 13) 2731 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_752_jacobsthal_num","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the nth jacobsthal number.\n;; https:\/\/www.geeksforgeeks.org\/jacobsthal-and-jacobsthal-lucas-numbers\/\n;; The sequence starts as follows: 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\n(define (jacobsthal-num n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 1]\n    [else (+ (jacobsthal-num (- n 1)) (* 2 (jacobsthal-num (- n 2))))]))\n\n;; Example usage:\n(jacobsthal-num 0) ; => 0\n(jacobsthal-num 1) ; => 1\n(jacobsthal-num 2) ; => 1\n(jacobsthal-num 3) ; => 3\n(jacobsthal-num 4) ; => 5\n```"}
{"name":"mbpp_753_min_k","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find minimum k records from list list. https:\/\/www.geeksforgeeks.org\/rktthon-find-minimum-k-records-from-list-list\/ - in this case a verbatim corkt of test cases\n(define (min_k test_list K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_753_min_k.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_k))\n    (check-within (candidate (list (list \"Manjeet\" 10) (list \"Akshat\" 4) (list \"Akash\" 2) (list \"Nikhil\" 8)) 2) (list (list \"Akash\" 2) (list \"Akshat\" 4)) 0.001)\n    (check-within (candidate (list (list \"Sanjeev\" 11) (list \"Angat\" 5) (list \"Akash\" 3) (list \"Nepin\" 9)) 3) (list (list \"Akash\" 3) (list \"Angat\" 5) (list \"Nepin\" 9)) 0.001)\n    (check-within (candidate (list (list \"tanmay\" 14) (list \"Amer\" 11) (list \"Ayesha\" 9) (list \"SKD\" 16)) 1) (list (list \"Ayesha\" 9)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_753_min_k","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find minimum k records from list list.\n;; A function to find minimum k records from list list\n\n(define (min_k test_list K)\n  ; Sort the list in ascending order\n  (define sorted-list (sort test_list <))\n  ; Take the first K elements from the sorted list\n  (take sorted-list K))\n\n;; Test cases\n(define test-list-1 '(10 20 30 40 50 60 70 80 90 100))\n(define K1 3)\n(min_k test-list-1 K1) ; should return '(10 20 30)\n\n(define test-list-2 '(5 3 9 1 8 7))\n(define K2 2)\n(min_k test-list-2 K2) ; should return '(1 3)\n\n(define test-list-3 '(15 42 7 8 13 99 56 23 65 74))\n(define K3 5)\n(min_k test-list-3 K3) ; should return '(7 8 13 15 23)\n```"}
{"name":"mbpp_754_extract_index_list","language":"rkt","prompt":"#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_754_extract_index_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-within (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7) 0.001)\n    (check-within (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6) 0.001)\n    (check-within (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5) 0.001)\n    (check-within (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_754_extract_index_list","gpt_solution":"```racket\n#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n;; Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (define len (min (length l1) (length l2) (length l3)))\n  ;; Helper function to check the elements at each index\n  (define (common-elements idx)\n    (if (>= idx len)\n        '()\n        (let ((el1 (list-ref l1 idx))\n              (el2 (list-ref l2 idx))\n              (el3 (list-ref l3 idx)))\n          (if (and (equal? el1 el2) (equal? el1 el3))\n              (cons el1 (common-elements (+ idx 1)))\n              (common-elements (+ idx 1))))))\n  ;; Start recursion from index 0\n  (common-elements 0))\n\n;; Example usage:\n(extract_index_list '(1 2 3 4) '(1 3 3 4) '(1 2 3 5)) ;; Output: (3)\n```"}
{"name":"mbpp_755_second_smallest","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the second smallest number in a list.\n(define (second_smallest numbers)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_755_second_smallest.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate second_smallest))\n    (check-within (candidate (list 1 2 -8 -2 0 -2)) -2 0.001)\n    (check-within (candidate (list 1 1 -0.5 0 2 -2 -2)) -0.5 0.001)\n    (check-within (candidate (list 2 2)) #f 0.001)\n    (check-within (candidate (list 2 2 2)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_755_second_smallest","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the second smallest number in a list.\n(define (second_smallest numbers)\n  (define sorted-numbers (sort numbers <))\n  (define min (first sorted-numbers))\n  (define (find-second-smallest lst)\n    (cond\n      [(empty? lst) #f]\n      [(> (first lst) min) (first lst)]\n      [else (find-second-smallest (rest lst))]))\n  (find-second-smallest sorted-numbers))\n\n;; Example usage:\n;; (second_smallest '(5 4 3 2 1)) -> 2\n;; (second_smallest '(7 7 7 6 6 8)) -> 7\n```"}
{"name":"mbpp_756_text_match_zero_one","language":"rkt","prompt":"#lang racket\n\n;; Write a function that matches a string that has an 'a' followed by one or more 'b's. https:\/\/www.w3resource.com\/rktthon-exercises\/re\/rktthon-re-exercise-3.php\n(define (text_match_zero_one text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_756_text_match_zero_one.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_zero_one))\n    (check-within (candidate \"ac\") #f 0.001)\n    (check-within (candidate \"dc\") #f 0.001)\n    (check-within (candidate \"abbbba\") #t 0.001)\n    (check-within (candidate \"dsabbbba\") #t 0.001)\n    (check-within (candidate \"asbbbba\") #f 0.001)\n    (check-within (candidate \"abaaa\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_756_text_match_zero_one","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that matches a string that has an 'a' followed by one or more 'b's. https:\/\/www.w3resource.com\/rktthon-exercises\/re\/rktthon-re-exercise-3.php\n(define (text_match_ab text)\n  (regexp-match? #rx\"a+b+\" text))\n\n;; Example usage:\n;; (text_match_ab \"ab\")     ;; should return #t\n;; (text_match_ab \"aabbb\")  ;; should return #t\n;; (text_match_ab \"a\")      ;; should return #f\n;; (text_match_ab \"b\")      ;; should return #f\n```"}
{"name":"mbpp_757_count_reverse_pairs","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count the pairs of reverse strings in the given string list. https:\/\/www.geeksforgeeks.org\/rktthon-program-to-count-the-pairs-of-reverse-strings\/\n(define (count_reverse_pairs test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_757_count_reverse_pairs.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_reverse_pairs))\n    (check-within (candidate (list \"julia\" \"best\" \"tseb\" \"for\" \"ailuj\")) 2 0.001)\n    (check-within (candidate (list \"geeks\" \"best\" \"for\" \"skeeg\")) 1 0.001)\n    (check-within (candidate (list \"makes\" \"best\" \"sekam\" \"for\" \"rof\")) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_757_count_reverse_pairs","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count the pairs of reverse strings in the given string list.\n;; https:\/\/www.geeksforgeeks.org\/rktthon-program-to-count-the-pairs-of-reverse-strings\/\n\n(define (count-reverse-pairs test-list)\n  (define (reverse-string str) \n    (list->string (reverse (string->list str))))\n  \n  (define (helper lst seen-pairs)\n    (cond\n      [(empty? lst) seen-pairs]\n      [else \n       (let* ([current (first lst)]\n              [reverse-current (reverse-string current)]\n              [updated-pairs (if (member reverse-current (rest lst))\n                                 (+ seen-pairs 1)\n                                 seen-pairs)])\n         (helper (rest lst) updated-pairs))]))\n  \n  (helper test-list 0))\n\n;; Example usage:\n(count-reverse-pairs '(\"abcd\" \"dcba\" \"lls\" \"sll\" \"sssll\"))\n;; Output should be 2 pairs: (\"abcd\", \"dcba\") and (\"lls\", \"sll\")\n```"}
{"name":"mbpp_759_is_decimal","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_759_is_decimal.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-within (candidate \"123.11\") #t 0.001)\n    (check-within (candidate \"e666.86\") #f 0.001)\n    (check-within (candidate \"3.124587\") #f 0.001)\n    (check-within (candidate \"1.11\") #t 0.001)\n    (check-within (candidate \"1.1.11\") #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_759_is_decimal","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether a given string is a decimal number with a precision of 2\n(define (is_decimal num)\n  (define decimal-regex \"^\\\\d+\\\\.\\\\d{2}$\")\n  (regexp-match? decimal-regex num))\n\n;; Test cases\n(printf \"Test case 1: ~a\\n\" (is_decimal \"123.45\")) ; should return true\n(printf \"Test case 2: ~a\\n\" (is_decimal \"123.456\")) ; should return false\n(printf \"Test case 3: ~a\\n\" (is_decimal \"123.4\")) ; should return false\n(printf \"Test case 4: ~a\\n\" (is_decimal \"abc.de\")) ; should return false\n(printf \"Test case 5: ~a\\n\" (is_decimal \"123\")) ; should return false\n(printf \"Test case 6: ~a\\n\" (is_decimal \"123.00\")) ; should return true\n```"}
{"name":"mbpp_760_unique_Element","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether a list of numbers contains only one distinct element or not.\n(define (unique_Element arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_760_unique_Element.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_Element))\n    (check-within (candidate (list 1 1 1)) #t 0.001)\n    (check-within (candidate (list 1 2 1 2)) #f 0.001)\n    (check-within (candidate (list 1 2 3 4 5)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_760_unique_Element","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether a list of numbers contains only one distinct element or not.\n(define (unique_Element arr)\n  (cond\n    [(null? arr) #t] ; if the list is empty, we consider it to have only one distinct element\n    [else\n     (let ([first-element (car arr)]) ; get the first element of the list\n       (for\/and ([elem (cdr arr)]) ; loop over the rest of the elements\n         (equal? elem first-element)))])) ; check if all elements are equal to the first element\n\n; Examples\n(unique_Element '(1 1 1 1)) ; should return #t\n(unique_Element '(5 5 5)) ; should return #t\n(unique_Element '(1 2 1 1)) ; should return #f\n(unique_Element '()) ; should return #t\n(unique_Element '(2)) ; should return #t\n```"}
{"name":"mbpp_762_check_monthnumber_number","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n(define (check_monthnumber_number monthnum3)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_762_check_monthnumber_number.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_monthnumber_number))\n    (check-within (candidate 6) #t 0.001)\n    (check-within (candidate 2) #f 0.001)\n    (check-within (candidate 12) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_762_check_monthnumber_number","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the given month number contains 30 days or not. \n;; Months are given as numbers from 1 to 12.\n(define (check_monthnumber_number monthnum)\n  (cond\n    [(member monthnum '(4 6 9 11)) #t]  ; April, June, September, and November have 30 days.\n    [(member monthnum '(1 3 5 7 8 10 12)) #f]  ; January, March, May, July, August, October, and December do not have 30 days.\n    [else (error \"Invalid month number\")]))  ; February or any other invalid month number.\n\n;; Examples\n(check_monthnumber_number 4)  ; => #t (April)\n(check_monthnumber_number 2)  ; => error \"Invalid month number\" (February)\n(check_monthnumber_number 11) ; => #t (November)\n(check_monthnumber_number 7)  ; => #f (July)\n```"}
{"name":"mbpp_763_find_min_diff","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the minimum difference between any two elements in a given list. https:\/\/www.geeksforgeeks.org\/find-minimum-difference-pair\/\n(define (find_min_diff arr n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_763_find_min_diff.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_min_diff))\n    (check-within (candidate (list 1 5 3 19 18 25) 6) 1 0.001)\n    (check-within (candidate (list 4 3 2 6) 4) 1 0.001)\n    (check-within (candidate (list 30 5 20 9) 4) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_763_find_min_diff","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to find the minimum difference between any two elements in a given list.\n;; Reference: https:\/\/www.geeksforgeeks.org\/find-minimum-difference-pair\/\n\n(define (find_min_diff arr n)\n  (define sorted-arr (sort arr <))\n  (define min-diff (for\/fold ([min-diff +inf.0]) ([i (in-range (- n 1))])\n                     (min min-diff (- (list-ref sorted-arr (+ i 1)) (list-ref sorted-arr i)))))\n  min-diff)\n\n;; Test cases\n(define arr '(1 5 3 19 18 25))\n(find_min_diff arr (length arr)) ; Should return 1 which is the minimum difference between 18 and 19 \n\n(define arr2 '(30 5 20 9))\n(find_min_diff arr2 (length arr2)) ; Should return 4 which is the minimum difference between 5 and 9\n\n(define arr3 '(1 19 -4 31 38 25 100))\n(find_min_diff arr3 (length arr3)) ; Should return 5 which is the minimum difference between 1 and -4\n```"}
{"name":"mbpp_764_number_ctr","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count number of digits in a given string.\n(define (number_ctr str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_764_number_ctr.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate number_ctr))\n    (check-within (candidate \"program2bedone\") 1 0.001)\n    (check-within (candidate \"3wonders\") 1 0.001)\n    (check-within (candidate \"123\") 3 0.001)\n    (check-within (candidate \"3wond-1ers2\") 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_764_number_ctr","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to count number of digits in a given string.\n(define (number_ctr str)\n  (define (char-is-digit? c)\n    (char-numeric? c))\n  (length (filter char-is-digit? (string->list str))))\n```\n\nThis function `number_ctr` takes a string as input, converts it into a list of characters, filters out the digit characters using `char-is-digit?` (which checks if a character is numeric), and then returns the length of the resulting list, which is the count of digits in the string."}
{"name":"mbpp_765_is_polite","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find nth polite number. geeksforgeeks.org\/n-th-polite-number\/\n(define (is_polite n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_765_is_polite.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_polite))\n    (check-within (candidate 7) 11 0.001)\n    (check-within (candidate 4) 7 0.001)\n    (check-within (candidate 9) 13 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_765_is_polite","gpt_solution":"```racket\n#lang racket\n\n;; A polite number is a number that can be written as the sum of two or more consecutive positive integers.\n;; This function checks if a number is a polite number\n(define (is_polite n)\n  (define (consecutive-sum? n k)\n    (let loop ((i 1) (sum 0))\n      (cond\n        [(and (<= i k) (= sum n)) #t]\n        [(> sum n) #f]\n        [else (loop (add1 i) (+ sum i))])))\n  (for\/or ([k (in-naturals 2)])\n    (consecutive-sum? n k)))\n\n;; This function returns the nth polite number where n is a positive integer\n(define (nth-polite n)\n  (define polite-count 0)\n  (define number 1)\n  (let loop ()\n    (if (>= polite-count n)\n        (sub1 number)\n        (begin\n          (set! number (add1 number))\n          (when (is_polite number)\n            (set! polite-count (add1 polite-count)))\n          (loop)))))\n\n;; Example usage\n(nth-polite 5) ; should return the 5th polite number\n```"}
{"name":"mbpp_766_pair_wise","language":"rkt","prompt":"#lang racket\n\n;; Write a function to return a list of all pairs of consecutive items in a given list.\n(define (pair_wise l1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_766_pair_wise.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pair_wise))\n    (check-within (candidate (list 1 1 2 3 3 4 4 5)) (list (list 1 1) (list 1 2) (list 2 3) (list 3 3) (list 3 4) (list 4 4) (list 4 5)) 0.001)\n    (check-within (candidate (list 1 5 7 9 10)) (list (list 1 5) (list 5 7) (list 7 9) (list 9 10)) 0.001)\n    (check-within (candidate (list 5 1 9 7 10)) (list (list 5 1) (list 1 9) (list 9 7) (list 7 10)) 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list (list 1 2) (list 2 3) (list 3 4) (list 4 5) (list 5 6) (list 6 7) (list 7 8) (list 8 9) (list 9 10)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_766_pair_wise","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to return a list of all pairs of consecutive items in a given list.\n(define (pair_wise l1)\n  (cond\n    [(or (null? l1) (null? (cdr l1))) '()]  ; If the list has fewer than 2 elements, return an empty list\n    [else (cons (list (car l1) (cadr l1))\n                (pair_wise (cdr l1))))]))  ; Add the pair of the first two elements to the result of recursive call\n```"}
{"name":"mbpp_767_get_pairs_count","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n(define (get_pairs_count arr sum)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_767_get_pairs_count.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_pairs_count))\n    (check-within (candidate (list 1 1 1 1) 2) 6 0.001)\n    (check-within (candidate (list 1 5 7 -1 5) 6) 3 0.001)\n    (check-within (candidate (list 1 -2 3) 1) 1 0.001)\n    (check-within (candidate (list -1 -2 3) -3) 1 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_767_get_pairs_count","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n;; The function gets as input a list of numbers and the sum.\n(define (get_pairs_count arr sum)\n  ;; Helper function to count pairs\n  (define (count-pairs lst s)\n    (if (null? lst)\n        0\n        (+ (length (filter (lambda (x) (= (+ (car lst) x) s)) (cdr lst)))\n           (count-pairs (cdr lst) s))))\n  (count-pairs arr sum))\n\n;; Example usage:\n(get_pairs_count '(1 5 7 -1 5) 6)  ; should return 3 because there are three pairs (1,5) (7,-1) and (1,5)\n(get_pairs_count '(1 2 3 4 3) 6)  ; should return 2 because there are two pairs (2,4) and (3,3)\n(get_pairs_count '() 5)           ; should return 0 because the list is empty\n```\n\nThis code defines the `get_pairs_count` function in Racket that computes the number of pairs in a given list whose sum matches the specified `sum`. The usage examples at the end demonstrate how to call the function with different inputs."}
{"name":"mbpp_769_Diff","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to get the difference between two lists.\n(define (Diff li1 li2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_769_Diff.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Diff))\n    (check-within (candidate (list 10 15 20 25 30 35 40) (list 25 40 35)) (list 10 20 30 15) 0.001)\n    (check-within (candidate (list 1 2 3 4 5) (list 6 7 1)) (list 2 3 4 5 6 7) 0.001)\n    (check-within (candidate (list 1 2 3) (list 6 7 1)) (list 2 3 6 7) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_769_Diff","gpt_solution":"```racket\n#lang racket\n\n;; Function to get the difference between two lists.\n;; It returns a list of elements that are in li1 but not in li2.\n(define (Diff li1 li2)\n  (filter (lambda (x) (not (member x li2))) li1))\n\n;; Example usage:\n;; (Diff '(1 2 3 4) '(3 4 5 6)) should return '(1 2)\n```"}
{"name":"mbpp_770_odd_num_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of fourth power of first n odd natural numbers.\n(define (odd_num_sum n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_770_odd_num_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_num_sum))\n    (check-within (candidate 2) 82 0.001)\n    (check-within (candidate 3) 707 0.001)\n    (check-within (candidate 4) 3108 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_770_odd_num_sum","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the sum of fourth power of the first n odd natural numbers.\n(define (odd_num_sum n)\n  (define (odd k)\n    (+ (* 2 k) 1))\n  (define (fourth-power x)\n    (* x x x x))\n  (define (helper k sum)\n    (if (= k 0)\n        sum\n        (let ((odd-number (odd (- k 1))))\n          (helper (- k 1) (+ sum (fourth-power odd-number))))))\n  (helper n 0))\n\n;; Example usage:\n;; Compute the sum of the fourth powers of the first 3 odd natural numbers\n(odd_num_sum 3)\n```\n\nThis code defines the function `odd_num_sum` which calculates the sum of the fourth power of the first `n` odd natural numbers using a helper function to handle iteration and accumulate the result recursively."}
{"name":"mbpp_771_check_expression","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if the given expression is balanced or not. https:\/\/www.geeksforgeeks.org\/check-for-balanced-parentheses-in-an-expression\/\n(define (check_expression exp)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_771_check_expression.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_expression))\n    (check-within (candidate \"{()}[{}]\") #t 0.001)\n    (check-within (candidate \"{()}[{]\") #f 0.001)\n    (check-within (candidate \"{()}[{}][]({})\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_771_check_expression","gpt_solution":"```racket\n#lang racket\n\n;; Function to check if the given expression is balanced or not\n(define (check_expression exp)\n  (define (check-helper exp stack)\n    (cond\n      [(empty? exp) (empty? stack)]\n      [(member (first exp) '(#\\{ #\\[ #\\( ))\n       (check-helper (rest exp) (cons (first exp) stack))]\n      [(member (first exp) '(#\\} #\\] #\\) ))\n       (if (empty? stack)\n           #f\n           (let ([top (first stack)])\n             (cond\n               [(and (eq? top #\\{) (eq? (first exp) #\\})) #f]\n               [(and (eq? top #\\[) (eq? (first exp) #\\})) #f]\n               [(and (eq? top #\\() (eq? (first exp) #\\})) #f]\n               [(or (and (eq? top #\\{) (eq? (first exp) #\\}))\n                    (and (eq? top #\\[) (eq? (first exp) #\\]))\n                    (and (eq? top #\\() (eq? (first exp) #\\))))\n                (check-helper (rest exp) (rest stack))]\n               [else #f])))]\n      [else (check-helper (rest exp) stack)]))\n\n  (check-helper (string->list exp) '()))\n\n;; Examples:\n(check_expression \"{[()]}\")  ; => #t\n(check_expression \"{[(])}\")  ; => #f\n(check_expression \"{{[[(())]]}}\")  ; => #t\n```"}
{"name":"mbpp_772_remove_length","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove all the words with k length in the given string.\n(define (remove_length test_str K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_772_remove_length.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_length))\n    (check-within (candidate \"The person is most value tet\" 3) \"person is most value\" 0.001)\n    (check-within (candidate \"If you told me about this ok\" 4) \"If you me about ok\" 0.001)\n    (check-within (candidate \"Forces of darkeness is come into the play\" 4) \"Forces of darkeness is the\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_772_remove_length","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove all the words with k length in the given string.\n(define (remove_length test_str K)\n  (define words (string-split test_str))\n  (define filtered-words (filter (lambda (word) (not (= (string-length word) K))) words))\n  (string-join filtered-words \" \"))\n\n;; Example usage:\n(remove_length \"This is an example string\" 2)    ;; Output: \"This an example string\"\n(remove_length \"Hello world, this is Racket\" 5)  ;; Output: \"world, this is\"\n```"}
{"name":"mbpp_773_occurance_substring","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the occurrence and position of the substrings within a string. Return #f if there is no match.\n(define (occurance_substring text pattern)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_773_occurance_substring.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate occurance_substring))\n    (check-within (candidate \"python programming, python language\" \"python\") (list \"python\" 0 6) 0.001)\n    (check-within (candidate \"python programming,programming language\" \"programming\") (list \"programming\" 7 18) 0.001)\n    (check-within (candidate \"python programming,programming language\" \"language\") (list \"language\" 31 39) 0.001)\n    (check-within (candidate \"c++ programming, c++ language\" \"python\") #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_773_occurance_substring","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the occurrence and position of the substrings within a string. \n;; Return #f if there is no match.\n(define (occurance_substring text pattern)\n  (define (helper start-pos acc)\n    (let ((pos (regexp-match-positions (regexp-quote pattern) text start-pos)))\n      (if pos\n          (let ((match-pos (caar pos)))\n            (helper (+ match-pos 1) (append acc (list (list match-pos)))))\n          (if (null? acc)\n              #f\n              acc))))\n  (helper 0 '()))\n\n;; Example usage:\n;; (occurance_substring \"ababcabc\" \"abc\")\n;; Output: '((2) (5))\n```\n\nThis code defines a function `occurance_substring` that searches for all occurrences of a given `pattern` within a `text` string. If no matches are found, it returns `#f`. Otherwise, it returns a list of the starting positions of each occurrence of `pattern` in `text`. The `helper` function is used internally to iterate through the text and collect match positions."}
{"name":"mbpp_775_odd_position","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether every odd index contains odd numbers of a given list.\n(define (odd_position nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_775_odd_position.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_position))\n    (check-within (candidate (list 2 1 4 3 6 7 6 3)) #t 0.001)\n    (check-within (candidate (list 4 1 2)) #t 0.001)\n    (check-within (candidate (list 1 2 3)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_775_odd_position","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether every odd index contains odd numbers of a given list.\n(define (odd_position nums)\n  (define (helper lst idx)\n    (cond\n      [(empty? lst) #t]  ;; If the list is empty, all checks passed\n      [(odd? idx)\n       (if (odd? (first lst))\n           (helper (rest lst) (+ idx 1))\n           #f)]\n      [else (helper (rest lst) (+ idx 1))]))\n  (helper nums 0))\n\n;; Example usage:\n;; (odd_position '(2 3 4 5 6 7)) => #t (odd index positions are 1 and 3, both contain odd numbers 3 and 5)\n;; (odd_position '(2 4 6 8)) => #t (no odd numbers at odd index positions in an even-length list)\n;; (odd_position '(1 4 3 6 5 8)) => #f (index 1 has 4 which is not an odd number)\n```"}
{"name":"mbpp_776_count_vowels","language":"rkt","prompt":"#lang racket\n\n;; Write a function to count those characters which have vowels as their neighbors in the given string.\n(define (count_vowels test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_776_count_vowels.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_vowels))\n    (check-within (candidate \"bestinstareels\") 7 0.001)\n    (check-within (candidate \"partofthejourneyistheend\") 12 0.001)\n    (check-within (candidate \"amazonprime\") 5 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_776_count_vowels","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to count those characters which have vowels as their neighbors in the given string.\n(define (count_vowels test_str)\n  (define vowels (set \"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n  \n  (define (is-vowel? char)\n    (set-member? vowels char))\n  \n  (define (has-vowel-neighbor? str idx)\n    (or (and (> idx 0) (is-vowel? (string-ref str (- idx 1))))\n        (and (< idx (- (string-length str) 1)) (is-vowel? (string-ref str (+ idx 1))))))\n  \n  (define (count-helper str idx count)\n    (if (>= idx (string-length str))\n        count\n        (if (has-vowel-neighbor? str idx)\n            (count-helper str (+ idx 1) (+ count 1))\n            (count-helper str (+ idx 1) count))))\n  \n  (count-helper test_str 0 0))\n\n;; Example usage:\n(count_vowels \"hello\")    ;; -> 3\n(count_vowels \"abcde\")    ;; -> 2\n(count_vowels \"xyz\")      ;; -> 0\n```"}
{"name":"mbpp_777_find_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_777_find_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_sum))\n    (check-within (candidate (list 1 2 3 1 1 4 5 6)) 21 0.001)\n    (check-within (candidate (list 1 10 9 4 2 10 10 45 4)) 71 0.001)\n    (check-within (candidate (list 12 10 9 45 2 10 10 45 10)) 78 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_777_find_sum","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the sum of non-repeated elements in a given list.\n(define (find_sum arr)\n  (define (counts lst)\n    (foldl (lambda (x acc)\n             (hash-update acc x (lambda (y) (+ y 1)) 1))\n           (make-hash)\n           lst))\n  (define items-count (counts arr))\n  (apply +\n         (filter (lambda (x) (= (hash-ref items-count x) 1))\n                 arr)))\n\n;; Example usage:\n;; (find_sum '(1 2 2 3 4 4 5)) ;; => 1 + 3 + 5 = 9\n```"}
{"name":"mbpp_778_pack_consecutive_duplicates","language":"rkt","prompt":"#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_778_pack_consecutive_duplicates.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-within (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)) 0.001)\n    (check-within (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)) 0.001)\n    (check-within (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_778_pack_consecutive_duplicates","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack-consecutive-duplicates list1)\n  (define (pack-helper lst current-pack result)\n    (cond [(empty? lst) (reverse (cons (reverse current-pack) result))]\n          [(empty? current-pack) (pack-helper (rest lst) (list (first lst)) result)]\n          [(equal? (first lst) (first current-pack))\n           (pack-helper (rest lst) (cons (first lst) current-pack) result)]\n          [else (pack-helper (rest lst) (list (first lst)) \n                             (cons (reverse current-pack) result))]))\n  (pack-helper list1 '() '()))\n\n;; Example usage:\n(pack-consecutive-duplicates '(a a a a b c c a a d e e e e))\n;; Returns '((a a a a) (b) (c c) (a a) (d) (e e e e))\n```"}
{"name":"mbpp_780_find_combinations","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the combinations of sums with lists in the given list list. https:\/\/www.geeksforgeeks.org\/rktthon-combinations-of-sum-with-lists-in-list-list\/\n(define (find_combinations test_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_780_find_combinations.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_combinations))\n    (check-within (candidate (list (list 2 4) (list 6 7) (list 5 1) (list 6 10))) (list (list 8 11) (list 7 5) (list 8 14) (list 11 8) (list 12 17) (list 11 11)) 0.001)\n    (check-within (candidate (list (list 3 5) (list 7 8) (list 6 2) (list 7 11))) (list (list 10 13) (list 9 7) (list 10 16) (list 13 10) (list 14 19) (list 13 13)) 0.001)\n    (check-within (candidate (list (list 4 6) (list 8 9) (list 7 3) (list 8 12))) (list (list 12 15) (list 11 9) (list 12 18) (list 15 12) (list 16 21) (list 15 15)) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_780_find_combinations","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the combinations of sums with lists in the given list list. \n;; https:\/\/www.geeksforgeeks.org\/rktthon-combinations-of-sum-with-lists-in-list-list\/\n(define (find_combinations test_list)\n  (define (helper sub_list)\n    (if (null? sub_list)\n        '(())\n        (let* ((head (car sub_list))\n               (rest_combinations (helper (cdr sub_list)))\n               (new_combinations (map (lambda (x) (cons head x)) rest_combinations)))\n          (append rest_combinations new_combinations))))\n  (define (sum_list lst)\n    (foldl + 0 lst))\n  (map sum_list (helper test_list)))\n\n;; Example usage:\n(find_combinations (list 1 2 3))\n;; Output: '(0 3 2 5 1 4 3 6)\n```\n\nThis function `find_combinations` generates all possible combinations of sums with lists in the given list `test_list`. The helper function creates all subsets of the list, and `sum_list` computes the sum of elements in each subset. The final output is the list of sums for each of the subsets."}
{"name":"mbpp_781_count_divisors","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether the count of divisors is even. https:\/\/www.w3resource.com\/rktthon-exercises\/basic\/rktthon-basic-1-exercise-24.php\n(define (count_divisors n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_781_count_divisors.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_divisors))\n    (check-within (candidate 10) #t 0.001)\n    (check-within (candidate 100) #f 0.001)\n    (check-within (candidate 125) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_781_count_divisors","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether the count of divisors is even\n(define (count-divisors n)\n  (define (count-divisors-helper n i count)\n    (if (> i n)\n        count\n        (if (= (remainder n i) 0)\n            (count-divisors-helper n (add1 i) (add1 count))\n            (count-divisors-helper n (add1 i) count))))\n  (define total-count (count-divisors-helper n 1 0))\n  (even? total-count))\n\n;; Examples to test the function\n(count-divisors 12)  ; should return #t because 12 has 6 divisors (1, 2, 3, 4, 6, 12)\n(count-divisors 15)  ; should return #f because 15 has 4 divisors (1, 3, 5, 15)\n```"}
{"name":"mbpp_782_odd_length_sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of all odd length sublists. https:\/\/www.geeksforgeeks.org\/sum-of-all-odd-length-sublists\/\n(define (odd_length_sum arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_782_odd_length_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_length_sum))\n    (check-within (candidate (list 1 2 4)) 14 0.001)\n    (check-within (candidate (list 1 2 1 2)) 15 0.001)\n    (check-within (candidate (list 1 7)) 8 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_782_odd_length_sum","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the sum of all odd length sublists.\n;; Reference: https:\/\/www.geeksforgeeks.org\/sum-of-all-odd-length-sublists\/\n\n(define (odd-length-sublists lst)\n  ;; Helper function to generate all sublists of a given length\n  (define (sublists-of-length lst len)\n    (if (< (length lst) len)\n        '()\n        (cons (take lst len)\n              (sublists-of-length (rest lst) len))))\n  \n  ;; Helper function to generate all odd-length sublists\n  (define (generate-odd-length-sublists lst)\n    (define max-length (length lst))\n    (define odd-lengths (filter odd? (range 1 (+ max-length 1))))\n    (apply append (map (lambda (len) (sublists-of-length lst len)) odd-lengths)))\n\n  ;; Calculate the sum of all elements in the list of sublists\n  (define (sum s)\n    (foldl + 0 s))\n  \n  (define all-odd-sublists (generate-odd-length-sublists lst))\n  (define all-sublists-sum (map (lambda (sublist) (sum sublist)) all-odd-sublists))\n  (sum all-sublists-sum))\n\n;; Example usage:\n(define my-list (list 1 2 3 4 5))\n(odd-length-sublists my-list) ; This will output the sum of all odd length sublists\n```\n\nThis code defines a function `odd-length-sublists` that sums all the odd length sublists of a given list. The helper functions `sublists-of-length` and `generate-odd-length-sublists` are used to generate the sublists, and the `sum` function computes the final sum of all these sublists' elements. The example usage at the end demonstrates how to call the function."}
{"name":"mbpp_783_rgb_to_hsv","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert rgb color to hsv color. https:\/\/www.geeksforgeeks.org\/program-change-rgb-color-model-hsv-color-model\/\n(define (rgb_to_hsv r g b)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_783_rgb_to_hsv.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rgb_to_hsv))\n    (check-within (candidate 255 255 255) (list 0.0 0.0 100.0) 0.001)\n    (check-within (candidate 0 215 0) (list 120.0 100.0 84.31372549019608) 0.001)\n    (check-within (candidate 10 215 110) (list 149.26829268292684 95.34883720930233 84.31372549019608) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_783_rgb_to_hsv","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert rgb color to hsv color. https:\/\/www.geeksforgeeks.org\/program-change-rgb-color-model-hsv-color-model\/\n(define (rgb_to_hsv r g b)\n  (let* ([r-norm (\/ r 255.0)]\n         [g-norm (\/ g 255.0)]\n         [b-norm (\/ b 255.0)]\n         [cmax (max r-norm g-norm b-norm)]\n         [cmin (min r-norm g-norm b-norm)]\n         [delta (- cmax cmin)]\n         [h (cond\n              [(= delta 0) 0]\n              [(= cmax r-norm) (modulo (\/ (* 60 (- g-norm b-norm)) delta) 360)]\n              [(= cmax g-norm) (+ (\/ (* 60 (- b-norm r-norm)) delta) 120)]\n              [(= cmax b-norm) (+ (\/ (* 60 (- r-norm g-norm)) delta) 240)])]\n         [s (if (= cmax 0)\n                0\n                (\/ delta cmax))]\n         [v cmax])\n    (list h s v)))\n```"}
{"name":"mbpp_784_mul_even_odd","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find the product of first even and odd number of a given list.\n(define (mul_even_odd list1)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_784_mul_even_odd.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mul_even_odd))\n    (check-within (candidate (list 1 3 5 7 4 1 6 8)) 4 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6 7 8 9 10)) 2 0.001)\n    (check-within (candidate (list 1 5 7 9 10)) 10 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_784_mul_even_odd","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the product of first even and odd number of a given list.\n(define (mul_even_odd list1)\n  (define (find-first-even lst)\n    (cond\n      [(empty? lst) #f]\n      [(even? (first lst)) (first lst)]\n      [else (find-first-even (rest lst))]))\n  (define (find-first-odd lst)\n    (cond\n      [(empty? lst) #f]\n      [(odd? (first lst)) (first lst)]\n      [else (find-first-odd (rest lst))]))\n  (define first-even (find-first-even list1))\n  (define first-odd (find-first-odd list1))\n  (if (and first-even first-odd)\n      (* first-even first-odd)\n      'no-product))\n\n;; Example usage \n(mul_even_odd '(1 2 3 4 5)) ; Returns 2 (first even is 2 and first odd is 1)\n(mul_even_odd '(2 4 6 8 1 3 5)) ; Returns 2 (first even is 2 and first odd is 1)\n(mul_even_odd '(1 3 5 7)) ; Returns 'no-product\n(mul_even_odd '(2 4 6 8)) ; Returns 'no-product\n```"}
{"name":"mbpp_785_tuple_str_int","language":"rkt","prompt":"#lang racket\n\n;; Write a function to convert list string to integer list.\n(define (tuple_str_int test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_785_tuple_str_int.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_str_int))\n    (check-within (candidate \"(7, 8, 9)\") (list 7 8 9) 0.001)\n    (check-within (candidate \"(1, 2, 3)\") (list 1 2 3) 0.001)\n    (check-within (candidate \"(4, 5, 6)\") (list 4 5 6) 0.001)\n    (check-within (candidate \"(7, 81, 19)\") (list 7 81 19) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_785_tuple_str_int","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to convert list string to integer list.\n(define (tuple_str_int test_str)\n  (map string->number (read (open-input-string test_str))))\n\n;; Example usage\n(tuple_str_int \"(1 2 3 4)\") ;; => '(1 2 3 4)\n(tuple_str_int \"(10 20 30 40)\") ;; => '(10 20 30 40)\n```"}
{"name":"mbpp_786_right_insertion","language":"rkt","prompt":"#lang racket\n\n;; Write a function to locate the right insertion point for a specified value in sorted order.\n(define (right_insertion a x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_786_right_insertion.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_insertion))\n    (check-within (candidate (list 1 2 4 5) 6) 4 0.001)\n    (check-within (candidate (list 1 2 4 5) 3) 2 0.001)\n    (check-within (candidate (list 1 2 4 5) 7) 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_786_right_insertion","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to locate the right insertion point for a specified value in sorted order.\n(define (right_insertion a x)\n  (let loop ((low 0)\n             (high (length a)))\n    (if (<= low high)\n        (let ((mid (quotient (+ low high) 2)))\n          (cond\n            [(= mid (length a)) mid]\n            [(<= (list-ref a mid) x)\n             (loop (+ mid 1) high)]\n            [else\n             (loop low (- mid 1))]))\n        low)))\n\n;; Helper function for testing right_insertion\n(define (test-right-insertion)\n  (define sorted-list '(1 2 4 4 4 5 6 7))\n  (displayln (right_insertion sorted-list 4))     ;; Output should be 5\n  (displayln (right_insertion sorted-list 3))     ;; Output should be 2\n  (displayln (right_insertion sorted-list 8))     ;; Output should be 8\n  (displayln (right_insertion sorted-list 0)))    ;; Output should be 0\n\n;; Running the test helper function\n(test-right-insertion)\n```\n\nThis code defines a function `right_insertion` that locates the rightmost insertion point for a specified value `x` in a sorted list `a`. The function uses a binary search method to efficiently determine the correct index at which to insert `x` while maintaining sorted order. The `test-right-insertion` helper function provides a way to test the correctness of the `right_insertion` function with various inputs."}
{"name":"mbpp_787_text_match_three","language":"rkt","prompt":"#lang racket\n\n;; Write a function that matches a string that has an a followed by three 'b'.\n(define (text_match_three text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_787_text_match_three.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_three))\n    (check-within (candidate \"ac\") #f 0.001)\n    (check-within (candidate \"dc\") #f 0.001)\n    (check-within (candidate \"abbbba\") #t 0.001)\n    (check-within (candidate \"caacabbbba\") #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_787_text_match_three","gpt_solution":"Here is the complete code for the function `text_match_three` wrapped in markdown syntax:\n\n```racket\n#lang racket\n\n;; Write a function that matches a string that has an 'a' followed by three 'b's.\n(define (text_match_three text)\n  (let ([pattern (regexp \"ab{3}\")])\n    (regexp-match? pattern text)))\n\n;; Test cases\n(displayln (text_match_three \"abbb\")) ; #t\n(displayln (text_match_three \"aabb\")) ; #f\n(displayln (text_match_three \"abbbb\")) ; #t\n(displayln (text_match_three \"ab\")) ; #f\n(displayln (text_match_three \"bbba\")) ; #f\n```\n\nExplanation:\n- We define a function `text_match_three` that takes a string `text` as input.\n- The function uses the `regexp` function to create a regular expression pattern that matches 'a' followed by exactly three 'b's (`\"ab{3}\"`).\n- The `regexp-match?` function checks if the `pattern` matches the input `text`.\n- Some test cases are provided to verify the function's behavior."}
{"name":"mbpp_788_new_tuple","language":"rkt","prompt":"#lang racket\n\n;; Write a function to create a new list from the given string and list.\n(define (new_tuple test_list test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_788_new_tuple.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate new_tuple))\n    (check-within (candidate (list \"WEB\" \"is\") \"best\") (list \"WEB\" \"is\" \"best\") 0.001)\n    (check-within (candidate (list \"We\" \"are\") \"Developers\") (list \"We\" \"are\" \"Developers\") 0.001)\n    (check-within (candidate (list \"Part\" \"is\") \"Wrong\") (list \"Part\" \"is\" \"Wrong\") 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_788_new_tuple","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to create a new list from the given string and list.\n(define (new_tuple test_list test_str)\n  (cons test_str test_list))\n```\n\nThis function `new_tuple` takes a list and a string, and creates a new list where the string is the first element, followed by the elements of the given list. \n\nFor example:\n```racket\n(new_tuple '(1 2 3) \"start\")  ; => '(\"start\" 1 2 3)\n```"}
{"name":"mbpp_790_even_position","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_790_even_position.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-within (candidate (list 3 2 1)) #f 0.001)\n    (check-within (candidate (list 1 2 3)) #f 0.001)\n    (check-within (candidate (list 2 1 4)) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_790_even_position","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether every even index contains even numbers of a given list.\n(define (even-position nums)\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (for\/and ([i (in-range (length nums))])\n    (if (even? i)\n        (even? (list-ref nums i))\n        #t)))\n\n;; Example usage:\n(even-position '(2 3 4 5 6))  ;; Should return #t because elements at even indices (0, 2, 4) are 2, 4, 6 which are all even\n(even-position '(2 3 3 5 6))  ;; Should return #f because the element at index 2 is 3, which is not even\n```"}
{"name":"mbpp_791_remove_nested","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove lists from the given list.\n(define (remove_nested test_tup)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_791_remove_nested.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_nested))\n    (check-within (candidate (list 1 5 7 (list 4 6) 10)) (list 1 5 7 10) 0.001)\n    (check-within (candidate (list 2 6 8 (list 5 7) 11)) (list 2 6 8 11) 0.001)\n    (check-within (candidate (list 3 7 9 (list 6 8) 12)) (list 3 7 9 12) 0.001)\n    (check-within (candidate (list 3 7 9 (list 6 8) (list 5 12) 12)) (list 3 7 9 12) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_791_remove_nested","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove lists from the given list.\n(define (remove_nested test_tup)\n  (filter (lambda (x) (not (list? x))) test_tup))\n\n;; Example usage:\n;; (remove_nested '(1 2 (3 4) 5 '(6 7)))\n;; Should return: '(1 2 5)\n```"}
{"name":"mbpp_792_count_list","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of lists in a given number of lists.\n(define (count_list input_list)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_792_count_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_list))\n    (check-within (candidate (list (list 1 3) (list 5 7) (list 9 11) (list 13 15 17))) 4 0.001)\n    (check-within (candidate (list (list 1 2) (list 2 3) (list 4 5))) 3 0.001)\n    (check-within (candidate (list (list 1 0) (list 2 0))) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_792_count_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a rktthon function to count the number of lists in a given number of lists.\n(define (count_list input_list)\n  (define (helper lst count)\n    (cond\n      [(empty? lst) count]\n      [(list? (first lst)) (helper (rest lst) (+ count 1))]\n      [else (helper (rest lst) count)]))\n  (helper input_list 0))\n```\n\nThis Racket function `count_list` takes an `input_list` and counts the number of lists within it. The `helper` function is used to recursively traverse the input list, checking each element to see if it is a list and incrementing the count accordingly."}
{"name":"mbpp_793_last","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the last position of an element in a sorted list.\n(define (last arr x)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_793_last.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate last))\n    (check-within (candidate (list 1 2 3) 1) 0 0.001)\n    (check-within (candidate (list 1 1 1 2 3 4) 1) 2 0.001)\n    (check-within (candidate (list 2 3 2 3 6 8 9) 3) 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_793_last","gpt_solution":"```racket\n#lang racket\n\n;; Function to find the last position of an element x in a sorted list arr.\n(define (last arr x)\n  (let loop ([arr arr] [idx -1] [pos 0])\n    (cond\n      [(empty? arr) idx]\n      [(equal? (first arr) x) (loop (rest arr) pos (add1 pos))]\n      [else (loop (rest arr) idx (add1 pos))])))\n\n;; Test the function\n(define test-list '(1 2 2 3 4 4 4 5 6 6))\n(last test-list 4) ;; Should return 6\n(last test-list 2) ;; Should return 2\n(last test-list 5) ;; Should return 7\n(last test-list 7) ;; Should return -1 since 7 is not in the list\n```\n\nThis code defines a function `last` which finds the last position of `x` in the sorted list `arr`. It returns the index of the last occurrence of `x`, or `-1` if `x` is not found. The function uses a recursive helper function `loop` which traverses the list while keeping track of the current index and the position of the last found occurrence of `x`."}
{"name":"mbpp_794_text_starta_endb","language":"rkt","prompt":"#lang racket\n\n;; Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n(define (text_starta_endb text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_794_text_starta_endb.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_starta_endb))\n    (check-within (candidate \"aabbbb\") #t 0.001)\n    (check-within (candidate \"aabAbbbc\") #f 0.001)\n    (check-within (candidate \"accddbbjjj\") #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_794_text_starta_endb","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n(define (text_starta_endb text)\n  (define pattern \"a.*b$\")\n  (regexp-match? pattern text))\n```\nThis Racket function `text_starta_endb` checks if a given string `text` starts with 'a', followed by any sequence of characters, and ends with 'b'. It uses regular expressions to perform this check."}
{"name":"mbpp_796_return_sum","language":"rkt","prompt":"#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_796_return_sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate return_sum))\n    (check-within (candidate #hash((\"a\" .  100) (\"b\" .  200) (\"c\" .  300))) 600 0.001)\n    (check-within (candidate #hash((\"a\" .  25) (\"b\" .  18) (\"c\" .  45))) 88 0.001)\n    (check-within (candidate #hash((\"a\" .  36) (\"b\" .  39) (\"c\" .  49))) 124 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_796_return_sum","gpt_solution":"```racket\n#lang racket\n\n;; Write function to find the sum of all items in the given hash.\n(define (return_sum dict)\n  (define values (hash-values dict))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (sum values))\n\n;; Example usage:\n(define example-hash (hash 'a 1 'b 2 'c 3))\n(return_sum example-hash) ; This should return 6\n```"}
{"name":"mbpp_797_sum_in_range","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of all odd natural numbers within the range l and r.\n(define (sum_in_range l r)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_797_sum_in_range.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_in_range))\n    (check-within (candidate 2 5) 8 0.001)\n    (check-within (candidate 5 7) 12 0.001)\n    (check-within (candidate 7 13) 40 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_797_sum_in_range","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the sum of all odd natural numbers within the range l and r.\n(define (sum-in-range l r)\n  (define (is-odd? n)\n    (not (even? n)))\n  (define (sum-odd-numbers start end)\n    (if (> start end)\n        0\n        (if (is-odd? start)\n            (+ start (sum-odd-numbers (+ start 2) end))\n            (sum-odd-numbers (+ start 1) end))))\n  (sum-odd-numbers l r))\n\n;; Example usage\n(sum-in-range 1 10)  ; Expected output: 25 (1 + 3 + 5 + 7 + 9)\n(sum-in-range 4 10)  ; Expected output: 21 (5 + 7 + 9)\n(sum-in-range 10 10) ; Expected output: 0 (no odd numbers in range)\n```\n\nThis Racket code defines a function `sum-in-range` that calculates the sum of all odd natural numbers within the given inclusive range `l` to `r`. It includes a helper function `is-odd?` to determine if a number is odd and a tail-recursive function `sum-odd-numbers` to sum up the odd numbers in the specified range."}
{"name":"mbpp_798__sum","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the sum of a list.\n(define (_sum arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_798__sum.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate _sum))\n    (check-within (candidate (list 1 2 3)) 6 0.001)\n    (check-within (candidate (list 15 12 13 10)) 50 0.001)\n    (check-within (candidate (list 0 1 2)) 3 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_798__sum","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the sum of a list.\n(define (_sum arr)\n  (foldl + 0 arr))\n\n;; Example usage:\n;; (_sum '(1 2 3 4 5)) ; should return 15\n```"}
{"name":"mbpp_799_left_rotate","language":"rkt","prompt":"#lang racket\n\n;; Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n(define (left_rotate n d)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_799_left_rotate.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_rotate))\n    (check-within (candidate 16 2) 64 0.001)\n    (check-within (candidate 10 2) 40 0.001)\n    (check-within (candidate 99 3) 792 0.001)\n    (check-within (candidate 99 3) 792 0.001)\n    (check-within (candidate 1 3) 8 0.001)\n    (check-within (candidate 5 3) 40 0.001)\n    (check-within (candidate 29 3) 232 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_799_left_rotate","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bits.\n(define (left_rotate n d)\n  (let* ([mask 4294967295] ; Bitmask for 32 bits\n         [left-rotated (bitwise-and (arithmetic-shift n d) mask)]\n         [wrapped-around (arithmetic-shift n (- d 32))])\n    (bitwise-ior left-rotated wrapped-around)))\n\n;; Example usage:\n(left_rotate #b100110 2) ; Rotate left the binary number `100110` by 2 bits\n(left_rotate 6 2) ; Rotate left the decimal number 6 by 2 bits\n```\n\nThis code defines a `left_rotate` function that rotates the bits of a 32-bit number `n` to the left by `d` bits. It uses bitwise operations to perform the rotation, ensuring that the number remains within 32 bits. Note the example usages which demonstrate the function both with binary and decimal inputs."}
{"name":"mbpp_800_remove_all_spaces","language":"rkt","prompt":"#lang racket\n\n;; Write a function to remove all whitespaces from a string.\n(define (remove_all_spaces text)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_800_remove_all_spaces.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_all_spaces))\n    (check-within (candidate \"python  program\") \"pythonprogram\" 0.001)\n    (check-within (candidate \"python   programming    language\") \"pythonprogramminglanguage\" 0.001)\n    (check-within (candidate \"python                     program\") \"pythonprogram\" 0.001)\n    (check-within (candidate \"   python                     program\") \"pythonprogram\" 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_800_remove_all_spaces","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to remove all whitespaces from a string.\n(define (remove_all_spaces text)\n  (regexp-replace* #px\"\\\\s\" text \"\"))\n\n;; Example usage:\n(remove_all_spaces \"H e l l o   W o r l d\") ; => \"HelloWorld\"\n```\n\nThis Racket function `remove_all_spaces` takes a string `text` and uses a regular expression to replace all whitespace characters with an empty string, effectively removing all whitespaces from the input string."}
{"name":"mbpp_801_test_three_equal","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of equal numbers from three given integers.\n(define (test_three_equal x y z)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_801_test_three_equal.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_three_equal))\n    (check-within (candidate 1 1 1) 3 0.001)\n    (check-within (candidate -1 -2 -3) 0 0.001)\n    (check-within (candidate 1 2 2) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_801_test_three_equal","gpt_solution":"```racket\n#lang racket\n\n;; The function test_three_equal takes three integers as inputs and returns the number of integers that are equal.\n(define (test_three_equal x y z)\n  (cond\n    [(and (= x y) (= y z)) 3]  ; All three numbers are equal\n    [(or (= x y) (= y z) (= x z)) 2]  ; Any two numbers are equal\n    [else 1]))  ; None of the numbers are equal\n\n;; Examples:\n(test_three_equal 1 1 1) ;=> 3\n(test_three_equal 1 1 2) ;=> 2\n(test_three_equal 1 2 3) ;=> 1\n(test_three_equal 2 2 3) ;=> 2\n```"}
{"name":"mbpp_802_count_rotation","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to count the number of rotations required to generate a sorted list. https:\/\/www.geeksforgeeks.org\/count-of-rotations-required-to-generate-a-sorted-list\/\n(define (count_rotation arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_802_count_rotation.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_rotation))\n    (check-within (candidate (list 3 2 1)) 1 0.001)\n    (check-within (candidate (list 4 5 1 2 3)) 2 0.001)\n    (check-within (candidate (list 7 8 9 1 2 3)) 3 0.001)\n    (check-within (candidate (list 1 2 3)) 0 0.001)\n    (check-within (candidate (list 1 3 2)) 2 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_802_count_rotation","gpt_solution":"```racket\n#lang racket\n\n;; This function counts the number of rotations required to generate a sorted list\n(define (count_rotation arr)\n  (define n (length arr))\n  \n  ;; Helper function to find the index of the minimum element\n  (define (find-min-index arr low high)\n    (if (<= low high)\n        (let ((mid (quotient (+ low high) 2)))\n          (cond\n            ;; Only one element left\n            [(and (= low high) (= (list-ref arr low) (list-ref arr high))) low]\n            \n            ;; Check if mid+1 is the minimum element\n            [(and (< mid (- n 1)) (< (list-ref arr (+ mid 1)) (list-ref arr mid))) (+ mid 1)]\n            \n            ;; Check if mid itself is the minimum element\n            [(and (> mid 0) (< (list-ref arr mid) (list-ref arr (- mid 1)))) mid]\n            \n            ;; Decide whether we need to go to the left half or right half\n            [(> (list-ref arr high) (list-ref arr mid)) \n             (find-min-index arr low (- mid 1))]\n            \n            [else \n             (find-min-index arr (+ mid 1) high)]))\n        low))\n  \n  ;; Find the index of the minimum element\n  (define min-index (find-min-index arr 0 (- n 1)))\n  \n  ;; The number of rotations required will be the index of the minimum element\n  min-index)\n\n;; Example usage\n(define lst '(15 18 2 3 6 12))\n(count_rotation lst) ;; returns 2\n```\n\nExplanation:\n1. The function `count_rotation` takes a list `arr` and calculates the number of rotations required to generate a sorted list.\n2. The helper function `find-min-index` recursively finds the index of the minimum element in the list using a modified binary search approach.\n3. The final result is the index of the minimum element, which corresponds to the number of rotations needed."}
{"name":"mbpp_803_is_perfect_square","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the given number is a perfect square or not. https:\/\/www.geeksforgeeks.org\/check-if-given-number-is-perfect-square-in-cpp\/\n(define (is_perfect_square n)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_803_is_perfect_square.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_perfect_square))\n    (check-within (candidate 10) #f 0.001)\n    (check-within (candidate 36) #t 0.001)\n    (check-within (candidate 14) #f 0.001)\n    (check-within (candidate 196) #t 0.001)\n    (check-within (candidate 125) #f 0.001)\n    (check-within (candidate 15625) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_803_is_perfect_square","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check whether the given number is a perfect square or not.\n;; https:\/\/www.geeksforgeeks.org\/check-if-given-number-is-perfect-square-in-cpp\/\n(define (is_perfect_square n)\n  (define sqrt-n (sqrt n))\n  (define intval (floor sqrt-n))\n  (= (* intval intval) n))\n\n;; Test cases\n(displayln (is_perfect_square 16))   ; Should return #t\n(displayln (is_perfect_square 14))   ; Should return #f\n(displayln (is_perfect_square 25))   ; Should return #t\n(displayln (is_perfect_square 26))   ; Should return #f\n```"}
{"name":"mbpp_804_is_product_even","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check whether the product of numbers in a list is even or not.\n(define (is_product_even arr)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_804_is_product_even.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_product_even))\n    (check-within (candidate (list 1 2 3)) #t 0.001)\n    (check-within (candidate (list 1 2 1 4)) #t 0.001)\n    (check-within (candidate (list 1 1)) #f 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_804_is_product_even","gpt_solution":"```racket\n#lang racket\n\n;; Function to check whether the product of numbers in a list is even or not.\n(define (is_product_even arr)\n  (define (even? n)\n    (zero? (modulo n 2)))\n  \n  (define (helper lst)\n    (cond\n      [(empty? lst) #f]\n      [(even? (first lst)) #t]\n      [else (helper (rest lst))]))\n  \n  (helper arr))\n  \n;; Test cases\n(println (is_product_even '(1 3 5)))   ; Should return #f\n(println (is_product_even '(1 3 4)))   ; Should return #t\n(println (is_product_even '(2 3 5)))   ; Should return #t\n(println (is_product_even '()))        ; Should return #f\n```\n\nThis Racket function `is_product_even` checks if any number in the list is even. If any number is even, the product of the list will be even, so the function returns `#t`. If all numbers are odd, it returns `#f`. If the list is empty, it is treated as having no even numbers and returns `#f`."}
{"name":"mbpp_805_max_sum_list","language":"rkt","prompt":"#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_805_max_sum_list.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_list))\n    (check-within (candidate (list (list 1 2 3) (list 4 5 6) (list 10 11 12) (list 7 8 9))) (list 10 11 12) 0.001)\n    (check-within (candidate (list (list 3 2 1) (list 6 5 4) (list 12 11 10))) (list 12 11 10) 0.001)\n    (check-within (candidate (list (list 2 3 1))) (list 2 3 1) 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_805_max_sum_list","gpt_solution":"```racket\n#lang racket\n\n;; Write a function that returns the list in a list of lists whose sum of elements is the highest.\n(define (max_sum_list lists)\n  (define (sum lst)\n    (apply + lst))\n  (define (max-sum-helper lists max-list)\n    (cond\n      [(empty? lists) max-list]\n      [else\n       (let ([first-sum (sum (first lists))]\n             [max-sum (sum max-list)])\n         (if (> first-sum max-sum)\n             (max-sum-helper (rest lists) (first lists))\n             (max-sum-helper (rest lists) max-list)))]))\n  (if (empty? lists)\n      '()\n      (max-sum-helper (rest lists) (first lists))))\n```"}
{"name":"mbpp_806_max_run_uppercase","language":"rkt","prompt":"#lang racket\n\n;; Write a function to find maximum run of uppercase characters in the given string.\n(define (max_run_uppercase test_str)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_806_max_run_uppercase.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_run_uppercase))\n    (check-within (candidate \"GeMKSForGERksISBESt\") 5 0.001)\n    (check-within (candidate \"PrECIOusMOVemENTSYT\") 6 0.001)\n    (check-within (candidate \"GooGLEFluTTER\") 4 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_806_max_run_uppercase","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find maximum run of uppercase characters in the given string.\n(define (max_run_uppercase test_str)\n  (define (is-uppercase? ch)\n    (char-upper-case? ch))\n\n  (define (max-run-helper str max-run current-run)\n    (cond\n      [(empty? str) (max max-run current-run)]\n      [(is-uppercase? (first str))\n       (max-run-helper (rest str) max-run (+ current-run 1))]\n      [else\n       (max-run-helper (rest str) (max max-run current-run) 0)]))\n\n  (max-run-helper (string->list test_str) 0 0))\n\n;; Example usage:\n(max_run_uppercase \"aaBBbCCAAaaD\") ;; => 2 (for the \"CC\" or \"BB\")\n(max_run_uppercase \"abcDEFghiJKLmnopQR\") ;; => 3 (for the \"DEF\" or \"JKL\")\n(max_run_uppercase \"abc\") ;; => 0 (no uppercase characters)\n```\n\nThis Racket code defines a function `max_run_uppercase` that calculates the maximum run of consecutive uppercase characters in a given string. The function converts the string to a list of characters, and then uses a helper function to iterate over the list, maintaining the maximum run of uppercase characters encountered."}
{"name":"mbpp_807_first_odd","language":"rkt","prompt":"#lang racket\n\n;; Write a rktthon function to find the first odd number in a given list of numbers.\n(define (first_odd nums)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_807_first_odd.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_odd))\n    (check-within (candidate (list 1 3 5)) 1 0.001)\n    (check-within (candidate (list 2 4 1 3)) 1 0.001)\n    (check-within (candidate (list 8 9 1)) 9 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_807_first_odd","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to find the first odd number in a given list of numbers.\n(define (first_odd nums)\n  (cond\n    [(empty? nums) #f]  ; Return #f if no odd number is found\n    [(odd? (first nums)) (first nums)]  ; Return the first odd number\n    [else (first_odd (rest nums))]))  ; Recursively check the rest of the list\n\n;; Examples\n(first_odd '(2 4 6 7 8))  ; Returns 7\n(first_odd '(2 4 6 8))    ; Returns #f\n(first_odd '(1 2 3 4 5))  ; Returns 1\n```"}
{"name":"mbpp_808_check_K","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if the given lists contain the k or not.\n(define (check_K test_tup K)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_808_check_K.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_K))\n    (check-within (candidate (list 10 4 5 6 8) 6) #t 0.001)\n    (check-within (candidate (list 1 2 3 4 5 6) 7) #f 0.001)\n    (check-within (candidate (list 7 8 9 44 11 12) 11) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_808_check_K","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if the given lists contain the k or not.\n(define (check_K test_tup K)\n  (define (contains-k? lst k)\n    (if (null? lst)\n        #f\n        (if (equal? (first lst) k)\n            #t\n            (contains-k? (rest lst) k))))\n  \n  (define (check-lists lists k)\n    (if (null? lists)\n        #f\n        (if (contains-k? (first lists) k)\n            #t\n            (check-lists (rest lists) k))))\n  \n  (check-lists test_tup K))\n\n;; Example usage:\n(check_K '((1 2 3) (4 5 6) (7 8 9)) 5) ; Output: #t\n(check_K '((1 2 3) (4 5 6) (7 8 9)) 10) ; Output: #f\n```"}
{"name":"mbpp_809_check_smaller","language":"rkt","prompt":"#lang racket\n\n;; Write a function to check if each element of second list is smaller than its corresponding element in the first list.\n(define (check_smaller test_tup1 test_tup2)\n","doctests":"transform","original":"\/Users\/arjun\/repos\/nuprl\/MultiPL-E\/datasets\/..\/datasets\/mbpp-typed\/mbpp_809_check_smaller.py","prompt_terminology":"reworded","tests":"(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_smaller))\n    (check-within (candidate (list 1 2 3) (list 2 3 4)) #f 0.001)\n    (check-within (candidate (list 4 5 6) (list 3 4 5)) #t 0.001)\n    (check-within (candidate (list 11 12 13) (list 10 11 12)) #t 0.001)\n))\n\n(test-humaneval)","stop_tokens":["\n(define ","\n#|","\n;","\n("],"task_id":"mbpp_809_check_smaller","gpt_solution":"```racket\n#lang racket\n\n;; Write a function to check if each element of the second list is smaller than its corresponding element in the first list.\n(define (check_smaller test_tup1 test_tup2)\n  (andmap (lambda (a b) (< b a)) test_tup1 test_tup2))\n\n;; Examples:\n(check_smaller '(5 3 7) '(3 2 1)) ; should return #t\n(check_smaller '(5 3 7) '(3 4 1)) ; should return #f\n(check_smaller '(5 3 7) '(5 2 1)) ; should return #f\n```\n\nThis `check_smaller` function takes two lists (`test_tup1` and `test_tup2`) and returns `#t` if every element in the second list is smaller than the corresponding element in the first list, and `#f` otherwise. It uses the `andmap` function, which checks if the provided predicate is `#t` for all corresponding elements of the two lists. The predicate, defined by the lambda function, checks if the element of the second list is smaller than the corresponding element of the first list."}
