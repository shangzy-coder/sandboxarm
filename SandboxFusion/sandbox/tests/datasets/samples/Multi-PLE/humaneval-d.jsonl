{"name": "HumanEval_0_has_close_elements", "language": "d", "prompt": "import std.math;\n/*\n Check if in given array of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nfalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\ntrue\n*/\nbool has_close_elements(float[] numbers, float threshold) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_0_has_close_elements.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = has_close_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true);\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == true);\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true);\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.algorithm;\n\n// Function to check if there are any two numbers closer to each other than the given threshold.\nbool has_close_elements(float[] numbers, float threshold) {\n    // Sort the array to make it easier to check adjacent elements.\n    numbers.sort();\n\n    // Iterate through the sorted array and check the difference between adjacent elements.\n    for (int i = 0; i < numbers.length - 1; i++) {\n        if (abs(numbers[i] - numbers[i + 1]) < threshold) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```", "task_id": "HumanEval_0_has_close_elements"}
{"name": "HumanEval_1_separate_paren_groups", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the array of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n[\"()\", \"(())\", \"(()())\"]\n*/\nstring[] separate_paren_groups(string paren_string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_1_separate_paren_groups.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = separate_paren_groups;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n    assert(candidate(\"(()(())((())))\") == [\"(()(())((())))\"]);\n    assert(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring[] separate_paren_groups(string paren_string)\n{\n    // Remove any spaces from the input string.\n    paren_string = paren_string.replace(\" \", \"\");\n\n    // Initialize a dynamic array to hold the separated groups.\n    auto groups = appender!(string[]);\n\n    // String to collect characters of the current group.\n    string current_group = \"\";\n    \n    // Counter to track the balance of parentheses.\n    int balance = 0;\n\n    foreach (char c; paren_string)\n    {\n        current_group ~= c;\n        if (c == '(')\n        {\n            balance++;\n        }\n        else if (c == ')')\n        {\n            balance--;\n        }\n        \n        // When balance becomes zero, we have a complete group.\n        if (balance == 0 && !current_group.empty)\n        {\n            groups.put(current_group);\n            current_group = \"\";\n        }\n    }\n\n    return groups.data;\n}\n\n// Example usage\nvoid main()\n{\n    string input = \"( ) (( )) (( )( ))\";\n    string[] result = separate_paren_groups(input);\n    foreach (string group; result)\n    {\n        writeln(group);\n    }\n}\n```", "task_id": "HumanEval_1_separate_paren_groups"}
{"name": "HumanEval_2_truncate_number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\nfloat truncate_number(float number) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_2_truncate_number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = truncate_number;\n\n    assert(candidate(3.5) == 0.5);\n    assert(candidate(1.25) == 0.25);\n    assert(candidate(123.0) == 0.0);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\n Given a positive floating point number, it can be decomposed into\nan integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\nfloat truncate_number(float number) {\n    int integerPart = cast(int)number;\n    float decimalPart = number - integerPart;\n    return decimalPart;\n}\n\nvoid main() {\n    // Add some test cases to verify the function\n    writeln(\"Testing truncate_number:\");\n    writeln(truncate_number(3.5)); // Should print 0.5\n    writeln(truncate_number(7.234)); // Should print 0.234\n    writeln(truncate_number(0.98)); // Should print 0.98\n}\n```", "task_id": "HumanEval_2_truncate_number"}
{"name": "HumanEval_3_below_zero", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n You're given an array of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero([1L, 2L, 3L])\nfalse\n>>> below_zero([1L, 2L, -4L, 5L])\ntrue\n*/\nbool below_zero(long[] operations) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_3_below_zero.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = below_zero;\n\n    assert(candidate([]) == false);\n    assert(candidate([1L, 2L, -3L, 1L, 2L, -3L]) == false);\n    assert(candidate([1L, 2L, -4L, 5L, 6L]) == true);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -4L]) == false);\n    assert(candidate([1L, -1L, 2L, -2L, 5L, -5L, 4L, -5L]) == true);\n    assert(candidate([1L, -2L, 2L, -2L, 5L, -5L, 4L, -4L]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nbool below_zero(long[] operations) {\n    long balance = 0;\n    \n    foreach (operation; operations) {\n        balance += operation; // Update the balance with each operation\n        if (balance < 0) {\n            return true; // Return true if balance falls below zero at any point\n        }\n    }\n    \n    return false; // Return false if the balance never falls below zero\n}\n\n// Testing the function with examples\nvoid main() {\n    assert(!below_zero([1L, 2L, 3L]));\n    assert(below_zero([1L, 2L, -4L, 5L]));\n    writeln(\"All tests passed!\");\n}\n```", "task_id": "HumanEval_3_below_zero"}
{"name": "HumanEval_4_mean_absolute_deviation", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n For a given array of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n*/\nfloat mean_absolute_deviation(float[] numbers) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_4_mean_absolute_deviation.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = mean_absolute_deviation;\n\n    assert(candidate([1.0, 2.0]) == 0.5);\n    assert(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nfloat mean_absolute_deviation(float[] numbers) {\n    if (numbers.length == 0) {\n        return 0.0;\n    }\n    \n    float mean = numbers.sum / numbers.length;\n    float mad = numbers.map!(x => fabs(x - mean)).sum / numbers.length;\n    return mad;\n}\n\nvoid main() {\n    writeln(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])); // 1.0\n}\n```\n\nThis implementation calculates the Mean Absolute Deviation (MAD) by first computing the mean of the array, then applying the absolute difference from the mean to each element, and finally averaging those differences. The `main` function includes an example as specified in the docstring.", "task_id": "HumanEval_4_mean_absolute_deviation"}
{"name": "HumanEval_5_intersperse", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n>>> intersperse([], 4L)\n[]\n>>> intersperse([1L, 2L, 3L], 4L)\n[1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimeter) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_5_intersperse.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = intersperse;\n\n    assert(candidate([], 7L) == []);\n    assert(candidate([5L, 6L, 3L, 2L], 8L) == [5L, 8L, 6L, 8L, 3L, 8L, 2L]);\n    assert(candidate([2L, 2L, 2L], 2L) == [2L, 2L, 2L, 2L, 2L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\n/*\n Insert a number 'delimiter' between every two consecutive elements of input array `numbers'\n>>> intersperse([], 4L)\n[]\n>>> intersperse([1L, 2L, 3L], 4L)\n[1L, 4L, 2L, 4L, 3L]\n*/\nlong[] intersperse(long[] numbers, long delimiter) {\n    if (numbers.length <= 1) {\n        return numbers.dup; // Return a copy if 0 or 1 element\n    }\n\n    long[] result;\n    result.reserve((numbers.length * 2) - 1);\n    \n    foreach (i, number; numbers) {\n        if (i > 0) {\n            result ~= delimiter;\n        }\n        result ~= number;\n    }\n    \n    return result;\n}\n```", "task_id": "HumanEval_5_intersperse"}
{"name": "HumanEval_6_parse_nested_parens", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n[2L, 3L, 1L, 3L]\n*/\nlong[] parse_nested_parens(string paren_string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_6_parse_nested_parens.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.stdio;\n\nlong[] parse_nested_parens(string paren_string) {\n    string[] groups = paren_string.split(\" \");\n    long[] results;\n\n    foreach(group; groups) {\n        long max_depth = 0;\n        long current_depth = 0;\n\n        foreach(c; group) {\n            if (c == '(') {\n                current_depth++;\n                max_depth = max(max_depth, current_depth);\n            } else if (c == ')') {\n                current_depth--;\n            }\n        }\n\n        results ~= max_depth;\n    }\n\n    return results;\n}\n\nvoid main() {\n    auto results = parse_nested_parens(\"(()()) ((())) () ((())()())\");\n    writeln(results);  // [2L, 3L, 1L, 3L]\n}\n```", "task_id": "HumanEval_6_parse_nested_parens"}
{"name": "HumanEval_7_filter_by_substring", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings only for ones that contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n*/\nstring[] filter_by_substring(string[] strings, string substring) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_7_filter_by_substring.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = filter_by_substring;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n    assert(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm.searching;\nimport std.array;\n\nstring[] filter_by_substring(string[] strings, string substring) {\n    return strings.filter!(s => s.canFind(substring)).array();\n}\n\n// Test cases\nvoid main() {\n    assert(filter_by_substring([], \"a\") == []);\n    assert(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\") == [\"abc\", \"bacd\", \"array\"]);\n}\n```", "task_id": "HumanEval_7_filter_by_substring"}
{"name": "HumanEval_8_sum_product", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n For a given array of integers, return a tuple consisting of a sum and a product of all the integers in an array.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\ntuple(0L, 1L)\n>>> sum_product([1L, 2L, 3L, 4L])\ntuple(10L, 24L)\n*/\nTuple!(long, long) sum_product(long[] numbers) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_8_sum_product.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_product;\n\n    assert(candidate([]) == tuple(0L, 1L));\n    assert(candidate([1L, 1L, 1L]) == tuple(3L, 1L));\n    assert(candidate([100L, 0L]) == tuple(100L, 0L));\n    assert(candidate([3L, 5L, 7L]) == tuple(15L, 105L));\n    assert(candidate([10L]) == tuple(10L, 10L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm.iteration;\n\nTuple!(long, long) sum_product(long[] numbers) {\n    // Initialize sum to 0 and product to 1\n    long sum = 0;\n    long product = 1;\n\n    // Iterate over the numbers and calculate sum and product\n    foreach (num; numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    return tuple(sum, product);\n}\n\nvoid main() {\n    auto result1 = sum_product([]);\n    assert(result1 == tuple(0L, 1L));\n\n    auto result2 = sum_product([1L, 2L, 3L, 4L]);\n    assert(result2 == tuple(10L, 24L));\n\n    writeln(result1);\n    writeln(result2);\n}\n```", "task_id": "HumanEval_8_sum_product"}
{"name": "HumanEval_9_rolling_max", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n From a given array of integers, generate an array of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1L, 2L, 3L, 2L, 3L, 4L, 2L])\n[1L, 2L, 3L, 3L, 3L, 4L, 4L]\n*/\nlong[] rolling_max(long[] numbers) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_9_rolling_max.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = rolling_max;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 1L]) == [4L, 4L, 4L, 4L]);\n    assert(candidate([3L, 2L, 3L, 100L, 3L]) == [3L, 3L, 3L, 100L, 100L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n// From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1L, 2L, 3L, 2L, 3L, 4L, 2L])\n// [1L, 2L, 3L, 3L, 3L, 4L, 4L]\nlong[] rolling_max(long[] numbers) {\n    if (numbers.length == 0) return numbers;\n    long[] result = new long[numbers.length];\n    result[0] = numbers[0];\n    foreach (i; 1 .. numbers.length) {\n        result[i] = max(result[i-1], numbers[i]);\n    }\n    return result;\n}\n\nvoid main() {\n    long[] numbers = [1L, 2L, 3L, 2L, 3L, 4L, 2L];\n    long[] result = rolling_max(numbers);\n    writeln(result);  // Output should be [1L, 2L, 3L, 3L, 3L, 4L, 4L]\n}\n```\n\nThis code defines a `rolling_max` function that computes the rolling maximum of a given array of `long` integers. The `main` function provides a sample array and calls this function, then prints the result. The expected output for the provided sample input is `[1L, 2L, 3L, 3L, 3L, 4L, 4L]`.", "task_id": "HumanEval_9_rolling_max"}
{"name": "HumanEval_10_make_palindrome", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>> make_palindrome(\"cata\")\n\"catac\"\n*/\nstring make_palindrome(string string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_10_make_palindrome.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = make_palindrome;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"x\") == \"x\");\n    assert(candidate(\"xyz\") == \"xyzyx\");\n    assert(candidate(\"xyx\") == \"xyx\");\n    assert(candidate(\"jerry\") == \"jerryrrej\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nstring make_palindrome(string input) {\n    // Function to check if a given string is a palindrome\n    bool is_palindrome(string s) {\n        return s == s.retro;\n    }\n\n    // Length of the input string\n    int len = input.length;\n\n    // Find the longest postfix that is a palindrome\n    for (int i = len; i > 0; --i) {\n        if (is_palindrome(input[$ - i .. $])) {\n            // Append the reverse of the prefix that comes before the palindromic suffix\n            return input ~ input[0 .. $ - i].retro;\n        }\n    }\n\n    // If no palindromic postfix is found, return input with its reverse without the first character\n    return input ~ input[0 .. $ - 1].retro;\n}\n\n// Test cases\nvoid main() {\n    assert(make_palindrome(\"\") == \"\");\n    assert(make_palindrome(\"cat\") == \"catac\");\n    assert(make_palindrome(\"cata\") == \"catac\");\n    assert(make_palindrome(\"aacecaaa\") == \"aacecaaa\");\n    assert(make_palindrome(\"abcd\") == \"abcdcba\");\n    writeln(\"All tests passed.\");\n}\n```", "task_id": "HumanEval_10_make_palindrome"}
{"name": "HumanEval_11_string_xor", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\nstring string_xor(string a, string b) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_11_string_xor.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = string_xor;\n\n    assert(candidate(\"111000\", \"101010\") == \"010010\");\n    assert(candidate(\"1\", \"1\") == \"0\");\n    assert(candidate(\"0101\", \"0000\") == \"0101\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.conv;\n\n/*\n Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\nstring string_xor(string a, string b) {\n    // Ensure the input strings are of the same length\n    assert(a.length == b.length);\n\n    string result = \"\";\n    foreach (i; 0 .. a.length) {\n        // Convert chars at position `i` from both strings to integer,\n        // perform XOR operation and convert the result back to string.\n        int xor_result = to!int(a[i]) ^^ to!int(b[i]);\n        result ~= to!string(xor_result);\n    }\n\n    return result;\n}\n\nvoid main() {\n    import std.stdio;\n    writeln(string_xor(\"010\", \"110\")); // Output: \"100\"\n}\n```", "task_id": "HumanEval_11_string_xor"}
{"name": "HumanEval_12_longest", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return null in case the input array is empty.\n>>> longest([])\nNone\n>>> longest([\"a\", \"b\", \"c\"])\n\"a\"\n>>> longest([\"a\", \"bb\", \"ccc\"])\n\"ccc\"\n*/\nNullable!(string) longest(string[] strings) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_12_longest.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\n Out of array of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return null in case the input array is empty.\n>>> longest([])\nNone\n>>> longest([\"a\", \"b\", \"c\"])\n\"a\"\n>>> longest([\"a\", \"bb\", \"ccc\"])\n\"ccc\"\n*/\nNullable!(string) longest(string[] strings) {\n    if (strings.length == 0) {\n        return Nullable!string.init;\n    }\n\n    string longestString = strings[0];\n    foreach (str; strings) {\n        if (str.length > longestString.length) {\n            longestString = str;\n        }\n    }\n\n    return Nullable!string(longestString);\n}\n```", "task_id": "HumanEval_12_longest"}
{"name": "HumanEval_13_greatest_common_divisor", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3L, 5L)\n1L\n>>> greatest_common_divisor(25L, 15L)\n5L\n*/\nlong greatest_common_divisor(long a, long b) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = greatest_common_divisor;\n\n    assert(candidate(3L, 7L) == 1L);\n    assert(candidate(10L, 15L) == 5L);\n    assert(candidate(49L, 14L) == 7L);\n    assert(candidate(144L, 60L) == 12L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n/*\n Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3L, 5L)\n1L\n>>> greatest_common_divisor(25L, 15L)\n5L\n*/\nlong greatest_common_divisor(long a, long b) {\n    while (b != 0) {\n        long temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n```", "task_id": "HumanEval_13_greatest_common_divisor"}
{"name": "HumanEval_14_all_prefixes", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return array of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n[\"a\", \"ab\", \"abc\"]\n*/\nstring[] all_prefixes(string string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_14_all_prefixes.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nstring[] all_prefixes(string input) {\n    string[] prefixes;\n    for (int i = 1; i <= input.length; i++) {\n        prefixes ~= input[0 .. i];\n    }\n    return prefixes;\n}\n```", "task_id": "HumanEval_14_all_prefixes"}
{"name": "HumanEval_15_string_sequence", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0L)\n\"0\"\n>>> string_sequence(5L)\n\"0 1 2 3 4 5\"\n*/\nstring string_sequence(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_15_string_sequence.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L) == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.conv; // for to!string\nimport std.array; // for appender\n\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0L)\n\"0\"\n>>> string_sequence(5L)\n\"0 1 2 3 4 5\"\n*/\nstring string_sequence(long n) {\n    auto result = appender!string();\n    foreach (i; 0 .. n + 1) {\n        if (i > 0) {\n            result.put(\" \");\n        }\n        result.put(to!string(i));\n    }\n    return result.data;\n}\n```", "task_id": "HumanEval_15_string_sequence"}
{"name": "HumanEval_16_count_distinct_characters", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3L\n>>> count_distinct_characters(\"Jerry\")\n4L\n*/\nlong count_distinct_characters(string string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_16_count_distinct_characters.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.uni;\nimport std.regex;\n\nunittest {\n    assert(count_distinct_characters(\"xyzXYZ\") == 3L);\n    assert(count_distinct_characters(\"Jerry\") == 4L);\n    assert(count_distinct_characters(\"aabbcc\") == 3L);\n    assert(count_distinct_characters(\"AaBbCc\") == 3L);\n    assert(count_distinct_characters(\"zxyZXY\") == 3L);\n    assert(count_distinct_characters(\"\") == 0L);\n}\n\nlong count_distinct_characters(string str) {\n    // Convert the string to lower case and remove duplicate characters\n    auto normalized = toLower(str).dup;\n    sort(normalized);\n    normalized = unique(normalized).array;\n    // Return the count of distinct characters\n    return normalized.length;\n}\n\nvoid main() {\n    writeln(count_distinct_characters(\"xyzXYZ\")); // 3\n    writeln(count_distinct_characters(\"Jerry\")); // 4\n    writeln(count_distinct_characters(\"Dlang\")); // 5\n}\n```", "task_id": "HumanEval_16_count_distinct_characters"}
{"name": "HumanEval_17_parse_music", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return array of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n[4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n*/\nlong[] parse_music(string music_string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_17_parse_music.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = parse_music;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"o o o o\") == [4L, 4L, 4L, 4L]);\n    assert(candidate(\".| .| .| .|\") == [1L, 1L, 1L, 1L]);\n    assert(candidate(\"o| o| .| .| o o o o\") == [2L, 2L, 1L, 1L, 4L, 4L, 4L, 4L]);\n    assert(candidate(\"o| .| o| .| o o| o o|\") == [2L, 1L, 2L, 1L, 4L, 2L, 4L, 2L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nlong[] parse_music(string music_string) \n{\n    // Split the input string into words\n    auto note_strings = split(music_string, ' ');\n\n    // Map each note string to its corresponding beats\n    long[] beats = note_strings.map!(note => {\n        if (note == \"o\") return 4L;\n        if (note == \"o|\") return 2L;\n        if (note == \".|\") return 1L;\n        return 0L; // Returns 0 if the note is not recognized (although it should not happen)\n    }).array;\n\n    return beats;\n}\n\n// Example usage\nvoid main()\n{\n    auto result = parse_music(\"o o| .| o| o| .| .| .| .| o o\");\n    writeln(result); // Output: [4L, 2L, 1L, 2L, 2L, 1L, 1L, 1L, 1L, 4L, 4L]\n}\n```", "task_id": "HumanEval_17_parse_music"}
{"name": "HumanEval_18_how_many_times", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0L\n>>> how_many_times(\"aaa\", \"a\")\n3L\n>>> how_many_times(\"aaaa\", \"aa\")\n3L\n*/\nlong how_many_times(string string, string substring) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_18_how_many_times.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = how_many_times;\n\n    assert(candidate(\"\", \"x\") == 0L);\n    assert(candidate(\"xyxyxyx\", \"x\") == 4L);\n    assert(candidate(\"cacacacac\", \"cac\") == 4L);\n    assert(candidate(\"john doe\", \"john\") == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong how_many_times(string string, string substring) {\n    // if either the main string or substring is empty, return 0\n    if (string.length == 0 || substring.length == 0) {\n        return 0;\n    }\n\n    long count = 0;\n    for (size_t i = 0; i + substring.length <= string.length; i++) {\n        if (string[i..i + substring.length] == substring) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nvoid main() {\n    import std.stdio;\n\n    assert(how_many_times(\"\", \"a\") == 0L);\n    assert(how_many_times(\"aaa\", \"a\") == 3L);\n    assert(how_many_times(\"aaaa\", \"aa\") == 3L);\n    \n    writeln(\"All tests passed.\");\n}\n```\n\nIn the `how_many_times` function, we simply iterate over all possible starting points in the main `string`, checking if the substring matches starting from that point. Each time we find a match, we increment the count. The function returns the count of all overlapping occurrences of the substring. \n\nThe above code also includes a `main` function for testing the actual implementation with assertions to make sure the function works as expected based on the documented examples.", "task_id": "HumanEval_18_how_many_times"}
{"name": "HumanEval_19_sort_numbers", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers(\"three one five\")\n\"one three five\"\n*/\nstring sort_numbers(string numbers) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_19_sort_numbers.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_numbers;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"three\") == \"three\");\n    assert(candidate(\"three five nine\") == \"three five nine\");\n    assert(candidate(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n    assert(candidate(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.conv;\n\n/*\n Input is a space-delimited string of numeral from 'zero' to 'nine'.\n Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n Return the string with numbers sorted from smallest to largest\n >>> sort_numbers(\"three one five\")\n \"one three five\"\n*/\nstring sort_numbers(string numbers) \n{\n    // Create a dictionary to map the string numbers to their respective integer values\n    string[string] number_map = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ];\n\n    // Split the input string into words, map them to their integer values,\n    // sort those values, and map them back to their string representations\n    string[] sorted_numbers = numbers.split()\n                                       .map!(n => Tuple!(string, int)(n, number_map[n]))\n                                       .array\n                                       .sort!((a, b) => a[1] < b[1])\n                                       .map!(t => t[0]);\n\n    // Join the sorted string representations into a single space-delimited string\n    return sorted_numbers.join(\" \");\n}\n```", "task_id": "HumanEval_19_sort_numbers"}
{"name": "HumanEval_20_find_closest_elements", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n From a supplied array of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\ntuple(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\ntuple(2.0, 2.0)\n*/\nTuple!(float, float) find_closest_elements(float[] numbers) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_20_find_closest_elements.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_closest_elements;\n\n    assert(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == tuple(3.9, 4.0));\n    assert(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == tuple(5.0, 5.9));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == tuple(2.0, 2.2));\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == tuple(2.0, 2.0));\n    assert(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == tuple(2.2, 3.1));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nTuple!(float, float) find_closest_elements(float[] numbers) {\n    // Sort the array first\n    auto sortedNumbers = sort(numbers.dup);\n\n    float minDiff = float.max;\n    float num1 = 0;\n    float num2 = 0;\n\n    // Iterate through the sorted array to find the closest pair\n    for (int i = 0; i < sortedNumbers.length - 1; i++) {\n        float diff = abs(sortedNumbers[i + 1] - sortedNumbers[i]);\n        if (diff < minDiff) {\n            minDiff = diff;\n            num1 = sortedNumbers[i];\n            num2 = sortedNumbers[i + 1];\n        }\n    }\n\n    return tuple(num1, num2);\n}\n\nvoid main() {\n    writeln(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // Prints tuple(2.0, 2.2)\n    writeln(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // Prints tuple(2.0, 2.0)\n}\n```", "task_id": "HumanEval_20_find_closest_elements"}
{"name": "HumanEval_21_rescale_to_unit", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Given array of numbers (of at least two elements), apply a linear transform to that array,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n*/\nfloat[] rescale_to_unit(float[] numbers) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_21_rescale_to_unit.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nfloat[] rescale_to_unit(float[] numbers) {\n    // Find the minimum and maximum values in the array\n    float min_num = min(numbers);\n    float max_num = max(numbers);\n\n    // Apply the linear transform to each element\n    float[] rescaled_numbers = numbers.map!(n => (n - min_num) / (max_num - min_num)).array;\n\n    return rescaled_numbers;\n}\n```", "task_id": "HumanEval_21_rescale_to_unit"}
{"name": "HumanEval_23_strlen", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return length of given string\n>>> strlen(\"\")\n0L\n>>> strlen(\"abc\")\n3L\n*/\nlong strlen(string string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_23_strlen.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\") == 9L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\n Return length of given string\n>>> strlen(\"\")\n0L\n>>> strlen(\"abc\")\n3L\n*/\nlong strlen(string s) {\n    return cast(long) s.length;\n}\n```", "task_id": "HumanEval_23_strlen"}
{"name": "HumanEval_24_largest_divisor", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15L)\n5L\n*/\nlong largest_divisor(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_24_largest_divisor.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = largest_divisor;\n\n    assert(candidate(3L) == 1L);\n    assert(candidate(7L) == 1L);\n    assert(candidate(10L) == 5L);\n    assert(candidate(100L) == 50L);\n    assert(candidate(49L) == 7L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\n For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15L)\n5L\n*/\n\nlong largest_divisor(long n) {\n    for(long i = n / 2; i > 0; i--){\n        if(n % i == 0) {\n            return i;\n        }\n    }\n    return 1; // base case for prime numbers or 1 as input\n}\n```", "task_id": "HumanEval_24_largest_divisor"}
{"name": "HumanEval_25_factorize", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Return array of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8L)\n[2L, 2L, 2L]\n>>> factorize(25L)\n[5L, 5L]\n>>> factorize(70L)\n[2L, 5L, 7L]\n*/\nlong[] factorize(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_25_factorize.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = factorize;\n\n    assert(candidate(2L) == [2L]);\n    assert(candidate(4L) == [2L, 2L]);\n    assert(candidate(8L) == [2L, 2L, 2L]);\n    assert(candidate(57L) == [3L, 19L]);\n    assert(candidate(3249L) == [3L, 3L, 19L, 19L]);\n    assert(candidate(185193L) == [3L, 3L, 3L, 19L, 19L, 19L]);\n    assert(candidate(20577L) == [3L, 19L, 19L, 19L]);\n    assert(candidate(18L) == [2L, 3L, 3L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] factorize(long n) {\n    long[] factors;\n    while (n % 2 == 0) {\n        factors ~= 2;\n        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            factors ~= i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        factors ~= n;\n    }\n    return factors;\n}\n\nvoid main() {\n    import std.stdio;\n    writeln(factorize(8L));   // [2L, 2L, 2L]\n    writeln(factorize(25L));  // [5L, 5L]\n    writeln(factorize(70L));  // [2L, 5L, 7L]\n}\n```", "task_id": "HumanEval_25_factorize"}
{"name": "HumanEval_26_remove_duplicates", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n From an array of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n[1L, 3L, 4L]\n*/\nlong[] remove_duplicates(long[] numbers) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_26_remove_duplicates.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm.iteration;\nimport std.algorithm.mutation;\nimport std.array;\n\nlong[] remove_duplicates(long[] numbers) {\n    // Create an associative array to count occurrences of each number\n    long[int] counts;\n    foreach (num; numbers) {\n        counts[num]++;\n    }\n\n    // Filter the array to remove numbers that occur more than once\n    return numbers.filter!(num => counts[num] == 1).array;\n}\n\nvoid main() {\n    import std.stdio;\n    \n    long[] example = [1L, 2L, 3L, 2L, 4L];\n    long[] result = remove_duplicates(example);\n    \n    writeln(result); // Output should be [1L, 3L, 4L]\n}\n```", "task_id": "HumanEval_26_remove_duplicates"}
{"name": "HumanEval_27_flip_case", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\nstring flip_case(string string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_27_flip_case.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n/// >>> flip_case(\"Hello\")\n/// \"hELLO\"\nstring flip_case(string input) {\n    string result;\n    foreach (ch; input) {\n        if (ch.isLower) {\n            result ~= ch.toUpper;\n        } else if (ch.isUpper) {\n            result ~= ch.toLower;\n        } else {\n            result ~= ch;\n        }\n    }\n    return result;\n}\n```\n\nThis D code implements the `flip_case` function according to the provided specifications. It iterates over each character in the input string, checks if it's a lowercase or uppercase letter, flips its case accordingly, and constructs the resulting string.", "task_id": "HumanEval_27_flip_case"}
{"name": "HumanEval_28_concatenate", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Concatenate array of strings into a single string\n>>> concatenate([])\n\"\"\n>>> concatenate([\"a\", \"b\", \"c\"])\n\"abc\"\n*/\nstring concatenate(string[] strings) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_28_concatenate.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = concatenate;\n\n    assert(candidate([]) == \"\");\n    assert(candidate([\"x\", \"y\", \"z\"]) == \"xyz\");\n    assert(candidate([\"x\", \"y\", \"z\", \"w\", \"k\"]) == \"xyzwk\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n/*\n Concatenate array of strings into a single string\n>>> concatenate([])\n\"\"\n>>> concatenate([\"a\", \"b\", \"c\"])\n\"abc\"\n*/\nstring concatenate(string[] strings) \n{\n    string result = \"\";\n    foreach (s; strings) {\n        result ~= s;\n    }\n    return result;\n}\n```", "task_id": "HumanEval_28_concatenate"}
{"name": "HumanEval_29_filter_by_prefix", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], \"a\")\n[]\n>>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings, string prefix) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_29_filter_by_prefix.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([], \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\n/*\n Filter an input array of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], \"a\")\n[]\n>>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n*/\nstring[] filter_by_prefix(string[] strings, string prefix) {\n    return strings.filter!(s => s.startsWith(prefix)).array;\n}\n\nunittest {\n    assert(filter_by_prefix([], \"a\") == []);\n    assert(filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\") == [\"abc\", \"array\"]);\n    assert(filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\") == [\"cde\"]);\n    assert(filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"z\") == []);\n}\n```", "task_id": "HumanEval_29_filter_by_prefix"}
{"name": "HumanEval_30_get_positive", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn only positive numbers in the array.\n>>> get_positive([-1L, 2L, -4L, 5L, 6L])\n[2L, 5L, 6L]\n>>> get_positive([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n[5L, 3L, 2L, 3L, 9L, 123L, 1L]\n*/\nlong[] get_positive(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_30_get_positive.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_positive;\n\n    assert(candidate([-1L, -2L, 4L, 5L, 6L]) == [4L, 5L, 6L]);\n    assert(candidate([5L, 3L, -5L, 2L, 3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [5L, 3L, 2L, 3L, 3L, 9L, 123L, 1L]);\n    assert(candidate([-1L, -2L]) == []);\n    assert(candidate([]) == []);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm.iteration;\n\n/*\nReturn only positive numbers in the array.\n>>> get_positive([-1L, 2L, -4L, 5L, 6L])\n[2L, 5L, 6L]\n>>> get_positive([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n[5L, 3L, 2L, 3L, 9L, 123L, 1L]\n*/\nlong[] get_positive(long[] l) \n{\n    return l.filter!(a => a > 0).array;\n}\n```\n\nIn this completed code, the function `get_positive` takes an array of type `long[]` and returns a new array containing only the positive numbers. The `filter` function from `std.algorithm.iteration` is used to filter elements that are greater than 0, and the result is converted back to an array using the `array` function.", "task_id": "HumanEval_30_get_positive"}
{"name": "HumanEval_31_is_prime", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6L)\nfalse\n>>> is_prime(101L)\ntrue\n>>> is_prime(11L)\ntrue\n>>> is_prime(13441L)\ntrue\n>>> is_prime(61L)\ntrue\n>>> is_prime(4L)\nfalse\n>>> is_prime(1L)\nfalse\n*/\nbool is_prime(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_31_is_prime.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_prime;\n\n    assert(candidate(6L) == false);\n    assert(candidate(101L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(13441L) == true);\n    assert(candidate(61L) == true);\n    assert(candidate(4L) == false);\n    assert(candidate(1L) == false);\n    assert(candidate(5L) == true);\n    assert(candidate(11L) == true);\n    assert(candidate(17L) == true);\n    assert(candidate(85L) == false);\n    assert(candidate(77L) == false);\n    assert(candidate(255379L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6L)\nfalse\n>>> is_prime(101L)\ntrue\n>>> is_prime(11L)\ntrue\n>>> is_prime(13441L)\ntrue\n>>> is_prime(61L)\ntrue\n>>> is_prime(4L)\nfalse\n>>> is_prime(1L)\nfalse\n*/\nbool is_prime(long n) {\n    // Handle edge cases\n    if (n <= 1) return false;\n    if (n <= 3) return true; // 2 and 3 are prime\n    \n    // Handle multiples of 2 and 3\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    // Check remaining possible factors\n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    \n    return true;\n}\n```", "task_id": "HumanEval_31_is_prime"}
{"name": "HumanEval_33_sort_third", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nThis function takes an array l and returns an array l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1L, 2L, 3L])\n[1L, 2L, 3L]\n>>> sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])\n[2L, 6L, 3L, 4L, 8L, 9L, 5L]\n*/\nlong[] sort_third(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_33_sort_third.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_third;\n\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L]);\n    assert(candidate([5L, 8L, 3L, 4L, 6L, 9L, 2L]) == [2L, 8L, 3L, 4L, 6L, 9L, 5L]);\n    assert(candidate([5L, 6L, 9L, 4L, 8L, 3L, 2L]) == [2L, 6L, 9L, 4L, 8L, 3L, 5L]);\n    assert(candidate([5L, 6L, 3L, 4L, 8L, 9L, 2L, 1L]) == [2L, 6L, 3L, 4L, 8L, 9L, 5L, 1L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] sort_third(long[] l) {\n    // Extract elements at indices divisible by three\n    auto divisibleByThree = l.filter!(i => (i.indexOf + 1) % 3 == 0).array;\n    \n    // Sort these elements\n    divisibleByThree.sort();\n\n    // Copy the original list, and replace the elements at indices divisible by three with sorted elements\n    long[] sortedL = l.dup;\n    int index = 0;\n\n    for (int i = 0; i < sortedL.length; i++) {\n        if ((i + 1) % 3 == 0) {\n            sortedL[i] = divisibleByThree[index];\n            index++;\n        }\n    }\n\n    return sortedL;\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(sort_third([1L, 2L, 3L]));         // [1L, 2L, 3L]\n    writeln(sort_third([5L, 6L, 3L, 4L, 8L, 9L, 2L])); // [2L, 6L, 3L, 4L, 8L, 9L, 5L]\n    writeln(sort_third([9L, 8L, 7L, 6L, 5L, 4L, 3L, 2L, 1L, 10L, 11L, 12L])); // [7L, 8L, 1L, 6L, 5L, 10L, 3L, 2L, 11L, 4L, 9L, 12L]\n}\n```\n\nIn the above code:\n1. I extracted the elements at indices (1-based) divisible by three.\n2. Those elements were sorted.\n3. Then I reinserted the sorted elements back into their corresponding locations in the duplicated original array.", "task_id": "HumanEval_33_sort_third"}
{"name": "HumanEval_34_unique", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique elements in an array\n>>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n[0L, 2L, 3L, 5L, 9L, 123L]\n*/\nlong[] unique(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_34_unique.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = unique;\n\n    assert(candidate([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [0L, 2L, 3L, 5L, 9L, 123L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.math;\nimport std.typecons;\n/*\nReturn sorted unique elements in an array\n>>> unique([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n[0L, 2L, 3L, 5L, 9L, 123L]\n*/\nlong[] unique(long[] l) {\n    // Sort the array\n    l.sort();\n    // Use `uniq` from std.algorithm to get unique elements and then convert it to an array\n    return l.uniq.array;\n}\n```", "task_id": "HumanEval_34_unique"}
{"name": "HumanEval_35_max_element", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn maximum element in the array.\n>>> max_element([1L, 2L, 3L])\n3L\n>>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n123L\n*/\nlong max_element(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_35_max_element.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L, 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L, 1L, -10L]) == 124L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\n\nlong max_element(long[] l) {\n    return l.maxElement();\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(max_element([1L, 2L, 3L])); // 3L\n    writeln(max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])); // 123L\n}\n```\n\nHere, the `max_element` function uses the `maxElement` method from the `std.algorithm` module to find the maximum element in the array. The `main` function includes test cases similar to the examples in the docstring to demonstrate that `max_element` works correctly.", "task_id": "HumanEval_35_max_element"}
{"name": "HumanEval_36_fizz_buzz", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50L)\n0L\n>>> fizz_buzz(78L)\n2L\n>>> fizz_buzz(79L)\n3L\n*/\nlong fizz_buzz(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_36_fizz_buzz.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = fizz_buzz;\n\n    assert(candidate(50L) == 0L);\n    assert(candidate(78L) == 2L);\n    assert(candidate(79L) == 3L);\n    assert(candidate(100L) == 3L);\n    assert(candidate(200L) == 6L);\n    assert(candidate(4000L) == 192L);\n    assert(candidate(10000L) == 639L);\n    assert(candidate(100000L) == 8026L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.conv;\n\nlong fizz_buzz(long n) \n{\n    long count = 0;\n    for (long i = 0; i < n; ++i)\n    {\n        if (i % 11 == 0 || i % 13 == 0)\n        {\n            auto str = to!string(i);\n            count += str.count!(c => c == '7');\n        }\n    }\n    return count;\n}\n\n// Test cases\nvoid main()\n{\n    assert(fizz_buzz(50L) == 0L);\n    assert(fizz_buzz(78L) == 2L);\n    assert(fizz_buzz(79L) == 3L);\n}\n```", "task_id": "HumanEval_36_fizz_buzz"}
{"name": "HumanEval_37_sort_even", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nThis function takes an array l and returns an array l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1L, 2L, 3L])\n[1L, 2L, 3L]\n>>> sort_even([5L, 6L, 3L, 4L])\n[3L, 6L, 5L, 4L]\n*/\nlong[] sort_even(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_37_sort_even.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_even;\n\n    assert(candidate([1L, 2L, 3L]) == [1L, 2L, 3L]);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L]) == [-10L, 3L, -5L, 2L, -3L, 3L, 5L, 0L, 9L, 1L, 123L]);\n    assert(candidate([5L, 8L, -12L, 4L, 23L, 2L, 3L, 11L, 12L, -10L]) == [-12L, 8L, 3L, 4L, 5L, 2L, 12L, 11L, 23L, -10L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong[] sort_even(long[] l) \n{\n    // Extract the even indices\n    auto even_indices = l.enumerate.filter!(a => a.index % 2 == 0).map!(a => a.value).array;\n    \n    // Sort the even indexed values\n    even_indices.sort();\n    \n    // Create a new array to store the result\n    long[] result = l.dup;\n\n    // Replace the even indexed values in the result array with the sorted ones\n    size_t even_index = 0;\n    foreach (i; 0 .. l.length)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] = even_indices[even_index];\n            even_index++;\n        }\n    }\n\n    return result;\n}\n\nvoid main()\n{\n    import std.stdio : writeln;\n\n    writeln(sort_even([1L, 2L, 3L])); // [1L, 2L, 3L]\n    writeln(sort_even([5L, 6L, 3L, 4L])); // [3L, 6L, 5L, 4L]\n    writeln(sort_even([10L, 3L, 8L, 1L, 6L, 4L])); // [6L, 3L, 8L, 1L, 10L, 4L]\n}\n```", "task_id": "HumanEval_37_sort_even"}
{"name": "HumanEval_39_prime_fib", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1L)\n2L\n>>> prime_fib(2L)\n3L\n>>> prime_fib(3L)\n5L\n>>> prime_fib(4L)\n13L\n>>> prime_fib(5L)\n89L\n*/\nlong prime_fib(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_39_prime_fib.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = prime_fib;\n\n    assert(candidate(1L) == 2L);\n    assert(candidate(2L) == 3L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 13L);\n    assert(candidate(5L) == 89L);\n    assert(candidate(6L) == 233L);\n    assert(candidate(7L) == 1597L);\n    assert(candidate(8L) == 28657L);\n    assert(candidate(9L) == 514229L);\n    assert(candidate(10L) == 433494437L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm; // for `canFind`\nimport std.range; // for `iota`\nimport std.stdio; // for `writeln`\n\n// Function to generate the n-th Fibonacci number\nulong fibonacci(ulong n) {\n    ulong a = 0, b = 1;\n    for (ulong i = 0; i < n; ++i) {\n        auto temp = a;\n        a = b;\n        b = temp + b;\n    }\n    return a;\n}\n\n// Function to check if a number is prime\nbool isPrime(ulong n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (ulong i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to get the n-th number that is a Fibonacci number and also prime\nlong prime_fib(long n) {\n    long count = 0;\n    ulong i = 1;\n    while (true) {\n        ulong fib = fibonacci(i);\n        if (isPrime(fib)) {\n            count++;\n            if (count == n) {\n                return fib;\n            }\n        }\n        i++;\n    }\n}\n\n// Testing the function\nvoid main() {\n    writeln(prime_fib(1L));  // 2L\n    writeln(prime_fib(2L));  // 3L\n    writeln(prime_fib(3L));  // 5L\n    writeln(prime_fib(4L));  // 13L\n    writeln(prime_fib(5L));  // 89L\n}\n```", "task_id": "HumanEval_39_prime_fib"}
{"name": "HumanEval_40_triples_sum_to_zero", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\ntriples_sum_to_zero takes an array of integers as an input.\nit returns true if there are three distinct elements in the array that\nsum to zero, and false otherwise.\n>>> triples_sum_to_zero([1L, 3L, 5L, 0L])\nfalse\n>>> triples_sum_to_zero([1L, 3L, -2L, 1L])\ntrue\n>>> triples_sum_to_zero([1L, 2L, 3L, 7L])\nfalse\n>>> triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L])\ntrue\n>>> triples_sum_to_zero([1L])\nfalse\n*/\nbool triples_sum_to_zero(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = triples_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, 5L, -1L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == true);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([1L, 2L, 5L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([1L, 3L, 5L, -100L]) == false);\n    assert(candidate([100L, 3L, 5L, -100L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n// Function to check if there are three distinct elements in the array that sum to zero\nbool triples_sum_to_zero(long[] l) {\n    // We need at least 3 elements to form a triplet\n    if (l.length < 3) {\n        return false;\n    }\n    \n    // Sort the array to make it easier to find the triplet\n    l.sort();\n    \n    // Iterate over the array and for each element, use two pointers to find\n    // the other two elements that sum to zero\n    for (size_t i = 0; i < l.length - 2; i++) {\n        // Set left and right pointers\n        size_t left = i + 1;\n        size_t right = l.length - 1;\n\n        while (left < right) {\n            long sum = l[i] + l[left] + l[right];\n            \n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n\n    return false; // If no triplet is found\n}\n\n// Test cases\nvoid main() {\n    assert(triples_sum_to_zero([1L, 3L, 5L, 0L]) == false);\n    assert(triples_sum_to_zero([1L, 3L, -2L, 1L]) == true);\n    assert(triples_sum_to_zero([1L, 2L, 3L, 7L]) == false);\n    assert(triples_sum_to_zero([2L, 4L, -5L, 3L, 9L, 7L]) == true);\n    assert(triples_sum_to_zero([1L]) == false);\n    assert(triples_sum_to_zero([0L, 0L, 0L]) == true);\n    \n    writeln(\"All tests passed.\");\n}\n```", "task_id": "HumanEval_40_triples_sum_to_zero"}
{"name": "HumanEval_41_car_race_collision", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.\n*/\nlong car_race_collision(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_41_car_race_collision.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right; simultaneously, a different set of n cars\nare driving right to left. The two sets of cars start out being very far from\neach other. All cars move in the same speed. Two cars are said to collide \nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.\n*/\nlong car_race_collision(long n) \n{\n    // If there are n cars moving in each direction, each car moving in the \n    // left to right direction will collide with each car moving in the right to left direction.\n    // Therefore, the number of collisions is simply n * n.\n\n    return n * n;\n}\n\nvoid main() {\n    import std.stdio;\n    \n    // Example usage\n    writeln(car_race_collision(3)); // Should output 9\n    writeln(car_race_collision(5)); // Should output 25\n    writeln(car_race_collision(0)); // Should output 0\n}\n```\n\nThis code correctly calculates and outputs the number of collisions between two sets of cars moving in opposite directions. The main function provides example usages to demonstrate the expected output.", "task_id": "HumanEval_41_car_race_collision"}
{"name": "HumanEval_42_incr_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn array with elements incremented by 1.\n>>> incr_list([1L, 2L, 3L])\n[2L, 3L, 4L]\n>>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n[6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_42_incr_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = incr_list;\n\n    assert(candidate([]) == []);\n    assert(candidate([3L, 2L, 1L]) == [4L, 3L, 2L]);\n    assert(candidate([5L, 2L, 5L, 2L, 3L, 3L, 9L, 0L, 123L]) == [6L, 3L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm.iteration;\n\n/*\nReturn array with elements incremented by 1.\n>>> incr_list([1L, 2L, 3L])\n[2L, 3L, 4L]\n>>> incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])\n[6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n*/\nlong[] incr_list(long[] l) {\n    return l.map!(x => x + 1).array();\n}\n\nvoid main() {\n    import std.stdio : writeln;\n    \n    // Test the function\n    writeln(incr_list([1L, 2L, 3L])); // Output: [2L, 3L, 4L]\n    writeln(incr_list([5L, 3L, 5L, 2L, 3L, 3L, 9L, 0L, 123L])); // Output: [6L, 4L, 6L, 3L, 4L, 4L, 10L, 1L, 124L]\n}\n```", "task_id": "HumanEval_42_incr_list"}
{"name": "HumanEval_43_pairs_sum_to_zero", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\npairs_sum_to_zero takes an array of integers as an input.\nit returns true if there are two distinct elements in the array that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero([1L, 3L, 5L, 0L])\nfalse\n>>> pairs_sum_to_zero([1L, 3L, -2L, 1L])\nfalse\n>>> pairs_sum_to_zero([1L, 2L, 3L, 7L])\nfalse\n>>> pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L])\ntrue\n>>> pairs_sum_to_zero([1L])\nfalse\n*/\nbool pairs_sum_to_zero(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_43_pairs_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = pairs_sum_to_zero;\n\n    assert(candidate([1L, 3L, 5L, 0L]) == false);\n    assert(candidate([1L, 3L, -2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L, 7L]) == false);\n    assert(candidate([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(candidate([1L]) == false);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 30L]) == true);\n    assert(candidate([-3L, 9L, -1L, 3L, 2L, 31L]) == true);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 30L]) == false);\n    assert(candidate([-3L, 9L, -1L, 4L, 2L, 31L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nbool pairs_sum_to_zero(long[] l) \n{\n    foreach (i, elem1; l) \n    {\n        foreach (j, elem2; l) \n        {\n            if (i != j && elem1 + elem2 == 0)\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// Test cases\nvoid main()\n{\n    assert(pairs_sum_to_zero([1L, 3L, 5L, 0L]) == false);\n    assert(pairs_sum_to_zero([1L, 3L, -2L, 1L]) == false);\n    assert(pairs_sum_to_zero([1L, 2L, 3L, 7L]) == false);\n    assert(pairs_sum_to_zero([2L, 4L, -5L, 3L, 5L, 7L]) == true);\n    assert(pairs_sum_to_zero([1L]) == false);\n    writeln(\"All tests passed.\");\n}\n```", "task_id": "HumanEval_43_pairs_sum_to_zero"}
{"name": "HumanEval_44_change_base", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8L, 3L)\n\"22\"\n>>> change_base(8L, 2L)\n\"1000\"\n>>> change_base(7L, 2L)\n\"111\"\n*/\nstring change_base(long x, long base) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_44_change_base.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = change_base;\n\n    assert(candidate(8L, 3L) == \"22\");\n    assert(candidate(9L, 3L) == \"100\");\n    assert(candidate(234L, 2L) == \"11101010\");\n    assert(candidate(16L, 2L) == \"10000\");\n    assert(candidate(8L, 2L) == \"1000\");\n    assert(candidate(7L, 2L) == \"111\");\n    assert(candidate(2L, 3L) == \"2\");\n    assert(candidate(3L, 4L) == \"3\");\n    assert(candidate(4L, 5L) == \"4\");\n    assert(candidate(5L, 6L) == \"5\");\n    assert(candidate(6L, 7L) == \"6\");\n    assert(candidate(7L, 8L) == \"7\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.conv;\n\nstring change_base(long x, long base)\n{\n    if (base < 2 || base > 9)\n        throw new Exception(\"Base should be between 2 and 9\");\n\n    if (x == 0)\n        return \"0\";\n\n    string result;\n    long quotient = x;\n\n    while (quotient > 0)\n    {\n        long remainder = quotient % base;\n        result = to!string(remainder) ~ result;\n        quotient /= base;\n    }\n\n    return result;\n}\n\n// Testing the function\nvoid main()\n{\n    import std.stdio;\n    writeln(change_base(8L, 3L)); // \"22\"\n    writeln(change_base(8L, 2L)); // \"1000\"\n    writeln(change_base(7L, 2L)); // \"111\"\n}\n```", "task_id": "HumanEval_44_change_base"}
{"name": "HumanEval_45_triangle_area", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5L, 3L)\n7.5\n*/\nfloat triangle_area(long a, long h) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_45_triangle_area.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(5L, 3L) == 7.5);\n    assert(candidate(2L, 2L) == 2.0);\n    assert(candidate(10L, 8L) == 40.0);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nGiven length of a side and height return area for a triangle.\n>>> triangle_area(5L, 3L)\n7.5\n*/\nfloat triangle_area(long a, long h) {\n    // Area of a triangle is (1/2) * base * height\n    return 0.5 * a * h;\n}\n\nvoid main() {\n    writeln(triangle_area(5L, 3L)); // Example usage\n}\n```", "task_id": "HumanEval_45_triangle_area"}
{"name": "HumanEval_46_fib4", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5L)\n4L\n>>> fib4(6L)\n8L\n>>> fib4(7L)\n14L\n*/\nlong fib4(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_46_fib4.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = fib4;\n\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 28L);\n    assert(candidate(10L) == 104L);\n    assert(candidate(12L) == 386L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong fib4(long n) {\n    // Initial cases based on the problem statement\n    if (n == 0) return 0L;\n    if (n == 1) return 0L;\n    if (n == 2) return 2L;\n    if (n == 3) return 0L;\n\n    // Using a Tuple to store the last 4 values of the sequence\n    Tuple!(long, \"a\", long, \"b\", long, \"c\", long, \"d\") fibs = tuple(0L, 0L, 2L, 0L);\n\n    // Iterate to calculate the nth number\n    for (long i = 4; i <= n; ++i) {\n        long nextFib = fibs.a + fibs.b + fibs.c + fibs.d;\n        fibs = tuple(fibs.b, fibs.c, fibs.d, nextFib);\n    }\n\n    return fibs.d;\n}\n\n// Testing the function with provided test cases\nvoid main() {\n    assert(fib4(5L) == 4L);\n    assert(fib4(6L) == 8L);\n    assert(fib4(7L) == 14L);\n    writeln(\"All tests passed.\");\n}\n```", "task_id": "HumanEval_46_fib4"}
{"name": "HumanEval_47_median", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn median of elements in the array l.\n>>> median([3L, 1L, 2L, 4L, 5L])\n3L\n>>> median([-10L, 4L, 6L, 1000L, 10L, 20L])\n15.0\n*/\nfloat median(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_47_median.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = median;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == 3L);\n    assert(candidate([-10L, 4L, 6L, 1000L, 10L, 20L]) == 8.0);\n    assert(candidate([5L]) == 5L);\n    assert(candidate([6L, 5L]) == 5.5);\n    assert(candidate([8L, 1L, 3L, 9L, 9L, 2L, 7L]) == 7L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nfloat median(long[] l) \n{\n    if (l.length == 0)\n        return float.nan; // Undefined for empty array\n\n    l.sort();\n    size_t n = l.length;\n    if (n % 2 == 1) {\n        // If the length of the array is odd, return the middle element\n        return cast(float) l[n / 2];\n    } else {\n        // If the length of the array is even, return the average of the two middle elements\n        return (cast(float) (l[n / 2 - 1] + l[n / 2])) / 2.0;\n    }\n}\n\nvoid main()\n{\n    import std.stdio;\n\n    writeln(median([3L, 1L, 2L, 4L, 5L])); // Prints 3.0\n    writeln(median([-10L, 4L, 6L, 1000L, 10L, 20L])); // Prints 15.0\n}\n```", "task_id": "HumanEval_47_median"}
{"name": "HumanEval_48_is_palindrome", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\nbool is_palindrome(string text) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_48_is_palindrome.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\n/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\nbool is_palindrome(string text) {\n    return text == text.retro; // Compare the string with its reverse\n}\n```", "task_id": "HumanEval_48_is_palindrome"}
{"name": "HumanEval_49_modp", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3L, 5L)\n3L\n>>> modp(1101L, 101L)\n2L\n>>> modp(0L, 101L)\n1L\n>>> modp(3L, 11L)\n8L\n>>> modp(100L, 101L)\n1L\n*/\nlong modp(long n, long p) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_49_modp.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = modp;\n\n    assert(candidate(3L, 5L) == 3L);\n    assert(candidate(1101L, 101L) == 2L);\n    assert(candidate(0L, 101L) == 1L);\n    assert(candidate(3L, 11L) == 8L);\n    assert(candidate(100L, 101L) == 1L);\n    assert(candidate(30L, 5L) == 4L);\n    assert(candidate(31L, 5L) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3L, 5L)\n3L\n>>> modp(1101L, 101L)\n2L\n>>> modp(0L, 101L)\n1L\n>>> modp(3L, 11L)\n8L\n>>> modp(100L, 101L)\n1L\n*/\nlong modp(long n, long p) {\n    // Use exponentiation by squaring to handle large powers efficiently\n    long result = 1L;\n    long base = 2L;\n    while (n > 0) {\n        if (n % 2 == 1) // If n is odd, multiply result by base\n            result = (result * base) % p;\n        base = (base * base) % p; // Square the base\n        n = n / 2; // Divide n by 2\n    }\n    return result;\n}\n```", "task_id": "HumanEval_49_modp"}
{"name": "HumanEval_51_remove_vowels", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\nstring remove_vowels(string text) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_51_remove_vowels.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_vowels;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"abcdef\nghijklm\") == \"bcdf\nghjklm\");\n    assert(candidate(\"fedcba\") == \"fdcb\");\n    assert(candidate(\"eeeee\") == \"\");\n    assert(candidate(\"acBAA\") == \"cB\");\n    assert(candidate(\"EcBOO\") == \"cB\");\n    assert(candidate(\"ybcd\") == \"ybcd\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\n\nstring remove_vowels(string text) {\n    return text.filter!(c => !\"aeiouAEIOU\".canFind(c)).array;\n}\n\nvoid main() {\n    // Test cases\n    assert(remove_vowels(\"\") == \"\");\n    assert(remove_vowels(\"abcdef\") == \"bcdf\");\n    assert(remove_vowels(\"aaaaa\") == \"\");\n    assert(remove_vowels(\"aaBAA\") == \"B\");\n    assert(remove_vowels(\"zbcd\") == \"zbcd\");\n}\n```", "task_id": "HumanEval_51_remove_vowels"}
{"name": "HumanEval_52_below_threshold", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn true if all numbers in the array l are below threshold t.\n>>> below_threshold([1L, 2L, 4L, 10L], 100L)\ntrue\n>>> below_threshold([1L, 20L, 4L, 10L], 5L)\nfalse\n*/\nbool below_threshold(long[] l, long t) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_52_below_threshold.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = below_threshold;\n\n    assert(candidate([1L, 2L, 4L, 10L], 100L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 5L) == false);\n    assert(candidate([1L, 20L, 4L, 10L], 21L) == true);\n    assert(candidate([1L, 20L, 4L, 10L], 22L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 11L) == true);\n    assert(candidate([1L, 8L, 4L, 10L], 10L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nReturn true if all numbers in the array l are below threshold t.\n>>> below_threshold([1L, 2L, 4L, 10L], 100L)\ntrue\n>>> below_threshold([1L, 20L, 4L, 10L], 5L)\nfalse\n*/\nbool below_threshold(long[] l, long t) {\n    foreach (num; l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n```", "task_id": "HumanEval_52_below_threshold"}
{"name": "HumanEval_53_add", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n>>> add(2L, 3L)\n5L\n>>> add(5L, 7L)\n12L\n*/\nlong add(long x, long y) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_53_add.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) == 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n/*\nAdd two numbers x and y\n>>> add(2L, 3L)\n5L\n>>> add(5L, 7L)\n12L\n*/\nlong add(long x, long y) {\n    return x + y;\n}\n```", "task_id": "HumanEval_53_add"}
{"name": "HumanEval_54_same_chars", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\nbool same_chars(string s0, string s1) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_54_same_chars.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = same_chars;\n\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(candidate(\"abcd\", \"dddddddabc\") == true);\n    assert(candidate(\"dddddddabc\", \"abcd\") == true);\n    assert(candidate(\"eabcd\", \"dddddddabc\") == false);\n    assert(candidate(\"abcd\", \"dddddddabcf\") == false);\n    assert(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert(candidate(\"aabb\", \"aaccc\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm.sorting;\nimport std.array;\nimport std.math;\nimport std.typecons;\n\nbool same_chars(string s0, string s1) \n{\n    auto sortString = (string s) {\n        return s.sort().uniq.array;\n    };\n\n    return sortString(s0) == sortString(s1);\n}\n\nvoid main()\n{\n    assert(same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert(same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert(same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert(same_chars(\"abcd\", \"dddddddabce\") == false);\n    assert(same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n```\n\nThis code defines the `same_chars` function, which checks if two strings have the same characters by sorting the characters of each string, removing duplicates, and then comparing the results. The `main` function includes assertions to test the function according to the examples provided in the docstring.", "task_id": "HumanEval_54_same_chars"}
{"name": "HumanEval_55_fib", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn n-th Fibonacci number.\n>>> fib(10L)\n55L\n>>> fib(1L)\n1L\n>>> fib(8L)\n21L\n*/\nlong fib(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_55_fib.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = fib;\n\n    assert(candidate(10L) == 55L);\n    assert(candidate(1L) == 1L);\n    assert(candidate(8L) == 21L);\n    assert(candidate(11L) == 89L);\n    assert(candidate(12L) == 144L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n/*\nReturn n-th Fibonacci number.\n>>> fib(10L)\n55L\n>>> fib(1L)\n1L\n>>> fib(8L)\n21L\n*/\nlong fib(long n) {\n    if (n <= 0) {\n        return 0;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        long a = 0;\n        long b = 1;\n        for (long i = 2; i <= n; ++i) {\n            long next = a + b;\n            a = b;\n            b = next;\n        }\n        return b;\n    }\n}\n```", "task_id": "HumanEval_55_fib"}
{"name": "HumanEval_56_correct_bracketing", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"<\" and \">\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\nbool correct_bracketing(string brackets) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_56_correct_bracketing.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nbool correct_bracketing(string brackets) \n{\n    int balance = 0;\n    \n    foreach (char c; brackets)\n    {\n        if (c == '<')\n        {\n            balance++;\n        }\n        else if (c == '>')\n        {\n            balance--;\n            if (balance < 0)\n            {\n                // Found a closing bracket without a matching opening bracket\n                return false;\n            }\n        }\n    }\n    \n    // Check if all opening brackets have been matched\n    return balance == 0;\n}\n\n// Test cases\nvoid main() {\n    assert(correct_bracketing(\"<\") == false);\n    assert(correct_bracketing(\"<>\") == true);\n    assert(correct_bracketing(\"<<><>>\") == true);\n    assert(correct_bracketing(\"><<>\") == false);\n\n    writeln(\"All test cases passed.\");\n}\n```", "task_id": "HumanEval_56_correct_bracketing"}
{"name": "HumanEval_57_monotonic", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn true is array elements are monotonically increasing or decreasing.\n>>> monotonic([1L, 2L, 4L, 20L])\ntrue\n>>> monotonic([1L, 20L, 4L, 10L])\nfalse\n>>> monotonic([4L, 1L, 0L, -10L])\ntrue\n*/\nbool monotonic(long[] l) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_57_monotonic.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L, 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n    assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L, 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L, 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L]) == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nReturn true if array elements are monotonically increasing or decreasing.\n>>> monotonic([1L, 2L, 4L, 20L])\ntrue\n>>> monotonic([1L, 20L, 4L, 10L])\nfalse\n>>> monotonic([4L, 1L, 0L, -10L])\ntrue\n*/\nbool monotonic(long[] l) {\n    if (l.length <= 1) {\n        return true;\n    }\n    \n    enum Direction {\n        Increasing,\n        Decreasing,\n        None\n    }\n    \n    Direction direction = Direction.None;\n    \n    for (size_t i = 1; i < l.length; ++i) {\n        if (l[i] > l[i - 1]) {\n            if (direction == Direction.Decreasing) {\n                return false;\n            }\n            direction = Direction.Increasing;\n        } else if (l[i] < l[i - 1]) {\n            if (direction == Direction.Increasing) {\n                return false;\n            }\n            direction = Direction.Decreasing;\n        }\n    }\n    \n    return true;\n}\n```\n\nThis code checks if the elements in a given array are either monotonically increasing or decreasing. It does so by iterating through the array and keeping track of the direction of the elements, and returns `false` if the direction changes contrary to the previous trend.", "task_id": "HumanEval_57_monotonic"}
{"name": "HumanEval_58_common", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn sorted unique common elements for two arrays.\n>>> common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L])\n[1L, 5L, 653L]\n>>> common([5L, 3L, 2L, 8L], [3L, 2L])\n[2L, 3L]\n*/\nlong[] common(long[] l1, long[] l2) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_58_common.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = common;\n\n    assert(candidate([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]) == [1L, 5L, 653L]);\n    assert(candidate([5L, 3L, 2L, 8L], [3L, 2L]) == [2L, 3L]);\n    assert(candidate([4L, 3L, 2L, 8L], [3L, 2L, 4L]) == [2L, 3L, 4L]);\n    assert(candidate([4L, 3L, 2L, 8L], []) == []);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.stdio;\n\nlong[] common(long[] l1, long[] l2) {\n    // Use a set to track common elements for efficiency\n    auto set1 = l1.uniq.sort.to!(RedBlackTree!long);\n    auto set2 = l2.uniq.sort.to!(RedBlackTree!long);\n    \n    // Get the intersection of the two sets\n    auto intersection = set1.byIntersection(set2).array;\n    \n    return intersection.sort.array;\n}\n\nvoid main() {\n    auto result1 = common([1L, 4L, 3L, 34L, 653L, 2L, 5L], [5L, 7L, 1L, 5L, 9L, 653L, 121L]);\n    writeln(result1); // Output: [1L, 5L, 653L]\n\n    auto result2 = common([5L, 3L, 2L, 8L], [3L, 2L]);\n    writeln(result2); // Output: [2L, 3L]\n}\n```\n\nExplanation:\n1. Import necessary modules for algorithms and arrays.\n2. Define the `common` function which takes two arrays of long integers.\n3. Convert both input arrays to sets of unique and sorted elements.\n4. Find the intersection of these sets.\n5. Convert the intersection back to a sorted array.\n6. Use the `main` function to demonstrate the usage and output expected results.\n\nYou can compile and run this D code to see the resulting sorted unique common elements from the specified test cases.", "task_id": "HumanEval_58_common"}
{"name": "HumanEval_59_largest_prime_factor", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195L)\n29L\n>>> largest_prime_factor(2048L)\n2L\n*/\nlong largest_prime_factor(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_59_largest_prime_factor.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong largest_prime_factor(long n) {\n    long factor = 2;\n    long largestFactor = 1;\n\n    // Divide out the smallest factors\n    while (n % factor == 0) {\n        largestFactor = factor;\n        n /= factor;\n    }\n    factor++;\n\n    // Check for larger factors\n    while (n > 1) {\n        while (n % factor == 0) {\n            largestFactor = factor;\n            n /= factor;\n        }\n        factor += 2;\n    }\n\n    return largestFactor;\n}\n\nvoid main() {\n    assert(largest_prime_factor(13195L) == 29L);\n    assert(largest_prime_factor(2048L) == 2L);\n}\n```", "task_id": "HumanEval_59_largest_prime_factor"}
{"name": "HumanEval_60_sum_to_n", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30L)\n465L\n>>> sum_to_n(100L)\n5050L\n>>> sum_to_n(5L)\n15L\n>>> sum_to_n(10L)\n55L\n>>> sum_to_n(1L)\n1L\n*/\nlong sum_to_n(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_60_sum_to_n.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_to_n;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(6L) == 21L);\n    assert(candidate(11L) == 66L);\n    assert(candidate(30L) == 465L);\n    assert(candidate(100L) == 5050L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30L)\n/// 465L\n/// >>> sum_to_n(100L)\n/// 5050L\n/// >>> sum_to_n(5L)\n/// 15L\n/// >>> sum_to_n(10L)\n/// 55L\n/// >>> sum_to_n(1L)\n/// 1L\nlong sum_to_n(long n) \n{\n    return n * (n + 1) / 2;\n}\n```", "task_id": "HumanEval_60_sum_to_n"}
{"name": "HumanEval_61_correct_bracketing", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n brackets is a string of \"(\" and \")\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\nbool correct_bracketing(string brackets) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_61_correct_bracketing.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nbool correct_bracketing(string brackets) {\n    int balance = 0;\n\n    foreach (char c; brackets) {\n        if (c == '(') {\n            balance++;\n        } else if (c == ')') {\n            balance--;\n        }\n\n        // If balance goes negative, it means there's a closing bracket without a corresponding opening one.\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    // In the end, balance should be zero for the brackets to be correctly balanced.\n    return balance == 0;\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(correct_bracketing(\"(\"));        // false\n    writeln(correct_bracketing(\"()\"));       // true\n    writeln(correct_bracketing(\"(()())\"));   // true\n    writeln(correct_bracketing(\")(()\"));     // false\n}\n```", "task_id": "HumanEval_61_correct_bracketing"}
{"name": "HumanEval_62_derivative", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3L, 1L, 2L, 4L, 5L])\n[1L, 4L, 12L, 20L]\n>>> derivative([1L, 2L, 3L])\n[2L, 6L]\n*/\nlong[] derivative(long[] xs) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_62_derivative.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = derivative;\n\n    assert(candidate([3L, 1L, 2L, 4L, 5L]) == [1L, 4L, 12L, 20L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 6L]);\n    assert(candidate([3L, 2L, 1L]) == [2L, 2L]);\n    assert(candidate([3L, 2L, 1L, 0L, 4L]) == [2L, 2L, 0L, 16L]);\n    assert(candidate([1L]) == []);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong[] derivative(long[] xs) {\n    // Check if the polynomial is a constant (or empty), its derivative would be zero (or empty)\n    if (xs.length <= 1) {\n        return [];\n    }\n    \n    long[] result = new long[xs.length - 1];\n    \n    for (size_t i = 1; i < xs.length; i++) {\n        result[i - 1] = xs[i] * cast(long) i;\n    }\n    \n    return result;\n}\n\n// Example usage\nvoid main() {\n    import std.stdio;\n    \n    writeln(derivative([3L, 1L, 2L, 4L, 5L])); // [1L, 4L, 12L, 20L]\n    writeln(derivative([1L, 2L, 3L]));         // [2L, 6L]\n}\n```", "task_id": "HumanEval_62_derivative"}
{"name": "HumanEval_63_fibfib", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1L)\n0L\n>>> fibfib(5L)\n4L\n>>> fibfib(8L)\n24L\n*/\nlong fibfib(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_63_fibfib.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = fibfib;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(1L) == 0L);\n    assert(candidate(5L) == 4L);\n    assert(candidate(8L) == 24L);\n    assert(candidate(10L) == 81L);\n    assert(candidate(12L) == 274L);\n    assert(candidate(14L) == 927L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong fibfib(long n) {\n    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n    }\n\n    // Use a tuple to keep the last three values.\n    Tuple!(long, long, long) current = tuple(0L, 0L, 1L);\n    for (long i = 3; i <= n; ++i) {\n        current = tuple(current[2], current[1] + current[2], current[0] + current[1] + current[2]);\n    }\n    \n    return current[2];\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(fibfib(1L)); // 0\n    writeln(fibfib(5L)); // 4\n    writeln(fibfib(8L)); // 24\n}\n```", "task_id": "HumanEval_63_fibfib"}
{"name": "HumanEval_64_vowels_count", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2L\n>>> vowels_count(\"ACEDY\")\n3L\n*/\nlong vowels_count(string s) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_64_vowels_count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = vowels_count;\n\n    assert(candidate(\"abcde\") == 2L);\n    assert(candidate(\"Alone\") == 3L);\n    assert(candidate(\"key\") == 2L);\n    assert(candidate(\"bye\") == 1L);\n    assert(candidate(\"keY\") == 2L);\n    assert(candidate(\"bYe\") == 1L);\n    assert(candidate(\"ACEDY\") == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong vowels_count(string s) {\n    // Define a set of vowels\n    string vowels = \"aeiouAEIOU\";\n    long count = 0;\n    \n    // Iterate over each character in the string\n    foreach (i, c; s) {\n        if (vowels.canFind(c)) {\n            count++;\n        } else if ((c == 'y' || c == 'Y') && i == s.length - 1) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Example usage\nvoid main() {\n    writeln(vowels_count(\"abcde\"));  // Output: 2\n    writeln(vowels_count(\"ACEDY\"));  // Output: 3\n}\n```\n\nThis code defines a `vowels_count` function that takes a string as input and returns the number of vowels in the string, considering 'y' as a vowel if it appears at the end of the word. The `main` function provides example usage of `vowels_count`.", "task_id": "HumanEval_64_vowels_count"}
{"name": "HumanEval_65_circular_shift", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12L, 1L)\n\"21\"\n>>> circular_shift(12L, 2L)\n\"12\"\n*/\nstring circular_shift(long x, long shift) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_65_circular_shift.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = circular_shift;\n\n    assert(candidate(100L, 2L) == \"001\");\n    assert(candidate(12L, 2L) == \"12\");\n    assert(candidate(97L, 8L) == \"79\");\n    assert(candidate(12L, 1L) == \"21\");\n    assert(candidate(11L, 101L) == \"11\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.algorithm;\n\nstring circular_shift(long x, long shift) {\n    string s = to!string(x);\n    size_t numDigits = s.length;\n    \n    if (shift > numDigits) {\n        return s.retro;\n    }\n    \n    shift = shift % numDigits; // In case shift is greater than numDigits\n    string result = s[$ - shift .. $] ~ s[0 .. $ - shift];\n    \n    return result;\n}\n\nvoid main() {\n    assert(circular_shift(12L, 1L) == \"21\");\n    assert(circular_shift(12L, 2L) == \"12\");\n    assert(circular_shift(12L, 3L) == \"21\");  // shift > number of digits, reverse\n    assert(circular_shift(123456L, 2L) == \"561234\");\n    assert(circular_shift(123456L, 6L) == \"123456\");\n    assert(circular_shift(123456L, 7L) == \"654321\");  // shift > number of digits, reverse\n}\n```\n\nThis `circular_shift` function works as described in the docstring. It shifts the digits of the integer x to the right by the number specified in shift. If shift is greater than the number of digits, it returns the digits reversed.", "task_id": "HumanEval_65_circular_shift"}
{"name": "HumanEval_66_digitSum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n>>> digitSum(\"\")\n0L\n>>> digitSum(\"abAB\")\n131L\n>>> digitSum(\"abcCd\")\n67L\n>>> digitSum(\"helloE\")\n69L\n>>> digitSum(\"woArBld\")\n131L\n>>> digitSum(\"aAaaaXa\")\n153L\n*/\nlong digitSum(string s) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_66_digitSum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = digitSum;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abAB\") == 131L);\n    assert(candidate(\"abcCd\") == 67L);\n    assert(candidate(\"helloE\") == 69L);\n    assert(candidate(\"woArBld\") == 131L);\n    assert(candidate(\"aAaaaXa\") == 153L);\n    assert(candidate(\" How are yOu?\") == 151L);\n    assert(candidate(\"You arE Very Smart\") == 327L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nlong digitSum(string s) {\n    return s.filter!(c => c.isUpper).map!(c => cast(long) c).sum;\n}\n\nvoid main() {\n    import std.stdio;\n    writeln(digitSum(\"\"));       // 0L\n    writeln(digitSum(\"abAB\"));   // 131L\n    writeln(digitSum(\"abcCd\"));  // 67L\n    writeln(digitSum(\"helloE\")); // 69L\n    writeln(digitSum(\"woArBld\"));// 131L\n    writeln(digitSum(\"aAaaaXa\")); // 153L\n}\n```\n\nIn this code:\n- The `filter!(c => c.isUpper)` function filters the input string to keep only the upper case characters.\n- The `map!(c => cast(long) c)` function converts each of the remaining characters to their ASCII numeric values.\n- The `sum` function computes the sum of these ASCII values.\n- `main` function is provided for testing the `digitSum` function with different inputs.", "task_id": "HumanEval_66_digitSum"}
{"name": "HumanEval_67_fruit_distribution", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\n>>> fruit_distribution(\"5 apples and 6 oranges\", 19L)\n8L\n>>> fruit_distribution(\"0 apples and 1 oranges\", 3L)\n2L\n>>> fruit_distribution(\"2 apples and 3 oranges\", 100L)\n95L\n>>> fruit_distribution(\"100 apples and 1 oranges\", 120L)\n19L\n*/\nlong fruit_distribution(string s, long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_67_fruit_distribution.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = fruit_distribution;\n\n    assert(candidate(\"5 apples and 6 oranges\", 19L) == 8L);\n    assert(candidate(\"5 apples and 6 oranges\", 21L) == 10L);\n    assert(candidate(\"0 apples and 1 oranges\", 3L) == 2L);\n    assert(candidate(\"1 apples and 0 oranges\", 3L) == 2L);\n    assert(candidate(\"2 apples and 3 oranges\", 100L) == 95L);\n    assert(candidate(\"2 apples and 3 oranges\", 5L) == 0L);\n    assert(candidate(\"1 apples and 100 oranges\", 120L) == 19L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.regex;\nimport std.conv;\n\nlong fruit_distribution(string s, long n) {\n    // Regex to capture the number of apples and oranges\n    auto applesOrangesRegex = regex(r\"(\\d+) apples and (\\d+) oranges\");\n    auto matches = match(s, applesOrangesRegex);\n    \n    // If the regex didn't find a match, return 0 as a fallback\n    if (!matches || matches.captures.length != 2) {\n        return 0L;\n    }\n\n    // Extract the number of apples and oranges from the captured groups\n    long apples = to!long(matches.captures[0]);\n    long oranges = to!long(matches.captures[1]);\n\n    // The total number of fruits minus the sum of apples and oranges\n    long mangoes = n - (apples + oranges);\n\n    return mangoes;\n}\n\n// Test cases\nvoid main() {\n    writeln(fruit_distribution(\"5 apples and 6 oranges\", 19L)); // 8L\n    writeln(fruit_distribution(\"0 apples and 1 oranges\", 3L));  // 2L\n    writeln(fruit_distribution(\"2 apples and 3 oranges\", 100L)); // 95L\n    writeln(fruit_distribution(\"100 apples and 1 oranges\", 120L)); // 19L\n}\n```", "task_id": "HumanEval_67_fruit_distribution"}
{"name": "HumanEval_68_pluck", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in an array, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\nExample 1:\n>>> pluck([4L, 2L, 3L])\n[2L, 1L]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\n>>> pluck([1L, 2L, 3L])\n[2L, 1L]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\n>>> pluck([])\n[]\nExample 4:\n>>> pluck([5L, 0L, 3L, 0L, 4L, 2L])\n[0L, 1L]\nExplanation: 0 is the smallest value, but  there are two zeros,\n             so we will choose the first zero, which has the smallest index.\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\nlong[] pluck(long[] arr) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_68_pluck.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = pluck;\n\n    assert(candidate([4L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([1L, 2L, 3L]) == [2L, 1L]);\n    assert(candidate([]) == []);\n    assert(candidate([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n    assert(candidate([1L, 2L, 3L, 0L, 5L, 3L]) == [0L, 3L]);\n    assert(candidate([5L, 4L, 8L, 4L, 8L]) == [4L, 1L]);\n    assert(candidate([7L, 6L, 7L, 1L]) == [6L, 1L]);\n    assert(candidate([7L, 9L, 7L, 1L]) == []);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nlong[] pluck(long[] arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n\n    // Initialize variables to track the smallest even value and its index.\n    long smallestEvenValue = long.max;\n    int smallestIndex = -1;\n\n    // Iterate through the array.\n    foreach (i, value; arr) {\n        // Check if the value is even.\n        if (value % 2 == 0) {\n            // Update the smallest even value and its index if a smaller even value is found.\n            if (value < smallestEvenValue) {\n                smallestEvenValue = value;\n                smallestIndex = i;\n            }\n        }\n    }\n\n    // If we found a smallest even value, return it and its index.\n    if (smallestIndex != -1) {\n        return [smallestEvenValue, smallestIndex];\n    } else {\n        return [];\n    }\n}\n\nvoid main() {\n    assert(pluck([4L, 2L, 3L]) == [2L, 1L]);\n    assert(pluck([1L, 2L, 3L]) == [2L, 1L]);\n    assert(pluck([]) == []);\n    assert(pluck([5L, 0L, 3L, 0L, 4L, 2L]) == [0L, 1L]);\n\n    writeln(\"All tests passed!\");\n}\n```\n\nThis completes the function `pluck` according to the requirements from the docstring. The function finds the smallest even value in the given array and returns it along with its index in a new array. If no even value is found or the array is empty, it returns an empty array. Additionally, it contains a `main` function with assertions to verify the correctness of the function.", "task_id": "HumanEval_68_pluck"}
{"name": "HumanEval_69_search", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a non-empty array of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the array.\nIf no such a value exist, return -1.\nExamples:\n>>> search([4L, 1L, 2L, 2L, 3L, 1L])\n2L\n>>> search([1L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L])\n3L\n>>> search([5L, 5L, 4L, 4L, 4L])\n-1L\n*/\nlong search(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_69_search.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L, 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L, 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L, 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L]) == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L]) == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L, 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L, 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L, 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L]) == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L, 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L, 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L, 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L, 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L, 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L, 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L, 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L, 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L, 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L, 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L, 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.array;\n\nlong search(long[] lst) {\n    auto frequency = assocArray!long; // Create an associative array to store frequencies\n    foreach (num; lst) {\n        frequency[num]++; // Increment the frequency for each number\n    }\n    \n    long result = -1;\n    foreach (key, value; frequency) {\n        if (value >= key && key > 0) {\n            result = max(result, key); // Update result if new key is greater and meets condition\n        }\n    }\n    \n    return result;\n}\n```\n\nThis implementation will loop through the array `lst`, count the frequency of each number using an associative array, and then find the greatest integer that has a frequency greater than or equal to its value. If no such integer is found, it returns -1.", "task_id": "HumanEval_69_search"}
{"name": "HumanEval_70_strange_sort_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven array of integers, return array in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\n>>> strange_sort_list([1L, 2L, 3L, 4L])\n[1L, 4L, 2L, 3L]\n>>> strange_sort_list([5L, 5L, 5L, 5L])\n[5L, 5L, 5L, 5L]\n>>> strange_sort_list([])\n[]\n*/\nlong[] strange_sort_list(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_70_strange_sort_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = strange_sort_list;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 4L, 2L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L]) == [5L, 9L, 6L, 8L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 5L, 2L, 4L, 3L]);\n    assert(candidate([5L, 6L, 7L, 8L, 9L, 1L]) == [1L, 9L, 5L, 8L, 6L, 7L]);\n    assert(candidate([5L, 5L, 5L, 5L]) == [5L, 5L, 5L, 5L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]) == [1L, 8L, 2L, 7L, 3L, 6L, 4L, 5L]);\n    assert(candidate([0L, 2L, 2L, 2L, 5L, 5L, -5L, -5L]) == [-5L, 5L, -5L, 5L, 0L, 2L, 2L, 2L]);\n    assert(candidate([111111L]) == [111111L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\n\n// Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1L, 2L, 3L, 4L])\n// [1L, 4L, 2L, 3L]\n// >>> strange_sort_list([5L, 5L, 5L, 5L])\n// [5L, 5L, 5L, 5L]\n// >>> strange_sort_list([])\n// []\nlong[] strange_sort_list(long[] lst) {\n    long[] sorted = lst.dup.sort;\n    long[] result;\n\n    while (!sorted.empty) {\n        if (!sorted.empty)\n            result ~= sorted.front;\n            sorted = sorted.dropOne;\n        if (!sorted.empty)\n            result ~= sorted.back;\n            sorted = sorted.dropBack;\n    }\n\n    return result;\n}\n\nimport std.stdio;\n\nvoid main() {\n    writeln(strange_sort_list([1L, 2L, 3L, 4L])); // [1L, 4L, 2L, 3L]\n    writeln(strange_sort_list([5L, 5L, 5L, 5L])); // [5L, 5L, 5L, 5L]\n    writeln(strange_sort_list([])); // []\n}\n```\n\nThis complete code sorts an array of integers in a \"strange\" order as described, and includes a main function to demonstrate its usage.", "task_id": "HumanEval_70_strange_sort_list"}
{"name": "HumanEval_71_triangle_area", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\n>>> triangle_area(3L, 4L, 5L)\n6.0\n>>> triangle_area(1L, 2L, 10L)\n-1L\n*/\nfloat triangle_area(long a, long b, long c) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_71_triangle_area.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L, 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L, 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L, 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L, 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L, 2L, 10L) == -1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nfloat triangle_area(long a, long b, long c)\n{\n    // Check if the given sides form a valid triangle\n    if ((a + b > c) && (a + c > b) && (b + c > a))\n    {\n        // Using Heron's formula to calculate the area of a triangle\n        // Heron's formula: Area = sqrt(s * (s - a) * (s - b) * (s - c))\n        // Where s = (a + b + c) / 2\n        float s = (a + b + c) / 2.0;\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        \n        // Round the area to 2 decimal points and return\n        return round(area * 100.0) / 100.0;\n    }\n    else\n    {\n        // If the sides do not form a valid triangle, return -1\n        return -1;\n    }\n}\n\nvoid main()\n{\n    writeln(triangle_area(3L, 4L, 5L)); // Should output 6.0\n    writeln(triangle_area(1L, 2L, 10L)); // Should output -1\n}\n```", "task_id": "HumanEval_71_triangle_area"}
{"name": "HumanEval_72_will_it_fly", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\n>>> will_it_fly([1L, 2L], 5L)\nfalse\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n>>> will_it_fly([3L, 2L, 3L], 1L)\nfalse\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n>>> will_it_fly([3L, 2L, 3L], 9L)\ntrue\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n>>> will_it_fly([3L], 5L)\ntrue\n# 3 is less than the maximum possible weight, and it's balanced.\n*/\nbool will_it_fly(long[] q, long w) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_72_will_it_fly.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = will_it_fly;\n\n    assert(candidate([3L, 2L, 3L], 9L) == true);\n    assert(candidate([1L, 2L], 5L) == false);\n    assert(candidate([3L], 5L) == true);\n    assert(candidate([3L, 2L, 3L], 1L) == false);\n    assert(candidate([1L, 2L, 3L], 6L) == false);\n    assert(candidate([5L], 5L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nbool is_palindromic(long[] arr) {\n    size_t len = arr.length;\n    for (size_t i = 0; i < len / 2; ++i) {\n        if (arr[i] != arr[len - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool will_it_fly(long[] q, long w) {\n    if (!is_palindromic(q)) {\n        return false;\n    }\n    long sum = 0;\n    foreach (element; q) {\n        sum += element;\n    }\n    return sum <= w;\n}\n\n// Tests\nvoid main() {\n    assert(will_it_fly([1L, 2L], 5L) == false);\n    assert(will_it_fly([3L, 2L, 3L], 1L) == false);\n    assert(will_it_fly([3L, 2L, 3L], 9L) == true);\n    assert(will_it_fly([3L], 5L) == true);\n}\n```", "task_id": "HumanEval_72_will_it_fly"}
{"name": "HumanEval_73_smallest_change", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n>>> smallest_change([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L])\n4L\n>>> smallest_change([1L, 2L, 3L, 4L, 3L, 2L, 2L])\n1L\n>>> smallest_change([1L, 2L, 3L, 2L, 1L])\n0L\n*/\nlong smallest_change(long[] arr) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_73_smallest_change.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = smallest_change;\n\n    assert(candidate([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 3L, 2L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 4L, 4L, 2L]) == 1L);\n    assert(candidate([1L, 2L, 3L, 2L, 1L]) == 0L);\n    assert(candidate([3L, 1L, 1L, 3L]) == 0L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([0L, 1L]) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong smallest_change(long[] arr) {\n    long changes = 0;\n    \n    // Check each pair of elements from start and end\n    for (int i = 0; i < arr.length / 2; ++i) {\n        if (arr[i] != arr[arr.length - 1 - i]) {\n            // If they are not the same, increment the changes counter\n            ++changes;\n        }\n    }\n    \n    return changes;\n}\n\nvoid main() {\n    assert(smallest_change([1L, 2L, 3L, 5L, 4L, 7L, 9L, 6L]) == 4L);\n    assert(smallest_change([1L, 2L, 3L, 4L, 3L, 2L, 2L]) == 1L);\n    assert(smallest_change([1L, 2L, 3L, 2L, 1L]) == 0L);\n    writeln(\"All tests passed.\");\n}\n```", "task_id": "HumanEval_73_smallest_change"}
{"name": "HumanEval_74_total_match", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts two arrays of strings and returns the array that has \ntotal number of chars in the all strings of the array less than the other array.\nif the two arrays have the same number of chars, return the first array.\nExamples\n>>> total_match([], [])\n[]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n[\"hI\", \"Hi\"]\n>>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n[\"hi\", \"admin\"]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n[\"hI\", \"hi\", \"hi\"]\n>>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n[\"4\"]\n*/\nstring[] total_match(string[] lst1, string[] lst2) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_74_total_match.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nstring[] total_match(string[] lst1, string[] lst2) {\n    // Calculate the total number of characters in both arrays\n    int lst1Chars = lst1.sum!(a => a.length);\n    int lst2Chars = lst2.sum!(a => a.length);\n    \n    // Return the array with the fewer total characters,\n    // or the first array if they have the same number of characters\n    if (lst1Chars < lst2Chars) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```\n\nThis code defines the function `total_match` that compares the total number of characters in two arrays of strings and returns the array with fewer characters, or the first array if the number of characters is the same.", "task_id": "HumanEval_74_total_match"}
{"name": "HumanEval_75_is_multiply_prime", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\n>>> is_multiply_prime(30L)\ntrue\n30 = 2 * 3 * 5\n*/\nbool is_multiply_prime(long a) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_75_is_multiply_prime.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_multiply_prime;\n\n    assert(candidate(5L) == false);\n    assert(candidate(30L) == true);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(125L) == true);\n    assert(candidate(105L) == true);\n    assert(candidate(126L) == false);\n    assert(candidate(729L) == false);\n    assert(candidate(891L) == false);\n    assert(candidate(1001L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\n// Function to check if a number is prime\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate prime numbers less than 100\nint[] generatePrimes() {\n    int[] primes;\n    for (int i = 2; i < 100; ++i) {\n        if (isPrime(i)) {\n            primes ~= i;\n        }\n    }\n    return primes;\n}\n\n// Function to check if a number is the product of 3 primes\nbool is_multiply_prime(long a) {\n    int[] primes = generatePrimes();\n\n    foreach (p1; primes) {\n        foreach (p2; primes) {\n            foreach (p3; primes) {\n                if (p1 * p2 * p3 == a) {\n                    return true;\n                }\n            }\n        }\n    }\n    \n    return false;\n}\n\n// Test Example\nvoid main() {\n    assert(is_multiply_prime(30L) == true, \"Test case 30 failed\");\n    assert(is_multiply_prime(60L) == false, \"Test case 60 failed\"); // 60 = 2 * 2 * 3 * 5, not exactly 3 primes\n    assert(is_multiply_prime(105L) == true, \"Test case 105 failed\"); // 105 = 3 * 5 * 7\n    assert(is_multiply_prime(97L) == false, \"Test case 97 failed\"); // 97 is prime, not a product of 3 primes\n}\n```", "task_id": "HumanEval_75_is_multiply_prime"}
{"name": "HumanEval_76_is_simple_power", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\n>>> is_simple_power(1L, 4L)\ntrue\n>>> is_simple_power(2L, 2L)\ntrue\n>>> is_simple_power(8L, 2L)\ntrue\n>>> is_simple_power(3L, 2L)\nfalse\n>>> is_simple_power(3L, 1L)\nfalse\n>>> is_simple_power(5L, 3L)\nfalse\n*/\nbool is_simple_power(long x, long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_76_is_simple_power.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L, 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L, 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L, 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L, 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L, 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nbool is_simple_power(long x, long n) {\n    if (n == 1) {\n        // The only simple power for n=1 is x=1\n        return x == 1;\n    }\n\n    if (n <= 0 || x <= 0) {\n        // There are no simple powers for non-positive x or n less than or equal to 0\n        return false;\n    }\n    \n    long value = 1;\n    \n    while (value < x) {\n        value *= n;\n    }\n    \n    return value == x;\n}\n\n// Test examples\nvoid main() {\n    assert(is_simple_power(1L, 4L) == true);\n    assert(is_simple_power(2L, 2L) == true);\n    assert(is_simple_power(8L, 2L) == true);\n    assert(is_simple_power(3L, 2L) == false);\n    assert(is_simple_power(3L, 1L) == false);\n    assert(is_simple_power(5L, 3L) == false);\n}\n```\n\nThis function `is_simple_power` first checks for special cases such as when `n` is 1, non-positive `n` or `x`. The function then iteratively multiplies `value` by `n` until `value` is greater than or equal to `x`. Finally, it checks if `value` equals `x` to determine if `x` is a simple power of `n`.", "task_id": "HumanEval_76_is_simple_power"}
{"name": "HumanEval_77_iscube", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\n>>> iscube(1L)\ntrue\n>>> iscube(2L)\nfalse\n>>> iscube(-1L)\ntrue\n>>> iscube(64L)\ntrue\n>>> iscube(0L)\ntrue\n>>> iscube(180L)\nfalse\n*/\nbool iscube(long a) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_77_iscube.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nbool iscube(long a) {\n    // Calculate the cube root of the absolute value of a\n    double cubeRoot = cbrt(cast(double)abs(a));\n    \n    // Since cubeRoot is a floating point number, round it to the nearest integer\n    long roundedCubeRoot = round(cubeRoot);\n    \n    // Check if the cube of the rounded number is equal to the absolute value of a\n    return roundedCubeRoot ^^ 3 == abs(a);\n}\n\n// Example usage\nvoid main() {\n    assert(iscube(1));\n    assert(!iscube(2));\n    assert(iscube(-1));\n    assert(iscube(64));\n    assert(iscube(0));\n    assert(!iscube(180));\n}\n```", "task_id": "HumanEval_77_iscube"}
{"name": "HumanEval_78_hex_key", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\n>>> hex_key(\"AB\")\n1L\n>>> hex_key(\"1077E\")\n2L\n>>> hex_key(\"ABED1A33\")\n4L\n>>> hex_key(\"123456789ABCDEF0\")\n6L\n>>> hex_key(\"2020\")\n2L\n*/\nlong hex_key(string num) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_78_hex_key.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = hex_key;\n\n    assert(candidate(\"AB\") == 1L);\n    assert(candidate(\"1077E\") == 2L);\n    assert(candidate(\"ABED1A33\") == 4L);\n    assert(candidate(\"2020\") == 2L);\n    assert(candidate(\"123456789ABCDEF0\") == 6L);\n    assert(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.conv;\n\nlong hex_key(string num) \n{\n    long primeCount = 0;\n    \n    foreach (char c; num)\n    {\n        switch (c)\n        {\n            case '2':\n            case '3':\n            case '5':\n            case '7':\n            case 'B':\n            case 'D':\n                primeCount++;\n                break;\n        }\n    }\n    \n    return primeCount;\n}\n\nvoid main()\n{\n    import std.stdio;\n    // Test cases\n    writeln(hex_key(\"AB\")); // Output: 1\n    writeln(hex_key(\"1077E\")); // Output: 2\n    writeln(hex_key(\"ABED1A33\")); // Output: 4\n    writeln(hex_key(\"123456789ABCDEF0\")); // Output: 6\n    writeln(hex_key(\"2020\")); // Output: 2\n}\n```", "task_id": "HumanEval_78_hex_key"}
{"name": "HumanEval_79_decimal_to_binary", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\n>>> decimal_to_binary(15L)\n\"db1111db\"\n>>> decimal_to_binary(32L)\n\"db100000db\"\n*/\nstring decimal_to_binary(long decimal) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_79_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L) == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L) == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nstring decimal_to_binary(long decimal) {\n    // Convert the decimal number to binary representation as a string\n    string binary = to!string(cast(ulong) decimal, 2);\n    \n    // Return the binary string with 'db' at the beginning and end\n    return \"db\" ~ binary ~ \"db\";\n}\n\n// Test cases\nvoid main() {\n    import std.stdio;\n    writeln(decimal_to_binary(15L));   // Output: db1111db\n    writeln(decimal_to_binary(32L));   // Output: db100000db\n    writeln(decimal_to_binary(0L));    // Output: db0db\n    writeln(decimal_to_binary(255L));  // Output: db11111111db\n}\n```", "task_id": "HumanEval_79_decimal_to_binary"}
{"name": "HumanEval_80_is_happy", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a string s.\nYour task is to check if the string is hapd or not.\nA string is hapd if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>> is_happy(\"a\")\nfalse\n>>> is_happy(\"aa\")\nfalse\n>>> is_happy(\"abcd\")\ntrue\n>>> is_happy(\"aabb\")\nfalse\n>>> is_happy(\"adb\")\ntrue\n>>> is_happy(\"xyy\")\nfalse\n*/\nbool is_happy(string s) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_80_is_happy.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.string;\n\n/*\nYou are given a string s.\nYour task is to check if the string is hapd or not.\nA string is hapd if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>> is_happy(\"a\")\nfalse\n>>> is_happy(\"aa\")\nfalse\n>>> is_happy(\"abcd\")\ntrue\n>>> is_happy(\"aabb\")\nfalse\n>>> is_happy(\"adb\")\ntrue\n>>> is_happy(\"xyy\")\nfalse\n*/\n\nbool is_happy(string s) {\n    if (s.length < 3) {\n        return false;\n    }\n    \n    foreach (i; 0 .. s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Test cases\nvoid main() {\n    assert(is_happy(\"a\") == false);\n    assert(is_happy(\"aa\") == false);\n    assert(is_happy(\"abcd\") == true);\n    assert(is_happy(\"aabb\") == false);\n    assert(is_happy(\"adb\") == true);\n    assert(is_happy(\"xyy\") == false);\n\n    writeln(\"All test cases passed.\");\n}\n```", "task_id": "HumanEval_80_is_happy"}
{"name": "HumanEval_81_numerical_letter_grade", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you an array of GPAs for some students and you have to write \na function that can output an array of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\nExample:\n>>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n*/\nstring[] numerical_letter_grade(float[] grades) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_81_numerical_letter_grade.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0, 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2]) == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0]) == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\nstring grade_from_gpa(float gpa) {\n    if (gpa == 4.0) return \"A+\";\n    if (gpa > 3.7) return \"A\";\n    if (gpa > 3.3) return \"A-\";\n    if (gpa > 3.0) return \"B+\";\n    if (gpa > 2.7) return \"B\";\n    if (gpa > 2.3) return \"B-\";\n    if (gpa > 2.0) return \"C+\";\n    if (gpa > 1.7) return \"C\";\n    if (gpa > 1.3) return \"C-\";\n    if (gpa > 1.0) return \"D+\";\n    if (gpa > 0.7) return \"D\";\n    if (gpa > 0.0) return \"D-\";\n    return \"E\";\n}\n\nstring[] numerical_letter_grade(float[] grades) {\n    return grades.map!(grade_from_gpa).array;\n}\n\n// Example usage\nvoid main() {\n    float[] gpas = [4.0, 3.0, 1.7, 2.0, 3.5];\n    auto letterGrades = numerical_letter_grade(gpas);\n    writeln(letterGrades); // [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n}\n```", "task_id": "HumanEval_81_numerical_letter_grade"}
{"name": "HumanEval_82_prime_length", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\n>>> prime_length(\"Hello\")\ntrue\n>>> prime_length(\"abcdcba\")\ntrue\n>>> prime_length(\"kittens\")\ntrue\n>>> prime_length(\"orange\")\nfalse\n*/\nbool prime_length(string string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_82_prime_length.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = prime_length;\n\n    assert(candidate(\"Hello\") == true);\n    assert(candidate(\"abcdcba\") == true);\n    assert(candidate(\"kittens\") == true);\n    assert(candidate(\"orange\") == false);\n    assert(candidate(\"wow\") == true);\n    assert(candidate(\"world\") == true);\n    assert(candidate(\"MadaM\") == true);\n    assert(candidate(\"Wow\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"HI\") == true);\n    assert(candidate(\"go\") == true);\n    assert(candidate(\"gogo\") == false);\n    assert(candidate(\"aaaaaaaaaaaaaaa\") == false);\n    assert(candidate(\"Madam\") == true);\n    assert(candidate(\"M\") == false);\n    assert(candidate(\"0\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.conv;\n\nbool isPrime(size_t n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (size_t i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nbool prime_length(string inputString) {\n    return isPrime(inputString.length);\n}\n\n// Test cases\nvoid main() {\n    assert(prime_length(\"Hello\") == true);\n    assert(prime_length(\"abcdcba\") == true);\n    assert(prime_length(\"kittens\") == true);\n    assert(prime_length(\"orange\") == false);\n}\n```", "task_id": "HumanEval_82_prime_length"}
{"name": "HumanEval_83_starts_one_ends", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\nlong starts_one_ends(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_83_starts_one_ends.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = starts_one_ends;\n\n    assert(candidate(1L) == 1L);\n    assert(candidate(2L) == 18L);\n    assert(candidate(3L) == 180L);\n    assert(candidate(4L) == 1800L);\n    assert(candidate(5L) == 18000L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong starts_one_ends(long n) {\n    // Base case: if n is 1, the only 1-digit number that starts or ends with 1 is 1 itself\n    if (n == 1) {\n        return 1;\n    }\n\n    // Calculate the total n-digit numbers that start with 1 and end with something else other than 1\n    // 1XXX...X (with n-1 digits, each digit can be any from 0 to 9, means there are 10^(n-2) combinations)\n    long count_start_with_one = pow(10, n-1);\n\n    // Similarly, calculate the total n-digit numbers that end with 1 and start with something else other than 1\n    // X...XXX1 (with n-1 digits, each digit can be any from 0 to 9, means there are 10^(n-2) combinations)\n    long count_end_with_one = pow(10, n-1);\n\n    // Calculate the number of n-digit numbers that both start and end with 1 (1XXX...X1)\n    // This happens for (n-2) digit combinations in between\n    long count_start_and_end_with_one = pow(10, n-2);\n\n    // Total numbers that start or end with 1 is the sum of the two counts minus the overlap\n    return count_start_with_one + count_end_with_one - count_start_and_end_with_one;\n}\n```", "task_id": "HumanEval_83_starts_one_ends"}
{"name": "HumanEval_84_solve", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\nExample\n>>> solve(1000L)\n\"1\"\n>>> solve(150L)\n\"110\"\n>>> solve(147L)\n\"1100\"\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\nstring solve(long N) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_84_solve.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(1000L) == \"1\");\n    assert(candidate(150L) == \"110\");\n    assert(candidate(147L) == \"1100\");\n    assert(candidate(333L) == \"1001\");\n    assert(candidate(963L) == \"10010\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.conv;\n\nstring solve(long N) {\n    long sumDigits = 0;\n    while (N > 0) {\n        sumDigits += N % 10;\n        N /= 10;\n    }\n    return to!string(sumDigits.to!int(2));\n}\n\nvoid main() {\n    assert(solve(1000L) == \"1\");\n    assert(solve(150L) == \"110\");\n    assert(solve(147L) == \"1100\");\n    // Additional tests\n    assert(solve(0L) == \"0\");\n    assert(solve(12345L) == \"1110\");\n    writeln(\"All tests passed!\");\n}\n```", "task_id": "HumanEval_84_solve"}
{"name": "HumanEval_85_add", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers lst. add the even elements that are at odd indices..\nExamples:\n>>> add([4L, 2L, 6L, 7L])\n2L\n*/\nlong add(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_85_add.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nGiven a non-empty array of integers lst. add the even elements that are at odd indices..\nExamples:\n>>> add([4L, 2L, 6L, 7L])\n2L\n*/\nlong add(long[] lst) {\n    long sum = 0;\n    for (int i = 1; i < lst.length; i += 2) { // Iterate through odd indices\n        if (lst[i] % 2 == 0) { // Check if the element is even\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nvoid main() {\n    // Test cases\n    long[] lst1 = [4L, 2L, 6L, 7L];\n    assert(add(lst1) == 2L);\n\n    long[] lst2 = [1L, 3L, 5L, 7L];\n    assert(add(lst2) == 0L);\n\n    long[] lst3 = [2L, 4L, 6L, 8L];\n    assert(add(lst3) == 12L);\n\n    long[] lst4 = [10L, 20L, 30L, 40L, 50L, 60L];\n    assert(add(lst4) == 120L);\n    \n    import std.stdio;\n    writeln(\"All test cases passed.\");\n}\n```", "task_id": "HumanEval_85_add"}
{"name": "HumanEval_86_anti_shuffle", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\")\n\"Hello !!!Wdlor\"\n*/\nstring anti_shuffle(string s) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_86_anti_shuffle.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = anti_shuffle;\n\n    assert(candidate(\"Hi\") == \"Hi\");\n    assert(candidate(\"hello\") == \"ehllo\");\n    assert(candidate(\"number\") == \"bemnru\");\n    assert(candidate(\"abcd\") == \"abcd\");\n    assert(candidate(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring sortCharsInString(string s) {\n    return s.array.sort.array.to!string;\n}\n\nstring anti_shuffle(string s) {\n    return s.splitter(\" \").map!(word => sortCharsInString(word)).joiner(\" \").to!string;\n}\n\nvoid main() {\n    import std.stdio;\n    \n    writeln(anti_shuffle(\"Hi\"));               // \"Hi\"\n    writeln(anti_shuffle(\"hello\"));            // \"ehllo\"\n    writeln(anti_shuffle(\"Hello World!!!\"));   // \"Hello !!!Wdlor\"\n}\n```\n\nExplanation:\n- The `sortCharsInString` function takes a string and sorts its characters in ascending order based on their ASCII value.\n- The `anti_shuffle` function splits the input string into words using the space character as a delimiter, sorts each word using the `sortCharsInString` function, and then joins the sorted words back together with spaces in between.\n- The `main` function demonstrates some example uses of the `anti_shuffle` function.\n\nNote that the order of the words and the spaces in the sentence are maintained, but each word's characters are sorted individually.", "task_id": "HumanEval_86_anti_shuffle"}
{"name": "HumanEval_87_get_row", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the array,\nand return array of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\n>>> get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\n[tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]\n>>> get_row([], 1L)\n[]\n>>> get_row([[], [1L], [1L, 2L, 3L]], 3L)\n[tuple(2L, 2L)]\n*/\nTuple!(long, long)[] get_row(long[][] lst, long x) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_87_get_row.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L, 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L, 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L, 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L), tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]], 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L, 2L)]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nTuple!(long, long)[] get_row(long[][] lst, long x) {\n    Tuple!(long, long)[] result;\n\n    // Iterate through each row and keep track of the row index\n    foreach (rowIndex, row; lst) {\n        // Iterate through each column in the row and keep track of the column index\n        foreach (colIndex, element; row) {\n            if (element == x) {\n                // Add a tuple (row index, column index) to the result array\n                result ~= tuple(rowIndex, colIndex);\n            }\n        }\n    }\n\n    // Sort the result by row index ascending, then by column index descending\n    result.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]));\n\n    return result;\n}\n\n// Examples\nvoid main() {\n    auto result1 = get_row([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L);\n    writeln(result1); // [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    \n    auto result2 = get_row([], 1L);\n    writeln(result2); // []\n    \n    auto result3 = get_row([[], [1L], [1L, 2L, 3L]], 3L);\n    writeln(result3); // [(2, 2)]\n}\n```\n\nThe code defines the function `get_row` which takes a 2-dimensional array `lst` and an integer `x` as input, finds all occurrences of `x` in the array, and returns an array of tuples representing the coordinates of `x` in the array sorted by row index ascending and column index descending. The `main` function demonstrates usage with some examples.", "task_id": "HumanEval_87_get_row"}
{"name": "HumanEval_88_sort_array", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of non-negative integers, return a cod of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5L])\n[5L]\n>>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n[0L, 1L, 2L, 3L, 4L, 5L]\n>>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n[6L, 5L, 4L, 3L, 2L, 1L, 0L]\n*/\nlong[] sort_array(long[] array) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_88_sort_array.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([]) == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L, 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L, 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L, 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L, 21L, 14L, 11L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.stdio;\nimport std.algorithm;\nimport std.array;\n\nlong[] sort_array(long[] array) {\n    if (array.length == 0) {\n        return array.dup;\n    }\n    \n    long first = array[0];\n    long last = array[$-1];\n    \n    if ((first + last) % 2 == 0) {\n        return array.sort!\"a > b\"().dup;\n    } else {\n        return array.sort!\"a < b\"().dup;\n    }\n}\n\n// Testing the function with given examples\nvoid main() {\n    writeln(sort_array([])); // []\n    writeln(sort_array([5L])); // [5L]\n    writeln(sort_array([2L, 4L, 3L, 0L, 1L, 5L])); // [0L, 1L, 2L, 3L, 4L, 5L]\n    writeln(sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])); // [6L, 5L, 4L, 3L, 2L, 1L, 0L]\n}\n```", "task_id": "HumanEval_88_sort_array"}
{"name": "HumanEval_89_encrypt", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\n>>> encrypt(\"hi\")\n\"lm\"\n>>> encrypt(\"asdfghjkl\")\n\"ewhjklnop\"\n>>> encrypt(\"gf\")\n\"kj\"\n>>> encrypt(\"et\")\n\"ix\"\n*/\nstring encrypt(string s) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_89_encrypt.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = encrypt;\n\n    assert(candidate(\"hi\") == \"lm\");\n    assert(candidate(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(candidate(\"gf\") == \"kj\");\n    assert(candidate(\"et\") == \"ix\");\n    assert(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\");\n    assert(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\");\n    assert(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert(candidate(\"a\") == \"e\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.algorithm;\nimport std.string;\n\nstring encrypt(string s) {\n    string result;\n    foreach (char c; s) {\n        char newChar = c + (2 * 2); // Shift down by two multiplied by two places\n        if (c >= 'a' && c <= 'z') { // Check if the character is in the range a-z\n            if (newChar > 'z') {\n                newChar -= 26; // Wrap around the alphabet\n            }\n        } else {\n            newChar = c; // Non-lowercase letters are left unchanged\n        }\n        result ~= newChar;\n    }\n    return result;\n}\n\nvoid main() {\n    writeln(encrypt(\"hi\")); // lm\n    writeln(encrypt(\"asdfghjkl\")); // ewhjklnop\n    writeln(encrypt(\"gf\")); // kj\n    writeln(encrypt(\"et\")); // ix\n}\n```", "task_id": "HumanEval_89_encrypt"}
{"name": "HumanEval_90_next_smallest", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the array.\nReturn null if there is no such element.\n>>> next_smallest([1L, 2L, 3L, 4L, 5L])\n2L\n>>> next_smallest([5L, 1L, 4L, 3L, 2L])\n2L\n>>> next_smallest([])\nNone\n>>> next_smallest([1L, 1L])\nNone\n*/\nNullable!(long) next_smallest(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_90_next_smallest.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = next_smallest;\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 5L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([5L, 1L, 4L, 3L, 2L]);\n        assert(!result.isNull && result.get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 1L);\n}\n\n{\n        auto result = candidate([1L, 1L]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([-35L, 34L, 12L, -45L]);\n        assert(!result.isNull && result.get == -35L);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm.sorting;\nimport std.array;\n\nNullable!(long) next_smallest(long[] lst) {\n    if (lst.length < 2) {\n        return Nullable!long.init; // Return null if the array has less than 2 elements\n    }\n\n    auto sortedList = sort(lst.dup);\n    long smallest = sortedList[0];\n    foreach (elem; sortedList[1 .. $]) {\n        if (elem > smallest) {\n            return Nullable!(long)(elem); // Return the 2nd smallest element found\n        }\n    }\n\n    return Nullable!long.init; // Return null if no 2nd smallest element is found (array has all same elements)\n}\n\n// Test cases\nvoid main() {\n    assert(next_smallest([1L, 2L, 3L, 4L, 5L]).get == 2L);\n    assert(next_smallest([5L, 1L, 4L, 3L, 2L]).get == 2L);\n    assert(next_smallest([]).isNull);\n    assert(next_smallest([1L, 1L]).isNull);\n    assert(next_smallest([1L, 2L, 2L, 2L, 2L]).get == 2L);\n    assert(next_smallest([2L, 1L, 2L, 2L, 2L]).get == 2L);\n}\n```", "task_id": "HumanEval_90_next_smallest"}
{"name": "HumanEval_91_is_bored", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0L\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1L\n*/\nlong is_bored(string S) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_91_is_bored.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.string;\n\nlong is_bored(string S) {\n    long count = 0;\n    \n    // Split the string into sentences based on delimiters '.', '?' and '!'\n    auto sentences = S.splitter(\".!?\");\n    \n    foreach(sentence; sentences) {\n        // Trim leading and trailing whitespace\n        auto trimmed_sentence = sentence.strip();\n        // Check if the sentence starts with \"I\"\n        if (trimmed_sentence.startsWith(\"I\")) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n```", "task_id": "HumanEval_91_is_bored"}
{"name": "HumanEval_92_any_int", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n>>> any_int(5L, 2L, 7L)\ntrue\n>>> any_int(3L, 2L, 2L)\nfalse\n>>> any_int(3L, -2L, 1L)\ntrue\n>>> any_int(3.6, -2.2, 2L)\nfalse\n*/\nbool any_int(float x, float y, float z) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_92_any_int.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.traits;\n\nbool any_int(Number x, Number y, Number z) \n{\n    // Check if all the inputs are integers\n    if (!isIntegral!typeof(x) || !isIntegral!typeof(y) || !isIntegral!typeof(z))\n    {\n        return false;\n    }\n    \n    // Check if one of the numbers is equal to the sum of the other two\n    if (x == y + z || y == x + z || z == x + y)\n    {\n        return true;\n    }\n    \n    return false;\n}\n\nvoid main()\n{\n    import std.stdio;\n    writeln(any_int(5L, 2L, 7L)); // true\n    writeln(any_int(3L, 2L, 2L)); // false\n    writeln(any_int(3L, -2L, 1L)); // true\n    writeln(any_int(3.6, -2.2, 2L)); // false\n}\n```", "task_id": "HumanEval_92_any_int"}
{"name": "HumanEval_93_encode", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \nExamples:\n>>> encode(\"test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n\"tHKS KS C MGSSCGG\"\n*/\nstring encode(string message) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_93_encode.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = encode;\n\n    assert(candidate(\"TEST\") == \"tgst\");\n    assert(candidate(\"Mudasir\") == \"mWDCSKR\");\n    assert(candidate(\"YES\") == \"ygs\");\n    assert(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.ascii;\n\nstring encode(string message) \n{\n    // Function to check if a character is a vowel\n    bool isVowel(char c) {\n        switch(tolower(c)) {\n            case 'a': case 'e': case 'i': case 'o': case 'u':\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    // Function to get the character 2 places ahead of the vowel\n    char replaceVowel(char c) {\n        switch(tolower(c)) {\n            case 'a': return 'c';\n            case 'e': return 'g';\n            case 'i': return 'k';\n            case 'o': return 'q';\n            case 'u': return 'w';\n            default: return c; // This should never happen for vowels\n        }\n    }\n\n    // Encode the message\n    return message\n        .map!(c => swapCase(c)) // Swap case of each character\n        .map!(c => isVowel(c) ? replaceVowel(c) : c) // Replace vowel if needed\n        .array // Convert range back to string\n        ;\n}\n\nvoid main() {\n    import std.stdio;\n    writeln(encode(\"test\"));       // TGST\n    writeln(encode(\"This is a message\"));  // tHKS KS C MGSSCGG\n}\n```", "task_id": "HumanEval_93_encode"}
{"name": "HumanEval_94_skjkasdkd", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\n>>> skjkasdkd([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L])\n10L\n>>> skjkasdkd([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L])\n25L\n>>> skjkasdkd([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L])\n13L\n>>> skjkasdkd([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L])\n11L\n>>> skjkasdkd([0L, 81L, 12L, 3L, 1L, 21L])\n3L\n>>> skjkasdkd([0L, 8L, 1L, 2L, 1L, 7L])\n7L\n*/\nlong skjkasdkd(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_94_skjkasdkd.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = skjkasdkd;\n\n    assert(candidate([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L]) == 10L);\n    assert(candidate([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\n    assert(candidate([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L]) == 13L);\n    assert(candidate([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L]) == 11L);\n    assert(candidate([0L, 81L, 12L, 3L, 1L, 21L]) == 3L);\n    assert(candidate([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);\n    assert(candidate([8191L]) == 19L);\n    assert(candidate([8191L, 123456L, 127L, 7L]) == 19L);\n    assert(candidate([127L, 97L, 8192L]) == 10L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.conv;\nimport std.array;\nimport std.range;\n\nbool isPrime(long n) {\n    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlong sumOfDigits(long num) {\n    long sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nlong skjkasdkd(long[] lst) {\n    long largestPrime = -1;\n    foreach (n; lst) {\n        if (isPrime(n) && n > largestPrime) {\n            largestPrime = n;\n        }\n    }\n    if (largestPrime == -1) {\n        return 0;\n    }\n    return sumOfDigits(largestPrime);\n}\n\n// Test cases\nvoid main() {\n    assert(skjkasdkd([0L, 3L, 2L, 1L, 3L, 5L, 7L, 4L, 5L, 5L, 5L, 2L, 181L, 32L, 4L, 32L, 3L, 2L, 32L, 324L, 4L, 3L]) == 10L);\n    assert(skjkasdkd([1L, 0L, 1L, 8L, 2L, 4597L, 2L, 1L, 3L, 40L, 1L, 2L, 1L, 2L, 4L, 2L, 5L, 1L]) == 25L);\n    assert(skjkasdkd([1L, 3L, 1L, 32L, 5107L, 34L, 83278L, 109L, 163L, 23L, 2323L, 32L, 30L, 1L, 9L, 3L]) == 13L);\n    assert(skjkasdkd([0L, 724L, 32L, 71L, 99L, 32L, 6L, 0L, 5L, 91L, 83L, 0L, 5L, 6L]) == 11L);\n    assert(skjkasdkd([0L, 81L, 12L, 3L, 1L, 21L]) == 3L);\n    assert(skjkasdkd([0L, 8L, 1L, 2L, 1L, 7L]) == 7L);\n}\n```", "task_id": "HumanEval_94_skjkasdkd"}
{"name": "HumanEval_95_check_dict_case", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an associative array, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given associative array is empty.\nExamples:\n>>> check_dict_case([\"a\": \"apple\", \"b\": \"banana\"].nullable)\ntrue\n>>> check_dict_case([\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable)\nfalse\n>>> check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable)\nfalse\n>>> check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable)\nfalse\n>>> check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable)\ntrue\n*/\nbool check_dict_case(Nullable!(string[string]) dict) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_95_check_dict_case.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_dict_case;\n\n    assert(candidate([\"p\": \"pineapple\", \"b\": \"banana\"].nullable) == true);\n    assert(candidate([\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(candidate([\"p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(candidate([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n    assert(candidate([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n    assert(candidate([\"fruit\": \"Orange\", \"taste\": \"Sweet\"].nullable) == true);\n    assert(candidate(Nullable!(string[string]).init) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\n// Function to check if a string is all lowercase\nbool isLowerCase(string s) {\n    return s.all!(c => c.isLower);\n}\n\n// Function to check if a string is all uppercase\nbool isUpperCase(string s) {\n    return s.all!(c => c.isUpper);\n}\n\n// Function to check if all keys in the associative array are either all lowercase or all uppercase\nbool check_dict_case(Nullable!(string[string]) dict) {\n    // If the nullable is null or the dictionary is empty, return false\n    if (dict.isNull || dict.get.length == 0) {\n        return false;\n    }\n\n    bool allLower = true;\n    bool allUpper = true;\n\n    // Iterate over all keys in the dictionary\n    foreach (key, _; dict.get) {\n        if (!(key is string)) {\n            return false;\n        }\n        // Check if the key is lowercase or uppercase\n        if (!isLowerCase(key)) {\n            allLower = false;\n        }\n        if (!isUpperCase(key)) {\n            allUpper = false;\n        }\n    }\n    \n    // Return true if all keys are either all lowercase or all uppercase\n    return allLower || allUpper;\n}\n\n// Test examples\nvoid main() {\n    assert(check_dict_case([\"a\": \"apple\", \"b\": \"banana\"].nullable) == true);\n    assert(check_dict_case([\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"].nullable) == false);\n    assert(check_dict_case([\"a\": \"apple\", 8L: \"banana\", \"a\": \"apple\"].nullable) == false);\n    assert(check_dict_case([\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"].nullable) == false);\n    assert(check_dict_case([\"STATE\": \"NC\", \"ZIP\": \"12345\"].nullable) == true);\n}\n```", "task_id": "HumanEval_95_check_dict_case"}
{"name": "HumanEval_96_count_up_to", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\n>>> count_up_to(5L)\n[2L, 3L]\n>>> count_up_to(11L)\n[2L, 3L, 5L, 7L]\n>>> count_up_to(0L)\n[]\n>>> count_up_to(20L)\n[2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n>>> count_up_to(1L)\n[]\n>>> count_up_to(18L)\n[2L, 3L, 5L, 7L, 11L, 13L, 17L]\n*/\nlong[] count_up_to(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_96_count_up_to.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_up_to;\n\n    assert(candidate(5L) == [2L, 3L]);\n    assert(candidate(6L) == [2L, 3L, 5L]);\n    assert(candidate(7L) == [2L, 3L, 5L]);\n    assert(candidate(10L) == [2L, 3L, 5L, 7L]);\n    assert(candidate(0L) == []);\n    assert(candidate(22L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]);\n    assert(candidate(1L) == []);\n    assert(candidate(18L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(47L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L]);\n    assert(candidate(101L) == [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L, 23L, 29L, 31L, 37L, 41L, 43L, 47L, 53L, 59L, 61L, 67L, 71L, 73L, 79L, 83L, 89L, 97L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.array;\n\nbool isPrime(long num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (long i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nlong[] count_up_to(long n) {\n    long[] primes;\n    for (long i = 2; i < n; ++i) {\n        if (isPrime(i)) {\n            primes ~= i;\n        }\n    }\n    return primes;\n}\n\nvoid main() {\n    writeln(count_up_to(5L));  // [2L, 3L]\n    writeln(count_up_to(11L)); // [2L, 3L, 5L, 7L]\n    writeln(count_up_to(0L));  // []\n    writeln(count_up_to(20L)); // [2L, 3L, 5L, 7L, 11L, 13L, 17L, 19L]\n    writeln(count_up_to(1L));  // []\n    writeln(count_up_to(18L)); // [2L, 3L, 5L, 7L, 11L, 13L, 17L]\n}\n```", "task_id": "HumanEval_96_count_up_to"}
{"name": "HumanEval_97_multiply", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\n>>> multiply(148L, 412L)\n16L\n>>> multiply(19L, 28L)\n72L\n>>> multiply(2020L, 1851L)\n0L\n>>> multiply(14L, -15L)\n20L\n*/\nlong multiply(long a, long b) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_97_multiply.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = multiply;\n\n    assert(candidate(148L, 412L) == 16L);\n    assert(candidate(19L, 28L) == 72L);\n    assert(candidate(2020L, 1851L) == 0L);\n    assert(candidate(14L, -15L) == 20L);\n    assert(candidate(76L, 67L) == 42L);\n    assert(candidate(17L, 27L) == 49L);\n    assert(candidate(0L, 1L) == 0L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\n>>> multiply(148L, 412L)\n16L\n>>> multiply(19L, 28L)\n72L\n>>> multiply(2020L, 1851L)\n0L\n>>> multiply(14L, -15L)\n20L\n*/\n\nlong multiply(long a, long b) {\n    long unitDigitA = abs(a) % 10;\n    long unitDigitB = abs(b) % 10;\n    return unitDigitA * unitDigitB;\n}\n\n// Example usage:\n// writeln(multiply(148L, 412L)); // should print 16L\n// writeln(multiply(19L, 28L)); // should print 72L\n// writeln(multiply(2020L, 1851L)); // should print 0L\n// writeln(multiply(14L, -15L)); // should print 20L\n```\n\nThis function `multiply` calculates the product of the unit digits of two long integers. It first extracts the unit digits by taking the absolute value and then using the modulus operation to capture the last digit. Finally, it returns the product of these unit digits.", "task_id": "HumanEval_97_multiply"}
{"name": "HumanEval_98_count_upper", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string s, count the number of uppercase vowels in even indices.\nFor example:\n>>> count_upper(\"aBCdEf\")\n1L\n>>> count_upper(\"abcdefg\")\n0L\n>>> count_upper(\"dBBE\")\n0L\n*/\nlong count_upper(string s) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_98_count_upper.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong count_upper(string s) {\n    ulong count = 0;\n\n    // Define the set of uppercase vowels\n    immutable uppercaseVowels = \"AEIOU\";\n    \n    // Iterate through the string\n    foreach (i, c; s) {\n        // Check if the index is even and the character is an uppercase vowel\n        if (i % 2 == 0 && c in uppercaseVowels) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\n// Test cases\nvoid main() {\n    assert(count_upper(\"aBCdEf\") == 1L);\n    assert(count_upper(\"abcdefg\") == 0L);\n    assert(count_upper(\"dBBE\") == 0L);\n}\n```\n\nThis D code defines a function `count_upper(s)` that counts the number of uppercase vowels located at even indices in a string. The function iterates through the string, checks whether the index is even and if the character is an uppercase vowel, and if both conditions are met, it increments the counter. It also includes some test cases within the `main` function for validation.", "task_id": "HumanEval_98_count_upper"}
{"name": "HumanEval_99_closest_integer", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10L\n>>> closest_integer(\"15.3\")\n15L\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\nlong closest_integer(string value) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_99_closest_integer.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"-15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"0\") == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.conv;\n\nlong closest_integer(string value) {\n    real number = to!real(value);  // Convert the string to a real number\n    long result = roundTo!long(number);  // Round the number to the nearest integer\n    \n    // Check if the number is equidistant from two integers\n    if (fabs(number - result) == 0.5) {\n        // Rounding away from zero\n        if (number > 0) {\n            result = ceil(number);\n        } else {\n            result = floor(number);\n        }\n    }\n\n    return result;\n}\n\nvoid main() {\n    import std.stdio;\n    \n    writeln(closest_integer(\"10\"));    // 10\n    writeln(closest_integer(\"15.3\"));  // 15\n    writeln(closest_integer(\"14.5\"));  // 15\n    writeln(closest_integer(\"-14.5\")); // -15\n}\n```", "task_id": "HumanEval_99_closest_integer"}
{"name": "HumanEval_100_make_a_pile", "language": "d", "prompt": "import std.math;\n/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in an array, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3L)\n[3L, 5L, 7L]\n*/\nlong[] make_a_pile(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_100_make_a_pile.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = make_a_pile;\n\n    assert(candidate(3L) == [3L, 5L, 7L]);\n    assert(candidate(4L) == [4L, 6L, 8L, 10L]);\n    assert(candidate(5L) == [5L, 7L, 9L, 11L, 13L]);\n    assert(candidate(6L) == [6L, 8L, 10L, 12L, 14L, 16L]);\n    assert(candidate(8L) == [8L, 10L, 12L, 14L, 16L, 18L, 20L, 22L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\n\nlong[] make_a_pile(long n) {\n    long[] pile = new long[n];\n    long currentStones = n;\n\n    for (long i = 0; i < n; ++i) {\n        pile[i] = currentStones;\n        currentStones += (n % 2 == 0) ? 2 : 2;\n    }\n\n    return pile;\n}\n\n// Examples\nvoid main() {\n    writeln(make_a_pile(3L)); // [3L, 5L, 7L]\n    writeln(make_a_pile(4L)); // [4L, 6L, 8L, 10L]\n}\n```", "task_id": "HumanEval_100_make_a_pile"}
{"name": "HumanEval_101_words_string", "language": "d", "prompt": "import std.math;\n/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\n>>> words_string(\"Hi, my name is John\")\n[\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>>> words_string(\"One, two, three, four, five, six\")\n[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n*/\nstring[] words_string(string s) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_101_words_string.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\") == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.array;\nimport std.algorithm;\nimport std.string;\n\nstring[] words_string(string s) {\n    // Remove any commas and split by whitespace\n    auto cleanedString = replace(s, \",\", \"\");\n    return cleanedString.split().array;\n}\n\n// Example usage:\nvoid main() {\n    string s1 = \"Hi, my name is John\";\n    string s2 = \"One, two, three, four, five, six\";\n    writeln(words_string(s1)); // [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    writeln(words_string(s2)); // [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n}\n```\n\nIn this implementation:\n- We import necessary modules from the D Standard Library.\n- We defined the function `words_string` which takes a string as input.\n- We remove any commas using the `replace` function and then split the cleaned string by whitespace using the `split` function.\n- The function returns an array of words.\n\nThis function can be tested with example strings to ensure it is working as expected.", "task_id": "HumanEval_101_words_string"}
{"name": "HumanEval_102_choose_num", "language": "d", "prompt": "import std.math;\n/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\nFor example:\n>>> choose_num(12L, 15L)\n14L\n>>> choose_num(13L, 12L)\n-1L\n*/\nlong choose_num(long x, long y) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_102_choose_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = choose_num;\n\n    assert(candidate(12L, 15L) == 14L);\n    assert(candidate(13L, 12L) == -1L);\n    assert(candidate(33L, 12354L) == 12354L);\n    assert(candidate(5234L, 5233L) == -1L);\n    assert(candidate(6L, 29L) == 28L);\n    assert(candidate(27L, 10L) == -1L);\n    assert(candidate(7L, 7L) == -1L);\n    assert(candidate(546L, 546L) == 546L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\n\n/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\nFor example:\n>>> choose_num(12L, 15L)\n14L\n>>> choose_num(13L, 12L)\n-1L\n*/\n\nlong choose_num(long x, long y) {\n    // Ensure x is less than or equal to y\n    if (x > y) {\n        return -1L;\n    }\n\n    // Find the biggest even number in the range [x, y]\n    for (long i = y; i >= x; --i) {\n        if (i % 2 == 0) {\n            return i;\n        }\n    }\n\n    // If no even number is found, return -1\n    return -1L;\n}\n```\n\nHere's the complete code for the `choose_num` function that meets the specified requirements. This function iterates from `y` down to `x` and returns the first even number it encounters, ensuring it is the largest even number in the given range `[x, y]`. If no even number is found, it returns `-1`.", "task_id": "HumanEval_102_choose_num"}
{"name": "HumanEval_104_unique_digits", "language": "d", "prompt": "import std.math;\n/*\nGiven an array of positive integers x. return a sorted array of all \nelements that hasn't any even digit.\nNote: Returned array should be sorted in increasing order.\nFor example:\n>>> unique_digits([15L, 33L, 1422L, 1L])\n[1L, 15L, 33L]\n>>> unique_digits([152L, 323L, 1422L, 10L])\n[]\n*/\nlong[] unique_digits(long[] x) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_104_unique_digits.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.algorithm;\nimport std.array;\n\nlong[] unique_digits(long[] x) {\n    // Function to check if a number contains any even digit\n    bool has_even_digit(long number) {\n        while (number > 0) {\n            if ((number % 10) % 2 == 0)\n                return true;\n            number /= 10;\n        }\n        return false;\n    }\n\n    // Filter out numbers that have an even digit\n    auto filtered = x.filter!(num => !has_even_digit(num));\n    \n    // Convert to dynamic array and sort the result\n    return filtered.array.sort!((a, b) => a < b);\n}\n\n// Example usage:\n// writeln(unique_digits([15L, 33L, 1422L, 1L]));\n// Output: [1L, 15L, 33L]\n```\n\nThis code defines the `unique_digits` function that meets the specified requirements. The function filters out numbers containing any even digit and returns a sorted array of those that don't.", "task_id": "HumanEval_104_unique_digits"}
{"name": "HumanEval_105_by_length", "language": "d", "prompt": "import std.math;\n/*\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  If the array is empty, return an empty array:\n>>> by_length([])\n[]\n  If the array has any strange number ignore it:\n>>> by_length([1L, -1L, 55L])\n[\"One\"]\n*/\nstring[] by_length(long[] arr) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_105_by_length.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.string;\n\nstring[] by_length(long[] arr) {\n    // Filter out numbers outside the range of 1 to 9\n    auto filtered = arr.filter!(x => x >= 1 && x <= 9);\n    \n    // Sort the filtered array and reverse it\n    auto sortedReversed = filtered.array.sort.reverse;\n\n    // Map numbers to their corresponding names\n    auto mapped = sortedReversed.map!(x => \n        x == 1 ? \"One\" : \n        x == 2 ? \"Two\" : \n        x == 3 ? \"Three\" : \n        x == 4 ? \"Four\" : \n        x == 5 ? \"Five\" :\n        x == 6 ? \"Six\" : \n        x == 7 ? \"Seven\" : \n        x == 8 ? \"Eight\" : \n        x == 9 ? \"Nine\" : \"\"\n    ).array;\n\n    return mapped;\n}\n\nvoid main() {\n    // Test cases\n    assert(by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(by_length([]) == []);\n    assert(by_length([1L, -1L, 55L]) == [\"One\"]);\n}\n```", "task_id": "HumanEval_105_by_length"}
{"name": "HumanEval_106_f", "language": "d", "prompt": "import std.math;\n/*\n Implement the function f that takes n as a parameter,\nand returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n>>> f(5L)\n[1L, 2L, 6L, 24L, 15L]\n*/\nlong[] f(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_106_f.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L) == [1L, 2L, 6L, 24L, 15L]);\n    assert(candidate(7L) == [1L, 2L, 6L, 24L, 15L, 720L, 28L]);\n    assert(candidate(1L) == [1L]);\n    assert(candidate(3L) == [1L, 2L, 6L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\n\n// Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nlong[] f(long n) {\n    long[] result = new long[n];\n    \n    for (long i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            result[i - 1] = factorial(i);\n        } else {\n            result[i - 1] = sumNumbers(i);\n        }\n    }\n    \n    return result;\n}\n\n// Helper function to compute the factorial of a number\nlong factorial(long x) {\n    long result = 1;\n    for (long i = 1; i <= x; ++i) {\n        result *= i;\n    }\n    return result;\n}\n\n// Helper function to compute the sum of numbers from 1 to x\nlong sumNumbers(long x) {\n    long result = 0;\n    for (long i = 1; i <= x; ++i) {\n        result += i;\n    }\n    return result;\n}\n```\n\nThis code defines the `f` function that correctly computes an array based on the rules described in the docstring. It includes helper functions `factorial` to compute the factorial of a number and `sumNumbers` to compute the sum of numbers from 1 to a given number.", "task_id": "HumanEval_106_f"}
{"name": "HumanEval_107_even_odd_palindrome", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\n>>> even_odd_palindrome(3L)\ntuple(1L, 2L)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\n>>> even_odd_palindrome(12L)\ntuple(4L, 6L)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\n*/\nTuple!(long, long) even_odd_palindrome(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_107_even_odd_palindrome.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = even_odd_palindrome;\n\n    assert(candidate(123L) == tuple(8L, 13L));\n    assert(candidate(12L) == tuple(4L, 6L));\n    assert(candidate(3L) == tuple(1L, 2L));\n    assert(candidate(63L) == tuple(6L, 8L));\n    assert(candidate(25L) == tuple(5L, 6L));\n    assert(candidate(19L) == tuple(4L, 6L));\n    assert(candidate(9L) == tuple(4L, 5L));\n    assert(candidate(1L) == tuple(0L, 1L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.conv;\nimport std.algorithm;\n\n// Function to check if a number is a palindrome\nbool isPalindrome(long num) {\n    string strNum = to!string(num);\n    return strNum == strNum.retro;\n}\n\n// Function to count even and odd palindromic numbers in the range [1, n]\nTuple!(long, long) even_odd_palindrome(long n) {\n    long evenCount = 0;\n    long oddCount = 0;\n\n    foreach(i; 1..n+1) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                evenCount++;\n            } else {\n                oddCount++;\n            }\n        }\n    }\n\n    return tuple(evenCount, oddCount);\n}\n\n// Test cases\nvoid main() {\n    assert(even_odd_palindrome(3L) == tuple(1L, 2L));\n    assert(even_odd_palindrome(12L) == tuple(4L, 6L));\n    assert(even_odd_palindrome(10L) == tuple(4L, 5L));\n    assert(even_odd_palindrome(20L) == tuple(6L, 10L));\n}\n```", "task_id": "HumanEval_107_even_odd_palindrome"}
{"name": "HumanEval_108_count_nums", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\n0L\n>>> count_nums([-1L, 11L, -11L])\n1L\n>>> count_nums([1L, 1L, 2L])\n3L\n*/\nlong count_nums(long[] arr) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_108_count_nums.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.conv;\n\nlong digitSum(long n) {\n    long sum = 0;\n    bool isNegative = n < 0;\n    n = abs(n);\n    \n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n\n    if (isNegative) {\n        auto str = to!string(n);\n        sum += -to!long(str[0..1]);\n    }\n\n    return sum;\n}\n\nlong count_nums(long[] arr) {\n    return arr.count!(n => digitSum(n) > 0);\n}\n\n// Example usage and test cases\nvoid main() {\n    assert(count_nums([]) == 0);\n    assert(count_nums([-1L, 11L, -11L]) == 1);\n    assert(count_nums([1L, 1L, 2L]) == 3);\n    writeln(\"All tests passed.\");\n}\n```\n\nThis D code defines the `count_nums` function that calculates how many numbers in the given array have a sum of digits greater than zero, accounting for negative numbers as per the given instructions. The `digitSum` function calculates the sum of digits of a number where the first digit can be negative if the number itself is negative. The `main` function contains test cases to verify the correctness of `count_nums`.", "task_id": "HumanEval_108_count_nums"}
{"name": "HumanEval_109_move_one_ball", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWe have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing \nthe following operation on the given array:\n    You are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index. \nIf it is possible to obtain the sorted array by performing the above operation\nthen return true else return false.\nIf the given array is empty then return true.\nNote: The given array is guaranteed to have unique elements.\nFor Example:\n>>> move_one_ball([3L, 4L, 5L, 1L, 2L])\ntrue\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given array.\n>>> move_one_ball([3L, 5L, 4L, 1L, 2L])\nfalse\nExplanation:It is not possible to get non-decreasing order for the given\n            array by performing any number of right shift operations.\n*/\nbool move_one_ball(long[] arr) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_109_move_one_ball.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = move_one_ball;\n\n    assert(candidate([3L, 4L, 5L, 1L, 2L]) == true);\n    assert(candidate([3L, 5L, 10L, 1L, 2L]) == true);\n    assert(candidate([4L, 3L, 1L, 2L]) == false);\n    assert(candidate([3L, 5L, 4L, 1L, 2L]) == false);\n    assert(candidate([]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\n// Function to check if the given array can be sorted by right shifting\nbool move_one_ball(long[] arr) {\n    if (arr.length == 0) {\n        return true;\n    }\n\n    // Find the index where the array deviates from being sorted\n    size_t deviationIdx = 0;\n    for (size_t i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            deviationIdx = i;\n            break;\n        }\n    }\n\n    // If no deviation found, array is already sorted\n    if (deviationIdx == 0) {\n        return true;\n    }\n\n    // Check if the array can be split and still be sorted\n    auto rightShiftedArray = arr[deviationIdx .. $] ~ arr[0 .. deviationIdx];\n    return isSorted(rightShiftedArray);\n}\n\nvoid main() {\n    // Test cases\n    assert(move_one_ball([3L, 4L, 5L, 1L, 2L]) == true);\n    assert(move_one_ball([3L, 5L, 4L, 1L, 2L]) == false);\n    assert(move_one_ball([]) == true);\n    assert(move_one_ball([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(move_one_ball([2L, 3L, 4L, 5L, 1L]) == true);\n\n    writeln(\"All tests passed!\");\n}\n```", "task_id": "HumanEval_109_move_one_ball"}
{"name": "HumanEval_110_exchange", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nIn this problem, you will implement a function that takes two arrays of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 an array of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n>>> exchange([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L])\n\"YES\"\n>>> exchange([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L])\n\"NO\"\nIt is assumed that the input arrays will be non-empty.\n*/\nstring exchange(long[] lst1, long[] lst2) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_110_exchange.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = exchange;\n\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L]) == \"YES\");\n    assert(candidate([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L]) == \"NO\");\n    assert(candidate([1L, 2L, 3L, 4L], [2L, 1L, 4L, 3L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 4L]) == \"YES\");\n    assert(candidate([5L, 7L, 3L], [2L, 6L, 3L]) == \"NO\");\n    assert(candidate([3L, 2L, 6L, 1L, 8L, 9L], [3L, 5L, 5L, 1L, 1L, 1L]) == \"NO\");\n    assert(candidate([100L, 200L], [200L, 200L]) == \"YES\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nstring exchange(long[] lst1, long[] lst2) {\n    // Check if lst1 already contains only even numbers\n    bool lst1AllEven = true;\n    foreach (num; lst1) {\n        if (num % 2 != 0) {\n            lst1AllEven = false;\n            break;\n        }\n    }\n    \n    if (lst1AllEven) {\n        return \"YES\";\n    }\n    \n    // Find at least one even number in lst2\n    bool hasEvenInLst2 = false;\n    foreach (num; lst2) {\n        if (num % 2 == 0) {\n            hasEvenInLst2 = true;\n            break;\n        }\n    }\n\n    if (!hasEvenInLst2) {\n        return \"NO\";\n    }\n    \n    // Since we have at least one odd in lst1 and at least one even in lst2,\n    // we can exchange them to make lst1 all even.\n    return \"YES\";\n}\n\nvoid main() {\n    assert(exchange([1L, 2L, 3L, 4L], [1L, 2L, 3L, 4L]) == \"YES\");\n    assert(exchange([1L, 2L, 3L, 4L], [1L, 5L, 3L, 4L]) == \"NO\");\n    assert(exchange([2L, 4L, 6L], [1L, 3L, 5L]) == \"YES\");\n    assert(exchange([1L, 3L, 5L], [7L, 9L, 11L]) == \"NO\");\n    assert(exchange([1L], [2L]) == \"YES\");\n}\n```", "task_id": "HumanEval_110_exchange"}
{"name": "HumanEval_111_histogram", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string representing a space separated lowercase letters, return an associative array\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\nExample:\n>>> histogram(\"a b c\")\n[\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n>>> histogram(\"a b b a\")\n[\"a\": 2L, \"b\": 2L].nullable\n>>> histogram(\"a b c a b\")\n[\"a\": 2L, \"b\": 2L].nullable\n>>> histogram(\"b b b b a\")\n[\"b\": 4L].nullable\n>>> histogram(\"\")\n___null_dict___\n*/\nNullable!(long[string]) histogram(string test) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_111_histogram.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = histogram;\n\n{\n        auto result = candidate(\"a b b a\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c a b\");\n        assert(!result.isNull && result.get == [\"a\": 2L, \"b\": 2L]);\n}\n\n{\n        auto result = candidate(\"a b c d g\");\n        assert(!result.isNull && result.get == [\"a\": 1L, \"b\": 1L, \"c\": 1L, \"d\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"b b b b a\");\n        assert(!result.isNull && result.get == [\"b\": 4L]);\n}\n\n{\n        auto result = candidate(\"r t g\");\n        assert(!result.isNull && result.get == [\"r\": 1L, \"t\": 1L, \"g\": 1L]);\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"a\");\n        assert(!result.isNull && result.get == [\"a\": 1L]);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.stdio;\nimport std.typecons;\nimport std.conv;\n\nNullable!(long[string]) histogram(string test) {\n    // Return null dict if input string is empty\n    if (test.empty) {\n        return Nullable!(long[string]).init;\n    }\n\n    // Split the string into an array of letters\n    auto letters = test.split;\n\n    // Calculate frequency of each letter\n    long[string] freq;\n    foreach (letter; letters) {\n        freq[letter]++;\n    }\n\n    // Determine the maximum frequency\n    long maxFreq = freq.values.maxElement;\n\n    // Collect letters with the maximum frequency\n    long[string] result;\n    foreach (key, value; freq) {\n        if (value == maxFreq) {\n            result[key] = value;\n        }\n    }\n\n    return result.nullable;\n}\n\nvoid main() {\n    // Test cases\n    writeln(histogram(\"a b c\"));               // [\"a\": 1L, \"b\": 1L, \"c\": 1L].nullable\n    writeln(histogram(\"a b b a\"));             // [\"a\": 2L, \"b\": 2L].nullable\n    writeln(histogram(\"a b c a b\"));           // [\"a\": 2L, \"b\": 2L].nullable\n    writeln(histogram(\"b b b b a\"));           // [\"b\": 4L].nullable\n    writeln(histogram(\"\"));                    // null\n}\n```\n\nThis completes the implementation of the `histogram` function according to your requirements documented in the code comments. You can run the test cases in the `main` function to verify the behavior of the `histogram` function.", "task_id": "HumanEval_111_histogram"}
{"name": "HumanEval_112_reverse_delete", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and true/false for the check.\nExample\n>>> reverse_delete(\"abcde\", \"ae\")\ntuple(\"bcd\", false)\n>>> reverse_delete(\"abcdef\", \"b\")\ntuple(\"acdef\", false)\n>>> reverse_delete(\"abcdedcba\", \"ab\")\ntuple(\"cdedc\", true)\n*/\nTuple!(string, bool) reverse_delete(string s, string c) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_112_reverse_delete.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = reverse_delete;\n\n    assert(candidate(\"abcde\", \"ae\") == tuple(\"bcd\", false));\n    assert(candidate(\"abcdef\", \"b\") == tuple(\"acdef\", false));\n    assert(candidate(\"abcdedcba\", \"ab\") == tuple(\"cdedc\", true));\n    assert(candidate(\"dwik\", \"w\") == tuple(\"dik\", false));\n    assert(candidate(\"a\", \"a\") == tuple(\"\", true));\n    assert(candidate(\"abcdedcba\", \"\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"abcdedcba\", \"v\") == tuple(\"abcdedcba\", true));\n    assert(candidate(\"vabba\", \"v\") == tuple(\"abba\", true));\n    assert(candidate(\"mamma\", \"mia\") == tuple(\"\", true));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.uni;\nimport std.typecons;\n\nTuple!(string, bool) reverse_delete(string s, string c) {\n    // Remove all characters in s that are present in c\n    string result = s.filter!(ch => !c.canFind(ch)).array;\n    \n    // Check if the resulting string is a palindrome\n    bool isPalindrome = result == result.retro.array;\n    \n    // Return the result string and the palindrome check as a tuple\n    return tuple(result, isPalindrome);\n}\n```\n\nHere's a D function `reverse_delete` that meets the requirements specified in the docstring. This function removes characters from string `s` that are present in string `c`, then checks if the resulting string is a palindrome. The function returns a tuple containing the resultant string and a boolean indicating whether it is a palindrome.", "task_id": "HumanEval_112_reverse_delete"}
{"name": "HumanEval_113_odd_count", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of strings, where each string consists of only digits, return an array.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n>>> odd_count([\"1234567\"])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count([\"3\", \"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n*/\nstring[] odd_count(string[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_113_odd_count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = odd_count;\n\n    assert(candidate([\"1234567\"]) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]);\n    assert(candidate([\"3\", \"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]);\n    assert(candidate([\"271\", \"137\", \"314\"]) == [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.stdio;\nimport std.algorithm;\nimport std.array;\n\nstring[] odd_count(string[] lst) \n{\n    string template = \"the number of odd elements in the string i of the input.\";\n    string[] results;\n    \n    foreach (str; lst)\n    {\n        int odd_count = str.count!(x => x in ['1', '3', '5', '7', '9']);\n        auto result = template.replace(\"i\", odd_count.to!string);\n        results ~= result;\n    }\n    \n    return results;\n}\n\nvoid main()\n{\n    auto result = odd_count([\"1234567\", \"3\", \"11111111\"]);\n    writeln(result); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\", \"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n}\n```", "task_id": "HumanEval_113_odd_count"}
{"name": "HumanEval_114_minSubArraySum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\n>>> minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L])\n1L\n>>> minSubArraySum([-1L, -2L, -3L])\n-6L\n*/\nlong minSubArraySum(long[] nums) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_114_minSubArraySum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = minSubArraySum;\n\n    assert(candidate([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(candidate([-1L, -2L, -3L]) == -6L);\n    assert(candidate([-1L, -2L, -3L, 2L, -10L]) == -14L);\n    assert(candidate([-9999999999999999L]) == -9999999999999999L);\n    assert(candidate([0L, 10L, 20L, 1000000L]) == 0L);\n    assert(candidate([-1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([100L, -1L, -2L, -3L, 10L, -5L]) == -6L);\n    assert(candidate([10L, 11L, 13L, 8L, 3L, 4L]) == 3L);\n    assert(candidate([100L, -33L, 32L, -1L, 0L, -2L]) == -33L);\n    assert(candidate([-10L]) == -10L);\n    assert(candidate([7L]) == 7L);\n    assert(candidate([1L, -1L]) == -1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong minSubArraySum(long[] nums) \n{\n    if (nums.length == 0) {\n        return 0L; // Considering an empty array should return 0 or we could handle this by throwing an exception or returning some indication of an invalid input.\n    }\n\n    long minSum = nums[0];\n    long currentSum = nums[0];\n\n    for (size_t i = 1; i < nums.length; ++i) {\n        currentSum = min(nums[i], currentSum + nums[i]);\n        minSum = min(minSum, currentSum);\n    }\n\n    return minSum;\n}\n\n// Test cases\nvoid main() {\n    assert(minSubArraySum([2L, 3L, 4L, 1L, 2L, 4L]) == 1L);\n    assert(minSubArraySum([-1L, -2L, -3L]) == -6L);\n    assert(minSubArraySum([3L, -4L, 2L, -3L]) == -4L);\n    assert(minSubArraySum([1L, 2L, 3L, -6L, 4L]) == -6L);\n    assert(minSubArraySum([-10L, 5L, 10L, -5L, -1L]) == -10L);\n    assert(minSubArraySum([1L]) == 1L);\n    assert(minSubArraySum([-1L]) == -1L);\n}\n```", "task_id": "HumanEval_114_minSubArraySum"}
{"name": "HumanEval_115_max_fill", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\n>>> max_fill([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L)\n6L\nExample 2:\n>>> max_fill([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L)\n5L\nExample 3:\n>>> max_fill([[0L, 0L, 0L], [0L, 0L, 0L]], 5L)\n0L\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\n*/\nlong max_fill(long[][] grid, long capacity) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_115_max_fill.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_fill;\n\n    assert(candidate([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L) == 6L);\n    assert(candidate([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L) == 5L);\n    assert(candidate([[0L, 0L, 0L], [0L, 0L, 0L]], 5L) == 0L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 2L) == 4L);\n    assert(candidate([[1L, 1L, 1L, 1L], [1L, 1L, 1L, 1L]], 9L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong max_fill(long[][] grid, long capacity) {\n    long totalWater = 0;\n\n    // Calculate the total number of water units in the grid\n    foreach (row; grid) {\n        totalWater += row.sum();\n    }\n    \n    // Calculate the number of times we need to lower the bucket\n    return cast(long) ceil(totalWater / capacity.to!real);\n}\n\n// Example usage\nvoid main() {\n    assert(max_fill([[0L, 0L, 1L, 0L], [0L, 1L, 0L, 0L], [1L, 1L, 1L, 1L]], 1L) == 6L);\n    assert(max_fill([[0L, 0L, 1L, 1L], [0L, 0L, 0L, 0L], [1L, 1L, 1L, 1L], [0L, 1L, 1L, 1L]], 2L) == 5L);\n    assert(max_fill([[0L, 0L, 0L], [0L, 0L, 0L]], 5L) == 0L);\n}\n```", "task_id": "HumanEval_115_max_fill"}
{"name": "HumanEval_116_sort_array", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\nIt must be implemented like this:\n>>> sort_array([1L, 5L, 2L, 3L, 4L])\n[1L, 2L, 3L, 4L, 5L]\n>>> sort_array([-2L, -3L, -4L, -5L, -6L])\n[-6L, -5L, -4L, -3L, -2L]\n>>> sort_array([1L, 0L, 2L, 3L, 4L])\n[0L, 1L, 2L, 3L, 4L]\n*/\nlong[] sort_array(long[] arr) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_116_sort_array.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([1L, 5L, 2L, 3L, 4L]) == [1L, 2L, 4L, 3L, 5L]);\n    assert(candidate([-2L, -3L, -4L, -5L, -6L]) == [-4L, -2L, -6L, -5L, -3L]);\n    assert(candidate([1L, 0L, 2L, 3L, 4L]) == [0L, 1L, 2L, 4L, 3L]);\n    assert(candidate([]) == []);\n    assert(candidate([2L, 5L, 77L, 4L, 5L, 3L, 5L, 7L, 2L, 3L, 4L]) == [2L, 2L, 4L, 4L, 3L, 3L, 5L, 5L, 5L, 7L, 77L]);\n    assert(candidate([3L, 6L, 44L, 12L, 32L, 5L]) == [32L, 3L, 5L, 6L, 12L, 44L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n    assert(candidate([2L, 4L, 8L, 16L, 32L]) == [2L, 4L, 8L, 16L, 32L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.stdio;\n\nlong[] sort_array(long[] arr) {\n    // Function to count number of ones in the binary representation of a number\n    long count_ones(long n) {\n        long count = 0;\n        while (n != 0) {\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    }\n\n    // Sort the array first by the number of ones in binary representation, then by the decimal value\n    return arr.sort!((a, b) => {\n        long ones_a = count_ones(a);\n        long ones_b = count_ones(b);\n        if (ones_a < ones_b) {\n            return -1;\n        } else if (ones_a > ones_b) {\n            return 1;\n        } else {\n            return (a < b) ? -1 : ((a > b) ? 1 : 0);\n        }\n    }).array;\n}\n\nvoid main() {\n    writeln(sort_array([1L, 5L, 2L, 3L, 4L]));  // [1L, 2L, 3L, 4L, 5L]\n    writeln(sort_array([-2L, -3L, -4L, -5L, -6L])); // [-6L, -5L, -4L, -3L, -2L]\n    writeln(sort_array([1L, 0L, 2L, 3L, 4L]));  // [0L, 1L, 2L, 3L, 4L]\n}\n```", "task_id": "HumanEval_116_sort_array"}
{"name": "HumanEval_117_select_words", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns an array of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty array.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\n>>> select_words(\"Mary had a little lamb\", 4L)\n[\"little\"]\n>>> select_words(\"Mary had a little lamb\", 3L)\n[\"Mary\", \"lamb\"]\n>>> select_words(\"simple white space\", 2L)\n[]\n>>> select_words(\"Hello world\", 4L)\n[\"world\"]\n>>> select_words(\"Uncle sam\", 3L)\n[\"Uncle\"]\n*/\nstring[] select_words(string s, long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_117_select_words.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.regex;\nimport std.string;\n\nstring[] select_words(string s, long n) {\n    if (s.empty) {\n        return [];\n    }\n\n    auto isConsonant(char c) {\n        c = toLower(c);\n        return c >= 'a' && c <= 'z' && !strrchr(\"aeiou\", c);\n    }\n\n    string[] words = split(s);\n    return words.filter!(word => word.count!isConsonant == n).array;\n}\n\nvoid main() {\n    // Test cases\n    assert(select_words(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(select_words(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(select_words(\"simple white space\", 2L) == []);\n    assert(select_words(\"Hello world\", 4L) == [\"world\"]);\n    assert(select_words(\"Uncle sam\", 3L) == [\"Uncle\"]);\n}\n```\n\nThis code defines the `select_words` function which follows the task requirements to filter words with exactly `n` consonants from a given string `s`. The function splits the string into words, checks each word for the number of consonants, and returns a filtered array of words that meet the criteria.", "task_id": "HumanEval_117_select_words"}
{"name": "HumanEval_118_get_closest_vowel", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \nYou may assume that the given string contains English letter only.\nExample:\n>>> get_closest_vowel(\"yogurt\")\n\"u\"\n>>> get_closest_vowel(\"FULL\")\n\"U\"\n>>> get_closest_vowel(\"quick\")\n\"\"\n>>> get_closest_vowel(\"ab\")\n\"\"\n*/\nstring get_closest_vowel(string word) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_118_get_closest_vowel.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_closest_vowel;\n\n    assert(candidate(\"yogurt\") == \"u\");\n    assert(candidate(\"full\") == \"u\");\n    assert(candidate(\"easy\") == \"\");\n    assert(candidate(\"eAsy\") == \"\");\n    assert(candidate(\"ali\") == \"\");\n    assert(candidate(\"bad\") == \"a\");\n    assert(candidate(\"most\") == \"o\");\n    assert(candidate(\"ab\") == \"\");\n    assert(candidate(\"ba\") == \"\");\n    assert(candidate(\"quick\") == \"\");\n    assert(candidate(\"anime\") == \"i\");\n    assert(candidate(\"Asia\") == \"\");\n    assert(candidate(\"Above\") == \"o\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nstring get_closest_vowel(string word) {\n    string vowels = \"aeiouAEIOU\";\n\n    // Traverse from the right side of the word\n    for (int i = word.length - 2; i > 0; --i) {\n        if (vowels.canFind(word[i]) && !vowels.canFind(word[i - 1]) && !vowels.canFind(word[i + 1])) {\n            return word[i].to!string;\n        }\n    }\n\n    return \"\";\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(get_closest_vowel(\"yogurt\")); // \"u\"\n    writeln(get_closest_vowel(\"FULL\"));   // \"U\"\n    writeln(get_closest_vowel(\"quick\"));  // \"\"\n    writeln(get_closest_vowel(\"ab\"));     // \"\"\n}\n```", "task_id": "HumanEval_118_get_closest_vowel"}
{"name": "HumanEval_119_match_parens", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\n>>> match_parens([\"()(\", \")\"])\n\"Yes\"\n>>> match_parens([\")\", \")\"])\n\"No\"\n*/\nstring match_parens(string[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_119_match_parens.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = match_parens;\n\n    assert(candidate([\"()(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \")\"]) == \"No\");\n    assert(candidate([\"(()(())\", \"())())\"]) == \"No\");\n    assert(candidate([\")())\", \"(()()(\"]) == \"Yes\");\n    assert(candidate([\"(())))\", \"(()())((\"]) == \"Yes\");\n    assert(candidate([\"()\", \"())\"]) == \"No\");\n    assert(candidate([\"(()(\", \"()))()\"]) == \"Yes\");\n    assert(candidate([\"((((\", \"((())\"]) == \"No\");\n    assert(candidate([\")(()\", \"(()(\"]) == \"No\");\n    assert(candidate([\")(\", \")(\"]) == \"No\");\n    assert(candidate([\"(\", \")\"]) == \"Yes\");\n    assert(candidate([\")\", \"(\"]) == \"Yes\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.conv;\n\n// Helper function to check if a string of parentheses is balanced\nbool isBalanced(string s) {\n    int balance = 0;\n    foreach (c; s) {\n        if (c == '(') {\n            balance++;\n        } else {\n            balance--;\n            if (balance < 0) {\n                return false;\n            }\n        }\n    }\n    return balance == 0;\n}\n\nstring match_parens(string[] lst) {\n    // There are only two strings in the array\n    string first = lst[0];\n    string second = lst[1];\n    \n    // Check concatenations both ways\n    if (isBalanced(first ~ second) || isBalanced(second ~ first)) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nvoid main() {\n    // Test cases\n    writeln(match_parens([\"()(\", \")\"])); // Should print \"Yes\"\n    writeln(match_parens([\")\", \")\"]));   // Should print \"No\"\n    writeln(match_parens([\"(\", \")\"]));   // Should print \"Yes\"\n    writeln(match_parens([\"(()\", \")()\"])); // Should print \"Yes\"\n    writeln(match_parens([\")(\", \")\"])); // Should print \"No\"\n}\n```\n\nThis code defines a function `match_parens` that checks if it's possible to concatenate the two strings in the given list to make a balanced parentheses string. The helper function `isBalanced` is used to determine if a string of parentheses is balanced. The `main` function demonstrates a few test cases.", "task_id": "HumanEval_119_match_parens"}
{"name": "HumanEval_120_maximum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array arr of integers and a positive integer k, return a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum([-3L, -4L, 5L], 3L)\n[-4L, -3L, 5L]\nExample 2:\n>>> maximum([4L, -4L, 4L], 2L)\n[4L, 4L]\nExample 3:\n>>> maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)\n[2L]\nNote:\n    1. The length of the array will be in the range of [1, 1000].\n    2. The elements in the array will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\n*/\nlong[] maximum(long[] arr, long k) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_120_maximum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.range;\nimport std.array;\n\nlong[] maximum(long[] arr, long k) {\n    if (k == 0) {\n        return [];\n    }\n    auto sortedArr = sort(arr, Yes.negate!(a => a) <);\n    return sortedArr[0..k].array.sort;\n}\n\n// Example usage\nvoid main() {\n    import std.stdio;\n    \n    writeln(maximum([-3L, -4L, 5L], 3L)); // should print [-4L, -3L, 5L]\n    writeln(maximum([4L, -4L, 4L], 2L)); // should print [4L, 4L]\n    writeln(maximum([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L)); // should print [2L]\n}\n```\nThis code defines the `maximum` function which sorts and selects the maximum k numbers from an input array, then outputs them in ascending order.", "task_id": "HumanEval_120_maximum"}
{"name": "HumanEval_121_solution", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\nExamples\n>>> solution([5L, 8L, 7L, 1L])\n12L\n>>> solution([3L, 3L, 3L, 3L, 3L])\n9L\n>>> solution([30L, 13L, 24L, 321L])\n0L\n*/\nlong solution(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_121_solution.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = solution;\n\n    assert(candidate([5L, 8L, 7L, 1L]) == 12L);\n    assert(candidate([3L, 3L, 3L, 3L, 3L]) == 9L);\n    assert(candidate([30L, 13L, 24L, 321L]) == 0L);\n    assert(candidate([5L, 9L]) == 5L);\n    assert(candidate([2L, 4L, 8L]) == 0L);\n    assert(candidate([30L, 13L, 23L, 32L]) == 23L);\n    assert(candidate([3L, 13L, 2L, 9L]) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong solution(long[] lst) {\n    long sum = 0;\n    for (size_t i = 0; i < lst.length; i += 2) { \n        if (lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n```", "task_id": "HumanEval_121_solution"}
{"name": "HumanEval_122_add_elements", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\n>>> add_elements([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L)\n24L\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\nlong add_elements(long[] arr, long k) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_122_add_elements.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = add_elements;\n\n    assert(candidate([1L, -2L, -3L, 41L, 57L, 76L, 87L, 88L, 99L], 3L) == -4L);\n    assert(candidate([111L, 121L, 3L, 4000L, 5L, 6L], 2L) == 0L);\n    assert(candidate([11L, 21L, 3L, 90L, 5L, 6L, 7L, 8L, 9L], 4L) == 125L);\n    assert(candidate([111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L], 4L) == 24L);\n    assert(candidate([1L], 1L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong add_elements(long[] arr, long k) {\n    long sum = 0;\n    foreach (i; 0 .. k) {\n        if (abs(arr[i]) < 100) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nvoid main() {\n    long[] arr = [111L, 21L, 3L, 4000L, 5L, 6L, 7L, 8L, 9L];\n    long k = 4L;\n    assert(add_elements(arr, k) == 24L);\n}\n```\n\nThis function iterates over the first `k` elements of the array `arr` and adds together the elements that have at most two digits. The check `abs(arr[i]) < 100` ensures that only elements with absolute values less than 100 are considered. The `main` function contains a test case for the function.", "task_id": "HumanEval_122_add_elements"}
{"name": "HumanEval_123_get_odd_collatz", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote: \n    1. Collatz(1) is [1].\n    2. returned array sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>>> get_odd_collatz(5L)\n[1L, 5L]\n*/\nlong[] get_odd_collatz(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_123_get_odd_collatz.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_odd_collatz;\n\n    assert(candidate(14L) == [1L, 5L, 7L, 11L, 13L, 17L]);\n    assert(candidate(5L) == [1L, 5L]);\n    assert(candidate(12L) == [1L, 3L, 5L]);\n    assert(candidate(1L) == [1L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.algorithm.sorting;\n\nlong[] get_odd_collatz(long n) {\n    long[] odds;\n    while (n != 1) {\n        if (n % 2 != 0) {\n            odds ~= n;\n        }\n        if (n % 2 == 0) {\n            n /= 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    // Add the final 1 to the list\n    odds ~= 1;\n    \n    // Sort the array and return\n    return sort(odds);\n}\n\nvoid main() {\n    // Example usage:\n    auto result = get_odd_collatz(5);\n    writeln(result); // Output: [1, 5]\n}\n```\n\nThis `get_odd_collatz` function will generate the Collatz sequence for a given number `n`, collect the odd numbers encountered, and return them sorted.", "task_id": "HumanEval_123_get_odd_collatz"}
{"name": "HumanEval_124_valid_date", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n>>> valid_date(\"03-11-2000\")\ntrue\n>>> valid_date(\"15-01-2012\")\nfalse\n>>> valid_date(\"04-0-2040\")\nfalse\n>>> valid_date(\"06-04-2020\")\ntrue\n>>> valid_date(\"06/04/2020\")\nfalse\n*/\nbool valid_date(string date) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_124_valid_date.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.regex;\n\nbool valid_date(string date) {\n    // Check if the date string is empty\n    if (date.length == 0) {\n        return false;\n    }\n\n    // Define a regex pattern for the date format mm-dd-yyyy\n    auto datePattern = regex(r\"^\\d{2}-\\d{2}-\\d{4}$\");\n\n    // Check if the date matches the required format\n    if (!date.matches(datePattern)) {\n        return false;\n    }\n\n    // Extract the month, day, and year from the date string\n    auto parts = date.split(\"-\");\n    int month = parts[0].to!int;\n    int day = parts[1].to!int;\n    int year = parts[2].to!int;\n\n    // Check if the month is within the valid range\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    // Check the number of days for each month\n    bool isValidDay;\n    switch (month) {\n        case 1, 3, 5, 7, 8, 10, 12:\n            isValidDay = day >= 1 && day <= 31;\n            break;\n        case 4, 6, 9, 11:\n            isValidDay = day >= 1 && day <= 30;\n            break;\n        case 2:\n            isValidDay = day >= 1 && day <= 29;\n            break;\n        default:\n            isValidDay = false;\n    }\n\n    // Return true if the day is within the valid range for the month\n    return isValidDay;\n}\n```\n\nYou can run the provided examples to test the function:\n```d\nimport std.stdio;\n\nvoid main() {\n    writeln(valid_date(\"03-11-2000\")); // true\n    writeln(valid_date(\"15-01-2012\")); // false\n    writeln(valid_date(\"04-0-2040\"));  // false\n    writeln(valid_date(\"06-04-2020\")); // true\n    writeln(valid_date(\"06/04/2020\")); // false\n}\n```", "task_id": "HumanEval_124_valid_date"}
{"name": "HumanEval_126_is_sorted", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of numbers, return whether or not they are sorted\nin ascending order. If array has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted([5L])\ntrue\n>>> is_sorted([1L, 2L, 3L, 4L, 5L])\ntrue\n>>> is_sorted([1L, 3L, 2L, 4L, 5L])\nfalse\n>>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L])\ntrue\n>>> is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])\ntrue\n>>> is_sorted([1L, 3L, 2L, 4L, 5L, 6L, 7L])\nfalse\n>>> is_sorted([1L, 2L, 2L, 3L, 3L, 4L])\ntrue\n>>> is_sorted([1L, 2L, 2L, 2L, 3L, 4L])\nfalse\n*/\nbool is_sorted(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_126_is_sorted.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_sorted;\n\n    assert(candidate([5L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L]) == true);\n    assert(candidate([1L, 3L, 2L, 4L, 5L, 6L, 7L]) == false);\n    assert(candidate([]) == true);\n    assert(candidate([1L]) == true);\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 2L, 2L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 4L]) == false);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L]) == true);\n    assert(candidate([1L, 2L, 3L, 4L]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nbool is_sorted(long[] lst) {\n    if (lst.length <= 1) {\n        return true;\n    }\n    \n    for (size_t i = 1; i < lst.length; ++i) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n    \n    int dupCounter = 1;\n    for (size_t i = 1; i < lst.length; ++i) {\n        if (lst[i] == lst[i - 1]) {\n            dupCounter++;\n            if (dupCounter > 2) {\n                return false;\n            }\n        } else {\n            dupCounter = 1;\n        }\n    }\n    \n    return true;\n}\n\n// Test cases\nvoid main() {\n    import std.stdio;\n    \n    writeln(is_sorted([5L])); // true\n    writeln(is_sorted([1L, 2L, 3L, 4L, 5L])); // true\n    writeln(is_sorted([1L, 3L, 2L, 4L, 5L])); // false\n    writeln(is_sorted([1L, 2L, 3L, 4L, 5L, 6L])); // true\n    writeln(is_sorted([1L, 2L, 3L, 4L, 5L, 6L, 7L])); // true\n    writeln(is_sorted([1L, 3L, 2L, 4L, 5L, 6L, 7L])); // false\n    writeln(is_sorted([1L, 2L, 2L, 3L, 3L, 4L])); // true\n    writeln(is_sorted([1L, 2L, 2L, 2L, 3L, 4L])); // false\n}\n```", "task_id": "HumanEval_126_is_sorted"}
{"name": "HumanEval_127_intersection", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\n>>> intersection(tuple(1L, 2L), tuple(2L, 3L))\n\"NO\"\n>>> intersection(tuple(-1L, 1L), tuple(0L, 4L))\n\"NO\"\n>>> intersection(tuple(-3L, -1L), tuple(-5L, 5L))\n\"YES\"\n*/\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_127_intersection.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = intersection;\n\n    assert(candidate(tuple(1L, 2L), tuple(2L, 3L)) == \"NO\");\n    assert(candidate(tuple(-1L, 1L), tuple(0L, 4L)) == \"NO\");\n    assert(candidate(tuple(-3L, -1L), tuple(-5L, 5L)) == \"YES\");\n    assert(candidate(tuple(-2L, 2L), tuple(-4L, 0L)) == \"YES\");\n    assert(candidate(tuple(-11L, 2L), tuple(-1L, -1L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(3L, 5L)) == \"NO\");\n    assert(candidate(tuple(1L, 2L), tuple(1L, 2L)) == \"NO\");\n    assert(candidate(tuple(-2L, -2L), tuple(-3L, -2L)) == \"NO\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\n\n// Helper function to check if a number is prime\nbool isPrime(long n) {\n    if (n <= 1) return false;\n    if (n == 2) return true; // 2 is the only even prime number\n    if (n % 2 == 0) return false;\n\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nstring intersection(Tuple!(long, long) interval1, Tuple!(long, long) interval2) {\n    long start1 = interval1[0];\n    long end1 = interval1[1];\n    long start2 = interval2[0];\n    long end2 = interval2[1];\n\n    // Determine the intersection interval\n    long startIntersection = max(start1, start2);\n    long endIntersection = min(end1, end2);\n\n    // Check if there is an intersection\n    if (startIntersection > endIntersection) {\n        return \"NO\";\n    }\n\n    // Calculate the length of the intersection interval\n    long lengthIntersection = endIntersection - startIntersection + 1;\n\n    // Check if the length is a prime number\n    if (isPrime(lengthIntersection)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Sample usage\npragma(msg, intersection(tuple(1L, 2L), tuple(2L, 3L))); // \"NO\"\npragma(msg, intersection(tuple(-1L, 1L), tuple(0L, 4L))); // \"NO\"\npragma(msg, intersection(tuple(-3L, -1L), tuple(-5L, 5L))); // \"YES\"\n```", "task_id": "HumanEval_127_intersection"}
{"name": "HumanEval_128_prod_signs", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return null for empty arr.\nExample:\n>>> prod_signs([1L, 2L, 2L, -4L])\n9L\n>>> prod_signs([0L, 1L])\n0L\n>>> prod_signs([])\nNone\n*/\nNullable!(long) prod_signs(long[] arr) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_128_prod_signs.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = prod_signs;\n\n{\n        auto result = candidate([1L, 2L, 2L, -4L]);\n        assert(!result.isNull && result.get == -9L);\n}\n\n{\n        auto result = candidate([0L, 1L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n{\n        auto result = candidate([1L, 1L, 1L, 2L, 3L, -1L, 1L]);\n        assert(!result.isNull && result.get == -10L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 2L, -1L, -1L, 9L]);\n        assert(!result.isNull && result.get == 20L);\n}\n\n{\n        auto result = candidate([-1L, 1L, -1L, 1L]);\n        assert(!result.isNull && result.get == 4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 1L]);\n        assert(!result.isNull && result.get == -4L);\n}\n\n{\n        auto result = candidate([-1L, 1L, 1L, 0L]);\n        assert(!result.isNull && result.get == 0L);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nNullable!(long) prod_signs(long[] arr) {\n    if (arr.length == 0) {\n        return Nullable!long.init;\n    }\n\n    long sum_magnitudes = 0;\n    long product_signs = 1;\n\n    foreach (num; arr) {\n        sum_magnitudes += abs(num);\n        if (num == 0) {\n            product_signs = 0;\n        } else {\n            product_signs *= (num > 0 ? 1 : -1);\n        }\n    }\n\n    return sum_magnitudes * product_signs;\n}\n```", "task_id": "HumanEval_128_prod_signs"}
{"name": "HumanEval_129_minPath", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered arrays of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered array of the values on the cells that the minimum path go through.\nExamples:    \n>>> minPath([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L)\n[1L, 2L, 1L]\n>>> minPath([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L)\n[1L]\n*/\nlong[] minPath(long[][] grid, long k) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_129_minPath.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = minPath;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L) == [1L, 2L, 1L]);\n    assert(candidate([[5L, 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L) == [1L]);\n    assert(candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]], 4L) == [1L, 2L, 1L, 2L]);\n    assert(candidate([[6L, 4L, 13L, 10L], [5L, 7L, 12L, 1L], [3L, 16L, 11L, 15L], [8L, 14L, 9L, 2L]], 7L) == [1L, 10L, 1L, 10L, 1L, 10L, 1L]);\n    assert(candidate([[8L, 14L, 9L, 2L], [6L, 4L, 13L, 15L], [5L, 7L, 1L, 12L], [3L, 10L, 11L, 16L]], 5L) == [1L, 7L, 1L, 7L, 1L]);\n    assert(candidate([[11L, 8L, 7L, 2L], [5L, 16L, 14L, 4L], [9L, 3L, 15L, 6L], [12L, 13L, 10L, 1L]], 9L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L]);\n    assert(candidate([[12L, 13L, 10L, 1L], [9L, 3L, 15L, 6L], [5L, 16L, 14L, 4L], [11L, 8L, 7L, 2L]], 12L) == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L]);\n    assert(candidate([[2L, 7L, 4L], [3L, 1L, 5L], [6L, 8L, 9L]], 8L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n    assert(candidate([[6L, 1L, 5L], [3L, 8L, 9L], [2L, 7L, 4L]], 8L) == [1L, 5L, 1L, 5L, 1L, 5L, 1L, 5L]);\n    assert(candidate([[1L, 2L], [3L, 4L]], 10L) == [1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L]);\n    assert(candidate([[1L, 3L], [3L, 2L]], 10L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.conv;\n\nstruct Cell {\n    long value;\n    int row;\n    int col;\n\n    bool opCmp(const Cell rhs) const nothrow {\n        return value < rhs.value;\n    }\n}\n\nlong[] minPath(long[][] grid, long k) {\n    int N = grid.length;\n    if (N < 2) return [];\n\n    Cell[] cells;\n    foreach (r, row; grid) {\n        foreach (c, val; row) {\n            cells ~= Cell(val, r, c);\n        }\n    }\n\n    cells.sort;\n\n    long[] result;\n    Cell current = cells[0];\n    result ~= current.value;\n\n    for (long step = 1; step < k; step++) {\n        Cell next = current;\n\n        foreach (cell; cells) {\n            int dr = abs(cell.row - current.row);\n            int dc = abs(cell.col - current.col);\n            if (dr + dc == 1) {\n                if (cell.value < next.value || (step == 1 && cell.value < next.value)) {\n                    next = cell;\n                }\n            }\n        }\n\n        current = next;\n        result ~= current.value;\n    }\n\n    return result;\n}\n\nvoid main() {\n    long[][] grid1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n    writeln(minPath(grid1, 3)); // [1, 2, 1]\n\n    long[][] grid2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]];\n    writeln(minPath(grid2, 1)); // [1]\n}\n```\n\nThis code defines the function `minPath` to find the minimum path of length `k` in the provided grid. It does this by sorting the cells of the grid based on their values, then starting from the smallest value and moving to the smallest neighbor at each step to form the path. The result is an array of cell values corresponding to the minimum path.", "task_id": "HumanEval_129_minPath"}
{"name": "HumanEval_130_tri", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return an array of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\n>>> tri(3L)\n[1L, 3L, 2L, 8L]\n*/\nlong[] tri(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_130_tri.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = tri;\n\n    assert(candidate(3L) == [1L, 3L, 2L, 8L]);\n    assert(candidate(4L) == [1L, 3L, 2L, 8L, 3L]);\n    assert(candidate(5L) == [1L, 3L, 2L, 8L, 3L, 15L]);\n    assert(candidate(6L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L]);\n    assert(candidate(7L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L]);\n    assert(candidate(8L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L]);\n    assert(candidate(9L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L]);\n    assert(candidate(20L) == [1L, 3L, 2L, 8L, 3L, 15L, 4L, 24L, 5L, 35L, 6L, 48L, 7L, 63L, 8L, 80L, 9L, 99L, 10L, 120L, 11L]);\n    assert(candidate(0L) == [1L]);\n    assert(candidate(1L) == [1L, 3L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.stdio;\n\nlong[] tri(long n) \n{\n    long[] sequence;\n    sequence.length = n + 1; // Set the array length to n+1\n\n    // Lambda function to get the value of tri(n)\n    auto tribonacci = (long n) { \n        if (n == 0) return 1L; // Since tri(0) should be included in the series\n        if (n == 1) return 3L;\n        return n % 2 == 0 ? 1 + n / 2 : sequence[n - 1] + sequence[n - 2] + sequence[n + 1];\n    };\n\n    // Setting the initial conditions for the tribonacci sequence\n    if (n >= 0) sequence[0] = 1;\n    if (n >= 1) sequence[1] = 3;\n\n    // Compute tribonacci for each element up to n\n    foreach (i; 2 .. sequence.length)\n    {\n        if (i == sequence.length - 1) {\n            sequence[i] = tribonacci(i);\n        } else {\n            sequence[i] = tribonacci(i);\n            sequence[i + 1] = tribonacci(i + 1);\n        }\n    }\n\n    return sequence;\n}\n\n// Uncomment the code below to test the function\nvoid main() {\n    auto result = tri(3L);\n    writeln(result); // Output should be [1, 3, 2, 8]\n}\n```\n\nThis code defines a `tri` function that computes the Tribonacci sequence as specified. It sets the initial conditions, defines the recurrence relations, and calculates the sequence values to generate an array of the first `n + 1` numbers. The `main` function provides an example of how to test the `tri` function with `n` equal to 3, with the expected output `[1, 3, 2, 8]`.", "task_id": "HumanEval_130_tri"}
{"name": "HumanEval_131_digits", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\n>>> digits(1L)\n1L\n>>> digits(4L)\n0L\n>>> digits(235L)\n15L\n*/\nlong digits(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_131_digits.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = digits;\n\n    assert(candidate(5L) == 5L);\n    assert(candidate(54L) == 5L);\n    assert(candidate(120L) == 1L);\n    assert(candidate(5014L) == 5L);\n    assert(candidate(98765L) == 315L);\n    assert(candidate(5576543L) == 2625L);\n    assert(candidate(2468L) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong digits(long n) \n{\n    // Initialize the product and an indicator to check if we have any odd digits\n    long product = 1;\n    bool hasOdd = false;\n\n    // Iterate over each digit of the number\n    while (n > 0) \n    {\n        long digit = n % 10;\n        if (digit % 2 != 0) \n        {\n            product *= digit;\n            hasOdd = true;\n        }\n        n /= 10;\n    }\n\n    // If there were no odd digits, return 0\n    if (!hasOdd) \n    {\n        return 0;\n    }\n    \n    return product;\n}\n\n// Examples to check the function\nvoid main()\n{\n    assert(digits(1L) == 1L);\n    assert(digits(4L) == 0L);\n    assert(digits(235L) == 15L);\n}\n```\n\nThis code defines a function `digits` that takes a positive integer `n` and returns the product of its odd digits or 0 if all digits are even. The `main` function includes tests to check the correctness of the function.", "task_id": "HumanEval_131_digits"}
{"name": "HumanEval_132_is_nested", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue\n*/\nbool is_nested(string string) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_132_is_nested.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_nested;\n\n    assert(candidate(\"[[]]\") == true);\n    assert(candidate(\"[]]]]]]][[[[[]\") == false);\n    assert(candidate(\"[][]\") == false);\n    assert(candidate(\"[]\") == false);\n    assert(candidate(\"[[[[]]]]\") == true);\n    assert(candidate(\"[]]]]]]]]]]\") == false);\n    assert(candidate(\"[][][[]]\") == true);\n    assert(candidate(\"[[]\") == false);\n    assert(candidate(\"[]]\") == false);\n    assert(candidate(\"[[]][[\") == true);\n    assert(candidate(\"[[][]]\") == true);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"[[[[[[[[\") == false);\n    assert(candidate(\"]]]]]]]]\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nbool is_nested(string str) \n{\n    // Stack to keep track of opening brackets\n    int[] stack = [];\n    \n    // Variable to track nested brackets\n    bool nested = false;\n\n    foreach (ch; str) \n    {\n        if (ch == '[') \n        {\n            // Push the index of the opening bracket onto the stack\n            stack ~= '[';\n        }\n        else if (ch == ']') \n        {\n            // Check if there's a matching opening bracket on the stack\n            if (!stack.empty)\n            {\n                // Pop the opening bracket\n                stack = stack[0 .. $-1];\n                \n                // Check if there are still elements in the stack\n                // If yes, it means there was a nested bracket\n                if (!stack.empty) \n                {\n                    nested = true;\n                }\n            }\n        }\n    }\n\n    return nested;\n}\n\nvoid main()\n{\n    assert(is_nested(\"[[]]\") == true);\n    assert(is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert(is_nested(\"[][]\") == false);\n    assert(is_nested(\"[]\") == false);\n    assert(is_nested(\"[[][]]\") == true);\n    assert(is_nested(\"[[]][[\") == true);\n\n    writeln(\"All tests passed!\");\n}\n```", "task_id": "HumanEval_132_is_nested"}
{"name": "HumanEval_133_sum_squares", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given an array of numbers.\nYou need to return the sum of squared numbers in the given array,\nround each element in the array to the upper int(Ceiling) first.\nExamples:\n>>> lst([1.0, 2.0, 3.0])\n14L\n>>> lst([1.0, 4.0, 9.0])\n98L\n>>> lst([1.0, 3.0, 5.0, 7.0])\n84L\n>>> lst([1.4, 4.2, 0.0])\n29L\n>>> lst([-2.4, 1.0, 1.0])\n6L\n*/\nlong sum_squares(float[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_133_sum_squares.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 2.0, 3.0]) == 14L);\n    assert(candidate([1.0, 3.0, 5.0, 7.0]) == 84L);\n    assert(candidate([1.4, 4.2, 0.0]) == 29L);\n    assert(candidate([-2.4, 1.0, 1.0]) == 6L);\n    assert(candidate([100.0, 1.0, 15.0, 2.0]) == 10230L);\n    assert(candidate([10000.0, 10000.0]) == 200000000L);\n    assert(candidate([-1.4, 4.6, 6.3]) == 75L);\n    assert(candidate([-1.4, 17.9, 18.9, 19.9]) == 1086L);\n    assert(candidate([0.0]) == 0L);\n    assert(candidate([-1.0]) == 1L);\n    assert(candidate([-1.0, 1.0, 0.0]) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of squared numbers in the given array,\nround each element in the array to the upper int(Ceiling) first.\nExamples:\n>>> sum_squares([1.0, 2.0, 3.0])\n14L\n>>> sum_squares([1.0, 4.0, 9.0])\n98L\n>>> sum_squares([1.0, 3.0, 5.0, 7.0])\n84L\n>>> sum_squares([1.4, 4.2, 0.0])\n29L\n>>> sum_squares([-2.4, 1.0, 1.0])\n6L\n*/\n\nlong sum_squares(float[] lst) \n{\n    long sum = 0;\n    foreach (float num; lst) \n    {\n        long ceilValue = cast(long) ceil(num);\n        sum += ceilValue * ceilValue;\n    }\n    return sum;\n}\n```", "task_id": "HumanEval_133_sum_squares"}
{"name": "HumanEval_134_check_if_last_char_is_a_letter", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\nExamples:\n>>> check_if_last_char_is_a_letter(\"apple pie\")\nfalse\n>>> check_if_last_char_is_a_letter(\"apple pi e\")\ntrue\n>>> check_if_last_char_is_a_letter(\"apple pi e \")\nfalse\n>>> check_if_last_char_is_a_letter(\"\")\nfalse\n*/\nbool check_if_last_char_is_a_letter(string txt) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_134_check_if_last_char_is_a_letter.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_if_last_char_is_a_letter;\n\n    assert(candidate(\"apple\") == false);\n    assert(candidate(\"apple pi e\") == true);\n    assert(candidate(\"eeeee\") == false);\n    assert(candidate(\"A\") == true);\n    assert(candidate(\"Pumpkin pie \") == false);\n    assert(candidate(\"Pumpkin pie 1\") == false);\n    assert(candidate(\"\") == false);\n    assert(candidate(\"eeeee e \") == false);\n    assert(candidate(\"apple pie\") == false);\n    assert(candidate(\"apple pi e \") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.utf;\n\nbool check_if_last_char_is_a_letter(string txt) {\n    if (txt.empty)\n        return false;\n    // Remove any trailing spaces\n    txt = txt.stripRight();\n    if (txt.empty)\n        return false;\n\n    char lastChar = txt[$-1];\n    if (!lastChar.isAlpha)\n        return false;\n\n    // Split string into words\n    auto words = txt.split();\n    if (words.length == 0)\n        return false;\n\n    string lastWord = words[$-1];\n    return lastWord.length == 1 && lastWord[0].isAlpha;\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(check_if_last_char_is_a_letter(\"apple pie\"));    // false\n    writeln(check_if_last_char_is_a_letter(\"apple pi e\"));   // true\n    writeln(check_if_last_char_is_a_letter(\"apple pi e \"));  // false\n    writeln(check_if_last_char_is_a_letter(\"\"));             // false\n}\n```", "task_id": "HumanEval_134_check_if_last_char_is_a_letter"}
{"name": "HumanEval_135_can_arrange", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\n>>> can_arrange([1L, 2L, 4L, 3L, 5L])\n3L\n>>> can_arrange([1L, 2L, 3L])\n-1L\n*/\nlong can_arrange(long[] arr) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_135_can_arrange.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = can_arrange;\n\n    assert(candidate([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(candidate([1L, 2L, 4L, 5L]) == -1L);\n    assert(candidate([1L, 4L, 2L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([4L, 8L, 5L, 7L, 3L]) == 4L);\n    assert(candidate([]) == -1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong can_arrange(long[] arr) {\n    if (arr.length < 2) {\n        return -1;\n    }\n    \n    for (long i = arr.length - 1; i > 0; --i) {\n        if (arr[i] <= arr[i - 1]) {\n            return i;\n        }\n    }\n    \n    return -1;\n}\n\n// Test cases\nvoid main() {\n    assert(can_arrange([1L, 2L, 4L, 3L, 5L]) == 3L);\n    assert(can_arrange([1L, 2L, 3L]) == -1L);\n    assert(can_arrange([5L, 4L, 3L, 2L, 1L]) == 1L);\n    assert(can_arrange([10L, 30L, 20L, 40L, 50L]) == 2L);\n    assert(can_arrange([1L]) == -1L);\n    assert(can_arrange([]) == -1L);\n    // additional test cases\n    assert(can_arrange([1L, 3L, 5L, 4L, 6L]) == 3L);\n    assert(can_arrange([7L, 8L, 9L, 6L, 10L, 11L]) == 3L);\n}\n```\n\nThis code defines the function `can_arrange` according to the requirements, returning the largest index where an element is not greater than or equal to the previous element. It also includes some test cases within the main function to verify the behavior of the function.", "task_id": "HumanEval_135_can_arrange"}
{"name": "HumanEval_136_largest_smallest_integers", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in an array.\nIf there is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L])\ntuple(None, 1L)\n>>> largest_smallest_integers([])\ntuple(None, None)\n>>> largest_smallest_integers([0L])\ntuple(None, None)\n*/\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_136_largest_smallest_integers.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = largest_smallest_integers;\n\n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([2L, 4L, 1L, 3L, 5L, 7L, 0L]);\n        assert(result[0].isNull);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([1L, 3L, 2L, 4L, 5L, 6L, -2L]);\n        assert(!result[0].isNull && result[0].get == -2L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([4L, 5L, 3L, 6L, 2L, 7L, -7L]);\n        assert(!result[0].isNull && result[0].get == -7L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([7L, 3L, 8L, 4L, 9L, 2L, 5L, -9L]);\n        assert(!result[0].isNull && result[0].get == -9L);\n        assert(!result[1].isNull && result[1].get == 2L);\n}\n\n{\n        auto result = candidate([]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([0L]);\n        assert(result[0].isNull);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L, -3L, -5L, -6L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-1L, -3L, -5L, -6L, 0L]);\n        assert(!result[0].isNull && result[0].get == -1L);\n        assert(result[1].isNull);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n{\n        auto result = candidate([-6L, -4L, -4L, -3L, -100L, 1L]);\n        assert(!result[0].isNull && result[0].get == -3L);\n        assert(!result[1].isNull && result[1].get == 1L);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nTuple!(Nullable!(long), Nullable!(long)) largest_smallest_integers(long[] lst) {\n    long? largestNegative = Nullable!long.init;\n    long? smallestPositive = Nullable!long.init;\n\n    foreach (num; lst) {\n        if (num < 0 && (!largestNegative.hasValue || num > largestNegative.value)) {\n            largestNegative = Nullable!long(num);\n        }\n        if (num > 0 && (!smallestPositive.hasValue || num < smallestPositive.value)) {\n            smallestPositive = Nullable!long(num);\n        }\n    }\n\n    return tuple(largestNegative.hasValue ? largestNegative : Nullable!long(null),\n                 smallestPositive.hasValue ? smallestPositive : Nullable!long(null));\n}\n\n// Examples\nvoid main() {\n    assert(largest_smallest_integers([2L, 4L, 1L, 3L, 5L, 7L]) == tuple(Nullable!long(null), Nullable!long(1L)));\n    assert(largest_smallest_integers([]) == tuple(Nullable!long(null), Nullable!long(null)));\n    assert(largest_smallest_integers([0L]) == tuple(Nullable!long(null), Nullable!long(null)));\n    assert(largest_smallest_integers([-1L, -2L, -3L, 1L, 2L, 3L]) == tuple(Nullable!long(-1L), Nullable!long(1L)));\n    assert(largest_smallest_integers([-5L, -8L, 7L, 0L]) == tuple(Nullable!long(-5L), Nullable!long(7L)));\n}\n```", "task_id": "HumanEval_136_largest_smallest_integers"}
{"name": "HumanEval_138_is_equal_to_sum_even", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\n>>> is_equal_to_sum_even(4L)\nfalse\n>>> is_equal_to_sum_even(6L)\nfalse\n>>> is_equal_to_sum_even(8L)\ntrue\n*/\nbool is_equal_to_sum_even(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_138_is_equal_to_sum_even.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_equal_to_sum_even;\n\n    assert(candidate(4L) == false);\n    assert(candidate(6L) == false);\n    assert(candidate(8L) == true);\n    assert(candidate(10L) == true);\n    assert(candidate(11L) == false);\n    assert(candidate(12L) == true);\n    assert(candidate(13L) == false);\n    assert(candidate(16L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\n>>> is_equal_to_sum_even(4L)\nfalse\n>>> is_equal_to_sum_even(6L)\nfalse\n>>> is_equal_to_sum_even(8L)\ntrue\n*/\n\nbool is_equal_to_sum_even(long n) \n{\n    // We need to check if n can be represented as the sum of 4 positive even numbers.\n    // Each positive even number is at least 2, so the smallest sum of 4 positive evens is 2 + 2 + 2 + 2 = 8.\n    // Therefore, any number less than 8 cannot be represented as the sum of 4 positive even numbers.\n    if (n < 8) \n    {\n        return false;\n    }\n\n    // To form 4 even numbers summing up to n, the number n must be even.\n    // This is because the sum of even numbers is always even.\n    return n % 2 == 0;\n}\n```", "task_id": "HumanEval_138_is_equal_to_sum_even"}
{"name": "HumanEval_139_special_factorial", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4L)\n288L\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\nlong special_factorial(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_139_special_factorial.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong factorial(long n) {\n    if (n <= 1)\n        return 1;\n    return n * factorial(n - 1);\n}\n\nlong special_factorial(long n) {\n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\nvoid main() {\n    // Example usage\n    writeln(special_factorial(4)); // Output: 288\n}\n```\n\nThis code snippet defines a `factorial` function to compute the factorial of a given number n, and a `special_factorial` function to compute the Brazilian factorial as defined in the docstring. The `main` function includes an example usage of the `special_factorial` function.", "task_id": "HumanEval_139_special_factorial"}
{"name": "HumanEval_140_fix_spaces", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n>>> fix_spaces(\" Example\")\n\"Example\"\n>>> fix_spaces(\" Example 1\")\n\"Example_1\"\n>>> fix_spaces(\" Example 2\")\n\"_Example_2\"\n>>> fix_spaces(\" Example 3\")\n\"_Example-3\"\n*/\nstring fix_spaces(string text) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_140_fix_spaces.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.regex;\n\n/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n>>> fix_spaces(\" Example\")\n\"Example\"\n>>> fix_spaces(\" Example 1\")\n\"Example_1\"\n>>> fix_spaces(\" Example 2\")\n\"_Example_2\"\n>>> fix_spaces(\" Example 3\")\n\"_Example-3\"\n*/\nstring fix_spaces(string text) {\n    text = text.replaceAll(r\"\\s{3,}\", \"-\"); // Replace 3 or more consecutive spaces with \"-\"\n    text = text.replaceAll(r\"\\s\", \"_\");     // Replace remaining spaces with \"_\"\n\n    return text;\n}\n```", "task_id": "HumanEval_140_fix_spaces"}
{"name": "HumanEval_141_file_name_check", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nCreate a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\n>>> file_name_check(\"example.txt\")\n\"Yes\"\n>>> file_name_check(\"1example.dll\")\n\"No\"\n*/\nstring file_name_check(string file_name) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_141_file_name_check.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = file_name_check;\n\n    assert(candidate(\"example.txt\") == \"Yes\");\n    assert(candidate(\"1example.dll\") == \"No\");\n    assert(candidate(\"s1sdf3.asd\") == \"No\");\n    assert(candidate(\"K.dll\") == \"Yes\");\n    assert(candidate(\"MY16FILE3.exe\") == \"Yes\");\n    assert(candidate(\"His12FILE94.exe\") == \"No\");\n    assert(candidate(\"_Y.txt\") == \"No\");\n    assert(candidate(\"?aREYA.exe\") == \"No\");\n    assert(candidate(\"/this_is_valid.dll\") == \"No\");\n    assert(candidate(\"this_is_valid.wow\") == \"No\");\n    assert(candidate(\"this_is_valid.txt\") == \"Yes\");\n    assert(candidate(\"this_is_valid.txtexe\") == \"No\");\n    assert(candidate(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert(candidate(\"@this1_is6_valid.exe\") == \"No\");\n    assert(candidate(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert(candidate(\"all.exe.txt\") == \"No\");\n    assert(candidate(\"I563_No.exe\") == \"Yes\");\n    assert(candidate(\"Is3youfault.txt\") == \"Yes\");\n    assert(candidate(\"no_one#knows.dll\") == \"Yes\");\n    assert(candidate(\"1I563_Yes3.exe\") == \"No\");\n    assert(candidate(\"I563_Yes3.txtt\") == \"No\");\n    assert(candidate(\"final..txt\") == \"No\");\n    assert(candidate(\"final132\") == \"No\");\n    assert(candidate(\"_f4indsartal132.\") == \"No\");\n    assert(candidate(\".txt\") == \"No\");\n    assert(candidate(\"s.\") == \"No\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.regex;\n\nstring file_name_check(string file_name) {\n    // Check if there is exactly one dot\n    auto dot_pos = file_name.count('.');\n    if (dot_pos != 1) {\n        return \"No\";\n    }\n\n    // Split the file name into two parts: before and after the dot\n    auto parts = file_name.split('.');\n    if (parts.length != 2) {\n        return \"No\";\n    }\n\n    string before_dot = parts[0];\n    string after_dot = parts[1];\n\n    // Check if the substring before the dot is not empty and starts with a letter\n    if (before_dot.length == 0 || !before_dot[0].isAlpha()) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the valid extensions\n    if (after_dot != \"txt\" && after_dot != \"exe\" && after_dot != \"dll\") {\n        return \"No\";\n    }\n\n    // Check if there are more than three digits in the file name\n    auto digits = file_name.countMatches(regex(r\"\\d\"));\n    if (digits > 3) {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n\n// Examples\nvoid main() {\n    assert(file_name_check(\"example.txt\") == \"Yes\");\n    assert(file_name_check(\"1example.dll\") == \"No\");\n    assert(file_name_check(\"test.exe\") == \"Yes\");\n    assert(file_name_check(\"123file.txt\") == \"Yes\");\n    assert(file_name_check(\"file1234.txt\") == \"No\");\n    assert(file_name_check(\".exe\") == \"No\");\n    assert(file_name_check(\"filename.\") == \"No\");\n}\n```", "task_id": "HumanEval_141_file_name_check"}
{"name": "HumanEval_142_sum_squares", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\"\nThis function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n>>> lst\n[1L, 2L, 3L]\n>>> lst\n[]\n>>> lst\n[-1L, -5L, 2L, -1L, -5L]\n*/\nlong sum_squares(long[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_142_sum_squares.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong sum_squares(long[] lst) {\n    long sum = 0;\n\n    for (size_t i = 0; i < lst.length; i++) {\n        if (i % 3 == 0) {\n            sum += sqr(lst[i]);\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += pow(lst[i], 3).to!(long);\n        } else {\n            sum += lst[i];\n        }\n    }\n\n    return sum;\n}\n\n// Example usage\n// void main() {\n//     long[] lst1 = [1L, 2L, 3L];\n//     writeln(sum_squares(lst1)); // Output should reflect changes based on index 0 being squared.\n//\n//     long[] lst2 = [];\n//     writeln(sum_squares(lst2)); // Output should be 0.\n//\n//     long[] lst3 = [-1L, -5L, 2L, -1L, -5L];\n//     writeln(sum_squares(lst3)); // Example output modification based on index 0, 4.\n// }\n```\n\nThis function 'sum_squares' correctly modifies elements of the array based on their indices as described in the docstring and then returns the sum of the modified array elements.", "task_id": "HumanEval_142_sum_squares"}
{"name": "HumanEval_143_words_in_sentence", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>> words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\nstring words_in_sentence(string sentence) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_143_words_in_sentence.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = words_in_sentence;\n\n    assert(candidate(\"This is a test\") == \"is\");\n    assert(candidate(\"lets go for swimming\") == \"go for\");\n    assert(candidate(\"there is no place available here\") == \"there is no place\");\n    assert(candidate(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert(candidate(\"go for it\") == \"go for it\");\n    assert(candidate(\"here\") == \"\");\n    assert(candidate(\"here is\") == \"is\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.regex;\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    foreach (i; 2 .. sqrt(num) + 1) {\n        if (num % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring words_in_sentence(string sentence) {\n    string[] words = sentence.split(\" \");\n    string result;\n    foreach (word; words) {\n        if (is_prime(word.length)) {\n            result ~= word ~ \" \";\n        }\n    }\n    return result.trim;\n}\n\n// Example Usage\nvoid main() {\n    assert(words_in_sentence(\"This is a test\") == \"is\");\n    assert(words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n```\n\nThis code defines the `words_in_sentence` function that processes a sentence and returns only the words that have a prime number of characters, while maintaining the original order of these words in the new string. The `is_prime` function is used to determine if a given number is prime. The example usage with assertions is also provided to demonstrate the correctness of the function.", "task_id": "HumanEval_143_words_in_sentence"}
{"name": "HumanEval_144_simplify", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n>>> simplify(\"1/5\", \"5/1\")\ntrue\n>>> simplify(\"1/6\", \"2/1\")\nfalse\n>>> simplify(\"7/10\", \"10/2\")\nfalse\n*/\nbool simplify(string x, string n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_144_simplify.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\", \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\", \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"1/5\", \"1/5\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.conv;\n\n// Function to parse a fraction string and return a tuple of the numerator and denominator as integers\nTuple!(int, int) parseFraction(string fraction) {\n    auto parts = fraction.split('/');\n    return tuple(to!int(parts[0]), to!int(parts[1]));\n}\n\nbool simplify(string x, string n) {\n    // Parse the fractions\n    auto xFraction = parseFraction(x);\n    auto nFraction = parseFraction(n);\n\n    // Calculate the multiplication result fraction\n    int numerator = xFraction[0] * nFraction[0];\n    int denominator = xFraction[1] * nFraction[1];\n\n    // Check if the result is a whole number\n    return numerator % denominator == 0;\n}\n\nvoid main() {\n    writeln(simplify(\"1/5\", \"5/1\")); // true\n    writeln(simplify(\"1/6\", \"2/1\")); // false\n    writeln(simplify(\"7/10\", \"10/2\")); // false\n}\n```", "task_id": "HumanEval_144_simplify"}
{"name": "HumanEval_145_order_by_points", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function which sorts the given array of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original array.\nFor example:\n>>> order_by_points([1L, 11L, -1L, -11L, -12L])\n[-1L, -11L, 1L, -12L, 11L]\n>>> order_by_points([])\n[]\n*/\nlong[] order_by_points(long[] nums) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_145_order_by_points.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] order_by_points(long[] nums) {\n    // Function to calculate the sum of digits of a number\n    auto sum_of_digits(long num) {\n        num = abs(num);\n        long sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n    \n    // Create a tuple array where each element is (index, num, sum_of_digits(num))\n    auto indexed_sums = nums.enumerate.map!(i => tuple(i.index, i.value, sum_of_digits(i.value))).array;\n    \n    // Sort the tuple array based on the sum of digits and then by the original index\n    indexed_sums.sort!((a, b) => a[2] < b[2] || (a[2] == b[2] && a[0] < b[0]));\n    \n    // Extract the sorted numbers from the sorted tuple array\n    return indexed_sums.map!(i => i[1]).array;\n}\n\n// Example usage\nvoid main() {\n    auto result1 = order_by_points([1L, 11L, -1L, -11L, -12L]);\n    writeln(result1); // Output: [-1L, -11L, 1L, -12L, 11L]\n\n    auto result2 = order_by_points([]);\n    writeln(result2); // Output: []\n}\n```", "task_id": "HumanEval_145_order_by_points"}
{"name": "HumanEval_146_specialFilter", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that takes an array of numbers as input and returns \nthe number of elements in the array that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\n>>> specialFilter([15L, -73L, 14L, -15L])\n1L\n>>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n2L\n*/\nlong specialFilter(long[] nums) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_146_specialFilter.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.conv;\n\nlong specialFilter(long[] nums) {\n    bool isOddDigit(int digit) {\n        return digit % 2 != 0;\n    }\n\n    bool isSpecial(long n) {\n        long absNum = abs(n);\n        if (absNum <= 10) {\n            return false;\n        }\n\n        int firstDigit = to!string(absNum).front.to!int;\n        int lastDigit = absNum % 10;\n\n        return isOddDigit(firstDigit) && isOddDigit(lastDigit);\n    }\n\n    return nums.filter!(isSpecial).length;\n}\n\nvoid main() {\n    // Test cases\n    assert(specialFilter([15L, -73L, 14L, -15L]) == 1L);\n    assert(specialFilter([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n}\n```", "task_id": "HumanEval_146_specialFilter"}
{"name": "HumanEval_147_get_max_triples", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n    You are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    Example :\n    >>> get_max_triples(5L)\n    1L\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n*/\nlong get_max_triples(long n) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_147_get_max_triples.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.array;\nimport std.range;\n\nlong get_max_triples(long n) {\n    long[] a = new long[n];\n    \n    // Create the array a\n    for (long i = 0; i < n; ++i) {\n        a[i] = (i + 1) * (i + 1) - (i + 1) + 1;\n    }\n\n    long count = 0;\n\n    // Count the number of valid triples\n    for (long i = 0; i < n - 2; ++i) {\n        for (long j = i + 1; j < n - 1; ++j) {\n            for (long k = j + 1; k < n; ++k) {\n                if ((a[i] + a[j] + a[k]) % 3 == 0) {\n                    ++count;\n                }\n            }\n        }\n    }\n\n    return count;\n}\n\n// Example\nvoid main() {\n    import std.stdio;\n    writeln(get_max_triples(5L)); // Output: 1\n}\n```", "task_id": "HumanEval_147_get_max_triples"}
{"name": "HumanEval_149_sorted_list_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts an array of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted array with a sorted order,\nThe array is always an array of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the array should be ascending by length of each word, and you\nshould return the array sorted by that rule.\nIf two words have the same length, sort the array alphabetically.\nThe function should return an array of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\n>>> list_sort([\"aa\", \"a\", \"aaa\"])\n[\"aa\"]\n>>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n[\"ab\", \"cd\"]\n*/\nstring[] sorted_list_sum(string[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_149_sorted_list_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.range;\nimport std.string;\n\nstring[] sorted_list_sum(string[] lst) {\n    // Filter out the strings with odd lengths\n    auto evenLengthStrings = lst.filter!(s => s.length % 2 == 0);\n\n    // Sort by length and then alphabetically\n    auto sortedStrings = evenLengthStrings.array.sort!((a, b) => \n        a.length == b.length ? a < b : a.length < b.length\n    );\n\n    return sortedStrings;\n}\n\n// Example usage\nvoid main() {\n    auto result1 = sorted_list_sum([\"aa\", \"a\", \"aaa\"]);\n    writeln(result1); // [\"aa\"]\n\n    auto result2 = sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]);\n    writeln(result2); // [\"ab\", \"cd\"]\n}\n```", "task_id": "HumanEval_149_sorted_list_sum"}
{"name": "HumanEval_150_x_or_y", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\nExamples:\n>>> x_or_y(7L, 34L, 12L)\n34L\n>>> x_or_y(15L, 8L, 5L)\n5L\n*/\nlong x_or_y(long n, long x, long y) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_150_x_or_y.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.stdio;\n\nbool is_prime(long num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 == 0 || num % 3 == 0) return false;\n\n    for (long i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n\n    return true;\n}\n\nlong x_or_y(long n, long x, long y) {\n    if (is_prime(n)) {\n        return x;\n    } else {\n        return y;\n    }\n}\n\nvoid main() {\n    writeln(x_or_y(7L, 34L, 12L)); // 34L\n    writeln(x_or_y(15L, 8L, 5L));  // 5L\n}\n```", "task_id": "HumanEval_150_x_or_y"}
{"name": "HumanEval_151_double_the_difference", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an array of numbers, return the sum of squares of the numbers\nin the array that are odd. Ignore numbers that are negative or not integers.\n>>> double_the_difference([1L, 3L, 2L, 0L])\n10L\n>>> double_the_difference([-1L, -2L, 0L])\n0L\n>>> double_the_difference([9L, -2L])\n81L\n>>> double_the_difference([0L])\n0L\nIf the input array is empty, return 0.\n*/\nlong double_the_difference(float[] lst) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_151_double_the_difference.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = double_the_difference;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([5.0, 4.0]) == 25L);\n    assert(candidate([0.1, 0.2, 0.3]) == 0L);\n    assert(candidate([-10.0, -20.0, -30.0]) == 0L);\n    assert(candidate([-1.0, -2.0, 8.0]) == 0L);\n    assert(candidate([0.2, 3.0, 5.0]) == 34L);\n    assert(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong double_the_difference(float[] lst) {\n    long sum = 0;\n    foreach(num; lst) {\n        if (num >= 0 && num == cast(long)num && cast(long)num % 2 != 0) {\n            sum += cast(long)num * cast(long)num;\n        }\n    }\n    return sum;\n}\n\nvoid main() {\n    assert(double_the_difference([1L, 3L, 2L, 0L]) == 10L);\n    assert(double_the_difference([-1L, -2L, 0L]) == 0L);\n    assert(double_the_difference([9L, -2L]) == 81L);\n    assert(double_the_difference([0L]) == 0L);\n    assert(double_the_difference([]) == 0L);\n}\n```", "task_id": "HumanEval_151_double_the_difference"}
{"name": "HumanEval_152_compare", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match. \nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n>>> compare([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L])\n[0L, 0L, 0L, 0L, 3L, 3L]\n>>> compare([0L, 5L, 0L, 0L, 0L, 4L], [4L, 1L, 1L, 0L, 0L, -2L])\n[4L, 4L, 1L, 0L, 0L, 6L]\n*/\nlong[] compare(long[] game, long[] guess) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_152_compare.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = compare;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 1L], [1L, 2L, 3L, 4L, 2L, -2L]) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    assert(candidate([0L, 0L, 0L, 0L, 0L, 0L], [0L, 0L, 0L, 0L, 0L, 0L]) == [0L, 0L, 0L, 0L, 0L, 0L]);\n    assert(candidate([1L, 2L, 3L], [-1L, -2L, -3L]) == [2L, 4L, 6L]);\n    assert(candidate([1L, 2L, 3L, 5L], [-1L, 2L, 3L, 4L]) == [2L, 0L, 0L, 1L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong[] compare(long[] game, long[] guess) {\n    // array to store the result\n    long[] result = [];\n    // iterate over the arrays\n    foreach (i, g; game) {\n        // compare the scores and guesses\n        if (g == guess[i]) {\n            result ~= 0L; // if they are equal, append 0\n        } else {\n            result ~= abs(g - guess[i]); // if not, append the absolute difference\n        }\n    }\n    return result;\n}\n\n// Examples\nvoid main() {\n    long[] game1 = [1L, 2L, 3L, 4L, 5L, 1L];\n    long[] guess1 = [1L, 2L, 3L, 4L, 2L, -2L];\n    assert(compare(game1, guess1) == [0L, 0L, 0L, 0L, 3L, 3L]);\n    \n    long[] game2 = [0L, 5L, 0L, 0L, 0L, 4L];\n    long[] guess2 = [4L, 1L, 1L, 0L, 0L, -2L];\n    assert(compare(game2, guess2) == [4L, 4L, 1L, 0L, 0L, 6L]);\n}\n```", "task_id": "HumanEval_152_compare"}
{"name": "HumanEval_153_Strongest_Extension", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou will be given the name of a class (a string) and an array of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the array.\nFor example, if you are given \"Slices\" as the class and an array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\"my_class.AA\"\n*/\nstring Strongest_Extension(string class_name, string[] extensions) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_153_Strongest_Extension.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = Strongest_Extension;\n\n    assert(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\");\n    assert(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\");\n    assert(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\");\n    assert(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\");\n    assert(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\");\n    assert(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\");\n    assert(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\");\n    assert(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\");\n    assert(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nstring Strongest_Extension(string class_name, string[] extensions) {\n    if (extensions.length == 0) {\n        return class_name;\n    }\n\n    string strongest_extension = extensions[0];\n    double max_strength = -double.infinity;\n\n    foreach (ext; extensions) {\n        int CAP = 0;\n        int SM = 0;\n\n        foreach (char c; ext) {\n            if (c.isUpper) {\n                CAP++;\n            } else if (c.isLower) {\n                SM++;\n            }\n        }\n\n        double strength = CAP - SM;\n\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = ext;\n        }\n    }\n\n    return class_name ~ \".\" ~ strongest_extension;\n}\n```\n\nExplanation:\n- The function `Strongest_Extension` takes a class name and an array of extensions.\n- The function initializes the `strongest_extension` with the first extension in the array and `max_strength` to negative infinity.\n- It then iterates over each extension in the array, calculates the number of uppercase (`CAP`) and lowercase (`SM`) letters, and determines the strength as `CAP - SM`.\n- If an extension's strength is greater than the current `max_strength`, it updates the `max_strength` and sets `strongest_extension` to the current extension.\n- After iterating through all extensions, it returns a string in the format `ClassName.StrongestExtensionName`.\n\nThus, the returned string is the class name concatenated with the strongest extension name.", "task_id": "HumanEval_153_Strongest_Extension"}
{"name": "HumanEval_154_cycpattern_check", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n>>> cycpattern_check(\"abcd\", \"abd\")\nfalse\n>>> cycpattern_check(\"hello\", \"ell\")\ntrue\n>>> cycpattern_check(\"whassup\", \"psus\")\nfalse\n>>> cycpattern_check(\"abab\", \"baa\")\ntrue\n>>> cycpattern_check(\"efef\", \"eeff\")\nfalse\n>>> cycpattern_check(\"himenss\", \"simen\")\ntrue\n*/\nbool cycpattern_check(string a, string b) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_154_cycpattern_check.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = cycpattern_check;\n\n    assert(candidate(\"xyzw\", \"xyw\") == false);\n    assert(candidate(\"yello\", \"ell\") == true);\n    assert(candidate(\"whattup\", \"ptut\") == false);\n    assert(candidate(\"efef\", \"fee\") == true);\n    assert(candidate(\"abab\", \"aabb\") == false);\n    assert(candidate(\"winemtt\", \"tinem\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.string;\n\nbool cycpattern_check(string a, string b) {\n    // Check all rotations of b\n    for (size_t i = 0; i < b.length; ++i) {\n        string rotated_b = b[i .. $] ~ b[0 .. i];\n        if (a.contains(rotated_b)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid main() {\n    assert(cycpattern_check(\"abcd\", \"abd\") == false);\n    assert(cycpattern_check(\"hello\", \"ell\") == true);\n    assert(cycpattern_check(\"whassup\", \"psus\") == false);\n    assert(cycpattern_check(\"abab\", \"baa\") == true);\n    assert(cycpattern_check(\"efef\", \"eeff\") == false);\n    assert(cycpattern_check(\"himenss\", \"simen\") == true);\n}\n```\n\nThis code defines a function `cycpattern_check` which checks if any rotation of the string `b` is a substring of the string `a`. The function iterates over each possible rotation of `b`, builds the rotated version of `b`, and checks if that rotation is a substring of `a` using the `contains` method. The `main` function includes some assert statements to test the behavior of `cycpattern_check` with several example inputs.", "task_id": "HumanEval_154_cycpattern_check"}
{"name": "HumanEval_155_even_odd_count", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\n    >>> even_odd_count(-12L)\n    tuple(1L, 1L)\n    >>> even_odd_count(123L)\n    tuple(1L, 2L)\n*/\nTuple!(long, long) even_odd_count(long num) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_155_even_odd_count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = even_odd_count;\n\n    assert(candidate(7L) == tuple(0L, 1L));\n    assert(candidate(-78L) == tuple(1L, 1L));\n    assert(candidate(3452L) == tuple(2L, 2L));\n    assert(candidate(346211L) == tuple(3L, 3L));\n    assert(candidate(-345821L) == tuple(3L, 3L));\n    assert(candidate(-2L) == tuple(1L, 0L));\n    assert(candidate(-45347L) == tuple(2L, 3L));\n    assert(candidate(0L) == tuple(1L, 0L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nTuple!(long, long) even_odd_count(long num) {\n    long evens = 0;\n    long odds = 0;\n\n    // Make sure we work with positive number for digit extraction\n    num = abs(num);\n    \n    // Iterate through each digit\n    while (num > 0) {\n        long digit = num % 10;\n        if (digit % 2 == 0) {\n            evens++;\n        } else {\n            odds++;\n        }\n        num /= 10;\n    }\n    \n    return tuple(evens, odds);\n}\n\n// Example usage and test cases\nvoid main() {\n    assert(even_odd_count(-12L) == tuple(1L, 1L));\n    assert(even_odd_count(123L) == tuple(1L, 2L));\n    assert(even_odd_count(0L) == tuple(1L, 0L));  // edge case: single digit 0\n    assert(even_odd_count(24680L) == tuple(5L, 0L));  // all even digits\n    assert(even_odd_count(13579L) == tuple(0L, 5L));  // all odd digits\n}\n```", "task_id": "HumanEval_155_even_odd_count"}
{"name": "HumanEval_156_int_to_mini_roman", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19L)\n\"xix\"\n>>> int_to_mini_roman(152L)\n\"clii\"\n>>> int_to_mini_roman(426L)\n\"cdxxvi\"\n*/\nstring int_to_mini_roman(long number) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_156_int_to_mini_roman.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = int_to_mini_roman;\n\n    assert(candidate(19L) == \"xix\");\n    assert(candidate(152L) == \"clii\");\n    assert(candidate(251L) == \"ccli\");\n    assert(candidate(426L) == \"cdxxvi\");\n    assert(candidate(500L) == \"d\");\n    assert(candidate(1L) == \"i\");\n    assert(candidate(4L) == \"iv\");\n    assert(candidate(43L) == \"xliii\");\n    assert(candidate(90L) == \"xc\");\n    assert(candidate(94L) == \"xciv\");\n    assert(candidate(532L) == \"dxxxii\");\n    assert(candidate(900L) == \"cm\");\n    assert(candidate(994L) == \"cmxciv\");\n    assert(candidate(1000L) == \"m\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nstring int_to_mini_roman(long number) \n{\n    string[] thousands = [\"\", \"m\"];\n    string[] hundreds = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"];\n    string[] tens = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"];\n    string[] ones = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"];\n\n    int thousand = number / 1000;\n    number %= 1000;\n    int hundred = number / 100;\n    number %= 100;\n    int ten = number / 10;\n    number %= 10;\n    int one = number;\n\n    return thousands[thousand] ~ hundreds[hundred] ~ tens[ten] ~ ones[one];\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(int_to_mini_roman(19L));  // \"xix\"\n    writeln(int_to_mini_roman(152L)); // \"clii\"\n    writeln(int_to_mini_roman(426L)); // \"cdxxvi\"\n}\n```", "task_id": "HumanEval_156_int_to_mini_roman"}
{"name": "HumanEval_157_right_angle_triangle", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\n>>> right_angle_triangle(3L, 4L, 5L)\ntrue\n>>> right_angle_triangle(1L, 2L, 3L)\nfalse\n*/\nbool right_angle_triangle(long a, long b, long c) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\n/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\n>>> right_angle_triangle(3L, 4L, 5L)\ntrue\n>>> right_angle_triangle(1L, 2L, 3L)\nfalse\n*/\n\nbool right_angle_triangle(long a, long b, long c) {\n    // Ensure that a <= b <= c to standardize the comparison\n    if (a > b) swap(a, b);\n    if (b > c) swap(b, c);\n    if (a > b) swap(a, b);\n    \n    // Check if a^2 + b^2 == c^2 using integer arithmetic to avoid floating point inaccuracies\n    return a * a + b * b == c * c;\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(right_angle_triangle(3L, 4L, 5L)); // true\n    writeln(right_angle_triangle(1L, 2L, 3L)); // false\n}\n```", "task_id": "HumanEval_157_right_angle_triangle"}
{"name": "HumanEval_158_find_max", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nWrite a function that accepts an array of strings.\nThe array contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n>>> find_max([\"name\", \"of\", \"string\"])\n\"string\"\n>>> find_max([\"name\", \"enam\", \"game\"])\n\"enam\"\n>>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\"aaaaaaa\"\n*/\nstring find_max(string[] words) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_158_find_max.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.algorithm;\nimport std.array;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\nimport std.uni;\n\nstring find_max(string[] words) {\n    // Function to count the number of unique characters in a given string\n    size_t uniqueCharsCount(string s) {\n        return s.asSet().length;\n    }\n\n    // Find the word with the maximum number of unique characters\n    string result = words[0];\n    size_t maxUniqueCount = uniqueCharsCount(result);\n\n    foreach(word; words) {\n        size_t currentUniqueCount = uniqueCharsCount(word);\n        if (currentUniqueCount > maxUniqueCount || \n            (currentUniqueCount == maxUniqueCount && word < result)) {\n            result = word;\n            maxUniqueCount = currentUniqueCount;\n        }\n    }\n\n    return result;\n}\n\n// Test the function\nvoid main() {\n    assert(find_max([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(find_max([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    writeln(\"All tests passed!\");\n}\n```", "task_id": "HumanEval_158_find_max"}
{"name": "HumanEval_159_eat", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n>>> eat(5L, 6L, 10L)\n[11L, 4L]\n>>> eat(4L, 8L, 9L)\n[12L, 1L]\n>>> eat(1L, 10L, 10L)\n[11L, 0L]\n>>> eat(2L, 11L, 5L)\n[7L, 0L]\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\n*/\nlong[] eat(long number, long need, long remaining) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_159_eat.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = eat;\n\n    assert(candidate(5L, 6L, 10L) == [11L, 4L]);\n    assert(candidate(4L, 8L, 9L) == [12L, 1L]);\n    assert(candidate(1L, 10L, 10L) == [11L, 0L]);\n    assert(candidate(2L, 11L, 5L) == [7L, 0L]);\n    assert(candidate(4L, 5L, 7L) == [9L, 2L]);\n    assert(candidate(4L, 5L, 1L) == [5L, 0L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\n\nlong[] eat(long number, long need, long remaining) {\n    long totalEaten = number + min(need, remaining);\n    long remainingAfterMeals = max(0, remaining - need);\n    return [totalEaten, remainingAfterMeals];\n}\n\n// Example usage:\n// import std.stdio;\n// void main() {\n//     writeln(eat(5L, 6L, 10L)); // [11L, 4L]\n//     writeln(eat(4L, 8L, 9L));  // [12L, 1L]\n//     writeln(eat(1L, 10L, 10L)); // [11L, 0L]\n//     writeln(eat(2L, 11L, 5L));  // [7L, 0L]\n// }\n```", "task_id": "HumanEval_159_eat"}
{"name": "HumanEval_160_do_algebra", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven two arrays operator, and operand. The first array has basic algebra operations, and \nthe second array is an array of integers. Use the two given arrays to build the algebric \nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\n    The length of operator array is equal to the length of operand array minus one.\n    Operand is an array of of non-negative integers.\n    Operator array has at least one operator, and operand array has at least two operands.\n*/\nlong do_algebra(string[] operator, long[] operand) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_160_do_algebra.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.stdio;\n\nlong do_algebra(string[] operator, long[] operand) \n{\n    if (operand.length != operator.length + 1) {\n        throw new Exception(\"The length of operator array must be equal to the length of operand array minus one.\");\n    }\n\n    long result = operand[0];\n\n    foreach (index, op; operator) {\n        long nextVal = operand[index + 1];\n        switch (op) {\n            case \"+\":\n                result += nextVal;\n                break;\n            case \"-\":\n                result -= nextVal;\n                break;\n            case \"*\":\n                result *= nextVal;\n                break;\n            case \"//\":\n                if (nextVal == 0) {\n                    throw new Exception(\"Division by zero.\");\n                }\n                result = result / nextVal;  // Using integer division\n                break;\n            case \"**\":\n                result = cast(long)pow(result, nextVal);\n                break;\n            default:\n                throw new Exception(\"Invalid operator: \" ~ op);\n        }\n    }\n    \n    return result;\n}\n\nvoid main() {\n    string[] operator = [\"+\", \"*\", \"-\"];\n    long[] operand = [2, 3, 4, 5];\n    \n    writeln(do_algebra(operator, operand)); // Output: 9\n}\n```\n\nThis code defines the `do_algebra` function that takes an array of operators and an array of operands, builds an algebraic expression using these arrays, and evaluates and returns the result. The function handles basic algebra operations including addition, subtraction, multiplication, floor division, and exponentiation. The `main` function provides an example to demonstrate its use.", "task_id": "HumanEval_160_do_algebra"}
{"name": "HumanEval_161_solve", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n>>> solve(\"1234\")\n\"4321\"\n>>> solve(\"ab\")\n\"AB\"\n>>> solve(\"#a@C\")\n\"#A@c\"\n*/\nstring solve(string s) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_161_solve.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = solve;\n\n    assert(candidate(\"AsDf\") == \"aSdF\");\n    assert(candidate(\"1234\") == \"4321\");\n    assert(candidate(\"ab\") == \"AB\");\n    assert(candidate(\"#a@C\") == \"#A@c\");\n    assert(candidate(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert(candidate(\"#6@2\") == \"2@6#\");\n    assert(candidate(\"#$a^D\") == \"#$A^d\");\n    assert(candidate(\"#ccc\") == \"#CCC\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\nimport std.utf;\n\n/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n>>> solve(\"1234\")\n\"4321\"\n>>> solve(\"ab\")\n\"AB\"\n>>> solve(\"#a@C\")\n\"#A@c\"\n*/\n\nstring solve(string s) {\n    bool hasLetter = false;\n    string result;\n\n    foreach (dchar ch; s) {\n        if (ch.isAlpha) {\n            hasLetter = true;\n            if (ch.isLower) {\n                result ~= ch.toUpper;\n            } else {\n                result ~= ch.toLower;\n            }\n        } else {\n            result ~= ch;\n        }\n    }\n\n    if (!hasLetter) {\n        return s.retro;\n    }\n\n    return result;\n}\n```", "task_id": "HumanEval_161_solve"}
{"name": "HumanEval_162_string_to_md5", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return null.\n>>> string_to_md5(\"Hello world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\nNullable!(string) string_to_md5(string text) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_162_string_to_md5.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.digest.md;\nimport std.stdio;\nimport std.typecons;\n\nNullable!(string) string_to_md5(string text) {\n    // Check if the input text is an empty string\n    if (text == \"\") {\n        return Nullable!(string).null;\n    }\n\n    // Create an MD5 digest object\n    auto md5 = MD5Digest(text);\n\n    // Return the MD5 hash equivalent of the input text\n    return md5.toHexString();\n}\n\n// Example usage\nvoid main() {\n    writeln(string_to_md5(\"Hello world\")); // Output: \"3e25960a79dbc69b674cd4ec67a72c62\"\n    writeln(string_to_md5(\"\")); // Output: null\n}\n```", "task_id": "HumanEval_162_string_to_md5"}
{"name": "HumanEval_163_generate_integers", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\n>>> generate_integers(2L, 8L)\n[2L, 4L, 6L, 8L]\n>>> generate_integers(8L, 2L)\n[2L, 4L, 6L, 8L]\n>>> generate_integers(10L, 14L)\n[]\n*/\nlong[] generate_integers(long a, long b) \n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_163_generate_integers.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = generate_integers;\n\n    assert(candidate(2L, 10L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(10L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(132L, 2L) == [2L, 4L, 6L, 8L]);\n    assert(candidate(17L, 89L) == []);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"], "gpt_solution": "```d\nimport std.math;\nimport std.typecons;\nimport std.algorithm;\nimport std.array;\n\nlong[] generate_integers(long a, long b) {\n    // Ensure a is less than or equal to b\n    if (a > b) {\n        swap(a, b);\n    }\n    \n    // Initialize an empty array to store the even digits\n    long[] result;\n\n    // Iterate through the range from a to b (inclusive)\n    for (long i = a; i <= b; ++i) {\n        if (i % 2 == 0) {\n            result ~= i;\n        }\n    }\n    \n    // Return the result array\n    return result;\n}\n\n// Example usage in main function\nvoid main() {\n    writeln(generate_integers(2L, 8L));   // Outputs: [2, 4, 6, 8]\n    writeln(generate_integers(8L, 2L));   // Outputs: [2, 4, 6, 8]\n    writeln(generate_integers(10L, 14L)); // Outputs: []\n}\n```", "task_id": "HumanEval_163_generate_integers"}
