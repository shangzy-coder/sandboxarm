{"name": "HumanEval_0_has_close_elements", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_0_has_close_elements.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = has_close_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Check if in given vector of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n// (false)\n// >>> has_close_elements((std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n// (true)\nbool has_close_elements(std::vector<float> numbers, float threshold) {\n    // Sort the vector first\n    std::sort(numbers.begin(), numbers.end());\n    \n    // Iterate over the sorted vector and check adjacent elements\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        if (std::abs(numbers[i + 1] - numbers[i]) < threshold) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nint main() {\n    assert(has_close_elements(std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}), 0.5f) == false);\n    assert(has_close_elements(std::vector<float>({(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}), 0.3f) == true);\n    assert(has_close_elements(std::vector<float>({(float)10.0f, (float)20.0f, (float)30.0f, (float)5.5f, (float)15.0f, (float)25.0f}), 0.1f) == false);\n    assert(has_close_elements(std::vector<float>({(float)1.1f, (float)2.0f, (float)3.0f, (float)1.2f}), 0.15f) == true);\n    assert(has_close_elements(std::vector<float>({(float)1.1f, (float)2.0f, (float)3.0f, (float)1.6f}), 0.4f) == false);\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis code defines the function `has_close_elements` that checks if any two elements in a vector of floats are closer to each other than a given threshold. The main function contains test cases to validate the implementation.", "task_id": "HumanEval_0_has_close_elements"}
{"name": "HumanEval_1_separate_paren_groups", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_1_separate_paren_groups.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = separate_paren_groups;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<std::string>({(std::string)\"(()())\", (std::string)\"((()))\", (std::string)\"()\", (std::string)\"((())()())\"})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"((()))\", (std::string)\"(((())))\"})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<std::string>({(std::string)\"(()(())((())))\"})));\n    assert(candidate((\"( ) (( )) (( )( ))\")) == (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the vector of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups((\"( ) (( )) (( )( ))\"))\n// (std::vector<std::string>({(std::string)\"()\", (std::string)\"(())\", (std::string)\"(()())\"}))\nstd::vector<std::string> separate_paren_groups(std::string paren_string) {\n    std::vector<std::string> result;\n    std::string current_group;\n    int balance = 0;\n\n    for (char ch : paren_string) {\n        if (ch == ' ') {\n            continue; // Ignore spaces\n        }\n\n        current_group += ch;\n\n        if (ch == '(') {\n            balance++;\n        } else if (ch == ')') {\n            balance--;\n        }\n\n        if (balance == 0 && !current_group.empty()) {\n            result.push_back(current_group);\n            current_group.clear();\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    auto res = separate_paren_groups(\"( ) (( )) (( )( ))\");\n    std::vector<std::string> expected = {\"()\", \"(())\", \"(()())\"};\n    \n    assert(res == expected);\n\n    std::cout << \"Test passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_1_separate_paren_groups"}
{"name": "HumanEval_2_truncate_number", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_2_truncate_number.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = truncate_number;\n    assert(candidate((3.5f)) == (0.5f));\n    assert(candidate((1.25f)) == (0.25f));\n    assert(candidate((123.0f)) == (0.0f));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\nusing namespace std;\n\n// Given a positive floating point number, it can be decomposed into\n// an integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number((3.5f))\n// (0.5f)\nfloat truncate_number(float number) {\n    int integerPart = static_cast<int>(number);  // Extract the integer part\n    float decimalPart = number - integerPart;    // Calculate the decimal part\n    return decimalPart;\n}\n\nint main() {\n    assert(abs(truncate_number(3.5f) - 0.5f) < 1e-6);\n    assert(abs(truncate_number(12.34f) - 0.34f) < 1e-6);\n    assert(abs(truncate_number(100.99f) - 0.99f) < 1e-6);\n    assert(abs(truncate_number(7.0f) - 0.0f) < 1e-6);\n    assert(abs(truncate_number(123456789.987654321f) - 0.987654321f) < 1e-6);\n\n    cout << \"All tests passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_2_truncate_number"}
{"name": "HumanEval_3_below_zero", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_3_below_zero.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)3})))\n// (false)\n// >>> below_zero((std::vector<long>({(long)1, (long)2, (long)-4, (long)5})))\n// (true)\nbool below_zero(std::vector<long> operations) {\n    long balance = 0;\n    for(long operation : operations) {\n        balance += operation;\n        if(balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    assert(below_zero({1, 2, 3}) == false);\n    assert(below_zero({1, 2, -4, 5}) == true);\n    assert(below_zero({-1, 2, -1}) == true);\n    assert(below_zero({1, -1, 1, -1}) == false);\n    assert(below_zero({0, 0, 0}) == false);\n    assert(below_zero({-5, 5, -1, -4}) == true);\n    std::cout << \"All test cases pass\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_3_below_zero"}
{"name": "HumanEval_4_mean_absolute_deviation", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_4_mean_absolute_deviation.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f}))) == (0.5f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// For a given vector of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n// (1.0f)\nfloat mean_absolute_deviation(std::vector<float> numbers) {\n    // Calculate the mean\n    float sum = 0.0f;\n    for (float num : numbers) {\n        sum += num;\n    }\n    float mean = sum / numbers.size();\n\n    // Calculate the Mean Absolute Deviation\n    float mad = 0.0f;\n    for (float num : numbers) {\n        mad += std::abs(num - mean);\n    }\n    mad /= numbers.size();\n\n    return mad;\n}\n\nint main() {\n    assert(mean_absolute_deviation(std::vector<float>({1.0f, 2.0f, 3.0f, 4.0f})) == 1.0f);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_4_mean_absolute_deviation"}
{"name": "HumanEval_5_intersperse", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_5_intersperse.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()), (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6, (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2, (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2, (long)2})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Insert a number 'delimeter' between every two consecutive elements of input vector `numbers`\n// >>> intersperse((std::vector<long>()), (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1, (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4, (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter) {\n    if (numbers.empty()) {\n        return numbers;\n    }\n\n    std::vector<long> result;\n    result.reserve(numbers.size() * 2 - 1); // Optimizing by reserving required space\n\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result.push_back(numbers[i]);\n        if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    // Test cases\n    {\n        std::vector<long> empty_vector;\n        auto result = intersperse(empty_vector, 4);\n        assert(result == empty_vector);\n    }\n    \n    {\n        std::vector<long> numbers = {1, 2, 3};\n        std::vector<long> expected_result = {1, 4, 2, 4, 3};\n        auto result = intersperse(numbers, 4);\n        assert(result == expected_result);\n    }\n\n    {\n        std::vector<long> numbers = {5, 6, 7, 8};\n        std::vector<long> expected_result = {5, 10, 6, 10, 7, 10, 8};\n        auto result = intersperse(numbers, 10);\n        assert(result == expected_result);\n    }\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_5_intersperse"}
{"name": "HumanEval_6_parse_nested_parens", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_6_parse_nested_parens.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"(()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1, (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) == (std::vector<long>({(long)4})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2, (long)3, (long)1, (long)3}))\n\nstd::vector<long> parse_nested_parens(std::string paren_string) {\n    std::vector<long> result;\n    std::istringstream stream(paren_string);\n    std::string group;\n    \n    while (stream >> group) {\n        long max_depth = 0, current_depth = 0;\n        for (char c : group) {\n            if (c == '(') {\n                current_depth++;\n                max_depth = std::max(max_depth, current_depth);\n            }\n            else if (c == ')') {\n                current_depth--;\n            }\n        }\n        result.push_back(max_depth);\n    }\n    \n    return result;\n}\n\nint main() {\n    std::vector<long> result = parse_nested_parens(\"(()()) ((())) () ((())()())\");\n    std::vector<long> expected = {2, 3, 1, 3};\n    \n    assert(result == expected);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_6_parse_nested_parens"}
{"name": "HumanEval_7_filter_by_substring", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_7_filter_by_substring.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"prune\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Filter an input vector of strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string> strings, std::string substring) {\n    std::vector<std::string> result;\n    for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\nint main() {\n    // Test cases\n    assert((filter_by_substring(std::vector<std::string>(), \"a\") == std::vector<std::string>()));\n    assert((filter_by_substring(std::vector<std::string>({\"abc\", \"bacd\", \"cde\", \"array\"}), \"a\") == std::vector<std::string>({\"abc\", \"bacd\", \"array\"})));\n    assert((filter_by_substring(std::vector<std::string>({\"hello\", \"world\", \"test\"}), \"o\") == std::vector<std::string>({\"hello\", \"world\"})));\n    assert((filter_by_substring(std::vector<std::string>({\"apple\", \"banana\", \"cherry\"}), \"pe\") == std::vector<std::string>({\"apple\"})));\n    assert((filter_by_substring(std::vector<std::string>({\"dog\", \"cat\", \"fish\"}), \"z\") == std::vector<std::string>()));\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis code defines the `filter_by_substring` function, which filters a list of strings to return only those that contain a given substring. It also includes a `main` function with some test cases to verify the correctness of the implementation.", "task_id": "HumanEval_7_filter_by_substring"}
{"name": "HumanEval_8_sum_product", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_8_sum_product.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>())) == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100, (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10}))) == (std::make_tuple(10, 10)));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <vector>\n#include <tuple>\n#include <numeric>\n#include <cassert>\n\n// For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long, long> sum_product(std::vector<long> numbers) {\n    long sum = std::accumulate(numbers.begin(), numbers.end(), 0L);\n    long product = std::accumulate(numbers.begin(), numbers.end(), 1L, std::multiplies<long>());\n    return std::make_tuple(sum, product);\n}\n\nint main() {\n    // Test cases\n    assert(sum_product(std::vector<long>()) == std::make_tuple(0, 1));\n    assert(sum_product(std::vector<long>({1, 2, 3, 4})) == std::make_tuple(10, 24));\n    assert(sum_product(std::vector<long>({5, 6})) == std::make_tuple(11, 30));\n    assert(sum_product(std::vector<long>({0, 1, 2, 3})) == std::make_tuple(6, 0));\n    assert(sum_product(std::vector<long>({-1, -1, -1})) == std::make_tuple(-3, -1));\n    \n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_8_sum_product"}
{"name": "HumanEval_9_rolling_max", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a given vector of integers, generate a vector of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)3, (long)4, (long)2})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4}))\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_9_rolling_max.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = rolling_max;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3, (long)100, (long)3}))) == (std::vector<long>({(long)3, (long)3, (long)3, (long)100, (long)100})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cassert>\n#include <bits/stdc++.h>\n\nstd::vector<long> rolling_max(std::vector<long> numbers) {\n    std::vector<long> result;\n    if (numbers.empty()) {\n        return result;\n    }\n\n    long current_max = numbers[0];\n    result.push_back(current_max);\n\n    for (size_t i = 1; i < numbers.size(); ++i) {\n        current_max = std::max(current_max, numbers[i]);\n        result.push_back(current_max);\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<long> input = {1, 2, 3, 2, 3, 4, 2};\n    std::vector<long> expected_output = {1, 2, 3, 3, 3, 4, 4};\n    assert(rolling_max(input) == expected_output);\n\n    input = {8, 7, 6, 5, 9};\n    expected_output = {8, 8, 8, 8, 9};\n    assert(rolling_max(input) == expected_output);\n\n    input = {1, 2, 2, 2, 3, 3};\n    expected_output = {1, 2, 2, 2, 3, 3};\n    assert(rolling_max(input) == expected_output);\n\n    input = {};\n    expected_output = {};\n    assert(rolling_max(input) == expected_output);\n\n    input = {5};\n    expected_output = {5};\n    assert(rolling_max(input) == expected_output);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_9_rolling_max"}
{"name": "HumanEval_10_make_palindrome", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_10_make_palindrome.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"jerry\")) == (\"jerryrrej\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n#include <assert.h>\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n// (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string s) {\n    int n = s.size();\n    for (int i = n; i >= 0; i--) {\n        // Check if the suffix starting from index i is a palindrome.\n        std::string suffix = s.substr(i);\n        std::string reversed_suffix = suffix;\n        std::reverse(reversed_suffix.begin(), reversed_suffix.end());\n\n        if (suffix == reversed_suffix) {\n            // Reverse the prefix that is not part of the palindrome.\n            std::string prefix = s.substr(0, i);\n            std::reverse(prefix.begin(), prefix.end());\n            return s + prefix;\n        }\n    }\n    // If for some reason we end up here, return an empty string (although it shouldn't happen).\n    return \"\";\n}\n\nint main() {\n    assert(make_palindrome(\"\") == \"\");\n    assert(make_palindrome(\"cat\") == \"catac\");\n    assert(make_palindrome(\"cata\") == \"catac\");\n    assert(make_palindrome(\"aacecaaa\") == \"aacecaaa\");\n    assert(make_palindrome(\"abcd\") == \"abcba\");\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_10_make_palindrome"}
{"name": "HumanEval_11_string_xor", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor((\"010\"), (\"110\"))\n// (\"100\")\nstd::string string_xor(std::string a, std::string b) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_11_string_xor.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\")) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nstd::string string_xor(std::string a, std::string b) {\n    assert(a.length() == b.length()); // Ensure both strings are of the same length\n    \n    std::string result = \"\";\n    for (size_t i = 0; i < a.length(); ++i) {\n        // XOR each character and append to the result string\n        if (a[i] == b[i]) {\n            result += '0';\n        } else {\n            result += '1';\n        }\n    }\n    return result;\n}\n\n// Example usage\nint main() {\n    std::string a = \"010\";\n    std::string b = \"110\";\n    \n    std::string result = string_xor(a, b);\n    std::cout << \"Result: \" << result << std::endl; // Output: \"100\"\n\n    return 0;\n}\n```", "task_id": "HumanEval_11_string_xor"}
{"name": "HumanEval_12_longest", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n// std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_12_longest.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n        return std::nullopt;\n    }\n    \n    std::string longest_str = strings[0];\n\n    for (const auto& str : strings) {\n        if (str.length() > longest_str.length()) {\n            longest_str = str;\n        }\n    }\n\n    return longest_str;\n}\n\nint main() {\n    assert(longest({}) == std::nullopt);\n    assert(longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert(longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n    assert(longest({\"hello\", \"world\", \"!\"}) == \"hello\");\n    assert(longest({\"short\", \"longer\", \"longest\"}) == \"longest\");\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_12_longest"}
{"name": "HumanEval_13_greatest_common_divisor", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_13_greatest_common_divisor.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3), (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49), (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n// (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long a, long b) {\n    if (b == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);\n}\n\nint main() {\n    // Testing the function with provided examples\n    assert(greatest_common_divisor(3, 5) == 1);\n    assert(greatest_common_divisor(25, 15) == 5);\n\n    // Additional test cases\n    assert(greatest_common_divisor(10, 5) == 5); // 5 is the GCD of 10 and 5\n    assert(greatest_common_divisor(12, 15) == 3); // 3 is the GCD of 12 and 15\n    assert(greatest_common_divisor(100, 25) == 25); // 25 is the GCD of 100 and 25\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_13_greatest_common_divisor"}
{"name": "HumanEval_14_all_prefixes", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_14_all_prefixes.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Return vector of all prefixes from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n// (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n    std::vector<std::string> prefixes;\n\n    for (size_t i = 1; i <= string.size(); ++i) {\n        prefixes.push_back(string.substr(0, i));\n    }\n\n    return prefixes;\n}\n\nint main() {\n    std::vector<std::string> result = all_prefixes(\"abc\");\n    std::vector<std::string> expected = {\"a\", \"ab\", \"abc\"};\n\n    assert(result == expected);\n    \n    result = all_prefixes(\"prefix\");\n    expected = {\"p\", \"pr\", \"pre\", \"pref\", \"prefix\"};\n\n    assert(result == expected);\n\n    result = all_prefixes(\"x\");\n    expected = {\"x\"};\n\n    assert(result == expected);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_14_all_prefixes"}
{"name": "HumanEval_15_string_sequence", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence((0))\n// (\"0\")\n// >>> string_sequence((5))\n// (\"0 1 2 3 4 5\")\nstd::string string_sequence(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_15_string_sequence.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string string_sequence(long n) {\n    std::stringstream ss;\n    for (long i = 0; i <= n; ++i) {\n        if (i != 0) {\n            ss << \" \";\n        }\n        ss << i;\n    }\n    return ss.str();\n}\n\nint main() {\n    assert(string_sequence(0) == \"0\");\n    assert(string_sequence(5) == \"0 1 2 3 4 5\");\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_15_string_sequence"}
{"name": "HumanEval_16_count_distinct_characters", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_16_count_distinct_characters.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters((\"xyzXYZ\"))\n// (3)\n// >>> count_distinct_characters((\"Jerry\"))\n// (4)\nlong count_distinct_characters(std::string str) {\n    std::set<char> distinct_characters;\n    for (char c : str) {\n        distinct_characters.insert(tolower(c));\n    }\n    return distinct_characters.size();\n}\n\nint main() {\n    assert(count_distinct_characters(\"xyzXYZ\") == 3);\n    assert(count_distinct_characters(\"Jerry\") == 4);\n    assert(count_distinct_characters(\"aAaBbB\") == 2);\n    assert(count_distinct_characters(\"Hello, World!\") == 9);\n    assert(count_distinct_characters(\"\") == 0);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_16_count_distinct_characters"}
{"name": "HumanEval_17_parse_music", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return vector of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4, (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4, (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_17_parse_music.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long> beats;\n    std::istringstream iss(music_string);\n    std::string note;\n\n    while (iss >> note) {\n        if (note == \"o\") {\n            // whole note\n            beats.push_back(4);\n        } else if (note == \"o|\") {\n            // half note\n            beats.push_back(2);\n        } else if (note == \".|\") {\n            // quarter note\n            beats.push_back(1);\n        } else {\n            // Invalid input: for simplicity, you can either handle this with an exception or just an assert\n            assert(false && \"Invalid note in input string\");\n        }\n    }\n\n    return beats;\n}\n\n// Testing the function\nint main() {\n    std::vector<long> result = parse_music(\"o o| .| o| o| .| .| .| .| o o\");\n    std::vector<long> expected = {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4};\n    assert(result == expected);\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```\n\nHere's the complete code including the function definition and a simple test in the `main` function. The `parse_music` function reads the input string, splits it by spaces, and translates each musical note to its corresponding number of beats. Headers like `<bits/stdc++.h>` are generally avoided in production code due to their large size, but it provides a quick and comprehensive compilation of standard headers for competitive programming and testing purposes.", "task_id": "HumanEval_17_parse_music"}
{"name": "HumanEval_18_how_many_times", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_18_how_many_times.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Find how many times a given substring can be found in the original string. Count overlapping cases.\n// >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong how_many_times(std::string string, std::string substring) {\n    if (substring.size() == 0) return 0;\n\n    long count = 0;\n    for (size_t pos = 0; pos < string.size(); ++pos) {\n        pos = string.find(substring, pos);\n        if (pos == std::string::npos) break;\n        ++count;\n    }\n\n    return count;\n}\n\nint main() {\n    // Test cases\n    assert(how_many_times(\"\", \"a\") == 0);\n    assert(how_many_times(\"aaa\", \"a\") == 3);\n    assert(how_many_times(\"aaaa\", \"aa\") == 3);\n    assert(how_many_times(\"abababab\", \"abab\") == 2);\n    std::cout << \"All test cases pass.\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_18_how_many_times"}
{"name": "HumanEval_19_sort_numbers", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string numbers) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_19_sort_numbers.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five four three two one zero\")) == (\"zero one two three four five six\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\nstd::string sort_numbers(std::string numbers) {\n    std::map<std::string, int> str_to_num = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3},\n        {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7},\n        {\"eight\", 8}, {\"nine\", 9}\n    };\n\n    std::map<int, std::string> num_to_str = {\n        {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"},\n        {4, \"four\"}, {5, \"five\"}, {6, \"six\"}, {7, \"seven\"},\n        {8, \"eight\"}, {9, \"nine\"}\n    };\n\n    std::stringstream ss(numbers);\n    std::string word;\n    std::vector<int> num_list;\n\n    while (ss >> word) {\n        num_list.push_back(str_to_num[word]);\n    }\n\n    std::sort(num_list.begin(), num_list.end());\n\n    std::string result;\n    for (size_t i = 0; i < num_list.size(); ++i) {\n        if (i != 0) {\n            result += ' ';\n        }\n        result += num_to_str[num_list[i]];\n    }\n\n    return result;\n}\n\nint main() {\n    assert(sort_numbers(\"three one five\") == \"one three five\");\n    return 0;\n}\n```", "task_id": "HumanEval_19_sort_numbers"}
{"name": "HumanEval_20_find_closest_elements", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n// (std::make_tuple(2.0f, 2.2f))\n// >>> find_closest_elements((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n// (std::make_tuple(2.0f, 2.0f))\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_20_find_closest_elements.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = find_closest_elements;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(3.9f, 4.0f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))) == (std::make_tuple(5.0f, 5.9f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))) == (std::make_tuple(2.0f, 2.2f)));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))) == (std::make_tuple(2.0f, 2.0f)));\n    assert(candidate((std::vector<float>({(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))) == (std::make_tuple(2.2f, 3.1f)));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cassert>\n#include <bits/stdc++.h>\n\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n    assert(numbers.size() >= 2);\n\n    // Sort the numbers first\n    std::sort(numbers.begin(), numbers.end());\n\n    float min_diff = FLT_MAX;\n    std::tuple<float, float> closest_pair;\n\n    // Find the pair with the minimal difference\n    for (size_t i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i+1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = std::make_tuple(numbers[i], numbers[i+1]);\n        }\n    }\n\n    return closest_pair;\n}\n\nint main() {\n    auto result1 = find_closest_elements({1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.2f});\n    assert(result1 == std::make_tuple(2.0f, 2.2f));\n\n    auto result2 = find_closest_elements({1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 2.0f});\n    assert(result2 == std::make_tuple(2.0f, 2.0f));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_20_find_closest_elements"}
{"name": "HumanEval_21_rescale_to_unit", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_21_rescale_to_unit.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0f, (float)49.9f}))) == (std::vector<float>({(float)0.0f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)49.9f}))) == (std::vector<float>({(float)1.0f, (float)0.0f})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f})));\n    assert(candidate((std::vector<float>({(float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f, (float)4.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n    assert(candidate((std::vector<float>({(float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f, (float)14.0f}))) == (std::vector<float>({(float)0.25f, (float)0.0f, (float)1.0f, (float)0.5f, (float)0.75f})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Given vector of numbers (of at least two elements), apply a linear transform to that vector,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n// (std::vector<float>({(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\n\nstd::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size() >= 2);\n\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n\n    std::vector<float> result;\n\n    for (float number : numbers) {\n        float rescaled = (number - min_val) / (max_val - min_val);\n        result.push_back(rescaled);\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<float> numbers = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f};\n    std::vector<float> expected = {0.0f, 0.25f, 0.5f, 0.75f, 1.0f};\n    std::vector<float> result = rescale_to_unit(numbers);\n\n    for (size_t i = 0; i < expected.size(); ++i) {\n        assert(abs(result[i] - expected[i]) < 1e-6); // Check for floating point precision issues\n    }\n\n    std::cout << \"All tests passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_21_rescale_to_unit"}
{"name": "HumanEval_22_filter_integers", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter given vector of any cppthon values only for integers\n// >>> filter_integers((std::vector<std::any>({(std::string)\"a\", (std::string)3.14f, (std::string)5})))\n// (std::vector<long>({(long)5}))\n// >>> filter_integers((std::vector<std::any>({1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_22_filter_integers.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = filter_integers;\n    assert(candidate((std::vector<std::any>())) == (std::vector<long>()));\n    assert(candidate((std::vector<std::any>({4, std::map<long,long>(), std::vector<long>(), 23.2f, 9, \"adasd\"}))) == (std::vector<long>({(long)4, (long)9})));\n    assert(candidate((std::vector<std::any>({3, \"c\", 3, 3, \"a\", \"b\"}))) == (std::vector<long>({(long)3, (long)3, (long)3})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n#include <any>\n#include <vector>\n#include <string>\n#include <map>\n\nstd::vector<long> filter_integers(std::vector<std::any> values) {\n    std::vector<long> result;\n    for (const auto& value : values) {\n        if (value.type() == typeid(int)) {\n            result.push_back(std::any_cast<int>(value));\n        } else if (value.type() == typeid(long)) {\n            result.push_back(std::any_cast<long>(value));\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::vector<std::any> values1 = {std::string(\"a\"), 3.14f, 5};\n    std::vector<long> result1 = filter_integers(values1);\n    std::vector<long> expected1 = {(long)5};\n    assert(result1 == expected1);\n\n    std::vector<std::any> values2 = {1, 2, 3, \"abc\", std::map<long,long>(), std::vector<long>()};\n    std::vector<long> result2 = filter_integers(values2);\n    std::vector<long> expected2 = {(long)1, (long)2, (long)3};\n    assert(result2 == expected2);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_22_filter_integers"}
{"name": "HumanEval_23_strlen", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_23_strlen.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = string_length;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"asdasnakj\")) == (9));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Return length of given string\n// >>> string_length((\"\"))\n// (0)\n// >>> string_length((\"abc\"))\n// (3)\nlong string_length(std::string string) {\n    return string.length();\n}\n\nint main() {\n    // Test cases\n    assert(string_length(\"\") == 0);\n    assert(string_length(\"abc\") == 3);\n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_23_strlen"}
{"name": "HumanEval_24_largest_divisor", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_24_largest_divisor.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = largest_divisor;\n    assert(candidate((3)) == (1));\n    assert(candidate((7)) == (1));\n    assert(candidate((10)) == (5));\n    assert(candidate((100)) == (50));\n    assert(candidate((49)) == (7));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor((15))\n// (5)\nlong largest_divisor(long n) {\n    // Start checking from n/2 downwards\n    for(long i = n / 2; i >= 1; --i) {\n        if(n % i == 0) {\n            return i;\n        }\n    }\n    // If no such number found, which is quite impossible practically\n    return 1; \n}\n\nint main() {\n    assert(largest_divisor(15) == 5);\n    assert(largest_divisor(10) == 5);\n    assert(largest_divisor(49) == 7);\n    assert(largest_divisor(21) == 7);\n    assert(largest_divisor(100) == 50);\n    assert(largest_divisor(7) == 1);\n    assert(largest_divisor(1) == 1); // Edge case: 1 should return 1 since it's the only divisor\n\n    std::cout << \"All test cases passed!\";\n    return 0;\n}\n```", "task_id": "HumanEval_24_largest_divisor"}
{"name": "HumanEval_25_factorize", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_25_factorize.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2, (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19, (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3, (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577)) == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <iostream>\n#include <vector>\n\n// Return vector of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be vectored number of times corresponding to how many times it appears in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>> factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n// (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n    for (long i = 2; i * i <= n; ++i) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n\nint main() {\n    assert(factorize(8) == std::vector<long>({2, 2, 2}));\n    assert(factorize(25) == std::vector<long>({5, 5}));\n    assert(factorize(70) == std::vector<long>({2, 5, 7}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_25_factorize"}
{"name": "HumanEval_26_remove_duplicates", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_26_remove_duplicates.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)5})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// From a vector of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)4})))\n// (std::vector<long>({(long)1, (long)3, (long)4}))\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n    std::unordered_map<long, int> count_map;\n    for (const auto& num : numbers) {\n        count_map[num]++;\n    }\n    \n    std::vector<long> result;\n    for (const auto& num : numbers) {\n        if (count_map[num] == 1) {\n            result.push_back(num);\n        }\n    }\n    \n    return result;\n}\n\nint main() {\n    std::vector<long> test1 = {1, 2, 3, 2, 4};\n    std::vector<long> expected1 = {1, 3, 4};\n    assert(remove_duplicates(test1) == expected1);\n\n    std::vector<long> test2 = {1, 1, 1, 1, 1};\n    std::vector<long> expected2 = {};\n    assert(remove_duplicates(test2) == expected2);\n\n    std::vector<long> test3 = {5, 6, 7, 8, 9};\n    std::vector<long> expected3 = {5, 6, 7, 8, 9};\n    assert(remove_duplicates(test3) == expected3);\n    \n    std::vector<long> test4 = {7, 12, 7, 12, 13, 14, 13};\n    std::vector<long> expected4 = {14};\n    assert(remove_duplicates(test4) == expected4);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_26_remove_duplicates"}
{"name": "HumanEval_27_flip_case", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_27_flip_case.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = flip_case;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hello!\")) == (\"hELLO!\"));\n    assert(candidate((\"These violent delights have violent ends\")) == (\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case((\"Hello\"))\n// (\"hELLO\")\nstd::string flip_case(std::string input) {\n    for (int i = 0; i < input.size(); ++i) {\n        if (islower(input[i])) {\n            input[i] = toupper(input[i]);\n        } else if (isupper(input[i])) {\n            input[i] = tolower(input[i]);\n        }\n    }\n    return input;\n}\n\nint main() {\n    assert(flip_case(\"Hello\") == \"hELLO\");\n    assert(flip_case(\"WORLD\") == \"world\");\n    assert(flip_case(\"coDIng\") == \"COdiNG\");\n    assert(flip_case(\"1234\") == \"1234\");\n    assert(flip_case(\"\") == \"\");\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_27_flip_case"}
{"name": "HumanEval_28_concatenate", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_28_concatenate.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"k\"}))) == (\"xyzwk\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Concatenate vector of strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string> strings) {\n    std::string result;\n    for (const auto& str : strings) {\n        result += str;\n    }\n    return result;\n}\n\nint main() {\n    // Test cases\n    assert(concatenate(std::vector<std::string>()) == \"\");\n    assert(concatenate(std::vector<std::string>({\"a\", \"b\", \"c\"})) == \"abc\");\n    assert(concatenate(std::vector<std::string>({\"hello\", \" \", \"world\"})) == \"hello world\");\n    assert(concatenate(std::vector<std::string>({\"\", \"\"})) == \"\");\n    assert(concatenate(std::vector<std::string>({\"single\"})) == \"single\");\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_28_concatenate"}
{"name": "HumanEval_29_filter_by_prefix", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_29_filter_by_prefix.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Filter an input vector of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()), (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings, std::string prefix) {\n    std::vector<std::string> result;\n    for(const auto &str : strings) {\n        if(str.find(prefix) == 0) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\nint main() {\n    assert((filter_by_prefix(std::vector<std::string>(), \"a\") == std::vector<std::string>()));\n    assert((filter_by_prefix(std::vector<std::string>({\"abc\", \"bcd\", \"cde\", \"array\"}), \"a\") == std::vector<std::string>({\"abc\", \"array\"})));\n    assert((filter_by_prefix(std::vector<std::string>({\"hello\", \"hey\", \"world\", \"hi\"}), \"h\") == std::vector<std::string>({\"hello\", \"hey\", \"hi\"})));\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_29_filter_by_prefix"}
{"name": "HumanEval_30_get_positive", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_30_get_positive.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Return only positive numbers in the vector.\n// >>> get_positive((std::vector<long>({(long)-1, (long)2, (long)-4, (long)5, (long)6})))\n// (std::vector<long>({(long)2, (long)5, (long)6}))\n// >>> get_positive((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)9, (long)123, (long)1}))\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long> positive_numbers;\n    for(long num : l) {\n        if(num > 0) {\n            positive_numbers.push_back(num);\n        }\n    }\n    return positive_numbers;\n}\n\nint main() {\n    // Test cases\n    assert((get_positive({-1, 2, -4, 5, 6}) == std::vector<long>{2, 5, 6}));\n    assert((get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) == std::vector<long>{5, 3, 2, 3, 9, 123, 1}));\n    assert((get_positive({-1, -2, -3}) == std::vector<long>{}));\n    assert((get_positive({0, 1, 2, 3, 0}) == std::vector<long>{1, 2, 3}));\n    assert((get_positive({}) == std::vector<long>{}));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_30_get_positive"}
{"name": "HumanEval_31_is_prime", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_31_is_prime.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\nusing namespace std;\n\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n// >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n// (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n// >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}\n\nint main() {\n    assert(is_prime(6) == false);\n    assert(is_prime(101) == true);\n    assert(is_prime(11) == true);\n    assert(is_prime(13441) == true);\n    assert(is_prime(61) == true);\n    assert(is_prime(4) == false);\n    assert(is_prime(1) == false);\n\n    cout << \"All test cases passed!\" << endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_31_is_prime"}
{"name": "HumanEval_33_sort_third", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_33_sort_third.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)3, (long)4, (long)6, (long)9, (long)2}))) == (std::vector<long>({(long)2, (long)8, (long)3, (long)4, (long)6, (long)9, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)9, (long)4, (long)8, (long)3, (long)2}))) == (std::vector<long>({(long)2, (long)6, (long)9, (long)4, (long)8, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5, (long)1})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n// to the values of the corresponding indices of l, but sorted.\n// >>> sort_third((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_third((std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})))\n// (std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5}))\nstd::vector<long> sort_third(std::vector<long> l) {\n    std::vector<long> indices_divisible_by_three;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            indices_divisible_by_three.push_back(l[i]);\n        }\n    }\n    // Sort the extracted elements that are at index % 3 == 0\n    std::sort(indices_divisible_by_three.begin(), indices_divisible_by_three.end());\n\n    // Place the sorted elements back to their original positions\n    size_t index = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (i % 3 == 0) {\n            l[i] = indices_divisible_by_three[index++];\n        }\n    }\n\n    return l;\n}\n\n// Test cases\nint main() {\n    assert((sort_third(std::vector<long>({(long)1, (long)2, (long)3})) == std::vector<long>({(long)1, (long)2, (long)3})));\n    assert((sort_third(std::vector<long>({(long)5, (long)6, (long)3, (long)4, (long)8, (long)9, (long)2})) == std::vector<long>({(long)2, (long)6, (long)3, (long)4, (long)8, (long)9, (long)5})));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_33_sort_third"}
{"name": "HumanEval_34_unique", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_34_unique.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Return sorted unique elements in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long> l) {\n    // Sort the input vector\n    std::sort(l.begin(), l.end());\n    \n    // Remove duplicates\n    auto last = std::unique(l.begin(), l.end());\n    l.erase(last, l.end());\n    \n    return l;\n}\n\nint main() {\n    // Test case\n    std::vector<long> input = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    std::vector<long> expected_output = {0, 2, 3, 5, 9, 123};\n    std::vector<long> output = unique(input);\n    \n    // Assert that the output matches the expected output\n    assert(output == expected_output);\n    \n    // If no assertion errors, print success message\n    std::cout << \"Test passed successfully!\" << std::endl;\n    \n    return 0;\n}\n```", "task_id": "HumanEval_34_unique"}
{"name": "HumanEval_35_max_element", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_35_max_element.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Return maximum element in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n// (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\nlong max_element(std::vector<long> l) {\n    // Check if the vector is empty and handle it appropriately if needed.\n    assert(!l.empty());\n\n    // Using the standard library function to find the maximum element.\n    return *std::max_element(l.begin(), l.end());\n}\n\nint main() {\n    // Test cases from the docstring.\n    assert(max_element(std::vector<long>({(long)1, (long)2, (long)3})) == 3);\n    assert(max_element(std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})) == 123);\n\n    // Additional test cases.\n    assert(max_element(std::vector<long>({(long)7, (long)7, (long)7})) == 7);\n    assert(max_element(std::vector<long>({(long)-1})) == -1);\n    assert(max_element(std::vector<long>({(long)8, (long)2, (long)5, (long)4})) == 8);\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_35_max_element"}
{"name": "HumanEval_36_fizz_buzz", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_36_fizz_buzz.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fizz_buzz;\n    assert(candidate((50)) == (0));\n    assert(candidate((78)) == (2));\n    assert(candidate((79)) == (3));\n    assert(candidate((100)) == (3));\n    assert(candidate((200)) == (6));\n    assert(candidate((4000)) == (192));\n    assert(candidate((10000)) == (639));\n    assert(candidate((100000)) == (8026));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\nusing namespace std;\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz((50))\n// (0)\n// >>> fizz_buzz((78))\n// (2)\n// >>> fizz_buzz((79))\n// (3)\nlong fizz_buzz(long n) {\n    long count = 0;\n    \n    for (long i = 1; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            long num = i;\n            while (num > 0) {\n                if (num % 10 == 7) {\n                    count++;\n                }\n                num /= 10;\n            }\n        }\n    }\n    \n    return count;\n}\n\nint main() {\n    assert(fizz_buzz(50) == 0);\n    assert(fizz_buzz(78) == 2);\n    assert(fizz_buzz(79) == 3);\n    \n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_36_fizz_buzz"}
{"name": "HumanEval_37_sort_even", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a vector l and returns a vector l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)1, (long)2, (long)3}))\n// >>> sort_even((std::vector<long>({(long)5, (long)6, (long)3, (long)4})))\n// (std::vector<long>({(long)3, (long)6, (long)5, (long)4}))\nstd::vector<long> sort_even(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_37_sort_even.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_even;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)1, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)-10, (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)5, (long)0, (long)9, (long)1, (long)123})));\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)-12, (long)4, (long)23, (long)2, (long)3, (long)11, (long)12, (long)-10}))) == (std::vector<long>({(long)-12, (long)8, (long)3, (long)4, (long)5, (long)2, (long)12, (long)11, (long)23, (long)-10})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> sort_even(std::vector<long> l) {\n    // Extract the values at even indices\n    std::vector<long> even_values;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        even_values.push_back(l[i]);\n    }\n\n    // Sort the even index values\n    std::sort(even_values.begin(), even_values.end());\n\n    // Place sorted values back into the original vector at even indices\n    size_t even_index = 0;\n    for (size_t i = 0; i < l.size(); i += 2) {\n        l[i] = even_values[even_index++];\n    }\n    \n    return l;\n}\n\nint main() {\n    assert((sort_even((std::vector<long>({1, 2, 3}))) == std::vector<long>({1, 2, 3})));\n    assert((sort_even((std::vector<long>({5, 6, 3, 4}))) == std::vector<long>({3, 6, 5, 4})));\n    assert((sort_even((std::vector<long>({10, 1, 30, 2, 20, 3}))) == std::vector<long>({10, 1, 20, 2, 30, 3})));\n    \n    return 0;\n}\n```", "task_id": "HumanEval_37_sort_even"}
{"name": "HumanEval_39_prime_fib", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib((1))\n// (2)\n// >>> prime_fib((2))\n// (3)\n// >>> prime_fib((3))\n// (5)\n// >>> prime_fib((4))\n// (13)\n// >>> prime_fib((5))\n// (89)\nlong prime_fib(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_39_prime_fib.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = prime_fib;\n    assert(candidate((1)) == (2));\n    assert(candidate((2)) == (3));\n    assert(candidate((3)) == (5));\n    assert(candidate((4)) == (13));\n    assert(candidate((5)) == (89));\n    assert(candidate((6)) == (233));\n    assert(candidate((7)) == (1597));\n    assert(candidate((8)) == (28657));\n    assert(candidate((9)) == (514229));\n    assert(candidate((10)) == (433494437));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\n// Function to check if a number is prime\nbool is_prime(long num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (long i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate the next Fibonacci number\nlong next_fib(long a, long b) {\n    return a + b;\n}\n\nlong prime_fib(long n) {\n    std::vector<long> fib_primes;\n    long a = 1, b = 1;\n    \n    while (fib_primes.size() < n) {\n        long fib = next_fib(a, b);\n        a = b;\n        b = fib;\n        if (is_prime(fib)) {\n            fib_primes.push_back(fib);\n        }\n    }\n    \n    return fib_primes[n - 1]; // nth prime Fibonacci number\n}\n\nint main() {\n    // Test cases based on the provided docstring\n    assert(prime_fib(1) == 2);\n    assert(prime_fib(2) == 3);\n    assert(prime_fib(3) == 5);\n    assert(prime_fib(4) == 13);\n    assert(prime_fib(5) == 89);\n    \n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_39_prime_fib"}
{"name": "HumanEval_40_triples_sum_to_zero", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_40_triples_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = triples_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)5, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)-100}))) == (false));\n    assert(candidate((std::vector<long>({(long)100, (long)3, (long)5, (long)-100}))) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// triples_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are three distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> triples_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})))\n// (true)\n// >>> triples_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool triples_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n    if (n < 3) return false;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < n - 2; i++) {\n        if (i > 0 && l[i] == l[i-1]) continue; // skip duplicates\n        int left = i + 1, right = n - 1;\n        while (left < right) {\n            long sum = l[i] + l[left] + l[right];\n            if (sum == 0) {\n                return true;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    assert(triples_sum_to_zero(std::vector<long>({(long)1, (long)3, (long)5, (long)0})) == false);\n    assert(triples_sum_to_zero(std::vector<long>({(long)1, (long)3, (long)-2, (long)1})) == true);\n    assert(triples_sum_to_zero(std::vector<long>({(long)1, (long)2, (long)3, (long)7})) == false);\n    assert(triples_sum_to_zero(std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)9, (long)7})) == true);\n    assert(triples_sum_to_zero(std::vector<long>({(long)1})) == false);\n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_40_triples_sum_to_zero"}
{"name": "HumanEval_41_car_race_collision", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_41_car_race_collision.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = car_race_collision;\n    assert(candidate((2)) == (4));\n    assert(candidate((3)) == (9));\n    assert(candidate((4)) == (16));\n    assert(candidate((8)) == (64));\n    assert(candidate((10)) == (100));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nlong car_race_collision(long n) {\n    // Each left to right car will collide with each right to left car exactly once\n    return n * n;\n}\n\nint main() {\n    // Test cases\n    assert(car_race_collision(1) == 1);\n    assert(car_race_collision(2) == 4);\n    assert(car_race_collision(3) == 9);\n    assert(car_race_collision(4) == 16);\n    assert(car_race_collision(1000) == 1000000);\n\n    std::cout << \"All test cases pass.\" << std::endl;\n    return 0;\n}\n```\n\nExplanation:\nWe need to count the number of collisions between the two sets of cars. Since every car moving left to right will collide with every car moving right to left exactly once, the number of collisions will be \\( n \\times n \\). Hence, the function `car_race_collision(long n)` simply returns \\( n \\times n \\). The `main` function includes test cases to validate the correctness of the implementation.", "task_id": "HumanEval_41_car_race_collision"}
{"name": "HumanEval_42_incr_list", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_42_incr_list.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)4, (long)3, (long)2})));\n    assert(candidate((std::vector<long>({(long)5, (long)2, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) == (std::vector<long>({(long)6, (long)3, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Return vector with elements incremented by 1.\n// >>> incr_list((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)3, (long)4}))\n// >>> incr_list((std::vector<long>({(long)5, (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)6, (long)4, (long)6, (long)3, (long)4, (long)4, (long)10, (long)1, (long)124}))\nstd::vector<long> incr_list(std::vector<long> l) {\n    for(auto &elem : l) {\n        elem += 1;\n    }\n    return l;\n}\n\nint main() {\n    assert((incr_list({1, 2, 3}) == std::vector<long>({2, 3, 4})));\n    assert((incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123}) == std::vector<long>({6, 4, 6, 3, 4, 4, 10, 1, 124})));\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_42_incr_list"}
{"name": "HumanEval_43_pairs_sum_to_zero", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a vector of integers as an input.\n// it returns true if there are two distinct elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1, (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n// (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_43_pairs_sum_to_zero.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long> seen;\n    for(long num : l) {\n        // Check if the negative of the current number exists in the set\n        if(seen.find(-num) != seen.end()) {\n            return true;\n        }\n        // Insert the current number into the set\n        seen.insert(num);\n    }\n    return false;\n}\n\nint main() {\n    // Test cases\n    assert(pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert(pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert(pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert(pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert(pairs_sum_to_zero({1}) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_43_pairs_sum_to_zero"}
{"name": "HumanEval_44_change_base", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_44_change_base.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n// >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"111\")\nstd::string change_base(long x, long base) {\n    if (x == 0) return \"0\";\n    std::string result;\n    while (x > 0) {\n        long remainder = x % base;\n        result = std::to_string(remainder) + result;\n        x /= base;\n    }\n    return result;\n}\n\nint main() {\n    assert(change_base(8, 3) == \"22\");\n    assert(change_base(8, 2) == \"1000\");\n    assert(change_base(7, 2) == \"111\");\n    assert(change_base(0, 2) == \"0\");\n    assert(change_base(10, 5) == \"20\");\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_44_change_base"}
{"name": "HumanEval_45_triangle_area", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area((5), (3))\n// (7.5f)\nfloat triangle_area(long a, long h) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_45_triangle_area.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5), (3)) == (7.5f));\n    assert(candidate((2), (2)) == (2.0f));\n    assert(candidate((10), (8)) == (40.0f));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Given length of a side and height return area for a triangle.\n// >>> triangle_area(5, 3)\n// (7.5f)\nfloat triangle_area(long a, long h) {\n    return 0.5 * a * h;\n}\n\nint main() {\n    // Test the function with given example\n    assert(triangle_area(5, 3) == 7.5f);\n    // Additional test cases\n    assert(triangle_area(10, 2) == 10.0f);\n    assert(triangle_area(6, 4) == 12.0f);\n    assert(triangle_area(8, 5) == 20.0f);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_45_triangle_area"}
{"name": "HumanEval_46_fib4", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4((5))\n// (4)\n// >>> fib4((6))\n// (8)\n// >>> fib4((7))\n// (14)\nlong fib4(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_46_fib4.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fib4;\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (28));\n    assert(candidate((10)) == (104));\n    assert(candidate((12)) == (386));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <assert.h>\n\n// The Fib4 number sequence is defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4.\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n\nlong fib4(long n) {\n    if (n < 0) return 0;\n    \n    std::vector<long> sequence(n + 1, 0);\n\n    // Initial cases\n    if (n >= 0) sequence[0] = 0;\n    if (n >= 1) sequence[1] = 0;\n    if (n >= 2) sequence[2] = 2;\n    if (n >= 3) sequence[3] = 0;\n\n    for (long i = 4; i <= n; ++i) {\n        sequence[i] = sequence[i-1] + sequence[i-2] + sequence[i-3] + sequence[i-4];\n    }\n\n    return sequence[n];\n}\n\nint main() {\n    // Test cases\n    assert(fib4(5) == 4);\n    assert(fib4(6) == 8);\n    assert(fib4(7) == 14);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_46_fib4"}
{"name": "HumanEval_47_median", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_47_median.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0f));\n    assert(candidate((std::vector<long>({(long)5}))) == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5}))) == (5.5f));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3, (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Return median of elements in the vector l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})))\n// (15.0f)\nfloat median(std::vector<long> l) {\n    if (l.empty()) throw std::invalid_argument(\"Vector is empty\");\n\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n    \n    if (n % 2 == 1) {\n        // Odd number of elements\n        return static_cast<float>(l[n / 2]);\n    } else {\n        // Even number of elements\n        return static_cast<float>(l[(n - 1) / 2] + l[n / 2]) / 2.0f;\n    }\n}\n\nint main() {\n    // Test cases\n    assert(median(std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})) == 3.0f);\n    assert(median(std::vector<long>({(long)-10, (long)4, (long)6, (long)1000, (long)10, (long)20})) == 15.0f);\n    \n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_47_median"}
{"name": "HumanEval_48_is_palindrome", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_48_is_palindrome.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"xywzx\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Checks if given string is a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\n    int n = text.length();\n    for (int i = 0; i < n / 2; ++i) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    assert(is_palindrome(\"\") == true);\n    assert(is_palindrome(\"aba\") == true);\n    assert(is_palindrome(\"aaaaa\") == true);\n    assert(is_palindrome(\"zbcd\") == false);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_48_is_palindrome"}
{"name": "HumanEval_49_modp", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_49_modp.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5)) == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0), (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100), (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31), (5)) == (3));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\nusing namespace std;\n\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n// >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100), (101))\n// (1)\nlong modp(long n, long p) {\n    if (p == 1) return 0;\n    long result = 1;\n    long base = 2;\n    n = n % (p - 1); // Fermat's little theorem\n\n    while (n > 0) {\n        if (n % 2 == 1) {\n            result = (result * base) % p;\n        }\n        base = (base * base) % p;\n        n = n / 2;\n    }\n\n    return result;\n}\n\nint main() {\n    assert(modp(3, 5) == 3);\n    assert(modp(1101, 101) == 2);\n    assert(modp(0, 101) == 1);\n    assert(modp(3, 11) == 8);\n    assert(modp(100, 101) == 1);\n    \n    cout << \"All tests passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_49_modp"}
{"name": "HumanEval_51_remove_vowels", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels((\"\"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_51_remove_vowels.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string remove_vowels(std::string text) {\n    std::string result;\n    std::string vowels = \"aeiouAEIOU\";\n    for (char c : text) {\n        if (vowels.find(c) == std::string::npos) {\n            result += c;\n        }\n    }\n    return result;\n}\n\n// Test cases\nint main() {\n    assert(remove_vowels(\"\") == \"\");\n    assert(remove_vowels(\"abcdef\") == \"bcdf\");\n    assert(remove_vowels(\"aaaaa\") == \"\");\n    assert(remove_vowels(\"aaBAA\") == \"B\");\n    assert(remove_vowels(\"zbcd\") == \"zbcd\");\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_51_remove_vowels"}
{"name": "HumanEval_52_below_threshold", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_52_below_threshold.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)8, (long)4, (long)10})), (10)) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\n// Return true if all numbers in the vector l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1, (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1, (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long> l, long t) {\n    for (long num : l) {\n        if (num >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    assert(below_threshold(std::vector<long>({1, 2, 4, 10}), 100) == true);\n    assert(below_threshold(std::vector<long>({1, 20, 4, 10}), 5) == false);\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_52_below_threshold"}
{"name": "HumanEval_53_add", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_53_add.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((0), (1)) == (1));\n    assert(candidate((1), (0)) == (1));\n    assert(candidate((2), (3)) == (5));\n    assert(candidate((5), (7)) == (12));\n    assert(candidate((7), (5)) == (12));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Add two numbers x and y\n// >>> add((2), (3))\n// (5)\n// >>> add((5), (7))\n// (12)\nlong add(long x, long y) {\n    return x + y;\n}\n\nint main() {\n    // Test cases\n    assert(add(2, 3) == 5);\n    assert(add(5, 7) == 12);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_53_add"}
{"name": "HumanEval_54_same_chars", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_54_same_chars.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = same_chars;\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    assert(candidate((\"abcd\"), (\"dddddddabc\")) == (true));\n    assert(candidate((\"dddddddabc\"), (\"abcd\")) == (true));\n    assert(candidate((\"eabcd\"), (\"dddddddabc\")) == (false));\n    assert(candidate((\"abcd\"), (\"dddddddabcf\")) == (false));\n    assert(candidate((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n    assert(candidate((\"aabb\"), (\"aaccc\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Check if two words have the same characters.\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n// (true)\n// >>> same_chars((\"abcd\"), (\"dddddddabc\"))\n// (true)\n// >>> same_chars((\"dddddddabc\"), (\"abcd\"))\n// (true)\n// >>> same_chars((\"eabcd\"), (\"dddddddabc\"))\n// (false)\n// >>> same_chars((\"abcd\"), (\"dddddddabce\"))\n// (false)\n// >>> same_chars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n// (false)\nbool same_chars(std::string s0, std::string s1) {\n    // Create two sets to store unique characters from both strings\n    std::set<char> set0(s0.begin(), s0.end());\n    std::set<char> set1(s1.begin(), s1.end());\n\n    // Check if both sets are equal\n    return set0 == set1;\n}\n\nint main() {\n    assert(same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert(same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert(same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert(same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert(same_chars(\"abcd\", \"dddddddabce\") == false);\n    assert(same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n\n    return 0;\n}\n```", "task_id": "HumanEval_54_same_chars"}
{"name": "HumanEval_55_fib", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_55_fib.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) == (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Return n-th Fibonacci number.\n// >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong fib(long n) {\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    \n    long a = 0, b = 1, c;\n    for (long i = 2; i <= n; ++i) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\nint main() {\n    // Test cases\n    assert(fib(10) == 55);\n    assert(fib(1) == 1);\n    assert(fib(8) == 21);\n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_55_fib"}
{"name": "HumanEval_56_correct_bracketing", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_56_correct_bracketing.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"<>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n\n    for (char ch : brackets) {\n        if (ch == '<') {\n            balance++;\n        } else if (ch == '>') {\n            balance--;\n        }\n\n        // If at any point balance is negative, there is a closing bracket without a matching opening bracket\n        if (balance < 0) {\n            return false;\n        }\n    }\n\n    // In the end, balance should be zero, meaning every opening bracket has a corresponding closing bracket\n    return (balance == 0);\n}\n```\n\nYou can test the implementation with the provided examples to check the correctness:\n\n```cpp\nint main() {\n    assert(correct_bracketing(\"<\") == false);\n    assert(correct_bracketing(\"<>\") == true);\n    assert(correct_bracketing(\"<<><>>\") == true);\n    assert(correct_bracketing(\"><<>\") == false);\n\n    std::cout << \"All tests passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_56_correct_bracketing"}
{"name": "HumanEval_57_monotonic", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1, (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1, (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4, (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_57_monotonic.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9, (long)9, (long)9, (long)9}))) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nbool monotonic(std::vector<long> l) {\n    if (l.size() <= 1) return true;\n\n    bool increasing = true;\n    bool decreasing = true;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n    }\n\n    return increasing || decreasing;\n}\n\nint main() {\n    assert(monotonic(std::vector<long>({1, 2, 4, 20})) == true);\n    assert(monotonic(std::vector<long>({1, 20, 4, 10})) == false);\n    assert(monotonic(std::vector<long>({4, 1, 0, -10})) == true);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_57_monotonic"}
{"name": "HumanEval_58_common", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1, (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2, (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_58_common.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1, (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2) {\n    // Step 1: Sort the input vectors\n    std::sort(l1.begin(), l1.end());\n    std::sort(l2.begin(), l2.end());\n\n    // Step 2: Create a vector to hold the common elements\n    std::vector<long> result;\n\n    // Step 3: Use set_intersection to find common elements\n    std::set_intersection(\n        l1.begin(), l1.end(),\n        l2.begin(), l2.end(),\n        std::back_inserter(result)\n    );\n\n    // Step 4: Remove duplicates from the result vector to make the elements unique\n    auto last = std::unique(result.begin(), result.end());\n    result.erase(last, result.end());\n\n    return result;\n}\n\nint main() {\n    std::vector<long> res1 = common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121});\n    assert((res1 == std::vector<long>{1, 5, 653}));\n\n    std::vector<long> res2 = common({5, 3, 2, 8}, {3, 2});\n    assert((res2 == std::vector<long>{2, 3}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_58_common"}
{"name": "HumanEval_59_largest_prime_factor", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_59_largest_prime_factor.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\nusing namespace std;\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n// (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long n) {\n    long max_prime = -1;\n\n    // Divide by 2 to remove all even factors\n    while (n % 2 == 0) {\n        max_prime = 2;\n        n /= 2;\n    }\n\n    // Now n must be odd. So we can skip one element (Note i = i +2)\n    for (long i = 3; i <= sqrt(n); i += 2) {\n        // While i divides n, remove all factors i.\n        while (n % i == 0) {\n            max_prime = i;\n            n /= i;\n        }\n    }\n\n    // If n is still greater than 2, then n must be prime\n    if (n > 2) {\n        max_prime = n;\n    }\n\n    return max_prime;\n}\n\nint main() {\n    assert(largest_prime_factor(13195) == 29);\n    assert(largest_prime_factor(2048) == 2);\n\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_59_largest_prime_factor"}
{"name": "HumanEval_60_sum_to_n", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_60_sum_to_n.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sum_to_n;\n    assert(candidate((1)) == (1));\n    assert(candidate((6)) == (21));\n    assert(candidate((11)) == (66));\n    assert(candidate((30)) == (465));\n    assert(candidate((100)) == (5050));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n((30))\n// (465)\n// >>> sum_to_n((100))\n// (5050)\n// >>> sum_to_n((5))\n// (15)\n// >>> sum_to_n((10))\n// (55)\n// >>> sum_to_n((1))\n// (1)\nlong sum_to_n(long n) {\n    long sum = 0;\n    for (long i = 1; i <= n; ++i) {\n        sum += i;\n    }\n    return sum;\n}\n\nint main() {\n    // Test cases\n    assert(sum_to_n(30) == 465);\n    assert(sum_to_n(100) == 5050);\n    assert(sum_to_n(5) == 15);\n    assert(sum_to_n(10) == 55);\n    assert(sum_to_n(1) == 1);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_60_sum_to_n"}
{"name": "HumanEval_61_correct_bracketing", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_61_correct_bracketing.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>> correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n    int balance = 0;\n    for(char c : brackets) {\n        if(c == '(') {\n            balance++;\n        } else if(c == ')') {\n            balance--;\n        }\n        // If balance goes negative, we have more closing brackets than opening ones.\n        if(balance < 0) {\n            return false;\n        }\n    }\n    // If balance is zero, all opening brackets have matching closing brackets.\n    return balance == 0;\n}\n\nint main() {\n    assert(correct_bracketing(\"(\") == false);\n    assert(correct_bracketing(\"()\") == true);\n    assert(correct_bracketing(\"(()())\") == true);\n    assert(correct_bracketing(\")(()\") == false);\n    assert(correct_bracketing(\"((())())\") == true);\n    assert(correct_bracketing(\"(()))(\") == false);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_61_correct_bracketing"}
{"name": "HumanEval_62_derivative", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_62_derivative.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)6})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (std::vector<long>({(long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1, (long)0, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)0, (long)16})));\n    assert(candidate((std::vector<long>({(long)1}))) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative((std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})))\n// (std::vector<long>({(long)1, (long)4, (long)12, (long)20}))\n// >>> derivative((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)6}))\nstd::vector<long> derivative(std::vector<long> xs) {\n    std::vector<long> result;\n    for (size_t i = 1; i < xs.size(); ++i) {\n        result.push_back(xs[i] * i);\n    }\n    return result;\n}\n\nint main() {\n    // Test cases\n    assert((derivative(std::vector<long>({(long)3, (long)1, (long)2, (long)4, (long)5})) == std::vector<long>({(long)1, (long)4, (long)12, (long)20})));\n    assert((derivative(std::vector<long>({(long)1, (long)2, (long)3})) == std::vector<long>({(long)2, (long)6})));\n    assert((derivative(std::vector<long>({(long)0})) == std::vector<long>()));\n    assert((derivative(std::vector<long>({(long)5, (long)0})) == std::vector<long>({0})));\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis code defines the `derivative` function which computes the derivative of a polynomial given as a vector of its coefficients. The main function includes some test cases to validate the implementation.", "task_id": "HumanEval_62_derivative"}
{"name": "HumanEval_63_fibfib", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n// >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_63_fibfib.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <iostream>\n#include <vector>\n\nlong fibfib(long n) {\n    if (n < 0) return -1; // Assuming negative numbers are invalid input\n\n    // Base cases\n    if (n == 0 || n == 1) return 0;\n    if (n == 2) return 1;\n\n    // Create a dynamic programming table to store results of subproblems\n    std::vector<long> dp(n + 1);\n    dp[0] = 0;\n    dp[1] = 0;\n    dp[2] = 1;\n\n    // Build the table from the bottom up\n    for (long i = 3; i <= n; ++i) {\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n    }\n\n    return dp[n];\n}\n\nint main() {\n    // Testing the fibfib function\n    assert(fibfib(1) == 0);\n    assert(fibfib(5) == 4);\n    assert(fibfib(8) == 24);\n\n    std::cout << \"fibfib(1) = \" << fibfib(1) << std::endl;\n    std::cout << \"fibfib(5) = \" << fibfib(5) << std::endl;\n    std::cout << \"fibfib(8) = \" << fibfib(8) << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_63_fibfib"}
{"name": "HumanEval_64_vowels_count", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"))\n// (3)\nlong vowels_count(std::string s) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_64_vowels_count.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"ACEDY\")) == (3));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\n// Function to count the number of vowels in the given string\nlong vowels_count(std::string s) {\n    long count = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n        char c = std::tolower(s[i]);\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ++count;\n        }\n    }\n    // Check if 'y' is at the end of the string and count it as a vowel\n    if (n > 0 && std::tolower(s[n-1]) == 'y') {\n        ++count;\n    }\n    return count;\n}\n\n// Test cases\nint main() {\n    assert(vowels_count(\"abcde\") == 2);\n    assert(vowels_count(\"ACEDY\") == 3);\n    assert(vowels_count(\"hello\") == 2);\n    assert(vowels_count(\"world\") == 1);\n    assert(vowels_count(\"rhythm\") == 1);\n    assert(vowels_count(\"myth\") == 1);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis code defines the `vowels_count` function which counts the number of vowels in a given string. It considers 'a', 'e', 'i', 'o', 'u' as general vowels and 'y' if it appears at the end of the string. The provided test cases within the `main` function validate the correctness of the function.", "task_id": "HumanEval_64_vowels_count"}
{"name": "HumanEval_65_circular_shift", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_65_circular_shift.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = circular_shift;\n    assert(candidate((100), (2)) == (\"001\"));\n    assert(candidate((12), (2)) == (\"12\"));\n    assert(candidate((97), (8)) == (\"79\"));\n    assert(candidate((12), (1)) == (\"21\"));\n    assert(candidate((11), (101)) == (\"11\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n#include <assert.h>\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift((12), (1))\n// (\"21\")\n// >>> circular_shift((12), (2))\n// (\"12\")\nstd::string circular_shift(long x, long shift) {\n    std::string s = std::to_string(x);\n    long n = s.length();\n    \n    if (shift >= n) {\n        std::reverse(s.begin(), s.end());\n        return s;\n    }\n    \n    shift = shift % n;\n    std::string result = s.substr(n - shift) + s.substr(0, n - shift);\n    return result;\n}\n\nint main() {\n    assert(circular_shift(12, 1) == \"21\");\n    assert(circular_shift(12, 2) == \"12\");\n    assert(circular_shift(1234, 1) == \"4123\");\n    assert(circular_shift(12345, 3) == \"34512\");\n    assert(circular_shift(12345, 5) == \"54321\");\n    assert(circular_shift(12345, 6) == \"54321\");\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}\n```\n\nThe above code implements the `circular_shift` function as specified in the docstring. It converts the given integer `x` to a string, calculates the number of digits, and performs a circular shift based on the value of `shift`. If `shift` is greater than or equal to the number of digits, it reverses the digits. The `main` function includes test cases to validate the correctness of the implementation.", "task_id": "HumanEval_65_circular_shift"}
{"name": "HumanEval_66_digitSum", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\nlong digitSum(std::string s) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_66_digitSum.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\" How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) == (327));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only's ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"))\n// (153)\n\nlong digitSum(std::string s) {\n    long sum = 0;\n    for (char c : s) {\n        if (isupper(c)) {\n            sum += int(c);\n        }\n    }\n    return sum;\n}\n\nint main() {\n    std::string test1 = \"\";\n    assert(digitSum(test1) == 0);\n\n    std::string test2 = \"abAB\";\n    assert(digitSum(test2) == 131);\n\n    std::string test3 = \"abcCd\";\n    assert(digitSum(test3) == 67);\n\n    std::string test4 = \"helloE\";\n    assert(digitSum(test4) == 69);\n\n    std::string test5 = \"woArBld\";\n    assert(digitSum(test5) == 131);\n\n    std::string test6 = \"aAaaaXa\";\n    assert(digitSum(test6) == 153);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_66_digitSum"}
{"name": "HumanEval_67_fruit_distribution", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution((\"5 apples and 6 oranges\"), (19))\n// (8)\n// >>> fruit_distribution((\"0 apples and 1 oranges\"), (3))\n// (2)\n// >>> fruit_distribution((\"2 apples and 3 oranges\"), (100))\n// (95)\n// >>> fruit_distribution((\"100 apples and 1 oranges\"), (120))\n// (19)\nlong fruit_distribution(std::string s, long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_67_fruit_distribution.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fruit_distribution;\n    assert(candidate((\"5 apples and 6 oranges\"), (19)) == (8));\n    assert(candidate((\"5 apples and 6 oranges\"), (21)) == (10));\n    assert(candidate((\"0 apples and 1 oranges\"), (3)) == (2));\n    assert(candidate((\"1 apples and 0 oranges\"), (3)) == (2));\n    assert(candidate((\"2 apples and 3 oranges\"), (100)) == (95));\n    assert(candidate((\"2 apples and 3 oranges\"), (5)) == (0));\n    assert(candidate((\"1 apples and 100 oranges\"), (120)) == (19));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nusing namespace std;\n\nlong fruit_distribution(string s, long n) {\n    // Extract number of apples and oranges from the string\n    int apples = 0, oranges = 0;\n    size_t pos = s.find(\" apples\");\n    if (pos != string::npos) {\n        apples = stoi(s.substr(0, pos));\n    }\n    pos = s.find(\"oranges\");\n    if (pos != string::npos) {\n        oranges = stoi(s.substr(s.find_last_of(\" \", pos - 1) + 1, pos));\n    }\n    \n    // Calculate mangoes\n    long mangoes = n - (apples + oranges);\n    \n    return mangoes;\n}\n\nint main() {\n    // Test cases\n    assert(fruit_distribution(\"5 apples and 6 oranges\", 19) == 8);\n    assert(fruit_distribution(\"0 apples and 1 oranges\", 3) == 2);\n    assert(fruit_distribution(\"2 apples and 3 oranges\", 100) == 95);\n    assert(fruit_distribution(\"100 apples and 1 oranges\", 120) == 19);\n\n    // It will print \"All test cases pass\" if tests pass\n    cout << \"All test cases pass\" << endl;\n    \n    return 0;\n}\n```", "task_id": "HumanEval_67_fruit_distribution"}
{"name": "HumanEval_68_pluck", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a vector, [ smalest_value, its index ],\n// If there are no even values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_68_pluck.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5, (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0, (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1}))) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<long> pluck(std::vector<long> arr) {\n    long smallest_even_value = LONG_MAX;\n    int index = -1;\n    \n    // Iterate through the array to find the smallest even value\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_even_value) {\n                smallest_even_value = arr[i];\n                index = i;\n            }\n        }\n    }\n    \n    // If no even value is found, return an empty vector\n    if (index == -1) {\n        return {};\n    }\n    \n    // Return the smallest even value and its index\n    return {smallest_even_value, index};\n}\n\nint main() {\n    // Test cases\n    assert(pluck({4, 2, 3}) == std::vector<long>({2, 1}));\n    assert(pluck({1, 2, 3}) == std::vector<long>({2, 1}));\n    assert(pluck({}) == std::vector<long>());\n    assert(pluck({5, 0, 3, 0, 4, 2}) == std::vector<long>({0, 1}));\n    \n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```\n\nThis code implements the `pluck` function to find the smallest even value from a given vector of non-negative integers and return it along with its index. It iterates through the array to identify the smallest even value and its first occurrence index. If no even number is found, it returns an empty vector. The `main` function contains test cases to validate the implementation.", "task_id": "HumanEval_68_pluck"}
{"name": "HumanEval_69_search", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4, (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n// (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n// (-1)\nlong search(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_69_search.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exists, return -1.\n\nlong search(vector<long> lst) {\n    unordered_map<long, long> freq_map;\n    \n    // Calculate the frequency of each element\n    for (long num : lst) {\n        freq_map[num]++;\n    }\n    \n    // Find the greatest integer that meets the criteria\n    long result = -1;\n    for (auto& entry : freq_map) {\n        long num = entry.first;\n        long freq = entry.second;\n        if (freq >= num && num > result) {\n            result = num;\n        }\n    }\n    \n    return result;\n}\n\n// Demonstration of test cases\nint main() {\n    assert(search({4, 1, 2, 2, 3, 1}) == 2);\n    assert(search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert(search({5, 5, 4, 4, 4}) == -1);\n    \n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_69_search"}
{"name": "HumanEval_70_strange_sort_list", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of integers, return vector in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)3}))\n// >>> strange_sort_list((std::vector<long>({(long)5, (long)5, (long)5, (long)5})))\n// (std::vector<long>({(long)5, (long)5, (long)5, (long)5}))\n// >>> strange_sort_list((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_70_strange_sort_list.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)4, (long)2, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9}))) == (std::vector<long>({(long)5, (long)9, (long)6, (long)8, (long)7})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (std::vector<long>({(long)1, (long)5, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>({(long)5, (long)6, (long)7, (long)8, (long)9, (long)1}))) == (std::vector<long>({(long)1, (long)9, (long)5, (long)8, (long)6, (long)7})));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5}))) == (std::vector<long>({(long)5, (long)5, (long)5, (long)5})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8}))) == (std::vector<long>({(long)1, (long)8, (long)2, (long)7, (long)3, (long)6, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)0, (long)2, (long)2, (long)2, (long)5, (long)5, (long)-5, (long)-5}))) == (std::vector<long>({(long)-5, (long)5, (long)-5, (long)5, (long)0, (long)2, (long)2, (long)2})));\n    assert(candidate((std::vector<long>({(long)111111}))) == (std::vector<long>({(long)111111})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long> result;\n    std::sort(lst.begin(), lst.end());\n\n    while (!lst.empty()) {\n        // Take the minimum\n        result.push_back(lst.front());\n        lst.erase(lst.begin());\n\n        if (!lst.empty()) {\n            // Take the maximum\n            result.push_back(lst.back());\n            lst.pop_back();\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<long> v1{1, 2, 3, 4};\n    std::vector<long> expected_v1{1, 4, 2, 3};\n    assert(strange_sort_list(v1) == expected_v1);\n\n    std::vector<long> v2{5, 5, 5, 5};\n    std::vector<long> expected_v2{5, 5, 5, 5};\n    assert(strange_sort_list(v2) == expected_v2);\n\n    std::vector<long> v3{};\n    std::vector<long> expected_v3{};\n    assert(strange_sort_list(v3) == expected_v3);\n\n    std::vector<long> v4{1};\n    std::vector<long> expected_v4{1};\n    assert(strange_sort_list(v4) == expected_v4);\n\n    std::vector<long> v5{4, 3, 3, 1, 2};\n    std::vector<long> expected_v5{1, 4, 2, 3, 3};\n    assert(strange_sort_list(v5) == expected_v5);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_70_strange_sort_list"}
{"name": "HumanEval_71_triangle_area", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0f)\n// >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a, long b, long c) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_71_triangle_area.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3), (4), (5)) == (6.0f));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n    assert(candidate((4), (8), (5)) == (8.18f));\n    assert(candidate((2), (2), (2)) == (1.73f));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10), (5), (7)) == (16.25f));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n    assert(candidate((1), (1), (1)) == (0.43f));\n    assert(candidate((2), (2), (10)) == (float(-1)));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\nfloat triangle_area(long a, long b, long c) {\n    // Check if the sides can form a valid triangle\n    if (a + b > c && b + c > a && c + a > b) {\n        // Calculate the semi-perimeter\n        float s = (a + b + c) / 2.0;\n        // Calculate the area using Heron's formula\n        float area = sqrt(s * (s - a) * (s - b) * (s - c));\n        // Round the result to 2 decimal points\n        area = round(area * 100) / 100.0;\n        return area;\n    } else {\n        return -1.0f; // Not a valid triangle\n    }\n}\n\nint main() {\n    assert(triangle_area(3, 4, 5) == 6.0f);\n    assert(triangle_area(1, 2, 10) == float(-1));\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_71_triangle_area"}
{"name": "HumanEval_72_will_it_fly", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1, (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long> q, long w) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_72_will_it_fly.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5)) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nbool is_palindromic(const std::vector<long>& q) {\n    int n = q.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (q[i] != q[n - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool will_it_fly(std::vector<long> q, long w) {\n    // Check if the vector is palindromic\n    if (!is_palindromic(q)) {\n        return false;\n    }\n    \n    // Check if the sum of elements is less than or equal to the max weight\n    long sum = std::accumulate(q.begin(), q.end(), 0L);\n    return sum <= w;\n}\n\n// Test cases\nint main() {\n    assert(will_it_fly({1, 2}, 5) == false);\n    assert(will_it_fly({3, 2, 3}, 1) == false);\n    assert(will_it_fly({3, 2, 3}, 9) == true);\n    assert(will_it_fly({3}, 5) == true);\n\n    std::cout << \"All test cases pass.\" << std::endl;\n    return 0;\n}\n```\n\nThe function `is_palindromic` checks if a vector is palindromic by comparing elements from the start and end towards the middle. The `will_it_fly` function uses this helper function to determine if the object `q` is balanced and then checks if the sum of the vector's elements is less than or equal to the maximum allowed weight `w`. The test cases in `main` ensure that the function works as expected.", "task_id": "HumanEval_72_will_it_fly"}
{"name": "HumanEval_73_smallest_change", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers, find the minimum number of elements that\n// need to be changed to make the vector palindromic. A palindromic vector is a vector that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long> arr) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_73_smallest_change.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3, (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3, (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nlong smallest_change(std::vector<long> arr) {\n    int n = arr.size();\n    int changes = 0;\n\n    // Two-pointer technique to check for differences and count the changes needed\n    for(int i = 0, j = n - 1; i < j; ++i, --j) {\n        if(arr[i] != arr[j]) {\n            ++changes;\n        }\n    }\n\n    return changes;\n}\n\nint main() {\n    assert(smallest_change({1, 2, 3, 5, 4, 7, 9, 6}) == 4);\n    assert(smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert(smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert(smallest_change({1, 2, 3, 3, 2, 1}) == 0);\n    assert(smallest_change({1, 3, 5, 3, 1}) == 0);\n\n    std::cout << \"All test cases pass.\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_73_smallest_change"}
{"name": "HumanEval_74_total_match", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts two vectors of strings and returns the vector that has \n// total number of chars in the all strings of the vector less than the other vector.\n// if the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_74_total_match.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()), (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>())) == (std::vector<std::string>()));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Function that accepts two vectors of strings and returns the vector that has\n// total number of chars in all the strings of the vector less than the other vector.\n// If the two vectors have the same number of chars, return the first vector.\n// Examples\n// >>> total_match((std::vector<std::string>()), (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\", (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string> lst2) {\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n\n    for (const auto &str : lst1) {\n        total_chars_lst1 += str.size();\n    }\n\n    for (const auto &str : lst2) {\n        total_chars_lst2 += str.size();\n    }\n\n    if (total_chars_lst1 <= total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nint main() {\n    assert((total_match({}, {}) == std::vector<std::string>{}));\n    assert((total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) == std::vector<std::string>{\"hI\", \"Hi\"}));\n    assert((total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) == std::vector<std::string>{\"hi\", \"admin\"}));\n    assert((total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) == std::vector<std::string>{\"hI\", \"hi\", \"hi\"}));\n    assert((total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) == std::vector<std::string>{\"4\"}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThe `total_match` function calculates the total number of characters in each vector of strings and returns the one with fewer characters. If both have the same number of characters, it returns the first vector. The `main` function includes test cases to verify the correctness of the function.", "task_id": "HumanEval_74_total_match"}
{"name": "HumanEval_75_is_multiply_prime", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime((30))\n// (true)\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(long a) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_75_is_multiply_prime.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_multiply_prime;\n    assert(candidate((5)) == (false));\n    assert(candidate((30)) == (true));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (false));\n    assert(candidate((125)) == (true));\n    assert(candidate((105)) == (true));\n    assert(candidate((126)) == (false));\n    assert(candidate((729)) == (false));\n    assert(candidate((891)) == (false));\n    assert(candidate((1001)) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\nusing namespace std;\n\n// Function to check if a number is prime\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Function to generate a list of prime numbers less than 100\nvector<int> generate_primes() {\n    vector<int> primes;\n    for (int i = 2; i < 100; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\n// Function to check if the given number is the multiplication of 3 prime numbers\nbool is_multiply_prime(long a) {\n    vector<int> primes = generate_primes();\n    int n = primes.size();\n    \n    // Check if the number can be expressed as a product of three prime numbers\n    for (int i = 0; i < n; ++i) {\n        for (int j = i; j < n; ++j) {\n            for (int k = j; k < n; ++k) {\n                if (primes[i] * primes[j] * primes[k] == a) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\n// Testing the function\nint main() {\n    assert(is_multiply_prime(30) == true);\n    assert(is_multiply_prime(60) == true);\n    assert(is_multiply_prime(100) == false);\n    assert(is_multiply_prime(2*3*7) == true);\n    assert(is_multiply_prime(2*3*5*7) == false); // This should return false because the product is of 4 primes\n    assert(is_multiply_prime(2*3*2) == false); // This should return false because 2 is repeated\n    \n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_75_is_multiply_prime"}
{"name": "HumanEval_76_is_simple_power", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_76_is_simple_power.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\nusing namespace std;\n\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power((1), (4))\n// (true)\n// >>> is_simple_power((2), (2))\n// (true)\n// >>> is_simple_power((8), (2))\n// (true)\n// >>> is_simple_power((3), (2))\n// (false)\n// >>> is_simple_power((3), (1))\n// (false)\n// >>> is_simple_power((5), (3))\n// (false)\nbool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n    }\n    if (n == 1) {\n        return x == 1;\n    }\n    if (n == 0 || x <= 0) {\n        return false;\n    }\n\n    long currentPower = 1;\n    while (currentPower < x) {\n        currentPower *= n;\n        if (currentPower == x) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nint main() {\n    assert(is_simple_power(1, 4) == true);\n    assert(is_simple_power(2, 2) == true);\n    assert(is_simple_power(8, 2) == true);\n    assert(is_simple_power(3, 2) == false);\n    assert(is_simple_power(3, 1) == false);\n    assert(is_simple_power(5, 3) == false);\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_76_is_simple_power"}
{"name": "HumanEval_77_iscube", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_77_iscube.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Write a function that takes an integer a and returns true \n// if this integer is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n// (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>> iscube((180))\n// (false)\nbool iscube(long a) {\n    // Calculate the cube root of the absolute value of a\n    double cubeRoot = cbrt(static_cast<double>(a));\n    // Round the cube root to the nearest integer\n    long roundedCubeRoot = round(cubeRoot);\n    // Check if the cube of this rounded cube root equals the original number\n    return roundedCubeRoot * roundedCubeRoot * roundedCubeRoot == a;\n}\n\nint main() {\n    // Test cases\n    assert(iscube(1) == true);\n    assert(iscube(2) == false);\n    assert(iscube(-1) == true);\n    assert(iscube(64) == true);\n    assert(iscube(0) == true);\n    assert(iscube(180) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_77_iscube"}
{"name": "HumanEval_78_hex_key", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key((\"AB\"))\n// (1)\n// >>> hex_key((\"1077E\"))\n// (2)\n// >>> hex_key((\"ABED1A33\"))\n// (4)\n// >>> hex_key((\"123456789ABCDEF0\"))\n// (6)\n// >>> hex_key((\"2020\"))\n// (2)\nlong hex_key(std::string num) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_78_hex_key.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = hex_key;\n    assert(candidate((\"AB\")) == (1));\n    assert(candidate((\"1077E\")) == (2));\n    assert(candidate((\"ABED1A33\")) == (4));\n    assert(candidate((\"2020\")) == (2));\n    assert(candidate((\"123456789ABCDEF0\")) == (6));\n    assert(candidate((\"112233445566778899AABBCCDDEEFF00\")) == (12));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <iostream>\n#include <unordered_set>\n#include <string>\n\nlong hex_key(std::string num) {\n    // Set of valid prime hexadecimal digits\n    std::unordered_set<char> prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'};\n    \n    // Variable to count the prime hexadecimal digits\n    long prime_count = 0;\n    \n    // Loop through each character in the string\n    for (char c : num) {\n        // Check if the character is in the prime hex digits set\n        if (prime_hex_digits.find(c) != prime_hex_digits.end()) {\n            // Increment the count if it is a prime hex digit\n            prime_count++;\n        }\n    }\n    \n    // Return the total count of prime hex digits\n    return prime_count;\n}\n\nint main() {\n    // Test cases\n    assert(hex_key(\"AB\") == 1);\n    assert(hex_key(\"1077E\") == 2);\n    assert(hex_key(\"ABED1A33\") == 4);\n    assert(hex_key(\"123456789ABCDEF0\") == 6);\n    assert(hex_key(\"2020\") == 2);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_78_hex_key"}
{"name": "HumanEval_79_decimal_to_binary", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_79_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\nstd::string decimal_to_binary(long decimal) {\n    if (decimal == 0) {\n        return \"db0db\";\n    }\n\n    std::string binary;\n    while (decimal > 0) {\n        binary += (decimal % 2 == 0) ? '0' : '1';\n        decimal /= 2;\n    }\n\n    // Reverse the string to get the correct binary representation\n    std::reverse(binary.begin(), binary.end());\n\n    return \"db\" + binary + \"db\";\n}\n\nint main() {\n    // Test cases\n    assert(decimal_to_binary(15) == \"db1111db\");\n    assert(decimal_to_binary(32) == \"db100000db\");\n    assert(decimal_to_binary(0) == \"db0db\");\n    assert(decimal_to_binary(1) == \"db1db\");\n    assert(decimal_to_binary(255) == \"db11111111db\");\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_79_decimal_to_binary"}
{"name": "HumanEval_80_is_happy", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// Your task is to check if the string is hapcpp or not.\n// A string is hapcpp if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_80_is_happy.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// You are given a string s.\n// Your task is to check if the string is happy or not.\n// A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy((\"a\"))\n// (false)\n// >>> is_happy((\"aa\"))\n// (false)\n// >>> is_happy((\"abcd\"))\n// (true)\n// >>> is_happy((\"aabb\"))\n// (false)\n// >>> is_happy((\"adb\"))\n// (true)\n// >>> is_happy((\"xyy\"))\n// (false)\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n < 3) return false;\n    \n    for (int i = 0; i < n - 2; ++i) {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nint main() {\n    assert(is_happy(\"a\") == false);\n    assert(is_happy(\"aa\") == false);\n    assert(is_happy(\"abcd\") == true);\n    assert(is_happy(\"aabb\") == false);\n    assert(is_happy(\"adb\") == true);\n    assert(is_happy(\"xyy\") == false);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_80_is_happy"}
{"name": "HumanEval_81_numerical_letter_grade", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_81_numerical_letter_grade.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f}))) == (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2f}))) == (std::vector<std::string>({(std::string)\"D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5f}))) == (std::vector<std::string>({(std::string)\"D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (std::vector<std::string>({(std::string)\"E\"})));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0f, (float)0.7f}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"D-\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a vector of GPAs for some students and you have to write \n// a function that can output a vector of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0f, (float)3, (float)1.7f, (float)2, (float)3.5f})))\n// (std::vector<std::string>({(std::string)\"A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades) {\n    std::vector<std::string> letter_grades;\n\n    for (float gpa : grades) {\n        if (gpa == 4.0f) {\n            letter_grades.push_back(\"A+\");\n        } else if (gpa > 3.7f) {\n            letter_grades.push_back(\"A\");\n        } else if (gpa > 3.3f) {\n            letter_grades.push_back(\"A-\");\n        } else if (gpa > 3.0f) {\n            letter_grades.push_back(\"B+\");\n        } else if (gpa > 2.7f) {\n            letter_grades.push_back(\"B\");\n        } else if (gpa > 2.3f) {\n            letter_grades.push_back(\"B-\");\n        } else if (gpa > 2.0f) {\n            letter_grades.push_back(\"C+\");\n        } else if (gpa > 1.7f) {\n            letter_grades.push_back(\"C\");\n        } else if (gpa > 1.3f) {\n            letter_grades.push_back(\"C-\");\n        } else if (gpa > 1.0f) {\n            letter_grades.push_back(\"D+\");\n        } else if (gpa > 0.7f) {\n            letter_grades.push_back(\"D\");\n        } else if (gpa > 0.0f) {\n            letter_grades.push_back(\"D-\");\n        } else if (gpa == 0.0f) {\n            letter_grades.push_back(\"E\");\n        }\n    }\n\n    return letter_grades;\n}\n\nint main() {\n    std::vector<std::string> result = numerical_letter_grade({4.0f, 3.0f, 1.7f, 2.0f, 3.5f});\n    std::vector<std::string> expected = {\"A+\", \"B\", \"C-\", \"C\", \"A-\"};\n    assert(result == expected);\n    return 0;\n}\n```", "task_id": "HumanEval_81_numerical_letter_grade"}
{"name": "HumanEval_82_prime_length", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length((\"Hello\"))\n// (true)\n// >>> prime_length((\"abcdcba\"))\n// (true)\n// >>> prime_length((\"kittens\"))\n// (true)\n// >>> prime_length((\"orange\"))\n// (false)\nbool prime_length(std::string string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_82_prime_length.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = prime_length;\n    assert(candidate((\"Hello\")) == (true));\n    assert(candidate((\"abcdcba\")) == (true));\n    assert(candidate((\"kittens\")) == (true));\n    assert(candidate((\"orange\")) == (false));\n    assert(candidate((\"wow\")) == (true));\n    assert(candidate((\"world\")) == (true));\n    assert(candidate((\"MadaM\")) == (true));\n    assert(candidate((\"Wow\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"HI\")) == (true));\n    assert(candidate((\"go\")) == (true));\n    assert(candidate((\"gogo\")) == (false));\n    assert(candidate((\"aaaaaaaaaaaaaaa\")) == (false));\n    assert(candidate((\"Madam\")) == (true));\n    assert(candidate((\"M\")) == (false));\n    assert(candidate((\"0\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}\n\nbool prime_length(std::string string) {\n    int length = string.size();\n    return is_prime(length);\n}\n\nint main() {\n    assert(prime_length(\"Hello\") == true);\n    assert(prime_length(\"abcdcba\") == true);\n    assert(prime_length(\"kittens\") == true);\n    assert(prime_length(\"orange\") == false);\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_82_prime_length"}
{"name": "HumanEval_83_starts_one_ends", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_83_starts_one_ends.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nlong starts_one_ends(long n) {\n    if (n == 1) {\n        return 1; // Only 1 is a valid 1-digit integer that starts or ends with 1\n    }\n    // Calculate the total numbers of (n-1) digit numbers\n    long total_n_minus_1_digits = pow(10, n - 1);\n    \n    // Total valid numbers:\n    // * There are 9 * total_n_minus_1_digits numbers starting with 1\n    // * There are 9 * total_n_minus_1_digits numbers ending with 1\n    // * Subtract numbers which are counted twice: starting and ending with 1\n    // * There are total_n_minus_1_digits such numbers\n    long count = 9 * total_n_minus_1_digits + 9 * total_n_minus_1_digits - total_n_minus_1_digits;\n    \n    return count;\n}\n\nint main() {\n    // Some test cases\n    assert(starts_one_ends(1) == 1);\n    assert(starts_one_ends(2) == 18);\n    assert(starts_one_ends(3) == 180);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_83_starts_one_ends"}
{"name": "HumanEval_84_solve", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 ≤ N ≤ 10000.\n// Output:\n// a string of binary number\nstd::string solve(long N) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_84_solve.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((1000)) == (\"1\"));\n    assert(candidate((150)) == (\"110\"));\n    assert(candidate((147)) == (\"1100\"));\n    assert(candidate((333)) == (\"1001\"));\n    assert(candidate((963)) == (\"10010\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve((1000))\n// (\"1\")\n// >>> solve((150))\n// (\"110\")\n// >>> solve((147))\n// (\"1100\")\n// Variables:\n// @N integer\n// Constraints: 0 ≤ N ≤ 10000.\n// Output:\n// a string of binary number\n\nstd::string solve(long N) {\n    int sumOfDigits = 0;\n    while (N > 0) {\n        sumOfDigits += N % 10;\n        N /= 10;\n    }\n    \n    std::string binaryResult = std::bitset<32>(sumOfDigits).to_string();\n    // remove leading zeros\n    size_t pos = binaryResult.find(\"1\");\n    if (pos != std::string::npos) {\n        binaryResult = binaryResult.substr(pos);\n    } else {\n        binaryResult = \"0\"; // if all bits are zero, return \"0\"\n    }\n    \n    return binaryResult;\n}\n\nint main() {\n    assert(solve(1000) == \"1\");\n    assert(solve(150) == \"110\");\n    assert(solve(147) == \"1100\");\n    \n    return 0;\n}\n```", "task_id": "HumanEval_84_solve"}
{"name": "HumanEval_85_add", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_85_add.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4, (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4, (long)4, (long)6, (long)8}))) == (12));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Given a non-empty vector of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\nlong add(std::vector<long> lst) {\n    long sum = 0;\n    // Iterate through the vector, consider only odd indices\n    for (size_t i = 1; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    // Test cases\n    assert(add((std::vector<long>({(long)4, (long)2, (long)6, (long)7}))) == 2);\n    assert(add((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == 6);\n    assert(add((std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)8}))) == 8);\n    assert(add((std::vector<long>({(long)0, (long)2, (long)4, (long)6, (long)8, (long)10, (long)12, (long)14}))) == 32);\n    assert(add((std::vector<long>({(long)1}))) == 0);\n    std::cout << \"All test cases pass.\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_85_add"}
{"name": "HumanEval_86_anti_shuffle", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_86_anti_shuffle.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = anti_shuffle;\n    assert(candidate((\"Hi\")) == (\"Hi\"));\n    assert(candidate((\"hello\")) == (\"ehllo\"));\n    assert(candidate((\"number\")) == (\"bemnru\"));\n    assert(candidate((\"abcd\")) == (\"abcd\"));\n    assert(candidate((\"Hello World!!!\")) == (\"Hello !!!Wdlor\"));\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"Hi. My name is Mister Robot. How are you?\")) == (\".Hi My aemn is Meirst .Rboot How aer ?ouy\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle((\"Hi\"))\n// (\"Hi\")\n// >>> anti_shuffle((\"hello\"))\n// (\"ehllo\")\n// >>> anti_shuffle((\"Hello World!!!\"))\n// (\"Hello !!!Wdlor\")\nstd::string anti_shuffle(std::string s) {\n    std::stringstream ss(s);\n    std::string result, word;\n\n    // Process each word in the input string\n    while (ss >> word) {\n        // Sort the characters of the word\n        std::sort(word.begin(), word.end());\n        \n        // Add sorted word to the result string\n        if (!result.empty()) {\n            result += \" \";\n        }\n        result += word;\n    }\n\n    // Handle any additional spaces by comparing lengths\n    if (result.size() < s.size()) {\n        result += std::string(s.size() - result.size(), ' ');\n    }\n\n    return result;\n}\n\nint main() {\n    assert(anti_shuffle(\"Hi\") == \"Hi\");\n    assert(anti_shuffle(\"hello\") == \"ehllo\");\n    assert(anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    \n    std::string test1 = \"this is a test\";\n    std::string test2 = \"sorting words!\";\n    std::string test3 = \"C++ Programming!\";\n    \n    std::cout << anti_shuffle(test1) << std::endl; // \"hist is a estt\"\n    std::cout << anti_shuffle(test2) << std::endl; // \"ginorst !dorsw\"\n    std::cout << anti_shuffle(test3) << std::endl; // \"++C Paggimmnorr!\"\n\n    return 0;\n}\n```", "task_id": "HumanEval_86_anti_shuffle"}
{"name": "HumanEval_87_get_row", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_87_get_row.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1, 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3, 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2, 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3, 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4, 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5, 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6, 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})), (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cassert>\n#include <bits/stdc++.h>\n\n// You are given a 2 dimensional data, as a nested vectors,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the vector,\n// and return vector of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1, 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2, 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()), (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(), (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long, long>)std::make_tuple(2, 2)}))\n\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>> lst, long x) {\n    std::vector<std::tuple<long, long>> result;\n    for (long i = 0; i < lst.size(); ++i) {\n        for (long j = 0; j < lst[i].size(); ++j) {\n            if (lst[i][j] == x) {\n                result.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n    \n    // Sort first by row in ascending order, then by column in descending order within the same row\n    std::sort(result.begin(), result.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        if (std::get<0>(a) == std::get<0>(b)) {\n            return std::get<1>(a) > std::get<1>(b);\n        }\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    \n    return result;\n}\n\nint main() {\n    std::vector<std::vector<long>> lst1 = {{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}};\n    long x1 = 1;\n    std::vector<std::tuple<long, long>> expected1 = {std::make_tuple(0, 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2, 0)};\n    assert(get_row(lst1, x1) == expected1);\n\n    std::vector<std::vector<long>> lst2 = {};\n    long x2 = 1;\n    std::vector<std::tuple<long, long>> expected2 = {};\n    assert(get_row(lst2, x2) == expected2);\n\n    std::vector<std::vector<long>> lst3 = {{}, {1}, {1, 2, 3}};\n    long x3 = 3;\n    std::vector<std::tuple<long, long>> expected3 = {std::make_tuple(2", "task_id": "HumanEval_87_get_row"}
{"name": "HumanEval_88_sort_array", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of non-negative integers, return a cocpp of the given vector after sorting,\n// you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given vector.\n// Examples:\n// >>> sort_array((std::vector<long>()))\n// (std::vector<long>())\n// >>> sort_array((std::vector<long>({(long)5})))\n// (std::vector<long>({(long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})))\n// (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0}))\nstd::vector<long> sort_array(std::vector<long> array) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_88_sort_array.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5}))) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2, (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15, (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0, (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21, (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14, (long)11})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::vector<long> sort_array(std::vector<long> array) {\n    // Base condition check\n    if (array.empty()) {\n        return array;\n    }\n\n    // Calculate the sum of the first and last index value\n    long sum = array[0] + array[array.size() - 1];\n\n    // Create a copy of the array to sort\n    std::vector<long> sorted_array = array;\n\n    // Sort the array in ascending order if sum is odd, else descending order\n    if (sum % 2 == 1) {\n        std::sort(sorted_array.begin(), sorted_array.end());\n    } else {\n        std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n    }\n\n    return sorted_array;\n}\n\nint main() {\n    // Test cases\n    assert((sort_array(std::vector<long>()) == std::vector<long>()));\n    assert((sort_array(std::vector<long>({(long)5})) == std::vector<long>({(long)5})));\n    assert((sort_array(std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5})) == std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert((sort_array(std::vector<long>({(long)2, (long)4, (long)3, (long)0, (long)1, (long)5, (long)6})) == std::vector<long>({(long)6, (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_88_sort_array"}
{"name": "HumanEval_89_encrypt", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt((\"hi\"))\n// (\"lm\")\n// >>> encrypt((\"asdfghjkl\"))\n// (\"ewhjklnop\")\n// >>> encrypt((\"gf\"))\n// (\"kj\")\n// >>> encrypt((\"et\"))\n// (\"ix\")\nstd::string encrypt(std::string s) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_89_encrypt.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::string encrypt(std::string s) {\n    std::string result = \"\";\n    for (char c : s) {\n        if (isalpha(c)) {\n            // Shift character by 4 places forward in the alphabet\n            char offset = 'a';\n            char new_char = (c - offset + 4) % 26 + offset;\n            result += new_char;\n        } else {\n            // If the character is not an alphabet, just add it directly\n            result += c;\n        }\n    }\n    return result;\n}\n\nint main() {\n    assert(encrypt(\"hi\") == \"lm\");\n    assert(encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert(encrypt(\"gf\") == \"kj\");\n    assert(encrypt(\"et\") == \"ix\");\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```\n\nIn this code, the `encrypt` function shifts each character in the string `s` forward by 4 positions in the alphabet. The `main` function contains test cases to verify the correctness of the encryption function.", "task_id": "HumanEval_89_encrypt"}
{"name": "HumanEval_90_next_smallest", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the vector.\n// Return None if there is no such element.\n// >>> next_smallest((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// 2\n// >>> next_smallest((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2})))\n// 2\n// >>> next_smallest((std::vector<long>()))\n// std::nullopt\n// >>> next_smallest((std::vector<long>({(long)1, (long)1})))\n// std::nullopt\nstd::optional<long> next_smallest(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_90_next_smallest.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == 2);\n    assert(candidate((std::vector<long>({(long)5, (long)1, (long)4, (long)3, (long)2}))) == 2);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)0}))) == 1);\n    assert(candidate((std::vector<long>({(long)1, (long)1}))) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)-35, (long)34, (long)12, (long)-45}))) == -35);\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n#include <optional>\n\nstd::optional<long> next_smallest(std::vector<long> lst) {\n    if(lst.size() < 2) return std::nullopt;\n\n    std::set<long> unique_elements(lst.begin(), lst.end());\n\n    if(unique_elements.size() < 2) return std::nullopt;\n\n    auto it = unique_elements.begin();\n    std::advance(it, 1);\n\n    return *it;\n}\n\n// Test cases\nint main() {\n    assert(next_smallest(std::vector<long>({1, 2, 3, 4, 5})) == 2);\n    assert(next_smallest(std::vector<long>({5, 1, 4, 3, 2})) == 2);\n    assert(next_smallest(std::vector<long>()) == std::nullopt);\n    assert(next_smallest(std::vector<long>({1, 1})) == std::nullopt);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_90_next_smallest"}
{"name": "HumanEval_91_is_bored", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_91_is_bored.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\")) == (0));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>> is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\nlong is_bored(std::string S) {\n    std::istringstream stream(S);\n    std::string segment;\n    long count = 0;\n    std::string delimiters = \".?!\";\n    \n    while (std::getline(stream, segment)) {\n        std::stringstream iss(segment);\n        std::string firstWord;\n        iss >> firstWord;\n        if (firstWord == \"I\") {\n            count++;\n        }\n        // remove delimiter\n        size_t pos = S.find_first_of(delimiters);\n        if (pos != std::string::npos) {\n            S = S.substr(pos + 1);\n        }\n        stream.str(S);\n        stream.clear();\n    }\n\n    return count;\n}\n\nint main() {\n    assert(is_bored(\"Hello world\") == 0);\n    assert(is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n    assert(is_bored(\"I am happy. You are sad. I am excited!\") == 2);\n    assert(is_bored(\"We are friends. They are family. He is a good person.\") == 0);\n    assert(is_bored(\"\") == 0);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_91_is_bored"}
{"name": "HumanEval_92_any_int", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int((float(5)), (float(2)), (float(7)))\n// (true)\n// >>> any_int((float(3)), (float(2)), (float(2)))\n// (false)\n// >>> any_int((float(3)), (float(-2)), (float(1)))\n// (true)\n// >>> any_int((3.6f), (-2.2f), (float(2)))\n// (false)\nbool any_int(float x, float y, float z) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_92_any_int.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = any_int;\n    assert(candidate((float(2)), (float(3)), (float(1))) == (true));\n    assert(candidate((2.5f), (float(2)), (float(3))) == (false));\n    assert(candidate((1.5f), (float(5)), (3.5f)) == (false));\n    assert(candidate((float(2)), (float(6)), (float(2))) == (false));\n    assert(candidate((float(4)), (float(2)), (float(2))) == (true));\n    assert(candidate((2.2f), (2.2f), (2.2f)) == (false));\n    assert(candidate((float(-4)), (float(6)), (float(2))) == (true));\n    assert(candidate((float(2)), (float(1)), (float(1))) == (true));\n    assert(candidate((float(3)), (float(4)), (float(7))) == (true));\n    assert(candidate((3.0f), (float(4)), (float(7))) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <cmath>\n\nbool is_integer(float num) {\n    return std::floor(num) == num;\n}\n\nbool any_int(float x, float y, float z) {\n    // Check if all numbers are integers\n    if (is_integer(x) && is_integer(y) && is_integer(z)) {\n        // Check if any one number is the sum of the other two\n        if (x == y + z || y == x + z || z == x + y) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Test cases\nint main() {\n    assert(any_int(float(5), float(2), float(7)) == true);\n    assert(any_int(float(3), float(2), float(2)) == false);\n    assert(any_int(float(3), float(-2), float(1)) == true);\n    assert(any_int(3.6f, -2.2f, float(2)) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis code defines the function `any_int` which takes three floating-point numbers and checks if they are integers. If they are integers, it then checks if one of the numbers is equal to the sum of the other two. It also includes test cases to verify the correctness of the function.", "task_id": "HumanEval_92_any_int"}
{"name": "HumanEval_93_encode", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n// (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_93_encode.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\")) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n    assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Function to check if a character is a vowel\nbool isVowel(char ch) {\n    ch = tolower(ch);\n    return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';\n}\n\n// Function to replace vowel with the letter that appears 2 places ahead\nchar replaceVowel(char ch) {\n    ch = tolower(ch);\n    switch(ch) {\n        case 'a': return 'c';\n        case 'e': return 'g';\n        case 'i': return 'k';\n        case 'o': return 'q';\n        case 'u': return 'w';\n        default: return ch;\n    }\n}\n\n// Function to encode the message\nstd::string encode(std::string message) {\n    std::string result;\n\n    for (char ch : message) {\n        if (isalpha(ch)) {\n            // Check if the character is a vowel, if yes, replace it\n            if (isVowel(ch)) {\n                ch = replaceVowel(ch);\n            }\n            // Swap the case of the character\n            if (islower(ch)) {\n                ch = toupper(ch);\n            } else {\n                ch = tolower(ch);\n            }\n        }\n        result += ch;\n    }\n\n    return result;\n}\n\nint main() {\n    // Test cases\n    assert(encode(\"test\") == \"TGST\");\n    assert(encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert(encode(\"HELLO\") == \"hGQQq\");\n    assert(encode(\"world\") == \"WqRLD\");\n\n    // Output some results\n    std::cout << encode(\"test\") << std::endl;\n    std::cout << encode(\"This is a message\") << std::endl;\n    std::cout << encode(\"HELLO\") << std::endl;\n    std::cout << encode(\"world\") << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_93_encode"}
{"name": "HumanEval_94_skjkasdkd", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3})))\n// (10)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1})))\n// (25)\n// >>> skjkasdkd((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3})))\n// (13)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6})))\n// (11)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21})))\n// (3)\n// >>> skjkasdkd((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7})))\n// (7)\nlong skjkasdkd(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_94_skjkasdkd.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = skjkasdkd;\n    assert(candidate((std::vector<long>({(long)0, (long)3, (long)2, (long)1, (long)3, (long)5, (long)7, (long)4, (long)5, (long)5, (long)5, (long)2, (long)181, (long)32, (long)4, (long)32, (long)3, (long)2, (long)32, (long)324, (long)4, (long)3}))) == (10));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)1, (long)8, (long)2, (long)4597, (long)2, (long)1, (long)3, (long)40, (long)1, (long)2, (long)1, (long)2, (long)4, (long)2, (long)5, (long)1}))) == (25));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)1, (long)32, (long)5107, (long)34, (long)83278, (long)109, (long)163, (long)23, (long)2323, (long)32, (long)30, (long)1, (long)9, (long)3}))) == (13));\n    assert(candidate((std::vector<long>({(long)0, (long)724, (long)32, (long)71, (long)99, (long)32, (long)6, (long)0, (long)5, (long)91, (long)83, (long)0, (long)5, (long)6}))) == (11));\n    assert(candidate((std::vector<long>({(long)0, (long)81, (long)12, (long)3, (long)1, (long)21}))) == (3));\n    assert(candidate((std::vector<long>({(long)0, (long)8, (long)1, (long)2, (long)1, (long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)8191}))) == (19));\n    assert(candidate((std::vector<long>({(long)8191, (long)123456, (long)127, (long)7}))) == (19));\n    assert(candidate((std::vector<long>({(long)127, (long)97, (long)8192}))) == (10));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Function to check if a number is prime\nbool isPrime(long num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n\n    if (num % 2 == 0 || num % 3 == 0) return false;\n\n    for (long i = 5; i * i <= num; i = i + 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n\n    return true;\n}\n\n// Function to get the sum of digits of a number\nint sumOfDigits(long num) {\n    int sum = 0;\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nlong skjkasdkd(std::vector<long> lst) {\n    long largestPrime = -1;\n\n    for (long num : lst) {\n        if (isPrime(num) && num > largestPrime) {\n            largestPrime = num;\n        }\n    }\n\n    if (largestPrime == -1) return 0; // In case no prime number is found\n\n    return sumOfDigits(largestPrime);\n}\n\nint main() {\n    assert(skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3}) == 10);\n    assert(skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}) == 25);\n    assert(skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}) == 13);\n    assert(skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}) == 11);\n    assert(skjkasdkd({0, 81, 12, 3, 1, 21}) == 3);\n    assert(skjkasdkd({0, 8, 1, 2, 1, 7}) == 7);\n\n    return 0;\n}\n```", "task_id": "HumanEval_94_skjkasdkd"}
{"name": "HumanEval_95_check_dict_case", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string> dict) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_95_check_dict_case.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>())) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nbool check_lower_case(const std::string &key) {\n    for (char ch : key) {\n        if (!islower(ch)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool check_upper_case(const std::string &key) {\n    for (char ch : key) {\n        if (!isupper(ch)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nbool check_dict_case(std::map<std::string, std::string> dict) {\n    if (dict.empty()) {\n        return false;\n    }\n\n    bool is_all_lower = true, is_all_upper = true;\n\n    for (const auto &pair : dict) {\n        const std::string &key = pair.first;\n        if (is_all_lower && !check_lower_case(key)) {\n            is_all_lower = false;\n        }\n        if (is_all_upper && !check_upper_case(key)) {\n            is_all_upper = false;\n        }\n    }\n\n    return is_all_lower || is_all_upper;\n}\n\nint main() {\n    assert(check_dict_case({{\"a\", \"apple\"}, {\"b\", \"banana\"}}) == true);\n    assert(check_dict_case({{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}) == false);\n    assert(check_dict_case({{\"a\", \"apple\"}, {\"8\", \"banana\"}, {\"a\", \"apple\"}}) == false);\n    assert(check_dict_case({{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}) == false);\n    assert(check_dict_case({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}) == true);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThe above code defines the function `check_dict_case` which checks if all keys in the provided map are either all in lower case or all in upper case as per the requirements in the docstring. The main function runs several test cases to ensure the function behaves correctly.", "task_id": "HumanEval_95_check_dict_case"}
{"name": "HumanEval_96_count_up_to", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that takes an non-negative integer and returns a vector of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to((5))\n// (std::vector<long>({(long)2, (long)3}))\n// >>> count_up_to((11))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7}))\n// >>> count_up_to((0))\n// (std::vector<long>())\n// >>> count_up_to((20))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19}))\n// >>> count_up_to((1))\n// (std::vector<long>())\n// >>> count_up_to((18))\n// (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17}))\nstd::vector<long> count_up_to(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_96_count_up_to.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5)) == (std::vector<long>({(long)2, (long)3})));\n    assert(candidate((6)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((7)) == (std::vector<long>({(long)2, (long)3, (long)5})));\n    assert(candidate((10)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7})));\n    assert(candidate((0)) == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19})));\n    assert(candidate((1)) == (std::vector<long>()));\n    assert(candidate((18)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((47)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43})));\n    assert(candidate((101)) == (std::vector<long>({(long)2, (long)3, (long)5, (long)7, (long)11, (long)13, (long)17, (long)19, (long)23, (long)29, (long)31, (long)37, (long)41, (long)43, (long)47, (long)53, (long)59, (long)61, (long)67, (long)71, (long)73, (long)79, (long)83, (long)89, (long)97})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nbool is_prime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstd::vector<long> count_up_to(long n) {\n    std::vector<long> primes;\n    for (int i = 2; i < n; ++i) {\n        if (is_prime(i)) {\n            primes.push_back(i);\n        }\n    }\n    return primes;\n}\n\nint main() {\n    assert((count_up_to(5) == std::vector<long>({2, 3})));\n    assert((count_up_to(11) == std::vector<long>({2, 3, 5, 7})));\n    assert((count_up_to(0) == std::vector<long>()));\n    assert((count_up_to(20) == std::vector<long>({2, 3, 5, 7, 11, 13, 17, 19})));\n    assert((count_up_to(1) == std::vector<long>()));\n    assert((count_up_to(18) == std::vector<long>({2, 3, 5, 7, 11, 13, 17})));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_96_count_up_to"}
{"name": "HumanEval_97_multiply", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_97_multiply.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = multiply;\n    assert(candidate((148), (412)) == (16));\n    assert(candidate((19), (28)) == (72));\n    assert(candidate((2020), (1851)) == (0));\n    assert(candidate((14), (-15)) == (20));\n    assert(candidate((76), (67)) == (42));\n    assert(candidate((17), (27)) == (49));\n    assert(candidate((0), (1)) == (0));\n    assert(candidate((0), (0)) == (0));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply((148), (412))\n// (16)\n// >>> multiply((19), (28))\n// (72)\n// >>> multiply((2020), (1851))\n// (0)\n// >>> multiply((14), (-15))\n// (20)\nlong multiply(long a, long b) {\n    // Get the unit digit of a and b\n    int unit_digit_a = abs(a) % 10;\n    int unit_digit_b = abs(b) % 10;\n    \n    // Calculate the product of the unit digits\n    return unit_digit_a * unit_digit_b;\n}\n\n// Function to run tests\nvoid test() {\n    assert(multiply(148, 412) == 16);\n    assert(multiply(19, 28) == 72);\n    assert(multiply(2020, 1851) == 0);\n    assert(multiply(14, -15) == 20);\n    assert(multiply(0, 0) == 0); // additional test case\n    assert(multiply(-123, 456) == 18); // additional test case\n    assert(multiply(-100, 100) == 0); // additional test case\n    std::cout << \"All test cases passed!\" << std::endl;\n}\n\nint main() {\n    test();\n    return 0;\n}\n```", "task_id": "HumanEval_97_multiply"}
{"name": "HumanEval_98_count_upper", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_98_count_upper.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"EEEE\")) == (2));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n    std::set<char> uppercase_vowels = {'A', 'E', 'I', 'O', 'U'};\n    long count = 0;\n    \n    for (size_t i = 0; i < s.length(); i += 2) {\n        if (uppercase_vowels.find(s[i]) != uppercase_vowels.end()) {\n            count++;\n        }\n    }\n    \n    return count;\n}\n\nint main() {\n    assert(count_upper(\"aBCdEf\") == 1);\n    assert(count_upper(\"abcdefg\") == 0);\n    assert(count_upper(\"dBBE\") == 0);\n    assert(count_upper(\"AaEeIiOoUu\") == 5);\n    assert(count_upper(\"A\") == 1);\n    assert(count_upper(\"a\") == 0);\n    assert(count_upper(\"\") == 0);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_98_count_upper"}
{"name": "HumanEval_99_closest_integer", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nlong closest_integer(std::string value) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_99_closest_integer.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = closest_integer;\n    assert(candidate((\"10\")) == (10));\n    assert(candidate((\"14.5\")) == (15));\n    assert(candidate((\"-15.5\")) == (-16));\n    assert(candidate((\"15.3\")) == (15));\n    assert(candidate((\"0\")) == (0));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer((\"10\"))\n// (10)\n// >>> closest_integer((\"15.3\"))\n// (15)\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\n\nlong closest_integer(std::string value) {\n    // Convert the string to a double\n    double num = std::stod(value);\n    \n    // Find the nearest integer\n    long lower = std::floor(num); // nearest lower integer\n    long upper = std::ceil(num);  // nearest upper integer\n\n    if (num - lower == upper - num) {\n        // Equidistant case, round away from zero\n        return (num > 0) ? upper : lower;\n    }\n    else {\n        // Return the nearest integer\n        return (num - lower < upper - num) ? lower : upper;\n    }\n}\n\nint main() {\n    assert(closest_integer(\"10\") == 10);\n    assert(closest_integer(\"15.3\") == 15);\n    assert(closest_integer(\"14.5\") == 15);\n    assert(closest_integer(\"-14.5\") == -15);\n    assert(closest_integer(\"0.5\") == 1);\n    assert(closest_integer(\"-0.5\") == -1);\n    assert(closest_integer(\"2.4\") == 2);\n    assert(closest_integer(\"-2.6\") == -3);\n    assert(closest_integer(\"0\") == 0);\n\n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_99_closest_integer"}
{"name": "HumanEval_100_make_a_pile", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a vector, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile((3))\n// (std::vector<long>({(long)3, (long)5, (long)7}))\nstd::vector<long> make_a_pile(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_100_make_a_pile.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = make_a_pile;\n    assert(candidate((3)) == (std::vector<long>({(long)3, (long)5, (long)7})));\n    assert(candidate((4)) == (std::vector<long>({(long)4, (long)6, (long)8, (long)10})));\n    assert(candidate((5)) == (std::vector<long>({(long)5, (long)7, (long)9, (long)11, (long)13})));\n    assert(candidate((6)) == (std::vector<long>({(long)6, (long)8, (long)10, (long)12, (long)14, (long)16})));\n    assert(candidate((8)) == (std::vector<long>({(long)8, (long)10, (long)12, (long)14, (long)16, (long)18, (long)20, (long)22})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::vector<long> make_a_pile(long n) {\n    std::vector<long> pile;\n    \n    // Determine the change in stone count for each level\n    long increment = (n % 2 == 0) ? 2 : 2;\n\n    for (int i = 0; i < n; ++i) {\n        pile.push_back(n + i * increment);\n    }\n\n    return pile;\n}\n\nint main() {\n    // Test case\n    std::vector<long> result = make_a_pile(3);\n    std::vector<long> expected = {3, 5, 7};\n    assert(result == expected);\n    std::cout << \"Test passed!\" << std::endl;\n\n    return 0;\n}\n```\n\nThe above code includes the complete implementation of the `make_a_pile` function, which calculates the number of stones in each level according to the given criteria. It also includes a simple test case.", "task_id": "HumanEval_100_make_a_pile"}
{"name": "HumanEval_101_words_string", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a vector of the words.\n// For example:\n// >>> words_string((\"Hi, my name is John\"))\n// (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"}))\n// >>> words_string((\"One, two, three, four, five, six\"))\n// (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"}))\nstd::vector<std::string> words_string(std::string s) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_101_words_string.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n    assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"ahmed\", (std::string)\"gamal\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::vector<std::string> words_string(std::string s) {\n    std::vector<std::string> result;\n    std::string word;\n    std::stringstream ss(s);\n\n    while (ss >> word) {\n        // Remove trailing commas but preserve the word\n        word.erase(std::remove(word.end()-1, word.end(), ','), word.end());\n        result.push_back(word);\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<std::string> res1 = {\"Hi\", \"my\", \"name\", \"is\", \"John\"};\n    assert(words_string(\"Hi, my name is John\") == res1);\n\n    std::vector<std::string> res2 = {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n    assert(words_string(\"One, two, three, four, five, six\") == res2);\n\n    return 0;\n}\n```", "task_id": "HumanEval_101_words_string"}
{"name": "HumanEval_102_choose_num", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num((12), (15))\n// (14)\n// >>> choose_num((13), (12))\n// (-1)\nlong choose_num(long x, long y) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_102_choose_num.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nlong choose_num(long x, long y) {\n    if (x > y) return -1; // Return -1 if the range is invalid\n    if (y % 2 == 0) return y; // If y is even, it's the largest even number in the range\n    if ((y - 1) >= x) return y - 1; // If y is odd, check if y-1 is within the range\n    return -1; // If no even number found in the given range\n}\n\nint main() {\n    // Test cases\n    assert(choose_num(12, 15) == 14);\n    assert(choose_num(13, 12) == -1);\n    assert(choose_num(8, 10) == 10);\n    assert(choose_num(3, 5) == 4);\n    assert(choose_num(11, 11) == -1);\n    assert(choose_num(7, 7) == -1);\n    assert(choose_num(10, 20) == 20);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nExplanation:\n1. The function `choose_num` determines the largest even number in the given range [x, y].\n2. If `x > y`, it returns -1 because the range is invalid.\n3. If `y` is even, it is the largest even number in the range, and the function returns it.\n4. If `y` is odd, the function checks if `y-1` is within the range [x, y]. If it is, it returns `y-1`.\n5. If no even number is found within the range, the function returns -1.\n6. In the `main` function, several test cases are used to ensure the function works as expected.", "task_id": "HumanEval_102_choose_num"}
{"name": "HumanEval_103_rounded_avg", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_string_long{\n    std::string f0;\n    long f1;    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg((1), (5))\n// \"0b11\"\n// >>> rounded_avg((7), (5))\n// -1\n// >>> rounded_avg((10), (20))\n// \"0b1111\"\n// >>> rounded_avg((20), (33))\n// \"0b11010\"\nUnion_std_string_long rounded_avg(long n, long m) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_103_rounded_avg.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = rounded_avg;\n    assert(candidate((1), (5)) == \"0b11\");\n    assert(candidate((7), (13)) == \"0b1010\");\n    assert(candidate((964), (977)) == \"0b1111001010\");\n    assert(candidate((996), (997)) == \"0b1111100100\");\n    assert(candidate((560), (851)) == \"0b1011000010\");\n    assert(candidate((185), (546)) == \"0b101101110\");\n    assert(candidate((362), (496)) == \"0b110101101\");\n    assert(candidate((350), (902)) == \"0b1001110010\");\n    assert(candidate((197), (233)) == \"0b11010111\");\n    assert(candidate((7), (5)) == -1);\n    assert(candidate((5), (1)) == -1);\n    assert(candidate((5), (5)) == \"0b101\");\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cassert>\n#include <bits/stdc++.h>\n\nunion Union_std_string_long {\n    std::string f0;\n    long f1;    \n    Union_std_string_long(std::string _f0) : f0(_f0) {}\n    Union_std_string_long(long _f1) : f1(_f1) {}\n    ~Union_std_string_long() {}\n    bool operator==(std::string f) {\n        return f0 == f;\n    }    \n    bool operator==(long f) {\n        return f1 == f;\n    }\n};\n\nUnion_std_string_long rounded_avg(long n, long m) {\n    if (n > m) {\n        return Union_std_string_long(-1);\n    }\n    \n    long sum = 0;\n    long count = 0;\n    for (long i = n; i <= m; ++i) {\n        sum += i;\n        ++count;\n    }\n    \n    long avg = std::round(static_cast<double>(sum) / count);\n    std::string binary_rep = \"0b\" + std::bitset<64>(avg).to_string();\n    \n    // Remove leading zeros\n    binary_rep.erase(2, binary_rep.find('1', 2) - 2);\n    \n    return Union_std_string_long(binary_rep);\n}\n\nint main() {\n    assert((rounded_avg(1, 5) == \"0b11\"));\n    assert((rounded_avg(7, 5) == -1));\n    assert((rounded_avg(10, 20) == \"0b1111\"));\n    assert((rounded_avg(20, 33) == \"0b11010\"));\n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```\n\nThis complete code defines the `rounded_avg` function according to the requirements, including a `main` function to test the functionality through assertions. The `rounded_avg` function calculates the average, rounds it to the nearest integer, converts it to a binary string, and formats the output correctly.", "task_id": "HumanEval_103_rounded_avg"}
{"name": "HumanEval_104_unique_digits", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of positive integers x. return a sorted vector of all \n// elements that hasn't any even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nstd::vector<long> unique_digits(std::vector<long> x) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_104_unique_digits.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345, (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) == (std::vector<long>({(long)31, (long)135})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\n// Given a vector of positive integers x, return a sorted vector of all \n// elements that have no even digit.\n// Note: Returned vector should be sorted in increasing order.\n// For example:\n// >>> unique_digits((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\n// (std::vector<long>({(long)1, (long)15, (long)33}))\n// >>> unique_digits((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\n// (std::vector<long>())\nbool has_no_even_digit(long num) {\n    while (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) { // if digit is even\n            return false;\n        }\n        num /= 10;\n    }\n    return true;\n}\n\nstd::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long> result;\n    for (long num : x) {\n        if (has_no_even_digit(num)) {\n            result.push_back(num);\n        }\n    }\n    std::sort(result.begin(), result.end()); // sort the result in increasing order\n    return result;\n}\n\nint main() {\n    assert((unique_digits(std::vector<long>{15, 33, 1422, 1}) == std::vector<long>{1, 15, 33}));\n    assert((unique_digits(std::vector<long>{152, 323, 1422, 10}) == std::vector<long>{}));\n\n    std::vector<long> test1 = {135, 79, 313, 5791};\n    std::vector<long> result1 = unique_digits(test1);\n    for (long num : result1) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl; // Expected output: 135 313 5791 79\n\n    std::vector<long> test2 = {246, 888, 123456, 0};\n    std::vector<long> result2 = unique_digits(test2);\n    for (long num : result2) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl; // Expected output: (empty line)\n\n    return 0;\n}\n```", "task_id": "HumanEval_104_unique_digits"}
{"name": "HumanEval_105_by_length", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting vector, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"}))\n// If the vector is empty, return an empty vector:\n// >>> by_length((std::vector<long>()))\n// (std::vector<std::string>())\n// If the vector has any strange number ignore it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n// (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string> by_length(std::vector<long> arr) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_105_by_length.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\", (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3, (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9, (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"Eight\", (std::string)\"Four\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<std::string> by_length(std::vector<long> arr) {\n    // Initialize a vector of strings to map integers to their corresponding names\n    std::vector<std::string> digit_names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    \n    // Filter out integers that are not between 1 and 9\n    std::vector<int> filtered_arr;\n    for (long num : arr) {\n        if (num >= 1 && num <= 9) {\n            filtered_arr.push_back(num);\n        }\n    }\n    \n    // Sort the filtered array of digits\n    std::sort(filtered_arr.begin(), filtered_arr.end());\n    \n    // Reverse the sorted array\n    std::reverse(filtered_arr.begin(), filtered_arr.end());\n    \n    // Replace each digit by its corresponding name\n    std::vector<std::string> result;\n    for (int num : filtered_arr) {\n        result.push_back(digit_names[num - 1]);\n    }\n    \n    return result;\n}\n\n// Tests\nint main() {\n    assert(by_length(std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3})) == std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert(by_length(std::vector<long>()) == std::vector<std::string>());\n    assert(by_length(std::vector<long>({1, -1, 55})) == std::vector<std::string>({\"One\"}));\n    assert(by_length(std::vector<long>({6, 7, 3, 9, 9, 0, 3})) == std::vector<std::string>({\"Nine\", \"Nine\", \"Seven\", \"Six\", \"Three\", \"Three\"}));\n    // More tests\n    assert(by_length(std::vector<long>({10, 11, 12})) == std::vector<std::string>()); // All numbers out of range\n    assert(by_length(std::vector<long>({1, 2, 3, 4, 5, 6, 7, 8, 9})) == std::vector<std::string>({\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"}));\n    \n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_105_by_length"}
{"name": "HumanEval_106_f", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement the function f that takes n as a parameter,\n// and returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f((5))\n// (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15}))\nstd::vector<long> f(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_106_f.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = f;\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)2, (long)6, (long)24, (long)15, (long)720, (long)28})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)2, (long)6})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Helper function to calculate factorial of a number\nlong factorial(long num) {\n    long result = 1;\n    for (long i = 1; i <= num; ++i) {\n        result *= i;\n    }\n    return result;\n}\n\n// Helper function to calculate sum of numbers from 1 to num\nlong sum_up_to(long num) {\n    return (num * (num + 1)) / 2;\n}\n\nstd::vector<long> f(long n) {\n    std::vector<long> result;\n    for (long i = 1; i <= n; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(factorial(i));\n        } else {\n            result.push_back(sum_up_to(i));\n        }\n    }\n    return result;\n}\n\n// Example usage and test case\nint main() {\n    std::vector<long> expected_output = {1, 2, 6, 24, 15};\n    std::vector<long> actual_output = f(5);\n    assert(actual_output == expected_output);\n    std::cout << \"Test passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis complete code defines the `f` function according to the requirements, including handling both factorials and sums as described. The test case in `main()` checks that the function works correctly for `n=5`.", "task_id": "HumanEval_106_f"}
{"name": "HumanEval_107_even_odd_palindrome", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome((3))\n// (std::make_tuple(1, 2))\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome((12))\n// (std::make_tuple(4, 6))\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer palindromes respectively.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_107_even_odd_palindrome.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = even_odd_palindrome;\n    assert(candidate((123)) == (std::make_tuple(8, 13)));\n    assert(candidate((12)) == (std::make_tuple(4, 6)));\n    assert(candidate((3)) == (std::make_tuple(1, 2)));\n    assert(candidate((63)) == (std::make_tuple(6, 8)));\n    assert(candidate((25)) == (std::make_tuple(5, 6)));\n    assert(candidate((19)) == (std::make_tuple(4, 6)));\n    assert(candidate((9)) == (std::make_tuple(4, 5)));\n    assert(candidate((1)) == (std::make_tuple(0, 1)));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cassert>\n#include <bits/stdc++.h>\n\n// Helper function to check if a number is a palindrome\nbool is_palindrome(int num) {\n    std::string str = std::to_string(num);\n    std::string rev_str = str;\n    std::reverse(rev_str.begin(), rev_str.end());\n    return str == rev_str;\n}\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\nstd::tuple<long, long> even_odd_palindrome(long n) {\n    long even_count = 0, odd_count = 0;\n    \n    for (int i = 1; i <= n; ++i) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n                even_count++;\n            } else {\n                odd_count++;\n            }\n        }\n    }\n    \n    return std::make_tuple(even_count, odd_count);\n}\n\nint main() {\n    // Test cases\n    auto res1 = even_odd_palindrome(3);\n    assert(res1 == std::make_tuple(1, 2));\n\n    auto res2 = even_odd_palindrome(12);\n    assert(res2 == std::make_tuple(4, 6));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis code defines a function `even_odd_palindrome` that computes the number of even and odd integer palindromes within a given range from 1 to `n`, inclusive. It includes a helper function `is_palindrome` to check if a number is a palindrome and a main function to test the `even_odd_palindrome` function with given test cases.", "task_id": "HumanEval_107_even_odd_palindrome"}
{"name": "HumanEval_108_count_nums", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums which takes a vector of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1, (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1, (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_108_count_nums.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1, (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12, (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<vector>\n#include<iostream>\n\nlong sum_of_digits(long num) {\n    long sum = 0;\n    bool is_negative = num < 0;\n    if (is_negative) {\n        num = -num;\n    }\n\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    \n    return is_negative ? -sum : sum;\n}\n\nlong count_nums(std::vector<long> arr) {\n    long count = 0;\n    for (long num : arr) {\n        if (sum_of_digits(num) > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Test cases\nint main() {\n    assert(count_nums(std::vector<long>()) == 0);\n    assert(count_nums(std::vector<long>({-1, 11, -11})) == 1);\n    assert(count_nums(std::vector<long>({1, 1, 2})) == 3);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis C++ code contains the function `count_nums` that takes a vector of integers and returns the number of elements with a sum of digits greater than 0. The helper function `sum_of_digits` correctly handles negative numbers by computing the sum of their digits with the correct sign for handling. The main function includes test cases that verify the implementation based on the provided examples.", "task_id": "HumanEval_108_count_nums"}
{"name": "HumanEval_109_move_one_ball", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly ordered. Your task is to determine if\n// it is possible to get a vector sorted in non-decreasing order by performing \n// the following operation on the given vector:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the vector by one\n// position in the right direction. The last element of the vector will be moved to\n// the starting position in the vector i.e. 0th index. \n// If it is possible to obtain the sorted vector by performing the above operation\n// then return true else return false.\n// If the given vector is empty then return true.\n// Note: The given vector is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n// (true)\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible to get non-decreasing order for the given\n// vector by performing any number of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_109_move_one_ball.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = move_one_ball;\n    assert(candidate((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)10, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)3, (long)5, (long)4, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool move_one_ball(std::vector<long> arr) {\n    int N = arr.size();\n    if (N == 0) return true;\n\n    vector<long> sorted_arr = arr;\n    sort(sorted_arr.begin(), sorted_arr.end());\n\n    for (int i = 0; i < N; ++i) {\n        bool can_sort = true;\n        for (int j = 0; j < N; ++j) {\n            if (arr[(i + j) % N] != sorted_arr[j]) {\n                can_sort = false;\n                break;\n            }\n        }\n        if (can_sort) return true;\n    }\n\n    return false;\n}\n\nint main() {\n    assert(move_one_ball({3, 4, 5, 1, 2}) == true);\n    assert(move_one_ball({3, 5, 4, 1, 2}) == false);\n    assert(move_one_ball({}) == true);\n    assert(move_one_ball({1}) == true);\n    assert(move_one_ball({5, 1, 2, 3, 4}) == true);\n\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_109_move_one_ball"}
{"name": "HumanEval_110_exchange", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this problem, you will implement a function that takes two vectors of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a vector of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\n// (\"YES\")\n// >>> exchange((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4})))\n// (\"NO\")\n// It is assumed that the input vectors will be non-empty.\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_110_exchange.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = exchange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)1, (long)5, (long)3, (long)4}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})), (std::vector<long>({(long)2, (long)1, (long)4, (long)3}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)4}))) == (\"YES\"));\n    assert(candidate((std::vector<long>({(long)5, (long)7, (long)3})), (std::vector<long>({(long)2, (long)6, (long)3}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)6, (long)1, (long)8, (long)9})), (std::vector<long>({(long)3, (long)5, (long)5, (long)1, (long)1, (long)1}))) == (\"NO\"));\n    assert(candidate((std::vector<long>({(long)100, (long)200})), (std::vector<long>({(long)200, (long)200}))) == (\"YES\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string exchange(std::vector<long> lst1, std::vector<long> lst2) {\n    bool lst1_has_odd = false;\n    for (auto num : lst1) {\n        if (num % 2 != 0) {\n            lst1_has_odd = true;\n            break;\n        }\n    }\n\n    if (!lst1_has_odd) return \"YES\"; // lst1 already has only even numbers\n\n    bool lst2_has_even = false;\n    for (auto num : lst2) {\n        if (num % 2 == 0) {\n            lst2_has_even = true;\n            break;\n        }\n    }\n\n    if (lst1_has_odd && lst2_has_even) {\n        return \"YES\"; // There is at least one odd in lst1 and one even in lst2\n    }\n\n    return \"NO\";\n}\n\nint main() {\n    assert(exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert(exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert(exchange({2, 4, 6}, {1, 3, 5, 7}) == \"YES\");\n    assert(exchange({1, 3, 5}, {1, 3, 5}) == \"NO\");\n    assert(exchange({1, 3, 5}, {2, 4, 6}) == \"YES\");\n\n    std::cout << \"All test cases are passed.\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_110_exchange"}
{"name": "HumanEval_111_histogram", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n// >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long> histogram(std::string test) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_111_histogram.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::map<std::string,long> histogram(std::string test) {\n    // Split the input string by spaces and count occurrences of each letter\n    std::map<std::string, long> letterCount;\n    std::istringstream iss(test);\n    std::string word;\n    while (iss >> word) {\n        letterCount[word]++;\n    }\n\n    // Find the maximum count of occurrences\n    long maxCount = 0;\n    for (const auto& pair : letterCount) {\n        if (pair.second > maxCount) {\n            maxCount = pair.second;\n        }\n    }\n\n    // Collect all letters with the maximum count of occurrences\n    std::map<std::string, long> result;\n    for (const auto& pair : letterCount) {\n        if (pair.second == maxCount) {\n            result[pair.first] = pair.second;\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    assert((histogram(\"a b c\") == std::map<std::string, long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}})));\n    assert((histogram(\"a b b a\") == std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert((histogram(\"a b c a b\") == std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert((histogram(\"b b b b a\") == std::map<std::string, long>({{\"b\", 4}})));\n    assert((histogram(\"\") == std::map<std::string, long>()));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_111_histogram"}
{"name": "HumanEval_112_reverse_delete", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a tuple containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete((\"abcde\"), (\"ae\"))\n// (std::make_tuple(\"bcd\", false))\n// >>> reverse_delete((\"abcdef\"), (\"b\"))\n// (std::make_tuple(\"acdef\", false))\n// >>> reverse_delete((\"abcdedcba\"), (\"ab\"))\n// (std::make_tuple(\"cdedc\", true))\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_112_reverse_delete.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = reverse_delete;\n    assert(candidate((\"abcde\"), (\"ae\")) == (std::make_tuple(\"bcd\", false)));\n    assert(candidate((\"abcdef\"), (\"b\")) == (std::make_tuple(\"acdef\", false)));\n    assert(candidate((\"abcdedcba\"), (\"ab\")) == (std::make_tuple(\"cdedc\", true)));\n    assert(candidate((\"dwik\"), (\"w\")) == (std::make_tuple(\"dik\", false)));\n    assert(candidate((\"a\"), (\"a\")) == (std::make_tuple(\"\", true)));\n    assert(candidate((\"abcdedcba\"), (\"\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"abcdedcba\"), (\"v\")) == (std::make_tuple(\"abcdedcba\", true)));\n    assert(candidate((\"vabba\"), (\"v\")) == (std::make_tuple(\"abba\", true)));\n    assert(candidate((\"mamma\"), (\"mia\")) == (std::make_tuple(\"\", true)));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::tuple<std::string, bool> reverse_delete(std::string s, std::string c) {\n    // Create a set of characters to delete for faster lookup\n    std::unordered_set<char> chars_to_delete(c.begin(), c.end());\n    \n    // Construct the resultant string after deletion\n    std::string result;\n    for (char ch : s) {\n        if (chars_to_delete.find(ch) == chars_to_delete.end()) {\n            result += ch;\n        }\n    }\n    \n    // Function to check if a string is a palindrome\n    auto is_palindrome = [](const std::string &str) -> bool {\n        int left = 0, right = str.size() - 1;\n        while (left < right) {\n            if (str[left] != str[right]) return false;\n            left++;\n            right--;\n        }\n        return true;\n    };\n\n    // Check if the resultant string is a palindrome\n    bool palindrome_check = is_palindrome(result);\n\n    // Return the result string and the palindrome check as a tuple\n    return std::make_tuple(result, palindrome_check);\n}\n\nint main() {\n    auto result1 = reverse_delete(\"abcde\", \"ae\");\n    assert(result1 == std::make_tuple(\"bcd\", false));\n\n    auto result2 = reverse_delete(\"abcdef\", \"b\");\n    assert(result2 == std::make_tuple(\"acdef\", false));\n\n    auto result3 = reverse_delete(\"abcdedcba\", \"ab\");\n    assert(result3 == std::make_tuple(\"cdedc\", true));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_112_reverse_delete"}
{"name": "HumanEval_113_odd_count", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_113_odd_count.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = odd_count;\n    assert(candidate((std::vector<std::string>({(std::string)\"1234567\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"271\", (std::string)\"137\", (std::string)\"314\"}))) == (std::vector<std::string>({(std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\", (std::string)\"the number of odd elements 3n the str3ng 3 of the 3nput.\", (std::string)\"the number of odd elements 2n the str2ng 2 of the 2nput.\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Given a vector of strings, where each string consists of only digits, return a vector.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count((std::vector<std::string>({(std::string)\"1234567\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n// >>> odd_count((std::vector<std::string>({(std::string)\"3\", (std::string)\"11111111\"})))\n// (std::vector<std::string>({(std::string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (std::vector<std::string>({(std::string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\nstd::vector<std::string> odd_count(std::vector<std::string> lst) {\n    std::vector<std::string> result;\n    for (const std::string& s : lst) {\n        int count = 0;\n        for (char c : s) {\n            if ((c - '0') % 2 != 0) {\n                count++;\n            }\n        }\n\n        std::string template_str = \"the number of odd elements in the string i of the input.\";\n        for (size_t pos = 0; (pos = template_str.find('i', pos)) != std::string::npos; pos++) {\n            template_str.replace(pos, 1, std::to_string(count));\n        }\n\n        result.push_back(template_str);\n    }\n    return result;\n}\n\n// Test cases\nint main() {\n    std::vector<std::string> input = {\"1234567\"};\n    std::vector<std::string> expected_output = {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"};\n    assert(odd_count(input) == expected_output);\n\n    input = {\"3\", \"11111111\"};\n    expected_output = {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"};\n    assert(odd_count(input) == expected_output);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_113_odd_count"}
{"name": "HumanEval_114_minSubArraySum", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_114_minSubArraySum.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4}))) == (1));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (-6));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)2, (long)-10}))) == (-14));\n    assert(candidate((std::vector<long>({(long)-9999999999999999}))) == (-9999999999999999));\n    assert(candidate((std::vector<long>({(long)0, (long)10, (long)20, (long)1000000}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)100, (long)-1, (long)-2, (long)-3, (long)10, (long)-5}))) == (-6));\n    assert(candidate((std::vector<long>({(long)10, (long)11, (long)13, (long)8, (long)3, (long)4}))) == (3));\n    assert(candidate((std::vector<long>({(long)100, (long)-33, (long)32, (long)-1, (long)0, (long)-2}))) == (-33));\n    assert(candidate((std::vector<long>({(long)-10}))) == (-10));\n    assert(candidate((std::vector<long>({(long)7}))) == (7));\n    assert(candidate((std::vector<long>({(long)1, (long)-1}))) == (-1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n// of nums.\n// Example\n// >>> minSubArraySum((std::vector<long>({(long)2, (long)3, (long)4, (long)1, (long)2, (long)4})))\n// (1)\n// >>> minSubArraySum((std::vector<long>({(long)-1, (long)-2, (long)-3})))\n// (-6)\nlong minSubArraySum(std::vector<long> nums) {\n    long currentSum = nums[0], minSum = nums[0];\n    for(size_t i = 1; i < nums.size(); ++i) {\n        currentSum = std::min(nums[i], currentSum + nums[i]);\n        minSum = std::min(minSum, currentSum);\n    }\n    return minSum;\n}\n\nint main() {\n    assert(minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert(minSubArraySum({-1, -2, -3}) == -6);\n    assert(minSubArraySum({-1, 2, 3, -4, -1}) == -5);\n    assert(minSubArraySum({1}) == 1);\n    assert(minSubArraySum({-1}) == -1);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_114_minSubArraySum"}
{"name": "HumanEval_115_max_fill", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_115_max_fill.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})), (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})), (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1, (long)1})})), (9)) == (2));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n#include <assert.h>\n\nlong max_fill(std::vector<std::vector<long>> grid, long capacity) {\n    long total_water = 0;\n    for (auto& row : grid) {\n        for (auto& cell : row) {\n            if (cell == 1) {\n                total_water++;\n            }\n        }\n    }\n    long bucket_operations = (total_water + capacity - 1) / capacity; // ceiling of total_water / capacity\n    return bucket_operations;\n}\n\nint main() {\n    assert(max_fill({{0, 0, 1, 0}, {0, 1, 0, 0}, {1, 1, 1, 1}}, 1) == 6);\n    assert(max_fill({{0, 0, 1, 1}, {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 1, 1, 1}}, 2) == 5);\n    assert(max_fill({{0, 0, 0}, {0, 0, 0}}, 5) == 0);\n    // Add more test cases as necessary\n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```\n\n### Explanation:\n1. **Function Definition**: `max_fill` takes a 2D vector `grid` and an integer `capacity`.\n2. **Calculate Total Water Units**: Iterate through each cell in the grid. If the cell contains 1 (indicating water), increment the `total_water` counter.\n3. **Calculate Bucket Operations**: Compute the number of bucket operations needed to remove all water using the formula `(total_water + capacity - 1) / capacity`.\n4. **Return the Result**: Return the computed number of bucket operations.\n5. **Main Function**: Includes test cases to validate the implementation.", "task_id": "HumanEval_115_max_fill"}
{"name": "HumanEval_116_sort_array", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to sort a vector of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1, (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_116_sort_array.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4, (long)8, (long)16, (long)32})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Function to count the number of 1s in the binary representation of a number\nint count_ones_in_binary(long n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\n// Comparator function for sorting\nbool comparator(long a, long b) {\n    int count_a = count_ones_in_binary(a);\n    int count_b = count_ones_in_binary(b);\n    if (count_a == count_b) {\n        return a < b;\n    }\n    return count_a < count_b;\n}\n\nstd::vector<long> sort_array(std::vector<long> arr) {\n    std::sort(arr.begin(), arr.end(), comparator);\n    return arr;\n}\n\n// Test cases to validate the solution\nint main() {\n    std::vector<long> result1 = sort_array({1, 5, 2, 3, 4});\n    std::vector<long> expected1 = {1, 2, 3, 4, 5};\n    assert(result1 == expected1);\n\n    std::vector<long> result2 = sort_array({-2, -3, -4, -5, -6});\n    std::vector<long> expected2 = {-6, -5, -4, -3, -2};\n    assert(result2 == expected2);\n\n    std::vector<long> result3 = sort_array({1, 0, 2, 3, 4});\n    std::vector<long> expected3 = {0, 1, 2, 3, 4};\n    assert(result3 == expected3);\n\n    return 0;\n}\n```", "task_id": "HumanEval_116_sort_array"}
{"name": "HumanEval_117_select_words", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a vector of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty vector.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n// (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n// (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string> select_words(std::string s, long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_117_select_words.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"})));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Function to check if a character is a consonant\nbool isConsonant(char c) {\n    c = tolower(c);\n    return (c >= 'a' && c <= 'z') && !(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n}\n\nstd::vector<std::string> select_words(std::string s, long n) {\n    std::vector<std::string> result;\n    \n    // Split the string into words\n    std::istringstream iss(s);\n    std::string word;\n    \n    while (iss >> word) {\n        long consonant_count = 0;\n        \n        // Count the number of consonants in the current word\n        for (char c : word) {\n            if (isConsonant(c)) {\n                consonant_count++;\n            }\n        }\n        \n        // Check if the current word has exactly n consonants\n        if (consonant_count == n) {\n            result.push_back(word);\n        }\n    }\n    \n    return result;\n}\n\nint main() {\n    // Test cases\n    assert(select_words(\"Mary had a little lamb\", 4) == std::vector<std::string>({\"little\"}));\n    assert(select_words(\"Mary had a little lamb\", 3) == std::vector<std::string>({\"Mary\", \"lamb\"}));\n    assert(select_words(\"simple white space\", 2) == std::vector<std::string>({}));\n    assert(select_words(\"Hello world\", 4) == std::vector<std::string>({\"world\"}));\n    assert(select_words(\"Uncle sam\", 3) == std::vector<std::string>({\"Uncle\"}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_117_select_words"}
{"name": "HumanEval_118_get_closest_vowel", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n// (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string get_closest_vowel(std::string word) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_118_get_closest_vowel.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nbool is_vowel(char ch) {\n    char vowels[] = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'};\n    return std::find(std::begin(vowels), std::end(vowels), ch) != std::end(vowels);\n}\n\nbool is_consonant(char ch) {\n    return std::isalpha(ch) && !is_vowel(ch);\n}\n\nstd::string get_closest_vowel(std::string word) {\n    int n = word.size();\n    for (int i = n - 2; i > 0; --i) {\n        if (is_vowel(word[i]) && is_consonant(word[i-1]) && is_consonant(word[i+1])) {\n            return std::string(1, word[i]);\n        }\n    }\n    return \"\";\n}\n\nint main() {\n    // Provided test cases\n    assert(get_closest_vowel(\"yogurt\") == \"u\");\n    assert(get_closest_vowel(\"FULL\") == \"U\");\n    assert(get_closest_vowel(\"quick\") == \"\");\n    assert(get_closest_vowel(\"ab\") == \"\");\n\n    // Additional test cases\n    assert(get_closest_vowel(\"bake\") == \"a\");\n    assert(get_closest_vowel(\"alpHaBet\") == \"a\");\n    assert(get_closest_vowel(\"Encapsulate\") == \"u\");\n    assert(get_closest_vowel(\"TrYing\") == \"i\");\n    assert(get_closest_vowel(\"CryPt\") == \"\");\n    assert(get_closest_vowel(\"educaTiOnal\") == \"a\");\n\n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_118_get_closest_vowel"}
{"name": "HumanEval_119_match_parens", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"})))\n// (\"Yes\")\n// >>> match_parens((std::vector<std::string>({(std::string)\")\", (std::string)\")\"})))\n// (\"No\")\nstd::string match_parens(std::vector<std::string> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_119_match_parens.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = match_parens;\n    assert(candidate((std::vector<std::string>({(std::string)\"()(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\")\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(())\", (std::string)\"())())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")())\", (std::string)\"(()()(\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(())))\", (std::string)\"(()())((\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"()\", (std::string)\"())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(()(\", (std::string)\"()))()\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"((((\", (std::string)\"((())\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(()\", (std::string)\"(()(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")(\", (std::string)\")(\"}))) == (\"No\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"(\", (std::string)\")\"}))) == (\"Yes\"));\n    assert(candidate((std::vector<std::string>({(std::string)\")\", (std::string)\"(\"}))) == (\"Yes\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::string match_parens(std::vector<std::string> lst) {\n    // Helper function to check balanced parenthesis\n    auto is_balanced = [](const std::string &s) {\n        int balance = 0;\n        for (char ch : s) {\n            if (ch == '(') {\n                balance++;\n            } else if (ch == ')') {\n                balance--;\n                if (balance < 0) {\n                    return false;\n                }\n            }\n        }\n        return balance == 0;\n    };\n\n    // There are two possible concatenations\n    std::string concat1 = lst[0] + lst[1];\n    std::string concat2 = lst[1] + lst[0];\n\n    if (is_balanced(concat1) || is_balanced(concat2)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n\n// Testing the function\nint main() {\n    std::vector<std::string> test1 = {\"()(\", \")\"};\n    std::vector<std::string> test2 = {\")\", \")\"};\n    std::vector<std::string> test3 = {\"(()\", \"(())))\"};\n    \n    assert(match_parens(test1) == \"Yes\");\n    assert(match_parens(test2) == \"No\");\n    assert(match_parens(test3) == \"No\");\n    \n    std::cout << match_parens(test1) << std::endl; // Should output \"Yes\"\n    std::cout << match_parens(test2) << std::endl; // Should output \"No\"\n    std::cout << match_parens(test3) << std::endl; // Should output \"No\"\n    \n    return 0;\n}\n```", "task_id": "HumanEval_119_match_parens"}
{"name": "HumanEval_120_maximum", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of integers and a positive integer k, return a sorted vector \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n// Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n// Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n// 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_120_maximum.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13, (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5, (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4, (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10, (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n    // Ensure the input constraints are met\n    assert(k >= 0 && k <= arr.size());\n\n    // Sort the vector in non-decreasing order\n    std::sort(arr.begin(), arr.end());\n\n    // Get the last k elements\n    std::vector<long> result(arr.end() - k, arr.end());\n\n    return result;\n}\n\nint main() {\n    // Example 1\n    std::vector<long> result1 = maximum({-3, -4, 5}, 3);\n    std::vector<long> expected1 = {-4, -3, 5};\n    assert(result1 == expected1);\n\n    // Example 2\n    std::vector<long> result2 = maximum({4, -4, 4}, 2);\n    std::vector<long> expected2 = {4, 4};\n    assert(result2 == expected2);\n\n    // Example 3\n    std::vector<long> result3 = maximum({-3, 2, 1, 2, -1, -2, 1}, 1);\n    std::vector<long> expected3 = {2};\n    assert(result3 == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_120_maximum"}
{"name": "HumanEval_121_solution", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_121_solution.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5, (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5, (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13, (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3, (long)13, (long)2, (long)9}))) == (3));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution((std::vector<long>({(long)5, (long)8, (long)7, (long)1})))\n// (12)\n// >>> solution((std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})))\n// (9)\n// >>> solution((std::vector<long>({(long)30, (long)13, (long)24, (long)321})))\n// (0)\nlong solution(std::vector<long> lst) {\n    long sum = 0;\n    for(size_t i = 0; i < lst.size(); i++) {\n        if(i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    assert(solution(std::vector<long>({(long)5, (long)8, (long)7, (long)1})) == 12);\n    assert(solution(std::vector<long>({(long)3, (long)3, (long)3, (long)3, (long)3})) == 9);\n    assert(solution(std::vector<long>({(long)30, (long)13, (long)24, (long)321})) == 0);\n    std::cout << \"All test cases pass\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_121_solution"}
{"name": "HumanEval_122_add_elements", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_122_add_elements.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11, (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) == (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Given a non-empty vector of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum = 0;\n    for (long i = 0; i < k; ++i) {\n        // Only add elements with at most 2 digits\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    // Test case from the example\n    std::vector<long> arr = {(long)111, (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9};\n    long k = 4;\n    assert(add_elements(arr, k) == 24);\n\n    // Additional test cases\n    std::vector<long> arr2 = {(long)50, (long)60, (long)70, (long)80, (long)90};\n    k = 5;\n    assert(add_elements(arr2, k) == 350);\n\n    std::vector<long> arr3 = {(long)100, (long)200, (long)300, (long)400, (long)500};\n    k = 3;\n    assert(add_elements(arr3, k) == 0);\n\n    std::vector<long> arr4 = {(long)-10, (long)-20, (long)-30, (long)-40, (long)-50};\n    k = 4;\n    assert(add_elements(arr4, k) == -100);\n\n    std::vector<long> arr5 = {(long)10};\n    k = 1;\n    assert(add_elements(arr5, k) == 10);\n\n    // All tests passed\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_122_add_elements"}
{"name": "HumanEval_123_get_odd_collatz", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned vector sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz((5))\n// (std::vector<long>({(long)1, (long)5}))\nstd::vector<long> get_odd_collatz(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_123_get_odd_collatz.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_odd_collatz;\n    assert(candidate((14)) == (std::vector<long>({(long)1, (long)5, (long)7, (long)11, (long)13, (long)17})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)5})));\n    assert(candidate((12)) == (std::vector<long>({(long)1, (long)3, (long)5})));\n    assert(candidate((1)) == (std::vector<long>({(long)1})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::vector<long> get_odd_collatz(long n) {\n    assert(n > 0); // Ensures the input is a positive integer\n    \n    std::set<long> odd_numbers; // To automatically sort and store unique odd numbers\n    \n    while (n != 1) {\n        if (n % 2 != 0) {\n            // n is odd, add it to the set\n            odd_numbers.insert(n);\n            n = 3 * n + 1;\n        } else {\n            // n is even, divide by 2\n            n /= 2;\n        }\n    }\n    \n    // Always include 1 as per the problem statement\n    odd_numbers.insert(1);\n    \n    return std::vector<long>(odd_numbers.begin(), odd_numbers.end());\n}\n```", "task_id": "HumanEval_123_get_odd_collatz"}
{"name": "HumanEval_124_valid_date", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n// >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"))\n// (false)\nbool valid_date(std::string date) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_124_valid_date.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n// Function to check if the given year is a leap year\nbool isLeapYear(int year) {\n    // If a year is multiple of 400, then it is a leap year\n    if (year % 400 == 0) return true;\n    // Else If a year is multiple of 100, then it is not a leap year\n    if (year % 100 == 0) return false;\n    // Else If a year is multiple of 4, then it is a leap year\n    if (year % 4 == 0) return true;\n    return false;\n}\n\nbool valid_date(std::string date) {\n    // Check if the date is empty\n    if (date.empty()) return false;\n\n    // Check the format using regex\n    regex datePattern(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\");\n    if (!regex_match(date, datePattern)) {\n        return false;\n    }\n\n    // Parsing the date string\n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6, 4));\n\n    // Check if month is valid\n    if (month < 1 || month > 12) return false;\n\n    // Days in each month\n    vector<int> daysInMonth = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n    // Adjust for leap year\n    if (month == 2 && isLeapYear(year)) {\n        daysInMonth[2] = 29;\n    }\n\n    // Check if day is valid\n    if (day < 1 || day > daysInMonth[month]) return false;\n\n    return true;\n}\n\nint main() {\n    assert(valid_date(\"03-11-2000\") == true);\n    assert(valid_date(\"15-01-2012\") == false);\n    assert(valid_date(\"04-0-2040\") == false);\n    assert(valid_date(\"06-04-2020\") == true);\n    assert(valid_date(\"06/04/2020\") == false);\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```\n\nThis function `valid_date` validates given date strings according to the specified rules. The function checks if the date string is not empty, if the date format is correct (mm-dd-yyyy), and verifies the validity of the month and day with consideration for leap years. The main function includes test cases to validate the function's correctness.", "task_id": "HumanEval_124_valid_date"}
{"name": "HumanEval_125_split_words", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_std_vector_std_string__long{\n    std::vector<std::string> f0;\n    long f1;    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    bool operator==(std::vector<std::string> f) {\n        return f0 == f ;\n    }    bool operator==(long f) {\n        return f1 == f ;\n    }\n};\n// Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words((\"Hello world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"Hello,world!\"))\n// std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"})\n// >>> split_words((\"abcdef\"))\n// 3\nUnion_std_vector_std_string__long split_words(std::string txt) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_125_split_words.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = split_words;\n    assert(candidate((\"Hello world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello,world!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world!\"}));\n    assert(candidate((\"Hello world,!\")) == std::vector<std::string>({(std::string)\"Hello\", (std::string)\"world,!\"}));\n    assert(candidate((\"Hello,Hello,world !\")) == std::vector<std::string>({(std::string)\"Hello,Hello,world\", (std::string)\"!\"}));\n    assert(candidate((\"abcdef\")) == 3);\n    assert(candidate((\"aaabb\")) == 2);\n    assert(candidate((\"aaaBb\")) == 1);\n    assert(candidate((\"\")) == 0);\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nunion Union_std_vector_std_string__long {\n    std::vector<std::string> f0;\n    long f1;\n    \n    Union_std_vector_std_string__long(std::vector<std::string> _f0) : f0(_f0) {}\n    Union_std_vector_std_string__long(long _f1) : f1(_f1) {}\n    ~Union_std_vector_std_string__long() {}\n    \n    bool operator==(std::vector<std::string> f) {\n        return f0 == f;\n    }\n    \n    bool operator==(long f) {\n        return f1 == f;\n    }\n};\n\nUnion_std_vector_std_string__long split_words(std::string txt) {\n    if (txt.find(' ') != std::string::npos) {\n        // Split on whitespace\n        std::stringstream ss(txt);\n        std::string word;\n        std::vector<std::string> result;\n        while (ss >> word) {\n            result.push_back(word);\n        }\n        return Union_std_vector_std_string__long(result);\n    } else if (txt.find(',') != std::string::npos) {\n        // Split on commas\n        std::vector<std::string> result;\n        std::string::size_type start = 0, end = 0;\n        while ((end = txt.find(',', start)) != std::string::npos) {\n            result.push_back(txt.substr(start, end - start));\n            start = end + 1;\n        }\n        result.push_back(txt.substr(start));\n        return Union_std_vector_std_string__long(result);\n    } else {\n        // Count lower-case letters with odd order in the alphabet\n        long count = 0;\n        for (char c : txt) {\n            if (c >= 'a' && c <= 'z') {\n                if ((c - 'a') % 2 != 0) {\n                    count++;\n                }\n            }\n        }\n        return Union_std_vector_std_string__long(count);\n    }\n}\n\nint main() {\n    // Examples\n    auto res1 = split_words(\"Hello world!\");\n    assert((res1 == std::vector<std::string>({\"Hello\", \"world!\"})));\n\n    auto res2 = split_words(\"Hello,world!\");\n    assert((res2 == std::vector<std::string>({\"Hello\", \"world!\"})));\n\n    auto res3 = split_words(\"abcdef\");\n    assert((res3 == 3));\n\n    std::cout << \"All tests passed.\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_125_split_words"}
{"name": "HumanEval_126_is_sorted", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return whether or not they are sorted\n// in ascending order. If vector has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_126_is_sorted.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>())) == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4}))) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\nbool is_sorted(std::vector<long> lst) {\n    if (lst.empty()) return true;\n\n    long prev = lst[0];\n    int count = 1;\n\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] < prev) {\n            return false;\n        } else if (lst[i] == prev) {\n            ++count;\n            if (count > 2) return false;\n        } else {\n            count = 1;\n        }\n        prev = lst[i];\n    }\n    return true;\n}\n\n// Test cases from the examples\nint main() {\n    assert(is_sorted({5}) == true);\n    assert(is_sorted({1, 2, 3, 4, 5}) == true);\n    assert(is_sorted({1, 3, 2, 4, 5}) == false);\n    assert(is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert(is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert(is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert(is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert(is_sorted({1, 2, 2, 2, 3, 4}) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_126_is_sorted"}
{"name": "HumanEval_127_intersection", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\")\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n// (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_127_intersection.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1, 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2, 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11, 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1, 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2, -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Helper function to check if a number is prime\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// Main function to determine if the intersection length is prime\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long, long> interval2) {\n    long start1 = std::get<0>(interval1);\n    long end1 = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\n    long startIntersect = std::max(start1, start2);\n    long endIntersect = std::min(end1, end2);\n\n    if (startIntersect > endIntersect) {\n        return \"NO\";\n    }\n    \n    long length = endIntersect - startIntersect + 1;\n    \n    if (isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n// Test the function with provided examples\nint main() {\n    assert(intersection(std::make_tuple(1, 2), std::make_tuple(2, 3)) == \"NO\");\n    assert(intersection(std::make_tuple(-1, 1), std::make_tuple(0, 4)) == \"NO\");\n    assert(intersection(std::make_tuple(-3, -1), std::make_tuple(-5, 5)) == \"YES\");\n\n    // Additional test cases\n    assert(intersection(std::make_tuple(2, 5), std::make_tuple(3, 7)) == \"NO\");\n    assert(intersection(std::make_tuple(5, 10), std::make_tuple(10, 20)) == \"YES\");\n    assert(intersection(std::make_tuple(10, 10), std::make_tuple(10, 10)) == \"NO\");\n\n    std::cout << \"All test cases passed!\";\n    return 0;\n}\n```", "task_id": "HumanEval_127_intersection"}
{"name": "HumanEval_128_prod_signs", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the vector, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0, (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\nstd::optional<long> prod_signs(std::vector<long> arr) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_128_prod_signs.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>())) == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1, (long)1, (long)1, (long)0}))) == 0);\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n#include<optional>\n\nstd::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty()) {\n        return std::nullopt;\n    }\n\n    long sum_magnitudes = 0;\n    int sign_product = 1;\n\n    for (long num : arr) {\n        sum_magnitudes += std::abs(num);\n        if (num > 0) {\n            sign_product *= 1;\n        } else if (num < 0) {\n            sign_product *= -1;\n        } else {\n            sign_product *= 0;\n        }\n    }\n\n    return sum_magnitudes * sign_product;\n}\n\n// Test cases\nint main() {\n    assert(prod_signs(std::vector<long>({1, 2, 2, -4})) == 9);\n    assert(prod_signs(std::vector<long>({0, 1})) == 0);\n    assert(prod_signs(std::vector<long>()).has_value() == false); // returns std::nullopt\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_128_prod_signs"}
{"name": "HumanEval_129_minPath", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered vectors of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered vector of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n// (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n// (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_129_minPath.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) == (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5, (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) == (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6, (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11, (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15, (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16, (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1, (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8, (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4, (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7, (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10, (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1, (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16, (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8, (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6, (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}), (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) == (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1, (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1, (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10)) == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1, (long)3})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\n// This struct provides necessary details for the BFS traversal\nstruct State {\n    int x, y, length;\n    std::vector<long> path;\n};\n\nstd::vector<long> minPath(std::vector<std::vector<long>> grid, long k) {\n    int N = grid.size();\n    std::queue<State> q;\n    std::vector<std::pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    std::vector<long> result;\n    \n    // Start BFS from every cell\n    for(int i = 0; i < N; ++i) {\n        for(int j = 0; j < N; ++j) {\n            std::vector<long> initialPath = {grid[i][j]};\n            q.push({i, j, 1, initialPath});\n        }\n    }\n\n    while(!q.empty()) {\n        State current = q.front();\n        q.pop();\n        \n        // If we have found a path of length k, check whether it's the smallest\n        if(current.length == k) {\n            if(result.empty() || current.path < result) {\n                result = current.path;\n            }\n            continue;\n        }\n        \n        // Try all 4 directions\n        for(auto dir : directions) {\n            int nx = current.x + dir.first;\n            int ny = current.y + dir.second;\n            if(nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                std::vector<long> newPath = current.path;\n                newPath.push_back(grid[nx][ny]);\n                q.push({nx, ny, current.length + 1, newPath});\n            }\n        }\n    }\n    \n    return result;\n}\n\n// Function to illustrate the test cases\nvoid testMinPath() {\n    std::vector<std::vector<long>> grid1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    long k1 = 3;\n    std::vector<long> result1 = minPath(grid1, k1);\n    std::vector<long> expected1 = {1, 2, 1};\n    assert(result1 == expected1);\n    \n    std::vector<std::vector<long>> grid2 = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    long k2 = 1;\n    std::vector<long> result2 = minPath(grid2, k2);\n    std::vector<long> expected2 = {1};\n    assert(result2 == expected2);\n    \n    std::cout << \"All test cases pass.\" << std::endl;\n}\n\nint main() {\n    testMinPath();\n    return 0;\n}\n```\n\nThis `minPath` function finds the minimum path of length `k` in the given grid starting from any cell. It uses BFS for traversing the grid and finding all possible paths of length `k`, then finds the lexicographically smallest path among them. The provided test cases can verify the correctness of the implementation.", "task_id": "HumanEval_129_minPath"}
{"name": "HumanEval_130_tri", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::vector<long> tri(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_130_tri.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8})));\n    assert(candidate((4)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3})));\n    assert(candidate((5)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15})));\n    assert(candidate((6)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4})));\n    assert(candidate((7)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24})));\n    assert(candidate((8)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5})));\n    assert(candidate((9)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35})));\n    assert(candidate((20)) == (std::vector<long>({(long)1, (long)3, (long)2, (long)8, (long)3, (long)15, (long)4, (long)24, (long)5, (long)35, (long)6, (long)48, (long)7, (long)63, (long)8, (long)80, (long)9, (long)99, (long)10, (long)120, (long)11})));\n    assert(candidate((0)) == (std::vector<long>({(long)1})));\n    assert(candidate((1)) == (std::vector<long>({(long)1, (long)3})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a vector of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri((3))\n// (std::vector<long>({(long)1, (long)3, (long)2, (long)8}))\nstd::unordered_map<long, long> memo;\n\nlong tribonacci(long n) {\n    if (memo.find(n) != memo.end()) {\n        return memo[n];\n    }\n    if (n == 0) return 0;\n    if (n == 1) return 3;\n    if (n % 2 == 0) {\n        return memo[n] = 1 + n / 2;\n    } else {\n        return memo[n] = tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n + 1);\n    }\n}\n\nstd::vector<long> tri(long n) {\n    std::vector<long> result(n + 1);\n    for (long i = 0; i <= n; ++i) {\n        result[i] = tribonacci(i);\n    }\n    return result;\n}\n```\n\nThis code defines the `tribonacci` and `tri` functions where the `tribonacci` function calculates the `n-th` number in the Tribonacci sequence and the `tri` function generates and returns a vector with the first `n + 1` numbers in the sequence. The `memo` unordered map helps in memoizing already calculated results to optimize the recursive calls.", "task_id": "HumanEval_130_tri"}
{"name": "HumanEval_131_digits", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_131_digits.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) == (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\nusing namespace std;\n\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>> digits((235))\n// (15)\nlong digits(long n) {\n    long product = 1;\n    bool has_odd_digit = false;\n    \n    while (n > 0) {\n        long digit = n % 10;\n        if (digit % 2 != 0) {\n            product *= digit;\n            has_odd_digit = true;\n        }\n        n /= 10;\n    }\n    \n    if (has_odd_digit) {\n        return product;\n    } else {\n        return 0;\n    }\n}\n\nint main() {\n    // Test cases\n    assert(digits(1) == 1);\n    assert(digits(4) == 0);\n    assert(digits(235) == 15);\n    assert(digits(2468) == 0);\n    assert(digits(13579) == 945);\n\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```\n\nExplanation:\n- The function `digits` calculates the product of the odd digits of a given positive integer `n`.\n- It initializes the variable `product` to 1 and a boolean flag `has_odd_digit` to false.\n- It iterates through each digit of `n`, checks if the digit is odd, and updates the `product`.\n- After the loop, it checks if any odd digit was found (`has_odd_digit`). If not, it returns 0; otherwise, it returns the product.\n- The `main` function contains test cases to validate the implementation.", "task_id": "HumanEval_131_digits"}
{"name": "HumanEval_132_is_nested", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\nbool is_nested(std::string string) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_132_is_nested.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_nested;\n    assert(candidate((\"[[]]\")) == (true));\n    assert(candidate((\"[]]]]]]][[[[[]\")) == (false));\n    assert(candidate((\"[][]\")) == (false));\n    assert(candidate((\"[]\")) == (false));\n    assert(candidate((\"[[[[]]]]\")) == (true));\n    assert(candidate((\"[]]]]]]]]]]\")) == (false));\n    assert(candidate((\"[][][[]]\")) == (true));\n    assert(candidate((\"[[]\")) == (false));\n    assert(candidate((\"[]]\")) == (false));\n    assert(candidate((\"[[]][[\")) == (true));\n    assert(candidate((\"[[][]]\")) == (true));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"[[[[[[[[\")) == (false));\n    assert(candidate((\"]]]]]]]]\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested((\"[[]]\"))\n// (true)\n// >>> is_nested((\"[]]]]]]][[[[[]\"))\n// (false)\n// >>> is_nested((\"[][]\"))\n// (false)\n// >>> is_nested((\"[]\"))\n// (false)\n// >>> is_nested((\"[[][]]\"))\n// (true)\n// >>> is_nested((\"[[]][[\"))\n// (true)\n\nbool is_nested(std::string string) {\n    std::stack<char> stk;\n    bool nested = false;\n\n    for (char c : string) {\n        if (c == '[') {\n            stk.push(c);\n        } else if (c == ']') {\n            if (!stk.empty() && stk.top() == '[') {\n                stk.pop();\n                if (!stk.empty()) {\n                    nested = true;\n                }\n            } else {\n                // This means there is an imbalance in bracket,\n                // since we are receiving a ']' without a matching '['.\n                return false;\n            }\n        }\n    }\n\n    // Make sure all opened brackets are closed for valid sequence.\n    if (!stk.empty()) {\n        return false;\n    }\n\n    return nested;\n}\n\nint main() {\n    assert(is_nested(\"[[]]\") == true);\n    assert(is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert(is_nested(\"[][]\") == false);\n    assert(is_nested(\"[]\") == false);\n    assert(is_nested(\"[[][]]\") == true);\n    assert(is_nested(\"[[]][[\") == true);\n    \n    return 0;\n}\n```", "task_id": "HumanEval_132_is_nested"}
{"name": "HumanEval_133_sum_squares", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector of numbers.\n// You need to return the sum of squared numbers in the given vector,\n// round each element in the vector to the upper int(Ceiling) first.\n// Examples:\n// >>> lst((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f})))\n// (14)\n// >>> lst((std::vector<float>({(float)1.0f, (float)4.0f, (float)9.0f})))\n// (98)\n// >>> lst((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n// (84)\n// >>> lst((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f})))\n// (29)\n// >>> lst((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f})))\n// (6)\nlong sum_squares(std::vector<float> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_133_sum_squares.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)2.0f, (float)3.0f}))) == (14));\n    assert(candidate((std::vector<float>({(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84));\n    assert(candidate((std::vector<float>({(float)1.4f, (float)4.2f, (float)0.0f}))) == (29));\n    assert(candidate((std::vector<float>({(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6));\n    assert(candidate((std::vector<float>({(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f}))) == (10230));\n    assert(candidate((std::vector<float>({(float)10000.0f, (float)10000.0f}))) == (200000000));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75));\n    assert(candidate((std::vector<float>({(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086));\n    assert(candidate((std::vector<float>({(float)0.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f}))) == (1));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)1.0f, (float)0.0f}))) == (2));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cmath>\n#include <vector>\n#include <numeric>\n#include <iostream>\n\nlong sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for (float num : lst) {\n        int ceil_num = std::ceil(num); // Round to the upper int (ceiling)\n        sum += ceil_num * ceil_num; // Sum of squared numbers\n    }\n    return sum;\n}\n\nint main() {\n    assert(sum_squares({1.0f, 2.0f, 3.0f}) == 14);\n    assert(sum_squares({1.0f, 4.0f, 9.0f}) == 98);\n    assert(sum_squares({1.0f, 3.0f, 5.0f, 7.0f}) == 84);\n    assert(sum_squares({1.4f, 4.2f, 0.0f}) == 29);\n    assert(sum_squares({-2.4f, 1.0f, 1.0f}) == 6);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_133_sum_squares"}
{"name": "HumanEval_134_check_if_last_char_is_a_letter", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_134_check_if_last_char_is_a_letter.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = check_if_last_char_is_a_letter;\n    assert(candidate((\"apple\")) == (false));\n    assert(candidate((\"apple pi e\")) == (true));\n    assert(candidate((\"eeeee\")) == (false));\n    assert(candidate((\"A\")) == (true));\n    assert(candidate((\"Pumpkin pie \")) == (false));\n    assert(candidate((\"Pumpkin pie 1\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"eeeee e \")) == (false));\n    assert(candidate((\"apple pie\")) == (false));\n    assert(candidate((\"apple pi e \")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter((\"apple pie\"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"apple pi e\"))\n// (true)\n// >>> check_if_last_char_is_a_letter((\"apple pi e \"))\n// (false)\n// >>> check_if_last_char_is_a_letter((\"\"))\n// (false)\nbool check_if_last_char_is_a_letter(std::string txt) {\n    // Trimming trailing spaces\n    while (!txt.empty() && isspace(txt.back())) {\n        txt.pop_back();\n    }\n\n    if (txt.empty() || !isalpha(txt.back())) {\n        return false;\n    }\n\n    // Checking if there is a space before the last character\n    size_t lastSpaceIndex = txt.find_last_of(' ');\n    return lastSpaceIndex != std::string::npos && lastSpaceIndex == txt.size() - 2;\n}\n\n// Test cases for the function\nint main() {\n    assert(check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert(check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert(check_if_last_char_is_a_letter(\"apple pi e \") == false);\n    assert(check_if_last_char_is_a_letter(\"\") == false);\n    assert(check_if_last_char_is_a_letter(\"a \") == false);\n    assert(check_if_last_char_is_a_letter(\"a\") == true);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis code defines the function `check_if_last_char_is_a_letter` based on the described requirements. It also includes a `main` function with several test cases to validate the correctness of the implementation.", "task_id": "HumanEval_134_check_if_last_char_is_a_letter"}
{"name": "HumanEval_135_can_arrange", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_135_can_arrange.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given vector will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n// (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n// (-1)\nlong can_arrange(std::vector<long> arr) {\n    for (long i = arr.size() - 1; i > 0; --i) {\n        if (arr[i] < arr[i - 1]) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main() {\n    assert(can_arrange({1, 2, 4, 3, 5}) == 3);\n    assert(can_arrange({1, 2, 3}) == -1);\n    assert(can_arrange({5, 4, 3, 2, 1}) == 1);\n    assert(can_arrange({1, 3, 2}) == 2);\n    assert(can_arrange({2, 1}) == 1);\n    assert(can_arrange({1}) == -1);\n    std::cout << \"All test cases passed!\" << std::endl;\n}\n```", "task_id": "HumanEval_135_can_arrange"}
{"name": "HumanEval_136_largest_smallest_integers", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a vector.\n// If there is no negative or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n// >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_136_largest_smallest_integers.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4, (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2, (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7, (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9, 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0}))) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6, (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\nstd::tuple<std::optional<long>, std::optional<long>> largest_smallest_integers(std::vector<long> lst) {\n    std::optional<long> largest_negative = std::nullopt;\n    std::optional<long> smallest_positive = std::nullopt;\n\n    for (auto num : lst) {\n        if (num < 0) {\n            if (!largest_negative.has_value() || num > largest_negative.value()) {\n                largest_negative = num;\n            }\n        } else if (num > 0) {\n            if (!smallest_positive.has_value() || num < smallest_positive.value()) {\n                smallest_positive = num;\n            }\n        }\n    }\n\n    return std::make_tuple(largest_negative, smallest_positive);\n}\n\nint main() {\n    // Test cases\n    assert(largest_smallest_integers({2, 4, 1, 3, 5, 7}) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(1)));\n    assert(largest_smallest_integers({}) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(largest_smallest_integers({0}) == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n    assert(largest_smallest_integers({-1, -2, -3, 1, 2, 3}) == std::make_tuple(std::optional<long>(-1), std::optional<long>(1)));\n    assert(largest_smallest_integers({-5, -10, 7, 3}) == std::make_tuple(std::optional<long>(-5), std::optional<long>(3)));\n    assert(largest_smallest_integers({6, 8, -2, -1}) == std::make_tuple(std::optional<long>(-1), std::optional<long>(6)));\n    assert(largest_smallest_integers({10, 20, 30, -10, -20, -30}) == std::make_tuple(std::optional<long>(-10), std::optional<long>(10)));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_136_largest_smallest_integers"}
{"name": "HumanEval_137_compare_one", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\nunion Union_long_float_std_string{\n    long f0;\n    float f1;\n    std::string f2;    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n    ~Union_long_float_std_string() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }\n};\nunion Union_long_float_std_string_std_nullopt{\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt f3;    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt _f3) : f3(_f3) {}\n    ~Union_long_float_std_string_std_nullopt() {}\n    bool operator==(long f) {\n        return f0 == f ;\n    }    bool operator==(float f) {\n        return f1 == f ;\n    }    bool operator==(std::string f) {\n        return f2 == f ;\n    }    bool operator==(std::nullopt f) {\n        return f3 == f ;\n    }\n};\n// Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return None if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5f)\n// 2.5f\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// std::nullopt\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_137_compare_one.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = compare_one;\n    assert(candidate(1, 2) == 2);\n    assert(candidate(1, 2.5f) == 2.5f);\n    assert(candidate(2, 3) == 3);\n    assert(candidate(5, 6) == 6);\n    assert(candidate(1, \"2,3\") == \"2,3\");\n    assert(candidate(\"5,1\", \"6\") == \"6\");\n    assert(candidate(\"1\", \"2\") == \"2\");\n    assert(candidate(\"1\", 1) == std::nullopt);\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nunion Union_long_float_std_string {\n    long f0;\n    float f1;\n    std::string f2;\n\n    Union_long_float_std_string(long _f0) : f0(_f0) {}\n    Union_long_float_std_string(float _f1) : f1(_f1) {}\n    Union_long_float_std_string(std::string _f2) : f2(_f2) {}\n\n    ~Union_long_float_std_string() {}\n\n    bool operator==(long f) const {\n        return f0 == f;\n    }\n\n    bool operator==(float f) const {\n        return f1 == f;\n    }\n\n    bool operator==(std::string f) const {\n        return f2 == f;\n    }\n};\n\nunion Union_long_float_std_string_std_nullopt {\n    long f0;\n    float f1;\n    std::string f2;\n    std::nullopt_t f3;\n\n    Union_long_float_std_string_std_nullopt(long _f0) : f0(_f0) {}\n    Union_long_float_std_string_std_nullopt(float _f1) : f1(_f1) {}\n    Union_long_float_std_string_std_nullopt(std::string _f2) : f2(_f2) {}\n    Union_long_float_std_string_std_nullopt(std::nullopt_t _f3) : f3(_f3) {}\n\n    ~Union_long_float_std_string_std_nullopt() {}\n\n    bool operator==(long f) const {\n        return f0 == f;\n    }\n\n    bool operator==(float f) const {\n        return f1 == f;\n    }\n\n    bool operator==(std::string f) const {\n        return f2 == f;\n    }\n\n    bool operator==(std::nullopt_t f) const {\n        return f3 == f;\n    }\n};\n\nUnion_long_float_std_string_std_nullopt compare_one(Union_long_float_std_string a, Union_long_float_std_string b) {\n    try {\n        // Try to compare long\n        if (typeid(a.f0) == typeid(long) && typeid(b.f0) == typeid(long)) {\n            if (a == b.f0) {\n                return std::nullopt;\n            } else if (a.f0 > b.f0) {\n                return Union_long_float_std_string_std_nullopt(a.f0);\n            } else {\n                return Union_long_float_std_string_std_nullopt(b.f0);\n            }\n        }\n    } catch (...) {}\n\n    try {\n        // Try to compare float\n        if (typeid(a.f1) == typeid(float) && typeid(b.f1) == typeid(float)) {\n            if (a == b.f1) {\n                return std::nullopt;\n            } else if (a.f1 > b.f1) {\n                return Union_long_float_std_string_std_nullopt(a.f1);\n            } else {\n                return Union_long_float_std_string_std_nullopt(b.f1);\n            }\n        }\n    } catch (...) {}\n\n    try {\n        // Try to compare strings as floats\n        if (typeid(a.f2) == typeid(std::string) && typeid(b.f2) == typeid(std::string)) {\n            float af = std::stof(a.f2);\n            float bf = std::stof(b.f2);\n            if (af == bf) {\n                return std::nullopt;\n            } else if (af > bf) {\n                return Union_long_float_std_string_std_nullopt(a.f2);\n            } else {\n                return Union_long_float_std_string_std_nullopt(b.f2);\n            }\n        }\n    } catch (...) {}\n\n    try {\n        // Try to compare mixed types (prioritize string to float conversion)\n        if (typeid(a.f2) == typeid(std::string) && typeid(b.f0) == typeid(long)) {\n            float af = std::stof(a.f2);\n            if (af == b.f0) {\n                return std::nullopt;\n            } else if (af > b.f0) {\n                return Union_long_float_std_string_std_nullopt(a.f2);\n            } else {\n                return Union_long_float_std_string_std_nullopt(b.f0);\n            }\n        } else if (typeid(a.f0) == typeid(long) && typeid(b.f2) == typeid(std::string)) {\n            float bf = std::stof(b.f2);\n            if (a.f0 == bf) {\n                return std::nullopt;\n            } else if (a.f0 > bf) {\n                return Union_long_float_std_string_std_nullopt(a.f0);\n            } else {\n                return Union_long_float_std_string_std_nullopt(b.f2);\n            }\n        }\n    } catch (...) {}\n\n    return std::nullopt;\n}\n", "task_id": "HumanEval_137_compare_one"}
{"name": "HumanEval_138_is_equal_to_sum_even", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even((4))\n// (false)\n// >>> is_equal_to_sum_even((6))\n// (false)\n// >>> is_equal_to_sum_even((8))\n// (true)\nbool is_equal_to_sum_even(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_138_is_equal_to_sum_even.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = is_equal_to_sum_even;\n    assert(candidate((4)) == (false));\n    assert(candidate((6)) == (false));\n    assert(candidate((8)) == (true));\n    assert(candidate((10)) == (true));\n    assert(candidate((11)) == (false));\n    assert(candidate((12)) == (true));\n    assert(candidate((13)) == (false));\n    assert(candidate((16)) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool is_equal_to_sum_even(long n) {\n    // A number cannot be written as the sum of 4 positive even numbers\n    // if it is less than 8 because the smallest sum of 4 positive\n    // even numbers (2 + 2 + 2 + 2) is 8\n    if (n < 8) {\n        return false;\n    }\n    // Check if n is even\n    // An even number can be written as the sum of 4 positive even numbers\n    // if it is at least 8, as explained above\n    return n % 2 == 0;\n}\n\nint main() {\n    assert(is_equal_to_sum_even(4) == false);\n    assert(is_equal_to_sum_even(6) == false);\n    assert(is_equal_to_sum_even(8) == true);\n    assert(is_equal_to_sum_even(10) == true);\n    assert(is_equal_to_sum_even(12) == true);\n    assert(is_equal_to_sum_even(14) == true);\n    assert(is_equal_to_sum_even(16) == true);\n    cout << \"All test cases pass\"<< endl;\n    return 0;\n}\n```", "task_id": "HumanEval_138_is_equal_to_sum_even"}
{"name": "HumanEval_139_special_factorial", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nlong special_factorial(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_139_special_factorial.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nlong factorial(long n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    long result = 1;\n    for (long i = 1; i <= n; ++i) {\n        result *= i;\n    }\n    return result;\n}\n\nlong special_factorial(long n) {\n    long result = 1;\n    for (long i = 1; i <= n; ++i) {\n        result *= factorial(i);\n    }\n    return result;\n}\n\nint main() {\n    // Test cases\n    assert(special_factorial(4) == 288);\n    assert(special_factorial(1) == 1);\n    assert(special_factorial(2) == 2);\n    assert(special_factorial(3) == 12);\n\n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_139_special_factorial"}
{"name": "HumanEval_140_fix_spaces", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\" Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\")\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\" Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_140_fix_spaces.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) == (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) == (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cassert>\n#include <bits/stdc++.h>\n\nstd::string fix_spaces(std::string text) {\n    std::string result;\n    int space_count = 0;\n    bool first_char = true;\n\n    for (char ch : text) {\n        if (ch == ' ') {\n            ++space_count;\n        } else {\n            if (space_count > 2) {\n                result += \"-\";\n            } else if (space_count > 0) {\n                result += std::string(space_count, '_');\n            }\n            // Only add underscores if it isn't the first non-space character.\n            if (!first_char) {\n                result += std::string(space_count == 1 ? 1 : 0, '_');\n            }\n            result += ch;\n            space_count = 0;\n            first_char = false;\n        }\n    }\n    if (space_count > 2) {\n        result += \"-\";\n    } else if (space_count > 0) {\n        result += std::string(space_count, '_');\n    }\n\n    return result;\n}\n\nint main() {\n    // Test cases\n    assert(fix_spaces(\" Example\") == \"Example\");\n    assert(fix_spaces(\" Example 1\") == \"Example_1\");\n    assert(fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert(fix_spaces(\" Example 3\") == \"_Example-3\");\n\n    // Additional test cases\n    assert(fix_spaces(\"  A sequence   of spaces\") == \"_A_sequence_of_spaces\");\n    assert(fix_spaces(\"NoSpacesHere\") == \"NoSpacesHere\");\n    assert(fix_spaces(\"   \") == \"-\");\n    assert(fix_spaces(\"    Leading space\") == \"-Leading_space\");\n    assert(fix_spaces(\"Trailing space   \") == \"Trailing_space-\");\n\n    std::cout << \"All test cases pass.\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_140_fix_spaces"}
{"name": "HumanEval_141_file_name_check", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_141_file_name_check.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"_Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\")) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"@this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\")) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) == (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"s.\")) == (\"No\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nstd::string file_name_check(std::string file_name) {\n    std::vector<std::string> allowed_extensions = {\"txt\", \"exe\", \"dll\"};\n    \n    // Check for exactly one dot '.'\n    size_t dot_pos = file_name.find('.');\n    if (dot_pos == std::string::npos || file_name.find('.', dot_pos + 1) != std::string::npos) {\n        return \"No\";\n    }\n\n    // Split the string into the part before and after the dot\n    std::string before_dot = file_name.substr(0, dot_pos);\n    std::string after_dot = file_name.substr(dot_pos + 1);\n\n    // Check if the substring before the dot is empty\n    if (before_dot.empty()) {\n        return \"No\";\n    }\n\n    // Check if the substring before the dot starts with a letter\n    if (!isalpha(before_dot[0])) {\n        return \"No\";\n    }\n\n    // Count the number of digits in the file name\n    int digit_count = 0;\n    for (char c : file_name) {\n        if (isdigit(c)) {\n            digit_count++;\n        }\n    }\n    if (digit_count > 3) {\n        return \"No\";\n    }\n\n    // Check if the substring after the dot is one of the allowed extensions\n    if (std::find(allowed_extensions.begin(), allowed_extensions.end(), after_dot) == allowed_extensions.end()) {\n        return \"No\";\n    }\n\n    // If all conditions are met, return \"Yes\"\n    return \"Yes\";\n}\n\n// Test cases\nint main() {\n    assert(file_name_check(\"example.txt\") == \"Yes\");\n    assert(file_name_check(\"1example.dll\") == \"No\");\n    assert(file_name_check(\"exampletxtexe\") == \"No\");\n    assert(file_name_check(\"example.\") == \"No\");\n    assert(file_name_check(\".txt\") == \"No\");\n    assert(file_name_check(\"example1234.txt\") == \"No\");\n    assert(file_name_check(\"example.doc\") == \"No\");\n    assert(file_name_check(\"a1b2c3.exe\") == \"Yes\");\n    assert(file_name_check(\"example.exe\") == \"Yes\");\n    assert(file_name_check(\"ex.ample.txt\") == \"No\");\n    \n    std::cout << \"All test cases pass.\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_141_file_name_check"}
{"name": "HumanEval_142_sum_squares", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// \"\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_142_sum_squares.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (6));\n    assert(candidate((std::vector<long>({(long)1, (long)4, (long)9}))) == (14));\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1, (long)1}))) == (9));\n    assert(candidate((std::vector<long>({(long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1, (long)-1}))) == (-3));\n    assert(candidate((std::vector<long>({(long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))) == (-126));\n    assert(candidate((std::vector<long>({(long)-56, (long)-99, (long)1, (long)0, (long)-2}))) == (3030));\n    assert(candidate((std::vector<long>({(long)-1, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)0, (long)-1}))) == (0));\n    assert(candidate((std::vector<long>({(long)-16, (long)-9, (long)-2, (long)36, (long)36, (long)26, (long)-20, (long)25, (long)-40, (long)20, (long)-4, (long)12, (long)-26, (long)35, (long)37}))) == (-14196));\n    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)17, (long)-1, (long)-15, (long)13, (long)-1, (long)14, (long)-14, (long)-12, (long)-5, (long)14, (long)-14, (long)6, (long)13, (long)11, (long)16, (long)16, (long)4, (long)10}))) == (-1448));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// This function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// (long({(long)1, (long)2, (long)3}))\n// >>> lst\n// (long())\n// >>> lst\n// (long({(long)-1, (long)-5, (long)2, (long)-1, (long)-5}))\nlong sum_squares(std::vector<long> lst) {\n    long sum = 0;\n    for(size_t i = 0; i < lst.size(); ++i) {\n        if (i % 3 == 0) {\n            lst[i] = lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            lst[i] = lst[i] * lst[i] * lst[i];\n        }\n        sum += lst[i];\n    }\n    return sum;\n}\n\nint main() {\n    vector<long> v1 = {1, 2, 3};\n    assert(sum_squares(v1) == 35);\n    \n    vector<long> v2 = {};\n    assert(sum_squares(v2) == 0);\n    \n    vector<long> v3 = {-1, -5, 2, -1, -5};\n    assert(sum_squares(v3) == -233);\n\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```\n\nThe function `sum_squares` processes the initial vector according to the specified rules and returns the final sum of the modified vector elements. The main function contains tests to verify the correctness of the function.", "task_id": "HumanEval_142_sum_squares"}
{"name": "HumanEval_143_words_in_sentence", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nstd::string words_in_sentence(std::string sentence) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_143_words_in_sentence.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cmath>\n#include <assert.h>\n\nbool is_prime(int n) {\n    if (n <= 1) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (int i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nstd::string words_in_sentence(std::string sentence) {\n    std::stringstream ss(sentence);\n    std::string word;\n    std::vector<std::string> prime_length_words;\n    \n    while (ss >> word) {\n        if (is_prime(word.length())) {\n            prime_length_words.push_back(word);\n        }\n    }\n\n    std::string result;\n    for (size_t i = 0; i < prime_length_words.size(); ++i) {\n        result += prime_length_words[i];\n        if (i != prime_length_words.size() - 1) {\n            result += \" \";\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    // Test cases\n    assert(words_in_sentence(\"This is a test\") == \"is\");\n    assert(words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert(words_in_sentence(\"prime numbers have unique lengths\") == \"prime numbers unique lengths\");\n    assert(words_in_sentence(\"a\") == \"a\");\n    assert(words_in_sentence(\"hello world\") == \"\");\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_143_words_in_sentence"}
{"name": "HumanEval_144_simplify", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify((\"1/5\"), (\"5/1\"))\n// (true)\n// >>> simplify((\"1/6\"), (\"2/1\"))\n// (false)\n// >>> simplify((\"7/10\"), (\"10/2\"))\n// (false)\nbool simplify(std::string x, std::string n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_144_simplify.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\")) == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/5\"), (\"1/5\")) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// (true)\n// >>> simplify(\"1/6\", \"2/1\")\n// (false)\n// >>> simplify(\"7/10\", \"10/2\")\n// (false)\nbool simplify(std::string x, std::string n) {\n    // Function to split the fraction string into numerator and denominator\n    auto split_fraction = [](const std::string& frac) -> std::pair<int, int> {\n        auto pos = frac.find('/');\n        int numerator = std::stoi(frac.substr(0, pos));\n        int denominator = std::stoi(frac.substr(pos + 1));\n        return {numerator, denominator};\n    };\n\n    // Split the fractions\n    auto [x_num, x_den] = split_fraction(x);\n    auto [n_num, n_den] = split_fraction(n);\n\n    // Multiply the fractions: (x_num / x_den) * (n_num / n_den)\n    int result_num = x_num * n_num;\n    int result_den = x_den * n_den;\n\n    // Simplify the fraction by dividing by gcd\n    int gcd = std::gcd(result_num, result_den);\n\n    result_num /= gcd;\n    result_den /= gcd;\n\n    // If the simplified denominator is 1, it's a whole number\n    return result_den == 1;\n}\n\nint main() {\n    assert(simplify(\"1/5\", \"5/1\") == true);\n    assert(simplify(\"1/6\", \"2/1\") == false);\n    assert(simplify(\"7/10\", \"10/2\") == false);\n    assert(simplify(\"3/4\", \"4/3\") == true);    // Additional test case\n    return 0;\n}\n```", "task_id": "HumanEval_144_simplify"}
{"name": "HumanEval_145_order_by_points", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts the given vector of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original vector.\n// For example:\n// >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long> order_by_points(std::vector<long> nums) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_145_order_by_points.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0, (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234, (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1, (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) == (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2, (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11}))) == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0, (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76, (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\nint sum_of_digits(long num) {\n    num = std::abs(num);\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\nstd::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<std::pair<long, int>> nums_index;\n    for (int i = 0; i < nums.size(); ++i) {\n        nums_index.push_back({nums[i], i});\n    }\n\n    std::sort(nums_index.begin(), nums_index.end(), [](const std::pair<long, int>& a, const std::pair<long, int>& b) {\n        int sum_a = sum_of_digits(a.first);\n        int sum_b = sum_of_digits(b.first);\n        if (sum_a == sum_b) {\n            return a.second < b.second;\n        }\n        return sum_a < sum_b;\n    });\n\n    std::vector<long> result;\n    for (auto& pair : nums_index) {\n        result.push_back(pair.first);\n    }\n\n    return result;\n}\n\n// Example usage\nint main() {\n    auto result1 = order_by_points(std::vector<long>({1, 11, -1, -11, -12}));\n    assert(result1 == std::vector<long>({-1, -11, 1, -12, 11}));\n\n    auto result2 = order_by_points(std::vector<long>());\n    assert(result2 == std::vector<long>());\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_145_order_by_points"}
{"name": "HumanEval_146_specialFilter", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long> nums) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_146_specialFilter.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43, (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71, (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1}))) == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Function to check if a digit is odd\nbool isOdd(int digit) {\n    return digit % 2 != 0;\n}\n\n// Function to get the first digit of a number\nint getFirstDigit(long num) {\n    num = std::abs(num);\n    while (num >= 10) {\n        num /= 10;\n    }\n    return num;\n}\n\n// Function to get the last digit of a number\nint getLastDigit(long num) {\n    num = std::abs(num);\n    return num % 10;\n}\n\n// Write a function that takes a vector of numbers as input and returns \n// the number of elements in the vector that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\nlong specialFilter(std::vector<long> nums) {\n    long count = 0;\n\n    for (long num : nums) {\n        if (num > 10) {\n            int firstDigit = getFirstDigit(num);\n            int lastDigit = getLastDigit(num);\n\n            if (isOdd(firstDigit) && isOdd(lastDigit)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n\n// Example usage and test cases\nint main() {\n    assert(specialFilter({15, -73, 14, -15}) == 1);\n    assert(specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nHere's the complete code according to the requirements in the docstring. This function `specialFilter` takes a vector of long integers and returns the count of numbers that are greater than 10 with both first and last digits odd.", "task_id": "HumanEval_146_specialFilter"}
{"name": "HumanEval_147_get_max_triples", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_147_get_max_triples.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = get_max_triples;\n    assert(candidate((5)) == (1));\n    assert(candidate((6)) == (4));\n    assert(candidate((10)) == (36));\n    assert(candidate((100)) == (53361));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\nusing namespace std;\n\n// You are given a positive integer n. You have to create an integer vector a of length n.\n// For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples((5))\n// (1)\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nlong get_max_triples(long n) {\n    vector<long> a(n);\n    for (long i = 1; i <= n; ++i) {\n        a[i-1] = i * i - i + 1;\n    }\n    \n    // Count the remainders of elements modulo 3\n    vector<long> mod_count(3, 0);\n    for (long x : a) {\n        ++mod_count[x % 3];\n    }\n\n    long result = 0;\n    // We need to count the number of triplets where the sum of the triplet\n    // is a multiple of 3\n\n    // Case 1: All three numbers from the same mod group\n    // For mod 0: C(mod_count[0], 3)\n    result += (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) / 6;\n    // For mod 1: C(mod_count[1], 3)\n    result += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) / 6;\n    // For mod 2: C(mod_count[2], 3)\n    result += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) / 6;\n    \n    // Case 2: One number from each mod group\n    // C(mod_count[0], 1) * C(mod_count[1], 1) * C(mod_count[2], 1)\n    result += mod_count[0] * mod_count[1] * mod_count[2];\n\n    return result;\n}\n\nint main() {\n    assert(get_max_triples(5) == 1);\n    assert(get_max_triples(10) == 8);\n    assert(get_max_triples(15) == 35);\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}\n```", "task_id": "HumanEval_147_get_max_triples"}
{"name": "HumanEval_148_bf", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a tuple containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf((\"Jupiter\"), (\"Neptune\"))\n// (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"}))\n// >>> bf((\"Earth\"), (\"Mercury\"))\n// (std::vector<std::string>(\"Venus\"))\n// >>> bf((\"Mercury\"), (\"Uranus\"))\n// (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"}))\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_148_bf.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"), (\"Neptune\")) == (std::vector<std::string>({(std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Mercury\")) == (std::vector<std::string>({(std::string)\"Venus\"})));\n    assert(candidate((\"Mercury\"), (\"Uranus\")) == (std::vector<std::string>({(std::string)\"Venus\", (std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\"})));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == (std::vector<std::string>({(std::string)\"Earth\", (std::string)\"Mars\", (std::string)\"Jupiter\", (std::string)\"Saturn\", (std::string)\"Uranus\"})));\n    assert(candidate((\"Earth\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Mars\"), (\"Earth\")) == (std::vector<std::string>()));\n    assert(candidate((\"Jupiter\"), (\"Makemake\")) == (std::vector<std::string>()));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::vector<std::string> bf(std::string planet1, std::string planet2) {\n    std::vector<std::string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    std::unordered_map<std::string, int> planet_indices;\n    \n    for (int i = 0; i < planets.size(); ++i) {\n        planet_indices[planets[i]] = i;\n    }\n    \n    if (planet_indices.find(planet1) == planet_indices.end() || planet_indices.find(planet2) == planet_indices.end()) {\n        return {};\n    }\n    \n    int idx1 = planet_indices[planet1];\n    int idx2 = planet_indices[planet2];\n    \n    if (idx1 > idx2) {\n        std::swap(idx1, idx2);\n    }\n    \n    std::vector<std::string> result;\n    for (int i = idx1 + 1; i < idx2; ++i) {\n        result.push_back(planets[i]);\n    }\n    \n    return result;\n}\n\n// Test cases\nint main() {\n    assert(bf(\"Jupiter\", \"Neptune\") == std::vector<std::string>({\"Saturn\", \"Uranus\"}));\n    assert(bf(\"Earth\", \"Mercury\") == std::vector<std::string>({\"Venus\"}));\n    assert(bf(\"Mercury\", \"Uranus\") == std::vector<std::string>({\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert(bf(\"Pluto\", \"Mercury\").empty());\n    assert(bf(\"Earth\", \"Pluto\").empty());\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```", "task_id": "HumanEval_148_bf"}
{"name": "HumanEval_149_sorted_list_sum", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_149_sorted_list_sum.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\", (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cassert>\n#include <bits/stdc++.h>\n\n// Write a function that accepts a vector of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted vector with a sorted order,\n// The vector is always a vector of strings and never a vector of numbers,\n// and it may contain duplicates.\n// The order of the vector should be ascending by length of each word, and you\n// should return the vector sorted by that rule.\n// If two words have the same length, sort the vector alphabetically.\n// The function should return a vector of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"ab\", (std::string)\"cd\"}))\n\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst) {\n    // Remove words with odd lengths\n    lst.erase(std::remove_if(lst.begin(), lst.end(), [](const std::string &s) {\n                return s.length() % 2 != 0;\n              }), lst.end());\n\n    // Sort the words first by length, then alphabetically\n    std::sort(lst.begin(), lst.end(), [](const std::string &a, const std::string &b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n\n    return lst;\n}\n\n// Test cases\nint main() {\n    std::vector<std::string> list1 = {\"aa\", \"a\", \"aaa\"};\n    std::vector<std::string> sorted1 = sorted_list_sum(list1);\n    assert(sorted1 == std::vector<std::string>({\"aa\"}));\n\n    std::vector<std::string> list2 = {\"ab\", \"a\", \"aaa\", \"cd\"};\n    std::vector<std::string> sorted2 = sorted_list_sum(list2);\n    assert(sorted2 == std::vector<std::string>({\"ab\", \"cd\"}));\n\n    std::vector<std::string> list3 = {\"abcd\", \"ef\", \"gh\", \"ijklm\", \"mnop\", \"qr\"};\n    std::vector<std::string> sorted3 = sorted_list_sum(list3);\n    assert(sorted3 == std::vector<std::string>({\"ef\", \"gh\", \"qr\", \"abcd\", \"mnop\"}));\n\n    std::vector<std::string> list4 = {\"a\", \"b\"};\n    std::vector<std::string> sorted4 = sorted_list_sum(list4);\n    assert(sorted4 == std::vector<std::string>({}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_149_sorted_list_sum"}
{"name": "HumanEval_150_x_or_y", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_150_x_or_y.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = x_or_y;\n    assert(candidate((7), (34), (12)) == (34));\n    assert(candidate((15), (8), (5)) == (5));\n    assert(candidate((3), (33), (5212)) == (33));\n    assert(candidate((1259), (3), (52)) == (3));\n    assert(candidate((7919), (-1), (12)) == (-1));\n    assert(candidate((3609), (1245), (583)) == (583));\n    assert(candidate((91), (56), (129)) == (129));\n    assert(candidate((6), (34), (1234)) == (1234));\n    assert(candidate((1), (2), (0)) == (0));\n    assert(candidate((2), (2), (0)) == (2));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Function to check if a number is prime\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    for (long i = 5; i * i <= n; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\n// A simple program which should return the value of x if n is\n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y((7), (34), (12))\n// (34)\n// >>> x_or_y((15), (8), (5))\n// (5)\nlong x_or_y(long n, long x, long y) {\n    return is_prime(n) ? x : y;\n}\n\n// Test cases\nint main() {\n    assert(x_or_y(7, 34, 12) == 34);\n    assert(x_or_y(15, 8, 5) == 5);\n    assert(x_or_y(2, 100, 200) == 100);\n    assert(x_or_y(4, 99, 101) == 101);\n    assert(x_or_y(23, 30, 40) == 30);\n\n    std::cout << \"All test cases passed\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_150_x_or_y"}
{"name": "HumanEval_151_double_the_difference", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers, return the sum of squares of the numbers\n// in the vector that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1, (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1, (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9, (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n// (0)\n// If the input vector is empty, return 0.\nlong double_the_difference(std::vector<float> lst) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_151_double_the_difference.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0f, (float)4.0f}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1f, (float)0.2f, (float)0.3f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0f, (float)-20.0f, (float)-30.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2f, (float)3.0f, (float)5.0f}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f, (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f}))) == (165));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <bits/stdc++.h>\n\nlong double_the_difference(std::vector<float> lst) {\n    long sum_of_squares = 0;\n\n    for (float num : lst) {\n        // Check if the number is an integer and odd\n        if (num >= 0 && std::floor(num) == num && ((long)num) % 2 != 0) {\n            long int_num = (long)num;\n            sum_of_squares += int_num * int_num;\n        }\n    }\n\n    return sum_of_squares;\n}\n\nint main() {\n    assert(double_the_difference(std::vector<float>({(long)1, (long)3, (long)2, (long)0})) == 10);\n    assert(double_the_difference(std::vector<float>({(long)-1, (long)-2, (long)0})) == 0);\n    assert(double_the_difference(std::vector<float>({(long)9, (long)-2})) == 81);\n    assert(double_the_difference(std::vector<float>({(long)0})) == 0);\n    assert(double_the_difference(std::vector<float>({})) == 0);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}\n```\n\nThis code implements the function `double_the_difference` which calculates the sum of squares of the odd numbers in the input vector, ignoring negative numbers and non-integer numbers. It includes a `main` function that tests the `double_the_difference` function against the specified test cases, asserting that the results are as expected. If all assertions pass, it prints \"All test cases passed!\".", "task_id": "HumanEval_151_double_the_difference"}
{"name": "HumanEval_152_compare", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_152_compare.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two vectors of scores and guesses of equal length, where each index shows a match. \n// Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0, (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4, (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4, (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long> game, std::vector<long> guess) {\n    assert(game.size() == guess.size()); // Ensure vectors are of the same length\n    std::vector<long> differences;\n    for (size_t i = 0; i < game.size(); ++i) {\n        differences.push_back(abs(game[i] - guess[i]));\n    }\n    return differences;\n}\n\nint main() {\n    std::vector<long> result1 = compare({1, 2, 3, 4, 5, 1}, {1, 2, 3, 4, 2, -2});\n    std::vector<long> expected1 = {0, 0, 0, 0, 3, 3};\n    assert(result1 == expected1);\n\n    std::vector<long> result2 = compare({0, 5, 0, 0, 0, 4}, {4, 1, 1, 0, 0, -2});\n    std::vector<long> expected2 = {4, 4, 1, 0, 0, 6};\n    assert(result2 == expected2);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_152_compare"}
{"name": "HumanEval_153_Strongest_Extension", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_153_Strongest_Extension.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// You will be given the name of a class (a string) and a vector of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the vector.\n// For example, if you are given \"Slices\" as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"CC\"})))\n// (\"my_class.AA\")\n\nstd::string Strongest_Extension(std::string class_name, std::vector<std::string> extensions) {\n    if (extensions.empty()) {\n        return class_name;\n    }\n    \n    std::string strongest_extension = extensions[0];\n    int max_strength = std::count_if(strongest_extension.begin(), strongest_extension.end(), ::isupper) - \n                       std::count_if(strongest_extension.begin(), strongest_extension.end(), ::islower);\n    \n    for (const auto& extension : extensions) {\n        int cap = std::count_if(extension.begin(), extension.end(), ::isupper);\n        int sm = std::count_if(extension.begin(), extension.end(), ::islower);\n        int strength = cap - sm;\n        \n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}\n\n// Test cases\nint main() {\n    assert(Strongest_Extension(\"Slices\", {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"}) == \"Slices.SErviNGSliCes\");\n    assert(Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n    assert(Strongest_Extension(\"Example\", {\"aB\", \"AB\", \"aa\"}) == \"Example.AB\");\n    assert(Strongest_Extension(\"Test\", {\"xyz\", \"XYz\", \"XYZ\"}) == \"Test.XYZ\");\n    assert(Strongest_Extension(\"Empty\", {}) == \"Empty\");\n\n    std::cout << \"All test cases pass.\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_153_Strongest_Extension"}
{"name": "HumanEval_154_cycpattern_check", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check((\"abcd\"), (\"abd\"))\n// (false)\n// >>> cycpattern_check((\"hello\"), (\"ell\"))\n// (true)\n// >>> cycpattern_check((\"whassup\"), (\"psus\"))\n// (false)\n// >>> cycpattern_check((\"abab\"), (\"baa\"))\n// (true)\n// >>> cycpattern_check((\"efef\"), (\"eeff\"))\n// (false)\n// >>> cycpattern_check((\"himenss\"), (\"simen\"))\n// (true)\nbool cycpattern_check(std::string a, std::string b) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_154_cycpattern_check.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) == (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) == (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nbool cycpattern_check(std::string a, std::string b) {\n    // If lenght of 'b' is greater than 'a', no rotation can be a substring\n    if(b.length() > a.length()) {\n        return false;\n    }\n\n    // Concatenate 'b' with itself\n    std::string b_extended = b + b;\n\n    // Check if any rotation of 'b' is a substring of 'a'\n    return a.find(b) != std::string::npos || a.find(b_extended) != std::string::npos;\n}\n\nint main() {\n    assert(cycpattern_check(\"abcd\", \"abd\") == false);\n    assert(cycpattern_check(\"hello\", \"ell\") == true);\n    assert(cycpattern_check(\"whassup\", \"psus\") == false);\n    assert(cycpattern_check(\"abab\", \"baa\") == true);\n    assert(cycpattern_check(\"efef\", \"eeff\") == false);\n    assert(cycpattern_check(\"himenss\", \"simen\") == true);\n\n    std::cout << \"All test cases passed.\\n\";\n    return 0;\n}\n```\n\nThis function `cycpattern_check` first checks if the length of `b` is greater than `a`, in which case it returns `false` since no rotation of a longer string can be a substring of a shorter one. It then concatenates `b` with itself to check if any rotation of `b` is a substring of `a`. The function finally returns `true` if `a` contains any rotation of `b`, otherwise `false`. The `main` function contains assertions for testing various cases to ensure the correct implementation of the function.", "task_id": "HumanEval_154_cycpattern_check"}
{"name": "HumanEval_155_even_odd_count", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_155_even_odd_count.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7)) == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1, 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211)) == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3, 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347)) == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1, 0)));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Given an integer, return a tuple that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// (std::make_tuple(1, 1))\n// >>> even_odd_count(123)\n// (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\n    long even_count = 0;\n    long odd_count = 0;\n    \n    // Make sure to handle negative numbers\n    num = abs(num);\n    \n    do {\n        long digit = num % 10;\n        if (digit % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n        num /= 10;\n    } while (num > 0);\n    \n    return std::make_tuple(even_count, odd_count);\n}\n\nint main() {\n    // Test cases\n    assert(even_odd_count(-12) == std::make_tuple(1, 1));\n    assert(even_odd_count(123) == std::make_tuple(1, 2));\n    assert(even_odd_count(0) == std::make_tuple(1, 0));\n    assert(even_odd_count(4444) == std::make_tuple(4, 0));\n    assert(even_odd_count(13579) == std::make_tuple(0, 5));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_155_even_odd_count"}
{"name": "HumanEval_156_int_to_mini_roman", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n// (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_156_int_to_mini_roman.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19)) == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251)) == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500)) == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4)) == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90)) == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532)) == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994)) == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include<assert.h>\n#include<bits/stdc++.h>\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// (\"xix\")\n// >>> int_to_mini_roman(152)\n// (\"clii\")\n// >>> int_to_mini_roman(426)\n// (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n\n    std::string result;\n    for (const auto& pair : roman_numerals) {\n        while (number >= pair.first) {\n            result += pair.second;\n            number -= pair.first;\n        }\n    }\n    return result;\n}\n\nint main() {\n    assert(int_to_mini_roman(19) == \"xix\");\n    assert(int_to_mini_roman(152) == \"clii\");\n    assert(int_to_mini_roman(426) == \"cdxxvi\");\n    assert(int_to_mini_roman(1000) == \"m\");\n    return 0;\n}\n```", "task_id": "HumanEval_156_int_to_mini_roman"}
{"name": "HumanEval_157_right_angle_triangle", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_157_right_angle_triangle.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3), (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\nbool right_angle_triangle(long a, long b, long c) {\n    // To check if a triangle is a right-angle triangle, we can use the Pythagoras theorem.\n    // a^2 + b^2 = c^2 for a right-angled triangle with c being the hypotenuse.\n    // So we need to check three cases, considering each side as hypotenuse once.\n    \n    // Sort the sides to make sure the largest side is selected as c\n    std::vector<long> sides = {a, b, c};\n    std::sort(sides.begin(), sides.end());\n\n    // Now sides[2] is the largest side, so it can be considered the hypotenuse.\n    return (sides[0] * sides[0] + sides[1] * sides[1]) == (sides[2] * sides[2]);\n}\n\nint main() {\n    // Test cases\n    assert(right_angle_triangle(3, 4, 5) == true); // 3^2 + 4^2 == 5^2\n    assert(right_angle_triangle(1, 2, 3) == false); // Not a right angle triangle\n    assert(right_angle_triangle(6, 8, 10) == true); // 6^2 + 8^2 == 10^2\n    assert(right_angle_triangle(5, 12, 13) == true); // 5^2 + 12^2 == 13^2\n    assert(right_angle_triangle(7, 24, 25) == true); // 7^2 + 24^2 == 25^2\n    assert(right_angle_triangle(2, 2, 3) == false); // Not a right angle triangle\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_157_right_angle_triangle"}
{"name": "HumanEval_158_find_max", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts a vector of strings.\n// The vector contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>> find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string> words) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_158_find_max.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::string find_max(std::vector<std::string> words) {\n    std::string result;\n    int max_unique = 0;\n\n    for(auto &word : words) {\n        std::set<char> unique_chars(word.begin(), word.end());\n        int unique_count = unique_chars.size();\n        if (unique_count > max_unique || (unique_count == max_unique && word < result)) {\n            max_unique = unique_count;\n            result = word;\n        }\n    }\n    return result;\n}\n\nint main() {\n    assert(find_max(std::vector<std::string>({\"name\", \"of\", \"string\"})) == \"string\");\n    assert(find_max(std::vector<std::string>({\"name\", \"enam\", \"game\"})) == \"enam\");\n    assert(find_max(std::vector<std::string>({\"aaaaaaa\", \"bb\", \"cc\"})) == \"aaaaaaa\");\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```\n\nThis code defines the function `find_max` to find the word with the maximum number of unique characters in a vector of strings. If there are multiple such words, it returns the one that comes first in lexicographical order. The function uses a set to determine the number of unique characters in each word and updates the result accordingly. The main function contains test cases using `assert` to ensure the correctness of the `find_max` function.", "task_id": "HumanEval_158_find_max"}
{"name": "HumanEval_159_eat", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a vector of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat((5), (6), (10))\n// (std::vector<long>({(long)11, (long)4}))\n// >>> eat((4), (8), (9))\n// (std::vector<long>({(long)12, (long)1}))\n// >>> eat((1), (10), (10))\n// (std::vector<long>({(long)11, (long)0}))\n// >>> eat((2), (11), (5))\n// (std::vector<long>({(long)7, (long)0}))\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long number, long need, long remaining) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_159_eat.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6), (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4), (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1), (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2), (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4), (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4), (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\nstd::vector<long> eat(long number, long need, long remaining) {\n    long totalEaten, carrotsLeft;\n\n    // If there are enough carrots to satisfy the need\n    if (remaining >= need) {\n        totalEaten = number + need;\n        carrotsLeft = remaining - need;\n    } else {\n        // If not enough carrots to satisfy the need\n        totalEaten = number + remaining;\n        carrotsLeft = 0;\n    }\n\n    return { totalEaten, carrotsLeft };\n}\n\nint main() {\n    assert(eat(5, 6, 10) == std::vector<long>({11, 4}));\n    assert(eat(4, 8, 9) == std::vector<long>({12, 1}));\n    assert(eat(1, 10, 10) == std::vector<long>({11, 0}));\n    assert(eat(2, 11, 5) == std::vector<long>({7, 0}));\n    \n    std::cout << \"All tests passed!\\n\";\n    return 0;\n}\n```", "task_id": "HumanEval_159_eat"}
{"name": "HumanEval_160_do_algebra", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two vectors operator, and operand. The first vector has basic algebra operations, and \n// the second vector is a vector of integers. Use the two given vectors to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// vector = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator vector is equal to the length of operand vector minus one.\n// Operand is a vector of of non-negative integers.\n// Operator vector has at least one operator, and operand vector has at least two operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_160_do_algebra.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"//\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4}))) == (8));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand) {\n    // Ensure operator and operand constraints are met\n    assert(op.size() == operand.size() - 1);\n    assert(!operand.empty());\n    assert(op.size() > 0);\n\n    // Combine operands and operators into a single algebraic expression string\n    std::ostringstream expression;\n    for (size_t i = 0; i < op.size(); ++i) {\n        expression << operand[i] << ' ' << op[i] << ' ';\n    }\n    expression << operand.back();\n\n    // Define a map to convert operator strings to corresponding lambda functions\n    std::map<std::string, std::function<long (long, long)>> operations;\n    operations[\"+\"] = [](long a, long b) { return a + b; };\n    operations[\"-\"] = [](long a, long b) { return a - b; };\n    operations[\"*\"] = [](long a, long b) { return a * b; };\n    operations[\"//\"] = [](long a, long b) { return a / b; };\n    operations[\"**\"] = [](long a, long b) { return pow(a, b); };\n\n    // Evaluate the expression as calculated\n    std::vector<long> nums;\n    std::vector<std::string> ops;\n    \n    nums.push_back(operand[0]);\n\n    for (size_t i = 0; i < op.size(); ++i) {\n        nums.push_back(operand[i + 1]);\n        ops.push_back(op[i]);\n    }\n\n    // Evaluate exponentiation\n    for (size_t i = 0; i < ops.size();) {\n        if (ops[i] == \"**\") {\n            nums[i] = operations[\"**\"](nums[i], nums[i + 1]);\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        } else {\n            ++i;\n        }\n    }\n\n    // Evaluate multiplication and division\n    for (size_t i = 0; i < ops.size();) {\n        if (ops[i] == \"*\" || ops[i] == \"//\") {\n            long result = operations[ops[i]](nums[i], nums[i + 1]);\n            nums[i] = result;\n            nums.erase(nums.begin() + i + 1);\n            ops.erase(ops.begin() + i);\n        } else {\n            ++i;\n        }\n    }\n\n    // Evaluate addition and subtraction\n    long result = nums[0];\n    for (size_t i = 0; i < ops.size(); ++i) {\n        result = operations[ops[i]](result, nums[i + 1]);\n    }\n\n    return result;\n}\n\nint main() {\n    std::vector<std::string> operator_vec = { \"+\", \"*\", \"-\" };\n    std::vector<long> operand_vec = { 2, 3, 4, 5 };\n    long result = do_algebra(operator_vec, operand_vec);\n    std::cout << \"Result: \" << result << std::endl;  // Should print 9\n    assert(result == 9);\n\n    return 0;\n}\n```\n\nThis code defines a function `do_algebra` that takes two vectors: `op` (a vector of strings representing operators) and `operand` (a vector of integers). The function evaluates the algebraic expression represented by these two vectors, correctly handling the order of operations for exponentiation (`**`), multiplication and division (`*`, `//`), and addition and subtraction (`+`, `-`). The main function demonstrates the function usage and performs an assertion test to validate the expected output.", "task_id": "HumanEval_160_do_algebra"}
{"name": "HumanEval_161_solve", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_161_solve.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <cassert>\n#include <bits/stdc++.h>\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n    bool has_letters = false;\n    for (char c : s) {\n        if (isalpha(c)) {\n            has_letters = true;\n            break;\n        }\n    }\n\n    if (has_letters) {\n        for (char& c : s) {\n            if (islower(c)) {\n                c = toupper(c);\n            } else if (isupper(c)) {\n                c = tolower(c);\n            }\n        }\n    } else {\n        std::reverse(s.begin(), s.end());\n    }\n\n    return s;\n}\n\n// Test cases\nint main() {\n    assert(solve(\"1234\") == \"4321\");\n    assert(solve(\"ab\") == \"AB\");\n    assert(solve(\"#a@C\") == \"#A@c\");\n    assert(solve(\"abc123\") == \"ABC123\");\n    assert(solve(\"123!@#\") == \"#@!321\");\n    assert(solve(\"a\") == \"A\");\n    assert(solve(\"Z\") == \"z\");\n    assert(solve(\"\") == \"\");\n    assert(solve(\"zyXW\") == \"ZYxw\");\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_161_solve"}
{"name": "HumanEval_162_string_to_md5", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nstd::optional<std::string> string_to_md5(std::string text) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_162_string_to_md5.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = string_to_md5;\n    assert(candidate((\"Hello world\")) == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(candidate((\"\")) == std::nullopt);\n    assert(candidate((\"A B C\")) == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert(candidate((\"password\")) == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\n#include <openssl/md5.h>\n\n// Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return None.\n// >>> string_to_md5((\"Hello world\"))\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\n\nstd::optional<std::string> string_to_md5(std::string text) {\n    if (text.empty()) {\n        return std::nullopt;\n    }\n    \n    unsigned char digest[MD5_DIGEST_LENGTH];\n    MD5((unsigned char*)text.c_str(), text.size(), (unsigned char*)&digest);    \n\n    std::ostringstream oss;\n    for(int i = 0; i < MD5_DIGEST_LENGTH; ++i) {\n        oss << std::hex << std::setw(2) << std::setfill('0') << (int)digest[i];\n    }\n    \n    return oss.str();\n}\n\nint main() {\n    assert(string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert(!string_to_md5(\"\").has_value());\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_162_string_to_md5"}
{"name": "HumanEval_163_generate_integers", "language": "cpp", "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers((2), (8))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((8), (2))\n// (std::vector<long>({(long)2, (long)4, (long)6, (long)8}))\n// >>> generate_integers((10), (14))\n// (std::vector<long>())\nstd::vector<long> generate_integers(long a, long b) {\n", "doctests": "transform", "original": "/work/arjunguha-research-group/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/originals-with-cleaned-doctests/HumanEval_163_generate_integers.py", "prompt_terminology": "reworded", "tests": "}\nint main() {\n    auto candidate = generate_integers;\n    assert(candidate((2), (10)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((10), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((132), (2)) == (std::vector<long>({(long)2, (long)4, (long)6, (long)8})));\n    assert(candidate((17), (89)) == (std::vector<long>()));\n}\n", "stop_tokens": ["\n}"], "gpt_solution": "```cpp\n#include <assert.h>\n#include <bits/stdc++.h>\nusing namespace std;\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// std::vector<long>({2, 4, 6, 8})\n// >>> generate_integers(8, 2)\n// std::vector<long>({2, 4, 6, 8})\n// >>> generate_integers(10, 14)\n// std::vector<long>()\n\nstd::vector<long> generate_integers(long a, long b) {\n    std::vector<long> even_digits;\n\n    // Ensure that a is less than or equal to b\n    if (a > b) std::swap(a, b);\n\n    // Loop through the range and collect even digits\n    for (long i = a; i <= b; ++i) {\n        if (i % 2 == 0) {\n            even_digits.push_back(i);\n        }\n    }\n\n    return even_digits;\n}\n\nint main() {\n    // Test cases\n    assert((generate_integers(2, 8) == std::vector<long>({2, 4, 6, 8})));\n    assert((generate_integers(8, 2) == std::vector<long>({2, 4, 6, 8})));\n    assert((generate_integers(10, 14) == std::vector<long>()));\n    assert((generate_integers(1, 1) == std::vector<long>()));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}\n```", "task_id": "HumanEval_163_generate_integers"}
