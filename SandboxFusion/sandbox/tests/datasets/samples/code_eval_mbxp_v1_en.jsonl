{"id": 1, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```python\n\n\ndef find_Min_Sum(num):\n    \"\"\"\n    Write a python function to find minimum sum of factors of a given number.\n    >>> find_Min_Sum(12)\n    7\n    >>> find_Min_Sum(105)\n    15\n    >>> find_Min_Sum(2)\n    2\n    \"\"\"\n\n```", "canonical_solution": "\n\ndef find_Min_Sum(num):\n    \"\"\"\n    Write a python function to find minimum sum of factors of a given number.\n    >>> find_Min_Sum(12)\n    7\n    >>> find_Min_Sum(105)\n    15\n    >>> find_Min_Sum(2)\n    2\n    \"\"\"\n\n     \n    sum = 0\n    i = 2\n    while(i * i <= num): \n        while(num % i == 0): \n            sum += i \n            num /= i \n        i += 1\n    sum += num \n    return sum", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\nMETADATA = {}\\n\\n\\ndef x_check(candidate):\\n    assert candidate(12) == 7\\n    assert candidate(105) == 15\\n    assert candidate(2) == 2\\n\\n\\n\\nx_check(find_Min_Sum)\"}", "labels": "{\"task_id\": \"MBPP/511\", \"programming_language\": \"python\", \"execution_language\": \"python\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```python\\ndef find_char_long(text):\\n    \\\"\\\"\\\"\\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\\n    >>> find_char_long('Please move back to stream')\\n    ['Please', 'move', 'back', 'stream']\\n    >>> find_char_long('Jing Eco and Tech')\\n    ['Jing', 'Tech']\\n    >>> find_char_long('Jhingai wulu road Zone 3')\\n    ['Jhingai', 'wulu', 'road', 'Zone']\\n    \\\"\\\"\\\"\\n```\\n\\nAnswer:\\n```python\\ndef find_char_long(text):\\n    \\\"\\\"\\\"\\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\\n    >>> find_char_long('Please move back to stream')\\n    ['Please', 'move', 'back', 'stream']\\n    >>> find_char_long('Jing Eco and Tech')\\n    ['Jing', 'Tech']\\n    >>> find_char_long('Jhingai wulu road Zone 3')\\n    ['Jhingai', 'wulu', 'road', 'Zone']\\n    \\\"\\\"\\\"\\n    import re\\n\\n    return re.findall(r\\\"\\\\b\\\\w{4,}\\\\b\\\", text)\\n```\\n\\n----------------\"}"}
{"id": 2, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```python\n\n\ndef count_element_freq(test_tuple):\n  \"\"\"\n  Write a function to count the element frequency in the mixed nested tuple.\n  >>> count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) )\n  {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n  >>> count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) )\n  {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n  >>> count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) )\n  {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n  \"\"\"\n\n```", "canonical_solution": "\n\ndef count_element_freq(test_tuple):\n  \"\"\"\n  Write a function to count the element frequency in the mixed nested tuple.\n  >>> count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) )\n  {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n  >>> count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) )\n  {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n  >>> count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) )\n  {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n  \"\"\"\n\n  def flatten(test_tuple): \n  \tfor tup in test_tuple: \n  \t\tif isinstance(tup, tuple): \n  \t\t\tyield from flatten(tup) \n  \t\telse: \n  \t\t\tyield tup \n  \n  res = {}\n  for ele in flatten(test_tuple):\n    if ele not in res:\n      res[ele] = 0\n    res[ele] += 1\n  return (res) ", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\nMETADATA = {}\\n\\n\\ndef x_check(candidate):\\n    assert candidate((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\\n    assert candidate((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\\n    assert candidate((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\\n\\n\\n\\nx_check(count_element_freq)\"}", "labels": "{\"task_id\": \"MBPP/512\", \"programming_language\": \"python\", \"execution_language\": \"python\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```python\\ndef find_char_long(text):\\n    \\\"\\\"\\\"\\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\\n    >>> find_char_long('Please move back to stream')\\n    ['Please', 'move', 'back', 'stream']\\n    >>> find_char_long('Jing Eco and Tech')\\n    ['Jing', 'Tech']\\n    >>> find_char_long('Jhingai wulu road Zone 3')\\n    ['Jhingai', 'wulu', 'road', 'Zone']\\n    \\\"\\\"\\\"\\n```\\n\\nAnswer:\\n```python\\ndef find_char_long(text):\\n    \\\"\\\"\\\"\\n    Write a function to find all words which are at least 4 characters long in a string by using regex.\\n    >>> find_char_long('Please move back to stream')\\n    ['Please', 'move', 'back', 'stream']\\n    >>> find_char_long('Jing Eco and Tech')\\n    ['Jing', 'Tech']\\n    >>> find_char_long('Jhingai wulu road Zone 3')\\n    ['Jhingai', 'wulu', 'road', 'Zone']\\n    \\\"\\\"\\\"\\n    import re\\n\\n    return re.findall(r\\\"\\\\b\\\\w{4,}\\\\b\\\", text)\\n```\\n\\n----------------\"}"}
{"id": 465, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum sum of factors of a given number.\n * > findMinSum(12)\n * 7\n * > findMinSum(105)\n * 15\n * > findMinSum(2)\n * 2\n */\nint findMinSum(int num) {\n\n```", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a c++ function to find minimum sum of factors of a given number.\n * > findMinSum(12)\n * 7\n * > findMinSum(105)\n * 15\n * > findMinSum(2)\n * 2\n */\nint findMinSum(int num) {\n\n    exit(0);\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\ntemplate <typename T> bool compare(T a, T b){ \\n    return a == b; \\n}\\n\\nint main(int argc, char* argv[]) {\\n    int x0 = findMinSum(12);\\n    if (!(compare(x0, 7))) {\\n        throw runtime_error(\\\"Exception -- test case 0 did not pass.\\\");\\n    }\\n\\n    int x1 = findMinSum(105);\\n    if (!(compare(x1, 15))) {\\n        throw runtime_error(\\\"Exception -- test case 1 did not pass.\\\");\\n    }\\n\\n    int x2 = findMinSum(2);\\n    if (!(compare(x2, 2))) {\\n        throw runtime_error(\\\"Exception -- test case 2 did not pass.\\\");\\n    }\\n\\n    return 0;\\n}\"}", "labels": "{\"task_id\": \"MBCPP/511\", \"programming_language\": \"cpp\", \"execution_language\": \"cpp\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```cpp\\n#include <bits/stdc++.h>\\nusing namespace std;\\n\\n\\n/**\\n * Write a c++ function to remove first and last occurrence of a given character from the string.\\n * > removeOcc(string(\\\"hello\\\"), string(\\\"l\\\"))\\n * string(\\\"heo\\\")\\n * > removeOcc(string(\\\"abcda\\\"), string(\\\"a\\\"))\\n * string(\\\"bcd\\\")\\n * > removeOcc(string(\\\"PHP\\\"), string(\\\"P\\\"))\\n * string(\\\"H\\\")\\n */\\nstring removeOcc(string s, string ch) {\\n```\\n\\nAnswer:\\n```cpp\\n#include <bits/stdc++.h>\\nusing namespace std;\\n\\n\\n/**\\n * Write a c++ function to remove first and last occurrence of a given character from the string.\\n * > removeOcc(string(\\\"hello\\\"), string(\\\"l\\\"))\\n * string(\\\"heo\\\")\\n * > removeOcc(string(\\\"abcda\\\"), string(\\\"a\\\"))\\n * string(\\\"bcd\\\")\\n * > removeOcc(string(\\\"PHP\\\"), string(\\\"P\\\"))\\n * string(\\\"H\\\")\\n */\\nstring removeOcc(string s, string ch) {\\n    string result = \\\"\\\";\\n    for (int i = 0; i < s.size(); i++) {\\n        if (s[i] != ch[0] && s[i] != ch[ch.size() - 1]) {\\n            result += s[i];\\n        }\\n    }\\n    return result;\\n}\\n```\\n\\n----------------\"}"}
{"id": 466, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the summation of tuple elements in the given tuple list.\n * > sumElements(vector<int>{7, 8, 9, 1, 10, 7})\n * 42\n * > sumElements(vector<int>{1, 2, 3, 4, 5, 6})\n * 21\n * > sumElements(vector<int>{11, 12, 13, 45, 14})\n * 95\n */\nint sumElements(vector<int> testTup) {\n\n```", "canonical_solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n/**\n * Write a function to find the summation of tuple elements in the given tuple list.\n * > sumElements(vector<int>{7, 8, 9, 1, 10, 7})\n * 42\n * > sumElements(vector<int>{1, 2, 3, 4, 5, 6})\n * 21\n * > sumElements(vector<int>{11, 12, 13, 45, 14})\n * 95\n */\nint sumElements(vector<int> testTup) {\n\n    exit(0);\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\ntemplate <typename T> bool compare(T a, T b){ \\n    return a == b; \\n}\\n\\nint main(int argc, char* argv[]) {\\n    int x0 = sumElements(vector<int>{7, 8, 9, 1, 10, 7});\\n    if (!(compare(x0, 42))) {\\n        throw runtime_error(\\\"Exception -- test case 0 did not pass.\\\");\\n    }\\n\\n    int x1 = sumElements(vector<int>{1, 2, 3, 4, 5, 6});\\n    if (!(compare(x1, 21))) {\\n        throw runtime_error(\\\"Exception -- test case 1 did not pass.\\\");\\n    }\\n\\n    int x2 = sumElements(vector<int>{11, 12, 13, 45, 14});\\n    if (!(compare(x2, 95))) {\\n        throw runtime_error(\\\"Exception -- test case 2 did not pass.\\\");\\n    }\\n\\n    return 0;\\n}\"}", "labels": "{\"task_id\": \"MBCPP/514\", \"programming_language\": \"cpp\", \"execution_language\": \"cpp\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```cpp\\n#include <bits/stdc++.h>\\nusing namespace std;\\n\\n\\n/**\\n * Write a c++ function to remove first and last occurrence of a given character from the string.\\n * > removeOcc(string(\\\"hello\\\"), string(\\\"l\\\"))\\n * string(\\\"heo\\\")\\n * > removeOcc(string(\\\"abcda\\\"), string(\\\"a\\\"))\\n * string(\\\"bcd\\\")\\n * > removeOcc(string(\\\"PHP\\\"), string(\\\"P\\\"))\\n * string(\\\"H\\\")\\n */\\nstring removeOcc(string s, string ch) {\\n```\\n\\nAnswer:\\n```cpp\\n#include <bits/stdc++.h>\\nusing namespace std;\\n\\n\\n/**\\n * Write a c++ function to remove first and last occurrence of a given character from the string.\\n * > removeOcc(string(\\\"hello\\\"), string(\\\"l\\\"))\\n * string(\\\"heo\\\")\\n * > removeOcc(string(\\\"abcda\\\"), string(\\\"a\\\"))\\n * string(\\\"bcd\\\")\\n * > removeOcc(string(\\\"PHP\\\"), string(\\\"P\\\"))\\n * string(\\\"H\\\")\\n */\\nstring removeOcc(string s, string ch) {\\n    string result = \\\"\\\";\\n    for (int i = 0; i < s.size(); i++) {\\n        if (s[i] != ch[0] && s[i] != ch[ch.size() - 1]) {\\n            result += s[i];\\n        }\\n    }\\n    return result;\\n}\\n```\\n\\n----------------\"}"}
{"id": 1314, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```java\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMinSum {\n    /**\n     * * Write a Java function to find minimum sum of factors of a given number.\n     *\n     * > findMinSum(12)\n     * 7\n     * > findMinSum(105)\n     * 15\n     * > findMinSum(2)\n     * 2\n     */\n    public static int findMinSum(int num) {\n\n```", "canonical_solution": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass FindMinSum {\n    /**\n     * * Write a Java function to find minimum sum of factors of a given number.\n     *\n     * > findMinSum(12)\n     * 7\n     * > findMinSum(105)\n     * 15\n     * > findMinSum(2)\n     * 2\n     */\n    public static int findMinSum(int num) {\n\n        int i = 2, sum = 0;\n        while (num > 1) {\n            while (num % i == 0) {\n                sum += i;\n                num /= i;\n            }\n            i++;\n        }\n        return sum;\n    }\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\nclass Main {\\n    public static boolean compare(Object obj1, Object obj2) {\\n        if (obj1 == null && obj2 == null){\\n            return true;\\n        } else if (obj1 == null || obj2 == null){\\n            return false;\\n        } else {\\n            return obj1.equals(obj2);\\n        }\\n    }\\n    \\n    public static void main(String[] args) throws Exception {\\n        int arg00 = 12;\\n        int x0 = FindMinSum.findMinSum(12);\\n        int v0 = 7;\\n        if (!(compare(x0, v0))) {\\n            throw new java.lang.Exception(\\\"Exception -- test case 0 did not pass. x0 = \\\" + x0);\\n        }\\n\\n        int arg10 = 105;\\n        int x1 = FindMinSum.findMinSum(105);\\n        int v1 = 15;\\n        if (!(compare(x1, v1))) {\\n            throw new java.lang.Exception(\\\"Exception -- test case 1 did not pass. x1 = \\\" + x1);\\n        }\\n\\n        int arg20 = 2;\\n        int x2 = FindMinSum.findMinSum(2);\\n        int v2 = 2;\\n        if (!(compare(x2, v2))) {\\n            throw new java.lang.Exception(\\\"Exception -- test case 2 did not pass. x2 = \\\" + x2);\\n        }\\n\\n\\n}\\n}\\n\"}", "labels": "{\"task_id\": \"MBJP/511\", \"programming_language\": \"java\", \"execution_language\": \"java\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```java\\nclass DifferAtOneBitPos {\\n    /**\\n     * Write a java function to check whether the two numbers differ at one bit position only or not.\\n     * > DifferAtOneBitPos.differAtOneBitPos(13, 9)\\n     * true\\n     * > DifferAtOneBitPos.differAtOneBitPos(15, 8)\\n     * false\\n     * > DifferAtOneBitPos.differAtOneBitPos(2, 4)\\n     * false\\n     */\\n    public static boolean differAtOneBitPos(int a, int b) {\\n```\\n\\nAnswer:\\n```java\\nclass DifferAtOneBitPos {\\n    /**\\n     * Write a java function to check whether the two numbers differ at one bit position only or not.\\n     * > DifferAtOneBitPos.differAtOneBitPos(13, 9)\\n     * true\\n     * > DifferAtOneBitPos.differAtOneBitPos(15, 8)\\n     * false\\n     * > DifferAtOneBitPos.differAtOneBitPos(2, 4)\\n     * false\\n     */\\n    public static boolean differAtOneBitPos(int a, int b) {\\n        int diff = a ^ b;\\n        int count = 0;\\n        while (diff > 0) {\\n            diff = diff & (diff - 1);\\n            count++;\\n        }\\n        return count == 1;\\n    }\\n}\\n```\\n\\n----------------\"}"}
{"id": 1315, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```java\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountElementFreq {\n    /**\n     * * Write a function to count the element frequency in the mixed nested tuple.\n     *\n     * > countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n     * {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n     * > countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n     * {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n     * > countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n     * {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n     */\n    public static HashMap<Integer, Integer> countElementFreq(List<Object> testTuple) {\n\n```", "canonical_solution": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass CountElementFreq {\n    /**\n     * * Write a function to count the element frequency in the mixed nested tuple.\n     *\n     * > countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n     * {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n     * > countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n     * {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n     * > countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n     * {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n     */\n    public static HashMap<Integer, Integer> countElementFreq(List<Object> testTuple) {\n\n        HashMap<Integer, Integer> freq = new HashMap<>();\n        for (Object object: testTuple) {\n            if (object instanceof Integer) {\n                Integer num1 = (Integer)object;\n                if (freq.containsKey(num1)) {\n                    freq.put(num1, freq.get(num1) + 1);\n                } else {\n                    freq.put(num1, 1);\n                }\n            } else if (object instanceof List) {\n                List<Integer> list1 = (List<Integer>)object;\n                for (int i : list1) {\n                    freq.put(i, freq.getOrDefault(i, 0) + 1);\n                }\n            } else {\n                throw new RuntimeException(\"Bad object\");\n            }\n        }\n        return freq;\n    }\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\nclass Main {\\n    public static boolean compare(Object obj1, Object obj2) {\\n        if (obj1 == null && obj2 == null){\\n            return true;\\n        } else if (obj1 == null || obj2 == null){\\n            return false;\\n        } else {\\n            return obj1.equals(obj2);\\n        }\\n    }\\n    \\n    public static void main(String[] args) throws Exception {\\n        List<Object> arg00 = Arrays.asList(5, 6, Arrays.asList(5, 6), 7, Arrays.asList(8, 9), 9);\\n        HashMap<Integer, Integer> x0 = CountElementFreq.countElementFreq(Arrays.asList(5, 6, Arrays.asList(5, 6), 7, Arrays.asList(8, 9), 9));\\n        HashMap<Integer, Integer> v0 = new HashMap(){{put(5, 2);put(6, 2);put(7, 1);put(8, 1);put(9, 2);}};\\n        if (!(compare(x0, v0))) {\\n            throw new java.lang.Exception(\\\"Exception -- test case 0 did not pass. x0 = \\\" + x0);\\n        }\\n\\n        List<Object> arg10 = Arrays.asList(6, 7, Arrays.asList(6, 7), 8, Arrays.asList(9, 10), 10);\\n        HashMap<Integer, Integer> x1 = CountElementFreq.countElementFreq(Arrays.asList(6, 7, Arrays.asList(6, 7), 8, Arrays.asList(9, 10), 10));\\n        HashMap<Integer, Integer> v1 = new HashMap(){{put(6, 2);put(7, 2);put(8, 1);put(9, 1);put(10, 2);}};\\n        if (!(compare(x1, v1))) {\\n            throw new java.lang.Exception(\\\"Exception -- test case 1 did not pass. x1 = \\\" + x1);\\n        }\\n\\n        List<Object> arg20 = Arrays.asList(7, 8, Arrays.asList(7, 8), 9, Arrays.asList(10, 11), 11);\\n        HashMap<Integer, Integer> x2 = CountElementFreq.countElementFreq(Arrays.asList(7, 8, Arrays.asList(7, 8), 9, Arrays.asList(10, 11), 11));\\n        HashMap<Integer, Integer> v2 = new HashMap(){{put(7, 2);put(8, 2);put(9, 1);put(10, 1);put(11, 2);}};\\n        if (!(compare(x2, v2))) {\\n            throw new java.lang.Exception(\\\"Exception -- test case 2 did not pass. x2 = \\\" + x2);\\n        }\\n\\n\\n}\\n}\\n\"}", "labels": "{\"task_id\": \"MBJP/512\", \"programming_language\": \"java\", \"execution_language\": \"java\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```java\\nclass DifferAtOneBitPos {\\n    /**\\n     * Write a java function to check whether the two numbers differ at one bit position only or not.\\n     * > DifferAtOneBitPos.differAtOneBitPos(13, 9)\\n     * true\\n     * > DifferAtOneBitPos.differAtOneBitPos(15, 8)\\n     * false\\n     * > DifferAtOneBitPos.differAtOneBitPos(2, 4)\\n     * false\\n     */\\n    public static boolean differAtOneBitPos(int a, int b) {\\n```\\n\\nAnswer:\\n```java\\nclass DifferAtOneBitPos {\\n    /**\\n     * Write a java function to check whether the two numbers differ at one bit position only or not.\\n     * > DifferAtOneBitPos.differAtOneBitPos(13, 9)\\n     * true\\n     * > DifferAtOneBitPos.differAtOneBitPos(15, 8)\\n     * false\\n     * > DifferAtOneBitPos.differAtOneBitPos(2, 4)\\n     * false\\n     */\\n    public static boolean differAtOneBitPos(int a, int b) {\\n        int diff = a ^ b;\\n        int count = 0;\\n        while (diff > 0) {\\n            diff = diff & (diff - 1);\\n            count++;\\n        }\\n        return count == 1;\\n    }\\n}\\n```\\n\\n----------------\"}"}
{"id": 1772, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```javascript\n/**\n * * Write a JavaScript function to find minimum sum of factors of a given number.\n *\n * > findMinSum(12)\n * 7\n * > findMinSum(105)\n * 15\n * > findMinSum(2)\n * 2\n */\nfunction findMinSum(num) {\n\n```", "canonical_solution": "/**\n * * Write a JavaScript function to find minimum sum of factors of a given number.\n *\n * > findMinSum(12)\n * 7\n * > findMinSum(105)\n * 15\n * > findMinSum(2)\n * 2\n */\nfunction findMinSum(num) {\n\n    process.exit(0);\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\nconst _ = require(\\\"lodash\\\")\\n\\nfunction compare(object1, object2){\\n    return _.isEqual(object1, object2)\\n}\\n\\nvar arg00 = 12;\\nvar x0 = findMinSum(arg00);\\nvar v0 = 7;\\nif(!compare(x0, v0)){\\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \\n}\\n\\nvar arg10 = 105;\\nvar x1 = findMinSum(arg10);\\nvar v1 = 15;\\nif(!compare(x1, v1)){\\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \\n}\\n\\nvar arg20 = 2;\\nvar x2 = findMinSum(arg20);\\nvar v2 = 2;\\nif(!compare(x2, v2)){\\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \\n}\\n\\n\"}", "labels": "{\"task_id\": \"MBJSP/511\", \"programming_language\": \"javascript\", \"execution_language\": \"typescript\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```javascript\\n/**\\n * Write a javascript function to identify non-prime numbers.\\n * > isNotPrime(2)\\n * false\\n * > isNotPrime(10)\\n * true\\n * > isNotPrime(35)\\n * true\\n */\\nfunction isNotPrime(n) {\\n```\\n\\nAnswer:\\n```javascript\\n/**\\n * Write a javascript function to identify non-prime numbers.\\n * > isNotPrime(2)\\n * false\\n * > isNotPrime(10)\\n * true\\n * > isNotPrime(35)\\n * true\\n */\\nfunction isNotPrime(n) {\\n    for (let i = 2; i < n; i++) {\\n        if (n % i === 0) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n```\\n\\n----------------\"}"}
{"id": 1773, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```javascript\n/**\n * * Write a function to count the element frequency in the mixed nested tuple.\n *\n * > countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n * {\"5\":2,\"6\":2,\"7\":1,\"8\":1,\"9\":2}\n * > countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n * {\"6\":2,\"7\":2,\"8\":1,\"9\":1,\"10\":2}\n * > countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n * {\"7\":2,\"8\":2,\"9\":1,\"10\":1,\"11\":2}\n */\nfunction countElementFreq(testtuple) {\n\n```", "canonical_solution": "/**\n * * Write a function to count the element frequency in the mixed nested tuple.\n *\n * > countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n * {\"5\":2,\"6\":2,\"7\":1,\"8\":1,\"9\":2}\n * > countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n * {\"6\":2,\"7\":2,\"8\":1,\"9\":1,\"10\":2}\n * > countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n * {\"7\":2,\"8\":2,\"9\":1,\"10\":1,\"11\":2}\n */\nfunction countElementFreq(testtuple) {\n\n    process.exit(0);\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\nconst _ = require(\\\"lodash\\\")\\n\\nfunction compare(object1, object2){\\n    return _.isEqual(object1, object2)\\n}\\n\\nvar arg00 = [5, 6, [5, 6], 7, [8, 9], 9];\\nvar x0 = countElementFreq(arg00);\\nvar v0 = {\\\"5\\\":2,\\\"6\\\":2,\\\"7\\\":1,\\\"8\\\":1,\\\"9\\\":2};\\nif(!compare(x0, v0)){\\n    throw 'Error at 1th assert statement. Value = ' + JSON.stringify(x)  \\n}\\n\\nvar arg10 = [6, 7, [6, 7], 8, [9, 10], 10];\\nvar x1 = countElementFreq(arg10);\\nvar v1 = {\\\"6\\\":2,\\\"7\\\":2,\\\"8\\\":1,\\\"9\\\":1,\\\"10\\\":2};\\nif(!compare(x1, v1)){\\n    throw 'Error at 2th assert statement. Value = ' + JSON.stringify(x)  \\n}\\n\\nvar arg20 = [7, 8, [7, 8], 9, [10, 11], 11];\\nvar x2 = countElementFreq(arg20);\\nvar v2 = {\\\"7\\\":2,\\\"8\\\":2,\\\"9\\\":1,\\\"10\\\":1,\\\"11\\\":2};\\nif(!compare(x2, v2)){\\n    throw 'Error at 3th assert statement. Value = ' + JSON.stringify(x)  \\n}\\n\\n\"}", "labels": "{\"task_id\": \"MBJSP/512\", \"programming_language\": \"javascript\", \"execution_language\": \"typescript\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```javascript\\n/**\\n * Write a javascript function to identify non-prime numbers.\\n * > isNotPrime(2)\\n * false\\n * > isNotPrime(10)\\n * true\\n * > isNotPrime(35)\\n * true\\n */\\nfunction isNotPrime(n) {\\n```\\n\\nAnswer:\\n```javascript\\n/**\\n * Write a javascript function to identify non-prime numbers.\\n * > isNotPrime(2)\\n * false\\n * > isNotPrime(10)\\n * true\\n * > isNotPrime(35)\\n * true\\n */\\nfunction isNotPrime(n) {\\n    for (let i = 2; i < n; i++) {\\n        if (n % i === 0) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n```\\n\\n----------------\"}"}
{"id": 2230, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```typescript\n/**\n * Write a typescript function to find minimum sum of factors of a given number.\n * \n * Examples:\n * >>> find_Min_Sum(12)\n * >>> 7\n * >>> find_Min_Sum(105)\n * >>> 15\n * >>> find_Min_Sum(2)\n * >>> 2\n */\nconst find_Min_Sum = function (num: number) : number  {\n\n```", "canonical_solution": "/**\n * Write a typescript function to find minimum sum of factors of a given number.\n * \n * Examples:\n * >>> find_Min_Sum(12)\n * >>> 7\n * >>> find_Min_Sum(105)\n * >>> 15\n * >>> find_Min_Sum(2)\n * >>> 2\n */\nconst find_Min_Sum = function (num: number) : number  {\n\n    process.exit(0);\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\nimport * as assert from 'assert'\\n\\nlet actual_1 = find_Min_Sum(12);\\nlet expected_1 = 7.0;\\nassert.deepEqual(actual_1, expected_1, \\\"Exception --- test case 0 failed to pass\\\");\\n\\nlet actual_2 = find_Min_Sum(105);\\nlet expected_2 = 15.0;\\nassert.deepEqual(actual_2, expected_2, \\\"Exception --- test case 1 failed to pass\\\");\\n\\nlet actual_3 = find_Min_Sum(2);\\nlet expected_3 = 2;\\nassert.deepEqual(actual_3, expected_3, \\\"Exception --- test case 2 failed to pass\\\");\\n\\n\"}", "labels": "{\"task_id\": \"MBTSP/511\", \"programming_language\": \"typescript\", \"execution_language\": \"typescript\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```typescript\\n/**\\n * Write a function to find all words which are at least 4 characters long in a string by using regex.\\n *\\n * Examples:\\n * >>> find_char_long('Please move back to stream')\\n * >>> ['Please', 'move', 'back', 'stream']\\n * >>> find_char_long('Jing Eco and Tech')\\n * >>> ['Jing', 'Tech']\\n * >>> find_char_long('Jhingai wulu road Zone 3')\\n * >>> ['Jhingai', 'wulu', 'road', 'Zone']\\n */\\nconst find_char_long = function (text: string) : Array<string>  {\\n```\\n\\nAnswer:\\n```typescript\\n/**\\n * Write a function to find all words which are at least 4 characters long in a string by using regex.\\n *\\n * Examples:\\n * >>> find_char_long('Please move back to stream')\\n * >>> ['Please', 'move', 'back', 'stream']\\n * >>> find_char_long('Jing Eco and Tech')\\n * >>> ['Jing', 'Tech']\\n * >>> find_char_long('Jhingai wulu road Zone 3')\\n * >>> ['Jhingai', 'wulu', 'road', 'Zone']\\n */\\nconst find_char_long = function (text: string) : Array<string>  {\\n    return text.match(/\\\\w{4,}/g)\\n}\\n```\\n\\n----------------\"}"}
{"id": 2231, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```typescript\n/**\n * Write a function to count the element frequency in the mixed nested tuple.\n * \n * Examples:\n * >>> count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) )\n * >>> {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n * >>> count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) )\n * >>> {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n * >>> count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) )\n * >>> {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n */\nconst count_element_freq = function (test_tuple: Array<any>) : Map<number, number>  {\n\n```", "canonical_solution": "/**\n * Write a function to count the element frequency in the mixed nested tuple.\n * \n * Examples:\n * >>> count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) )\n * >>> {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n * >>> count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) )\n * >>> {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n * >>> count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) )\n * >>> {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n */\nconst count_element_freq = function (test_tuple: Array<any>) : Map<number, number>  {\n\n    process.exit(0);\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\nimport * as assert from 'assert'\\n\\nlet actual_1 = count_element_freq([5, 6, [5, 6], 7, [8, 9], 9]);\\nlet expected_1 = new Map<any, any>([[5, 2], [6, 2], [7, 1], [8, 1], [9, 2]]);\\nassert.deepEqual(actual_1, expected_1, \\\"Exception --- test case 0 failed to pass\\\");\\n\\nlet actual_2 = count_element_freq([6, 7, [6, 7], 8, [9, 10], 10]);\\nlet expected_2 = new Map<any, any>([[6, 2], [7, 2], [8, 1], [9, 1], [10, 2]]);\\nassert.deepEqual(actual_2, expected_2, \\\"Exception --- test case 1 failed to pass\\\");\\n\\nlet actual_3 = count_element_freq([7, 8, [7, 8], 9, [10, 11], 11]);\\nlet expected_3 = new Map<any, any>([[7, 2], [8, 2], [9, 1], [10, 1], [11, 2]]);\\nassert.deepEqual(actual_3, expected_3, \\\"Exception --- test case 2 failed to pass\\\");\\n\\n\"}", "labels": "{\"task_id\": \"MBTSP/512\", \"programming_language\": \"typescript\", \"execution_language\": \"typescript\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```typescript\\n/**\\n * Write a function to find all words which are at least 4 characters long in a string by using regex.\\n *\\n * Examples:\\n * >>> find_char_long('Please move back to stream')\\n * >>> ['Please', 'move', 'back', 'stream']\\n * >>> find_char_long('Jing Eco and Tech')\\n * >>> ['Jing', 'Tech']\\n * >>> find_char_long('Jhingai wulu road Zone 3')\\n * >>> ['Jhingai', 'wulu', 'road', 'Zone']\\n */\\nconst find_char_long = function (text: string) : Array<string>  {\\n```\\n\\nAnswer:\\n```typescript\\n/**\\n * Write a function to find all words which are at least 4 characters long in a string by using regex.\\n *\\n * Examples:\\n * >>> find_char_long('Please move back to stream')\\n * >>> ['Please', 'move', 'back', 'stream']\\n * >>> find_char_long('Jing Eco and Tech')\\n * >>> ['Jing', 'Tech']\\n * >>> find_char_long('Jhingai wulu road Zone 3')\\n * >>> ['Jhingai', 'wulu', 'road', 'Zone']\\n */\\nconst find_char_long = function (text: string) : Array<string>  {\\n    return text.match(/\\\\w{4,}/g)\\n}\\n```\\n\\n----------------\"}"}
{"id": 2692, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```kotlin\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function to convert tuple into list by adding the given string after every element.\n *\n * >>> addStr([5, 6, 7, 4, 9], \"\"\"FDF\"\"\")\n * [5, \"\"\"FDF\"\"\", 6, \"\"\"FDF\"\"\", 7, \"\"\"FDF\"\"\", 4, \"\"\"FDF\"\"\", 9, \"\"\"FDF\"\"\"]\n * >>> addStr([7, 8, 9, 10], \"\"\"PF\"\"\")\n * [7, \"\"\"PF\"\"\", 8, \"\"\"PF\"\"\", 9, \"\"\"PF\"\"\", 10, \"\"\"PF\"\"\"]\n * >>> addStr([11, 14, 12, 1, 4], \"\"\"JH\"\"\")\n * [11, \"\"\"JH\"\"\", 14, \"\"\"JH\"\"\", 12, \"\"\"JH\"\"\", 1, \"\"\"JH\"\"\", 4, \"\"\"JH\"\"\"]\n */\nfun addStr(testTup : List<Int>, k : String) : List<Any> {\n\n```", "canonical_solution": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function to convert tuple into list by adding the given string after every element.\n *\n * >>> addStr([5, 6, 7, 4, 9], \"\"\"FDF\"\"\")\n * [5, \"\"\"FDF\"\"\", 6, \"\"\"FDF\"\"\", 7, \"\"\"FDF\"\"\", 4, \"\"\"FDF\"\"\", 9, \"\"\"FDF\"\"\"]\n * >>> addStr([7, 8, 9, 10], \"\"\"PF\"\"\")\n * [7, \"\"\"PF\"\"\", 8, \"\"\"PF\"\"\", 9, \"\"\"PF\"\"\", 10, \"\"\"PF\"\"\"]\n * >>> addStr([11, 14, 12, 1, 4], \"\"\"JH\"\"\")\n * [11, \"\"\"JH\"\"\", 14, \"\"\"JH\"\"\", 12, \"\"\"JH\"\"\", 1, \"\"\"JH\"\"\", 4, \"\"\"JH\"\"\"]\n */\nfun addStr(testTup : List<Int>, k : String) : List<Any> {\n\n    val resultList = mutableListOf<Any>()\n    val it = testTup.iterator()\n    while (it.hasNext()) {\n        resultList.add(it.next())\n        resultList.add(k)\n    }\n    return resultList\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\nfun main() {\\n    var arg00 : List<Int> = mutableListOf(5, 6, 7, 4, 9)\\n    var arg01 : String = \\\"\\\"\\\"FDF\\\"\\\"\\\"\\n    var x0 : List<Any> = addStr(arg00, arg01);\\n    var v0 : List<Any> = mutableListOf(5, \\\"\\\"\\\"FDF\\\"\\\"\\\", 6, \\\"\\\"\\\"FDF\\\"\\\"\\\", 7, \\\"\\\"\\\"FDF\\\"\\\"\\\", 4, \\\"\\\"\\\"FDF\\\"\\\"\\\", 9, \\\"\\\"\\\"FDF\\\"\\\"\\\");\\n    if (x0 != v0) {\\n        throw Exception(\\\"Exception -- test case 0 did not pass. x0 = \\\" + x0)\\n    }\\n\\n    var arg10 : List<Int> = mutableListOf(7, 8, 9, 10)\\n    var arg11 : String = \\\"\\\"\\\"PF\\\"\\\"\\\"\\n    var x1 : List<Any> = addStr(arg10, arg11);\\n    var v1 : List<Any> = mutableListOf(7, \\\"\\\"\\\"PF\\\"\\\"\\\", 8, \\\"\\\"\\\"PF\\\"\\\"\\\", 9, \\\"\\\"\\\"PF\\\"\\\"\\\", 10, \\\"\\\"\\\"PF\\\"\\\"\\\");\\n    if (x1 != v1) {\\n        throw Exception(\\\"Exception -- test case 1 did not pass. x1 = \\\" + x1)\\n    }\\n\\n    var arg20 : List<Int> = mutableListOf(11, 14, 12, 1, 4)\\n    var arg21 : String = \\\"\\\"\\\"JH\\\"\\\"\\\"\\n    var x2 : List<Any> = addStr(arg20, arg21);\\n    var v2 : List<Any> = mutableListOf(11, \\\"\\\"\\\"JH\\\"\\\"\\\", 14, \\\"\\\"\\\"JH\\\"\\\"\\\", 12, \\\"\\\"\\\"JH\\\"\\\"\\\", 1, \\\"\\\"\\\"JH\\\"\\\"\\\", 4, \\\"\\\"\\\"JH\\\"\\\"\\\");\\n    if (x2 != v2) {\\n        throw Exception(\\\"Exception -- test case 2 did not pass. x2 = \\\" + x2)\\n    }\\n\\n\\n}\\n\\n\\nmain();\"}", "labels": "{\"task_id\": \"MBKP/513\", \"programming_language\": \"kotlin\", \"execution_language\": \"kotlin_script\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```kotlin\\n/**\\n * You are an expert Kotlin programmer, and here is your task.\\n * Write a function to locate the right insertion point for a specified value in sorted order.\\n * >>> rightInsertion([1, 2, 4, 5], 6)\\n * 4\\n * >>> rightInsertion([1, 2, 4, 5], 3)\\n * 2\\n * >>> rightInsertion([1, 2, 4, 5], 7)\\n * 4\\n */\\nfun rightInsertion(a : List<Int>, x : Int) : Int {\\n```\\n\\nAnswer:\\n```kotlin\\n/**\\n * You are an expert Kotlin programmer, and here is your task.\\n * Write a function to locate the right insertion point for a specified value in sorted order.\\n * >>> rightInsertion([1, 2, 4, 5], 6)\\n * 4\\n * >>> rightInsertion([1, 2, 4, 5], 3)\\n * 2\\n * >>> rightInsertion([1, 2, 4, 5], 7)\\n * 4\\n */\\nfun rightInsertion(a : List<Int>, x : Int) : Int {\\n    var low = 0\\n    var high = a.size - 1\\n    while (low <= high) {\\n        var mid = (low + high) / 2\\n        if (a[mid] == x) {\\n            return mid\\n        } else if (a[mid] < x) {\\n            low = mid + 1\\n        } else {\\n            high = mid - 1\\n        }\\n    }\\n    return low\\n}\\n```\\n\\n----------------\"}"}
{"id": 2693, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```kotlin\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function to find the summation of tuple elements in the given tuple list.\n *\n * >>> sumElements([7, 8, 9, 1, 10, 7])\n * 42\n * >>> sumElements([1, 2, 3, 4, 5, 6])\n * 21\n * >>> sumElements([11, 12, 13, 45, 14])\n * 95\n */\nfun sumElements(testTup : List<Int>) : Int {\n\n```", "canonical_solution": "/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function to find the summation of tuple elements in the given tuple list.\n *\n * >>> sumElements([7, 8, 9, 1, 10, 7])\n * 42\n * >>> sumElements([1, 2, 3, 4, 5, 6])\n * 21\n * >>> sumElements([11, 12, 13, 45, 14])\n * 95\n */\nfun sumElements(testTup : List<Int>) : Int {\n\n    var sum = 0\n    for (i in testTup) {\n        sum += i\n    }\n    return sum\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\nfun main() {\\n    var arg00 : List<Int> = mutableListOf(7, 8, 9, 1, 10, 7)\\n    var x0 : Int = sumElements(arg00);\\n    var v0 : Int = 42;\\n    if (x0 != v0) {\\n        throw Exception(\\\"Exception -- test case 0 did not pass. x0 = \\\" + x0)\\n    }\\n\\n    var arg10 : List<Int> = mutableListOf(1, 2, 3, 4, 5, 6)\\n    var x1 : Int = sumElements(arg10);\\n    var v1 : Int = 21;\\n    if (x1 != v1) {\\n        throw Exception(\\\"Exception -- test case 1 did not pass. x1 = \\\" + x1)\\n    }\\n\\n    var arg20 : List<Int> = mutableListOf(11, 12, 13, 45, 14)\\n    var x2 : Int = sumElements(arg20);\\n    var v2 : Int = 95;\\n    if (x2 != v2) {\\n        throw Exception(\\\"Exception -- test case 2 did not pass. x2 = \\\" + x2)\\n    }\\n\\n\\n}\\n\\n\\nmain();\"}", "labels": "{\"task_id\": \"MBKP/514\", \"programming_language\": \"kotlin\", \"execution_language\": \"kotlin_script\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```kotlin\\n/**\\n * You are an expert Kotlin programmer, and here is your task.\\n * Write a function to locate the right insertion point for a specified value in sorted order.\\n * >>> rightInsertion([1, 2, 4, 5], 6)\\n * 4\\n * >>> rightInsertion([1, 2, 4, 5], 3)\\n * 2\\n * >>> rightInsertion([1, 2, 4, 5], 7)\\n * 4\\n */\\nfun rightInsertion(a : List<Int>, x : Int) : Int {\\n```\\n\\nAnswer:\\n```kotlin\\n/**\\n * You are an expert Kotlin programmer, and here is your task.\\n * Write a function to locate the right insertion point for a specified value in sorted order.\\n * >>> rightInsertion([1, 2, 4, 5], 6)\\n * 4\\n * >>> rightInsertion([1, 2, 4, 5], 3)\\n * 2\\n * >>> rightInsertion([1, 2, 4, 5], 7)\\n * 4\\n */\\nfun rightInsertion(a : List<Int>, x : Int) : Int {\\n    var low = 0\\n    var high = a.size - 1\\n    while (low <= high) {\\n        var mid = (low + high) / 2\\n        if (a[mid] == x) {\\n            return mid\\n        } else if (a[mid] < x) {\\n            low = mid + 1\\n        } else {\\n            high = mid - 1\\n        }\\n    }\\n    return low\\n}\\n```\\n\\n----------------\"}"}
{"id": 3148, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```ruby\n\n##\n# You are an expert Ruby programmer, and here is your task.\n# # Write a Ruby function to find minimum sum of factors of a given number.\n#\n# irb> find_min_sum(12)\n# => 7\n# irb> find_min_sum(105)\n# => 15\n# irb> find_min_sum(2)\n# => 2\ndef find_min_sum(num)\n```", "canonical_solution": "\n##\n# You are an expert Ruby programmer, and here is your task.\n# # Write a Ruby function to find minimum sum of factors of a given number.\n#\n# irb> find_min_sum(12)\n# => 7\n# irb> find_min_sum(105)\n# => 15\n# irb> find_min_sum(2)\n# => 2\ndef find_min_sum(num)\n    exit\nend", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\narg00 = 12\\nx0 = find_min_sum(arg00)\\nv0 = 7\\nif x0 != v0\\n    raise StandardError, \\\"Error at test case 1\\\"\\nend\\n\\narg10 = 105\\nx1 = find_min_sum(arg10)\\nv1 = 15\\nif x1 != v1\\n    raise StandardError, \\\"Error at test case 2\\\"\\nend\\n\\narg20 = 2\\nx2 = find_min_sum(arg20)\\nv2 = 2\\nif x2 != v2\\n    raise StandardError, \\\"Error at test case 3\\\"\\nend\\n\\n\"}", "labels": "{\"task_id\": \"MBRBP/511\", \"programming_language\": \"ruby\", \"execution_language\": \"ruby\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```ruby\\n##\\n# You are an expert Ruby programmer, and here is your task.\\n# Write a Ruby function to remove all digits from a list of strings.\\n# irb> remove([\\\"4words\\\", \\\"3letters\\\", \\\"4digits\\\"])\\n# => [\\\"words\\\", \\\"letters\\\", \\\"digits\\\"]\\n# irb> remove([\\\"28Jan\\\", \\\"12Jan\\\", \\\"11Jan\\\"])\\n# => [\\\"Jan\\\", \\\"Jan\\\", \\\"Jan\\\"]\\n# irb> remove([\\\"wonder1\\\", \\\"wonder2\\\", \\\"wonder3\\\"])\\n# => [\\\"wonder\\\", \\\"wonder\\\", \\\"wonder\\\"]\\ndef remove(list)\\n```\\n\\nAnswer:\\n```ruby\\n##\\n# You are an expert Ruby programmer, and here is your task.\\n# Write a Ruby function to remove all digits from a list of strings.\\n# irb> remove([\\\"4words\\\", \\\"3letters\\\", \\\"4digits\\\"])\\n# => [\\\"words\\\", \\\"letters\\\", \\\"digits\\\"]\\n# irb> remove([\\\"28Jan\\\", \\\"12Jan\\\", \\\"11Jan\\\"])\\n# => [\\\"Jan\\\", \\\"Jan\\\", \\\"Jan\\\"]\\n# irb> remove([\\\"wonder1\\\", \\\"wonder2\\\", \\\"wonder3\\\"])\\n# => [\\\"wonder\\\", \\\"wonder\\\", \\\"wonder\\\"]\\ndef remove(list)\\n  return list.map { |word| word.gsub(/\\\\d+/, '') }\\nend\\n```\\n\\n----------------\"}"}
{"id": 3149, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```ruby\n\n##\n# You are an expert Ruby programmer, and here is your task.\n# # Write a function to count the element frequency in the mixed nested tuple.\n#\n# irb> count_element_freq([5, 6, [5, 6], 7, [8, 9], 9])\n# => {5=>2, 6=>2, 7=>1, 8=>1, 9=>2}\n# irb> count_element_freq([6, 7, [6, 7], 8, [9, 10], 10])\n# => {6=>2, 7=>2, 8=>1, 9=>1, 10=>2}\n# irb> count_element_freq([7, 8, [7, 8], 9, [10, 11], 11])\n# => {7=>2, 8=>2, 9=>1, 10=>1, 11=>2}\ndef count_element_freq(test_tuple)\n```", "canonical_solution": "\n##\n# You are an expert Ruby programmer, and here is your task.\n# # Write a function to count the element frequency in the mixed nested tuple.\n#\n# irb> count_element_freq([5, 6, [5, 6], 7, [8, 9], 9])\n# => {5=>2, 6=>2, 7=>1, 8=>1, 9=>2}\n# irb> count_element_freq([6, 7, [6, 7], 8, [9, 10], 10])\n# => {6=>2, 7=>2, 8=>1, 9=>1, 10=>2}\n# irb> count_element_freq([7, 8, [7, 8], 9, [10, 11], 11])\n# => {7=>2, 8=>2, 9=>1, 10=>1, 11=>2}\ndef count_element_freq(test_tuple)\n    exit\nend", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\narg00 = [5, 6, [5, 6], 7, [8, 9], 9]\\nx0 = count_element_freq(arg00)\\nv0 = {5=>2, 6=>2, 7=>1, 8=>1, 9=>2}\\nif x0 != v0\\n    raise StandardError, \\\"Error at test case 1\\\"\\nend\\n\\narg10 = [6, 7, [6, 7], 8, [9, 10], 10]\\nx1 = count_element_freq(arg10)\\nv1 = {6=>2, 7=>2, 8=>1, 9=>1, 10=>2}\\nif x1 != v1\\n    raise StandardError, \\\"Error at test case 2\\\"\\nend\\n\\narg20 = [7, 8, [7, 8], 9, [10, 11], 11]\\nx2 = count_element_freq(arg20)\\nv2 = {7=>2, 8=>2, 9=>1, 10=>1, 11=>2}\\nif x2 != v2\\n    raise StandardError, \\\"Error at test case 3\\\"\\nend\\n\\n\"}", "labels": "{\"task_id\": \"MBRBP/512\", \"programming_language\": \"ruby\", \"execution_language\": \"ruby\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```ruby\\n##\\n# You are an expert Ruby programmer, and here is your task.\\n# Write a Ruby function to remove all digits from a list of strings.\\n# irb> remove([\\\"4words\\\", \\\"3letters\\\", \\\"4digits\\\"])\\n# => [\\\"words\\\", \\\"letters\\\", \\\"digits\\\"]\\n# irb> remove([\\\"28Jan\\\", \\\"12Jan\\\", \\\"11Jan\\\"])\\n# => [\\\"Jan\\\", \\\"Jan\\\", \\\"Jan\\\"]\\n# irb> remove([\\\"wonder1\\\", \\\"wonder2\\\", \\\"wonder3\\\"])\\n# => [\\\"wonder\\\", \\\"wonder\\\", \\\"wonder\\\"]\\ndef remove(list)\\n```\\n\\nAnswer:\\n```ruby\\n##\\n# You are an expert Ruby programmer, and here is your task.\\n# Write a Ruby function to remove all digits from a list of strings.\\n# irb> remove([\\\"4words\\\", \\\"3letters\\\", \\\"4digits\\\"])\\n# => [\\\"words\\\", \\\"letters\\\", \\\"digits\\\"]\\n# irb> remove([\\\"28Jan\\\", \\\"12Jan\\\", \\\"11Jan\\\"])\\n# => [\\\"Jan\\\", \\\"Jan\\\", \\\"Jan\\\"]\\n# irb> remove([\\\"wonder1\\\", \\\"wonder2\\\", \\\"wonder3\\\"])\\n# => [\\\"wonder\\\", \\\"wonder\\\", \\\"wonder\\\"]\\ndef remove(list)\\n  return list.map { |word| word.gsub(/\\\\d+/, '') }\\nend\\n```\\n\\n----------------\"}"}
{"id": 3606, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```php\n<?php\n\n/**\n * You are an expert PHP programmer, and here is your task.\n * * Write a PHP function to find minimum sum of factors of a given number.\n *\n * php > findMinSum(12)\n * 7\n * php > findMinSum(105)\n * 15\n * php > findMinSum(2)\n * 2\n */\nfunction findMinSum($num){\n\n```", "canonical_solution": "<?php\n\n/**\n * You are an expert PHP programmer, and here is your task.\n * * Write a PHP function to find minimum sum of factors of a given number.\n *\n * php > findMinSum(12)\n * 7\n * php > findMinSum(105)\n * 15\n * php > findMinSum(2)\n * 2\n */\nfunction findMinSum($num){\n\n    exit();\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\nfunction compare($x, $y) {\\n    return $x == $y;\\n}\\n\\n$arg00 = 12;\\n$x0 = findMinSum($arg00);\\n$v0 = 7;\\nif (!compare($x0, $v0)) {\\n    throw new Exception(\\\"Error at 1th assert statement.\\\");\\n}\\n$arg10 = 105;\\n$x1 = findMinSum($arg10);\\n$v1 = 15;\\nif (!compare($x1, $v1)) {\\n    throw new Exception(\\\"Error at 2th assert statement.\\\");\\n}\\n$arg20 = 2;\\n$x2 = findMinSum($arg20);\\n$v2 = 2;\\nif (!compare($x2, $v2)) {\\n    throw new Exception(\\\"Error at 3th assert statement.\\\");\\n}\\n\"}", "labels": "{\"task_id\": \"MBPHP/511\", \"programming_language\": \"php\", \"execution_language\": \"php\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```php\\n/**\\n * You are an expert PHP programmer, and here is your task.\\n * Write a function of recursion list sum.\\n * php > recursiveListSum([1, 2, [3, 4], [5, 6]])\\n * 21\\n * php > recursiveListSum([7, 10, [15, 14], [19, 41]])\\n * 106\\n * php > recursiveListSum([10, 20, [30, 40], [50, 60]])\\n * 210\\n */\\nfunction recursiveListSum($dataList) {\\n```\\n\\nAnswer:\\n```php\\n/**\\n * You are an expert PHP programmer, and here is your task.\\n * Write a function of recursion list sum.\\n * php > recursiveListSum([1, 2, [3, 4], [5, 6]])\\n * 21\\n * php > recursiveListSum([7, 10, [15, 14], [19, 41]])\\n * 106\\n * php > recursiveListSum([10, 20, [30, 40], [50, 60]])\\n * 210\\n */\\nfunction recursiveListSum($dataList) {\\n    $sum = 0;\\n    $i = 0;\\n    foreach ($dataList as $item) {\\n        if (is_array($item)) {\\n            $sum += recursiveListSum($item);\\n        } else {\\n            $sum += $item;\\n        }\\n    }\\n    return $sum;\\n}\\n```\\n\\n----------------\"}"}
{"id": 3607, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```php\n<?php\n\n/**\n * You are an expert PHP programmer, and here is your task.\n * * Write a function to count the element frequency in the mixed nested tuple.\n *\n * php > countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n * [5 => 2, 6 => 2, 7 => 1, 8 => 1, 9 => 2]\n * php > countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n * [6 => 2, 7 => 2, 8 => 1, 9 => 1, 10 => 2]\n * php > countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n * [7 => 2, 8 => 2, 9 => 1, 10 => 1, 11 => 2]\n */\nfunction countElementFreq($testtuple){\n\n```", "canonical_solution": "<?php\n\n/**\n * You are an expert PHP programmer, and here is your task.\n * * Write a function to count the element frequency in the mixed nested tuple.\n *\n * php > countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n * [5 => 2, 6 => 2, 7 => 1, 8 => 1, 9 => 2]\n * php > countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n * [6 => 2, 7 => 2, 8 => 1, 9 => 1, 10 => 2]\n * php > countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n * [7 => 2, 8 => 2, 9 => 1, 10 => 1, 11 => 2]\n */\nfunction countElementFreq($testtuple){\n\n    exit();\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\nfunction compare($x, $y) {\\n    return $x == $y;\\n}\\n\\n$arg00 = [5, 6, [5, 6], 7, [8, 9], 9];\\n$x0 = countElementFreq($arg00);\\n$v0 = [5 => 2, 6 => 2, 7 => 1, 8 => 1, 9 => 2];\\nif (!compare($x0, $v0)) {\\n    throw new Exception(\\\"Error at 1th assert statement.\\\");\\n}\\n$arg10 = [6, 7, [6, 7], 8, [9, 10], 10];\\n$x1 = countElementFreq($arg10);\\n$v1 = [6 => 2, 7 => 2, 8 => 1, 9 => 1, 10 => 2];\\nif (!compare($x1, $v1)) {\\n    throw new Exception(\\\"Error at 2th assert statement.\\\");\\n}\\n$arg20 = [7, 8, [7, 8], 9, [10, 11], 11];\\n$x2 = countElementFreq($arg20);\\n$v2 = [7 => 2, 8 => 2, 9 => 1, 10 => 1, 11 => 2];\\nif (!compare($x2, $v2)) {\\n    throw new Exception(\\\"Error at 3th assert statement.\\\");\\n}\\n\"}", "labels": "{\"task_id\": \"MBPHP/512\", \"programming_language\": \"php\", \"execution_language\": \"php\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```php\\n/**\\n * You are an expert PHP programmer, and here is your task.\\n * Write a function of recursion list sum.\\n * php > recursiveListSum([1, 2, [3, 4], [5, 6]])\\n * 21\\n * php > recursiveListSum([7, 10, [15, 14], [19, 41]])\\n * 106\\n * php > recursiveListSum([10, 20, [30, 40], [50, 60]])\\n * 210\\n */\\nfunction recursiveListSum($dataList) {\\n```\\n\\nAnswer:\\n```php\\n/**\\n * You are an expert PHP programmer, and here is your task.\\n * Write a function of recursion list sum.\\n * php > recursiveListSum([1, 2, [3, 4], [5, 6]])\\n * 21\\n * php > recursiveListSum([7, 10, [15, 14], [19, 41]])\\n * 106\\n * php > recursiveListSum([10, 20, [30, 40], [50, 60]])\\n * 210\\n */\\nfunction recursiveListSum($dataList) {\\n    $sum = 0;\\n    $i = 0;\\n    foreach ($dataList as $item) {\\n        if (is_array($item)) {\\n            $sum += recursiveListSum($item);\\n        } else {\\n            $sum += $item;\\n        }\\n    }\\n    return $sum;\\n}\\n```\\n\\n----------------\"}"}
{"id": 4064, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```perl\n\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find minimum sum of factors of a given number.\n#\n# >>> find_min_sum(12)\n# 7\n# >>> find_min_sum(105)\n# 15\n# >>> find_min_sum(2)\n# 2\nsub find_min_sum\n{\n  my ($num) = @_;\n\n```", "canonical_solution": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a Perl function to find minimum sum of factors of a given number.\n#\n# >>> find_min_sum(12)\n# 7\n# >>> find_min_sum(105)\n# 15\n# >>> find_min_sum(2)\n# 2\nsub find_min_sum\n{\n  my ($num) = @_;\n\n    exit();\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\nuse Data::Compare;\\n\\nmy $arg00 = 12;\\nmy $x0 = find_min_sum($arg00);\\nmy $v0 = 7;\\nunless(Compare($x0, $v0)) {\\n    die \\\"Exception -- test case 0 did not pass.\\\";\\n}\\nmy $arg10 = 105;\\nmy $x1 = find_min_sum($arg10);\\nmy $v1 = 15;\\nunless(Compare($x1, $v1)) {\\n    die \\\"Exception -- test case 1 did not pass.\\\";\\n}\\nmy $arg20 = 2;\\nmy $x2 = find_min_sum($arg20);\\nmy $v2 = 2;\\nunless(Compare($x2, $v2)) {\\n    die \\\"Exception -- test case 2 did not pass.\\\";\\n}\\n\"}", "labels": "{\"task_id\": \"MBPLP/511\", \"programming_language\": \"perl\", \"execution_language\": \"perl\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```perl\\n# You are an expert Perl programmer, and here is your task.\\n# Write a Perl function to count positive numbers in a list.\\n# >>> pos_count([1, -2, 3, -4])\\n# 2\\n# >>> pos_count([3, 4, 5, -1])\\n# 3\\n# >>> pos_count([1, 2, 3, 4])\\n# 4\\nsub pos_count\\n```\\n\\nAnswer:\\n```perl\\n# You are an expert Perl programmer, and here is your task.\\n# Write a Perl function to count positive numbers in a list.\\n# >>> pos_count([1, -2, 3, -4])\\n# 2\\n# >>> pos_count([3, 4, 5, -1])\\n# 3\\n# >>> pos_count([1, 2, 3, 4])\\n# 4\\nsub pos_count\\n{\\n  my ($list) = @_;\\n  my ($pos, $count) = 0;\\n  foreach my $x (@$list) {\\n    if ($x > 0) {\\n      $pos++;\\n    }\\n  }\\n  return $pos;\\n}\\n```\\n\\n----------------\"}"}
{"id": 4065, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```perl\n\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the element frequency in the mixed nested tuple.\n#\n# >>> count_element_freq([5, 6, [5, 6], 7, [8, 9], 9])\n# {5 => 2, 6 => 2, 7 => 1, 8 => 1, 9 => 2}\n# >>> count_element_freq([6, 7, [6, 7], 8, [9, 10], 10])\n# {6 => 2, 7 => 2, 8 => 1, 9 => 1, 10 => 2}\n# >>> count_element_freq([7, 8, [7, 8], 9, [10, 11], 11])\n# {7 => 2, 8 => 2, 9 => 1, 10 => 1, 11 => 2}\nsub count_element_freq\n{\n  my ($test_tuple) = @_;\n\n```", "canonical_solution": "\n# You are an expert Perl programmer, and here is your task.\n# # Write a function to count the element frequency in the mixed nested tuple.\n#\n# >>> count_element_freq([5, 6, [5, 6], 7, [8, 9], 9])\n# {5 => 2, 6 => 2, 7 => 1, 8 => 1, 9 => 2}\n# >>> count_element_freq([6, 7, [6, 7], 8, [9, 10], 10])\n# {6 => 2, 7 => 2, 8 => 1, 9 => 1, 10 => 2}\n# >>> count_element_freq([7, 8, [7, 8], 9, [10, 11], 11])\n# {7 => 2, 8 => 2, 9 => 1, 10 => 1, 11 => 2}\nsub count_element_freq\n{\n  my ($test_tuple) = @_;\n\n    exit();\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\nuse Data::Compare;\\n\\nmy $arg00 = [5, 6, [5, 6], 7, [8, 9], 9];\\nmy $x0 = count_element_freq($arg00);\\nmy $v0 = {5 => 2, 6 => 2, 7 => 1, 8 => 1, 9 => 2};\\nunless(Compare($x0, $v0)) {\\n    die \\\"Exception -- test case 0 did not pass.\\\";\\n}\\nmy $arg10 = [6, 7, [6, 7], 8, [9, 10], 10];\\nmy $x1 = count_element_freq($arg10);\\nmy $v1 = {6 => 2, 7 => 2, 8 => 1, 9 => 1, 10 => 2};\\nunless(Compare($x1, $v1)) {\\n    die \\\"Exception -- test case 1 did not pass.\\\";\\n}\\nmy $arg20 = [7, 8, [7, 8], 9, [10, 11], 11];\\nmy $x2 = count_element_freq($arg20);\\nmy $v2 = {7 => 2, 8 => 2, 9 => 1, 10 => 1, 11 => 2};\\nunless(Compare($x2, $v2)) {\\n    die \\\"Exception -- test case 2 did not pass.\\\";\\n}\\n\"}", "labels": "{\"task_id\": \"MBPLP/512\", \"programming_language\": \"perl\", \"execution_language\": \"perl\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```perl\\n# You are an expert Perl programmer, and here is your task.\\n# Write a Perl function to count positive numbers in a list.\\n# >>> pos_count([1, -2, 3, -4])\\n# 2\\n# >>> pos_count([3, 4, 5, -1])\\n# 3\\n# >>> pos_count([1, 2, 3, 4])\\n# 4\\nsub pos_count\\n```\\n\\nAnswer:\\n```perl\\n# You are an expert Perl programmer, and here is your task.\\n# Write a Perl function to count positive numbers in a list.\\n# >>> pos_count([1, -2, 3, -4])\\n# 2\\n# >>> pos_count([3, 4, 5, -1])\\n# 3\\n# >>> pos_count([1, 2, 3, 4])\\n# 4\\nsub pos_count\\n{\\n  my ($list) = @_;\\n  my ($pos, $count) = 0;\\n  foreach my $x (@$list) {\\n    if ($x > 0) {\\n      $pos++;\\n    }\\n  }\\n  return $pos;\\n}\\n```\\n\\n----------------\"}"}
{"id": 4522, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```scala\nobject Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a Scala function to find minimum sum of factors of a given number.\n     *\n     * >>> findMinSum(12)\n     * 7\n     * >>> findMinSum(105)\n     * 15\n     * >>> findMinSum(2)\n     * 2\n     */\n    def findMinSum(num : Int) : Int = {\n\n```", "canonical_solution": "    def findMinSum(num : Int) : Int = {\n        sys.exit()\n    }", "test": "{\"code\": \"object Main extends App {\\n\\n#<INSERT>\\n\\n\\n\\n    var arg00 : Int = 12\\n    var x0 : Int = findMinSum(arg00)\\n    var v0 : Int = 7\\n    assert(x0 == v0, \\\"Exception -- test case 0 did not pass. x0 = \\\" + x0)\\n\\n    var arg10 : Int = 105\\n    var x1 : Int = findMinSum(arg10)\\n    var v1 : Int = 15\\n    assert(x1 == v1, \\\"Exception -- test case 1 did not pass. x1 = \\\" + x1)\\n\\n    var arg20 : Int = 2\\n    var x2 : Int = findMinSum(arg20)\\n    var v2 : Int = 2\\n    assert(x2 == v2, \\\"Exception -- test case 2 did not pass. x2 = \\\" + x2)\\n\\n\\n}\\n\"}", "labels": "{\"task_id\": \"MBSCP/511\", \"programming_language\": \"scala\", \"execution_language\": \"scala\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```scala\\nobject Main extends App {\\n    /**\\n     * You are an expert Scala programmer, and here is your task.\\n     * Write a function to reverse strings in a given list of string values.\\n     * >>> reverseStringList(List(\\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"White\\\", \\\"Black\\\"))\\n     * List(\\\"deR\\\", \\\"neerG\\\", \\\"eulB\\\", \\\"etihW\\\", \\\"kcalB\\\")\\n     * >>> reverseStringList(List(\\\"john\\\", \\\"amal\\\", \\\"joel\\\", \\\"george\\\"))\\n     * List(\\\"nhoj\\\", \\\"lama\\\", \\\"leoj\\\", \\\"egroeg\\\")\\n     * >>> reverseStringList(List(\\\"jack\\\", \\\"john\\\", \\\"mary\\\"))\\n     * List(\\\"kcaj\\\", \\\"nhoj\\\", \\\"yram\\\")\\n     */\\n    def reverseStringList(stringlist : List[String]) : List[String] = {\\n```\\n\\nAnswer:\\n```scala\\nobject Main extends App {\\n    /**\\n     * You are an expert Scala programmer, and here is your task.\\n     * Write a function to reverse strings in a given list of string values.\\n     * >>> reverseStringList(List(\\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"White\\\", \\\"Black\\\"))\\n     * List(\\\"deR\\\", \\\"neerG\\\", \\\"eulB\\\", \\\"etihW\\\", \\\"kcalB\\\")\\n     * >>> reverseStringList(List(\\\"john\\\", \\\"amal\\\", \\\"joel\\\", \\\"george\\\"))\\n     * List(\\\"nhoj\\\", \\\"lama\\\", \\\"leoj\\\", \\\"egroeg\\\")\\n     * >>> reverseStringList(List(\\\"jack\\\", \\\"john\\\", \\\"mary\\\"))\\n     * List(\\\"kcaj\\\", \\\"nhoj\\\", \\\"yram\\\")\\n     */\\n    def reverseStringList(stringlist : List[String]) : List[String] = {\\n        stringlist.map(_.reverse)\\n    }\\n}\\n```\\n\\n----------------\"}"}
{"id": 4523, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```scala\nobject Main extends App {\n    /**\n     * You are an expert Scala programmer, and here is your task.\n     * * Write a function to count the element frequency in the mixed nested tuple.\n     *\n     * >>> countElementFreq(List(5, 6, List(5, 6), 7, List(8, 9), 9))\n     * Map(5->2, 6->2, 7->1, 8->1, 9->2)\n     * >>> countElementFreq(List(6, 7, List(6, 7), 8, List(9, 10), 10))\n     * Map(6->2, 7->2, 8->1, 9->1, 10->2)\n     * >>> countElementFreq(List(7, 8, List(7, 8), 9, List(10, 11), 11))\n     * Map(7->2, 8->2, 9->1, 10->1, 11->2)\n     */\n    def countElementFreq(testTuple : List[Any]) : Map[Int, Int] = {\n\n```", "canonical_solution": "    def countElementFreq(testTuple : List[Any]) : Map[Int, Int] = {\n        sys.exit()\n    }", "test": "{\"code\": \"object Main extends App {\\n\\n#<INSERT>\\n\\n\\n\\n    var arg00 : List[Any] = List(5, 6, List(5, 6), 7, List(8, 9), 9)\\n    var x0 : Map[Int, Int] = countElementFreq(arg00)\\n    var v0 : Map[Int, Int] = Map(5 -> 2, 6 -> 2, 7 -> 1, 8 -> 1, 9 -> 2)\\n    assert(x0 == v0, \\\"Exception -- test case 0 did not pass. x0 = \\\" + x0)\\n\\n    var arg10 : List[Any] = List(6, 7, List(6, 7), 8, List(9, 10), 10)\\n    var x1 : Map[Int, Int] = countElementFreq(arg10)\\n    var v1 : Map[Int, Int] = Map(6 -> 2, 7 -> 2, 8 -> 1, 9 -> 1, 10 -> 2)\\n    assert(x1 == v1, \\\"Exception -- test case 1 did not pass. x1 = \\\" + x1)\\n\\n    var arg20 : List[Any] = List(7, 8, List(7, 8), 9, List(10, 11), 11)\\n    var x2 : Map[Int, Int] = countElementFreq(arg20)\\n    var v2 : Map[Int, Int] = Map(7 -> 2, 8 -> 2, 9 -> 1, 10 -> 1, 11 -> 2)\\n    assert(x2 == v2, \\\"Exception -- test case 2 did not pass. x2 = \\\" + x2)\\n\\n\\n}\\n\"}", "labels": "{\"task_id\": \"MBSCP/512\", \"programming_language\": \"scala\", \"execution_language\": \"scala\", \"category\": \"mbxp\", \"difficulty\": \"easy\", \"fewshot\": \"Question:To complete the following code tasks, write the full-code, including the part of the package import.\\n```scala\\nobject Main extends App {\\n    /**\\n     * You are an expert Scala programmer, and here is your task.\\n     * Write a function to reverse strings in a given list of string values.\\n     * >>> reverseStringList(List(\\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"White\\\", \\\"Black\\\"))\\n     * List(\\\"deR\\\", \\\"neerG\\\", \\\"eulB\\\", \\\"etihW\\\", \\\"kcalB\\\")\\n     * >>> reverseStringList(List(\\\"john\\\", \\\"amal\\\", \\\"joel\\\", \\\"george\\\"))\\n     * List(\\\"nhoj\\\", \\\"lama\\\", \\\"leoj\\\", \\\"egroeg\\\")\\n     * >>> reverseStringList(List(\\\"jack\\\", \\\"john\\\", \\\"mary\\\"))\\n     * List(\\\"kcaj\\\", \\\"nhoj\\\", \\\"yram\\\")\\n     */\\n    def reverseStringList(stringlist : List[String]) : List[String] = {\\n```\\n\\nAnswer:\\n```scala\\nobject Main extends App {\\n    /**\\n     * You are an expert Scala programmer, and here is your task.\\n     * Write a function to reverse strings in a given list of string values.\\n     * >>> reverseStringList(List(\\\"Red\\\", \\\"Green\\\", \\\"Blue\\\", \\\"White\\\", \\\"Black\\\"))\\n     * List(\\\"deR\\\", \\\"neerG\\\", \\\"eulB\\\", \\\"etihW\\\", \\\"kcalB\\\")\\n     * >>> reverseStringList(List(\\\"john\\\", \\\"amal\\\", \\\"joel\\\", \\\"george\\\"))\\n     * List(\\\"nhoj\\\", \\\"lama\\\", \\\"leoj\\\", \\\"egroeg\\\")\\n     * >>> reverseStringList(List(\\\"jack\\\", \\\"john\\\", \\\"mary\\\"))\\n     * List(\\\"kcaj\\\", \\\"nhoj\\\", \\\"yram\\\")\\n     */\\n    def reverseStringList(stringlist : List[String]) : List[String] = {\\n        stringlist.map(_.reverse)\\n    }\\n}\\n```\\n\\n----------------\"}"}
