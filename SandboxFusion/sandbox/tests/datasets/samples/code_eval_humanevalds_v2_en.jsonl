{"id": 0, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n    // (false)\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n    // (true)\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n\n```", "canonical_solution": "using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n    // (false)\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n    // (true)\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n                if (Math.Abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "test": "{\"code\": \"using System;\\nusing System.Numerics;\\nusing System.Diagnostics;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Text;\\nusing System.Security.Cryptography;\\nclass Problem {\\n    // Check if in given list of numbers, are any two numbers closer to each other than\\n    // given threshold.\\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\\n    // (false)\\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\\n    // (true)\\n\\n    #<INSERT>\\n\\n    public static void Main(string[] args) {\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\\n    }\\n\\n}\"}", "labels": "{\"task_id\": \"test_sample/0\", \"programming_language\": \"csharp\", \"execution_language\": \"csharp\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 1, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```java\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if in given array list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    // (false)\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    // (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n\n```", "canonical_solution": "import java.util.*;\n\nclass Problem {\n    // Check if in given array list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    // (false)\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    // (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n        return true;\n    }\n}", "test": "{\"code\": \"import java.util.*;\\nimport java.lang.reflect.*;\\nimport org.javatuples.*;\\nimport java.security.*;\\nimport java.math.*;\\nimport java.io.*;\\nimport java.util.stream.*;\\nclass Main {\\n    // Check if in given array list of numbers, are any two numbers closer to each other than\\n    // given threshold.\\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\\n    // (false)\\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\\n    // (true)\\n\\n    #<INSERT>\\n\\n    public static void main(String[] args) {\\n        assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));\\n    }\\n\\n}\"}", "labels": "{\"task_id\": \"test_sample/1\", \"programming_language\": \"java\", \"execution_language\": \"java\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 2, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```bash\n#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n\n```", "canonical_solution": "#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    echo \"true\"\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\ncandidate() {\\n    has_close_elements \\\"$@\\\"\\n}\\n\\nset -e\\nrun_test() {\\n    [[ $(candidate \\\"1.0 2.0 3.9 4.0 5.0 2.2\\\" \\\"0.3\\\") = \\\"true\\\" ]]\\n}\\n\\nrun_test\"}", "labels": "{\"task_id\": \"test_sample/2\", \"programming_language\": \"bash\", \"execution_language\": \"bash\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 3, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```racket\n#lang racket\n\n;; Check if in given list of numbers, are any two numbers closer to each other than\n;; given threshold.\n;; >>> (has_close_elements (list 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n\n```", "canonical_solution": "#lang racket\n\n;; Check if in given list of numbers, are any two numbers closer to each other than\n;; given threshold.\n;; >>> (has_close_elements (list 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n  (define (close? a b)\n    (< (abs (- a b)) threshold))\n  (define (check-pairs lst)\n    (cond\n      [(null? lst) #f]\n      [(ormap (lambda (x) (close? (car lst) x)) (cdr lst)) #t]\n      [else (check-pairs (cdr lst))]))\n  (check-pairs numbers))\n\n;; Test cases\n(displayln (has_close_elements (list 1.0 2.0 3.0) 0.5)) ; #f\n(displayln (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)) ; #t", "test": "{\"code\": \"#<INSERT>\\n\\n(require rackunit)\\n\\n(define (test-humaneval)\\n\\n  (let (( candidate has_close_elements))\\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)\\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)\\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)\\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)\\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)\\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)\\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)\\n))\\n\\n(test-humaneval)\"}", "labels": "{\"task_id\": \"test_sample/3\", \"programming_language\": \"racket\", \"execution_language\": \"racket\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 4, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```swift\n\n/// Check if in given array of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0, 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0, 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n\n```", "canonical_solution": "import Foundation\n\n/// Check if in given array of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0, 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0, 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n// Test cases\nprint(has_close_elements(numbers: [1.0, 2.0, 3.0], threshold: 0.5)) // false\nprint(has_close_elements(numbers: [1.0, 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)) // true", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\n\\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\\n    if left.count != right.count {\\n        return false\\n    }\\n    for (l, r) in zip(left, right) {\\n        if l != r {\\n            return false\\n        }\\n    }\\n    return true\\n}\\n\\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\\nassert(has_close_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\\nassert(has_close_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\\nassert(has_close_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\\nassert(has_close_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\\nassert(has_close_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)\"}", "labels": "{\"task_id\": \"test_sample/4\", \"programming_language\": \"swift\", \"execution_language\": \"swift\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 10000, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```csharp\nusing System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n    // (false)\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n    // (true)\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n\n```", "canonical_solution": "using System;\nusing System.Collections.Generic;\n\nclass Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n    // (false)\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n    // (true)\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n        return false;\n    }\n}", "test": "{\"code\": \"using System;\\nusing System.Numerics;\\nusing System.Diagnostics;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Text;\\nusing System.Security.Cryptography;\\nclass Problem {\\n    // Check if in given list of numbers, are any two numbers closer to each other than\\n    // given threshold.\\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\\n    // (false)\\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\\n    // (true)\\n\\n    #<INSERT>\\n\\n    public static void Main(string[] args) {\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.3f)) == (true));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f})), (0.05f)) == (false));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.95f)) == (true));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f})), (0.8f)) == (false));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.1f)) == (true));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (1.0f)) == (true));\\n    Debug.Assert(HasCloseElements((new List<float>(new float[]{(float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f})), (0.5f)) == (false));\\n    }\\n\\n}\"}", "labels": "{\"task_id\": \"test_sample/10000\", \"programming_language\": \"csharp\", \"execution_language\": \"csharp\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 10001, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```java\nimport java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    // Check if in given array list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    // (false)\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    // (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n\n```", "canonical_solution": "import java.util.*;\n\nclass Problem {\n    // Check if in given array list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\n    // (false)\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\n    // (true)\n    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {\n        return false;\n    }\n}", "test": "{\"code\": \"import java.util.*;\\nimport java.lang.reflect.*;\\nimport org.javatuples.*;\\nimport java.security.*;\\nimport java.math.*;\\nimport java.io.*;\\nimport java.util.stream.*;\\nclass Main {\\n    // Check if in given array list of numbers, are any two numbers closer to each other than\\n    // given threshold.\\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))\\n    // (false)\\n    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))\\n    // (true)\\n\\n    #<INSERT>\\n\\n    public static void main(String[] args) {\\n        assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.3f)) == (true));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f, (float)2.2f))), (0.05f)) == (false));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.95f)) == (true));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f))), (0.8f)) == (false));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.1f)) == (true));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (1.0f)) == (true));\\n        // assert(hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.1f, (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f))), (0.5f)) == (false));\\n    }\\n\\n}\"}", "labels": "{\"task_id\": \"test_sample/10001\", \"programming_language\": \"java\", \"execution_language\": \"java\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 10002, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```bash\n#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n\n```", "canonical_solution": "#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    echo \"false\"\n}", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\ncandidate() {\\n    has_close_elements \\\"$@\\\"\\n}\\n\\nset -e\\nrun_test() {\\n    [[ $(candidate \\\"1.0 2.0 3.9 4.0 5.0 2.2\\\" \\\"0.3\\\") = \\\"true\\\" ]]\\n}\\n\\nrun_test\"}", "labels": "{\"task_id\": \"test_sample/10002\", \"programming_language\": \"bash\", \"execution_language\": \"bash\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 10003, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```racket\n#lang racket\n\n;; Check if in given list of numbers, are any two numbers closer to each other than\n;; given threshold.\n;; >>> (has_close_elements (list 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n\n```", "canonical_solution": "#lang racket\n\n;; Check if in given list of numbers, are any two numbers closer to each other than\n;; given threshold.\n;; >>> (has_close_elements (list 1.0 2.0 3.0) 0.5)\n;; #f\n;; >>> (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)\n;; #t\n(define (has_close_elements numbers threshold)\n  #f)\n\n;; Test cases\n(displayln (has_close_elements (list 1.0 2.0 3.0) 0.5)) ; #f\n(displayln (has_close_elements (list 1.0 2.8 3.0 4.0 5.0 2.0) 0.3)) ; #f", "test": "{\"code\": \"#<INSERT>\\n\\n(require rackunit)\\n\\n(define (test-humaneval)\\n\\n  (let (( candidate has_close_elements))\\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.3) #t 0.001)\\n    (check-within (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2) 0.05) #f 0.001)\\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.95) #t 0.001)\\n    (check-within (candidate (list 1.0 2.0 5.9 4.0 5.0) 0.8) #f 0.001)\\n    (check-within (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0) 0.1) #t 0.001)\\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 1.0) #t 0.001)\\n    (check-within (candidate (list 1.1 2.2 3.1 4.1 5.1) 0.5) #f 0.001)\\n))\\n\\n(test-humaneval)\"}", "labels": "{\"task_id\": \"test_sample/10003\", \"programming_language\": \"racket\", \"execution_language\": \"racket\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 10004, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```swift\n\n/// Check if in given array of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0, 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0, 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n\n```", "canonical_solution": "import Foundation\n\n/// Check if in given array of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0, 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0, 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n    return false\n}\n", "test": "{\"code\": \"#<INSERT>\\n\\n\\n\\n\\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\\n    if left.count != right.count {\\n        return false\\n    }\\n    for (l, r) in zip(left, right) {\\n        if l != r {\\n            return false\\n        }\\n    }\\n    return true\\n}\\n\\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\\nassert(has_close_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\\nassert(has_close_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\\nassert(has_close_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\\nassert(has_close_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\\nassert(has_close_elements(numbers: [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)\"}", "labels": "{\"task_id\": \"test_sample/10004\", \"programming_language\": \"swift\", \"execution_language\": \"swift\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
