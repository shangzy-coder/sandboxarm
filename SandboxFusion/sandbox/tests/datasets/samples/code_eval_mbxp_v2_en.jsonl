{"id": 0, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n        ///\n        /// Examples:\n        /// >>> MinCost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n        /// >>> 8\n        /// >>> MinCost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n        /// >>> 12\n        /// >>> MinCost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n        /// >>> 16\n        /// </summary>\n        public static int MinCost (List<List<int>> cost, int m, int n)\n        {\n```", "canonical_solution": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int MinCost(List<List<int>> cost, int m, int n)\n        {\n            Environment.Exit(0);\n            return 0; // Default value to satisfy the function signature\n        }\n    }\n}", "test": "{\"code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Text.RegularExpressions;\\n\\nnamespace Solution\\n{\\n    public class Program {\\n\\n#<INSERT>\\n\\n        public static void Main(string[] args)\\n        {\\n            var actual1 = MinCost(new List<List<int>> {new List<int> {1,2,3},new List<int> {4,8,2},new List<int> {1,5,3}},2,2);\\n            var expected1 = 8;\\n            if (actual1 != expected1) {throw new Exception(\\\"Exception --- test case 0 failed to pass\\\");}\\n\\n            var actual2 = MinCost(new List<List<int>> {new List<int> {2,3,4},new List<int> {5,9,3},new List<int> {2,6,4}},2,2);\\n            var expected2 = 12;\\n            if (actual2 != expected2) {throw new Exception(\\\"Exception --- test case 1 failed to pass\\\");}\\n\\n            var actual3 = MinCost(new List<List<int>> {new List<int> {3,4,5},new List<int> {6,10,4},new List<int> {3,7,5}},2,2);\\n            var expected3 = 16;\\n            if (actual3 != expected3) {throw new Exception(\\\"Exception --- test case 2 failed to pass\\\");}\\n        }\\n    }\\n}\"}", "labels": "{\"task_id\": \"test_sample/0\", \"programming_language\": \"csharp\", \"execution_language\": \"csharp\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
{"id": 10000, "content": "To complete the following code tasks, write the full-code, including the part of the package import.\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        /// <summary>\n        /// Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n        ///\n        /// Examples:\n        /// >>> MinCost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n        /// >>> 8\n        /// >>> MinCost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n        /// >>> 12\n        /// >>> MinCost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n        /// >>> 16\n        /// </summary>\n        public static int MinCost (List<List<int>> cost, int m, int n)\n        {\n```", "canonical_solution": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\n\nnamespace Solution\n{\n    public class Program\n    {\n        public static int MinCost(List<List<int>> cost, int m, int n)\n        {\n            return 0; // Default value to satisfy the function signature\n        }\n    }\n}", "test": "{\"code\": \"using System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Text.RegularExpressions;\\n\\nnamespace Solution\\n{\\n    public class Program {\\n\\n#<INSERT>\\n\\n        public static void Main(string[] args)\\n        {\\n            var actual1 = MinCost(new List<List<int>> {new List<int> {1,2,3},new List<int> {4,8,2},new List<int> {1,5,3}},2,2);\\n            var expected1 = 8;\\n            if (actual1 != expected1) {throw new Exception(\\\"Exception --- test case 0 failed to pass\\\");}\\n\\n            var actual2 = MinCost(new List<List<int>> {new List<int> {2,3,4},new List<int> {5,9,3},new List<int> {2,6,4}},2,2);\\n            var expected2 = 12;\\n            if (actual2 != expected2) {throw new Exception(\\\"Exception --- test case 1 failed to pass\\\");}\\n\\n            var actual3 = MinCost(new List<List<int>> {new List<int> {3,4,5},new List<int> {6,10,4},new List<int> {3,7,5}},2,2);\\n            var expected3 = 16;\\n            if (actual3 != expected3) {throw new Exception(\\\"Exception --- test case 2 failed to pass\\\");}\\n        }\\n    }\\n}\"}", "labels": "{\"task_id\": \"test_sample/10000\", \"programming_language\": \"csharp\", \"execution_language\": \"csharp\", \"category\": \"test_sample\", \"difficulty\": \"easy\", \"fewshot\": \"\"}"}
