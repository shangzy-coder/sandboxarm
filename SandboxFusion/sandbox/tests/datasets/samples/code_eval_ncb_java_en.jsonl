{"canonical_solution": "```java\n\npublic class PhoneNumberCreator {\n    public static String createPhoneNumber(int[] numbers) {\n        StringBuilder phoneNumber = new StringBuilder(\"(\");\n        for (int i = 0; i < numbers.length; i++) {\n            if (i == 3) {\n                phoneNumber.append(\") \");\n            } else if (i == 6) {\n                phoneNumber.append(\"-\");\n            }\n            phoneNumber.append(numbers[i]);\n        }\n        return phoneNumber.toString();\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nClassroom Exercise: Design a static method that accepts an array, each member of which is a single-digit integer (between 8 and 9), and this method can return a string containing these numbers in the form of a phone number. For example:\n createPhoneNumber ( new int []{1,2,3,4,5,6,7,8,9,0})//=> returns \"(123) 456-7890\"\nNote: Don't forget the space after the right parenthesis!\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCreatePhoneNumber1() {\n        assertEquals(\"(123) 456-7890\", PhoneNumberCreator.createPhoneNumber(new int[]{1,2,3,4,5,6,7,8,9,0}));\n    }\n}", "id": 0, "labels": "{\"execution_language\":\"java\", \"original_id\":131, \"original_promblem\":\"Classroom Exercise: Design a static method that accepts an array, each member of which is a single-digit integer (between 8 and 9), and this method can return a string containing these numbers in the form of a phone number. For example:\\n createPhoneNumber ( new int []{1,2,3,4,5,6,7,8,9,0})//=> returns \\\"(123) 456-7890\\\"\\nNote: Don't forget the space after the right parenthesis!\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\n\\nclass PhoneNumberCreatorTest {\\n    @Test\\n    void testCreatePhoneNumber2() {\\n        assertEquals(\\\"(987) 654-3210\\\", PhoneNumberCreator.createPhoneNumber(new int[]{9,8,7,6,5,4,3,2,1,0}));\\n    }\\n\\n    @Test\\n    void testCreatePhoneNumber3() {\\n        assertEquals(\\\"(111) 111-1111\\\", PhoneNumberCreator.createPhoneNumber(new int[]{1,1,1,1,1,1,1,1,1,1}));\\n    }\\n\\n    @Test\\n    void testCreatePhoneNumber4() {\\n        assertEquals(\\\"(999) 999-9999\\\", PhoneNumberCreator.createPhoneNumber(new int[]{9,9,9,9,9,9,9,9,9,9}));\\n    }\\n\\n    @Test\\n    void testCreatePhoneNumber5() {\\n        assertEquals(\\\"(123) 456-7890\\\", PhoneNumberCreator.createPhoneNumber(new int[]{1,2,3,4,5,6,7,8,9,0}));\\n    }\\n\\n    @Test\\n    void testCreatePhoneNumber6() {\\n        assertEquals(\\\"(000) 000-0000\\\", PhoneNumberCreator.createPhoneNumber(new int[]{0,0,0,0,0,0,0,0,0,0}));\\n    }\\n\\n    //boundary cases\\n    @Test\\n    void testCreatePhoneNumber7() {\\n        assertEquals(\\\"(123) 456-7890\\\", PhoneNumberCreator.createPhoneNumber(new int[]{1,2,3,4,5,6,7,8,9,0}));\\n    }\\n\\n    @Test\\n    void testCreatePhoneNumber8() {\\n        assertEquals(\\\"(000) 000-0000\\\", PhoneNumberCreator.createPhoneNumber(new int[]{0,0,0,0,0,0,0,0,0,0}));\\n    }\\n\\n    @Test\\n    void testCreatePhoneNumber9() {\\n        assertEquals(\\\"(999) 999-9999\\\", PhoneNumberCreator.createPhoneNumber(new int[]{9,9,9,9,9,9,9,9,9,9}));\\n    }\\n\\n    @Test\\n    void testCreatePhoneNumber10() {\\n        assertEquals(\\\"(123) 456-7890\\\", PhoneNumberCreator.createPhoneNumber(new int[]{1,2,3,4,5,6,7,8,9,0}));\\n    }\\n}\"}", "__internal_uuid__": "f7e9593b-1aa4-47e7-a8f7-3a89aba8eb3a"}
{"canonical_solution": "```java\n\nimport java.util.List;\nimport java.util.Arrays;\n\npublic class Conversation {\n    private String sender; // 发送者\n\n    public Conversation(String sender) {\n        this.sender = sender;\n    }\n\n    public String getSender() {\n        return sender;\n    }\n}\n\npublic class ConversationCounter {\n    public static int countConversationTurns(List<Conversation> conversations, String doctor, String patient) {\n        if (conversations == null || conversations.isEmpty()) {\n            return 0;\n        }\n\n        int count = 0;\n        String lastSender = conversations.get(0).getSender();\n        for (Conversation conversation : conversations) {\n            String currentSender = conversation.getSender();\n            if (!currentSender.equals(lastSender)) {\n                count++;\n                lastSender = currentSender;\n            }\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\")\n        );\n\n        System.out.println(countConversationTurns(conversations, \"doctor\", \"patient\")); // 输出：3\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nQuestion: One of the features of our company's product is that doctors and patients can send messages to each other. Now we need to calculate the back and forth conversation between a certain doctor and a certain patient. The definition of back and forth is that one party sends a message, and the other party needs to reply to count as one back and forth. For example: Assume that the message sent by the doctor is represented by 'a', and the message sent by the patient is represented by 'b'. According to the definition, 'ab' counts as one back and forth, 'abb', 'aba', 'aab', 'aabb' also count as one back and forth, 'abab', 'abba', 'abbba' count as two back and forth.\nExpectation: Implement a complete method in Java, the input is the conversation list of a certain doctor and a certain patient (structure is self-defined), the output is the number of back and forth conversations; the code should be clear in thought, rigorous in logic, and have boundary value judgment.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCountConversationTurns1() {\n        List<Conversation> conversations = Arrays.asList(\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"doctor\"),\n                new Conversation(\"patient\"),\n                new Conversation(\"patient\")\n        );\n        assertEquals(3, ConversationCounter.countConversationTurns(conversations, \"doctor\", \"patient\"));\n    }\n}", "id": 1, "labels": "{\"execution_language\":\"java\", \"original_id\":132, \"original_promblem\":\"Question: One of the features of our company's product is that doctors and patients can send messages to each other. Now we need to calculate the back and forth conversation between a certain doctor and a certain patient. The definition of back and forth is that one party sends a message, and the other party needs to reply to count as one back and forth. For example: Assume that the message sent by the doctor is represented by 'a', and the message sent by the patient is represented by 'b'. According to the definition, 'ab' counts as one back and forth, 'abb', 'aba', 'aab', 'aabb' also count as one back and forth, 'abab', 'abba', 'abbba' count as two back and forth.\\nExpectation: Implement a complete method in Java, the input is the conversation list of a certain doctor and a certain patient (structure is self-defined), the output is the number of back and forth conversations; the code should be clear in thought, rigorous in logic, and have boundary value judgment.\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\nimport java.util.Arrays;\\nimport java.util.List;\\n\\nclass ConversationTest {\\n    @Test\\n    void testCountConversationTurns2() {\\n        List<Conversation> conversations = Arrays.asList(\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"patient\\\")\\n        );\\n        assertEquals(5, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n\\n    @Test\\n    void testCountConversationTurns3() {\\n        List<Conversation> conversations = Arrays.asList(\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"patient\\\")\\n        );\\n        assertEquals(1, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n\\n    @Test\\n    void testCountConversationTurns4() {\\n        List<Conversation> conversations = Arrays.asList(\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"doctor\\\")\\n        );\\n        assertEquals(6, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n\\n    @Test\\n    void testCountConversationTurns5() {\\n        List<Conversation> conversations = Arrays.asList(\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"doctor\\\"),\\n                new Conversation(\\\"doctor\\\")\\n        );\\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n\\n    @Test\\n    void testCountConversationTurns6() {\\n        List<Conversation> conversations = Arrays.asList(\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"patient\\\"),\\n                new Conversation(\\\"patient\\\")\\n        );\\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n\\n    // boundary cases\\n    @Test\\n    void testCountConversationTurns7() {\\n        List<Conversation> conversations = Arrays.asList(\\n                new Conversation(\\\"doctor\\\")\\n        );\\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n\\n    @Test\\n    void testCountConversationTurns8() {\\n        List<Conversation> conversations = Arrays.asList(\\n                new Conversation(\\\"patient\\\")\\n        );\\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n\\n    @Test\\n    void testCountConversationTurns9() {\\n        List<Conversation> conversations = Arrays.asList();\\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n\\n    @Test\\n    void testCountConversationTurns10() {\\n        List<Conversation> conversations = null;\\n        assertEquals(0, ConversationCounter.countConversationTurns(conversations, \\\"doctor\\\", \\\"patient\\\"));\\n    }\\n}\"}", "__internal_uuid__": "38f94e19-11a5-451c-ae17-64ed31c4466d"}
{"canonical_solution": "```java\n\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\npublic class Main {\n    public static void main(String[] args) {\n        String text = \"全部已关闭待支付交易成功订单号: 100e863a2b86402a881b62abee3e337e交易成功客户账号: 13422344170产品名称:代服管家￥200.00\";\n        String result = findFirstAlphabeticStringAfterOrder(text);\n\n        if (result != null) {\n            System.out.println(\"找到的字符串: \" + result);\n        } else {\n            System.out.println(\"没有找到匹配的字符串\");\n        }\n    }\n\n    public static String findFirstAlphabeticStringAfterOrder(String text) {\n        String regex = \"订单.*?([a-zA-Z]+)\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(text);\n\n        if (matcher.find()) {\n            return matcher.group(1);\n        } else {\n            return null;\n        }\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nI want to extract the first letter or English string that appears after the two characters \"order\" from this string, \"All closed pending payment transaction successful order number: 100e863a2b86402a881b62abee3e337e transaction successful customer account number: 13422344170 product name: Agent Butler ¥200.00\". Please implement it with Java's regular expression.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n\n    @Test\n    void testBasic() {\n        assertEquals(\"e\", Main.findFirstAlphabeticStringAfterOrder(\"订单号: e123456\"));\n    }\n}", "id": 2, "labels": "{\"execution_language\":\"java\", \"original_id\":133, \"original_promblem\":\"I want to extract the first letter or English string that appears after the two characters \\\"order\\\" from this string, \\\"All closed pending payment transaction successful order number: 100e863a2b86402a881b62abee3e337e transaction successful customer account number: 13422344170 product name: Agent Butler ¥200.00\\\". Please implement it with Java's regular expression.\", \"programming_language\":\"java\", \"tags\":\"Algorithm and Data Structure\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nclass MainTest {\\n    @Test\\n    void testNoOrderKeyword() {\\n        assertNull(Main.findFirstAlphabeticStringAfterOrder(\\\"没有订单关键字\\\"));\\n    }\\n\\n    @Test\\n    void testOrderWithoutAlphabeticString() {\\n        assertNull(Main.findFirstAlphabeticStringAfterOrder(\\\"订单号: 123456\\\"));\\n    }\\n\\n    @Test\\n    void testEmptyString() {\\n        assertNull(Main.findFirstAlphabeticStringAfterOrder(\\\"\\\"));\\n    }\\n\\n    @Test\\n    void testOnlyOrder() {\\n        assertNull(Main.findFirstAlphabeticStringAfterOrder(\\\"订单\\\"));\\n    }\\n\\n    @Test\\n    void testMultipleAlphabeticStrings() {\\n        assertEquals(\\\"abc\\\", Main.findFirstAlphabeticStringAfterOrder(\\\"订单号: abc123def456\\\"));\\n    }\\n\\n    @Test\\n    void testLongString() {\\n        assertEquals(\\\"longString\\\", Main.findFirstAlphabeticStringAfterOrder(\\\"订单号: 1234567890longString\\\"));\\n    }\\n\\n    @Test\\n    void testSpecialCharacters() {\\n        assertEquals(\\\"test\\\", Main.findFirstAlphabeticStringAfterOrder(\\\"订单号: !@#$%test^&*()\\\"));\\n    }\\n\\n    @Test\\n    void testAllAlphabeticString() {\\n        assertEquals(\\\"AllAlphabetic\\\", Main.findFirstAlphabeticStringAfterOrder(\\\"订单AllAlphabetic\\\"));\\n    }\\n\\n    @Test\\n    void testMixedCharacters() {\\n        assertEquals(\\\"Mixed\\\", Main.findFirstAlphabeticStringAfterOrder(\\\"订单123!@#Mixed%^&*\\\"));\\n    }\\n}\\n\"}", "__internal_uuid__": "2e500082-d939-409a-aede-8244bf51fc2c"}
{"canonical_solution": "```java\n\nimport java.util.ArrayList;\n\nclass User {\n    private String name;\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"name is:\" + name;\n    }\n}\n\nclass UserManager {\n    private ArrayList<User> users;\n\n    public UserManager() {\n        users = new ArrayList<>();\n    }\n\n    public void addUser(User user) {\n        users.add(user);\n    }\n\n    public void deleteUser(User user) {\n        users.remove(user);\n    }\n\n    public boolean isExist(User user) {\n        return users.contains(user);\n    }\n\n    public void display() {\n        for (User user : users) {\n            System.out.println(user);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        User john = new User(\"john\");\n        userManager.addUser(alice);\n        userManager.addUser(john);\n        userManager.display();\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\n1. In the UserManager class, user management services are provided through ArrayList.\n\n2. Define an ArrayList property 'users' in the UserManager class.\n\n3. Define the following methods in the UserManager class to operate on the users in 'users' (refer to the call method of the UserManager class in the main method for writing):\n\n   (1) Add user method 'addUser', to add a user information to 'users'.\n   \n   (2) Delete user method 'deleteUser', to delete a user information from 'users'.\n   \n   (3) Check if a user exists method 'isExist', to determine whether the user exists in 'users'.\n   \n   (4) Display all user information method 'display': directly output user object information.\n\n3. Run the program directly to display the following results.\n\nThe output result is:\n\nname is: alice\n\nname is: john\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testAddUser() {\n        UserManager userManager = new UserManager();\n        User alice = new User(\"alice\");\n        userManager.addUser(alice);\n        assertTrue(userManager.isExist(alice));\n    }\n}", "id": 3, "labels": "{\"execution_language\":\"java\", \"original_id\":134, \"original_promblem\":\"1. In the UserManager class, user management services are provided through ArrayList.\\n\\n2. Define an ArrayList property 'users' in the UserManager class.\\n\\n3. Define the following methods in the UserManager class to operate on the users in 'users' (refer to the call method of the UserManager class in the main method for writing):\\n\\n   (1) Add user method 'addUser', to add a user information to 'users'.\\n   \\n   (2) Delete user method 'deleteUser', to delete a user information from 'users'.\\n   \\n   (3) Check if a user exists method 'isExist', to determine whether the user exists in 'users'.\\n   \\n   (4) Display all user information method 'display': directly output user object information.\\n\\n3. Run the program directly to display the following results.\\n\\nThe output result is:\\n\\nname is: alice\\n\\nname is: john\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.util.ArrayList;\\n\\nclass MainTest {\\n    @Test\\n    void testDeleteUser() {\\n        UserManager userManager = new UserManager();\\n        User alice = new User(\\\"alice\\\");\\n        userManager.addUser(alice);\\n        userManager.deleteUser(alice);\\n        assertFalse(userManager.isExist(alice));\\n    }\\n\\n    @Test\\n    void testIsExist() {\\n        UserManager userManager = new UserManager();\\n        User alice = new User(\\\"alice\\\");\\n        userManager.addUser(alice);\\n        assertTrue(userManager.isExist(alice));\\n    }\\n\\n    @Test\\n    void testIsNotExist() {\\n        UserManager userManager = new UserManager();\\n        User alice = new User(\\\"alice\\\");\\n        assertFalse(userManager.isExist(alice));\\n    }\\n\\n    @Test\\n    void testAddMultipleUsers() {\\n        UserManager userManager = new UserManager();\\n        User alice = new User(\\\"alice\\\");\\n        User bob = new User(\\\"bob\\\");\\n        userManager.addUser(alice);\\n        userManager.addUser(bob);\\n        assertTrue(userManager.isExist(alice));\\n        assertTrue(userManager.isExist(bob));\\n    }\\n\\n    @Test\\n    void testDeleteNonExistentUser() {\\n        UserManager userManager = new UserManager();\\n        User alice = new User(\\\"alice\\\");\\n        userManager.deleteUser(alice);\\n        assertFalse(userManager.isExist(alice));\\n    }\\n\\n    @Test\\n    void testAddUserBoundary() {\\n        UserManager userManager = new UserManager();\\n        User user = new User(\\\"\\\");\\n        userManager.addUser(user);\\n        assertTrue(userManager.isExist(user));\\n    }\\n\\n    @Test\\n    void testDeleteUserBoundary() {\\n        UserManager userManager = new UserManager();\\n        User user = new User(\\\"\\\");\\n        userManager.addUser(user);\\n        userManager.deleteUser(user);\\n        assertFalse(userManager.isExist(user));\\n    }\\n\\n    @Test\\n    void testIsExistBoundary() {\\n        UserManager userManager = new UserManager();\\n        User user = new User(\\\"\\\");\\n        assertFalse(userManager.isExist(user));\\n    }\\n\\n    @Test\\n    void testAddMultipleUsersBoundary() {\\n        UserManager userManager = new UserManager();\\n        for (int i = 0; i < 1000; i++) {\\n            User user = new User(\\\"user\\\" + i);\\n            userManager.addUser(user);\\n            assertTrue(userManager.isExist(user));\\n        }\\n    }\\n}\"}", "__internal_uuid__": "e6d1237b-9264-4560-abc9-ec68a611cdac"}
{"canonical_solution": "```java\n\npublic class Student {\n    private String name;\n    private String userID;\n    private double math;\n    private double chinese;\n    private double english;\n\n    public Student(String name, String userID, double math, double chinese, double english) {\n        this.name = name;\n        this.userID = userID;\n        setMath(math);\n        setChinese(chinese);\n        setEnglish(english);\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getUserID() {\n        return userID;\n    }\n\n    public double getMath() {\n        return math;\n    }\n\n    public void setMath(double math) {\n        if(math >= 0 && math <= 100) {\n            this.math = math;\n        } else {\n            System.out.println(\"Invalid math score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getChinese() {\n        return chinese;\n    }\n\n    public void setChinese(double chinese) {\n        if(chinese >= 0 && chinese <= 100) {\n            this.chinese = chinese;\n        } else {\n            System.out.println(\"Invalid chinese score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getEnglish() {\n        return english;\n    }\n\n    public void setEnglish(double english) {\n        if(english >= 0 && english <= 100) {\n            this.english = english;\n        } else {\n            System.out.println(\"Invalid english score. It should be between 0 and 100.\");\n        }\n    }\n\n    public double getTotalScore() {\n        return math + chinese + english;\n    }\n\n    public double getAverageScore() {\n        return getTotalScore() / 3;\n    }\n\n    public static void main(String[] args) {\n        Student student = new Student(\"John Doe\", \"123456\", 85.5, 90.0, 88.0);\n        System.out.println(\"Name: \" + student.getName());\n        System.out.println(\"UserID: \" + student.getUserID());\n        System.out.println(\"Math Score: \" + student.getMath());\n        System.out.println(\"Chinese Score: \" + student.getChinese());\n        System.out.println(\"English Score: \" + student.getEnglish());\n        System.out.println(\"Total Score: \" + student.getTotalScore());\n        System.out.println(\"Average Score: \" + student.getAverageScore());\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nPlease design a Student class according to the following requirements.\n\nThe requirements are as follows:\n\n\n1) The Student class has five attributes, namely name, userID, math score, Chinese score, and English score.\n\n\n2) Use the concept of encapsulation to privatize all attributes, and provide public access methods to the outside world. It should at least include methods for entering student information, calculating total scores and average scores, and judging the input score values in appropriate methods, only allowing the entry of legal and valid scores (0~100). (Note: The methods for setting and getting each attribute, as well as the constructor, can be defined according to your own class design)\n3) In the main() method, create an instance of Student, and display the relevant information (name, userID, and scores) of the student (you). Please help me write a code.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n@Test\nvoid testStudent1() {\n    Student student = new Student(\"John Doe\", \"123456\", 85.5, 90.0, 88.0);\n    assertEquals(\"John Doe\", student.getName());\n    assertEquals(\"123456\", student.getUserID());\n    assertEquals(85.5, student.getMath());\n    assertEquals(90.0, student.getChinese());\n    assertEquals(88.0, student.getEnglish());\n    assertEquals(263.5, student.getTotalScore());\n    assertEquals(87.83, student.getAverageScore(), 0.01);\n}\n}", "id": 4, "labels": "{\"execution_language\":\"java\", \"original_id\":135, \"original_promblem\":\"Please design a Student class according to the following requirements.\\n\\nThe requirements are as follows:\\n\\n\\n1) The Student class has five attributes, namely name, userID, math score, Chinese score, and English score.\\n\\n\\n2) Use the concept of encapsulation to privatize all attributes, and provide public access methods to the outside world. It should at least include methods for entering student information, calculating total scores and average scores, and judging the input score values in appropriate methods, only allowing the entry of legal and valid scores (0~100). (Note: The methods for setting and getting each attribute, as well as the constructor, can be defined according to your own class design)\\n3) In the main() method, create an instance of Student, and display the relevant information (name, userID, and scores) of the student (you). Please help me write a code.\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\n\\nclass StudentTest {\\n@Test\\nvoid testStudent2() {\\n    Student student = new Student(\\\"Jane Doe\\\", \\\"654321\\\", 100.0, 100.0, 100.0);\\n    assertEquals(\\\"Jane Doe\\\", student.getName());\\n    assertEquals(\\\"654321\\\", student.getUserID());\\n    assertEquals(100.0, student.getMath());\\n    assertEquals(100.0, student.getChinese());\\n    assertEquals(100.0, student.getEnglish());\\n    assertEquals(300.0, student.getTotalScore());\\n    assertEquals(100.0, student.getAverageScore());\\n}\\n\\n@Test\\nvoid testStudent3() {\\n    Student student = new Student(\\\"Alice\\\", \\\"789012\\\", 0.0, 0.0, 0.0);\\n    assertEquals(\\\"Alice\\\", student.getName());\\n    assertEquals(\\\"789012\\\", student.getUserID());\\n    assertEquals(0.0, student.getMath());\\n    assertEquals(0.0, student.getChinese());\\n    assertEquals(0.0, student.getEnglish());\\n    assertEquals(0.0, student.getTotalScore());\\n    assertEquals(0.0, student.getAverageScore());\\n}\\n\\n@Test\\nvoid testStudent4() {\\n    Student student = new Student(\\\"Bob\\\", \\\"210987\\\", 50.0, 50.0, 50.0);\\n    assertEquals(\\\"Bob\\\", student.getName());\\n    assertEquals(\\\"210987\\\", student.getUserID());\\n    assertEquals(50.0, student.getMath());\\n    assertEquals(50.0, student.getChinese());\\n    assertEquals(50.0, student.getEnglish());\\n    assertEquals(150.0, student.getTotalScore());\\n    assertEquals(50.0, student.getAverageScore());\\n}\\n\\n@Test\\nvoid testStudent5() {\\n    Student student = new Student(\\\"Charlie\\\", \\\"345678\\\", 75.5, 80.0, 70.0);\\n    assertEquals(\\\"Charlie\\\", student.getName());\\n    assertEquals(\\\"345678\\\", student.getUserID());\\n    assertEquals(75.5, student.getMath());\\n    assertEquals(80.0, student.getChinese());\\n    assertEquals(70.0, student.getEnglish());\\n    assertEquals(225.5, student.getTotalScore());\\n    assertEquals(75.17, student.getAverageScore(), 0.01);\\n}\\n\\n@Test\\nvoid testStudent6() {\\n    Student student = new Student(\\\"David\\\", \\\"876543\\\", 60.0, 70.0, 80.0);\\n    assertEquals(\\\"David\\\", student.getName());\\n    assertEquals(\\\"876543\\\", student.getUserID());\\n    assertEquals(60.0, student.getMath());\\n    assertEquals(70.0, student.getChinese());\\n    assertEquals(80.0, student.getEnglish());\\n    assertEquals(210.0, student.getTotalScore());\\n    assertEquals(70.0, student.getAverageScore());\\n}\\n\\n@Test\\nvoid testStudent7() {\\n    Student student = new Student(\\\"Eve\\\", \\\"109876\\\", 101.0, 90.0, 80.0);\\n    assertEquals(\\\"Eve\\\", student.getName());\\n    assertEquals(\\\"109876\\\", student.getUserID());\\n    assertEquals(0.0, student.getMath());\\n    assertEquals(90.0, student.getChinese());\\n    assertEquals(80.0, student.getEnglish());\\n}\\n\\n@Test\\nvoid testStudent8() {\\n    Student student = new Student(\\\"Frank\\\", \\\"543210\\\", 90.0, -10.0, 80.0);\\n    assertEquals(\\\"Frank\\\", student.getName());\\n    assertEquals(\\\"543210\\\", student.getUserID());\\n    assertEquals(90.0, student.getMath());\\n    assertEquals(0.0, student.getChinese());\\n    assertEquals(80.0, student.getEnglish());\\n}\\n\\n@Test\\nvoid testStudent9() {\\n    Student student = new Student(\\\"Grace\\\", \\\"678901\\\", 90.0, 100.0, 110.0);\\n    assertEquals(\\\"Grace\\\", student.getName());\\n    assertEquals(\\\"678901\\\", student.getUserID());\\n    assertEquals(90.0, student.getMath());\\n    assertEquals(100.0, student.getChinese());\\n    assertEquals(0.0, student.getEnglish());\\n}\\n\\n@Test\\nvoid testStudent10() {\\n    Student student = new Student(\\\"Hank\\\", \\\"234567\\\", 90.0, 100.0, 80.0);\\n    student.setMath(110.0);\\n    assertEquals(\\\"Hank\\\", student.getName());\\n    assertEquals(\\\"234567\\\", student.getUserID());\\n    assertEquals(90.0, student.getMath());\\n    assertEquals(100.0, student.getChinese());\\n    assertEquals(80.0, student.getEnglish());\\n}\\n}\"}", "__internal_uuid__": "b027c158-0cb9-4734-b0a7-75a473977624"}
{"canonical_solution": "```java\n\nimport java.util.*;\n\nclass Task {\n    String name;\n    Date deadline;\n\n    public Task(String name, Date deadline) {\n        this.name = name;\n        this.deadline = deadline;\n    }\n\n    @Override\n    public String toString() {\n        return \"Task{\" +\n                \"name='\" + name + '\\'' +\n                \", deadline=\" + deadline +\n                '}';\n    }\n}\n\nclass Model {\n    List<Task> tasks;\n\n    public Model() {\n        this.tasks = new ArrayList<>(Collections.nCopies(10, null));\n    }\n\n    public void addTask(Task task) {\n        for (int i = 0; i < tasks.size(); i++) {\n            if (tasks.get(i) == null) {\n                tasks.set(i, task);\n                break;\n            }\n        }\n    }\n\n    public void deleteTask(String taskName) {\n        tasks.removeIf(task -> task != null && task.name.equals(taskName));\n    }\n\n    public void viewTasks() {\n        for (Task task : tasks) {\n            System.out.println(task);\n        }\n    }\n}\n\nclass Controller {\n    Model model;\n\n    public Controller(Model model) {\n        this.model = model;\n    }\n\n    public void addTask(String name, Date deadline) {\n        model.addTask(new Task(name, deadline));\n    }\n\n    public void deleteTask(String name) {\n        model.deleteTask(name);\n    }\n\n    public void viewTasks() {\n        model.viewTasks();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n\n        // Test view tasks\n        controller.viewTasks();\n\n        // Test add tasks\n        controller.addTask(\"Task 1\", new Date());\n        controller.addTask(\"Task 2\", new Date());\n\n        // Test view tasks\n        controller.viewTasks();\n\n        // Test delete tasks\n        controller.deleteTask(\"Task 1\");\n\n        // Test view tasks\n        controller.viewTasks();\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nDescription:\nToDoList is a user task list application. Users can view, add, and delete task items through this program. ToDoList contains a fixed number of task entries, a total of 10. When there are less than 10 tasks, it displays blank.\n\nRequirements:\n1. Create a class Task to represent a task item. Task includes two attributes: name and deadline.\n2. Create a class Model to represent the 10 task list data (i.e., 10 Tasks) in ToDoList.\n3. Create a class Controller to control the execution of other codes, including viewing, adding, and deleting task items.\n4. Create a main method to test the three functions of viewing, adding, and deleting in sequence.\n\nWrite in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testAddTask() {\n        Model model = new Model();\n        Controller controller = new Controller(model);\n        controller.addTask(\"Task 1\", new Date());\n        assertEquals(\"Task 1\", model.tasks.get(0).name);\n    }\n}", "id": 5, "labels": "{\"execution_language\":\"java\", \"original_id\":136, \"original_promblem\":\"Description:\\nToDoList is a user task list application. Users can view, add, and delete task items through this program. ToDoList contains a fixed number of task entries, a total of 10. When there are less than 10 tasks, it displays blank.\\n\\nRequirements:\\n1. Create a class Task to represent a task item. Task includes two attributes: name and deadline.\\n2. Create a class Model to represent the 10 task list data (i.e., 10 Tasks) in ToDoList.\\n3. Create a class Controller to control the execution of other codes, including viewing, adding, and deleting task items.\\n4. Create a main method to test the three functions of viewing, adding, and deleting in sequence.\\n\\nWrite in Java.\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.util.*;\\n\\nclass MainTest {\\n    @Test\\n    void testAddMultipleTasks() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        controller.addTask(\\\"Task 1\\\", new Date());\\n        controller.addTask(\\\"Task 2\\\", new Date());\\n        assertEquals(\\\"Task 1\\\", model.tasks.get(0).name);\\n        assertEquals(\\\"Task 2\\\", model.tasks.get(1).name);\\n    }\\n\\n    @Test\\n    void testDeleteTask() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        controller.addTask(\\\"Task 1\\\", new Date());\\n        controller.deleteTask(\\\"Task 1\\\");\\n        assertNull(model.tasks.get(0));\\n    }\\n\\n    @Test\\n    void testDeleteNonExistentTask() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        controller.deleteTask(\\\"Task 1\\\");\\n        assertNull(model.tasks.get(0));\\n    }\\n\\n    @Test\\n    void testAddAndDeleteTask() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        controller.addTask(\\\"Task 1\\\", new Date());\\n        controller.deleteTask(\\\"Task 1\\\");\\n        controller.addTask(\\\"Task 2\\\", new Date());\\n        assertEquals(\\\"Task 2\\\", model.tasks.get(0).name);\\n    }\\n\\n    @Test\\n    void testAddMoreThanTenTasks() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        for (int i = 0; i < 11; i++) {\\n            controller.addTask(\\\"Task \\\" + i, new Date());\\n        }\\n        assertEquals(\\\"Task 9\\\", model.tasks.get(9).name);\\n    }\\n\\n    @Test\\n    void testDeleteTaskFromFullList() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        for (int i = 0; i < 10; i++) {\\n            controller.addTask(\\\"Task \\\" + i, new Date());\\n        }\\n        controller.deleteTask(\\\"Task 5\\\");\\n        assertEquals(\\\"Task 6\\\", model.tasks.get(5).name);\\n    }\\n\\n    @Test\\n    void testDeleteAllTasks() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        for (int i = 0; i < 10; i++) {\\n            controller.addTask(\\\"Task \\\" + i, new Date());\\n        }\\n        for (int i = 0; i < 10; i++) {\\n            controller.deleteTask(\\\"Task \\\" + i);\\n        }\\n        assertTrue(model.tasks.isEmpty());\\n    }\\n\\n    @Test\\n    void testAddTaskWithSameName() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        controller.addTask(\\\"Task 1\\\", new Date());\\n        controller.addTask(\\\"Task 1\\\", new Date());\\n        assertEquals(\\\"Task 1\\\", model.tasks.get(0).name);\\n        assertEquals(\\\"Task 1\\\", model.tasks.get(1).name);\\n    }\\n\\n    @Test\\n    void testDeleteTaskWithSameName() {\\n        Model model = new Model();\\n        Controller controller = new Controller(model);\\n        controller.addTask(\\\"Task 1\\\", new Date());\\n        controller.addTask(\\\"Task 1\\\", new Date());\\n        controller.deleteTask(\\\"Task 1\\\");\\n        assertNull(model.tasks.get(0));\\n        assertNull(model.tasks.get(1));\\n    }\\n}\"}", "__internal_uuid__": "381e9d5e-62be-4c0e-96b4-75cae2e03d4c"}
{"canonical_solution": "```java\n\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] result = calculateProportion(0.3, 0.4, 0.3, 100);\n        for (int i : result) {\n            System.out.println(i);\n        }\n    }\n\n    public static int[] calculateProportion(double ratio1, double ratio2, double ratio3, int total) {\n        int[] result = new int[3];\n        result[0] = (int) Math.floor(ratio1 * total);\n        result[1] = (int) Math.floor(ratio2 * total);\n        result[2] = (int) Math.floor(ratio3 * total);\n\n        int sum = result[0] + result[1] + result[2];\n        int diff = total - sum;\n\n        while (diff > 0) {\n            if (ratio1 >= ratio2 && ratio1 >= ratio3) {\n                result[0] += diff;\n            } else if (ratio2 >= ratio1 && ratio2 >= ratio3) {\n                result[1] += diff;\n            } else {\n                result[2] += diff;\n            }\n            diff--;\n        }\n\n        return result;\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a java method that achieves the following functions:\n1. The input values are three proportion values and one total value. The sum of the three proportion values is approximately 1, and each proportion value has two decimal places.\n2. Inside the method, calculate the product of the three proportion values and the total value separately. The product is an integer. After calculation, check whether the sum of the three product values is equal to the input total value. If not, continue to distribute the values according to the size of the proportion values until the sum of the three product values is equal to the total value. Finally, output these three product values.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCalculateProportion1() {\n        assertArrayEquals(new int[]{30, 40, 30}, Main.calculateProportion(0.3, 0.4, 0.3, 100));\n    }\n}", "id": 6, "labels": "{\"execution_language\":\"java\", \"original_id\":137, \"original_promblem\":\"Write a java method that achieves the following functions:\\n1. The input values are three proportion values and one total value. The sum of the three proportion values is approximately 1, and each proportion value has two decimal places.\\n2. Inside the method, calculate the product of the three proportion values and the total value separately. The product is an integer. After calculation, check whether the sum of the three product values is equal to the input total value. If not, continue to distribute the values according to the size of the proportion values until the sum of the three product values is equal to the total value. Finally, output these three product values.\", \"programming_language\":\"java\", \"tags\":\"Algorithm and Data Structure\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\n\\nclass MainTest {\\n    @Test\\n    void testCalculateProportion2() {\\n        assertArrayEquals(new int[]{50, 25, 25}, Main.calculateProportion(0.5, 0.25, 0.25, 100));\\n    }\\n\\n    @Test\\n    void testCalculateProportion3() {\\n        assertArrayEquals(new int[]{33, 33, 34}, Main.calculateProportion(0.33, 0.33, 0.34, 100));\\n    }\\n\\n    @Test\\n    void testCalculateProportion4() {\\n        assertArrayEquals(new int[]{20, 30, 50}, Main.calculateProportion(0.2, 0.3, 0.5, 100));\\n    }\\n\\n    @Test\\n    void testCalculateProportion5() {\\n        assertArrayEquals(new int[]{10, 45, 45}, Main.calculateProportion(0.1, 0.45, 0.45, 100));\\n    }\\n\\n    @Test\\n    void testCalculateProportion6() {\\n        assertArrayEquals(new int[]{40, 30, 30}, Main.calculateProportion(0.4, 0.3, 0.3, 100));\\n    }\\n\\n    @Test\\n    void testCalculateProportion7() {\\n        assertArrayEquals(new int[]{0, 0, 1}, Main.calculateProportion(0.0, 0.0, 1.0, 1));\\n    }\\n\\n    @Test\\n    void testCalculateProportion8() {\\n        assertArrayEquals(new int[]{1, 0, 0}, Main.calculateProportion(1.0, 0.0, 0.0, 1));\\n    }\\n\\n    @Test\\n    void testCalculateProportion9() {\\n        assertArrayEquals(new int[]{0, 1, 0}, Main.calculateProportion(0.0, 1.0, 0.0, 1));\\n    }\\n\\n    @Test\\n    void testCalculateProportion10() {\\n        assertArrayEquals(new int[]{0, 0, 0}, Main.calculateProportion(0.0, 0.0, 0.0, 0));\\n    }\\n}\"}", "__internal_uuid__": "62c1536c-272e-4190-9973-121707956c6a"}
{"canonical_solution": "```java\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class StringPermutations {\n    public static void main(String[] args) {\n        String str = \"aaa\";\n        permuteAndPrint(str);\n    }\n\n    public static void permuteAndPrint(String str) {\n        Set<String> permutations = new HashSet<>();\n        permute(str.toCharArray(), 0, permutations);\n\n        for (String s : permutations) {\n            System.out.println(s);\n        }\n    }\n\n    public static void permute(char[] chars, int currentIndex, Set<String> permutations) {\n        if (currentIndex == chars.length - 1) {\n            permutations.add(new String(chars));\n        }\n\n        for (int i = currentIndex; i < chars.length; i++) {\n            swap(chars, currentIndex, i);\n            permute(chars, currentIndex + 1, permutations);\n            swap(chars, currentIndex, i); // backtrack\n        }\n    }\n\n    private static void swap(char[] array, int i, int j) {\n        char temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nEnter a string and print all permutations of the characters in the string.\n\nFor example, if you enter the string abc, then output all the strings that can be arranged from the characters a, b, and c\n\nabc, acb, bac, bca, cab and cba. Write it out in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n\n    @Test\n    void testBasic() {\n        assertEquals(Set.of(\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"), generatePermutations(\"abc\"));\n    }\n}", "id": 7, "labels": "{\"execution_language\":\"java\", \"original_id\":138, \"original_promblem\":\"Enter a string and print all permutations of the characters in the string.\\n\\nFor example, if you enter the string abc, then output all the strings that can be arranged from the characters a, b, and c\\n\\nabc, acb, bac, bca, cab and cba. Write it out in Java.\", \"programming_language\":\"java\", \"tags\":\"Data Science\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.util.HashSet;\\nimport java.util.Set;\\n\\nclass StringPermutationsTest {\\n    @Test\\n    void testEmptyString() {\\n        assertTrue(generatePermutations(\\\"\\\").isEmpty());\\n    }\\n\\n    @Test\\n    void testSingleCharacter() {\\n        assertEquals(Set.of(\\\"a\\\"), generatePermutations(\\\"a\\\"));\\n    }\\n\\n    @Test\\n    void testTwoCharacters() {\\n        assertEquals(Set.of(\\\"ab\\\", \\\"ba\\\"), generatePermutations(\\\"ab\\\"));\\n    }\\n\\n    @Test\\n    void testDuplicateCharacters() {\\n        assertEquals(Set.of(\\\"aba\\\", \\\"aab\\\", \\\"baa\\\"), generatePermutations(\\\"aba\\\"));\\n    }\\n\\n    @Test\\n    void testLongString() {\\n        assertEquals(24, generatePermutations(\\\"abcd\\\").size()); // 4! = 24\\n    }\\n\\n    @Test\\n    void testAllSameCharacters() {\\n        assertEquals(Set.of(\\\"aaa\\\"), generatePermutations(\\\"aaa\\\"));\\n    }\\n\\n    @Test\\n    void testSpecialCharacters() {\\n        assertEquals(Set.of(\\\"a*b\\\", \\\"ab*\\\", \\\"*ab\\\", \\\"*ba\\\", \\\"ba*\\\", \\\"b*a\\\"), generatePermutations(\\\"a*b\\\"));\\n    }\\n\\n    @Test\\n    void testNonASCIICharacters() {\\n        assertEquals(Set.of(\\\"你好吗\\\", \\\"你吗好\\\", \\\"好你吗\\\", \\\"好吗你\\\", \\\"吗好你\\\", \\\"吗你好\\\"), generatePermutations(\\\"你好吗\\\"));\\n    }\\n\\n    private Set<String> generatePermutations(String str) {\\n        Set<String> permutations = new HashSet<>();\\n        StringPermutations.permute(str.toCharArray(), 0, permutations);\\n        return permutations;\\n    }\\n}\\n\"}", "__internal_uuid__": "76dd19d8-cb9b-4f6f-9709-7119ca3a13eb"}
{"canonical_solution": "```java\n\n\npublic class Student {\n    private String name;\n    private double ordinary;\n    private double attendance;\n\n    public Student(String name, double ordinary, double attendance) {\n        this.name = name;\n        this.ordinary = ordinary;\n        this.attendance = attendance;\n    }\n\n    public boolean qualified() {\n        return ordinary >= 60 && attendance >= 0.6;\n    }\n\n    // getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getOrdinary() {\n        return ordinary;\n    }\n\n    public void setOrdinary(double ordinary) {\n        this.ordinary = ordinary;\n    }\n\n    public double getAttendance() {\n        return attendance;\n    }\n\n    public void setAttendance(double attendance) {\n        this.attendance = attendance;\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\n1. Design a program, define a class representing \"student\": Student: The attributes in the class are: a) name: String type, representing the student's name; b) ordinary: double type, representing the student's usual score; c) attendance: double type, representing the student's attendance rate. The methods in the class are: a) boolean qualified(): Calculate and return the student's exam eligibility based on the usual score and attendance rate. If the usual score ≥ 60 and the attendance rate ≥60%, return true, otherwise return false.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testQualified1() {\n        Student student = new Student(\"John\", 70, 0.7);\n        assertTrue(student.qualified());\n    }\n}", "id": 8, "labels": "{\"execution_language\":\"java\", \"original_id\":139, \"original_promblem\":\"1. Design a program, define a class representing \\\"student\\\": Student: The attributes in the class are: a) name: String type, representing the student's name; b) ordinary: double type, representing the student's usual score; c) attendance: double type, representing the student's attendance rate. The methods in the class are: a) boolean qualified(): Calculate and return the student's exam eligibility based on the usual score and attendance rate. If the usual score ≥ 60 and the attendance rate ≥60%, return true, otherwise return false.\", \"programming_language\":\"java\", \"tags\":\"Data Science\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\n\\nclass StudentTest {\\n    @Test\\n    void testQualified2() {\\n        Student student = new Student(\\\"Jane\\\", 50, 0.7);\\n        assertFalse(student.qualified());\\n    }\\n\\n    @Test\\n    void testQualified3() {\\n        Student student = new Student(\\\"Bob\\\", 70, 0.5);\\n        assertFalse(student.qualified());\\n    }\\n\\n    @Test\\n    void testQualified4() {\\n        Student student = new Student(\\\"Alice\\\", 60, 0.6);\\n        assertTrue(student.qualified());\\n    }\\n\\n    @Test\\n    void testQualified5() {\\n        Student student = new Student(\\\"Tom\\\", 59.9, 0.6);\\n        assertFalse(student.qualified());\\n    }\\n\\n    @Test\\n    void testQualified6() {\\n        Student student = new Student(\\\"Jerry\\\", 60, 0.599);\\n        assertFalse(student.qualified());\\n    }\\n\\n    @Test\\n    void testQualified7() {\\n        Student student = new Student(\\\"Max\\\", 100, 1);\\n        assertTrue(student.qualified());\\n    }\\n\\n    @Test\\n    void testQualified8() {\\n        Student student = new Student(\\\"Lily\\\", 0, 0);\\n        assertFalse(student.qualified());\\n    }\\n\\n    @Test\\n    void testQualified9() {\\n        Student student = new Student(\\\"Sam\\\", 60, 1);\\n        assertTrue(student.qualified());\\n    }\\n\\n    @Test\\n    void testQualified10() {\\n        Student student = new Student(\\\"Emma\\\", 100, 0.6);\\n        assertTrue(student.qualified());\\n    }\\n}\"}", "__internal_uuid__": "81ccdab2-c1ca-4268-b743-372783fa92db"}
{"canonical_solution": "```java\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(showQianFenWei(2));\n        System.out.println(showQianFenWei(100));\n        System.out.println(showQianFenWei(1000));\n        System.out.println(showQianFenWei(10000));\n        System.out.println(showQianFenWei(1000000));\n    }\n\n    public static String showQianFenWei(long x) {\n        String str = Long.toString(x);\n        String result = \"\";\n        int count = 0;\n        for (int i = str.length() - 1; i >= 0; i--) {\n            result = str.charAt(i) + result;\n            count++;\n            if (count % 3 == 0 && i != 0) {\n                result = \",\" + result;\n            }\n        }\n        return result;\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a method named showQianFenWei(long x), which is used to display x in thousands place notation. That is, starting from the lowest digit, a comma is added every three digits, for example:\n\nx=2, the result is: 2\n\nx=100, the result is 100\n\nx=1000, the result is 1,000\n\nx=10000, the result is 10,000\n\nx=1000000, the result is 1,000,000\n\nx does not exceed 15 digits.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testShowQianFenWei() {\n        assertEquals(\"2\", Main.showQianFenWei(2));\n        assertEquals(\"100\", Main.showQianFenWei(100));\n        assertEquals(\"1,000\", Main.showQianFenWei(1000));\n        assertEquals(\"10,000\", Main.showQianFenWei(10000));\n    }\n}", "id": 9, "labels": "{\"execution_language\":\"java\", \"original_id\":140, \"original_promblem\":\"Write a method named showQianFenWei(long x), which is used to display x in thousands place notation. That is, starting from the lowest digit, a comma is added every three digits, for example:\\n\\nx=2, the result is: 2\\n\\nx=100, the result is 100\\n\\nx=1000, the result is 1,000\\n\\nx=10000, the result is 10,000\\n\\nx=1000000, the result is 1,000,000\\n\\nx does not exceed 15 digits.\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\n\\nclass MainTest {\\n    @Test\\n    void testShowQianFenWei2() {\\n        assertEquals(\\\"1,000,000\\\", Main.showQianFenWei(1000000));\\n        assertEquals(\\\"123,456,789\\\", Main.showQianFenWei(123456789));\\n        assertEquals(\\\"1,234,567,890\\\", Main.showQianFenWei(1234567890));\\n        assertEquals(\\\"12,345,678,901\\\", Main.showQianFenWei(12345678901L));\\n        assertEquals(\\\"123,456,789,012\\\", Main.showQianFenWei(123456789012L));\\n        assertEquals(\\\"1,234,567,890,123\\\", Main.showQianFenWei(1234567890123L));\\n    }\\n}\"}", "__internal_uuid__": "ba28c6c5-547c-47d0-a7e2-607f7cfc573d"}
{"canonical_solution": "```java\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class KeywordSearch {\n    public static int search(String filePath, String keyword) {\n        int count = 0;\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(filePath));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] words = line.split(\"\\\\W+\");\n                for (String word : words) {\n                    if (word.equalsIgnoreCase(keyword)) {\n                        count++;\n                    }\n                }\n            }\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String filePath = \"path_to_your_file\";\n        String keyword = \"your_keyword\";\n        int count = search(filePath, keyword);\n        System.out.println(\"The keyword '\" + keyword + \"' appears \" + count + \" times in the file.\");\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nCreate a search method to count the total occurrences of a keyword in a given natural language text file. The keyword is an English word, such as \"go\". The words in the file that match the keyword are not case-sensitive, for example, GO, Go, gO, go are all counted as one occurrence. At the same time, the keyword may contain uppercase or lowercase letters. However, the word needs to be a complete match, that is to say, a word like google does not count as an occurrence of go. In addition, a string like What’s is considered to have the word what, but not is, and only \"what\" will be used as the search keyword, not \"what's\". Three-year-old contains the words three, year, and old. In summary, a word refers to consecutive uppercase/lowercase letters, and the first and last characters of the word (if they exist) must not be uppercase/lowercase letters. Implement this in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testSearch1() {\n        assertEquals(4, KeywordSearch.search(\"testFile1.txt\", \"go\"));\n    }\n}", "id": 10, "labels": "{\"execution_language\":\"java\", \"original_id\":141, \"original_promblem\":\"Create a search method to count the total occurrences of a keyword in a given natural language text file. The keyword is an English word, such as \\\"go\\\". The words in the file that match the keyword are not case-sensitive, for example, GO, Go, gO, go are all counted as one occurrence. At the same time, the keyword may contain uppercase or lowercase letters. However, the word needs to be a complete match, that is to say, a word like google does not count as an occurrence of go. In addition, a string like What’s is considered to have the word what, but not is, and only \\\"what\\\" will be used as the search keyword, not \\\"what's\\\". Three-year-old contains the words three, year, and old. In summary, a word refers to consecutive uppercase/lowercase letters, and the first and last characters of the word (if they exist) must not be uppercase/lowercase letters. Implement this in Java.\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":\"{\\\"testFile1.txt\\\": \\\"R28gZ28gR08gZ08=\\\", \\\"testFile2.txt\\\": \\\"\\\", \\\"testFile3.txt\\\": \\\"V2hhdCdzIHRoZSB0aW1lIG5vdz8=\\\", \\\"testFile4.txt\\\": \\\"QSB0aHJlZS15ZWFyLW9sZCBjaGlsZC4NCkFub3RoZXIgdGhyZWUteWVhci1vbGQuDQpZZXQgYW5vdGhlciB0aHJlZS15ZWFyLW9sZC4=\\\", \\\"testFile5.txt\\\": \\\"R29vZ2xlIGlzIGEgc2VhcmNoIGVuZ2luZS4=\\\", \\\"testFile7.txt\\\": \\\"VGhpcyBmaWxlIGlzIGZvciBhbiBlbXB0eSBrZXl3b3JkIHRlc3Qu\\\", \\\"testFile8.txt\\\": \\\"\\\"}\", \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.io.BufferedReader;\\nimport java.io.FileReader;\\nimport java.io.IOException;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nclass KeywordSearchTest {\\n    @Test\\n    void testSearch2() {\\n        assertEquals(0, KeywordSearch.search(\\\"testFile2.txt\\\", \\\"go\\\"));\\n    }\\n\\n    @Test\\n    void testSearch3() {\\n        assertEquals(1, KeywordSearch.search(\\\"testFile3.txt\\\", \\\"what\\\"));\\n    }\\n\\n    @Test\\n    void testSearch4() {\\n        assertEquals(3, KeywordSearch.search(\\\"testFile4.txt\\\", \\\"year\\\"));\\n    }\\n\\n    @Test\\n    void testSearch5() {\\n        assertEquals(1, KeywordSearch.search(\\\"testFile5.txt\\\", \\\"google\\\"));\\n    }\\n\\n\\n    @Test\\n    void testSearch7() {\\n        assertEquals(0, KeywordSearch.search(\\\"testFile7.txt\\\", \\\"\\\"));\\n    }\\n\\n    @Test\\n    void testSearch8() {\\n        assertEquals(0, KeywordSearch.search(\\\"testFile8.txt\\\", \\\" \\\"));\\n    }\\n\\n}\"}", "__internal_uuid__": "eeaf6974-0fa6-4553-88e4-f6ec65091b84"}
{"canonical_solution": "```java\n\npublic class ArrayElementSelector {\n    public static int selectElement(int[] array) {\n        if (array == null || array.length == 0) {\n            return 0;\n        }\n\n        if (array.length == 1) {\n            return array[0];\n        }\n\n        int threshold = 51;\n        while (threshold > 1) {\n            if (array.length >= threshold) {\n                return array[threshold - 1];\n            }\n            threshold /= 2;\n        }\n\n        return array[0];\n    }\n\n    public static void main(String[] args) {\n        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};\n        System.out.println(\"Selected element: \" + selectElement(array));\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nFor an integer array, if the array is empty, return zero; if its length is 1, return the first element. If the length of the integer array is greater than or equal to 51, return its 51st element; otherwise, if its length is greater than or equal to the integer part of 51/2, return the element at the position of the integer part of 51/2; otherwise, if its length is greater than or equal to the integer part of 51/4, return the element at the position of the integer part of 51/4; otherwise, if its length is greater than or equal to the integer part of 51/8, return the element at the position of the integer part of 51/8... and so on, compare and return the element that meets the requirements. Example: input array 1 to 25 output 25 Implemented in Java language.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testGetElement1() {\n        int[] array = new int[25];\n        for (int i = 0; i < 25; i++) {\n            array[i] = i + 1;\n        }\n        assertEquals(25, ArrayElementSelector.selectElement(array));\n    }\n}", "id": 11, "labels": "{\"execution_language\":\"java\", \"original_id\":142, \"original_promblem\":\"For an integer array, if the array is empty, return zero; if its length is 1, return the first element. If the length of the integer array is greater than or equal to 51, return its 51st element; otherwise, if its length is greater than or equal to the integer part of 51/2, return the element at the position of the integer part of 51/2; otherwise, if its length is greater than or equal to the integer part of 51/4, return the element at the position of the integer part of 51/4; otherwise, if its length is greater than or equal to the integer part of 51/8, return the element at the position of the integer part of 51/8... and so on, compare and return the element that meets the requirements. Example: input array 1 to 25 output 25 Implemented in Java language.\", \"programming_language\":\"java\", \"tags\":\"Data Science\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\n\\nclass MainTest {\\n    @Test\\n    void testGetElement2() {\\n        int[] array = new int[51];\\n        for (int i = 0; i < 51; i++) {\\n            array[i] = i + 1;\\n        }\\n        assertEquals(51, ArrayElementSelector.selectElement(array));\\n    }\\n\\n    @Test\\n    void testGetElement3() {\\n        int[] array = new int[1];\\n        array[0] = 10;\\n        assertEquals(10, ArrayElementSelector.selectElement(array));\\n    }\\n\\n    @Test\\n    void testGetElement4() {\\n        int[] array = new int[0];\\n        assertEquals(0, ArrayElementSelector.selectElement(array));\\n    }\\n\\n    @Test\\n    void testGetElement5() {\\n        int[] array = new int[26];\\n        for (int i = 0; i < 26; i++) {\\n            array[i] = i + 1;\\n        }\\n        assertEquals(25, ArrayElementSelector.selectElement(array));\\n    }\\n\\n    @Test\\n    void testGetElement6() {\\n        int[] array = new int[13];\\n        for (int i = 0; i < 13; i++) {\\n            array[i] = i + 1;\\n        }\\n        assertEquals(12, ArrayElementSelector.selectElement(array));\\n    }\\n\\n    @Test\\n    void testGetElement7() {\\n        int[] array = new int[100];\\n        for (int i = 0; i < 100; i++) {\\n            array[i] = i + 1;\\n        }\\n        assertEquals(51, ArrayElementSelector.selectElement(array));\\n    }\\n\\n    @Test\\n    void testGetElement8() {\\n        int[] array = new int[2];\\n        array[0] = 10;\\n        array[1] = 20;\\n        assertEquals(10, ArrayElementSelector.selectElement(array));\\n    }\\n\\n    @Test\\n    void testGetElement9() {\\n        int[] array = new int[3];\\n        array[0] = 10;\\n        array[1] = 20;\\n        array[2] = 30;\\n        assertEquals(30, ArrayElementSelector.selectElement(array));\\n    }\\n\\n    @Test\\n    void testGetElement10() {\\n        int[] array = new int[6];\\n        for (int i = 0; i < 6; i++) {\\n            array[i] = i + 1;\\n        }\\n        assertEquals(6, ArrayElementSelector.selectElement(array));\\n    }\\n}\"}", "__internal_uuid__": "a11fdf22-5ffc-47ee-960b-501a05eaa763"}
{"canonical_solution": "```java\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter the order of the matrix:\");\n        int n = scanner.nextInt();\n        int[][] matrix = new int[n][n];\n        System.out.println(\"Enter the elements of the matrix:\");\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                matrix[i][j] = scanner.nextInt();\n            }\n        }\n        scanner.close();\n        System.out.println(\"The sum of the elements excluding the anti-diagonal, last row and last column is: \" + calculateSum(matrix, n));\n    }\n\n    static int calculateSum(int[][] matrix, int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != n - 1 && j != n - 1 && j != n - 1 - i) {\n                    sum += matrix[i][j];\n                }\n            }\n        }\n        return sum;\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nRead in an n-order square matrix a, calculate the sum of all elements except for the secondary diagonal, the last column, and the last row.\nExplanation: The secondary diagonal is the line from the top right to the bottom left of the matrix, for example\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\nsum=35   (2+3+4+5+6+7+8=35)\nWrite a simple program in Java.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testCalculateSum1() {\n        int[][] matrix = {{2, 3, 4, 1}, {5, 6, 1, 1}, {7, 1, 8, 1}, {1, 1, 1, 1}};\n        assertEquals(35, Main.calculateSum(matrix, 4));\n    }\n}", "id": 12, "labels": "{\"execution_language\":\"java\", \"original_id\":143, \"original_promblem\":\"Read in an n-order square matrix a, calculate the sum of all elements except for the secondary diagonal, the last column, and the last row.\\nExplanation: The secondary diagonal is the line from the top right to the bottom left of the matrix, for example\\n2 3 4 1\\n5 6 1 1\\n7 1 8 1\\n1 1 1 1\\nsum=35   (2+3+4+5+6+7+8=35)\\nWrite a simple program in Java.\", \"programming_language\":\"java\", \"tags\":\"Data Science\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.util.Scanner;\\n\\nclass MainTest {\\n    @Test\\n    void testCalculateSum2() {\\n        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\\n        assertEquals(7, Main.calculateSum(matrix, 3));\\n    }\\n\\n    @Test\\n    void testCalculateSum3() {\\n        int[][] matrix = {{1}};\\n        assertEquals(0, Main.calculateSum(matrix, 1));\\n    }\\n\\n    @Test\\n    void testCalculateSum4() {\\n        int[][] matrix = {{1, 2}, {3, 4}};\\n        assertEquals(1, Main.calculateSum(matrix, 2));\\n    }\\n\\n    @Test\\n    void testCalculateSum5() {\\n        int[][] matrix = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, {16, 17, 18, 19, 20}, {21, 22, 23, 24, 25}};\\n        assertEquals(121, Main.calculateSum(matrix, 5));\\n    }\\n\\n    @Test\\n    void testCalculateSum6() {\\n        int[][] matrix = {{-1, -2, -3}, {-4, -5, -6}, {-7, -8, -9}};\\n        assertEquals(-7, Main.calculateSum(matrix, 3));\\n    }\\n\\n    // boundary cases\\n    @Test\\n    void testCalculateSum7() {\\n        int[][] matrix = new int[100][100];\\n        for (int i = 0; i < 100; i++) {\\n            for (int j = 0; j < 100; j++) {\\n                matrix[i][j] = 1;\\n            }\\n        }\\n        assertEquals(9703, Main.calculateSum(matrix, 100));\\n    }\\n\\n    @Test\\n    void testCalculateSum8() {\\n        int[][] matrix = new int[1000][1000];\\n        for (int i = 0; i < 1000; i++) {\\n            for (int j = 0; j < 1000; j++) {\\n                matrix[i][j] = 1;\\n            }\\n        }\\n        assertEquals(997003, Main.calculateSum(matrix, 1000));\\n    }\\n\\n    @Test\\n    void testCalculateSum9() {\\n        int[][] matrix = new int[1][1];\\n        matrix[0][0] = Integer.MAX_VALUE;\\n        assertEquals(0, Main.calculateSum(matrix, 1));\\n    }\\n\\n    @Test\\n    void testCalculateSum10() {\\n        int[][] matrix = new int[2][2];\\n        matrix[0][0] = Integer.MAX_VALUE;\\n        matrix[0][1] = Integer.MAX_VALUE;\\n        matrix[1][0] = Integer.MAX_VALUE;\\n        matrix[1][1] = Integer.MAX_VALUE;\\n        assertEquals(Integer.MAX_VALUE, Main.calculateSum(matrix, 2));\\n    }\\n}\"}", "__internal_uuid__": "3ae106f0-9d53-4b93-8fd1-0b696a22a76b"}
{"canonical_solution": "```java\n\nimport java.util.*;\n\nclass Alarm {\n    int id;\n    Set<Integer> weekdays;\n    int hour;\n    int minute;\n    int typeId;\n\n    public Alarm(int id, Set<Integer> weekdays, int hour, int minute, int typeId) {\n        this.id = id;\n        this.weekdays = weekdays;\n        this.hour = hour;\n        this.minute = minute;\n        this.typeId = typeId;\n    }\n}\n\nclass AlarmSystem {\n    Map<Integer, Alarm> alarms;\n\n    public AlarmSystem() {\n        this.alarms = new HashMap<>();\n    }\n\n    public boolean addAlarm(int id, Set<Integer> weekdays, int hour, int minute, int typeId) {\n        if (alarms.containsKey(id)) {\n            return false;\n        }\n        alarms.put(id, new Alarm(id, weekdays, hour, minute, typeId));\n        return true;\n    }\n\n    public boolean deleteAlarm(int id) {\n        if (!alarms.containsKey(id)) {\n            return false;\n        }\n        alarms.remove(id);\n        return true;\n    }\n\n    public List<Alarm> queryAlarm(int weekday, int hour, int startMinute, int endMinute) {\n        List<Alarm> result = new ArrayList<>();\n        for (Alarm alarm : alarms.values()) {\n            if (alarm.weekdays.contains(weekday) && alarm.hour == hour && alarm.minute >= startMinute && alarm.minute <= endMinute) {\n                result.add(alarm);\n            }\n        }\n        Collections.sort(result, new Comparator<Alarm>() {\n            @Override\n            public int compare(Alarm a1, Alarm a2) {\n                if (a1.minute != a2.minute) {\n                    return a1.minute - a2.minute;\n                }\n                if (a1.typeId != a2.typeId) {\n                    return a1.typeId - a2.typeId;\n                }\n                return a1.id - a2.id;\n            }\n        });\n        return result;\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nImplement an alarm clock system, AlarmSystem, in Java. Simply put, it involves implementing three methods:\n\naddAlarm: Add an alarm, including properties id, weekday[], hour, minute, and typeId. The weekdays represent the days of the week when the alarm will ring, with possible values from 1-7. typeId represents the type of alarm, with possible values of 0, 1, 2. If an alarm with the same id has been added before, it will not be added again. Returns false, otherwise returns true.\n\ndeleteAlarm: Delete an alarm based on its id. If there is no alarm with this id, it returns false, otherwise it returns true after deletion.\n\nqueryAlarm: Given weekday, hour, startminute, endminute, query the alarms that will ring on this day (weekday), during this hour (hour), and between startminute and endminute. If there are multiple alarms, they should be sorted primarily by the time they ring. If the ringing times are the same, they should be sorted by the type of alarm in ascending order. If the types of alarms are also the same, they should be sorted by id in ascending order.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n@Test\npublic void testAddAlarm() {\n    AlarmSystem alarmSystem = new AlarmSystem();\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\n    assertTrue(alarmSystem.addAlarm(1, weekdays, 7, 30, 0));\n    assertFalse(alarmSystem.addAlarm(1, weekdays, 7, 30, 0));\n}\n}", "id": 13, "labels": "{\"execution_language\":\"java\", \"original_id\":144, \"original_promblem\":\"Implement an alarm clock system, AlarmSystem, in Java. Simply put, it involves implementing three methods:\\n\\naddAlarm: Add an alarm, including properties id, weekday[], hour, minute, and typeId. The weekdays represent the days of the week when the alarm will ring, with possible values from 1-7. typeId represents the type of alarm, with possible values of 0, 1, 2. If an alarm with the same id has been added before, it will not be added again. Returns false, otherwise returns true.\\n\\ndeleteAlarm: Delete an alarm based on its id. If there is no alarm with this id, it returns false, otherwise it returns true after deletion.\\n\\nqueryAlarm: Given weekday, hour, startminute, endminute, query the alarms that will ring on this day (weekday), during this hour (hour), and between startminute and endminute. If there are multiple alarms, they should be sorted primarily by the time they ring. If the ringing times are the same, they should be sorted by the type of alarm in ascending order. If the types of alarms are also the same, they should be sorted by id in ascending order.\", \"programming_language\":\"java\", \"tags\":\"Database Technology\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.util.*;\\n\\nclass AlarmTest {\\n@Test\\npublic void testDeleteAlarm() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\\n    alarmSystem.addAlarm(1, weekdays, 7, 30, 0);\\n    assertTrue(alarmSystem.deleteAlarm(1));\\n    assertFalse(alarmSystem.deleteAlarm(1));\\n}\\n\\n@Test\\npublic void testQueryAlarm() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\\n    alarmSystem.addAlarm(1, weekdays, 7, 30, 0);\\n    alarmSystem.addAlarm(2, weekdays, 7, 35, 1);\\n    alarmSystem.addAlarm(3, weekdays, 7, 35, 0);\\n    List<Alarm> result = alarmSystem.queryAlarm(1, 7, 30, 40);\\n    assertEquals(3, result.size());\\n    assertEquals(1, result.get(0).id);\\n    assertEquals(3, result.get(1).id);\\n    assertEquals(2, result.get(2).id);\\n}\\n\\n@Test\\npublic void testAddAlarmWithDifferentType() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\\n    assertTrue(alarmSystem.addAlarm(1, weekdays, 7, 30, 0));\\n    assertTrue(alarmSystem.addAlarm(2, weekdays, 7, 30, 1));\\n    assertTrue(alarmSystem.addAlarm(3, weekdays, 7, 30, 2));\\n}\\n\\n@Test\\npublic void testDeleteAlarmWithDifferentType() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\\n    alarmSystem.addAlarm(1, weekdays, 7, 30, 0);\\n    alarmSystem.addAlarm(2, weekdays, 7, 30, 1);\\n    alarmSystem.addAlarm(3, weekdays, 7, 30, 2);\\n    assertTrue(alarmSystem.deleteAlarm(1));\\n    assertTrue(alarmSystem.deleteAlarm(2));\\n    assertTrue(alarmSystem.deleteAlarm(3));\\n}\\n\\n@Test\\npublic void testQueryAlarmWithDifferentType() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\\n    alarmSystem.addAlarm(1, weekdays, 7, 30, 0);\\n    alarmSystem.addAlarm(2, weekdays, 7, 30, 1);\\n    alarmSystem.addAlarm(3, weekdays, 7, 30, 2);\\n    List<Alarm> result = alarmSystem.queryAlarm(1, 7, 30, 40);\\n    assertEquals(3, result.size());\\n    assertEquals(1, result.get(0).id);\\n    assertEquals(2, result.get(1).id);\\n    assertEquals(3, result.get(2).id);\\n}\\n\\n@Test\\npublic void testAddAlarmWithMaxId() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\\n    assertTrue(alarmSystem.addAlarm(Integer.MAX_VALUE, weekdays, 7, 30, 0));\\n}\\n\\n@Test\\npublic void testDeleteAlarmWithMaxId() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\\n    alarmSystem.addAlarm(Integer.MAX_VALUE, weekdays, 7, 30, 0);\\n    assertTrue(alarmSystem.deleteAlarm(Integer.MAX_VALUE));\\n    assertFalse(alarmSystem.deleteAlarm(Integer.MAX_VALUE));\\n}\\n\\n@Test\\npublic void testQueryAlarmWithMaxId() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));\\n    alarmSystem.addAlarm(Integer.MAX_VALUE, weekdays, 7, 30, 0);\\n    List<Alarm> result = alarmSystem.queryAlarm(1, 7, 30, 40);\\n    assertEquals(1, result.size());\\n    assertEquals(Integer.MAX_VALUE, result.get(0).id);\\n}\\n\\n@Test\\npublic void testAddAlarmWithMaxWeekday() {\\n    AlarmSystem alarmSystem = new AlarmSystem();\\n    Set<Integer> weekdays = new HashSet<>(Arrays.asList(7));\\n    assertTrue(alarmSystem.addAlarm(1, weekdays, 7, 30, 0));\\n}\\n}\"}", "__internal_uuid__": "079004a7-6b75-4cea-9831-fbcb897ae9e6"}
{"canonical_solution": "```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class SQLParser {\n    private String select;\n    private String from;\n    private String where;\n    private String orderBy;\n    private String limit;\n\n    public SQLParser(String sql) {\n        parse(sql);\n    }\n\n    private void parse(String sql) {\n        if (sql == null || sql.trim().isEmpty()) {\n            select = from = where = orderBy = limit = null;\n            return;\n        }\n\n        Pattern pattern = Pattern.compile(\"select\\\\s+(.*?)\\\\s+from\\\\s+(.*?)(?:\\\\s+where\\\\s+(.*?))?(?:\\\\s+order by\\\\s+(.*?))?(?:\\\\s+limit\\\\s+(.*?))?$\", Pattern.CASE_INSENSITIVE);\n        Matcher matcher = pattern.matcher(sql);\n        if (matcher.find()) {\n            select = matcher.group(1).trim();\n            from = matcher.group(2).trim();\n            where = matcher.group(3) != null ? matcher.group(3).trim() : null;\n            orderBy = matcher.group(4) != null ? matcher.group(4).trim() : null;\n            limit = matcher.group(5) != null ? matcher.group(5).trim() : null;\n        } else {\n            select = from = where = orderBy = limit = null;\n        }\n    }\n\n    // Getters for select, from, where, orderBy, and limit\n    // ...\n    String getSelect() {\n        return select;\n    }\n    String getFrom() {\n        return from;\n    }\n    String getWhere(){\n        return where;\n    }\n    String getOrderBy(){\n        return orderBy;\n    }\n    String getLimit(){\n        return limit;\n    }\n    public static void main(String[] args) {\n        SQLParser parser = new SQLParser(\"select name, age from users where age > 18 order by age limit 10\");\n        System.out.println(\"Select: \" + parser.getSelect());\n        System.out.println(\"From: \" + parser.getFrom());\n        System.out.println(\"Where: \" + parser.getWhere());\n        System.out.println(\"Order By: \" + parser.getOrderBy());\n        System.out.println(\"Limit: \" + parser.getLimit());\n    }\n\n\n\n\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nRequirements:\n1. Implement the parsing of conditional queries such as select xx from xx [where xx = xx [order by xx] [limit xx]]. The part in brackets indicates that it is optional, please provide the java code implementation.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n\n    @Test\n    public void testSelectFrom() {\n        SQLParser parser = new SQLParser(\"select name from users\");\n        assertEquals(\"name\", parser.getSelect());\n        assertEquals(\"users\", parser.getFrom());\n        assertNull(parser.getWhere());\n        assertNull(parser.getOrderBy());\n        assertNull(parser.getLimit());\n    }\n}", "id": 14, "labels": "{\"execution_language\":\"java\", \"original_id\":145, \"original_promblem\":\"Requirements:\\n1. Implement the parsing of conditional queries such as select xx from xx [where xx = xx [order by xx] [limit xx]]. The part in brackets indicates that it is optional, please provide the java code implementation.\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nclass SQLParserTest {\\n    @Test\\n    public void testSelectFromWhere() {\\n        SQLParser parser = new SQLParser(\\\"select id from items where name = 'item'\\\");\\n        assertEquals(\\\"id\\\", parser.getSelect());\\n        assertEquals(\\\"items\\\", parser.getFrom());\\n        assertEquals(\\\"name = 'item'\\\", parser.getWhere());\\n        assertNull(parser.getOrderBy());\\n        assertNull(parser.getLimit());\\n    }\\n\\n    @Test\\n    public void testFullQuery() {\\n        SQLParser parser = new SQLParser(\\\"select id, name from products where price > 10 order by name limit 5\\\");\\n        assertEquals(\\\"id, name\\\", parser.getSelect());\\n        assertEquals(\\\"products\\\", parser.getFrom());\\n        assertEquals(\\\"price > 10\\\", parser.getWhere());\\n        assertEquals(\\\"name\\\", parser.getOrderBy());\\n        assertEquals(\\\"5\\\", parser.getLimit());\\n    }\\n\\n    @Test\\n    public void testSelectFromOrderBy() {\\n        SQLParser parser = new SQLParser(\\\"select name from users order by age\\\");\\n        assertEquals(\\\"name\\\", parser.getSelect());\\n        assertEquals(\\\"users\\\", parser.getFrom());\\n        assertNull(parser.getWhere());\\n        assertEquals(\\\"age\\\", parser.getOrderBy());\\n        assertNull(parser.getLimit());\\n    }\\n\\n    @Test\\n    public void testSelectFromLimit() {\\n        SQLParser parser = new SQLParser(\\\"select name from users limit 10\\\");\\n        assertEquals(\\\"name\\\", parser.getSelect());\\n        assertEquals(\\\"users\\\", parser.getFrom());\\n        assertNull(parser.getWhere());\\n        assertNull(parser.getOrderBy());\\n        assertEquals(\\\"10\\\", parser.getLimit());\\n    }\\n\\n    @Test\\n    public void testSelectFromWhereOrderBy() {\\n        SQLParser parser = new SQLParser(\\\"select name from users where age > 20 order by name\\\");\\n        assertEquals(\\\"name\\\", parser.getSelect());\\n        assertEquals(\\\"users\\\", parser.getFrom());\\n        assertEquals(\\\"age > 20\\\", parser.getWhere());\\n        assertEquals(\\\"name\\\", parser.getOrderBy());\\n        assertNull(parser.getLimit());\\n    }\\n\\n    @Test\\n    public void testSelectFromWhereLimit() {\\n        SQLParser parser = new SQLParser(\\\"select name from users where age > 20 limit 5\\\");\\n        assertEquals(\\\"name\\\", parser.getSelect());\\n        assertEquals(\\\"users\\\", parser.getFrom());\\n        assertEquals(\\\"age > 20\\\", parser.getWhere());\\n        assertNull(parser.getOrderBy());\\n        assertEquals(\\\"5\\\", parser.getLimit());\\n    }\\n\\n    @Test\\n    public void testSelectFromOrderByLimit() {\\n        SQLParser parser = new SQLParser(\\\"select name from users order by age limit 5\\\");\\n        assertEquals(\\\"name\\\", parser.getSelect());\\n        assertEquals(\\\"users\\\", parser.getFrom());\\n        assertNull(parser.getWhere());\\n        assertEquals(\\\"age\\\", parser.getOrderBy());\\n        assertEquals(\\\"5\\\", parser.getLimit());\\n    }\\n\\n    @Test\\n    public void testEmptySQL() {\\n        SQLParser parser = new SQLParser(\\\"\\\");\\n        assertNull(parser.getSelect());\\n        assertNull(parser.getFrom());\\n        assertNull(parser.getWhere());\\n        assertNull(parser.getOrderBy());\\n        assertNull(parser.getLimit());\\n    }\\n\\n    @Test\\n    public void testInvalidSQL() {\\n        SQLParser parser = new SQLParser(\\\"invalid sql\\\");\\n        assertNull(parser.getSelect());\\n        assertNull(parser.getFrom());\\n        assertNull(parser.getWhere());\\n        assertNull(parser.getOrderBy());\\n        assertNull(parser.getLimit());\\n    }\\n}\\n\"}", "__internal_uuid__": "abe00240-2367-4fae-93ad-9188ee038f02"}
{"canonical_solution": "```java\n\nimport java.util.ArrayList;\n\npublic class SeqList {\n    ArrayList<Character> list;\n\n    public SeqList() {\n        this.list = new ArrayList<>();\n    }\n\n    public void createSeqList(char[] elements) {\n        for (char element : elements) {\n            this.list.add(element);\n        }\n    }\n\n    public void printSeqList() {\n        System.out.println(this.list);\n    }\n\n    public int getLength() {\n        return this.list.size();\n    }\n\n    public boolean isEmpty() {\n        return this.list.isEmpty();\n    }\n\n    public char getElement(int index) {\n        return this.list.get(index);\n    }\n\n    public int getPosition(char element) {\n        return this.list.indexOf(element);\n    }\n\n    public void insertElement(int index, char element) {\n        this.list.add(index, element);\n    }\n\n    public void deleteElement(int index) {\n        this.list.remove(index);\n    }\n\n    public void clearSeqList() {\n        this.list.clear();\n    }\n\n    public static void main(String[] args) {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c', 'd', 'e'});\n        L.printSeqList();\n        System.out.println(\"Length: \" + L.getLength());\n        System.out.println(\"Is Empty: \" + L.isEmpty());\n        System.out.println(\"3rd Element: \" + L.getElement(2));\n        System.out.println(\"Position of 'c': \" + L.getPosition('c'));\n        L.insertElement(3, 'f');\n        L.printSeqList();\n        L.deleteElement(2);\n        L.printSeqList();\n        L.clearSeqList();\n        System.out.println(\"Is Empty: \" + L.isEmpty());\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nJAVA Sequential List\nWrite a program to implement various basic operations and overall list-building algorithms of a sequential list (assuming the element type of the sequential list is ElemType which is char), and design a program based on this to complete the following functions:\n(1) Initialize the sequential list L;\n(2) Create the sequential list L;\n(3) Output the sequential list L;\n(4) Output the length of the sequential list L;\n(5) Determine whether the sequential list L is empty;\n(6) Output the third element of the sequential list L;\n(7) Output the position of a certain element;\n(8) Insert element f at the position of the fourth element;\n(9) Output the sequential list L;\n(10) Delete the third element of the sequential list L;\n(11) Output the sequential list L;\n(12) Release the sequential list L.\n2 Single Linked List\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testSeqList() {\n        SeqList L = new SeqList();\n        L.createSeqList(new char[]{'a', 'b', 'c', 'd', 'e'});\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b'); add('c'); add('d'); add('e');}}, L.list);\n        assertEquals(5, L.getLength());\n        assertFalse(L.isEmpty());\n        assertEquals('c', L.getElement(2));\n        assertEquals(2, L.getPosition('c'));\n        L.insertElement(3, 'f');\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b'); add('c'); add('f'); add('d'); add('e');}}, L.list);\n        L.deleteElement(2);\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b'); add('f'); add('d'); add('e');}}, L.list);\n        L.clearSeqList();\n        assertTrue(L.isEmpty());\n    }\n}", "id": 15, "labels": "{\"execution_language\":\"java\", \"original_id\":146, \"original_promblem\":\"JAVA Sequential List\\nWrite a program to implement various basic operations and overall list-building algorithms of a sequential list (assuming the element type of the sequential list is ElemType which is char), and design a program based on this to complete the following functions:\\n(1) Initialize the sequential list L;\\n(2) Create the sequential list L;\\n(3) Output the sequential list L;\\n(4) Output the length of the sequential list L;\\n(5) Determine whether the sequential list L is empty;\\n(6) Output the third element of the sequential list L;\\n(7) Output the position of a certain element;\\n(8) Insert element f at the position of the fourth element;\\n(9) Output the sequential list L;\\n(10) Delete the third element of the sequential list L;\\n(11) Output the sequential list L;\\n(12) Release the sequential list L.\\n2 Single Linked List\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.util.ArrayList;\\n\\nclass SeqListTest {\\n    @Test\\n    void testSeqListWithEmptyList() {\\n        SeqList L = new SeqList();\\n        assertTrue(L.isEmpty());\\n        assertEquals(0, L.getLength());\\n    }\\n\\n    @Test\\n    void testSeqListWithOneElement() {\\n        SeqList L = new SeqList();\\n        L.createSeqList(new char[]{'a'});\\n        assertEquals(new ArrayList<Character>(){{add('a');}}, L.list);\\n        assertEquals(1, L.getLength());\\n        assertFalse(L.isEmpty());\\n        assertEquals('a', L.getElement(0));\\n        assertEquals(0, L.getPosition('a'));\\n    }\\n\\n    @Test\\n    void testSeqListWithTwoElements() {\\n        SeqList L = new SeqList();\\n        L.createSeqList(new char[]{'a', 'b'});\\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b');}}, L.list);\\n        assertEquals(2, L.getLength());\\n        assertFalse(L.isEmpty());\\n        assertEquals('b', L.getElement(1));\\n        assertEquals(1, L.getPosition('b'));\\n    }\\n\\n    @Test\\n    void testSeqListWithInsertAtFirstPosition() {\\n        SeqList L = new SeqList();\\n        L.createSeqList(new char[]{'a', 'b', 'c'});\\n        L.insertElement(0, 'd');\\n        assertEquals(new ArrayList<Character>(){{add('d'); add('a'); add('b'); add('c');}}, L.list);\\n    }\\n\\n    @Test\\n    void testSeqListWithInsertAtLastPosition() {\\n        SeqList L = new SeqList();\\n        L.createSeqList(new char[]{'a', 'b', 'c'});\\n        L.insertElement(3, 'd');\\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b'); add('c'); add('d');}}, L.list);\\n    }\\n\\n    @Test\\n    void testSeqListWithDeleteAtFirstPosition() {\\n        SeqList L = new SeqList();\\n        L.createSeqList(new char[]{'a', 'b', 'c'});\\n        L.deleteElement(0);\\n        assertEquals(new ArrayList<Character>(){{add('b'); add('c');}}, L.list);\\n    }\\n\\n    @Test\\n    void testSeqListWithDeleteAtLastPosition() {\\n        SeqList L = new SeqList();\\n        L.createSeqList(new char[]{'a', 'b', 'c'});\\n        L.deleteElement(2);\\n        assertEquals(new ArrayList<Character>(){{add('a'); add('b');}}, L.list);\\n    }\\n\\n    @Test\\n    void testSeqListWithNonexistentElement() {\\n        SeqList L = new SeqList();\\n        L.createSeqList(new char[]{'a', 'b', 'c'});\\n        assertEquals(-1, L.getPosition('d'));\\n    }\\n\\n    @Test\\n    void testSeqListWithDuplicateElements() {\\n        SeqList L = new SeqList();\\n        L.createSeqList(new char[]{'a', 'b', 'a'});\\n        assertEquals(0, L.getPosition('a'));\\n    }\\n}\"}", "__internal_uuid__": "19a43fca-bcd3-44ad-8d9b-722f20bc5fa6"}
{"canonical_solution": "```java\n\npublic class Plant {\n    String name;\n    int health;\n    int attack;\n\n    public Plant(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n\n    public void attack(Zombie zombie) {\n        zombie.health -= this.attack;\n        zombie.checkDeath();\n    }\n\n    public void checkDeath() {\n        if (this.health <= 0) {\n            System.out.println(this.name + \" is dead.\");\n        } else {\n            System.out.println(this.name + \" has \" + this.health + \" health left.\");\n        }\n    }\n}\n\nclass Zombie {\n    String name;\n    int health;\n    int attack;\n\n    public Zombie(String name, int health, int attack) {\n        this.name = name;\n        this.health = health;\n        this.attack = attack;\n    }\n\n    public void attack(Plant plant) {\n        plant.health -= this.attack;\n        plant.checkDeath();\n    }\n\n    public void checkDeath() {\n        if (this.health <= 0) {\n            System.out.println(this.name + \" is dead.\");\n        } else {\n            System.out.println(this.name + \" has \" + this.health + \" health left.\");\n        }\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Plant peashooter = new Plant(\"Peashooter\", 100, 20);\n        Zombie coneheadZombie = new Zombie(\"Conehead Zombie\", 150, 30);\n\n        for (int i = 0; i < 10; i++) {\n            peashooter.attack(coneheadZombie);\n            if (coneheadZombie.health <= 0) {\n                break;\n            }\n\n            coneheadZombie.attack(peashooter);\n            if (peashooter.health <= 0) {\n                break;\n            }\n        }\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nFirst, two classes are defined, namely the Plant class and the Zombie class. They both have attributes: name, health value, attack power; and methods: attack and death.\n\nThe attack method of the Plant class will cause attack damage to the enemy zombie; the attack method of the Zombie class will cause attack damage to the enemy plant. When the health value is less than or equal to 0, the death method will be triggered. The death method will output relevant information, such as whether it has died or how much health is left.\n\nNext, a Peashooter and a Conehead Zombie are created, representing the plant and the zombie respectively. Then a for loop is used to simulate the process of battle. In the loop, the plant attacks the zombie first, then the zombie attacks the plant. After each attack, the death method is called to confirm whether one side has died. When one side's health value is less than or equal to 0, the battle ends.\n\nFinally, the corresponding battle results are output.\n\nImplemented in JAVA, give me the code you implemented.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n\n    @Test\n    void testPlantConstructor() {\n        assertEquals(\"Peashooter\", peashooter.name);\n        assertEquals(100, peashooter.health);\n        assertEquals(20, peashooter.attack);\n    }\n}", "id": 16, "labels": "{\"execution_language\":\"java\", \"original_id\":147, \"original_promblem\":\"First, two classes are defined, namely the Plant class and the Zombie class. They both have attributes: name, health value, attack power; and methods: attack and death.\\n\\nThe attack method of the Plant class will cause attack damage to the enemy zombie; the attack method of the Zombie class will cause attack damage to the enemy plant. When the health value is less than or equal to 0, the death method will be triggered. The death method will output relevant information, such as whether it has died or how much health is left.\\n\\nNext, a Peashooter and a Conehead Zombie are created, representing the plant and the zombie respectively. Then a for loop is used to simulate the process of battle. In the loop, the plant attacks the zombie first, then the zombie attacks the plant. After each attack, the death method is called to confirm whether one side has died. When one side's health value is less than or equal to 0, the battle ends.\\n\\nFinally, the corresponding battle results are output.\\n\\nImplemented in JAVA, give me the code you implemented.\", \"programming_language\":\"java\", \"tags\":\"Algorithm and Data Structure\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.BeforeEach;\\nimport org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nclass PlantZombieTest {\\n    private Plant peashooter;\\n    private Zombie coneheadZombie;\\n\\n    @BeforeEach\\n    void setUp() {\\n        peashooter = new Plant(\\\"Peashooter\\\", 100, 20);\\n        coneheadZombie = new Zombie(\\\"Conehead Zombie\\\", 150, 30);\\n    }\\n    @Test\\n    void testZombieConstructor() {\\n        assertEquals(\\\"Conehead Zombie\\\", coneheadZombie.name);\\n        assertEquals(150, coneheadZombie.health);\\n        assertEquals(30, coneheadZombie.attack);\\n    }\\n\\n    @Test\\n    void testPlantAttackReducesZombieHealth() {\\n        peashooter.attack(coneheadZombie);\\n        assertEquals(130, coneheadZombie.health);\\n    }\\n\\n    @Test\\n    void testZombieAttackReducesPlantHealth() {\\n        coneheadZombie.attack(peashooter);\\n        assertEquals(70, peashooter.health);\\n    }\\n\\n    @Test\\n    void testPlantDeath() {\\n        peashooter.health = 0;\\n        peashooter.checkDeath();\\n        assertEquals(0, peashooter.health);\\n    }\\n\\n    @Test\\n    void testZombieDeath() {\\n        coneheadZombie.health = 0;\\n        coneheadZombie.checkDeath();\\n        assertEquals(0, coneheadZombie.health);\\n    }\\n\\n    @Test\\n    void testPlantDeathAfterMultipleZombieAttacks() {\\n        while (peashooter.health > 0) {\\n            coneheadZombie.attack(peashooter);\\n        }\\n        assertTrue(peashooter.health <= 0);\\n    }\\n\\n    @Test\\n    void testZombieDeathAfterMultiplePlantAttacks() {\\n        while (coneheadZombie.health > 0) {\\n            peashooter.attack(coneheadZombie);\\n        }\\n        assertTrue(coneheadZombie.health <= 0);\\n    }\\n\\n    @Test\\n    void testPlantSurvivesAfterZombieAttack() {\\n        coneheadZombie.attack(peashooter);\\n        assertTrue(peashooter.health > 0);\\n    }\\n\\n    @Test\\n    void testZombieSurvivesAfterPlantAttack() {\\n        peashooter.attack(coneheadZombie);\\n        assertTrue(coneheadZombie.health > 0);\\n    }\\n}\\n\"}", "__internal_uuid__": "4af6b61c-3b21-4c13-ab02-51ac63ba9872"}
{"canonical_solution": "```java\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Calendar;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DateDifference {\n    private static final Map<String, Integer> CHINESE_NUMBERS = new HashMap<String, Integer>() {{\n        put(\"一\", 1);\n        put(\"二\", 2);\n        put(\"三\", 3);\n        put(\"四\", 4);\n        put(\"五\", 5);\n        put(\"六\", 6);\n        put(\"七\", 7);\n        put(\"八\", 8);\n        put(\"九\", 9);\n        put(\"十\", 10);\n        put(\"十一\", 11);\n        put(\"十二\", 12);\n    }};\n\n    public static int getDaysDifference(String chineseDate) {\n        LocalDate now = LocalDate.now();\n        int days = 0;\n\n        if (chineseDate.contains(\"今天\") || chineseDate.contains(\"今日\")) {\n            days = 1;\n        } else if (chineseDate.contains(\"昨天\") || chineseDate.contains(\"昨日\")) {\n            days = 2;\n        } else if (chineseDate.contains(\"近\")) {\n            String numberStr = chineseDate.replaceAll(\"[^0-9一二三四五六七八九十]\", \"\");\n            int number = CHINESE_NUMBERS.containsKey(numberStr) ? CHINESE_NUMBERS.get(numberStr) : Integer.parseInt(numberStr);\n\n            if (chineseDate.contains(\"周\")) {\n                days = number * 7;\n            } else if (chineseDate.contains(\"天\")) {\n                days = number;\n            } else if (chineseDate.contains(\"月\")) {\n                LocalDate pastDate = now.minusMonths(number);\n                days = (int) ChronoUnit.DAYS.between(pastDate, now);\n            }\n        }\n\n        return days;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getDaysDifference(\"今天\")); // 1\n        System.out.println(getDaysDifference(\"昨天\")); // 2\n        System.out.println(getDaysDifference(\"近一周\")); // 7\n        System.out.println(getDaysDifference(\"近7天\")); // 7\n        System.out.println(getDaysDifference(\"近一月\")); // depends on the current date\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a method in Java, the input is in Chinese, and the output is the number of days from now to 23:59:59 today. For example: today, today, yesterday, yesterday (recent/this) recent x weeks (recent/this) recent x days (recent/this) recent X months are converted to 1 1 2 2 x*7 x total number of days in x months. Here x may be the Chinese character for one or the Arabic numeral 1, the maximum value of x is 12.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testGetDaysDifference_today() {\n        assertEquals(1, DateDifference.getDaysDifference(\"今天\"));\n    }\n}", "id": 17, "labels": "{\"execution_language\":\"java\", \"original_id\":148, \"original_promblem\":\"Write a method in Java, the input is in Chinese, and the output is the number of days from now to 23:59:59 today. For example: today, today, yesterday, yesterday (recent/this) recent x weeks (recent/this) recent x days (recent/this) recent X months are converted to 1 1 2 2 x*7 x total number of days in x months. Here x may be the Chinese character for one or the Arabic numeral 1, the maximum value of x is 12.\", \"programming_language\":\"java\", \"tags\":\"Data Science\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.time.LocalDate;\\nimport java.time.temporal.ChronoUnit;\\nimport java.util.Calendar;\\nimport java.util.HashMap;\\nimport java.util.Map;\\n\\nclass DateDifferenceTest {\\n    @Test\\n    void testGetDaysDifference_today2() {\\n        assertEquals(1, DateDifference.getDaysDifference(\\\"今日\\\"));\\n    }\\n\\n    @Test\\n    void testGetDaysDifference_yesterday() {\\n        assertEquals(2, DateDifference.getDaysDifference(\\\"昨天\\\"));\\n    }\\n\\n    @Test\\n    void testGetDaysDifference_yesterday2() {\\n        assertEquals(2, DateDifference.getDaysDifference(\\\"昨日\\\"));\\n    }\\n\\n    @Test\\n    void testGetDaysDifference_week() {\\n        assertEquals(7, DateDifference.getDaysDifference(\\\"近一周\\\"));\\n    }\\n\\n    @Test\\n    void testGetDaysDifference_days() {\\n        assertEquals(7, DateDifference.getDaysDifference(\\\"近7天\\\"));\\n    }\\n\\n    @Test\\n    void testGetDaysDifference_month() {\\n        LocalDate now = LocalDate.now();\\n        LocalDate pastDate = now.minusMonths(1);\\n        int days = (int) ChronoUnit.DAYS.between(pastDate, now);\\n        assertEquals(days, DateDifference.getDaysDifference(\\\"近一月\\\"));\\n    }\\n\\n    @Test\\n    void testGetDaysDifference_maxWeek() {\\n        assertEquals(84, DateDifference.getDaysDifference(\\\"近十二周\\\"));\\n    }\\n\\n    @Test\\n    void testGetDaysDifference_maxDays() {\\n        assertEquals(12, DateDifference.getDaysDifference(\\\"近十二天\\\"));\\n    }\\n\\n    @Test\\n    void testGetDaysDifference_maxMonth() {\\n        LocalDate now = LocalDate.now();\\n        LocalDate pastDate = now.minusMonths(12);\\n        int days = (int) ChronoUnit.DAYS.between(pastDate, now);\\n        assertEquals(days, DateDifference.getDaysDifference(\\\"近十二月\\\"));\\n    }\\n}\"}", "__internal_uuid__": "37b449fe-31a1-4c94-a97c-a21a841eb9bd"}
{"canonical_solution": "```java\n\npublic class PathReader {\n\n    public static String readPathTest(String path) {\n        // 检查路径是否为空或null\n        if (path == null || path.isEmpty()) {\n            return \"\";\n        }\n\n        // 查找最后一个'/'的位置\n        int lastSlashIndex = path.lastIndexOf('/');\n\n        // 从最后一个'/'之后提取文件名（包括扩展名）\n        String fileNameWithExtension = path.substring(lastSlashIndex + 1);\n\n        // 查找文件名中'.'的位置，用以去除扩展名\n        int dotIndex = fileNameWithExtension.indexOf('.');\n\n        // 如果没有扩展名，直接返回文件名\n        if (dotIndex == -1) {\n            return fileNameWithExtension;\n        }\n\n        // 返回没有扩展名的文件名\n        return fileNameWithExtension.substring(0, dotIndex);\n    }\n\n    // 可以在这里添加main方法来测试功能\n    public static void main(String[] args) {\n        String path = \"/courses/lecture/Lecture01.pdf\";\n        System.out.println(readPathTest(path)); // 应该输出 \"Lecture01\"\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a private static String readPathTest(String path) method, which extracts the file name from the given path. The path hierarchy is separated by `/`.\nFor example, if you input /courses/lecture/Lecture01.pdf, it should return: Lecture01.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testReadPathTest1() {\n        assertEquals(\"Lecture01\", PathReader.readPathTest(\"/courses/lecture/Lecture01.pdf\"));\n    }\n}", "id": 18, "labels": "{\"execution_language\":\"java\", \"original_id\":149, \"original_promblem\":\"Write a private static String readPathTest(String path) method, which extracts the file name from the given path. The path hierarchy is separated by `/`.\\nFor example, if you input /courses/lecture/Lecture01.pdf, it should return: Lecture01.\", \"programming_language\":\"java\", \"tags\":\"Operation System\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.nio.file.Path;\\nimport java.nio.file.Paths;\\n\\nclass PathReaderTest {\\n    @Test\\n    void testReadPathTest2() {\\n        assertEquals(\\\"index\\\", PathReader.readPathTest(\\\"/www/index.html\\\"));\\n    }\\n\\n    @Test\\n    void testReadPathTest3() {\\n        assertEquals(\\\"test\\\", PathReader.readPathTest(\\\"/test.txt\\\"));\\n    }\\n\\n    @Test\\n    void testReadPathTest4() {\\n        assertEquals(\\\"file\\\", PathReader.readPathTest(\\\"/dir/subdir/file.jpg\\\"));\\n    }\\n\\n    @Test\\n    void testReadPathTest5() {\\n        assertEquals(\\\"document\\\", PathReader.readPathTest(\\\"/folder/document.docx\\\"));\\n    }\\n\\n    @Test\\n    void testReadPathTest6() {\\n        assertEquals(\\\"image\\\", PathReader.readPathTest(\\\"/path/to/image.png\\\"));\\n    }\\n\\n    @Test\\n    void testReadPathTest7() {\\n        assertEquals(\\\"file\\\", PathReader.readPathTest(\\\"/file\\\"));\\n    }\\n\\n    @Test\\n    void testReadPathTest8() {\\n        assertEquals(\\\"\\\", PathReader.readPathTest(\\\"/\\\"));\\n    }\\n\\n    @Test\\n    void testReadPathTest9() {\\n        assertEquals(\\\"file\\\", PathReader.readPathTest(\\\"file.txt\\\"));\\n    }\\n\\n    @Test\\n    void testReadPathTest10() {\\n        assertEquals(\\\"\\\", PathReader.readPathTest(\\\"\\\"));\\n    }\\n}\"}", "__internal_uuid__": "ce31f196-b662-43f2-b64d-862d6d8b9f9a"}
{"canonical_solution": "```java\n\n\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入IP地址：\");\n        String ip = scanner.nextLine();\n        System.out.println(\"方法一验证结果：\" + isRightIP(ip));\n        System.out.println(\"方法二验证结果：\" + isRightIPByRegex(ip));\n    }\n\n    // 方法一：使用字符串分割和整数解析\n    public static boolean isRightIP(String ip) {\n        if (ip == null || ip.length() == 0) {\n            return false;\n        }\n        String[] parts = ip.split(\"\\\\.\");\n        if (parts.length != 4) {\n            return false;\n        }\n        for (String part : parts) {\n            try {\n                int num = Integer.parseInt(part);\n                if (num < 0 || num > 255) {\n                    return false;\n                }\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // 方法二：使用正则表达式\n    public static boolean isRightIPByRegex(String ip) {\n        if (ip == null || ip.length() == 0) {\n            return false;\n        }\n        String regex = \"^((25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)\\\\.){3}(25[0-5]|2[0-4]\\\\d|[01]?\\\\d\\\\d?)$\";\n        return Pattern.matches(regex, ip);\n    }\n}\n\n```", "content": "Your task is to generate java code to solve the following problem. The generated code must be placed between the ```java and ```, and only one code block is allowed:\nWrite a main class in Java, including 2 methods. In the main method, read a string from the keyboard and call the isRightIP(String ip) method to test whether the input string is a valid IP. If correct, output true, if incorrect, output false. The method to verify the IP address can be defined as public boolean isRightIP(String ip), where the parameter ip is the IP address to be verified. The IP address consists of 4 parts, formatted as x.x.x.x; where each x is an integer between 0~255, each part is separated by \".\", for example, 192.168.1.1. Please provide at least two methods to solve this problem, one of which must use regular expressions.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases:\nclass MainTest {\n\n    @Test\n    void testIsRightIP() {\n        assertTrue(Main.isRightIP(\"192.168.1.1\"));\n        assertFalse(Main.isRightIP(\"192.168.1.256\"));\n        assertFalse(Main.isRightIP(\"192.168.1.-1\"));\n        assertFalse(Main.isRightIPByRegex(\"192.168.1.256\"));\n        assertFalse(Main.isRightIPByRegex(\"192.168.1.1.1\"));\n        assertFalse(Main.isRightIPByRegex(\"192.168.1\"));\n    }\n}", "id": 19, "labels": "{\"execution_language\":\"java\", \"original_id\":150, \"original_promblem\":\"Write a main class in Java, including 2 methods. In the main method, read a string from the keyboard and call the isRightIP(String ip) method to test whether the input string is a valid IP. If correct, output true, if incorrect, output false. The method to verify the IP address can be defined as public boolean isRightIP(String ip), where the parameter ip is the IP address to be verified. The IP address consists of 4 parts, formatted as x.x.x.x; where each x is an integer between 0~255, each part is separated by \\\".\\\", for example, 192.168.1.1. Please provide at least two methods to solve this problem, one of which must use regular expressions.\", \"programming_language\":\"java\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import org.junit.jupiter.api.Test;\\nimport static org.junit.jupiter.api.Assertions.*;\\n\\nimport java.util.Scanner;\\nimport java.util.regex.Pattern;\\n\\nclass MainTest {\\n    @Test\\n    void testIsRightIPByRegex() {\\n        assertTrue(Main.isRightIPByRegex(\\\"192.168.1.1\\\"));\\n        assertFalse(Main.isRightIP(\\\"192.168.1.1.1\\\"));\\n        assertFalse(Main.isRightIP(\\\"192.168.1\\\"));\\n        assertFalse(Main.isRightIP(\\\"192.168.1.a\\\"));\\n        assertFalse(Main.isRightIPByRegex(\\\"192.168.1.a\\\"));\\n        assertFalse(Main.isRightIPByRegex(\\\"192.168.1.-1\\\"));\\n    }\\n\\n    @Test\\n    void testIsRightIPBoundary() {\\n        assertTrue(Main.isRightIP(\\\"0.0.0.0\\\"));\\n        assertTrue(Main.isRightIP(\\\"255.255.255.255\\\"));\\n        assertFalse(Main.isRightIP(\\\"256.256.256.256\\\"));\\n        assertFalse(Main.isRightIP(\\\"\\\"));\\n    }\\n\\n    @Test\\n    void testIsRightIPByRegexBoundary() {\\n        assertTrue(Main.isRightIPByRegex(\\\"0.0.0.0\\\"));\\n        assertTrue(Main.isRightIPByRegex(\\\"255.255.255.255\\\"));\\n        assertFalse(Main.isRightIPByRegex(\\\"256.256.256.256\\\"));\\n        assertFalse(Main.isRightIPByRegex(\\\"\\\"));\\n    }\\n}\"}", "__internal_uuid__": "8d8afa84-217d-4d34-bb77-3a01adc272b1"}