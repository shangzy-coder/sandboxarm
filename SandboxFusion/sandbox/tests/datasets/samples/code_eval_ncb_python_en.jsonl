{"canonical_solution": "```python\nimport string\nfrom collections import Counter\n\n\ndef word_count(file_path):\n    try:\n        # 读取文件内容\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n\n        # 移除标点符号并转换为小写\n        translator = str.maketrans(\"\", \"\", string.punctuation)\n        content = content.translate(translator).lower()\n\n        # 使用 Counter 统计单词出现次数\n        words = content.split()\n        word_counter = Counter(words)\n\n        # 按照出现次数降序排列\n        sorted_word_count = sorted(word_counter.items(), key=lambda x: x[1], reverse=True)\n\n        for word, count in sorted_word_count:\n            print(f\"'{word}': {count}\")\n\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nCreate a function named `word_count` that takes a file path as an argument, reads the file content, and counts the number of times each word appears in the file. The function should return a dictionary where the keys are the words and the values are the number of times that word appears in the file. It should ignore case and remove punctuation. Finally, the dictionary items should be sorted in descending order by the number of times the word appears. If multiple words appear the same number of times, they should be sorted in ascending alphabetical order. The function does not need to handle the case where the file does not exist.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testword_count:\n    def test_word_count_basic_file(self, capfd, tmp_path):\n        file_path = tmp_path / 'test_basic.txt'\n        with open(file_path, 'w', encoding='utf-8') as file:\n            file.write(\"This is a basic test file with some common words.\")\n        word_count(file_path)\n        captured = capfd.readouterr()\n        assert \"'this': 1\\n'is': 1\\n'a': 1\\n'basic': 1\\n'test': 1\\n'file': 1\\n'with': 1\\n'some': 1\\n'common': 1\\n'words': 1\\n\" in captured.out\n\n\n", "id": 0, "labels": "{\"execution_language\":\"python\", \"original_id\":131, \"original_promblem\":\"Create a function named `word_count` that takes a file path as an argument, reads the file content, and counts the number of times each word appears in the file. The function should return a dictionary where the keys are the words and the values are the number of times that word appears in the file. It should ignore case and remove punctuation. Finally, the dictionary items should be sorted in descending order by the number of times the word appears. If multiple words appear the same number of times, they should be sorted in ascending alphabetical order. The function does not need to handle the case where the file does not exist.\", \"programming_language\":\"python\", \"tags\":\"Algorithm and Data Structure\"}", "test": "{\"asset\":null, \"code\":\"import string\\nfrom collections import Counter\\n\\n\\nclass Testword_count:\\n    def test_word_count_case_sensitive_file(self, capfd, tmp_path):\\n        file_path = tmp_path / 'test_case_sensitive.txt'\\n        with open(file_path, 'w', encoding='utf-8') as file:\\n            file.write(\\\"Case case CASE\\\")\\n        word_count(file_path)\\n        captured = capfd.readouterr()\\n        assert \\\"'case': 3\\\" in captured.out\\n\\n\\n    def test_word_count_punctuation_file(self, capfd, tmp_path):\\n        file_path = tmp_path / 'test_punctuation.txt'\\n        with open(file_path, 'w', encoding='utf-8') as file:\\n            file.write(\\\"This sentence has some punctuation, like commas and periods.\\\")\\n        word_count(file_path)\\n        captured = capfd.readouterr()\\n        assert \\\"'this': 1\\\\n'sentence': 1\\\\n'has': 1\\\\n'some': 1\\\\n'punctuation': 1\\\\n'like': 1\\\\n'commas': 1\\\\n'and': 1\\\\n'periods': 1\\\\n\\\" in captured.out\\n\\n\\n    def test_word_count_same_word_file(self, capfd, tmp_path):\\n        file_path = tmp_path / 'test_same_word_multiple_times.txt'\\n        with open(file_path, 'w', encoding='utf-8') as file:\\n            file.write(\\\"word word word word word\\\")\\n        word_count(file_path)\\n        captured = capfd.readouterr()\\n        assert \\\"'word': 5\\\" in captured.out\\n\\n    def test_word_count_different_words_file(self, capfd, tmp_path):\\n        file_path = tmp_path / 'test_different_words_same_count.txt'\\n        with open(file_path, 'w', encoding='utf-8') as file:\\n            file.write(\\\"apple banana orange\\\")\\n        word_count(file_path)\\n        captured = capfd.readouterr()\\n        assert \\\"'apple': 1\\\\n'banana': 1\\\\n'orange': 1\\\\n\\\" in captured.out\\n\\n    def test_word_count_nonexistent_file(self, capfd, tmp_path):\\n        file_path = tmp_path / 'nonexistent_file.txt'\\n        word_count(file_path)\\n        captured = capfd.readouterr()\\n        assert \\\"Error: File\\\" in captured.out\\n\\n    def test_word_count_empty_file(self, capfd, tmp_path):\\n        file_path = tmp_path / 'test_empty_file.txt'\\n        open(file_path, 'w', encoding='utf-8').close()  # 创建一个空文件\\n        word_count(file_path)\\n        captured = capfd.readouterr()\\n        assert captured.out.strip() == \\\"\\\"  # 期望输出为空字符串\\n\\n\"}", "__internal_uuid__": "d4b728b0-85f3-4a37-a4c2-34d16628fd22"}
{"canonical_solution": "```python\nimport re\n\n\ndef remove_html_tags(s: str) -> str:\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n\n    if not s:\n        return \"\"\n\n    # 定义新的正则表达式模式\n    tag_pattern = r\"<[^>]*>\"\n    comment_pattern = r\"<!--.*?-->\"\n    doctype_pattern = r\"<!DOCTYPE[^>]*>\"\n\n    # 移除 HTML 注释和 DOCTYPE\n    s = re.sub(comment_pattern, \"\", s)\n    s = re.sub(doctype_pattern, \"\", s)\n\n    # 移除标签\n    s = re.sub(tag_pattern, \"\", s)\n\n    # 返回处理后的字符串\n    return s.strip()\n\n\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nDefine a function named remove_html_tags, which is used to remove HTML tags, comments, and document type declarations from the input string. Here is a description of the program's functionality and each step:\n\nremove_html_tags function:\n\nPurpose: Remove HTML tags, comments, and document type declarations from the input string.\nParameters:\ns: The input string.\nReturn value:\nThe processed string, with HTML tags, comments, and document type declarations removed.\nMain process:\n\nFirst, check if the input is a string, if not, throw a ValueError.\nIf the input string is empty, return an empty string directly.\nDefine three regular expression patterns:\ntag_pattern: Used to match HTML tags.\ncomment_pattern: Used to match HTML comments.\ndoctype_pattern: Used to match document type declarations.\nUse the re.sub method to remove HTML comments, document type declarations, and HTML tags respectively.\nReturn the processed string. The processed string has HTML comments, document type declarations, and HTML tags removed, and also trims whitespace from both ends of the string.\nThis program uses regular expression patterns to perform multiple replacement operations on the input string, thereby achieving the function of removing HTML comments, document type declarations, and HTML tags.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testremove_html_tags:\n    def test_basic_tags(self):\n        html_string = \"<p>Hello, <strong>world!</strong></p>\"\n        assert remove_html_tags(html_string) == \"Hello, world!\"\n\n", "id": 1, "labels": "{\"execution_language\":\"python\", \"original_id\":132, \"original_promblem\":\"Define a function named remove_html_tags, which is used to remove HTML tags, comments, and document type declarations from the input string. Here is a description of the program's functionality and each step:\\n\\nremove_html_tags function:\\n\\nPurpose: Remove HTML tags, comments, and document type declarations from the input string.\\nParameters:\\ns: The input string.\\nReturn value:\\nThe processed string, with HTML tags, comments, and document type declarations removed.\\nMain process:\\n\\nFirst, check if the input is a string, if not, throw a ValueError.\\nIf the input string is empty, return an empty string directly.\\nDefine three regular expression patterns:\\ntag_pattern: Used to match HTML tags.\\ncomment_pattern: Used to match HTML comments.\\ndoctype_pattern: Used to match document type declarations.\\nUse the re.sub method to remove HTML comments, document type declarations, and HTML tags respectively.\\nReturn the processed string. The processed string has HTML comments, document type declarations, and HTML tags removed, and also trims whitespace from both ends of the string.\\nThis program uses regular expression patterns to perform multiple replacement operations on the input string, thereby achieving the function of removing HTML comments, document type declarations, and HTML tags.\", \"programming_language\":\"python\", \"tags\":\"Front-End\"}", "test": "{\"asset\":null, \"code\":\"import re\\n\\n\\nclass Testremove_html_tags:\\n    def test_multiple_tags(self):\\n        html_string = \\\"<h1>Title</h1><p>Paragraph</p>\\\"\\n        assert remove_html_tags(html_string) == \\\"TitleParagraph\\\"\\n\\n    def test_special_characters(self):\\n        html_string = '<a href=\\\"https://example.com\\\">Click here</a>'\\n        assert remove_html_tags(html_string) == \\\"Click here\\\"\\n\\n    def test_comments(self):\\n        html_string = \\\"<p>Hello <!-- Comment -->world!</p>\\\"\\n        assert remove_html_tags(html_string) == \\\"Hello world!\\\"\\n\\n    def test_empty_tags(self):\\n        html_string = \\\"<br/>\\\"\\n        assert remove_html_tags(html_string) == \\\"\\\"\\n\\n    def test_doctype_declaration(self):\\n        html_string = \\\"<!DOCTYPE html><html><body>Hello, world!</body></html>\\\"\\n        assert remove_html_tags(html_string) == \\\"Hello, world!\\\"\\n\\n    def test_empty_string(self):\\n        html_string = \\\"\\\"\\n        assert remove_html_tags(html_string) == \\\"\\\"\\n\\n    def test_nonstring_input(self):\\n        invalid_input = \\\"123\\\"\\n        assert remove_html_tags(invalid_input) == \\\"123\\\"\\n\"}", "__internal_uuid__": "a82d341b-3403-42bf-bd6a-5b120c540828"}
{"canonical_solution": "```python\nfrom datetime import datetime\n\nclass Schedule:\n    def __init__(self):\n        self.events = {}\n\n    def add_event(self, event_name, event_date):\n        if event_date in self.events:\n            self.events[event_date].append(event_name)\n        else:\n            self.events[event_date] = [event_name]\n\n    def view_events(self):\n        for event_date, event_names in self.events.items():\n            print(f\"{event_date.strftime('%Y-%m-%d %H:%M')}:\")\n            for event_name in event_names:\n                print(f\"- {event_name}\")\n            print()\n\n    def remove_event(self, event_name, event_date):\n        if event_date in self.events:\n            if event_name in self.events[event_date]:\n                self.events[event_date].remove(event_name)\n                if not self.events[event_date]:\n                    del self.events[event_date]\n                print(f\"已删除事件：{event_name}\")\n                return\n        print(f\"未找到事件'{event_name}'\")\n\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, \"Implement a simple schedule manager: Python class implements event addition, viewing, and deletion functions\"\nDefine a class named Schedule to implement a simple schedule management system. The following is a description of the code:\n\nSchedule Class:\n\nPurpose: Represents a schedule management system that can add, view, and delete events.\nAttributes:\nevents: A dictionary used to store event information, where the key is the event date and the value is the list of events on that date.\nMain methods:\n\n__init__(self):\n\nInitialization method, creates an empty event dictionary.\nadd_event(self, event_name, event_date):\n\nMethod to add events, accepts event name and date, and adds the event to the event list of the corresponding date.\nIf the date already exists, the event is added to the existing list, otherwise a new list is created.\nview_events(self):\n\nMethod to view all events, prints the event list by date.\nUses the strftime method to format the date in the form of \"YYYY-MM-DD HH:MM\".\nremove_event(self, event_name, event_date):\n\nMethod to delete events, accepts event name and date, and deletes the specified event from the event list of the corresponding date.\nIf the list is empty after deletion, the entry for that date is also deleted.\nIf the specified event is not found, output \"Event '{event_name}' not found\"\nMain process:\n\nUses the strftime method of the datetime module to format the date.\nWhen adding an event, check if the date already exists, if it does, append it, otherwise create a new date entry.\nWhen viewing events, traverse the dictionary by date and print the event list for each date.\nWhen deleting an event, check if the event exists under the specified date, if it does, delete it, and check if the list is empty, if it is, delete the date entry.\nThis class provides a simple way to manage schedules, where users can add, view, and delete events.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass TestSchedule:\n    def test_add_event(self, schedule):\n        # 添加事件\n        event_date = datetime(2023, 12, 20, 18, 0)\n        schedule.add_event(\"生日聚会\", event_date)\n\n        # 断言事件是否添加成功\n        assert event_date in schedule.events\n        assert \"生日聚会\" in schedule.events[event_date]\n\n", "id": 2, "labels": "{\"execution_language\":\"python\", \"original_id\":133, \"original_promblem\":\"Write a program, \\\"Implement a simple schedule manager: Python class implements event addition, viewing, and deletion functions\\\"\\nDefine a class named Schedule to implement a simple schedule management system. The following is a description of the code:\\n\\nSchedule Class:\\n\\nPurpose: Represents a schedule management system that can add, view, and delete events.\\nAttributes:\\nevents: A dictionary used to store event information, where the key is the event date and the value is the list of events on that date.\\nMain methods:\\n\\n__init__(self):\\n\\nInitialization method, creates an empty event dictionary.\\nadd_event(self, event_name, event_date):\\n\\nMethod to add events, accepts event name and date, and adds the event to the event list of the corresponding date.\\nIf the date already exists, the event is added to the existing list, otherwise a new list is created.\\nview_events(self):\\n\\nMethod to view all events, prints the event list by date.\\nUses the strftime method to format the date in the form of \\\"YYYY-MM-DD HH:MM\\\".\\nremove_event(self, event_name, event_date):\\n\\nMethod to delete events, accepts event name and date, and deletes the specified event from the event list of the corresponding date.\\nIf the list is empty after deletion, the entry for that date is also deleted.\\nIf the specified event is not found, output \\\"Event '{event_name}' not found\\\"\\nMain process:\\n\\nUses the strftime method of the datetime module to format the date.\\nWhen adding an event, check if the date already exists, if it does, append it, otherwise create a new date entry.\\nWhen viewing events, traverse the dictionary by date and print the event list for each date.\\nWhen deleting an event, check if the event exists under the specified date, if it does, delete it, and check if the list is empty, if it is, delete the date entry.\\nThis class provides a simple way to manage schedules, where users can add, view, and delete events.\", \"programming_language\":\"python\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"from datetime import datetime\\n\\n\\nclass TestSchedule:\\n    @pytest.fixture\\n    def schedule(self):\\n        return Schedule()\\n\\n    def test_add_event(self, schedule):\\n        # 添加事件\\n        event_date = datetime(2023, 12, 20, 18, 0)\\n        schedule.add_event(\\\"生日聚会\\\", event_date)\\n\\n        # 断言事件是否添加成功\\n        assert event_date in schedule.events\\n        assert \\\"生日聚会\\\" in schedule.events[event_date]\\n\\n    def test_add_duplicate_event(self, schedule):\\n        # 添加重复的事件\\n        event_date = datetime(2023, 12, 20, 18, 0)\\n        schedule.add_event(\\\"生日聚会\\\", event_date)\\n        schedule.add_event(\\\"生日聚会\\\", event_date)\\n\\n        # 断言只添加了一个事件\\n        assert len(schedule.events[event_date]) == 2\\n\\n    def test_view_events(self, schedule, capsys):\\n        # 添加事件\\n        schedule.add_event(\\\"生日聚会\\\", datetime(2023, 12, 20, 18, 0))\\n        schedule.add_event(\\\"项目截止日期\\\", datetime(2023, 12, 25, 23, 59))\\n        schedule.add_event(\\\"面试\\\", datetime(2024, 1, 5, 14, 30))\\n\\n        # 查看事件\\n        schedule.view_events()\\n        captured = capsys.readouterr()\\n\\n        # 断言输出是否正确\\n        assert \\\"2023-12-20 18:00:\\\\n- 生日聚会\\\\n\\\\n\\\" in captured.out\\n        assert \\\"2023-12-25 23:59:\\\\n- 项目截止日期\\\\n\\\\n\\\" in captured.out\\n        assert \\\"2024-01-05 14:30:\\\\n- 面试\\\\n\\\\n\\\" in captured.out\\n\\n    def test_remove_event(self, schedule, capsys):\\n        # 添加事件\\n        event_date = datetime(2023, 12, 20, 18, 0)\\n        schedule.add_event(\\\"生日聚会\\\", event_date)\\n\\n        # 删除事件\\n        schedule.remove_event(\\\"生日聚会\\\", event_date)\\n\\n        # 查看事件\\n        schedule.view_events()\\n        captured = capsys.readouterr()\\n\\n        # 断言事件是否删除成功\\n        assert \\\"2023-12-20 18:00:\\\\n\\\" not in captured.out\\n\\n    def test_remove_nonexistent_event(self, schedule, capsys):\\n        # 添加事件\\n        schedule.add_event(\\\"生日聚会\\\", datetime(2023, 12, 20, 18, 0))\\n\\n        # 删除不存在的事件\\n        schedule.remove_event(\\\"项目截止日期\\\", datetime(2023, 12, 25, 23, 59))\\n\\n        # 查看事件\\n        schedule.view_events()\\n        captured = capsys.readouterr()\\n\\n        # 断言是否输出了相应的错误信息\\n        assert \\\"未找到事件'项目截止日期'\\\" in captured.out\\n\\n    def test_remove_event_multiple_times(self, schedule, capsys):\\n        # 添加事件\\n        event_date = datetime(2023, 12, 20, 18, 0)\\n        schedule.add_event(\\\"生日聚会\\\", event_date)\\n\\n        # 多次删除事件\\n        schedule.remove_event(\\\"生日聚会\\\", event_date)\\n        schedule.remove_event(\\\"生日聚会\\\", event_date)\\n\\n        # 查看事件\\n        schedule.view_events()\\n        captured = capsys.readouterr()\\n\\n        # 断言事件是否只删除了一次\\n        assert \\\"2023-12-20 18:00:\\\\n\\\" not in captured.out\\n\\n    def test_remove_event_with_different_date(self, schedule, capsys):\\n        # 添加事件\\n        event_date1 = datetime(2023, 12, 20, 18, 0)\\n        event_date2 = datetime(2023, 12, 25, 23, 59)\\n        schedule.add_event(\\\"生日聚会\\\", event_date1)\\n        schedule.add_event(\\\"项目截止日期\\\", event_date2)\\n\\n        # 删除不同日期的事件\\n        schedule.remove_event(\\\"生日聚会\\\", event_date2)\\n\\n        # 查看事件\\n        schedule.view_events()\\n        captured = capsys.readouterr()\\n\\n        # 断言事件是否删除成功\\n        assert \\\"2023-12-20 18:00:\\\\n- 生日聚会\\\\n\\\\n\\\" in captured.out\\n        assert \\\"2023-12-25 23:59:\\\\n- 项目截止日期\\\\n\\\\n\\\" in captured.out\\n\\n    def test_remove_event_from_empty_schedule(self, schedule, capsys):\\n        # 删除空日程中的事件\\n        schedule.remove_event(\\\"生日聚会\\\", datetime(2023, 12, 20, 18, 0))\\n\\n        # 查看事件\\n        schedule.view_events()\\n        captured = capsys.readouterr()\\n\\n        # 断言是否输出了相应的错误信息\\n        assert \\\"未找到事件'生日聚会'\\\" in captured.out\"}", "__internal_uuid__": "fdd06db5-e49f-4a73-a738-19b4c7108ca9"}
{"canonical_solution": "```python\nclass ListNode:\n    def __init__(self, value=0, next=None):\n        self.value = value\n        self.next = next\n\n\ndef add_two_numbers(l1, l2):\n    carry = 0\n    dummy_head = ListNode()\n    current = dummy_head\n\n    while l1 or l2 or carry:\n        # 获取当前节点的值\n        val1 = l1.value if l1 else 0\n        val2 = l2.value if l2 else 0\n\n        # 计算和以及进位\n        total = val1 + val2 + carry\n        carry, digit = divmod(total, 10)\n\n        # 创建新节点并更新当前节点的next\n        current.next = ListNode(digit)\n        current = current.next\n\n        # 移动到下一个节点\n        if l1:\n            l1 = l1.next\n        if l2:\n            l2 = l2.next\n\n    return dummy_head.next\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that takes two integers represented by linked lists, where each node contains a digit. The digits are stored in reverse order, so that the first digit is at the head of the list. Write a function that adds these two integers and returns the sum in the form of a linked list. The ListNode class represents a linked list node, each node contains a value and a pointer to the next node.\n\nThe add_two_numbers function takes the head nodes of two linked lists l1 and l2, as well as a carry variable.\n\nUse dummy_head to create a dummy head node as the starting node of the new linked list.\n\nThe current variable is used to iteratively build the new linked list.\n\nEnter a loop until both linked lists and the carry are processed.\n\nIn each loop, get the value of the current node, calculate the sum and the carry.\n\nCreate a new node and add it to the new linked list.\n\nMove to the next node, update l1 and l2.\n\nFinally, return the head node of the new linked list, which is dummy_head.next.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass TestListNode:\n    def test_add_two_numbers_equal_length_no_carry(self):\n        l1 = ListNode(2, ListNode(4, ListNode(3)))\n        l2 = ListNode(5, ListNode(6, ListNode(4)))\n        result = add_two_numbers(l1, l2)\n        assert result.value == 7\n        assert result.next.value == 0\n        assert result.next.next.value == 8\n        assert result.next.next.next is None\n\n", "id": 3, "labels": "{\"execution_language\":\"python\", \"original_id\":134, \"original_promblem\":\"Write a program that takes two integers represented by linked lists, where each node contains a digit. The digits are stored in reverse order, so that the first digit is at the head of the list. Write a function that adds these two integers and returns the sum in the form of a linked list. The ListNode class represents a linked list node, each node contains a value and a pointer to the next node.\\n\\nThe add_two_numbers function takes the head nodes of two linked lists l1 and l2, as well as a carry variable.\\n\\nUse dummy_head to create a dummy head node as the starting node of the new linked list.\\n\\nThe current variable is used to iteratively build the new linked list.\\n\\nEnter a loop until both linked lists and the carry are processed.\\n\\nIn each loop, get the value of the current node, calculate the sum and the carry.\\n\\nCreate a new node and add it to the new linked list.\\n\\nMove to the next node, update l1 and l2.\\n\\nFinally, return the head node of the new linked list, which is dummy_head.next.\", \"programming_language\":\"python\", \"tags\":\"Algorithm and Data Structure\"}", "test": "{\"asset\":null, \"code\":\"\\n\\nclass TestListNode:\\n    def test_add_two_numbers_both_empty(self):\\n        l1 = None\\n        l2 = None\\n        assert add_two_numbers(l1, l2) is None\\n\\n    def test_add_two_numbers_equal_length_with_carry(self):\\n        l1 = ListNode(9, ListNode(9, ListNode(9)))\\n        l2 = ListNode(1)\\n        result = add_two_numbers(l1, l2)\\n        assert result.value == 0\\n        assert result.next.value == 0\\n        assert result.next.next.value == 0\\n        assert result.next.next.next.value == 1\\n        assert result.next.next.next.next is None\\n\\n    def test_add_two_numbers_unequal_length_no_carry(self):\\n        l1 = ListNode(2, ListNode(4, ListNode(3)))\\n        l2 = ListNode(5, ListNode(6))\\n        result = add_two_numbers(l1, l2)\\n        assert result.value == 7\\n        assert result.next.value == 0\\n        assert result.next.next.value == 4\\n        assert result.next.next.next is None\\n\\n    def test_add_two_numbers_unequal_length_with_carry(self):\\n        l1 = ListNode(9, ListNode(9, ListNode(9)))\\n        l2 = ListNode(1, ListNode(1))\\n        result = add_two_numbers(l1, l2)\\n        assert result.value == 0\\n        assert result.next.value == 1\\n        assert result.next.next.value == 0\\n        assert result.next.next.next.value == 1\\n        assert result.next.next.next.next is None\\n\\n    def test_add_two_numbers_result_has_extra_digit(self):\\n        l1 = ListNode(1)\\n        l2 = ListNode(9, ListNode(9, ListNode(9)))\\n        result = add_two_numbers(l1, l2)\\n        assert result.value == 0\\n        assert result.next.value == 0\\n        assert result.next.next.value == 0\\n        assert result.next.next.next.value == 1\\n        assert result.next.next.next.next is None\\n\\n    def test_add_two_numbers_one_empty_(self):\\n        l1 = ListNode(1, ListNode(2, ListNode(3)))\\n        l2 = None\\n        result = add_two_numbers(l1, l2)\\n\\n        # Traverse both linked lists and compare values\\n        while l1 is not None and result is not None:\\n            assert l1.value == result.value\\n            l1 = l1.next\\n            result = result.next\\n\\n        # Make sure both linked lists reached the end\\n        assert l1 is None and result is None\\n\\n\"}", "__internal_uuid__": "9433980b-39d3-42b0-b9b6-e48ba3ac3ea7"}
{"canonical_solution": "```python\nfrom typing import List\nimport xml.etree.ElementTree as ET\n\ndef parse_xml(file_path: str, tag_name: str) -> List[str]:\n\n    try:\n        root = ET.parse(file_path).getroot()\n    except ET.ParseError:\n        return []\n    data_list = []\n    for element in root.findall(tag_name):\n        data_list.append(element.text)\n    return data_list\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nImplement a Python program that parses a given XML file and extracts data from specific tags, returning a list containing all the data. In this task, we need to write a Python program that can parse a given XML file and extract data from specified tags. XML is a commonly used markup language for storing and transmitting data. The parse_xml function accepts two parameters: file_path represents the path of the XML file, and tag_name represents the name of the XML tag to be extracted.\n\nInside the function, first try to parse the XML file and get the root node using ET.parse(file_path). If the parsing fails (possibly due to file format errors), catch the ET.ParseError exception and return an empty list.\n\nIf the parsing is successful, initialize an empty list data_list to store the extracted text content.\n\nUse root.findall(tag_name) to traverse all child elements with the specified tag name under the root node.\n\nFor each qualifying child element, add its text content (element.text) to data_list.\n\nFinally, return the list data_list containing the extracted text.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass TestXmlParser:\n    def teardown_method(self, method):\n        os.remove(self.xml_file)\n\n", "id": 4, "labels": "{\"execution_language\":\"python\", \"original_id\":135, \"original_promblem\":\"Implement a Python program that parses a given XML file and extracts data from specific tags, returning a list containing all the data. In this task, we need to write a Python program that can parse a given XML file and extract data from specified tags. XML is a commonly used markup language for storing and transmitting data. The parse_xml function accepts two parameters: file_path represents the path of the XML file, and tag_name represents the name of the XML tag to be extracted.\\n\\nInside the function, first try to parse the XML file and get the root node using ET.parse(file_path). If the parsing fails (possibly due to file format errors), catch the ET.ParseError exception and return an empty list.\\n\\nIf the parsing is successful, initialize an empty list data_list to store the extracted text content.\\n\\nUse root.findall(tag_name) to traverse all child elements with the specified tag name under the root node.\\n\\nFor each qualifying child element, add its text content (element.text) to data_list.\\n\\nFinally, return the list data_list containing the extracted text.\", \"programming_language\":\"python\", \"tags\":\"Front-End\"}", "test": "{\"asset\":null, \"code\":\"\\n\\nclass TestXmlParser:\\n    def test_parse_xml(self):\\n        expected_result = ['John', 'Jane']\\n        assert parse_xml(self.xml_file, 'name') == expected_result\\n\\n    def test_parse_xml_nonexistent_tag(self):\\n        expected_result = []\\n        assert parse_xml(self.xml_file, 'nonexistent_tag') == expected_result\\n\\n    def test_parse_xml_missing_root_element(self):\\n        with open(self.xml_file, 'w') as f:\\n            f.write('<name>John</name>\\\\n')\\n            f.write('<age>25</age>\\\\n')\\n        expected_result = []\\n        assert parse_xml(self.xml_file, 'name') == expected_result\\n\\n    def test_parse_xml_no_tag_name(self):\\n        expected_result = []\\n        assert parse_xml(self.xml_file, '') == expected_result\\n\\n    def test_parse_xml_invalid_file_format(self):\\n        with open(self.xml_file, 'w') as f:\\n            f.write('This is not an XML file.')\\n        expected_result = []\\n        assert parse_xml(self.xml_file, 'name') == expected_result\\n\\n    def test_parse_xml_multiple_tags(self):\\n        expected_result = ['25', '30']\\n        assert parse_xml(self.xml_file, 'age') == expected_result\\n\\n    def test_parse_xml_duplicate_tags(self):\\n        with open(self.xml_file, 'w') as f:\\n            f.write('<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\\\n')\\n            f.write('<root>\\\\n')\\n            f.write('  <name>John</name>\\\\n')\\n            f.write('  <name>Jane</name>\\\\n')\\n            f.write('</root>')\\n        expected_result = ['John', 'Jane']\\n        assert parse_xml(self.xml_file, 'name') == expected_result\\n\\n    def setup_method(self, method):\\n        self.xml_file = 'test.xml'\\n        with open(self.xml_file, 'w') as f:\\n            f.write('<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\\\n')\\n            f.write('<root>\\\\n')\\n            f.write('  <name>John</name>\\\\n')\\n            f.write('  <age>25</age>\\\\n')\\n            f.write('  <name>Jane</name>\\\\n')\\n            f.write('  <age>30</age>\\\\n')\\n            f.write('</root>')\"}", "__internal_uuid__": "f117b26d-3019-4b20-9884-4d44893565e8"}
{"canonical_solution": "```python\nimport re\n\n\ndef is_valid_variable_name(name):\n    \"\"\"\n    判断字符串是否是有效的 JavaScript 变量名\n    \"\"\"\n    if len(name) > 255:\n        return False\n    if not re.match(r'^[a-zA-Z_$][a-zA-Z0-9_$]*$', name):\n        return False\n    return True\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program to determine if a string is a valid JavaScript variable name\n\nWrite a Python function that accepts a string as input and determines whether the string is a valid JavaScript variable name. If it is a valid variable name, return True, otherwise return False.\n\nA valid JavaScript variable name meets the following conditions:\n\nThe variable name can only contain letters, numbers, underscores, and dollar signs ($).\nThe first character of the variable name must be a letter, underscore, or dollar sign.\nThe length of the variable name cannot exceed 255 characters.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testis_valid_variable_name:\n    def test_is_valid_variable_name(self):\n        assert is_valid_variable_name('foo') == True\n\n", "id": 5, "labels": "{\"execution_language\":\"python\", \"original_id\":136, \"original_promblem\":\"Write a program to determine if a string is a valid JavaScript variable name\\n\\nWrite a Python function that accepts a string as input and determines whether the string is a valid JavaScript variable name. If it is a valid variable name, return True, otherwise return False.\\n\\nA valid JavaScript variable name meets the following conditions:\\n\\nThe variable name can only contain letters, numbers, underscores, and dollar signs ($).\\nThe first character of the variable name must be a letter, underscore, or dollar sign.\\nThe length of the variable name cannot exceed 255 characters.\", \"programming_language\":\"python\", \"tags\":\"Front-End\"}", "test": "{\"asset\":null, \"code\":\"import re\\n\\n\\nclass Testis_valid_variable_name:\\n    def test_is_valid_variable_name1(self):\\n        assert is_valid_variable_name('_bar') == True\\n\\n    def test_is_valid_variable_name2(self):\\n        assert is_valid_variable_name('$baz') == True\\n\\n    def test_is_valid_variable_name3(self):\\n        assert is_valid_variable_name('12abc') == False\\n\\n    def test_is_valid_variable_name4(self):\\n        assert is_valid_variable_name('abc12') == True\\n\\n    def test_is_valid_variable_name5(self):\\n        assert is_valid_variable_name('a' * 256) == False\\n\\n    def test_is_valid_variable_name6(self):\\n        assert is_valid_variable_name(' ') == False\\n\\n    def test_is_valid_variable_name7(self):\\n        assert is_valid_variable_name('foo bar') == False\\n\\n\"}", "__internal_uuid__": "f1d1bf0d-3de7-48ba-84b1-35337c9ad757"}
{"canonical_solution": "```python\nclass Order:\n    def __init__(self, order_id):\n        self.order_id = order_id\n        self.items = []\n        self.total_price = 0.0\n        self.status = \"未支付\"\n\n    def add_item(self, item_name, item_price):\n        if not isinstance(item_price, (int, float)) or item_price <= 0:\n            return \"商品价格必须是正数\"\n\n        item = {\"name\": item_name, \"price\": item_price}\n        self.items.append(item)\n\n    def remove_item(self, item_name):\n        for item in self.items:\n            if item[\"name\"] == item_name:\n                self.items.remove(item)\n                break\n        else:\n            return \"该商品不存在于订单中\"\n\n    def calculate_total_price(self):\n        self.total_price = sum(item[\"price\"] for item in self.items)\n\n    def pay_order(self):\n        if not self.items:\n            return \"订单中没有商品\"\n        self.status = \"已支付\"\n\n    def cancel_order(self):\n        self.status = \"已取消\"\n\n    def view_order(self):\n        print(\"订单编号：\", self.order_id)\n        print(\"商品列表：\")\n        for item in self.items:\n            print(\"- {}: ￥{}\".format(item[\"name\"], item[\"price\"]))\n        print(\"总价格：￥{}\".format(self.total_price))\n        print(\"状态：\", self.status)\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nImplement a simple e-commerce order system.\n\nRequirements:\n\nImplement an Order class with the following attributes:\norder_id: The order number, which is a string.\nitems: The list of products in the order, each product is a dictionary containing the product name and price.\ntotal_price: The total price of the order, which is a floating point number.\nstatus: The status of the order, which is a string, the initial status is \"unpaid\".\nImplement the following methods:\nadd_item(item_name, item_price): Add a product to the order, the parameters are the product name and price.\nremove_item(item_name): Remove the specified product from the order, the parameter is the product name.\ncalculate_total_price(): Calculate the total price of the order and update the total_price attribute.\npay_order(): Pay for the order, update the order status to \"paid\".\ncancel_order(): Cancel the order, update the order status to \"cancelled\".\nview_order(): Output the detailed information of the order, including the order number, product list, total price and status, follow the following format:\nOrder number: 20231218\nProduct list:\n- Product 1: ¥10.5\n- Product 2: ¥20.3\nTotal price: ¥30.8\nStatus: Unpaid\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass TestOrder:\n    def test_add_item(self):\n        order = Order(\"20231218\")\n        order.add_item(\"商品1\", 10.5)\n        assert len(order.items) == 1\n        assert order.items[0][\"name\"] == \"商品1\"\n        assert order.items[0][\"price\"] == 10.5\n\n", "id": 6, "labels": "{\"execution_language\":\"python\", \"original_id\":137, \"original_promblem\":\"Implement a simple e-commerce order system.\\n\\nRequirements:\\n\\nImplement an Order class with the following attributes:\\norder_id: The order number, which is a string.\\nitems: The list of products in the order, each product is a dictionary containing the product name and price.\\ntotal_price: The total price of the order, which is a floating point number.\\nstatus: The status of the order, which is a string, the initial status is \\\"unpaid\\\".\\nImplement the following methods:\\nadd_item(item_name, item_price): Add a product to the order, the parameters are the product name and price.\\nremove_item(item_name): Remove the specified product from the order, the parameter is the product name.\\ncalculate_total_price(): Calculate the total price of the order and update the total_price attribute.\\npay_order(): Pay for the order, update the order status to \\\"paid\\\".\\ncancel_order(): Cancel the order, update the order status to \\\"cancelled\\\".\\nview_order(): Output the detailed information of the order, including the order number, product list, total price and status, follow the following format:\\nOrder number: 20231218\\nProduct list:\\n- Product 1: ¥10.5\\n- Product 2: ¥20.3\\nTotal price: ¥30.8\\nStatus: Unpaid\", \"programming_language\":\"python\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"\\n\\nclass TestOrder:\\n    def test_remove_item(self):\\n        order = Order(\\\"20231218\\\")\\n        order.add_item(\\\"商品1\\\", 10.5)\\n        order.remove_item(\\\"商品1\\\")\\n        assert len(order.items) == 0\\n\\n    def test_calculate_total_price(self):\\n        order = Order(\\\"20231218\\\")\\n        order.add_item(\\\"商品1\\\", 10.5)\\n        order.add_item(\\\"商品2\\\", 20.3)\\n        order.calculate_total_price()\\n        assert order.total_price == 30.8\\n\\n    def test_remove_item_(self):\\n        order = Order(\\\"20231218\\\")\\n        order.add_item(\\\"商品1\\\", 10.5)\\n        order.remove_item(\\\"商品1\\\")\\n        assert len(order.items) == 0\\n\\n    def test_pay_order(self):\\n        order = Order(\\\"20231218\\\")\\n        order.pay_order()\\n        assert order.status == \\\"未支付\\\"\\n\\n    def test_pay_order_(self):\\n        order = Order(\\\"20231210\\\")\\n        assert order.status == \\\"未支付\\\"\\n\\n    def test_cancel_order(self):\\n        order = Order(\\\"20231218\\\")\\n        order.cancel_order()\\n        assert order.status == \\\"已取消\\\"\\n\\n    def test_view_order(self, capsys):\\n        order = Order(\\\"20231218\\\")\\n        order.add_item(\\\"商品1\\\", 10.5)\\n        order.add_item(\\\"商品2\\\", 20.3)\\n        order.calculate_total_price()\\n        order.view_order()\\n        captured = capsys.readouterr()\\n        expected_output = (\\n            \\\"订单编号： 20231218\\\\n\\\"\\n            \\\"商品列表：\\\\n\\\"\\n            \\\"- 商品1: ￥10.5\\\\n\\\"\\n            \\\"- 商品2: ￥20.3\\\\n\\\"\\n            \\\"总价格：￥30.8\\\\n\\\"\\n            \\\"状态： 未支付\\\\n\\\"\\n        )\\n        assert captured.out == expected_output\\n\"}", "__internal_uuid__": "1b757d10-a310-4247-8042-90286e6dffdd"}
{"canonical_solution": "```python\ndef is_valid_sequence(s):\n    # 判断字符串长度是否在 2 到 10 之间\n    if len(s) < 2 or len(s) > 10:\n        return False\n\n        # 判断字符串中的字符是否都是小写字母\n    for char in s:\n        if not char.islower():\n            return False\n\n            # 判断字符串中是否出现连续的重复字符\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n\n            # 判断左右两部分是否都是回文字符串或递增序列\n    left, right = s[:len(s) // 2], s[len(s) // 2:]\n    if left == right[::-1] or sorted(left) == sorted(right):\n        return True\n    else:\n        return False\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, the content of the program is to give a string s that only contains lowercase letters, please write a function is_valid_sequence(s), to determine whether the string meets the following conditions:\nThe length of the string s is between 2 and 10 (including 2 and 10).\nEach character in the string s must be a lowercase letter.\nThere can be no consecutive repeated characters in the string s, that is, adjacent characters cannot be the same.\nIf the string s is divided into left and right parts, the left and right parts must meet one of the following conditions:\nBoth the left and right parts are palindrome strings.\nBoth the left and right parts are increasing sequences (that is, the ASCII value of each character is greater than the previous character). The is_valid_sequence function accepts a string s as a parameter.\n\nFirst, check whether the length of the string is between 2 and 10, if it is not in this range, return False.\n\nThen, check whether all the characters in the string are lowercase letters, if there are characters that are not lowercase letters, return False.\n\nNext, check whether there are consecutive repeated characters in the string, if there are, return False.\n\nFinally, determine whether the string can be divided into left and right parts, and these two parts are either palindrome strings or increasing sequences. If this condition is met, return True; otherwise, return False.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testis_valid_sequence:\n    def test_is_valid_sequence_case1(self):\n        assert is_valid_sequence(\"abba\") == False\n\n", "id": 7, "labels": "{\"execution_language\":\"python\", \"original_id\":138, \"original_promblem\":\"Write a program, the content of the program is to give a string s that only contains lowercase letters, please write a function is_valid_sequence(s), to determine whether the string meets the following conditions:\\nThe length of the string s is between 2 and 10 (including 2 and 10).\\nEach character in the string s must be a lowercase letter.\\nThere can be no consecutive repeated characters in the string s, that is, adjacent characters cannot be the same.\\nIf the string s is divided into left and right parts, the left and right parts must meet one of the following conditions:\\nBoth the left and right parts are palindrome strings.\\nBoth the left and right parts are increasing sequences (that is, the ASCII value of each character is greater than the previous character). The is_valid_sequence function accepts a string s as a parameter.\\n\\nFirst, check whether the length of the string is between 2 and 10, if it is not in this range, return False.\\n\\nThen, check whether all the characters in the string are lowercase letters, if there are characters that are not lowercase letters, return False.\\n\\nNext, check whether there are consecutive repeated characters in the string, if there are, return False.\\n\\nFinally, determine whether the string can be divided into left and right parts, and these two parts are either palindrome strings or increasing sequences. If this condition is met, return True; otherwise, return False.\", \"programming_language\":\"python\", \"tags\":\"Algorithm and Data Structure\"}", "test": "{\"asset\":null, \"code\":\"\\nclass Testis_valid_sequence:\\n    def test_is_valid_sequence_case2(self):\\n        assert is_valid_sequence(\\\"abcd\\\") == False\\n\\n    def test_is_valid_sequence_case3(self):\\n        assert is_valid_sequence(\\\"a\\\") == False\\n\\n    def test_is_valid_sequence_case4(self):\\n        assert is_valid_sequence(\\\"abcdefghij\\\") == False\\n\\n    def test_is_valid_sequence_case5(self):\\n        assert is_valid_sequence(\\\"Abba\\\") == False\\n\\n    def test_is_valid_sequence_case6(self):\\n        assert is_valid_sequence(\\\"abbb\\\") == False\\n\\n    def test_is_valid_sequence_case7(self):\\n        assert is_valid_sequence(\\\"abcde\\\") == False\\n\\n    def test_is_valid_sequence_case8(self):\\n        assert is_valid_sequence(\\\"\\\") == False\"}", "__internal_uuid__": "4e9f570f-50cf-410c-9943-8f11f501581a"}
{"canonical_solution": "```python\nimport math\n\nclass RouteSimulator:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.move_history = []\n\n    def move(self, distance, angle_degrees):\n        # 将角度转换为弧度\n        angle_radians = math.radians(angle_degrees)\n\n        # 计算新的位置\n        new_x = self.x + distance * math.cos(angle_radians)\n        new_y = self.y + distance * math.sin(angle_radians)\n\n        # 更新位置\n        self.x, self.y = new_x, new_y\n\n        # 记录移动历史\n        self.move_history.append({'distance': distance, 'angle_degrees': angle_degrees, 'position': (new_x, new_y)})\n\n    def calculate_distance(self, x1, y1, x2, y2):\n        # 计算两点之间的距离\n        return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n    def print_current_position(self):\n        print(f\"当前位置：({self.x:.2f}, {self.y:.2f})\")\n\n    def print_move_history(self):\n        print(\"移动历史：\")\n        for move in self.move_history:\n            distance = move['distance']\n            angle_degrees = move['angle_degrees']\n            position = move['position']\n            print(f\"距离: {distance:.2f}, 角度: {angle_degrees:.2f}, 位置: ({position[0]:.2f}, {position[1]:.2f})\")\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, define a class named RouteSimulator, which is used to simulate the path of movement on a plane. Here is the Chinese description of the code:\n\nInitialization method (__init__):\n\nDuring the initialization process, the x and y coordinates of the starting position are set, and a move history list move_history is initialized to record the distance, angle, and new position of each move.\nMove method (move):\n\nAccepts two parameters: distance represents the distance of movement, angle_degrees represents the direction angle of movement.\nConvert the angle to radians and calculate the new position coordinates using trigonometric functions.\nUpdate the current position to the new position, and add the move history record to the list at the same time.\nCalculate distance method (calculate_distance):\n\nAccepts four parameters: the x and y coordinates of two points.\nCalculate the distance between the two points using the Euclidean distance formula.\nPrint current position method (print_current_position):\n\nPrint the x and y coordinates of the current position. The output format is \"Current position: (x, y)\"\nPrint move history method (print_move_history):\n\nPrint the move history, including the distance, angle, and new position of each move. The output number retains two decimal places and the output format is:\nMove history:\nDistance: {distance}, Angle: {angle_degrees}, Position: {position}\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass TestRouteSimulator:\n    def test_initial_position(self, route_simulator, capfd):\n        route_simulator.print_current_position()\n        captured = capfd.readouterr()\n        assert captured.out.strip() == \"当前位置：(0.00, 0.00)\"\n\n", "id": 8, "labels": "{\"execution_language\":\"python\", \"original_id\":139, \"original_promblem\":\"Write a program, define a class named RouteSimulator, which is used to simulate the path of movement on a plane. Here is the Chinese description of the code:\\n\\nInitialization method (__init__):\\n\\nDuring the initialization process, the x and y coordinates of the starting position are set, and a move history list move_history is initialized to record the distance, angle, and new position of each move.\\nMove method (move):\\n\\nAccepts two parameters: distance represents the distance of movement, angle_degrees represents the direction angle of movement.\\nConvert the angle to radians and calculate the new position coordinates using trigonometric functions.\\nUpdate the current position to the new position, and add the move history record to the list at the same time.\\nCalculate distance method (calculate_distance):\\n\\nAccepts four parameters: the x and y coordinates of two points.\\nCalculate the distance between the two points using the Euclidean distance formula.\\nPrint current position method (print_current_position):\\n\\nPrint the x and y coordinates of the current position. The output format is \\\"Current position: (x, y)\\\"\\nPrint move history method (print_move_history):\\n\\nPrint the move history, including the distance, angle, and new position of each move. The output number retains two decimal places and the output format is:\\nMove history:\\nDistance: {distance}, Angle: {angle_degrees}, Position: {position}\", \"programming_language\":\"python\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import math\\n\\nclass TestRouteSimulator:\\n    def test_move_forward(self, route_simulator, capfd):\\n        route_simulator.move(distance=1, angle_degrees=0)\\n        route_simulator.print_current_position()\\n        captured = capfd.readouterr()\\n        assert captured.out.strip() == \\\"当前位置：(1.00, 0.00)\\\"\\n\\n    def test_move_backward(self, route_simulator, capfd):\\n        route_simulator.move(distance=1, angle_degrees=180)\\n        route_simulator.print_current_position()\\n        captured = capfd.readouterr()\\n        assert captured.out.strip() == \\\"当前位置：(-1.00, 0.00)\\\"\\n\\n    def test_move_diagonal(self, route_simulator, capfd):\\n        route_simulator.move(distance=1, angle_degrees=45)\\n        route_simulator.print_current_position()\\n        captured = capfd.readouterr()\\n        assert captured.out.strip() == f\\\"当前位置：({math.sqrt(0.5):.2f}, {math.sqrt(0.5):.2f})\\\"\\n\\n    def test_move_right(self, route_simulator, capfd):\\n        route_simulator.move(distance=1, angle_degrees=90)\\n        route_simulator.print_current_position()\\n        captured = capfd.readouterr()\\n        assert captured.out.strip() == \\\"当前位置：(0.00, 1.00)\\\"\\n\\n    def test_calculate_distance(self, route_simulator):\\n        distance = route_simulator.calculate_distance(0, 0, 3, 4)\\n        assert distance == 5.0\\n\\n    def test_move_history_empty(self, route_simulator, capfd):\\n        route_simulator.print_move_history()\\n        captured = capfd.readouterr()\\n        assert captured.out.strip() == \\\"移动历史：\\\"\\n\\n    def test_move_history_non_empty(self, route_simulator, capfd):\\n        route_simulator.move(distance=1, angle_degrees=30)\\n        route_simulator.print_move_history()\\n        captured = capfd.readouterr()\\n        assert \\\"距离: 1.00, 角度: 30.00, 位置: (0.87, 0.50)\\\" in captured.out\\n\\n    @pytest.fixture\\n    def route_simulator(self):\\n        return RouteSimulator(x=0, y=0)\\n\\n\"}", "__internal_uuid__": "23753eb9-b371-41cd-acdc-f58dc3c473ea"}
{"canonical_solution": "```python\ndef utf8_to_ascii(utf8_string):\n    # 验证输入字符串是否为空\n    if not utf8_string:\n        print(\"输入字符串不能为空！\")\n        return None\n\n    result = []\n\n    try:\n        # 遍历输入字符串的每个字符\n        for i in range(len(utf8_string)):\n            if utf8_string[i] == '%' and i + 2 < len(utf8_string) and utf8_string[i + 1:i + 3].isalnum():\n                # 如果遇到以%开头的16进制字符编码，则进行解析\n                hex_str = utf8_string[i + 1:i + 3]\n                ascii_code = int(hex_str, 16)\n                result.append(ascii_code)\n                i += 2\n            else:\n                # 普通的UTF-8字符直接转换为ASCII码\n                ascii_code = ord(utf8_string[i])\n                result.append(ascii_code)\n    except IndexError:\n        print(\"输入字符串格式错误！\")\n        return None\n    except ValueError:\n        print(\"输入字符串包含非法的字符编码！\")\n        return None\n    except Exception as e:\n        print(\"发生未知错误：\", str(e))\n        return None\n\n    return result\n\n\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that implements the function of converting a string from UTF-8 encoding to ASCII encoding. The requirements are as follows:\n\nInput a string (UTF-8 encoding).\nThe program will read the input string character by character and convert each character into the corresponding ASCII code.\nPrint out the converted ASCII codes one by one.\nYou can use an appropriate programming language to implement this function. Please note that multi-byte characters in UTF-8 encoding need to be specially handled to ensure correct conversion to the corresponding ASCII code. After calling the utf8_to_ascii function, an ASCII code list will be output, each element of which corresponds to the ASCII code of a character in the input string.\n\nFor example, if the input string is \"Hello World!\", after calling the utf8_to_ascii function, the following ASCII code list will be output:\n\n[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]\nWhere the first element 72 corresponds to the ASCII code of the character H, the second element 101 corresponds to the ASCII code of the character e, and so on.\n\nThese ASCII codes can be further used for other operations, such as encryption, conversion, etc.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testutf8_to_ascii:\n    def test_hello_world(self):\n        assert utf8_to_ascii(\"Hello, World!\") == [72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33]\n\n", "id": 9, "labels": "{\"execution_language\":\"python\", \"original_id\":140, \"original_promblem\":\"Write a program that implements the function of converting a string from UTF-8 encoding to ASCII encoding. The requirements are as follows:\\n\\nInput a string (UTF-8 encoding).\\nThe program will read the input string character by character and convert each character into the corresponding ASCII code.\\nPrint out the converted ASCII codes one by one.\\nYou can use an appropriate programming language to implement this function. Please note that multi-byte characters in UTF-8 encoding need to be specially handled to ensure correct conversion to the corresponding ASCII code. After calling the utf8_to_ascii function, an ASCII code list will be output, each element of which corresponds to the ASCII code of a character in the input string.\\n\\nFor example, if the input string is \\\"Hello World!\\\", after calling the utf8_to_ascii function, the following ASCII code list will be output:\\n\\n[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]\\nWhere the first element 72 corresponds to the ASCII code of the character H, the second element 101 corresponds to the ASCII code of the character e, and so on.\\n\\nThese ASCII codes can be further used for other operations, such as encryption, conversion, etc.\", \"programming_language\":\"python\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"\\n\\nclass Testutf8_to_ascii:\\n    def test_empty_string(self):\\n        assert utf8_to_ascii(\\\"\\\") == None\\n\\n    def test_invalid_hex_code(self):\\n        assert utf8_to_ascii(\\\"Hello%20Wo%zz\\\") == None\\n\\n    def test_single_character(self):\\n        assert utf8_to_ascii(\\\"A\\\") == [65]\\n\\n    def test_special_characters(self):\\n        assert utf8_to_ascii(\\\"!@#$%^&*()_+-=\\\") == [33, 64, 35, 36, 37, 94, 38, 42, 40, 41, 95, 43, 45, 61]\\n\\n    def test_unicode_characters(self):\\n        assert utf8_to_ascii(\\\"\\\\u2018\\\\u2019\\\\u201c\\\\u201d\\\") == [8216, 8217, 8220, 8221]\\n\\n    def test_long_string(self):\\n        assert utf8_to_ascii(\\\"a\\\" * 1000) == [97] * 1000\\n\\n    def test_invalid_input_type(self):\\n        assert utf8_to_ascii(123) == None\\n\\n    def test_invalid_input_encoding(self):\\n        assert utf8_to_ascii(b\\\"Hello%20World%21\\\") == None\\n\"}", "__internal_uuid__": "2334b46e-4fa2-4320-943b-140510f86138"}
{"canonical_solution": "```python\nimport re\nimport datetime\n\n\ndef find_dates(text):\n    if not text:\n        return \"输入的文本为空，请提供有效的文本内容\"\n\n    date_patterns = [\n        r\"\\b(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b\",  # YYYY-MM-DD\n        r\"\\b(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/(19|20)?\\d{2}\\b\",  # MM/DD/YYYY or M/D/YYYY\n        r\"\\b(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(19|20)?\\d{2}\\b\",  # DD-MM-YYYY or D-M-YYYY\n        r\"\\b(0[1-9]|[12][0-9]|3[01])\\s(January|February|March|April|May|June|July|August|September|October|November|December),?\\s(19|20)?\\d{2}\\b\"\n        # DD Month YYYY or D Month YYYY\n    ]\n    dates = []\n    for pattern in date_patterns:\n        dates.extend(re.findall(pattern, text))\n\n    formatted_dates = []\n    for date in dates:\n        if date[0]:  # 如果匹配到了年份\n            year = date[0]\n        else:\n            year = \"20\" + date[3] if date[3] else \"\"  # 如果没有匹配到年份，则根据模式中的分组确定年份\n\n        month = date[1].zfill(2)\n        day = date[2].zfill(2)\n\n        # 检查日期的有效性\n        try:\n            formatted_date = f\"{year}-{month}-{day}\"\n            _ = datetime.datetime.strptime(formatted_date, \"%Y-%m-%d\")\n            formatted_dates.append(formatted_date)\n        except ValueError:\n            pass\n\n    if not formatted_dates:\n        return \"未找到有效日期\"\n\n    return formatted_dates\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that implements a Python function find_dates(text), which accepts a string text as a parameter and returns all dates that appear in the string. The dates should be in the standard year-month-day (YYYY-MM-DD) format.\n\nRequirements:\n\nThe date must be in the standard year-month-day (YYYY-MM-DD) format.\n\nThe year in the date must be a four-digit number, and the month and day must be two-digit numbers.\n\nThe function should not use external resources such as web scraping or user input.\n\nThe function must use regular expressions to identify dates.\n\nThe function must return all dates that meet the requirements. If there are no dates that meet the requirements, it should return an empty list.\n\nExample:\n\npython\ntext = \"The event will take place on 2022-01-25 and the deadline is 2022-02-15.\"\nprint(find_dates(text))\n# output: ['2022-01-25', '2022-02-15']\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testfind_dates:\n    def test_case_1(self):\n        text = \"The event will take place on 2022-01-25 and the deadline is 2022-02-15.\"\n        expected_dates = [\"2022-01-25\", \"2022-02-15\"]\n        assert find_dates(text) == expected_dates\n\n", "id": 10, "labels": "{\"execution_language\":\"python\", \"original_id\":141, \"original_promblem\":\"Write a program that implements a Python function find_dates(text), which accepts a string text as a parameter and returns all dates that appear in the string. The dates should be in the standard year-month-day (YYYY-MM-DD) format.\\n\\nRequirements:\\n\\nThe date must be in the standard year-month-day (YYYY-MM-DD) format.\\n\\nThe year in the date must be a four-digit number, and the month and day must be two-digit numbers.\\n\\nThe function should not use external resources such as web scraping or user input.\\n\\nThe function must use regular expressions to identify dates.\\n\\nThe function must return all dates that meet the requirements. If there are no dates that meet the requirements, it should return an empty list.\\n\\nExample:\\n\\npython\\ntext = \\\"The event will take place on 2022-01-25 and the deadline is 2022-02-15.\\\"\\nprint(find_dates(text))\\n# output: ['2022-01-25', '2022-02-15']\", \"programming_language\":\"python\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import re\\nimport datetime\\n\\n\\nclass Testfind_dates:\\n    def test_case_2(self):\\n        text = \\\"Another possible date format is 2022-02-15.\\\"\\n        expected_dates = ['2022-02-15']\\n        assert find_dates(text) == expected_dates\\n\\n    def test_case_3(self):\\n        text = \\\"And the third format is 01*01-*024.\\\"\\n        expected_dates = \\\"未找到有效日期\\\"\\n        assert find_dates(text) == expected_dates\\n\\n    def test_case_4(self):\\n        text = \\\"Lastly, we have a date like 1 January 2025.\\\"\\n        expected_dates = '未找到有效日期'\\n        assert find_dates(text) == expected_dates\\n\\n    def test_case_5(self):\\n        text = \\\"Invalid date formats: 2022-13-01, 31/12/2023, 01-01-2024\\\"\\n        expected_dates = \\\"未找到有效日期\\\"\\n        assert find_dates(text) == expected_dates\\n\\n    def test_case_6(self):\\n        text = \\\"No dates in this text.\\\"\\n        expected_dates = \\\"未找到有效日期\\\"\\n        assert find_dates(text) == expected_dates\\n\\n    def test_case_7(self):\\n        text = \\\"The event happened on 2020-12-25 and it was a great success.\\\"\\n        expected_dates = [\\\"2020-12-25\\\"]\\n        assert find_dates(text) == expected_dates\\n\\n    def test_case_8(self):\\n        text = \\\"The due date for submission is 2022-06-30.\\\"\\n        expected_dates = [\\\"2022-06-30\\\"]\\n        assert find_dates(text) == expected_dates\\n\\n\\n\"}", "__internal_uuid__": "592d8a99-7e3a-4e55-9406-191eb4e63e17"}
{"canonical_solution": "```python\nclass Process:\n    def __init__(self, pid, code):\n        self.pid = pid\n        self.code = code\n        self.memory = None\n\ndef allocate_memory(memory_map, process):\n    if process.memory is not None:\n        raise ValueError(\"Process already has memory\")\n\n    for i in range(len(memory_map)):\n        if memory_map[i] == 0:\n            process.memory = i\n            for j in range(len(process.code)):\n                memory_map[i + j] = 1\n            return True\n\n    return False\n\ndef deallocate_memory(memory_map, process):\n    if process.memory is not None:\n        for i in range(len(process.code)):\n            memory_map[process.memory + i] = 0\n        process.memory = None\n\ndef run_processes(processes):\n    for process in processes:\n        print(f\"Running Process {process.pid} with code: {process.code}\")\n\n# 创建一个简单的操作系统\nmemory_map = [0] * 100\nprocesses = []\n\n# 创建两个进程\nprocess1 = Process(pid=1, code=[1, 2, 3])\nprocess2 = Process(pid=2, code=[4, 5, 6])\n\n# 将进程添加到列表\nprocesses.append(process1)\nprocesses.append(process2)\n\n# 分配内存\nallocate_memory(memory_map, process1)\nallocate_memory(memory_map, process2)\n\n# 运行进程\nrun_processes(processes)\n\n# 释放内存\ndeallocate_memory(memory_map, process1)\ndeallocate_memory(memory_map, process2)\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that simulates the memory management of an operating system in Python code. A Process class is defined in the code, representing a process, each process has a unique process identifier (pid) and a piece of code (code). The operating system maintains a memory map, memory_map, to track the allocation of memory. In the example, two processes are created and added to the processes list. Then, by calling the allocate_memory function, memory is allocated for each process. Finally, by calling the run_processes function, all processes are simulated to run, and the memory occupied by the processes is released by calling the deallocate_memory function.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass TestProcess:\n    def test_successful_memory_allocation(self):\n        memory_map = [0] * 100\n        process = Process(pid=1, code=[1, 2, 3])\n\n        assert allocate_memory(memory_map, process) == True\n        assert process.memory is not None\n\n\n", "id": 11, "labels": "{\"execution_language\":\"python\", \"original_id\":142, \"original_promblem\":\"Write a program that simulates the memory management of an operating system in Python code. A Process class is defined in the code, representing a process, each process has a unique process identifier (pid) and a piece of code (code). The operating system maintains a memory map, memory_map, to track the allocation of memory. In the example, two processes are created and added to the processes list. Then, by calling the allocate_memory function, memory is allocated for each process. Finally, by calling the run_processes function, all processes are simulated to run, and the memory occupied by the processes is released by calling the deallocate_memory function.\", \"programming_language\":\"python\", \"tags\":\"Operation System\"}", "test": "{\"asset\":null, \"code\":\"\\n\\nclass TestProcess:\\n    def test_successful_allocation_multiple_processes(self):\\n        memory_map = [0] * 100\\n        process1 = Process(pid=1, code=[1, 2, 3])\\n        process2 = Process(pid=2, code=[4, 5, 6])\\n\\n        assert allocate_memory(memory_map, process1) == True\\n        assert allocate_memory(memory_map, process2) == True\\n        assert process1.memory is not None\\n        assert process2.memory is not None\\n\\n\\n    def test_failed_memory_allocation(self):\\n        memory_map = [1] * 100  # Memory is already full\\n        process = Process(pid=1, code=[1, 2, 3])\\n\\n        assert allocate_memory(memory_map, process) == False\\n        assert process.memory is None\\n\\n\\n    def test_memory_deallocation(self):\\n        memory_map = [0] * 100\\n        process = Process(pid=1, code=[1, 2, 3])\\n\\n        allocate_memory(memory_map, process)\\n        deallocate_memory(memory_map, process)\\n\\n        assert process.memory is None\\n\\n\\n    def test_run_processes(self):\\n        processes = [\\n            Process(pid=1, code=[1, 2, 3]),\\n            Process(pid=2, code=[4, 5, 6])\\n        ]\\n\\n        run_processes(processes)\\n        # Manual inspection of output\\n\\n\\n    def test_deallocate_unallocated_memory(self):\\n        memory_map = [0] * 100\\n        process = Process(pid=1, code=[1, 2, 3])\\n\\n        deallocate_memory(memory_map, process)\\n\\n        assert process.memory is None\\n\\n\\n    def test_run_empty_processes(self):\\n        empty_processes = []\\n        run_processes(empty_processes)\\n        # Manual inspection of output\\n\\n\\n    def test_allocate_full_memory(self):\\n        full_memory_map = [0] * 100\\n        full_process = Process(pid=1, code=[1] * 100)\\n\\n        assert allocate_memory(full_memory_map, full_process) == True\\n        assert full_process.memory is not None\\n\\n\\n    def test_continuous_allocation_deallocation(self):\\n        continuous_memory_map = [0] * 100\\n        continuous_process = Process(pid=1, code=[1, 2, 3])\\n\\n        assert allocate_memory(continuous_memory_map, continuous_process) == True\\n        assert continuous_process.memory is not None\\n\\n        deallocate_memory(continuous_memory_map, continuous_process)\\n\\n        assert continuous_process.memory is None\\n\"}", "__internal_uuid__": "1e762ea8-a966-4f8e-a407-aa7e768dc9d6"}
{"canonical_solution": "```python\nimport re\nfrom collections import Counter\nfrom bs4 import BeautifulSoup\n\n\ndef get_top_k_words_from_html(html, k):\n    # 定义需要排除的单词列表\n    exclude_list = ['this','is','are','a', 'an', 'the', 'and', 'or', 'in', 'on', 'at', 'to', 'of', 'for', 'with', 'by', 'from']\n\n    try:\n        # 解析HTML文本\n        soup = BeautifulSoup(html, 'lxml')\n\n        # 获取所有文本内容\n        text = soup.get_text()\n\n        # 将文本转换为小写，并使用正则表达式提取单词\n\n        lower=text.lower()\n        words = re.findall(r'\\b(?<!-)(?!' + '|'.join(exclude_list) + r')\\w+(?<!-)\\b', lower, flags=re.UNICODE)\n\n        # 使用Counter统计单词出现次数\n        word_counts = Counter(words)\n\n        # 获取出现次数最多的前k个单词及其出现次数\n        top_k_words = word_counts.most_common(k)\n\n        return top_k_words\n\n    except Exception as e:\n        print(\"Error occurred:\", str(e))\n        return None\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program to implement the following problem description:\nGiven an HTML text containing multiple English sentences, write a function get_top_k_words_from_html(html, k) that returns the top k words with the highest frequency of occurrence.\n\nWrite a function get_top_k_words_from_html(html, k), where the parameter html is a string containing HTML tags, and k is a positive integer. The function should return a list containing the top k words with the highest frequency of occurrence and their frequencies, sorted in descending order of frequency.\n\nExamples:\nInput: \"<p>We are the world, we are the children.</p> <p>We are the ones who make a brighter day.</p> <p>So let's start giving.</p>\"\nOutput: [('we', 3), ('are', 3), ('the', 3)]\n\nInput: \"<p>The quick brown fox jumps over the lazy dog.</p> <p>The quick brown fox jumps over the lazy dog.</p>\"\nOutput: [('the', 4), ('brown', 2), ('quick', 2)]\n\nNote:\n\nWords are case-insensitive, i.e., \"The\" and \"the\" are considered the same word.\nA word is defined as a string composed of letters and numbers, excluding punctuation.\nThe returned list should include all the top k words with the same frequency of occurrence and their frequencies.\nYou can use libraries to parse HTML text and use standard library functions or modules to assist in solving the problem.\nPlease implement the function get_top_k_words_from_html(html, k) to solve this problem.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testget_top_k_words_from_html:\n    def test_empty_html(self):\n        html = \"<html><body></body></html>\"\n        assert get_top_k_words_from_html(html, 5) == []\n\n", "id": 12, "labels": "{\"execution_language\":\"python\", \"original_id\":143, \"original_promblem\":\"Write a program to implement the following problem description:\\nGiven an HTML text containing multiple English sentences, write a function get_top_k_words_from_html(html, k) that returns the top k words with the highest frequency of occurrence.\\n\\nWrite a function get_top_k_words_from_html(html, k), where the parameter html is a string containing HTML tags, and k is a positive integer. The function should return a list containing the top k words with the highest frequency of occurrence and their frequencies, sorted in descending order of frequency.\\n\\nExamples:\\nInput: \\\"<p>We are the world, we are the children.</p> <p>We are the ones who make a brighter day.</p> <p>So let's start giving.</p>\\\"\\nOutput: [('we', 3), ('are', 3), ('the', 3)]\\n\\nInput: \\\"<p>The quick brown fox jumps over the lazy dog.</p> <p>The quick brown fox jumps over the lazy dog.</p>\\\"\\nOutput: [('the', 4), ('brown', 2), ('quick', 2)]\\n\\nNote:\\n\\nWords are case-insensitive, i.e., \\\"The\\\" and \\\"the\\\" are considered the same word.\\nA word is defined as a string composed of letters and numbers, excluding punctuation.\\nThe returned list should include all the top k words with the same frequency of occurrence and their frequencies.\\nYou can use libraries to parse HTML text and use standard library functions or modules to assist in solving the problem.\\nPlease implement the function get_top_k_words_from_html(html, k) to solve this problem.\", \"programming_language\":\"python\", \"tags\":\"Front-End\"}", "test": "{\"asset\":null, \"code\":\"import re\\nfrom collections import Counter\\nfrom bs4 import BeautifulSoup\\n\\n\\nclass Testget_top_k_words_from_html:\\n    def test_basic_html(self):\\n        html = \\\"<html><body>This is a simple HTML text. Hello world!</body></html>\\\"\\n        assert get_top_k_words_from_html(html, 3) == [('simple', 1), ('html', 1), ('text', 1)]\\n\\n    def test_html_with_tags(self):\\n        html = \\\"<html><body><h1>Title</h1><p> is a paragraph.</p></body></html>\\\"\\n        assert get_top_k_words_from_html(html, 4) == [('title', 1), ('paragraph', 1)]\\n\\n    def test_html_with_special_characters(self):\\n        html = \\\"<html><body>Encoding: &#1632;&#1633;&#1634;</body></html>\\\"\\n        assert get_top_k_words_from_html(html, 3) == [('encoding', 1), ('٠١٢', 1)]\\n\\n    def test_html_with_unicode_characters(self):\\n        html = \\\"<html><body>Unicode: àéîőű</body></html>\\\"\\n        assert get_top_k_words_from_html(html, 4) == [('unicode', 1), ('àéîőű', 1)]\\n\\n    def test_html_with_duplicate_words(self):\\n        html = \\\"<html><body>Repeated words test. This is a test repeated words.</body></html>\\\"\\n        assert get_top_k_words_from_html(html, 4) == [('repeated', 2), ('words', 2), ('test', 2)]\\n\\n    def test_large_html(self):\\n        # Test with a large HTML content\\n        html = \\\"<html><body>\\\" + \\\"word1 \\\" * 1000 + \\\"</body></html>\\\"\\n        assert get_top_k_words_from_html(html, 1) == [('word1', 1000)]\\n\\n\\n    def test_html_with_numbers(self):\\n        html = \\\"<html><body>Numbers: 123 456 789</body></html>\\\"\\n        assert get_top_k_words_from_html(html, 3) == [('numbers', 1), ('123', 1), ('456', 1)]\\n\\n\\n    def test_html_with_unicode_characters_and_numbers(self):\\n        html = \\\"<html><body>Unicode and numbers: àéîőű 12345</body></html>\\\"\\n        assert get_top_k_words_from_html(html, 4) == [('unicode', 1), ('numbers', 1), ('àéîőű', 1), ('12345', 1)]\\n\\n\\n\\n\"}", "__internal_uuid__": "836e2b4f-3f17-459e-b291-191e56358831"}
{"canonical_solution": "```python\nfrom typing import List, Tuple\n\n\ndef extract_temperatures_from_text(text: str) -> Tuple[List[str], List[float]]:\n    cities = []\n    temperatures = []\n    lines = text.strip().split('\\n')\n    for line in lines:\n        city_temperature = line.split('，')\n        if len(city_temperature) == 2:\n            city, temperature = city_temperature\n            temperature = float(temperature.replace('℃', ''))\n            cities.append(city)\n            temperatures.append(temperature)\n        else:\n            return [], []\n    return cities, temperatures\n\ndef calculate_average_temperature(temperatures: List[float]) -> float:\n    total_temperature = sum(temperatures)\n    average_temperature = total_temperature / len(temperatures)\n    return average_temperature\n\ndef find_highest_temperature(cities: List[str], temperatures: List[float]) -> Tuple[float, str]:\n    if not temperatures:\n        return 0, \"无\"\n    index = temperatures.index(max(temperatures))\n    highest_temperature = temperatures[index]\n    city = cities[index]\n    return highest_temperature, city\n\ndef find_lowest_temperature(cities: List[str], temperatures: List[float]) -> Tuple[float, str]:\n    if not temperatures:\n        return 0, \"无\"\n    index = temperatures.index(min(temperatures))\n    lowest_temperature = temperatures[index]\n    city = cities[index]\n    return lowest_temperature, city\n\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program to complete the task: Meteorological Data Analysis\n\nWrite a program to analyze and process temperature data.\n\nRequirements:\n\nWrite a function extract_temperatures_from_text(text: str) -> List[float], which takes a text string as a parameter, extracts temperature data from the text, and returns it in the form of a list. Each line in the file contains a temperature value in Celsius.\n\nWrite a function calculate_average_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, calculates the average temperature, and returns it.\n\nWrite a function find_highest_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, finds the highest temperature in it, and returns it.\n\nWrite a function find_lowest_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, finds the lowest temperature in it, and returns it.\n\nUse case:\n\npython\ntext = \"\"\"\nBeijing, -4℃\nShanghai, 3℃\nGuangzhou, 12℃\nChongqing, 8℃\n\"\"\"\n\ntemperatures = extract_temperatures_from_text(text)\naverage_temp = calculate_average_temperature(temperatures)\nhighest_temp = find_highest_temperature(temperatures)\nlowest_temp = find_lowest_temperature(temperatures)\n\nprint(\"Extracted temperature data:\", temperatures)\nprint(\"Average temperature:\", average_temp)\nprint(\"Highest temperature:\", highest_temp)\nprint(\"Lowest temperature:\", lowest_temp)\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testextract_temperatures_from_text:\n    def test_extract_temperatures_from_text_with_temperatures(self):\n        text = \"北京，-4℃\\n上海，3℃\\n广州，12℃\\n重庆，8℃\"\n        cities, temperatures = extract_temperatures_from_text(text)\n        assert cities == [\"北京\", \"上海\", \"广州\", \"重庆\"]\n        assert temperatures == [-4.0, 3.0, 12.0, 8.0]\n\n", "id": 13, "labels": "{\"execution_language\":\"python\", \"original_id\":144, \"original_promblem\":\"Write a program to complete the task: Meteorological Data Analysis\\n\\nWrite a program to analyze and process temperature data.\\n\\nRequirements:\\n\\nWrite a function extract_temperatures_from_text(text: str) -> List[float], which takes a text string as a parameter, extracts temperature data from the text, and returns it in the form of a list. Each line in the file contains a temperature value in Celsius.\\n\\nWrite a function calculate_average_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, calculates the average temperature, and returns it.\\n\\nWrite a function find_highest_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, finds the highest temperature in it, and returns it.\\n\\nWrite a function find_lowest_temperature(temperatures: List[float]) -> float, which takes a list of temperature data as a parameter, finds the lowest temperature in it, and returns it.\\n\\nUse case:\\n\\npython\\ntext = \\\"\\\"\\\"\\nBeijing, -4℃\\nShanghai, 3℃\\nGuangzhou, 12℃\\nChongqing, 8℃\\n\\\"\\\"\\\"\\n\\ntemperatures = extract_temperatures_from_text(text)\\naverage_temp = calculate_average_temperature(temperatures)\\nhighest_temp = find_highest_temperature(temperatures)\\nlowest_temp = find_lowest_temperature(temperatures)\\n\\nprint(\\\"Extracted temperature data:\\\", temperatures)\\nprint(\\\"Average temperature:\\\", average_temp)\\nprint(\\\"Highest temperature:\\\", highest_temp)\\nprint(\\\"Lowest temperature:\\\", lowest_temp)\", \"programming_language\":\"python\", \"tags\":\"Data Science\"}", "test": "{\"asset\":null, \"code\":\"from typing import List, Tuple\\n\\n\\nclass Testextract_temperatures_from_text:\\n    def test_extract_temperatures_from_text_without_temperatures(self):\\n        text = \\\"北京\\\\n上海\\\\n广州\\\\n重庆\\\"\\n        cities, temperatures = extract_temperatures_from_text(text)\\n        assert cities == []\\n        assert temperatures == []\\n\\n    def test_calculate_average_temperature(self):\\n        temperatures = [10.0, 20.0, 30.0]\\n        assert calculate_average_temperature(temperatures) == 20.0\\n\\n    def test_find_highest_temperature(self):\\n        cities = [\\\"北京\\\", \\\"上海\\\", \\\"广州\\\", \\\"重庆\\\"]\\n        temperatures = [-4.0, 3.0, 12.0, 8.0]\\n        assert find_highest_temperature(cities, temperatures) == (12.0, \\\"广州\\\")\\n\\n    def test_find_lowest_temperature(self):\\n        cities = [\\\"北京\\\", \\\"上海\\\", \\\"广州\\\", \\\"重庆\\\"]\\n        temperatures = [-4.0, 3.0, 12.0, 8.0]\\n        assert find_lowest_temperature(cities, temperatures) == (-4.0, \\\"北京\\\")\\n\\n    def test_extract_temperatures_from_text_with_single_data(self):\\n        text = \\\"北京，-4℃\\\"\\n        cities, temperatures = extract_temperatures_from_text(text)\\n        assert cities == [\\\"北京\\\"]\\n        assert temperatures == [-4.0]\\n\\n    def test_extract_temperatures_from_text_with_cities_only(self):\\n        text = \\\"北京\\\\n上海\\\\n广州\\\\n重庆\\\"\\n        cities, temperatures = extract_temperatures_from_text(text)\\n        assert cities == []\\n        assert temperatures == []\\n\\n    def test_calculate_average_temperature_with_single_temperature(self):\\n        temperatures = [10.0]\\n        assert calculate_average_temperature(temperatures) == 10.0\\n\\n    def test_find_highest_temperature_with_single_temperature(self):\\n        cities = [\\\"北京\\\"]\\n        temperatures = [-4.0]\\n        assert find_highest_temperature(cities, temperatures) == (-4.0, \\\"北京\\\")\\n\\n    def test_find_lowest_temperature_with_single_temperature(self):\\n        cities = [\\\"北京\\\"]\\n        temperatures = [-4.0]\\n        assert find_lowest_temperature(cities, temperatures) == (-4.0, \\\"北京\\\")\\n\\n    def test_extract_temperatures_from_text_with_duplicate_temperatures(self):\\n        text = \\\"北京，-4℃\\\\n上海，3℃\\\\n广州，12℃\\\\n重庆，8℃\\\\n成都，12℃\\\"\\n        cities, temperatures = extract_temperatures_from_text(text)\\n        assert cities == [\\\"北京\\\", \\\"上海\\\", \\\"广州\\\", \\\"重庆\\\", \\\"成都\\\"]\\n        assert temperatures == [-4.0, 3.0, 12.0, 8.0, 12.0]\\n\\n    def test_extract_temperatures_from_text_with_decimal_temperatures(self):\\n        text = \\\"北京，-4.5℃\\\\n上海，3.2℃\\\\n广州，12.7℃\\\\n重庆，8.9℃\\\"\\n        cities, temperatures = extract_temperatures_from_text(text)\\n        assert cities == [\\\"北京\\\", \\\"上海\\\", \\\"广州\\\", \\\"重庆\\\"]\\n        assert temperatures == [-4.5, 3.2, 12.7, 8.9]\\n\\n\"}", "__internal_uuid__": "85422f8e-b9cd-4aeb-83b3-17df3ad16adc"}
{"canonical_solution": "```python\nimport re\n\n\ndef count_html_tags(html):\n    pattern = r'<\\s*([a-zA-Z]+)[^>]*>|<\\s*/\\s*([a-zA-Z]+)\\s*>'\n    matches = re.findall(pattern, html)\n\n    tag_count = 0\n    nested_tags = []\n    max_nested_depth = 0\n\n    for opening_tag, closing_tag in matches:\n        if opening_tag:\n            nested_tags.append(opening_tag.lower())\n            tag_count += 1\n            max_nested_depth = max(max_nested_depth, len(nested_tags))\n        elif nested_tags and nested_tags[-1] == closing_tag.lower():\n            nested_tags.pop()\n            tag_count += 1\n\n    return tag_count, max_nested_depth\n\n\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, a function count_html_tags(html), which accepts an HTML string as a parameter and returns the number of HTML tags contained in the string.\n\nRequirements:\n\nHTML tags are surrounded by angle brackets < and >, with the tag name inside the brackets.\nThe tag name consists of lowercase letters and does not contain spaces or other special characters.\nAssume that the input HTML string is valid, no error handling is required.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testcount_html_tags:\n    def test_empty_string(self):\n        html = \"\"\n        tag_count, max_nested_depth = count_html_tags(html)\n        assert tag_count == 0\n        assert max_nested_depth == 0\n\n", "id": 14, "labels": "{\"execution_language\":\"python\", \"original_id\":145, \"original_promblem\":\"Write a program, a function count_html_tags(html), which accepts an HTML string as a parameter and returns the number of HTML tags contained in the string.\\n\\nRequirements:\\n\\nHTML tags are surrounded by angle brackets < and >, with the tag name inside the brackets.\\nThe tag name consists of lowercase letters and does not contain spaces or other special characters.\\nAssume that the input HTML string is valid, no error handling is required.\", \"programming_language\":\"python\", \"tags\":\"Front-End\"}", "test": "{\"asset\":null, \"code\":\"import re\\n\\n\\nclass Testcount_html_tags:\\n    def test_single_tag(self):\\n        html = \\\"<div></div>\\\"\\n        tag_count, max_nested_depth = count_html_tags(html)\\n        assert tag_count == 2\\n        assert max_nested_depth == 1\\n\\n    def test_nested_tags(self):\\n        html = \\\"<div><p><span></span></p></div>\\\"\\n        tag_count, max_nested_depth = count_html_tags(html)\\n        assert tag_count == 6\\n        assert max_nested_depth == 3\\n\\n    def test_mismatched_closing_tag(self):\\n        html = \\\"<div></span>\\\"\\n        tag_count, max_nested_depth = count_html_tags(html)\\n        assert tag_count == 1\\n        assert max_nested_depth == 1\\n\\n    def test_case_sensitive(self):\\n        html = \\\"<DIV><P><SPAN></span></P></div>\\\"\\n        tag_count, max_nested_depth = count_html_tags(html)\\n        assert tag_count == 6\\n        assert max_nested_depth == 3\\n\\n    def test_special_characters(self):\\n        html = \\\"<p>This is some text with &lt;strong&gt; tags.</p>\\\"\\n        tag_count, max_nested_depth = count_html_tags(html)\\n        assert tag_count == 2\\n\\n    def test_unbalanced_tags(self):\\n        html = \\\"<div><p></div></p>\\\"\\n        result = count_html_tags(html)\\n        assert result == (3, 2)\"}", "__internal_uuid__": "69ae79e5-b26a-420b-830c-d74f1073418e"}
{"canonical_solution": "```python\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.backends import default_backend\nimport base64\n\n\ndef encrypt(text, key):\n    backend = default_backend()\n    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=backend)\n    encryptor = cipher.encryptor()\n\n    # 补全文本长度至AES块大小的倍数\n    text = text + ' ' * (16 - len(text) % 16)\n\n    # 加密\n    ciphertext = encryptor.update(text.encode()) + encryptor.finalize()\n    return base64.b64encode(ciphertext).decode()\n\n\ndef decrypt(encrypted_text, key):\n    backend = default_backend()\n    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=backend)\n    decryptor = cipher.decryptor()\n\n    # 解密\n    ciphertext = base64.b64decode(encrypted_text.encode())\n    decrypted_text = decryptor.update(ciphertext) + decryptor.finalize()\n    return decrypted_text.decode().rstrip()\n\n\ndef save_to_file(data, filename):\n    with open(filename, 'w') as file:\n        file.write(data)\n\n\ndef read_from_file(filename):\n    with open(filename, 'r') as file:\n        return file.read()\n\n\n\ntext_to_encrypt = \"Hello, World!\"\nencryption_key = b'Sixteen byte key'\n\n# # 加密并保存到文件\n# encrypted_text = encrypt(text_to_encrypt, encryption_key)\n# save_to_file(encrypted_text, \"encrypted_data.txt\")\n#\n# # 从文件中读取并解密\n# loaded_encrypted_text = read_from_file(\"encrypted_data.txt\")\n# decrypted_text = decrypt(loaded_encrypted_text, encryption_key)\n\n\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program, a script for data encryption and decryption, such as the encrypt function: It accepts plaintext and a key as input, and uses the AES algorithm's ECB mode for encryption. Before encryption, the length of the plaintext will be padded to a multiple of the AES block size. The encryption result is returned in the form of Base64 encoding.\n\ndecrypt function: It accepts ciphertext and a key as input, and uses the AES algorithm's ECB mode for decryption. After decryption, any added spaces will be removed, and then the decrypted plaintext is returned.\n\nsave_to_file function: It accepts data and a filename as input, and writes the data to the specified file.\n\nread_from_file function: It accepts a filename as input, reads data from the specified file, and returns it.\n\nEncryption and decryption demonstration: Use the example text \"Hello, World!\" and a 16-byte key for encryption. The encrypted result is saved to the file \"encrypted_data.txt\" in Base64 encoding.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass TestEncryption:\n    def test_encrypt_decrypt_with_fixture(self, encryption_key):\n        original_text = \"Hello, World!\"\n        encrypted_text = encrypt(original_text, encryption_key)\n        decrypted_text = decrypt(encrypted_text, encryption_key)\n        assert original_text == decrypted_text, \"Encryption and decryption failed.\"\n\n", "id": 15, "labels": "{\"execution_language\":\"python\", \"original_id\":146, \"original_promblem\":\"Write a program, a script for data encryption and decryption, such as the encrypt function: It accepts plaintext and a key as input, and uses the AES algorithm's ECB mode for encryption. Before encryption, the length of the plaintext will be padded to a multiple of the AES block size. The encryption result is returned in the form of Base64 encoding.\\n\\ndecrypt function: It accepts ciphertext and a key as input, and uses the AES algorithm's ECB mode for decryption. After decryption, any added spaces will be removed, and then the decrypted plaintext is returned.\\n\\nsave_to_file function: It accepts data and a filename as input, and writes the data to the specified file.\\n\\nread_from_file function: It accepts a filename as input, reads data from the specified file, and returns it.\\n\\nEncryption and decryption demonstration: Use the example text \\\"Hello, World!\\\" and a 16-byte key for encryption. The encrypted result is saved to the file \\\"encrypted_data.txt\\\" in Base64 encoding.\", \"programming_language\":\"python\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import os\\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\\nfrom cryptography.hazmat.backends import default_backend\\nimport base64\\n\\n\\nclass TestEncryption:\\n    def test_save_and_read_from_file_with_fixture(self, encryption_key, tmp_path):\\n        original_text = \\\"Testing file save and read functionality.\\\"\\n        encrypted_text = encrypt(original_text, encryption_key)\\n        file_path = tmp_path / \\\"test_file.txt\\\"\\n\\n        # Save encrypted text to file\\n        save_to_file(encrypted_text, file_path)\\n\\n        # Read from file and decrypt\\n        loaded_encrypted_text = read_from_file(file_path)\\n        decrypted_text = decrypt(loaded_encrypted_text, encryption_key)\\n\\n        assert original_text == decrypted_text, \\\"File save and read failed.\\\"\\n\\n    def test_encrypt_empty_string_with_fixture(self, encryption_key):\\n        original_text = \\\"\\\"\\n        encrypted_text = encrypt(original_text, encryption_key)\\n        decrypted_text = decrypt(encrypted_text, encryption_key)\\n        assert original_text == decrypted_text, \\\"Encryption and decryption of empty string failed.\\\"\\n\\n    def test_decrypt_invalid_input_with_fixture(self, encryption_key):\\n        invalid_encrypted_text = \\\"InvalidInput\\\"\\n        with pytest.raises(Exception, match=\\\"The length of the provided data is not a multiple of the block length.\\\"):\\n            decrypt(invalid_encrypted_text, encryption_key)\\n\\n    def test_decrypt_truncated_data_with_fixture(self, encryption_key, tmp_path):\\n        original_text = \\\"Hello, World!\\\"\\n        encrypted_text = encrypt(original_text, encryption_key)\\n\\n        # Truncate the encrypted data\\n        truncated_encrypted_text = encrypted_text[:-5]\\n\\n        file_path = tmp_path / \\\"truncated_data.txt\\\"\\n        save_to_file(truncated_encrypted_text, file_path)\\n\\n\\n    def test_read_from_nonexistent_file_with_fixture(self, encryption_key, tmp_path):\\n        nonexistent_file_path = tmp_path / \\\"nonexistent_file.txt\\\"\\n        with pytest.raises(FileNotFoundError):\\n            read_from_file(nonexistent_file_path)\\n\\n    @pytest.fixture\\n    def encryption_key(self):\\n        return b'Sixteen byte key'\\n\"}", "__internal_uuid__": "bf86c947-082c-44ab-8ca3-bf5d5a322933"}
{"canonical_solution": "```python\nimport os\nimport shutil\n\ndef backup_folder(source_folder, target_folder):\n    try:\n        # 检查源文件夹是否存在\n        if not os.path.exists(source_folder):\n            raise Exception(\"Source folder does not exist.\")\n\n        # 检查目标文件夹是否存在，如果不存在则创建\n        if not os.path.exists(target_folder):\n            os.makedirs(target_folder)\n\n        # 遍历源文件夹中的所有文件和子文件夹\n        for root, dirs, files in os.walk(source_folder):\n            # 构建目标文件夹中的相对路径\n            relative_path = os.path.relpath(root, source_folder)\n            target_path = os.path.join(target_folder, relative_path)\n\n            # 创建目标文件夹中的子文件夹\n            if not os.path.exists(target_path):\n                os.makedirs(target_path)\n\n            # 复制源文件夹中的所有文件到目标文件夹中\n            for file in files:\n                source_file = os.path.join(root, file)\n                target_file = os.path.join(target_path, file)\n                shutil.copy2(source_file, target_file)\n\n        print(\"Backup completed successfully.\")\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a program that takes a folder path as input and then backs up all the files in that folder to a specified target folder, preserving the original file structure. For example, the backup_folder function takes two parameters: the source folder path (source_folder) and the target folder path (target_folder). Before performing the backup operation, it will perform a series of checks:\n\nSource folder check: First, the script will verify whether the source folder exists. If it does not exist, it throws an exception and displays the corresponding error message.\n\nTarget folder check: Then, it will check whether the target folder exists. If the target folder does not exist, the script will create it.\n\nNext, use the os.walk function to traverse all files and subfolders in the source folder. For each file and folder found, the script will perform the following operations:\n\nBuild target path: Build the relative path in the target folder and create the corresponding subfolders in the target folder.\n\nFile copy: Use the shutil.copy2 function to copy files. This function will preserve the metadata of the file, such as creation time and modification time.\n\nFinally, after the backup is completed, the script will output a message indicating that the backup was successful.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testbackup_folder:\n    def test_backup_successful(self, setup_test_folders):\n        source_folder, target_folder = setup_test_folders\n        assert source_folder.exists()\n        backup_folder(source_folder, target_folder)\n        assert target_folder.exists()\n\n", "id": 16, "labels": "{\"execution_language\":\"python\", \"original_id\":147, \"original_promblem\":\"Write a program that takes a folder path as input and then backs up all the files in that folder to a specified target folder, preserving the original file structure. For example, the backup_folder function takes two parameters: the source folder path (source_folder) and the target folder path (target_folder). Before performing the backup operation, it will perform a series of checks:\\n\\nSource folder check: First, the script will verify whether the source folder exists. If it does not exist, it throws an exception and displays the corresponding error message.\\n\\nTarget folder check: Then, it will check whether the target folder exists. If the target folder does not exist, the script will create it.\\n\\nNext, use the os.walk function to traverse all files and subfolders in the source folder. For each file and folder found, the script will perform the following operations:\\n\\nBuild target path: Build the relative path in the target folder and create the corresponding subfolders in the target folder.\\n\\nFile copy: Use the shutil.copy2 function to copy files. This function will preserve the metadata of the file, such as creation time and modification time.\\n\\nFinally, after the backup is completed, the script will output a message indicating that the backup was successful.\", \"programming_language\":\"python\", \"tags\":\"Operation System\"}", "test": "{\"asset\":null, \"code\":\"import os\\nimport shutil\\n\\n\\nclass Testbackup_folder:\\n    # 使用 fixture 的方式进行测试\\n    def test_backup_empty_folder(self, tmp_path):\\n        source_folder = tmp_path / \\\"empty_folder\\\"\\n        target_folder = tmp_path / \\\"target_folder_empty\\\"\\n        source_folder.mkdir()\\n        assert source_folder.exists()\\n        backup_folder(source_folder, target_folder)\\n        assert target_folder.exists()\\n        assert not os.listdir(target_folder)\\n\\n    def test_backup_with_subfolders(self, tmp_path):\\n        source_folder = tmp_path / \\\"source_with_subfolders\\\"\\n        target_folder = tmp_path / \\\"target_with_subfolders\\\"\\n        (source_folder / \\\"subfolder\\\").mkdir(parents=True)\\n        assert source_folder.exists()\\n        backup_folder(source_folder, target_folder)\\n        assert target_folder.exists()\\n\\n    def test_backup_existing_target_folder(self, tmp_path):\\n        source_folder = tmp_path / \\\"source_folder\\\"\\n        target_folder = tmp_path / \\\"target_folder\\\"\\n        source_folder.mkdir()\\n        target_folder.mkdir()\\n        assert source_folder.exists()\\n        assert target_folder.exists()\\n        backup_folder(source_folder, target_folder)\\n        assert target_folder.exists()\\n\\n    def test_backup_to_temporary_folder(self, tmp_path):\\n        source_folder = tmp_path / \\\"source_folder\\\"\\n        target_folder = tmp_path / \\\"target_folder_temp\\\"\\n        source_folder.mkdir()\\n        assert source_folder.exists()\\n        backup_folder(source_folder, target_folder)\\n        assert target_folder.exists()\\n\\n    def test_source_folder_contains_files(self, setup_test_folders):\\n        source_folder, target_folder = setup_test_folders\\n        # 在源文件夹中创建一些文件\\n        file1 = source_folder / \\\"file1.txt\\\"\\n        file2 = source_folder / \\\"subfolder\\\" / \\\"file2.txt\\\"\\n        file1.write_text(\\\"这是文件1的内容。\\\")\\n        file2.parent.mkdir(parents=True)\\n        file2.write_text(\\\"这是文件2的内容。\\\")\\n\\n        assert file1.exists()\\n        assert file2.exists()\\n\\n        backup_folder(source_folder, target_folder)\\n\\n        # 检查文件是否在目标文件夹中备份\\n        assert (target_folder / \\\"file1.txt\\\").exists()\\n        assert (target_folder / \\\"subfolder\\\" / \\\"file2.txt\\\").exists()\\n\\n    def test_backup_with_different_file_types(self, setup_test_folders):\\n        source_folder, target_folder = setup_test_folders\\n        # 在源文件夹中创建不同扩展名的文件\\n        file_txt = source_folder / \\\"file.txt\\\"\\n        file_csv = source_folder / \\\"data.csv\\\"\\n        file_py = source_folder / \\\"script.py\\\"\\n\\n        file_txt.write_text(\\\"这是一个文本文件。\\\")\\n        file_csv.write_text(\\\"CSV 数据在这里。\\\")\\n        file_py.write_text(\\\"# Python 脚本内容。\\\")\\n\\n        assert file_txt.exists()\\n        assert file_csv.exists()\\n        assert file_py.exists()\\n\\n        backup_folder(source_folder, target_folder)\\n\\n        # 检查文件是否在目标文件夹中备份\\n        assert (target_folder / \\\"file.txt\\\").exists()\\n        assert (target_folder / \\\"data.csv\\\").exists()\\n        assert (target_folder / \\\"script.py\\\").exists()\\n\\n\\n    @pytest.fixture\\n    def setup_test_folders(self, tmp_path):\\n        source_folder = tmp_path / \\\"source_folder\\\"\\n        target_folder = tmp_path / \\\"target_folder\\\"\\n        source_folder.mkdir()\\n        target_folder.mkdir()\\n        yield source_folder, target_folder\\n\"}", "__internal_uuid__": "8ece53d5-f89a-46d9-a307-4b1d4e40a256"}
{"canonical_solution": "```python\nimport os\nimport shutil\n\ndef create_folder(folder_name):\n    if not os.path.exists(folder_name):\n        os.makedirs(folder_name)\n        print(f'Folder {folder_name} created.')\n\ndef create_and_write_file(file_path, content):\n    with open(file_path, 'w', encoding='utf-8') as file:\n        file.write(content)\n        print(f'File {file_path} created and written.')\n\ndef read_and_print_file(file_path):\n    with open(file_path, 'r', encoding='utf-8') as file:\n        content = file.read()\n        print(f'Contents of {file_path}:')\n        print(content)\n\ndef copy_file(source_path, destination_path):\n    shutil.copy(source_path, destination_path)\n    print(f'File {source_path} copied to {destination_path}.')\n\ndef move_file(source_path, destination_path):\n    shutil.move(source_path, destination_path)\n    print(f'File {source_path} moved to {destination_path}.')\n\ndef delete_folder(folder_name):\n    shutil.rmtree(folder_name)\n    print(f'Folder {folder_name} and its contents deleted.')\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a Python program for file and folder operations, including creating a folder (create_folder), using the open function to create a file in write mode and write the specified content, using the open function to open a file in read mode and read the file content, copying a file (copy_file), moving a file (move_file), and deleting a folder and its contents (delete_folder). For example, # Import file operation related modules\nimport os\nimport shutil\n\n# Create a folder\ncreate_folder('data')\n\n# Create and write a file in the data folder\ninfo_file_path = os.path.join('data', 'info.txt')\ncreate_and_write_file(info_file_path, \"Hello, this is some information.\")\n\n# Read and print the file content\nread_and_print_file(info_file_path)\n\n# Copy the file to info_backup.txt\ninfo_backup_path = os.path.join('data', 'info_backup.txt')\ncopy_file(info_file_path, info_backup_path)\n\n# Move the file to the backup folder\ncreate_folder('backup')\ninfo_backup_new_path = os.path.join('backup', 'info_backup.txt')\nmove_file(info_backup_path, info_backup_new_path)\n\n# Delete the data folder and all its files\ndelete_folder('data')\nImport the os module, and shutil module\nThe program creates a folder (data).\nIn this folder, it creates a file (info.txt) and writes some information.\nIt reads and prints the content of the file.\nIt copies the file to another file (info_backup.txt).\nIt moves the file to another folder (backup).\nIt deletes the original folder (data) and all its files.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass TestFile_process:\n    def test_create_folder(self):\n        data_folder = 'data'\n        info_file_path = os.path.join(data_folder, 'info.txt')\n        backup_folder = 'backup'\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\n        create_folder(data_folder)\n        assert os.path.exists(data_folder)\n\n    # 测试用例2: 创建并写入文件\n", "id": 17, "labels": "{\"execution_language\":\"python\", \"original_id\":148, \"original_promblem\":\"Write a Python program for file and folder operations, including creating a folder (create_folder), using the open function to create a file in write mode and write the specified content, using the open function to open a file in read mode and read the file content, copying a file (copy_file), moving a file (move_file), and deleting a folder and its contents (delete_folder). For example, # Import file operation related modules\\nimport os\\nimport shutil\\n\\n# Create a folder\\ncreate_folder('data')\\n\\n# Create and write a file in the data folder\\ninfo_file_path = os.path.join('data', 'info.txt')\\ncreate_and_write_file(info_file_path, \\\"Hello, this is some information.\\\")\\n\\n# Read and print the file content\\nread_and_print_file(info_file_path)\\n\\n# Copy the file to info_backup.txt\\ninfo_backup_path = os.path.join('data', 'info_backup.txt')\\ncopy_file(info_file_path, info_backup_path)\\n\\n# Move the file to the backup folder\\ncreate_folder('backup')\\ninfo_backup_new_path = os.path.join('backup', 'info_backup.txt')\\nmove_file(info_backup_path, info_backup_new_path)\\n\\n# Delete the data folder and all its files\\ndelete_folder('data')\\nImport the os module, and shutil module\\nThe program creates a folder (data).\\nIn this folder, it creates a file (info.txt) and writes some information.\\nIt reads and prints the content of the file.\\nIt copies the file to another file (info_backup.txt).\\nIt moves the file to another folder (backup).\\nIt deletes the original folder (data) and all its files.\", \"programming_language\":\"python\", \"tags\":\"Operation System\"}", "test": "{\"asset\":null, \"code\":\"import os\\nimport shutil\\n\\n\\nclass TestFile_process:\\n    # 测试用例1: 创建文件夹\\n    def test_create_and_write_file(self):\\n        data_folder = 'data'\\n        info_file_path = os.path.join(data_folder, 'info.txt')\\n        backup_folder = 'backup'\\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\\n        create_and_write_file(info_file_path, \\\"Test content\\\")\\n        assert os.path.exists(info_file_path)\\n\\n    # 测试用例3: 读取并打印文件内容\\n    def test_read_and_print_file(self, capsys):\\n        data_folder = 'data'\\n        info_file_path = os.path.join(data_folder, 'info.txt')\\n        backup_folder = 'backup'\\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\\n        read_and_print_file(info_file_path)\\n        captured = capsys.readouterr()\\n        assert \\\"Test content\\\" in captured.out\\n\\n    # 测试用例4: 复制文件\\n    def test_copy_file(self):\\n        data_folder = 'data'\\n        info_file_path = os.path.join(data_folder, 'info.txt')\\n        backup_folder = 'backup'\\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\\n        copy_file(info_file_path, info_backup_path)\\n        assert os.path.exists(info_backup_path)\\n\\n    # 测试用例：尝试移动已删除的文件\\n    def test_move_deleted_file(self):\\n        data_folder = 'data'\\n        info_file_path = os.path.join(data_folder, 'info.txt')\\n        backup_folder = 'backup'\\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\\n        # 创建 data 文件夹\\n        create_folder(data_folder)\\n\\n        # 在 data 文件夹中创建 info.txt 文件\\n        create_and_write_file(info_file_path, \\\"Hello, this is some information.\\\")\\n\\n        # 将文件移动到 backup 文件夹中\\n        shutil.move(info_file_path, backup_folder)\\n\\n        # 使用 os.path.join 构建移动后的文件路径\\n        moved_file_path = os.path.join(backup_folder, os.path.basename(info_file_path))\\n\\n        # 确保文件已成功移动\\n        assert os.path.exists(moved_file_path)\\n        assert not os.path.exists(info_file_path)\\n\\n    # 测试用例6: 删除文件夹\\n    def test_delete_folder(self):\\n        data_folder = 'data'\\n        info_file_path = os.path.join(data_folder, 'info.txt')\\n        backup_folder = 'backup'\\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\\n        delete_folder(data_folder)\\n        assert not os.path.exists(data_folder)\\n\\n    # 测试用例7: 尝试读取已删除的文件\\n    def test_read_deleted_folder(self, capsys):\\n        data_folder = 'data'\\n        info_file_path = os.path.join(data_folder, 'info.txt')\\n        backup_folder = 'backup'\\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\\n        # 删除文件\\n        os.remove(info_file_path)\\n\\n        # 尝试读取已删除的文件\\n        with pytest.raises(FileNotFoundError):\\n            read_and_print_file(info_file_path)\\n\\n        captured = capsys.readouterr()\\n        assert \\\"FileNotFoundError\\\" != str(captured.err)\\n\\n    # 测试用例8: 尝试删除已删除的文件夹\\n    def test_delete_deleted_folder(self):\\n        data_folder = 'data'\\n        info_file_path = os.path.join(data_folder, 'info.txt')\\n        backup_folder = 'backup'\\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\\n        delete_folder(data_folder)\\n        assert not os.path.exists(data_folder)\\n\\n        # 使用 os.path.exists 检查文件夹是否不存在\\n        assert not os.path.exists(data_folder)\\n\\n    # 预先设置测试环境\\n    @pytest.fixture(autouse=True)\\n    def setup_teardown(self):\\n        data_folder = 'data'\\n        info_file_path = os.path.join(data_folder, 'info.txt')\\n        backup_folder = 'backup'\\n        info_backup_path = os.path.join(backup_folder, 'info_backup.txt')\\n        create_folder(data_folder)\\n        create_and_write_file(info_file_path, \\\"Test content\\\")\\n        create_folder(backup_folder)\\n\\n        yield\\n\\n        # 清理测试环境\\n        if os.path.exists(data_folder):\\n            shutil.rmtree(data_folder)\\n        if os.path.exists(backup_folder):\\n            shutil.rmtree(backup_folder)\\n\\n\"}", "__internal_uuid__": "b371cc30-0cde-487b-ab83-08d85b3ab947"}
{"canonical_solution": "```python\nimport re\n\n\ndef extract_phone_numbers(text):\n    # 电话号码的正则表达式模式\n    pattern = re.compile(r'\\(?\\b(\\d{3})\\)?[-.\\s]?(\\d{3})[-.\\s]?(\\d{4})\\b')\n\n    # 使用 finditer 方法提取所有匹配的电话号码\n    matches = pattern.finditer(text)\n\n    # 存储提取到的电话号码\n    phone_numbers = []\n\n    for match in matches:\n        # 获取匹配对象的匹配组\n        groups = match.groups()\n\n        # 格式化提取到的电话号码\n        formatted_number = f\"({groups[0]}) {groups[1]}-{groups[2]}\"\n\n        # 添加到结果列表\n        phone_numbers.append(formatted_number)\n\n    return phone_numbers\n\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a Python program that accepts a text string as input and uses a regular expression pattern to extract phone numbers from it.\n\nA regular expression pattern is created using re.compile, which is used to match phone numbers. A function named extract_phone_numbers is defined, where the expression: \\(? matches an optional left parenthesis, \\b represents a word boundary, (\\d{3}) matches three digits as the area code, [-.\\s]? matches an optional separator (including hyphen, dot, or space), (\\d{3}) matches three digits as the middle part, also matches an optional separator, (\\d{4}) matches four digits as the end, \\b represents a word boundary.\n\nA finditer method is defined, using pattern.finditer(text) to call the finditer method, returning an iterator that contains all objects matching the pattern.\n\nExtracting and formatting phone numbers:\nIterate through each match object in the matches iterator.\nFor each match object, use match.groups() to get the match groups, i.e., the area code, middle part, and end.\nUse these components to format the phone number in the form of \"(XXX) YYY-ZZZZ\".\nResult storage:\nAdd the formatted phone numbers to the phone_numbers list.\nReturn a list containing all extracted phone numbers. For example, example_text = \"\"\"\nContact List:\n- Alice: (123) 456-7890\n- Bob: 987-654-3210\n- Charlie: (555) 123-4567\n- David: 123.456.7890\n\"\"\"\n\n# Extract phone numbers\nphone_numbers = extract_phone_numbers(example_text)\n\n# Print extracted phone numbers\nprint(\"Extracted Phone Numbers:\")\nfor number in phone_numbers:\n    print(number) In this example, example_text contains some phone numbers in different formats. The extract_phone_numbers function is called to extract and format these phone numbers, then the extracted phone numbers are printed out.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testextract_phone_numbers:\n    def test_valid_format_with_parentheses(self):\n        text = \"联系我们：(123) 456-7890 或者 123-456-7890。\"\n        result = extract_phone_numbers(text)\n        assert result == ['(123) 456-7890', '(123) 456-7890']\n\n", "id": 18, "labels": "{\"execution_language\":\"python\", \"original_id\":149, \"original_promblem\":\"Write a Python program that accepts a text string as input and uses a regular expression pattern to extract phone numbers from it.\\n\\nA regular expression pattern is created using re.compile, which is used to match phone numbers. A function named extract_phone_numbers is defined, where the expression: \\\\(? matches an optional left parenthesis, \\\\b represents a word boundary, (\\\\d{3}) matches three digits as the area code, [-.\\\\s]? matches an optional separator (including hyphen, dot, or space), (\\\\d{3}) matches three digits as the middle part, also matches an optional separator, (\\\\d{4}) matches four digits as the end, \\\\b represents a word boundary.\\n\\nA finditer method is defined, using pattern.finditer(text) to call the finditer method, returning an iterator that contains all objects matching the pattern.\\n\\nExtracting and formatting phone numbers:\\nIterate through each match object in the matches iterator.\\nFor each match object, use match.groups() to get the match groups, i.e., the area code, middle part, and end.\\nUse these components to format the phone number in the form of \\\"(XXX) YYY-ZZZZ\\\".\\nResult storage:\\nAdd the formatted phone numbers to the phone_numbers list.\\nReturn a list containing all extracted phone numbers. For example, example_text = \\\"\\\"\\\"\\nContact List:\\n- Alice: (123) 456-7890\\n- Bob: 987-654-3210\\n- Charlie: (555) 123-4567\\n- David: 123.456.7890\\n\\\"\\\"\\\"\\n\\n# Extract phone numbers\\nphone_numbers = extract_phone_numbers(example_text)\\n\\n# Print extracted phone numbers\\nprint(\\\"Extracted Phone Numbers:\\\")\\nfor number in phone_numbers:\\n    print(number) In this example, example_text contains some phone numbers in different formats. The extract_phone_numbers function is called to extract and format these phone numbers, then the extracted phone numbers are printed out.\", \"programming_language\":\"python\", \"tags\":\"Software Engineering\"}", "test": "{\"asset\":null, \"code\":\"import re\\n\\n\\nclass Testextract_phone_numbers:\\n    def test_valid_format_with_dashes_and_dots(self):\\n        text = \\\"请拨打电话：123.456.7890 或者 987-654-3210。\\\"\\n        result = extract_phone_numbers(text)\\n        assert result == ['(123) 456-7890', '(987) 654-3210']\\n\\n    def test_no_phone_numbers(self):\\n        text = \\\"这段文本中没有电话号码。\\\"\\n        result = extract_phone_numbers(text)\\n        assert result == []\\n\\n    def test_invalid_format_should_not_match(self):\\n        text = \\\"无效的号码 (123) 45-67890 不应匹配。\\\"\\n        result = extract_phone_numbers(text)\\n        assert result == []\\n\\n    def test_another_invalid_format_should_not_match(self):\\n        text = \\\"另一个无效的号码 1234-567-890 不应匹配。\\\"\\n        result = extract_phone_numbers(text)\\n        assert result == []\\n\\n    def test_incomplete_number_should_not_match(self):\\n        text = \\\"不完整的号码 (123) 456 不应匹配。\\\"\\n        result = extract_phone_numbers(text)\\n        assert result == []\\n\\n    def test_valid_number_with_extra_text(self):\\n        text = \\\"有效号码 111-222-3333 附带额外文本。\\\"\\n        result = extract_phone_numbers(text)\\n        assert result == ['(111) 222-3333']\\n\\n    def test_multiple_valid_numbers(self):\\n        text = \\\"多个有效号码：(111) 222-3333 和 444.555.6666。\\\"\\n        result = extract_phone_numbers(text)\\n        assert result == ['(111) 222-3333', '(444) 555-6666']\\n\"}", "__internal_uuid__": "6d763d33-723a-4327-9aad-3e34a1c3459c"}
{"canonical_solution": "```python\nimport numpy as np\nfrom scipy.linalg import eig\n\n\ndef calculate_eigen(matrix, num_largest=5):\n    # 计算特征值和特征向量\n    eigenvalues, eigenvectors = eig(matrix)\n\n    # 找到最大的几个特征值及其对应的索引\n    largest_indices = np.argsort(eigenvalues)[-num_largest:]\n\n    # 提取最大的几个特征值和对应的特征向量\n    largest_eigenvalues = eigenvalues[largest_indices]\n    largest_eigenvectors = eigenvectors[:, largest_indices]\n\n    return largest_eigenvalues, largest_eigenvectors\n\n```", "content": "Your task is to generate python code to solve the following problem. The generated code must be placed between the ```python and ```, and only one code block is allowed: \nWrite a Python program named find_max_eigenvalues that calculates the maximum eigenvalues and corresponding eigenvectors of a two-dimensional matrix. The input parameters include a two-dimensional array matrix and an optional parameter `num_largest` (default value is 5), which is used to specify the number of maximum eigenvalues to be extracted. The program returns two lists, the first list is the eigenvalue list, and the second list is the corresponding eigenvector list. The program uses the NumPy and SciPy libraries for calculations. If the input matrix is empty or incorrectly formatted, the program will throw a ValueError. For example, for the input matrix: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], and `num_largest` set to 2, the program should return the following results: Eigenvalue list: [18.8302358, -0.67276795], corresponding eigenvector list: [[-0.40962667, -0.54264865, -0.73330651], [0.43402538, -0.82296167, 0.36654613]]. Here, the first eigenvector [-0.40962667, -0.54264865, -0.73330651] corresponds to the maximum eigenvalue 18.8302358, and the second eigenvector [0.43402538, -0.82296167, 0.36654613] corresponds to the second largest eigenvalue -0.67276795.\n\nYou need to follow the function names or class names in the test cases. The generated code should not contain any test cases: \nclass Testcalculate_eigen:\n    def test_calculate_eigen_default(self):\n        test_matrix = np.array([[1, 2, 3, 4, 5],\n                                [6, 7, 8, 9, 10],\n                                [11, 12, 13, 14, 15],\n                                [16, 17, 18, 19, 20],\n                                [21, 22, 23, 24, 25]])\n\n        largest_eigenvalues, largest_eigenvectors = calculate_eigen(test_matrix)\n        assert len(largest_eigenvalues) == 5\n        assert largest_eigenvalues[0] < largest_eigenvalues[-1]\n\n", "id": 19, "labels": "{\"execution_language\":\"python\", \"original_id\":150, \"original_promblem\":\"Write a Python program named find_max_eigenvalues that calculates the maximum eigenvalues and corresponding eigenvectors of a two-dimensional matrix. The input parameters include a two-dimensional array matrix and an optional parameter `num_largest` (default value is 5), which is used to specify the number of maximum eigenvalues to be extracted. The program returns two lists, the first list is the eigenvalue list, and the second list is the corresponding eigenvector list. The program uses the NumPy and SciPy libraries for calculations. If the input matrix is empty or incorrectly formatted, the program will throw a ValueError. For example, for the input matrix: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], and `num_largest` set to 2, the program should return the following results: Eigenvalue list: [18.8302358, -0.67276795], corresponding eigenvector list: [[-0.40962667, -0.54264865, -0.73330651], [0.43402538, -0.82296167, 0.36654613]]. Here, the first eigenvector [-0.40962667, -0.54264865, -0.73330651] corresponds to the maximum eigenvalue 18.8302358, and the second eigenvector [0.43402538, -0.82296167, 0.36654613] corresponds to the second largest eigenvalue -0.67276795.\", \"programming_language\":\"python\", \"tags\":\"Data Science\"}", "test": "{\"asset\":null, \"code\":\"import numpy as np\\nfrom scipy.linalg import eig\\n\\n\\nclass Testcalculate_eigen:\\n    def test_calculate_eigen_custom(self):\\n        test_matrix = np.array([[1, 2, 3, 4, 5],\\n                                [6, 7, 8, 9, 10],\\n                                [11, 12, 13, 14, 15],\\n                                [16, 17, 18, 19, 20],\\n                                [21, 22, 23, 24, 25]])\\n\\n        largest_eigenvalues, largest_eigenvectors = calculate_eigen(test_matrix, num_largest=3)\\n        assert len(largest_eigenvalues) == 3\\n        assert largest_eigenvalues[0] < largest_eigenvalues[-1]\\n\\n    def test_calculate_eigen_non_square_matrix(self):\\n        non_square_matrix = np.array([[1, 2, 3], [4, 5, 6]])\\n        with pytest.raises(ValueError):\\n            calculate_eigen(non_square_matrix)\\n\\n    def test_calculate_eigen_empty_matrix(self):\\n        empty_matrix = np.array([])\\n        with pytest.raises(ValueError):\\n            calculate_eigen(empty_matrix)\\n\\n    def test_calculate_eigen_large_matrix(self):\\n        large_matrix = np.random.rand(100, 100)\\n        largest_eigenvalues, _ = calculate_eigen(large_matrix, num_largest=10)\\n        assert len(largest_eigenvalues) == 10\\n        assert largest_eigenvalues[0] < largest_eigenvalues[-1]\\n\\n    def test_calculate_eigen_negative_values(self):\\n        negative_matrix = np.array([[1, -2, 3], [-4, 5, -6], [7, -8, 9]])\\n        largest_eigenvalues, _ = calculate_eigen(negative_matrix)\\n        assert np.all(np.real(largest_eigenvalues) != 0)\\n\"}", "__internal_uuid__": "c1b41d79-9dfa-42f2-8b11-21cc32ba4199"}