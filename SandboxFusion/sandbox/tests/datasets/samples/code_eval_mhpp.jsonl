{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef table_tennis_results(marks: str) -> int:\n    \"\"\"Adham Sharara was elected as the sixth President of the International Table Tennis Federation(ITTF) in 1999.\n    Under his leadership, the ITTF underwent several reforms in the table tennis events to promote the sport globally.\n    For instance, they changed the scoring system from the 21-point format to an 11-point format. Since then, matches\n    have been played with an 11-point system, with a requirement of achieving a two-point lead upon reaching 11 points.\n\n\tRecently, Alice and Bob had a table tennis match. The match progress is represented by a string composed of 'A's \n\tfor Alice's points and 'B's for Bob's points. Please analyze the scores of each game and determine who is currently\n    leading overall. If Alice is leading, output 1; if Bob is leading, output -1; if they are tied, output 0.\"\"\"", "id": 1, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert table_tennis_results(\"AAAAAAAAAAA\") == 1\nassert table_tennis_results(\"BBBAAABABABABAAAAABBBBBB\") == 1\nassert table_tennis_results(\"BBBAAABABABABAAAAABABABABAAAABBBABABABBAABBABB\") == 0\nassert table_tennis_results(\"BBBAAABABABABAAAAABBBBBBBBBBBB\") == -1", "__internal_uuid__": "f2b3183d-82ad-4587-8a5d-cdc46f911163"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef expectation_number(scores: List[int]) -> int:\n    \"\"\"The annual spring recruitment has begun at an internet company, and a total of n candidates have been selected.\n    Each candidate submits a resume, and the company generates an estimated ability value based on the provided resume\n    information, where a higher numerical value indicates a higher likelihood of passing the interview.\n\n    Alice and Bob are responsible for reviewing the candidates. They each have all the resumes and will review them in\n    descending order of the candidates' ability values. Since the resumes have been shuffled in advance, the order of\n    appearance of resumes with the same ability values is taken uniformly at random from their permutations.\n\n    Now, given the ability values of n candidates as scores, let X represent the number of resumes that appear at the\n    same position in the review order of both Alice and Bob. Calculate the expected value of X.\n\n    Hint: The formula for calculating the expected value of a discrete non-negative random variable is shown below:\n    E(X) = sum([k * probability_of_k for k in list])\"\"\"", "id": 2, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert expectation_number([1, 2, 3, 4]) == 4\nassert expectation_number([1, 1, 2]) == 2", "__internal_uuid__": "a6168eed-a68c-4059-a525-51cc07e38e57"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_maximum_capital(n: int, c: int, profits: List[int], capital: List[int]) -> int:\n    \"\"\"As AI products like ChatGPT become popular worldwide, many artificial intelligence companies are eager\n    to try their luck. One company is about to start an IPO, and in order to sell its stocks to venture capital \n    firms at a higher price, the company wants to undertake some projects before the IPO to increase its capital.\n    Due to limited resources, it can only complete up to n different projects before the IPO. Help the company\n    design a way to complete at most n different projects after which it can obtain the maximum total capital.\n\n    You are given m projects. For each project i, it has a net profit profits[i] and the minimum capital capital[i]\n    required to start the project.\n\n    Initially, your capital is c. When you complete a project, you will gain the net profit, and the profit will \n    be added to your total capital.\n\n    In summary, choose a list of up to n different projects from the given projects to maximize the final capital,\n    and output the maximum capital that can be obtained in the end.\"\"\"", "id": 3, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert get_maximum_capital(3, 0, [1,2,3], [0,1,2]) == 6\nassert get_maximum_capital(2, 0, [1,2,3], [0,1,1]) == 4", "__internal_uuid__": "c2f5b07f-061c-4d3c-aa51-9cc3b2132288"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef least_goods_number(n: int) -> int:\n    \"\"\"Given a list of products where the first column represents the product name and the second column\n    represents the product price. You have n dollers, please calculate and return the minimum number of products\n    required to spend the total amount exactly. If no combination of products can add up to the total amount,\n    return -1. You can assume that the quantity of each product is unlimited.\n    +---------------+---------------+\n    |     Milk      |       2       |\n    |---------------|---------------|\n    |     Soap      |       3       |\n    |---------------|---------------|\n    |   Batteries   |       5       |\n    |---------------|---------------|\n    |     Eggs      |       1       |\n    +---------------+---------------+\"\"\"", "id": 4, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert least_goods_number(11) == 3\nassert least_goods_number(5) == 1", "__internal_uuid__": "724e008d-31aa-4533-bc78-917185dd51b2"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef arrange_ark_pairs(ark_deck: List[int]) -> int:\n    \"\"\"Legend tells of a great Ark built by Noah to survive an immense flood that would cover the Earth.\n    To preserve the natural world, Noah invited animals to join him on the Ark, inviting them in pairs so\n    that each species could continue in the new world.\n\n    As the animals boarded the Ark, they were assigned places in a linear formation across the Ark's deck.\n    However, in the rush to board before the rain began, the animal pairs became separated across the 2n available spaces.\n    Each animal is known by a unique identifier, and the list of these identifiers as they are arranged on the Ark\n    is given by an integer array `arkDeck` where `arkDeck[i]` represents the animal occupying the ith space.\n    The pairs were meant to board in order, with the first pair being (0, 1), the second pair (2, 3), and so on,\n    up to the last pair being (2n - 2, 2n - 1).\n\n    Your task is to help Noah figure out the minimum number of exchanges necessary to reposition the animals so that\n    each pair is resting side by side. An exchange is the act of two animals, regardless of their species, standing\n    up from their places and switching spots on the deck.\"\"\"", "id": 5, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert arrange_ark_pairs([0,1,3,2]) == 0\nassert arrange_ark_pairs([0,3,2,1]) == 1", "__internal_uuid__": "41c1033d-fc0c-48ae-bc6c-f341b5889459"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef artemis_game(beta: int, theta: int, upperBound: int) -> float:\n    \"\"\"\n    Artemis, engages in a strategic computational challenge.\n\n    Initiating with a tally of zero, Artemis partakes in sequential computational operations with the aim to accumulate a numerical aggregate less than a predefined threshold, denoted by the variable theta. Throughout each computational cycle, Artemis is awarded a quantified increment, discretely and uniformly distributed, within the confines of [1, upperBound], where upperBound defines the maximum achievable singular increment and is a fixed integer value. It is of importance to note that each operation occurs autonomously and the potential outcomes are equitably probable.\n\n    The process of numerical acquisition is suspended when Artemis' aggregate meets or exceeds the marker theta.\n\n    The objective is to assess the likelihood that Artemis concludes these operations possessing a tally not surpassing beta.\n\n    Estimations deviating from the true likelihood by no more than a margin of 10^-5 are deemed satisfactory.\"\"\"", "id": 6, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert artemis_game(10, 1, 10) == 1.00000\nassert artemis_game(6, 1, 10) == 0.60000", "__internal_uuid__": "058df36e-4dc5-41d9-a75f-68be06c6ba58"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\nclass UnionFind(object):\n    def __init__(self, names):\n        self.parent = {}\n        for name in names:\n            self.parent[name] = name\n\n    def union(self, a, b):\n        if a not in self.parent:\n            self.parent[a] = a\n        if b not in self.parent:\n            self.parent[b] = b\n        root_a = self.find_root(a)\n        root_b = self.find_root(b)\n        if root_a < root_b:\n            self.parent[root_b] = root_a\n        else:\n            self.parent[root_a] = root_b\n\n    def find_root(self, node):\n        while node != self.parent[node]:\n            self.parent[node] = self.parent[self.parent[node]]\n            node = self.parent[node]\n        return node\n\ndef popular_names(names: List[str], synonyms: List[str]) -> List[str]:\n    \"\"\"\n    Each year, the national statistics agency releases a list of the 10,000 most commonly chosen names for new babies, along with the frequency of each name's use. While variations in spelling can make certain names seem different, they may indeed refer to the same moniker. For instance, \"Aiden\" and \"Aidan\" are treated as separate entries in the statistics, even though they actually stem from the same name.\n\n    Given two datasets - one featuring names and their popularity, the other containing pairs of names deemed to be versions of the same underlying name - we wish to devise a method to effectively compute and present the cumulative frequency of each distinct name. This requires that we account for the fact that name equivalency is both transitive and symmetrical. This means that if \"Aiden\" is equivalent to \"Aidan\" and \"Aidan\" is deemed identical to \"Ayden\" then \"Aiden\" and \"Ayden\" must also be considered the same.\n\n    In the resulting list, choose the lexicographically smallest name as the representative for the true name.\n\n    In developing this procedure, we must ensure a systematic approach that can handle the numerous relations between equivalent names and their different spellings. By accounting for these equivalences, a name's total frequency could potentially be much different than what's indicated in the raw newborn name statistics. Thus, this method should more accurately reflect the true popularity of distinct names.\"\"\"", "id": 7, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert popular_names([\"Aiden(10)\",\"Aidan(5)\",\"Alex(20)\",\"Lex(2)\",\"Alexander(30)\"], [\"(Aidan,Aiden)\",\"(Aiden,Ayden)\",\"(Alex,Lex)\",\"(Alex,Alexander)\"]) == [\"Aiden(15)\",\"Alex(52)\"]\nassert popular_names([\"John(15)\",\"Jon(12)\",\"Chris(13)\",\"Kris(4)\",\"Christopher(19)\"], [\"(Jon,John)\",\"(John,Johnny)\",\"(Chris,Kris)\",\"(Chris,Christopher)\"]) == [\"John(27)\",\"Chris(36)\"]", "__internal_uuid__": "a266376e-ed6f-434b-a941-be571c791240"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef bridge_beams(shorter: int, longer: int, k: int) -> List[int]:\n    \"\"\"\n    The task at hand is both a practical and mathematical challenge, as constructing a bridge requires thorough understanding of engineering principles and creative problem-solving skills. The small stream represents a physical obstacle that needs to be overcome by establishing a steady connection from one side to the other. Metal beams are chosen for their durability and strength, essential for ensuring the longevity and safety of the bridge.\n\n    With two distinct types of beams, the \"shorter\" and the \"longer,\" your solution must accommodate a variety of circumstances. The shorter beams, while potentially more manageable due to their shorter length, might only be appropriate for narrow sections of the stream or for supporting lighter loads. On the other hand, the longer beams, offering a greater span, might be used to cover broader gaps or to bear more weight, but could also require additional support structures to maintain the necessary stability.\n\n    The project requires the precise integration of k beams. Your task is to develop a strategy to establish all potential bridge spans.\n\n    These spans should be organized from the shortest to the longest.\"\"\"", "id": 8, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert bridge_beams(1,2,3) == [3, 4, 5, 6]", "__internal_uuid__": "0ce92751-d789-44e1-a1e1-40ab91e8cb56"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef pokemon(pokemons: List[List[int]], balls: List[List[int]], r: int)->int:\n    \"\"\"In the Pokémon world, Professor Oak invites Ash to participate in a Pokémon-catching drill. A vast field is dotted with many Pokémon, and each Pokémon's information is recorded as [xi, yi, ri], with (xi, yi) being their Global Positioning System (GPS) coordinates and ri as their catch radius. Ash has a set of Master Balls, each with a fixed catch radius R, and the coordinates of each Master Ball are recorded as [xj, yj] in the array balls[j]. The rules for catching Pokémon with Master Balls in this drill are as follows:\n        If any part of a Pokémon, including its edges, is inside or on the border of a Master Ball, then it is considered successfully caught.\n        If a Pokémon is simultaneously caught by multiple Master Balls, it only counts as one successful catch.\n        Please help Ash to calculate how many Pokémon he has successfully caught in total.\n    Note:\n        The input data guarantees that no two Pokémon have the same GPS coordinates; however, their catch radiuses may overlap.\"\"\"", "id": 9, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert pokemon([[1,3,2],[4,3,1],[7,1,2]], [[1,0],[3,3]], 4) == 2\nassert pokemon([[3,3,1],[3,2,1]], [[4,3]], 2) == 1", "__internal_uuid__": "10185d13-05f6-4f56-a186-b38e8f35dab6"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef shingen_impact_explore(nums: List[int]) -> int:\n    \"\"\"In a game called Shingen Impact, an explorer finds a series of ancient barriers in an undeveloped region\n    named Vateyt. These barriers are numbered from 0 to N-1. Each barrier conceals either a Healing Stele, \n    a Cursed Trap, or a neutral passage with nothing within:\n\n    - Healing Stele: Upon contact, it can restore vitality and elemental energy;\n    - Cursed Trap: Approaching it will incur a curse, consuming a certain amount of life;\n    - Neutral Passage: It will not impact the explorer in any way.\n\n    The effects of each barrier on the numeric value are recorded in the array 'nums'. The explorer must dispel the\n    influence of these barriers one by one to further explore new areas and uncover hidden secrets. Initially, the \n    explorer's life is at 1 (with no upper limit) and the plan was to explore each one according to the arrangement\n    order of the barriers. However, it was quickly discovered that heading directly into adventure might result in \n    life depletion. Thus, rearrangement of the exploration sequence is required, strategically placing those Cursed Traps\n    toward the end.\n\n    Therefore, the explorer needs to strategize. The explorer aims to minimally adjust the sequence order, ensuring his life\n    remains positive throughout the process. If there is no possible way to arrange the sequence of barriers to maintain \n    positive life, then the explorer must seek help from the deities and return a result of -1 (indicating the task is \n    unachievable).\"\"\"", "id": 10, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert shingen_impact_explore([-300, 500, 0, -400, 0]) == -1\nassert shingen_impact_explore([110,130,110,-250,-70,-110,-50,-50,90,150]) == 1", "__internal_uuid__": "b45207d1-ba45-4f65-91a8-bfd96ce39ef3"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef can_square(bucket_list: List[int]) -> str:\n    \"\"\" Given a bucket_list with each entry as the number of squares in the bucket, determin if we can build a square using all the given squares. Output \"YES\" if we can, otherwise \"No\".\"\"\"", "id": 11, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert can_square([14, 2]) == YES\nassert can_square([1, 2, 3, 4, 5, 6, 7]) == NO", "__internal_uuid__": "d3e0e04e-3fd3-4299-8530-192a496dfcbf"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_champion(grid: List[List[int]]) -> int:\n    \"\"\"\n    In a competition with 'n' teams numbered from 0 to n - 1, you have a 2D boolean matrix 'grid' of size n x n.\n    For all pairs of teams 'i' and 'j' where 0 <= i, j <= n - 1 and i != j: if grid[i][j] == 1, team 'i' is stronger than team 'j'; otherwise, team 'j' is stronger.\n    A team will be the champion if no other team is stronger than it.\n    Return the team that will be the champion.\"\"\"", "id": 12, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert find_champion([[0,1],[0,0]]) == 0\nassert find_champion([[0,0,1],[1,0,1],[0,0,0]]) == 1", "__internal_uuid__": "4c26144d-f0b4-424b-ac09-ef4eb93ae5a3"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_highest_occurrence_count(number_list: List[int]) -> int:\n    \"\"\"\n    I was recently talking with my friend John who works as a data analyst.\n    He was telling me about some of the common tasks he has to do with the data sets he works with.\n    John mentioned he often needs to write little functions to calculate these frequencies. Last week, he was working with a data set of numbers and needed to find the total frequency of the number(s) that appear most often.\n    He asked if I could help him turn this task into a simple function. Here is a concise description of what it needs to do:\n\n    Given an array `nums` of positive integers, return the total frequency of the most frequent element(s) in the array `nums`.\n    The frequency of an element is the number of times it appears in the array.\"\"\"", "id": 13, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert get_highest_occurrence_count([2,2,3,3]) == 4\nassert get_highest_occurrence_count([4,3,2,1]) == 4", "__internal_uuid__": "aa6aa0c2-4b39-4392-93dd-e9ef48f150f3"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef get_max_diagonal_area(dimensions: List[List[int]]) -> int:\n    \"\"\"\n    You were given a 2D array of integers called dimensions representing the lengths and widths of different rectangles. For each index i (where 0 <= i < dimensions.length), dimensions[i][0] is the length of rectangle i and dimensions[i][1] is the width.\n    You needed to find the area of the rectangle with the longest diagonal.\n    If there were multiple rectangles with the same longest diagonal length, he needed to return the area of the rectangle with the largest area.\n    So in summary, given a 2D array of rectangle dimensions, the problem is asking:\n\n    Return the area of the rectangle with the longest diagonal. If there are multiple rectangles with the same max diagonal length, return the one with the largest area.\"\"\"", "id": 14, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert get_max_diagonal_area([[1,2],[3,4]]) == 12\nassert get_max_diagonal_area([[10,8],[7,6]]) == 80", "__internal_uuid__": "bdde0207-8695-4ac4-bf0a-50322965fc17"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef find_smallest_missing_integer(nums: List[int]) -> int:\n    \"\"\"\n    You are given an integer array nums indexed from 0.\n\n    A prefix nums[0..i] is called an ordered prefix if for every 1 <= j <= i, nums[j] equals nums[j - 1] + 1. Note that a prefix with only nums[0] is considered an ordered prefix.\n\n    Return the smallest integer x such that x is greater than or equal to the sum of the longest ordered prefix of nums.\n\n    Note that x cannot already exist in the array nums.\"\"\"", "id": 15, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert find_smallest_missing_integer([1,2,3,4,5]) == 15\nassert find_smallest_missing_integer([6,1]) == 7", "__internal_uuid__": "5499e57d-37a6-494c-816f-ccc873018047"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef find_calling_steps(ring: str, key: str) -> int:\n    \"\"\"Baba is the only country on the planet Padamiya. This country has absolute political power, is rich and powerful. Their forward King Abanov is the best generation of leaders in history, and has promoted the Baba country to unprecedented prosperity. But something happened recently that made him very distressed, because fewer and fewer people can find their destiny in this life.\n\n    There is a romantic legend in this ancient and mysterious country: the local telephone route consists of an unfixed rotation of a string of characters. There is a button in the center of the route. Only by spelling out the specific keyword in the fewest possible steps can you navigate the route. This will allow you to successfully contact the person destined for you in this life.\n    Here's how the phone dial is used: Initially, the first character of the ring is aligned with the 12:00 direction. Rotate the ring clockwise or counterclockwise to align the key character key[i] with the 12:00 direction. Then, click the center button. In this way, the keyword key[i] is considered to be correctly inputted. Each rotation of the dial to a new position and each click of the center button are counted as one step.\n\n    Can you provide the key words in the smallest steps that spell out all the characters to help local residents find their loved ones?\n\n    Among them, the ring and key only contain lowercase English letters. At the same time, the key can definitely be written through the ring.\n\n    1 <= ring.length, key.length <= 100\n    ring and key consist of only lower case English letters.\n    It is guaranteed that key could always be spelled by rotating ring.\"\"\"", "id": 16, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert find_calling_steps(\"godding\", \"gd\") == 4\nassert find_calling_steps(\"godding\", \"godding\") == 13", "__internal_uuid__": "6d43526a-d9ca-4781-894b-ef472a538487"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\ndef get_palindromic_string(string1: str, string2: str) -> str:\n    \"\"\"If the reverse of a string is the same as the original string, the string is called a palindrome string.  \n    You are given two strings, please find a substring in the longer string that can be concatenated after the shorter string to form a palindrome string. \n    If it can be found, return the concatenated palindromic string. Otherwise, return None. \n    Note that if more than one substring matches, you need to return the longest one.\"\"\"", "id": 17, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert get_palindromic_string(\"ab\", \"deba\") == \"abeba\"\nassert get_palindromic_string(\"uvw\", \"v\") == \"vv\"\nassert get_palindromic_string(\"abc\", \"abcd\") == \"\"", "__internal_uuid__": "58072779-763e-4fb8-8f2c-d1610b492af5"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\ndef mahjong_practice(tiles:List[int])->int:\n    \"\"\"The game of mahjong requires four players, 144 tiles and two dice to roll. The goal of mahjong is similar to poker, in that the aim is to make matching sets and pairs. A set is three or four identical tiles (e.g. 111, 1111) or three consecutive tiles (e.g. 123), and a pair is two of the same tiles (often called ‘eyes’). To win mahjong a player must form four sets and one pair. A complete mahjong set of 144 tiles includes three suits, each suit contains four sets of tiles numbered one to nine. As mentioned, the goal is to create four sets of three tiles and a pair. The three types of sets a player can make are:\n    Pong! – a set of three identical tiles\n    Gang! – a set of four identical tiles\n    Chi! – a sequence of three consecutive tiles of the same suit \n    Now, for practice, regardless of the suits, just look at the numbers. Given a list of tiles, calculate the maximum number of groups that can form \"Pong\" or \"Chi\".\"\"\"", "id": 18, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert mahjong_practice([2,2,2,3,4]) == 1\nassert mahjong_practice([2,2,2,3,4,1,3]) == 2", "__internal_uuid__": "05e954db-8c5a-44a9-b986-801972e1c8a7"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef find_duplicate(nums: List[int]) -> int:\n    \"\"\"Floyd's cycle detection algorithm, also known as the \"tortoise and hare algorithm,\" is used to detect whether a linked list contains a cycle or loop.\n\n    In this algorithm, two pointers are used: the slow pointer (tortoise) and the fast pointer (hare). The slow pointer moves one step at a time, while the fast pointer moves two steps at a time. If there is a cycle in the linked list, eventually the fast pointer will catch up to the slow pointer and they will meet at a node in the cycle.\n\n    To detect the cycle, the algorithm starts by initializing both pointers to the head of the linked list. Then, the pointers move through the linked list as described above. If the fast pointer reaches the end of the list (i.e. it encounters a null pointer), then there is no cycle in the list. However, if the fast pointer catches up to the slow pointer, then there is a cycle in the list.\n\n    Once a cycle is detected, the algorithm can also find the starting point of the cycle. After the two pointers meet, the slow pointer is reset to the head of the list, and both pointers move one step at a time until they meet again. The node where they meet is the starting point of the cycle.\n\n    Floyd's cycle detection algorithm has a time complexity of O(n), where n is the length of the linked list. It is named after Robert W. Floyd, who described the algorithm in 1967.\n\n    Based on the above background, please find the repeated number in the array 'nums' of length n+1. The numbers in this array are all in the range [1, n].\n\n    1 <= n <= 10^5\n    nums.length == n + 1\n    1 <= nums[i] <= n\n    All the integers in nums appear only once except for precisely one integer which appears two or more times.\"\"\"", "id": 19, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert find_duplicate([1,3,4,2,2]) == 2\nassert find_duplicate([3,1,3,4,2]) == 3", "__internal_uuid__": "a5325a86-2b9c-4bf0-bb4c-09782c724ad1"}
{"content": "Write a Python function according to the function name and the problem description in the docstring below. \n\nfrom typing import List\n\n\ndef majority_vote(nums: List[int]) -> List[int]:\n    \"\"\"The core idea of Majority voting method is consumption. First, we consider the basic Majority voting problem, such as finding a number that appears more than 1/2 of the total number of times in a set of number sequences (and assuming that this number always exists). We can directly use proof by contradiction to prove that there may be only one such number. The core idea of Majority voting algorithm is based on this fact:\n\n    Select two different numbers from the sequence and delete them every time. Finally, one number or several identical numbers are left, which is the element that appears more than half of the total. Assume that the elements that exist half of the maximum number of times in the current sequence are x, and the total length of the sequence is n. Then we can divide the array into two parts, one part is the same k elements x, and the other part is (n-k)/2 pairs of different elements. At this time, we assume that there is another element y with a frequency greater than half of the total, Then y should satisfy y>n/2 at this time, but according to our previous reasoning y should satisfy y<=(n-k)/2, which is contradictory.\n\n    Please follow the principle of Majority voting to find elements that appear more than n/3 times in a sequence of size n.\n\n    1 <= nums.length <= 5 * 10^4\n    -10^9 <= nums[i] <= 10^9\"\"\"", "id": 20, "labels": "{\"difficulty_type\":\"Distraction\"}", "test": "assert majority_vote([3,2,3]) == [3]\nassert majority_vote([1]) == [1]", "__internal_uuid__": "7d556cd8-96c3-474b-9a90-ebfeeb6965d5"}
