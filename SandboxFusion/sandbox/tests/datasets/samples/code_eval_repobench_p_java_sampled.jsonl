{"repo_name": "MaxSmile/EasyVPN-Free", "file_path": "Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/activity/BaseActivity.java", "context": "[{\"identifier\":\"App\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/App.java\", \"snippet\":\"public class App extends Application {\\n\\n    private static App instance;\\n    private Tracker mTracker;\\n    private static final String PROPERTY_ID = \\\"UA-89622148-1\\\";\\n    private static final String PROPERTY_ID_PRO = \\\"UA-89641705-1\\\";\\n\\n    @Override\\n    public void onCreate() {\\n        super.onCreate();\\n        if (!BuildConfig.DEBUG)\\n            Fabric.with(this, new Crashlytics());\\n\\n        instance = this;\\n    }\\n\\n    synchronized public Tracker getDefaultTracker() {\\n        if (mTracker == null) {\\n            GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);\\n            mTracker = analytics.newTracker(BuildConfig.FLAVOR == \\\"pro\\\" ? PROPERTY_ID_PRO : PROPERTY_ID);\\n        }\\n        return mTracker;\\n    }\\n\\n    @Override\\n    protected void attachBaseContext(Context base) {\\n        super.attachBaseContext(base);\\n    }\\n\\n    public static String getResourceString(int resId) {\\n        return instance.getString(resId);\\n    }\\n\\n    public static App getInstance() {\\n        return instance;\\n    }\\n\\n}\"}, {\"identifier\":\"DBHelper\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/database/DBHelper.java\", \"snippet\":\"public class DBHelper  extends SQLiteOpenHelper {\\n\\n    private static final int DATABASE_VERSION = 6;\\n    private static final String DATABASE_NAME = \\\"Records.db\\\";\\n    private static final String TABLE_SERVERS = \\\"servers\\\";\\n    private static final String TABLE_BOOKMARK_SERVERS = \\\"bookmark_servers\\\";\\n    private static final String TAG = \\\"DBHelper\\\";\\n\\n    private static final String KEY_ID = \\\"_id\\\";\\n    private static final String KEY_HOST_NAME = \\\"hostName\\\";\\n    private static final String KEY_IP = \\\"ip\\\";\\n    private static final String KEY_SCORE = \\\"score\\\";\\n    private static final String KEY_PING = \\\"ping\\\";\\n    private static final String KEY_SPEED = \\\"speed\\\";\\n    private static final String KEY_COUNTRY_LONG = \\\"countryLong\\\";\\n    private static final String KEY_COUNTRY_SHORT = \\\"countryShort\\\";\\n    private static final String KEY_NUM_VPN_SESSIONS = \\\"numVpnSessions\\\";\\n    private static final String KEY_UPTIME = \\\"uptime\\\";\\n    private static final String KEY_TOTAL_USERS = \\\"totalUsers\\\";\\n    private static final String KEY_TOTAL_TRAFFIC = \\\"totalTraffic\\\";\\n    private static final String KEY_LOG_TYPE = \\\"logType\\\";\\n    private static final String KEY_OPERATOR = \\\"operator\\\";\\n    private static final String KEY_MESSAGE = \\\"message\\\";\\n    private static final String KEY_CONFIG_DATA = \\\"configData\\\";\\n    private static final String KEY_TYPE = \\\"type\\\";\\n    private static final String KEY_QUALITY = \\\"quality\\\";\\n    private static final String KEY_CITY = \\\"city\\\";\\n    private static final String KEY_REGION_NAME = \\\"regionName\\\";\\n    private static final String KEY_LAT = \\\"lat\\\";\\n    private static final String KEY_LON = \\\"lon\\\";\\n\\n\\n    public DBHelper(Context context) {\\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\\n    }\\n\\n    @Override\\n    public void onCreate(SQLiteDatabase db) {\\n        createTable(db, TABLE_SERVERS);\\n        createTable(db, TABLE_BOOKMARK_SERVERS);\\n    }\\n\\n    @Override\\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\\n        db.execSQL(\\\"drop table if exists \\\" + TABLE_SERVERS);\\n        db.execSQL(\\\"drop table if exists \\\" + TABLE_BOOKMARK_SERVERS);\\n        onCreate(db);\\n    }\\n\\n    private void createTable(SQLiteDatabase db, String name) {\\n        db.execSQL(\\\"create table \\\" + name + \\\"(\\\"\\n                + KEY_ID + \\\" integer primary key,\\\"\\n                + KEY_HOST_NAME + \\\" text,\\\"\\n                + KEY_IP + \\\" text,\\\"\\n                + KEY_SCORE + \\\" text,\\\"\\n                + KEY_PING + \\\" text,\\\"\\n                + KEY_SPEED + \\\" text,\\\"\\n                + KEY_COUNTRY_LONG + \\\" text,\\\"\\n                + KEY_COUNTRY_SHORT + \\\" text,\\\"\\n                + KEY_NUM_VPN_SESSIONS + \\\" text,\\\"\\n                + KEY_UPTIME + \\\" text,\\\"\\n                + KEY_TOTAL_USERS + \\\" text,\\\"\\n                + KEY_TOTAL_TRAFFIC + \\\" text,\\\"\\n                + KEY_LOG_TYPE + \\\" text,\\\"\\n                + KEY_OPERATOR + \\\" text,\\\"\\n                + KEY_MESSAGE + \\\" text,\\\"\\n                + KEY_CONFIG_DATA + \\\" text,\\\"\\n                + KEY_QUALITY + \\\" integer,\\\"\\n                + KEY_CITY + \\\" text,\\\"\\n                + KEY_TYPE + \\\" integer,\\\"\\n                + KEY_REGION_NAME + \\\" text,\\\"\\n                + KEY_LAT + \\\" real,\\\"\\n                + KEY_LON + \\\" real,\\\"\\n                + \\\"UNIQUE (\\\"\\n                + KEY_HOST_NAME\\n                + \\\") ON CONFLICT IGNORE\\\"\\n                + \\\")\\\");\\n    }\\n\\n    public void setInactive(String ip) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        ContentValues values = new ContentValues();\\n        values.put(KEY_QUALITY, 0);\\n        db.update(TABLE_SERVERS, values, KEY_IP + \\\" = ?\\\", new String[] {ip});\\n\\n        db.close();\\n    }\\n\\n    public boolean setIpInfo(JSONArray response, List<Server> serverList) {\\n        boolean result = false;\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        for (int i = 0; i < response.length(); i++) {\\n            try {\\n                JSONObject ipInfo = new JSONObject(response.get(i).toString());\\n                String city = ipInfo.get(KEY_CITY).toString();\\n\\n                ContentValues values = new ContentValues();\\n                values.put(KEY_CITY, city);\\n                values.put(KEY_REGION_NAME, ipInfo.get(KEY_REGION_NAME).toString());\\n                values.put(KEY_LAT, ipInfo.getDouble(KEY_LAT));\\n                values.put(KEY_LON, ipInfo.getDouble(KEY_LON));\\n\\n                db.update(TABLE_SERVERS, values, KEY_IP + \\\" = ?\\\", new String[] {ipInfo.get(\\\"query\\\").toString()});\\n\\n                serverList.get(i).setCity(city);\\n                result = true;\\n            } catch (JSONException e) {\\n                result = false;\\n                e.printStackTrace();\\n            }\\n        }\\n        db.close();\\n\\n        return result;\\n    }\\n\\n    public void clearTable() {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        db.delete(TABLE_SERVERS, null, null);\\n        db.close();\\n    }\\n\\n    public void setBookmark(Server server) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        ContentValues contentValues = new ContentValues();\\n\\n        contentValues.put(KEY_HOST_NAME, server.getHostName());\\n        contentValues.put(KEY_IP, server.getIp());\\n        contentValues.put(KEY_SCORE, server.getScore());\\n        contentValues.put(KEY_PING, server.getPing());\\n        contentValues.put(KEY_SPEED, server.getSpeed());\\n        contentValues.put(KEY_COUNTRY_LONG, server.getCountryLong());\\n        contentValues.put(KEY_COUNTRY_SHORT, server.getCountryShort());\\n        contentValues.put(KEY_NUM_VPN_SESSIONS, server.getNumVpnSessions());\\n        contentValues.put(KEY_UPTIME, server.getUptime());\\n        contentValues.put(KEY_TOTAL_USERS, server.getTotalUsers());\\n        contentValues.put(KEY_TOTAL_TRAFFIC, server.getTotalTraffic());\\n        contentValues.put(KEY_LOG_TYPE, server.getLogType());\\n        contentValues.put(KEY_OPERATOR, server.getOperator());\\n        contentValues.put(KEY_MESSAGE, server.getMessage());\\n        contentValues.put(KEY_CONFIG_DATA, server.getConfigData());\\n        contentValues.put(KEY_TYPE, server.getType());\\n        contentValues.put(KEY_QUALITY, server.getQuality());\\n        contentValues.put(KEY_CITY, server.getCity());\\n\\n        db.insert(TABLE_BOOKMARK_SERVERS, null, contentValues);\\n        db.close();\\n    }\\n\\n    public void delBookmark(Server server) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        db.delete(TABLE_BOOKMARK_SERVERS, KEY_IP + \\\" = ?\\\", new String[] {server.getIp()});\\n        db.close();\\n    }\\n\\n    public List<Server> getBookmarks() {\\n        List<Server> serverList = new ArrayList<Server>();\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.query(TABLE_BOOKMARK_SERVERS, null, null, null, null, null, null);\\n\\n        if (cursor.moveToFirst()) {\\n            do {\\n                serverList.add(parseServer(cursor));\\n            } while (cursor.moveToNext());\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        return serverList;\\n    }\\n\\n    public boolean checkBookmark(Server server) {\\n        boolean result = false;\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.query(TABLE_BOOKMARK_SERVERS,\\n                null,\\n                KEY_IP + \\\"=?\\\",\\n                new String[]{server.getIp()},\\n                null,\\n                null,\\n                null);\\n\\n        if (cursor.moveToFirst()) {\\n            result = true;\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        return result;\\n    }\\n\\n    public void putLine(String line, int type) {\\n        String[] data = line.split(\\\",\\\");\\n        if (data.length == 15) {\\n            SQLiteDatabase db = this.getWritableDatabase();\\n            ContentValues contentValues = new ContentValues();\\n\\n            contentValues.put(KEY_HOST_NAME, data[0]);\\n            contentValues.put(KEY_IP, data[1]);\\n            contentValues.put(KEY_SCORE, data[2]);\\n            contentValues.put(KEY_PING, data[3]);\\n            contentValues.put(KEY_SPEED, data[4]);\\n            contentValues.put(KEY_COUNTRY_LONG, data[5]);\\n            contentValues.put(KEY_COUNTRY_SHORT, data[6]);\\n            contentValues.put(KEY_NUM_VPN_SESSIONS, data[7]);\\n            contentValues.put(KEY_UPTIME, data[8]);\\n            contentValues.put(KEY_TOTAL_USERS, data[9]);\\n            contentValues.put(KEY_TOTAL_TRAFFIC, data[10]);\\n            contentValues.put(KEY_LOG_TYPE, data[11]);\\n            contentValues.put(KEY_OPERATOR, data[12]);\\n            contentValues.put(KEY_MESSAGE, data[13]);\\n            contentValues.put(KEY_CONFIG_DATA, data[14]);\\n            contentValues.put(KEY_TYPE, type);\\n\\n            contentValues.put(KEY_QUALITY,\\n                    ConnectionQuality.getConnectionQuality(data[4], data[7], data[3]));\\n\\n            db.insert(TABLE_SERVERS, null, contentValues);\\n            db.close();\\n        }\\n    }\\n\\n    public long getCount() {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        SQLiteStatement statement = db.compileStatement(\\\"SELECT COUNT(*) FROM \\\" + TABLE_SERVERS);\\n        long count = statement.simpleQueryForLong();\\n        db.close();\\n        return count;\\n    }\\n\\n    public long getCountBasic() {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        SQLiteStatement statement = db.compileStatement(\\\"SELECT COUNT(*) FROM \\\"\\n                + TABLE_SERVERS\\n                + \\\" WHERE \\\"\\n                + KEY_TYPE\\n                + \\\" = 0\\\");\\n        long count = statement.simpleQueryForLong();\\n        db.close();\\n        return count;\\n    }\\n\\n    public long getCountAdditional() {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        SQLiteStatement statement = db.compileStatement(\\\"SELECT COUNT(*) FROM \\\"\\n                + TABLE_SERVERS\\n                + \\\" WHERE \\\"\\n                + KEY_TYPE\\n                + \\\" = 1\\\");\\n        long count = statement.simpleQueryForLong();\\n        db.close();\\n        return count;\\n    }\\n\\n    public List<Server> getUniqueCountries() {\\n        List<Server> countryList = new ArrayList<Server>();\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.query(TABLE_SERVERS,\\n                null,\\n                null,\\n                null,\\n                KEY_COUNTRY_LONG,\\n                \\\"MAX(\\\" + KEY_QUALITY + \\\")\\\",\\n                null);\\n\\n        if (cursor.moveToFirst()) {\\n            do {\\n                countryList.add(parseServer(cursor));\\n            } while (cursor.moveToNext());\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        return countryList;\\n    }\\n\\n    public List<Server> getServersWithGPS() {\\n        List<Server> serverList = new ArrayList<Server>();\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.rawQuery(\\\"SELECT * FROM \\\"\\n                + TABLE_SERVERS\\n                + \\\" WHERE \\\"\\n                + KEY_LAT\\n                + \\\" <> 0\\\", null);\\n\\n        if (cursor.moveToFirst()) {\\n            do {\\n                serverList.add(parseServer(cursor));\\n            } while (cursor.moveToNext());\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        return serverList;\\n    }\\n\\n    public List<Server> getServersByCountryCode(String country) {\\n        List<Server> serverList = new ArrayList<Server>();\\n        if (country != null) {\\n            SQLiteDatabase db = this.getWritableDatabase();\\n            Cursor cursor = db.query(TABLE_SERVERS,\\n                    null,\\n                    KEY_COUNTRY_SHORT + \\\"=?\\\",\\n                    new String[]{country},\\n                    null,\\n                    null,\\n                    KEY_QUALITY + \\\" DESC\\\");\\n\\n            if (cursor.moveToFirst()) {\\n                do {\\n                    serverList.add(parseServer(cursor));\\n                } while (cursor.moveToNext());\\n            } else {\\n                Log.d(TAG ,\\\"0 rows\\\");\\n            }\\n\\n            cursor.close();\\n            db.close();\\n        }\\n\\n        return serverList;\\n    }\\n\\n    private Server parseGoodRandomServer(Cursor cursor, SQLiteDatabase db) {\\n        List<Server> serverListExcellent = new ArrayList<Server>();\\n        List<Server> serverListGood = new ArrayList<Server>();\\n        List<Server> serverListBad = new ArrayList<Server>();\\n\\n        if (cursor.moveToFirst()) {\\n            do {\\n                switch (cursor.getInt(16)) {\\n                    case 1:\\n                        serverListBad.add(parseServer(cursor));\\n                        break;\\n                    case 2:\\n                        serverListGood.add(parseServer(cursor));\\n                        break;\\n                    case 3:\\n                        serverListExcellent.add(parseServer(cursor));\\n                        break;\\n                }\\n\\n            } while (cursor.moveToNext());\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        Random random = new Random();\\n        if (serverListExcellent.size() > 0) {\\n            return serverListExcellent.get(random.nextInt(serverListExcellent.size()));\\n        } else if (serverListGood.size() > 0) {\\n            return serverListGood.get(random.nextInt(serverListGood.size()));\\n        } else if (serverListBad.size() > 0) {\\n            return serverListBad.get(random.nextInt(serverListBad.size()));\\n        }\\n\\n        return null;\\n    }\\n\\n    public Server getSimilarServer(String country, String ip) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.rawQuery(\\\"SELECT * FROM \\\"\\n                + TABLE_SERVERS\\n                + \\\" WHERE \\\"\\n                + KEY_QUALITY\\n                + \\\" <> 1 AND \\\"\\n                + KEY_COUNTRY_LONG\\n                + \\\" = ? AND \\\"\\n                + KEY_IP\\n                + \\\" <> ?\\\", new String[] {country, ip});\\n\\n\\n        return parseGoodRandomServer(cursor, db);\\n    }\\n\\n    public Server getGoodRandomServer(String country) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor;\\n        if (country != null) {\\n            cursor = db.rawQuery(\\\"SELECT * FROM \\\"\\n                    + TABLE_SERVERS\\n                    + \\\" WHERE \\\"\\n                    + KEY_QUALITY\\n                    + \\\" <> 0 AND \\\"\\n                    + KEY_COUNTRY_LONG\\n                    + \\\" = ?\\\", new String[] {country});\\n        } else {\\n            cursor = db.rawQuery(\\\"SELECT * FROM \\\"\\n                    + TABLE_SERVERS\\n                    + \\\" WHERE \\\"\\n                    + KEY_QUALITY\\n                    + \\\" <> 0\\\", null);\\n        }\\n\\n        return parseGoodRandomServer(cursor, db);\\n    }\\n\\n    private Server parseServer(Cursor cursor) {\\n        return new Server(\\n                cursor.getString(1),\\n                cursor.getString(2),\\n                cursor.getString(3),\\n                cursor.getString(4),\\n                cursor.getString(5),\\n                cursor.getString(6),\\n                cursor.getString(7),\\n                cursor.getString(8),\\n                cursor.getString(9),\\n                cursor.getString(10),\\n                cursor.getString(11),\\n                cursor.getString(12),\\n                cursor.getString(13),\\n                cursor.getString(14),\\n                cursor.getString(15),\\n                cursor.getInt(16),\\n                cursor.getString(17),\\n                cursor.getInt(18),\\n                cursor.getString(19),\\n                cursor.getDouble(20),\\n                cursor.getDouble(21)\\n        );\\n    }\\n}\"}, {\"identifier\":\"Server\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/model/Server.java\", \"snippet\":\"public class Server implements Parcelable {\\n\\n    private String hostName;\\n    private String ip;\\n    private String score;\\n    private String ping;\\n    private String speed;\\n    private String countryLong;\\n    private String countryShort;\\n    private String numVpnSessions;\\n    private String uptime;\\n    private String totalUsers;\\n    private String totalTraffic;\\n    private String logType;\\n    private String operator;\\n    private String message;\\n    private String configData;\\n    private int quality;\\n    private String city;\\n    private int type;\\n    private String regionName;\\n    private double lat;\\n    private double lon;\\n\\n    public Server(String hostName, String ip, String score, String ping, String speed, String countryLong, String countryShort, String numVpnSessions, String uptime, String totalUsers, String totalTraffic, String logType, String operator, String message, String configData, int quality, String city, int type, String regionName, double lat, double lon) {\\n        this.hostName = hostName;\\n        this.ip = ip;\\n        this.score = score;\\n        this.ping = ping;\\n        this.speed = speed;\\n        this.countryLong = countryLong;\\n        this.countryShort = countryShort;\\n        this.numVpnSessions = numVpnSessions;\\n        this.uptime = uptime;\\n        this.totalUsers = totalUsers;\\n        this.totalTraffic = totalTraffic;\\n        this.logType = logType;\\n        this.operator = operator;\\n        this.message = message;\\n        this.configData = configData;\\n        this.quality = quality;\\n        this.city = city;\\n        this.type = type;\\n        this.regionName = regionName;\\n        this.lat = lat;\\n        this.lon = lon;\\n    }\\n\\n    protected Server(Parcel in) {\\n        hostName = in.readString();\\n        ip = in.readString();\\n        score = in.readString();\\n        ping = in.readString();\\n        speed = in.readString();\\n        countryLong = in.readString();\\n        countryShort = in.readString();\\n        numVpnSessions = in.readString();\\n        uptime = in.readString();\\n        totalUsers = in.readString();\\n        totalTraffic = in.readString();\\n        logType = in.readString();\\n        operator = in.readString();\\n        message = in.readString();\\n        configData = in.readString();\\n        quality = in.readInt();\\n        city = in.readString();\\n        type = in.readInt();\\n        regionName = in.readString();\\n        lat = in.readDouble();\\n        lon = in.readDouble();\\n    }\\n\\n    public static final Creator<Server> CREATOR = new Creator<Server>() {\\n        @Override\\n        public Server createFromParcel(Parcel in) {\\n            return new Server(in);\\n        }\\n\\n        @Override\\n        public Server[] newArray(int size) {\\n            return new Server[size];\\n        }\\n    };\\n\\n    public String getHostName() {\\n        return hostName;\\n    }\\n\\n    public void setHostName(String hostName) {\\n        this.hostName = hostName;\\n    }\\n\\n    public String getIp() {\\n        return ip;\\n    }\\n\\n    public void setIp(String ip) {\\n        this.ip = ip;\\n    }\\n\\n    public String getScore() {\\n        return score;\\n    }\\n\\n    public void setScore(String score) {\\n        this.score = score;\\n    }\\n\\n    public String getPing() {\\n        return ping;\\n    }\\n\\n    public void setPing(String ping) {\\n        this.ping = ping;\\n    }\\n\\n    public String getSpeed() {\\n        return speed;\\n    }\\n\\n    public void setSpeed(String speed) {\\n        this.speed = speed;\\n    }\\n\\n    public String getCountryLong() {\\n        return countryLong;\\n    }\\n\\n    public void setCountryLong(String countryLong) {\\n        this.countryLong = countryLong;\\n    }\\n\\n    public String getCountryShort() {\\n        return countryShort;\\n    }\\n\\n    public void setCountryShort(String countryShort) {\\n        this.countryShort = countryShort;\\n    }\\n\\n    public String getNumVpnSessions() {\\n        return numVpnSessions;\\n    }\\n\\n    public void setNumVpnSessions(String numVpnSessions) {\\n        this.numVpnSessions = numVpnSessions;\\n    }\\n\\n    public String getUptime() {\\n        return uptime;\\n    }\\n\\n    public void setUptime(String uptime) {\\n        this.uptime = uptime;\\n    }\\n\\n    public String getTotalUsers() {\\n        return totalUsers;\\n    }\\n\\n    public void setTotalUsers(String totalUsers) {\\n        this.totalUsers = totalUsers;\\n    }\\n\\n    public String getTotalTraffic() {\\n        return totalTraffic;\\n    }\\n\\n    public void setTotalTraffic(String totalTraffic) {\\n        this.totalTraffic = totalTraffic;\\n    }\\n\\n    public String getLogType() {\\n        return logType;\\n    }\\n\\n    public void setLogType(String logType) {\\n        this.logType = logType;\\n    }\\n\\n    public String getOperator() {\\n        return operator;\\n    }\\n\\n    public void setOperator(String operator) {\\n        this.operator = operator;\\n    }\\n\\n    public String getMessage() {\\n        return message;\\n    }\\n\\n    public void setMessage(String message) {\\n        this.message = message;\\n    }\\n\\n    public String getConfigData() {\\n        return configData;\\n    }\\n\\n    public void setConfigData(String configData) {\\n        this.configData = configData;\\n    }\\n\\n    public int getQuality() {\\n        return quality;\\n    }\\n\\n    public void setQuality(int quality) {\\n        this.quality = quality;\\n    }\\n\\n    public String getCity() {\\n        return city;\\n    }\\n\\n    public void setCity(String city) {\\n        this.city = city;\\n    }\\n\\n    public int getType() {\\n        return type;\\n    }\\n\\n    public void setType(int type) {\\n        this.type = type;\\n    }\\n\\n    public String getRegionName() {\\n        return regionName;\\n    }\\n\\n    public void setRegionName(String regionName) {\\n        this.regionName = regionName;\\n    }\\n\\n    public double getLat() {\\n        return lat;\\n    }\\n\\n    public void setLat(double lat) {\\n        this.lat = lat;\\n    }\\n\\n    public double getLon() {\\n        return lon;\\n    }\\n\\n    public void setLon(double lon) {\\n        this.lon = lon;\\n    }\\n\\n    @Override\\n    public int describeContents() {\\n        return 0;\\n    }\\n\\n    @Override\\n    public void writeToParcel(Parcel dest, int flags) {\\n        dest.writeString(hostName);\\n        dest.writeString(ip);\\n        dest.writeString(score);\\n        dest.writeString(ping);\\n        dest.writeString(speed);\\n        dest.writeString(countryLong);\\n        dest.writeString(countryShort);\\n        dest.writeString(numVpnSessions);\\n        dest.writeString(uptime);\\n        dest.writeString(totalUsers);\\n        dest.writeString(totalTraffic);\\n        dest.writeString(logType);\\n        dest.writeString(operator);\\n        dest.writeString(message);\\n        dest.writeString(configData);\\n        dest.writeInt(quality);\\n        dest.writeString(city);\\n        dest.writeInt(type);\\n        dest.writeString(regionName);\\n        dest.writeDouble(lat);\\n        dest.writeDouble(lon);\\n    }\\n}\"}, {\"identifier\":\"CountriesNames\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/CountriesNames.java\", \"snippet\":\"public class CountriesNames {\\n\\n    public static Map<String, String> getCountries() {\\n        Map<String, String> countries = new HashMap<String, String>();\\n\\n        String[] isoCountries = Locale.getISOCountries();\\n        for (String country : isoCountries) {\\n            Locale locale = new Locale(\\\"\\\", country);\\n            String iso = locale.getISO3Country();\\n            String code = locale.getCountry();\\n            String name = locale.getDisplayCountry();\\n\\n            if (!\\\"\\\".equals(iso) && !\\\"\\\".equals(code)\\n                    && !\\\"\\\".equals(name)) {\\n                countries.put(code, name);\\n            }\\n        }\\n\\n        return countries;\\n    }\\n}\"}, {\"identifier\":\"PropertiesService\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/PropertiesService.java\", \"snippet\":\"public class PropertiesService {\\n\\n    private static SharedPreferences prefs;\\n    private static final String DOWNLOADED_DATA_KEY = \\\"downloaded_data\\\";\\n    private static final String UPLOADED_DATA_KEY = \\\"uploaded_data\\\";\\n    private static final String AUTOMATIC_SWITCHING = \\\"automaticSwitching\\\";\\n    private static final String COUNTRY_PRIORITY = \\\"countryPriority\\\";\\n    private static final String CONNECT_ON_START = \\\"connectOnStart\\\";\\n    private static final String AUTOMATIC_SWITCHING_SECONDS = \\\"automaticSwitchingSeconds\\\";\\n    private static final String SELECTED_COUNTRY = \\\"selectedCountry\\\";\\n    private static final String SHOW_RATING = \\\"show_rating\\\";\\n    private static final String SHOW_NOTE = \\\"show_note\\\";\\n\\n    private synchronized static SharedPreferences getPrefs(){\\n        if (prefs == null) {\\n            prefs = PreferenceManager.getDefaultSharedPreferences(App.getInstance());\\n        }\\n        return prefs;\\n    }\\n\\n    public static long getDownloaded(){\\n        return getPrefs().getLong(DOWNLOADED_DATA_KEY, 0);\\n    }\\n\\n    public static void setDownloaded(long count){\\n        getPrefs().edit().putLong(DOWNLOADED_DATA_KEY, count).apply();\\n    }\\n\\n    public static long getUploaded(){\\n        return getPrefs().getLong(UPLOADED_DATA_KEY, 0);\\n    }\\n\\n    public static void setUploaded(long count){\\n        getPrefs().edit().putLong(UPLOADED_DATA_KEY, count).apply();\\n    }\\n\\n    public static boolean getConnectOnStart(){\\n        return getPrefs().getBoolean(CONNECT_ON_START, false);\\n    }\\n\\n    public static boolean getAutomaticSwitching(){\\n        return getPrefs().getBoolean(AUTOMATIC_SWITCHING, true);\\n    }\\n\\n    public static int getAutomaticSwitchingSeconds(){\\n        return getPrefs().getInt(AUTOMATIC_SWITCHING_SECONDS, 40);\\n    }\\n\\n    public static boolean getCountryPriority(){\\n        return getPrefs().getBoolean(COUNTRY_PRIORITY, false);\\n    }\\n\\n    public static String getSelectedCountry(){\\n        return getPrefs().getString(SELECTED_COUNTRY, null);\\n    }\\n\\n    public static boolean getShowRating(){\\n        return getPrefs().getBoolean(SHOW_RATING, true);\\n    }\\n\\n    public static void setShowRating(boolean showRating){\\n        getPrefs().edit().putBoolean(SHOW_RATING, showRating).apply();\\n    }\\n\\n    public static boolean getShowNote(){\\n        return getPrefs().getBoolean(SHOW_NOTE, true);\\n    }\\n\\n    public static void setShowNote(boolean showNote){\\n        getPrefs().edit().putBoolean(SHOW_NOTE, showNote).apply();\\n    }\\n\\n\\n}\"}, {\"identifier\":\"TotalTraffic\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/TotalTraffic.java\", \"snippet\":\"public class TotalTraffic {\\n\\n    public static final String TRAFFIC_ACTION = \\\"traffic_action\\\";\\n\\n    public static final String DOWNLOAD_ALL = \\\"download_all\\\";\\n    public static final String DOWNLOAD_SESSION = \\\"download_session\\\";\\n    public static final String UPLOAD_ALL = \\\"upload_all\\\";\\n    public static final String UPLOAD_SESSION = \\\"upload_session\\\";\\n\\n    public static long inTotal;\\n    public static long outTotal;\\n\\n\\n    public static void calcTraffic(Context context, long in, long out, long diffIn, long diffOut) {\\n        List<String> totalTraffic = getTotalTraffic(diffIn, diffOut);\\n\\n        Intent traffic = new Intent();\\n        traffic.setAction(TRAFFIC_ACTION);\\n        traffic.putExtra(DOWNLOAD_ALL, totalTraffic.get(0));\\n        traffic.putExtra(DOWNLOAD_SESSION, OpenVPNService.humanReadableByteCount(in, false));\\n        traffic.putExtra(UPLOAD_ALL, totalTraffic.get(1));\\n        traffic.putExtra(UPLOAD_SESSION, OpenVPNService.humanReadableByteCount(out, false));\\n\\n        context.sendBroadcast(traffic);\\n    }\\n\\n    public static List<String> getTotalTraffic() {\\n        return getTotalTraffic(0, 0);\\n    }\\n\\n    public static List<String> getTotalTraffic(long in, long out) {\\n        List<String> totalTraffic = new ArrayList<String>();\\n\\n        if (inTotal == 0)\\n            inTotal = PropertiesService.getDownloaded();\\n\\n        if (outTotal == 0)\\n            outTotal = PropertiesService.getUploaded();\\n\\n        inTotal = inTotal + in;\\n        outTotal = outTotal + out;\\n\\n        totalTraffic.add(OpenVPNService.humanReadableByteCount(inTotal, false));\\n        totalTraffic.add(OpenVPNService.humanReadableByteCount(outTotal, false));\\n\\n        return totalTraffic;\\n    }\\n\\n    public static void saveTotal() {\\n        if (inTotal != 0)\\n            PropertiesService.setDownloaded(inTotal);\\n\\n        if (outTotal != 0)\\n            PropertiesService.setUploaded(outTotal);\\n    }\\n\\n}\"}, {\"identifier\":\"IabHelper\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/iap/IabHelper.java\", \"snippet\":\"public class IabHelper {\\n    // Is debug logging enabled?\\n    boolean mDebugLog = false;\\n    String mDebugTag = \\\"IabHelper\\\";\\n\\n    // Is setup done?\\n    boolean mSetupDone = false;\\n\\n    // Has this object been disposed of? (If so, we should ignore callbacks, etc)\\n    boolean mDisposed = false;\\n\\n    // Are subscriptions supported?\\n    boolean mSubscriptionsSupported = false;\\n\\n    // Is an asynchronous operation in progress?\\n    // (only one at a time can be in progress)\\n    boolean mAsyncInProgress = false;\\n\\n    // (for logging/debugging)\\n    // if mAsyncInProgress == true, what asynchronous operation is in progress?\\n    String mAsyncOperation = \\\"\\\";\\n\\n    // Context we were passed during initialization\\n    Context mContext;\\n\\n    // Connection to the service\\n    IInAppBillingService mService;\\n    ServiceConnection mServiceConn;\\n\\n    // The request code used to launch purchase flow\\n    int mRequestCode;\\n\\n    // The item type of the current purchase flow\\n    String mPurchasingItemType;\\n\\n    // Public key for verifying signature, in base64 encoding\\n    String mSignatureBase64 = null;\\n\\n    // Billing response codes\\n    public static final int BILLING_RESPONSE_RESULT_OK = 0;\\n    public static final int BILLING_RESPONSE_RESULT_USER_CANCELED = 1;\\n    public static final int BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE = 3;\\n    public static final int BILLING_RESPONSE_RESULT_ITEM_UNAVAILABLE = 4;\\n    public static final int BILLING_RESPONSE_RESULT_DEVELOPER_ERROR = 5;\\n    public static final int BILLING_RESPONSE_RESULT_ERROR = 6;\\n    public static final int BILLING_RESPONSE_RESULT_ITEM_ALREADY_OWNED = 7;\\n    public static final int BILLING_RESPONSE_RESULT_ITEM_NOT_OWNED = 8;\\n\\n    // IAB Helper error codes\\n    public static final int IABHELPER_ERROR_BASE = -1000;\\n    public static final int IABHELPER_REMOTE_EXCEPTION = -1001;\\n    public static final int IABHELPER_BAD_RESPONSE = -1002;\\n    public static final int IABHELPER_VERIFICATION_FAILED = -1003;\\n    public static final int IABHELPER_SEND_INTENT_FAILED = -1004;\\n    public static final int IABHELPER_USER_CANCELLED = -1005;\\n    public static final int IABHELPER_UNKNOWN_PURCHASE_RESPONSE = -1006;\\n    public static final int IABHELPER_MISSING_TOKEN = -1007;\\n    public static final int IABHELPER_UNKNOWN_ERROR = -1008;\\n    public static final int IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE = -1009;\\n    public static final int IABHELPER_INVALID_CONSUMPTION = -1010;\\n\\n    // Keys for the responses from InAppBillingService\\n    public static final String RESPONSE_CODE = \\\"RESPONSE_CODE\\\";\\n    public static final String RESPONSE_GET_SKU_DETAILS_LIST = \\\"DETAILS_LIST\\\";\\n    public static final String RESPONSE_BUY_INTENT = \\\"BUY_INTENT\\\";\\n    public static final String RESPONSE_INAPP_PURCHASE_DATA = \\\"INAPP_PURCHASE_DATA\\\";\\n    public static final String RESPONSE_INAPP_SIGNATURE = \\\"INAPP_DATA_SIGNATURE\\\";\\n    public static final String RESPONSE_INAPP_ITEM_LIST = \\\"INAPP_PURCHASE_ITEM_LIST\\\";\\n    public static final String RESPONSE_INAPP_PURCHASE_DATA_LIST = \\\"INAPP_PURCHASE_DATA_LIST\\\";\\n    public static final String RESPONSE_INAPP_SIGNATURE_LIST = \\\"INAPP_DATA_SIGNATURE_LIST\\\";\\n    public static final String INAPP_CONTINUATION_TOKEN = \\\"INAPP_CONTINUATION_TOKEN\\\";\\n\\n    // Item types\\n    public static final String ITEM_TYPE_INAPP = \\\"inapp\\\";\\n    public static final String ITEM_TYPE_SUBS = \\\"subs\\\";\\n\\n    // some fields on the getSkuDetails response bundle\\n    public static final String GET_SKU_DETAILS_ITEM_LIST = \\\"ITEM_ID_LIST\\\";\\n    public static final String GET_SKU_DETAILS_ITEM_TYPE_LIST = \\\"ITEM_TYPE_LIST\\\";\\n\\n    /**\\n     * Creates an instance. After creation, it will not yet be ready to use. You must perform\\n     * setup by calling {@link #startSetup} and wait for setup to complete. This constructor does not\\n     * block and is safe to call from a UI thread.\\n     *\\n     * @param ctx Your application or Activity context. Needed to bind to the in-app billing service.\\n     * @param base64PublicKey Your application's public key, encoded in base64.\\n     *     This is used for verification of purchase signatures. You can find your app's base64-encoded\\n     *     public key in your application's page on Google Play Developer Console. Note that this\\n     *     is NOT your \\\"developer public key\\\".\\n     */\\n    public IabHelper(Context ctx, String base64PublicKey) {\\n        mContext = ctx.getApplicationContext();\\n        mSignatureBase64 = base64PublicKey;\\n        logDebug(\\\"IAB helper created.\\\");\\n    }\\n\\n    /**\\n     * Enables or disable debug logging through LogCat.\\n     */\\n    public void enableDebugLogging(boolean enable, String tag) {\\n        checkNotDisposed();\\n        mDebugLog = enable;\\n        mDebugTag = tag;\\n    }\\n\\n    public void enableDebugLogging(boolean enable) {\\n        checkNotDisposed();\\n        mDebugLog = enable;\\n    }\\n\\n    /**\\n     * Callback for setup process. This listener's {@link #onIabSetupFinished} method is called\\n     * when the setup process is complete.\\n     */\\n    public interface OnIabSetupFinishedListener {\\n        /**\\n         * Called to notify that setup is complete.\\n         *\\n         * @param result The result of the setup process.\\n         */\\n        public void onIabSetupFinished(IabResult result);\\n    }\\n\\n    /**\\n     * Starts the setup process. This will start up the setup process asynchronously.\\n     * You will be notified through the listener when the setup process is complete.\\n     * This method is safe to call from a UI thread.\\n     *\\n     * @param listener The listener to notify when the setup process is complete.\\n     */\\n    public void startSetup(final OnIabSetupFinishedListener listener) {\\n        // If already set up, can't do it again.\\n        checkNotDisposed();\\n        if (mSetupDone) throw new IllegalStateException(\\\"IAB helper is already set up.\\\");\\n\\n        // Connection to IAB service\\n        logDebug(\\\"Starting in-app billing setup.\\\");\\n        mServiceConn = new ServiceConnection() {\\n            @Override\\n            public void onServiceDisconnected(ComponentName name) {\\n                logDebug(\\\"Billing service disconnected.\\\");\\n                mService = null;\\n            }\\n\\n            @Override\\n            public void onServiceConnected(ComponentName name, IBinder service) {\\n                if (mDisposed) return;\\n                logDebug(\\\"Billing service connected.\\\");\\n                mService = IInAppBillingService.Stub.asInterface(service);\\n                String packageName = mContext.getPackageName();\\n                try {\\n                    logDebug(\\\"Checking for in-app billing 3 support.\\\");\\n\\n                    // check for in-app billing v3 support\\n                    int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);\\n                    if (response != BILLING_RESPONSE_RESULT_OK) {\\n                        if (listener != null) listener.onIabSetupFinished(new IabResult(response,\\n                                \\\"Error checking for billing v3 support.\\\"));\\n\\n                        // if in-app purchases aren't supported, neither are subscriptions.\\n                        mSubscriptionsSupported = false;\\n                        return;\\n                    }\\n                    logDebug(\\\"In-app billing version 3 supported for \\\" + packageName);\\n\\n                    // check for v3 subscriptions support\\n                    response = mService.isBillingSupported(3, packageName, ITEM_TYPE_SUBS);\\n                    if (response == BILLING_RESPONSE_RESULT_OK) {\\n                        logDebug(\\\"Subscriptions AVAILABLE.\\\");\\n                        mSubscriptionsSupported = true;\\n                    }\\n                    else {\\n                        logDebug(\\\"Subscriptions NOT AVAILABLE. Response: \\\" + response);\\n                    }\\n\\n                    mSetupDone = true;\\n                }\\n                catch (RemoteException e) {\\n                    if (listener != null) {\\n                        listener.onIabSetupFinished(new IabResult(IABHELPER_REMOTE_EXCEPTION,\\n                                                    \\\"RemoteException while setting up in-app billing.\\\"));\\n                    }\\n                    e.printStackTrace();\\n                    return;\\n                }\\n\\n                if (listener != null) {\\n                    listener.onIabSetupFinished(new IabResult(BILLING_RESPONSE_RESULT_OK, \\\"Setup successful.\\\"));\\n                }\\n            }\\n        };\\n\\n        Intent serviceIntent = new Intent(\\\"com.android.vending.billing.InAppBillingService.BIND\\\");\\n        serviceIntent.setPackage(\\\"com.android.vending\\\");\\n        boolean successfullyBound = mContext.bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);\\n\\n        if (!successfullyBound) {\\n            // no service available to handle that Intent\\n            if (listener != null) {\\n                listener.onIabSetupFinished(\\n                        new IabResult(BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE,\\n                                \\\"Billing service unavailable on device.\\\"));\\n            }\\n        }\\n       /* if (!mContext.getPackageManager().queryIntentServices(serviceIntent, 0).isEmpty()) {\\n            // service available to handle that Intent\\n            mContext.bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);\\n        }\\n        else {\\n            // no service available to handle that Intent\\n            if (listener != null) {\\n                listener.onIabSetupFinished(\\n                        new IabResult(BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE,\\n                        \\\"Billing service unavailable on device.\\\"));\\n            }\\n        }*/\\n    }\\n\\n    /**\\n     * Dispose of object, releasing resources. It's very important to call this\\n     * method when you are done with this object. It will release any resources\\n     * used by it such as service connections. Naturally, once the object is\\n     * disposed of, it can't be used again.\\n     */\\n    public void dispose() {\\n        logDebug(\\\"Disposing.\\\");\\n        mSetupDone = false;\\n        if (mServiceConn != null) {\\n            logDebug(\\\"Unbinding from service.\\\");\\n            if (mContext != null) mContext.unbindService(mServiceConn);\\n        }\\n        mDisposed = true;\\n        mContext = null;\\n        mServiceConn = null;\\n        mService = null;\\n        mPurchaseListener = null;\\n    }\\n\\n    private void checkNotDisposed() {\\n        if (mDisposed) throw new IllegalStateException(\\\"IabHelper was disposed of, so it cannot be used.\\\");\\n    }\\n\\n    /** Returns whether subscriptions are supported. */\\n    public boolean subscriptionsSupported() {\\n        checkNotDisposed();\\n        return mSubscriptionsSupported;\\n    }\\n\\n\\n    /**\\n     * Callback that notifies when a purchase is finished.\\n     */\\n    public interface OnIabPurchaseFinishedListener {\\n        /**\\n         * Called to notify that an in-app purchase finished. If the purchase was successful,\\n         * then the sku parameter specifies which item was purchased. If the purchase failed,\\n         * the sku and extraData parameters may or may not be null, depending on how far the purchase\\n         * process went.\\n         *\\n         * @param result The result of the purchase.\\n         * @param info The purchase information (null if purchase failed)\\n         */\\n        public void onIabPurchaseFinished(IabResult result, Purchase info);\\n    }\\n\\n    // The listener registered on launchPurchaseFlow, which we have to call back when\\n    // the purchase finishes\\n    OnIabPurchaseFinishedListener mPurchaseListener;\\n\\n    public void launchPurchaseFlow(Activity act, String sku, int requestCode, OnIabPurchaseFinishedListener listener) {\\n        launchPurchaseFlow(act, sku, requestCode, listener, \\\"\\\");\\n    }\\n\\n    public void launchPurchaseFlow(Activity act, String sku, int requestCode,\\n            OnIabPurchaseFinishedListener listener, String extraData) {\\n        launchPurchaseFlow(act, sku, ITEM_TYPE_INAPP, requestCode, listener, extraData);\\n    }\\n\\n    public void launchSubscriptionPurchaseFlow(Activity act, String sku, int requestCode,\\n            OnIabPurchaseFinishedListener listener) {\\n        launchSubscriptionPurchaseFlow(act, sku, requestCode, listener, \\\"\\\");\\n    }\\n\\n    public void launchSubscriptionPurchaseFlow(Activity act, String sku, int requestCode,\\n            OnIabPurchaseFinishedListener listener, String extraData) {\\n        launchPurchaseFlow(act, sku, ITEM_TYPE_SUBS, requestCode, listener, extraData);\\n    }\\n\\n    /**\\n     * Initiate the UI flow for an in-app purchase. Call this method to initiate an in-app purchase,\\n     * which will involve bringing up the Google Play screen. The calling activity will be paused while\\n     * the user interacts with Google Play, and the result will be delivered via the activity's\\n     * {@link Activity#onActivityResult} method, at which point you must call\\n     * this object's {@link #handleActivityResult} method to continue the purchase flow. This method\\n     * MUST be called from the UI thread of the Activity.\\n     *\\n     * @param act The calling activity.\\n     * @param sku The sku of the item to purchase.\\n     * @param itemType indicates if it's a product or a subscription (ITEM_TYPE_INAPP or ITEM_TYPE_SUBS)\\n     * @param requestCode A request code (to differentiate from other responses --\\n     *     as in {@link Activity#startActivityForResult}).\\n     * @param listener The listener to notify when the purchase process finishes\\n     * @param extraData Extra data (developer payload), which will be returned with the purchase data\\n     *     when the purchase completes. This extra data will be permanently bound to that purchase\\n     *     and will always be returned when the purchase is queried.\\n     */\\n    public void launchPurchaseFlow(Activity act, String sku, String itemType, int requestCode,\\n                        OnIabPurchaseFinishedListener listener, String extraData) {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"launchPurchaseFlow\\\");\\n        flagStartAsync(\\\"launchPurchaseFlow\\\");\\n        IabResult result;\\n\\n        if (itemType.equals(ITEM_TYPE_SUBS) && !mSubscriptionsSupported) {\\n            IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,\\n                    \\\"Subscriptions are not available.\\\");\\n            flagEndAsync();\\n            if (listener != null) listener.onIabPurchaseFinished(r, null);\\n            return;\\n        }\\n\\n        try {\\n            logDebug(\\\"Constructing buy intent for \\\" + sku + \\\", item type: \\\" + itemType);\\n            Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);\\n            int response = getResponseCodeFromBundle(buyIntentBundle);\\n            if (response != BILLING_RESPONSE_RESULT_OK) {\\n                logError(\\\"Unable to buy item, Error response: \\\" + getResponseDesc(response));\\n                flagEndAsync();\\n                result = new IabResult(response, \\\"Unable to buy item\\\");\\n                if (listener != null) listener.onIabPurchaseFinished(result, null);\\n                return;\\n            }\\n\\n            PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);\\n            logDebug(\\\"Launching buy intent for \\\" + sku + \\\". Request code: \\\" + requestCode);\\n            mRequestCode = requestCode;\\n            mPurchaseListener = listener;\\n            mPurchasingItemType = itemType;\\n            act.startIntentSenderForResult(pendingIntent.getIntentSender(),\\n                                           requestCode, new Intent(),\\n                                           Integer.valueOf(0), Integer.valueOf(0),\\n                                           Integer.valueOf(0));\\n        }\\n        catch (SendIntentException e) {\\n            logError(\\\"SendIntentException while launching purchase flow for sku \\\" + sku);\\n            e.printStackTrace();\\n            flagEndAsync();\\n\\n            result = new IabResult(IABHELPER_SEND_INTENT_FAILED, \\\"Failed to send intent.\\\");\\n            if (listener != null) listener.onIabPurchaseFinished(result, null);\\n        }\\n        catch (RemoteException e) {\\n            logError(\\\"RemoteException while launching purchase flow for sku \\\" + sku);\\n            e.printStackTrace();\\n            flagEndAsync();\\n\\n            result = new IabResult(IABHELPER_REMOTE_EXCEPTION, \\\"Remote exception while starting purchase flow\\\");\\n            if (listener != null) listener.onIabPurchaseFinished(result, null);\\n        }\\n    }\\n\\n    /**\\n     * Handles an activity result that's part of the purchase flow in in-app billing. If you\\n     * are calling {@link #launchPurchaseFlow}, then you must call this method from your\\n     * Activity's {@link Activity@onActivityResult} method. This method\\n     * MUST be called from the UI thread of the Activity.\\n     *\\n     * @param requestCode The requestCode as you received it.\\n     * @param resultCode The resultCode as you received it.\\n     * @param data The data (Intent) as you received it.\\n     * @return Returns true if the result was related to a purchase flow and was handled;\\n     *     false if the result was not related to a purchase, in which case you should\\n     *     handle it normally.\\n     */\\n    public boolean handleActivityResult(int requestCode, int resultCode, Intent data) {\\n        IabResult result;\\n        if (requestCode != mRequestCode) return false;\\n\\n        checkNotDisposed();\\n        checkSetupDone(\\\"handleActivityResult\\\");\\n\\n        // end of async purchase operation that started on launchPurchaseFlow\\n        flagEndAsync();\\n\\n        if (data == null) {\\n            logError(\\\"Null data in IAB activity result.\\\");\\n            result = new IabResult(IABHELPER_BAD_RESPONSE, \\\"Null data in IAB result\\\");\\n            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n            return true;\\n        }\\n\\n        int responseCode = getResponseCodeFromIntent(data);\\n        String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);\\n        String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);\\n\\n        if (resultCode == Activity.RESULT_OK && responseCode == BILLING_RESPONSE_RESULT_OK) {\\n            logDebug(\\\"Successful resultcode from purchase activity.\\\");\\n            logDebug(\\\"Purchase data: \\\" + purchaseData);\\n            logDebug(\\\"Data signature: \\\" + dataSignature);\\n            logDebug(\\\"Extras: \\\" + data.getExtras());\\n            logDebug(\\\"Expected item type: \\\" + mPurchasingItemType);\\n\\n            if (purchaseData == null || dataSignature == null) {\\n                logError(\\\"BUG: either purchaseData or dataSignature is null.\\\");\\n                logDebug(\\\"Extras: \\\" + data.getExtras().toString());\\n                result = new IabResult(IABHELPER_UNKNOWN_ERROR, \\\"IAB returned null purchaseData or dataSignature\\\");\\n                if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n                return true;\\n            }\\n\\n            Purchase purchase = null;\\n            try {\\n                purchase = new Purchase(mPurchasingItemType, purchaseData, dataSignature);\\n                String sku = purchase.getSku();\\n\\n                // Verify signature\\n                if (!Security.verifyPurchase(mSignatureBase64, purchaseData, dataSignature)) {\\n                    logError(\\\"Purchase signature verification FAILED for sku \\\" + sku);\\n                    result = new IabResult(IABHELPER_VERIFICATION_FAILED, \\\"Signature verification failed for sku \\\" + sku);\\n                    if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, purchase);\\n                    return true;\\n                }\\n                logDebug(\\\"Purchase signature successfully verified.\\\");\\n            }\\n            catch (JSONException e) {\\n                logError(\\\"Failed to parse purchase data.\\\");\\n                e.printStackTrace();\\n                result = new IabResult(IABHELPER_BAD_RESPONSE, \\\"Failed to parse purchase data.\\\");\\n                if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n                return true;\\n            }\\n\\n            if (mPurchaseListener != null) {\\n                mPurchaseListener.onIabPurchaseFinished(new IabResult(BILLING_RESPONSE_RESULT_OK, \\\"Success\\\"), purchase);\\n            }\\n        }\\n        else if (resultCode == Activity.RESULT_OK) {\\n            // result code was OK, but in-app billing response was not OK.\\n            logDebug(\\\"Result code was OK but in-app billing response was not OK: \\\" + getResponseDesc(responseCode));\\n            if (mPurchaseListener != null) {\\n                result = new IabResult(responseCode, \\\"Problem purchashing item.\\\");\\n                mPurchaseListener.onIabPurchaseFinished(result, null);\\n            }\\n        }\\n        else if (resultCode == Activity.RESULT_CANCELED) {\\n            logDebug(\\\"Purchase canceled - Response: \\\" + getResponseDesc(responseCode));\\n            result = new IabResult(IABHELPER_USER_CANCELLED, \\\"User canceled.\\\");\\n            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n        }\\n        else {\\n            logError(\\\"Purchase failed. Result code: \\\" + Integer.toString(resultCode)\\n                    + \\\". Response: \\\" + getResponseDesc(responseCode));\\n            result = new IabResult(IABHELPER_UNKNOWN_PURCHASE_RESPONSE, \\\"Unknown purchase response.\\\");\\n            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n        }\\n        return true;\\n    }\\n\\n    public Inventory queryInventory(boolean querySkuDetails, List<String> moreSkus) throws IabException {\\n        return queryInventory(querySkuDetails, moreSkus, null);\\n    }\\n\\n    /**\\n     * Queries the inventory. This will query all owned items from the server, as well as\\n     * information on additional skus, if specified. This method may block or take long to execute.\\n     * Do not call from a UI thread. For that, use the non-blocking version {@link #refreshInventoryAsync}.\\n     *\\n     * @param querySkuDetails if true, SKU details (price, description, etc) will be queried as well\\n     *     as purchase information.\\n     * @param moreItemSkus additional PRODUCT skus to query information on, regardless of ownership.\\n     *     Ignored if null or if querySkuDetails is false.\\n     * @param moreSubsSkus additional SUBSCRIPTIONS skus to query information on, regardless of ownership.\\n     *     Ignored if null or if querySkuDetails is false.\\n     * @throws IabException if a problem occurs while refreshing the inventory.\\n     */\\n    public Inventory queryInventory(boolean querySkuDetails, List<String> moreItemSkus,\\n                                        List<String> moreSubsSkus) throws IabException {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"queryInventory\\\");\\n        try {\\n            Inventory inv = new Inventory();\\n            int r = queryPurchases(inv, ITEM_TYPE_INAPP);\\n            if (r != BILLING_RESPONSE_RESULT_OK) {\\n                throw new IabException(r, \\\"Error refreshing inventory (querying owned items).\\\");\\n            }\\n\\n            if (querySkuDetails) {\\n                r = querySkuDetails(ITEM_TYPE_INAPP, inv, moreItemSkus);\\n                if (r != BILLING_RESPONSE_RESULT_OK) {\\n                    throw new IabException(r, \\\"Error refreshing inventory (querying prices of items).\\\");\\n                }\\n            }\\n\\n            // if subscriptions are supported, then also query for subscriptions\\n            if (mSubscriptionsSupported) {\\n                r = queryPurchases(inv, ITEM_TYPE_SUBS);\\n                if (r != BILLING_RESPONSE_RESULT_OK) {\\n                    throw new IabException(r, \\\"Error refreshing inventory (querying owned subscriptions).\\\");\\n                }\\n\\n                if (querySkuDetails) {\\n                    r = querySkuDetails(ITEM_TYPE_SUBS, inv, moreItemSkus);\\n                    if (r != BILLING_RESPONSE_RESULT_OK) {\\n                        throw new IabException(r, \\\"Error refreshing inventory (querying prices of subscriptions).\\\");\\n                    }\\n                }\\n            }\\n\\n            return inv;\\n        }\\n        catch (RemoteException e) {\\n            throw new IabException(IABHELPER_REMOTE_EXCEPTION, \\\"Remote exception while refreshing inventory.\\\", e);\\n        }\\n        catch (JSONException e) {\\n            throw new IabException(IABHELPER_BAD_RESPONSE, \\\"Error parsing JSON response while refreshing inventory.\\\", e);\\n        }\\n    }\\n\\n    /**\\n     * Listener that notifies when an inventory query operation completes.\\n     */\\n    public interface QueryInventoryFinishedListener {\\n        /**\\n         * Called to notify that an inventory query operation completed.\\n         *\\n         * @param result The result of the operation.\\n         * @param inv The inventory.\\n         */\\n        public void onQueryInventoryFinished(IabResult result, Inventory inv);\\n    }\\n\\n\\n    /**\\n     * Asynchronous wrapper for inventory query. This will perform an inventory\\n     * query as described in {@link #queryInventory}, but will do so asynchronously\\n     * and call back the specified listener upon completion. This method is safe to\\n     * call from a UI thread.\\n     *\\n     * @param querySkuDetails as in {@link #queryInventory}\\n     * @param moreSkus as in {@link #queryInventory}\\n     * @param listener The listener to notify when the refresh operation completes.\\n     */\\n    public void queryInventoryAsync(final boolean querySkuDetails,\\n                               final List<String> moreSkus,\\n                               final QueryInventoryFinishedListener listener) {\\n        final Handler handler = new Handler();\\n        checkNotDisposed();\\n        checkSetupDone(\\\"queryInventory\\\");\\n        flagStartAsync(\\\"refresh inventory\\\");\\n        (new Thread(new Runnable() {\\n            public void run() {\\n                IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, \\\"Inventory refresh successful.\\\");\\n                Inventory inv = null;\\n                try {\\n                    inv = queryInventory(querySkuDetails, moreSkus);\\n                }\\n                catch (IabException ex) {\\n                    result = ex.getResult();\\n                }\\n\\n                flagEndAsync();\\n\\n                final IabResult result_f = result;\\n                final Inventory inv_f = inv;\\n                if (!mDisposed && listener != null) {\\n                    handler.post(new Runnable() {\\n                        public void run() {\\n                            listener.onQueryInventoryFinished(result_f, inv_f);\\n                        }\\n                    });\\n                }\\n            }\\n        })).start();\\n    }\\n\\n    public void queryInventoryAsync(QueryInventoryFinishedListener listener) {\\n        queryInventoryAsync(true, null, listener);\\n    }\\n\\n    public void queryInventoryAsync(boolean querySkuDetails, QueryInventoryFinishedListener listener) {\\n        queryInventoryAsync(querySkuDetails, null, listener);\\n    }\\n\\n\\n    /**\\n     * Consumes a given in-app product. Consuming can only be done on an item\\n     * that's owned, and as a result of consumption, the user will no longer own it.\\n     * This method may block or take long to return. Do not call from the UI thread.\\n     * For that, see {@link #consumeAsync}.\\n     *\\n     * @param itemInfo The PurchaseInfo that represents the item to consume.\\n     * @throws IabException if there is a problem during consumption.\\n     */\\n    void consume(Purchase itemInfo) throws IabException {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"consume\\\");\\n\\n        if (!itemInfo.mItemType.equals(ITEM_TYPE_INAPP)) {\\n            throw new IabException(IABHELPER_INVALID_CONSUMPTION,\\n                    \\\"Items of type '\\\" + itemInfo.mItemType + \\\"' can't be consumed.\\\");\\n        }\\n\\n        try {\\n            String token = itemInfo.getToken();\\n            String sku = itemInfo.getSku();\\n            if (token == null || token.equals(\\\"\\\")) {\\n               logError(\\\"Can't consume \\\"+ sku + \\\". No token.\\\");\\n               throw new IabException(IABHELPER_MISSING_TOKEN, \\\"PurchaseInfo is missing token for sku: \\\"\\n                   + sku + \\\" \\\" + itemInfo);\\n            }\\n\\n            logDebug(\\\"Consuming sku: \\\" + sku + \\\", token: \\\" + token);\\n            int response = mService.consumePurchase(3, mContext.getPackageName(), token);\\n            if (response == BILLING_RESPONSE_RESULT_OK) {\\n               logDebug(\\\"Successfully consumed sku: \\\" + sku);\\n            }\\n            else {\\n               logDebug(\\\"Error consuming consuming sku \\\" + sku + \\\". \\\" + getResponseDesc(response));\\n               throw new IabException(response, \\\"Error consuming sku \\\" + sku);\\n            }\\n        }\\n        catch (RemoteException e) {\\n            throw new IabException(IABHELPER_REMOTE_EXCEPTION, \\\"Remote exception while consuming. PurchaseInfo: \\\" + itemInfo, e);\\n        }\\n    }\\n\\n    /**\\n     * Callback that notifies when a consumption operation finishes.\\n     */\\n    public interface OnConsumeFinishedListener {\\n        /**\\n         * Called to notify that a consumption has finished.\\n         *\\n         * @param purchase The purchase that was (or was to be) consumed.\\n         * @param result The result of the consumption operation.\\n         */\\n        public void onConsumeFinished(Purchase purchase, IabResult result);\\n    }\\n\\n    /**\\n     * Callback that notifies when a multi-item consumption operation finishes.\\n     */\\n    public interface OnConsumeMultiFinishedListener {\\n        /**\\n         * Called to notify that a consumption of multiple items has finished.\\n         *\\n         * @param purchases The purchases that were (or were to be) consumed.\\n         * @param results The results of each consumption operation, corresponding to each\\n         *     sku.\\n         */\\n        public void onConsumeMultiFinished(List<Purchase> purchases, List<IabResult> results);\\n    }\\n\\n    /**\\n     * Asynchronous wrapper to item consumption. Works like {@link #consume}, but\\n     * performs the consumption in the background and notifies completion through\\n     * the provided listener. This method is safe to call from a UI thread.\\n     *\\n     * @param purchase The purchase to be consumed.\\n     * @param listener The listener to notify when the consumption operation finishes.\\n     */\\n    public void consumeAsync(Purchase purchase, OnConsumeFinishedListener listener) {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"consume\\\");\\n        List<Purchase> purchases = new ArrayList<Purchase>();\\n        purchases.add(purchase);\\n        consumeAsyncInternal(purchases, listener, null);\\n    }\\n\\n    /**\\n     * Same as {@link consumeAsync}, but for multiple items at once.\\n     * @param purchases The list of PurchaseInfo objects representing the purchases to consume.\\n     * @param listener The listener to notify when the consumption operation finishes.\\n     */\\n    public void consumeAsync(List<Purchase> purchases, OnConsumeMultiFinishedListener listener) {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"consume\\\");\\n        consumeAsyncInternal(purchases, null, listener);\\n    }\\n\\n    /**\\n     * Returns a human-readable description for the given response code.\\n     *\\n     * @param code The response code\\n     * @return A human-readable string explaining the result code.\\n     *     It also includes the result code numerically.\\n     */\\n    public static String getResponseDesc(int code) {\\n        String[] iab_msgs = (\\\"0:OK/1:User Canceled/2:Unknown/\\\" +\\n                \\\"3:Billing Unavailable/4:Item unavailable/\\\" +\\n                \\\"5:Developer Error/6:Error/7:Item Already Owned/\\\" +\\n                \\\"8:Item not owned\\\").split(\\\"/\\\");\\n        String[] iabhelper_msgs = (\\\"0:OK/-1001:Remote exception during initialization/\\\" +\\n                                   \\\"-1002:Bad response received/\\\" +\\n                                   \\\"-1003:Purchase signature verification failed/\\\" +\\n                                   \\\"-1004:Send intent failed/\\\" +\\n                                   \\\"-1005:User cancelled/\\\" +\\n                                   \\\"-1006:Unknown purchase response/\\\" +\\n                                   \\\"-1007:Missing token/\\\" +\\n                                   \\\"-1008:Unknown error/\\\" +\\n                                   \\\"-1009:Subscriptions not available/\\\" +\\n                                   \\\"-1010:Invalid consumption attempt\\\").split(\\\"/\\\");\\n\\n        if (code <= IABHELPER_ERROR_BASE) {\\n            int index = IABHELPER_ERROR_BASE - code;\\n            if (index >= 0 && index < iabhelper_msgs.length) return iabhelper_msgs[index];\\n            else return String.valueOf(code) + \\\":Unknown IAB Helper Error\\\";\\n        }\\n        else if (code < 0 || code >= iab_msgs.length)\\n            return String.valueOf(code) + \\\":Unknown\\\";\\n        else\\n            return iab_msgs[code];\\n    }\\n\\n\\n    // Checks that setup was done; if not, throws an exception.\\n    void checkSetupDone(String operation) {\\n        if (!mSetupDone) {\\n            logError(\\\"Illegal state for operation (\\\" + operation + \\\"): IAB helper is not set up.\\\");\\n            throw new IllegalStateException(\\\"IAB helper is not set up. Can't perform operation: \\\" + operation);\\n        }\\n    }\\n\\n    // Workaround to bug where sometimes response codes come as Long instead of Integer\\n    int getResponseCodeFromBundle(Bundle b) {\\n        Object o = b.get(RESPONSE_CODE);\\n        if (o == null) {\\n            logDebug(\\\"Bundle with null response code, assuming OK (known issue)\\\");\\n            return BILLING_RESPONSE_RESULT_OK;\\n        }\\n        else if (o instanceof Integer) return ((Integer)o).intValue();\\n        else if (o instanceof Long) return (int)((Long)o).longValue();\\n        else {\\n            logError(\\\"Unexpected type for bundle response code.\\\");\\n            logError(o.getClass().getName());\\n            throw new RuntimeException(\\\"Unexpected type for bundle response code: \\\" + o.getClass().getName());\\n        }\\n    }\\n\\n    // Workaround to bug where sometimes response codes come as Long instead of Integer\\n    int getResponseCodeFromIntent(Intent i) {\\n        Object o = i.getExtras().get(RESPONSE_CODE);\\n        if (o == null) {\\n            logError(\\\"Intent with no response code, assuming OK (known issue)\\\");\\n            return BILLING_RESPONSE_RESULT_OK;\\n        }\\n        else if (o instanceof Integer) return ((Integer)o).intValue();\\n        else if (o instanceof Long) return (int)((Long)o).longValue();\\n        else {\\n            logError(\\\"Unexpected type for intent response code.\\\");\\n            logError(o.getClass().getName());\\n            throw new RuntimeException(\\\"Unexpected type for intent response code: \\\" + o.getClass().getName());\\n        }\\n    }\\n\\n    void flagStartAsync(String operation) {\\n        if (mAsyncInProgress) throw new IllegalStateException(\\\"Can't start async operation (\\\" +\\n                operation + \\\") because another async operation(\\\" + mAsyncOperation + \\\") is in progress.\\\");\\n        mAsyncOperation = operation;\\n        mAsyncInProgress = true;\\n        logDebug(\\\"Starting async operation: \\\" + operation);\\n    }\\n\\n    public void flagEndAsync() {\\n        logDebug(\\\"Ending async operation: \\\" + mAsyncOperation);\\n        mAsyncOperation = \\\"\\\";\\n        mAsyncInProgress = false;\\n    }\\n\\n\\n    int queryPurchases(Inventory inv, String itemType) throws JSONException, RemoteException {\\n        // Query purchases\\n\\n        if (mService == null || mContext == null) {\\n            logError(\\\"Our service and/or our context are null.  Exiting.\\\");\\n            return IABHELPER_UNKNOWN_ERROR;\\n        }\\n\\n        logDebug(\\\"Querying owned items, item type: \\\" + itemType);\\n        logDebug(\\\"Package name: \\\" + mContext.getPackageName());\\n        boolean verificationFailed = false;\\n        String continueToken = null;\\n\\n        do {\\n            logDebug(\\\"Calling getPurchases with continuation token: \\\" + continueToken);\\n            Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),\\n                    itemType, continueToken);\\n\\n            int response = getResponseCodeFromBundle(ownedItems);\\n            logDebug(\\\"Owned items response: \\\" + String.valueOf(response));\\n            if (response != BILLING_RESPONSE_RESULT_OK) {\\n                logDebug(\\\"getPurchases() failed: \\\" + getResponseDesc(response));\\n                return response;\\n            }\\n            if (!ownedItems.containsKey(RESPONSE_INAPP_ITEM_LIST)\\n                    || !ownedItems.containsKey(RESPONSE_INAPP_PURCHASE_DATA_LIST)\\n                    || !ownedItems.containsKey(RESPONSE_INAPP_SIGNATURE_LIST)) {\\n                logError(\\\"Bundle returned from getPurchases() doesn't contain required fields.\\\");\\n                return IABHELPER_BAD_RESPONSE;\\n            }\\n\\n            ArrayList<String> ownedSkus = ownedItems.getStringArrayList(\\n                        RESPONSE_INAPP_ITEM_LIST);\\n            ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(\\n                        RESPONSE_INAPP_PURCHASE_DATA_LIST);\\n            ArrayList<String> signatureList = ownedItems.getStringArrayList(\\n                        RESPONSE_INAPP_SIGNATURE_LIST);\\n\\n            for (int i = 0; i < purchaseDataList.size(); ++i) {\\n                String purchaseData = purchaseDataList.get(i);\\n                String signature = signatureList.get(i);\\n                String sku = ownedSkus.get(i);\\n                if (Security.verifyPurchase(mSignatureBase64, purchaseData, signature)) {\\n                    logDebug(\\\"Sku is owned: \\\" + sku);\\n                    Purchase purchase = new Purchase(itemType, purchaseData, signature);\\n\\n                    if (TextUtils.isEmpty(purchase.getToken())) {\\n                        logWarn(\\\"BUG: empty/null token!\\\");\\n                        logDebug(\\\"Purchase data: \\\" + purchaseData);\\n                    }\\n\\n                    // Record ownership and token\\n                    inv.addPurchase(purchase);\\n                }\\n                else {\\n                    logWarn(\\\"Purchase signature verification **FAILED**. Not adding item.\\\");\\n                    logDebug(\\\"   Purchase data: \\\" + purchaseData);\\n                    logDebug(\\\"   Signature: \\\" + signature);\\n                    verificationFailed = true;\\n                }\\n            }\\n\\n            continueToken = ownedItems.getString(INAPP_CONTINUATION_TOKEN);\\n            logDebug(\\\"Continuation token: \\\" + continueToken);\\n        } while (!TextUtils.isEmpty(continueToken));\\n\\n        return verificationFailed ? IABHELPER_VERIFICATION_FAILED : BILLING_RESPONSE_RESULT_OK;\\n    }\\n\\n    int querySkuDetails(String itemType, Inventory inv, List<String> moreSkus)\\n                                throws RemoteException, JSONException {\\n        logDebug(\\\"Querying SKU details.\\\");\\n        ArrayList<String> skuList = new ArrayList<String>();\\n        skuList.addAll(inv.getAllOwnedSkus(itemType));\\n        if (moreSkus != null) {\\n            for (String sku : moreSkus) {\\n                if (!skuList.contains(sku)) {\\n                    skuList.add(sku);\\n                }\\n            }\\n        }\\n\\n        if (skuList.size() == 0) {\\n            logDebug(\\\"queryPrices: nothing to do because there are no SKUs.\\\");\\n            return BILLING_RESPONSE_RESULT_OK;\\n        }\\n\\n        Bundle querySkus = new Bundle();\\n        querySkus.putStringArrayList(GET_SKU_DETAILS_ITEM_LIST, skuList);\\n        Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),\\n                itemType, querySkus);\\n\\n        if (!skuDetails.containsKey(RESPONSE_GET_SKU_DETAILS_LIST)) {\\n            int response = getResponseCodeFromBundle(skuDetails);\\n            if (response != BILLING_RESPONSE_RESULT_OK) {\\n                logDebug(\\\"getSkuDetails() failed: \\\" + getResponseDesc(response));\\n                return response;\\n            }\\n            else {\\n                logError(\\\"getSkuDetails() returned a bundle with neither an error nor a detail list.\\\");\\n                return IABHELPER_BAD_RESPONSE;\\n            }\\n        }\\n\\n        ArrayList<String> responseList = skuDetails.getStringArrayList(\\n                RESPONSE_GET_SKU_DETAILS_LIST);\\n\\n        for (String thisResponse : responseList) {\\n            SkuDetails d = new SkuDetails(itemType, thisResponse);\\n            logDebug(\\\"Got sku details: \\\" + d);\\n            inv.addSkuDetails(d);\\n        }\\n        return BILLING_RESPONSE_RESULT_OK;\\n    }\\n\\n\\n    void consumeAsyncInternal(final List<Purchase> purchases,\\n                              final OnConsumeFinishedListener singleListener,\\n                              final OnConsumeMultiFinishedListener multiListener) {\\n        final Handler handler = new Handler();\\n        flagStartAsync(\\\"consume\\\");\\n        (new Thread(new Runnable() {\\n            public void run() {\\n                final List<IabResult> results = new ArrayList<IabResult>();\\n                for (Purchase purchase : purchases) {\\n                    try {\\n                        consume(purchase);\\n                        results.add(new IabResult(BILLING_RESPONSE_RESULT_OK, \\\"Successful consume of sku \\\" + purchase.getSku()));\\n                    }\\n                    catch (IabException ex) {\\n                        results.add(ex.getResult());\\n                    }\\n                }\\n\\n                flagEndAsync();\\n                if (!mDisposed && singleListener != null) {\\n                    handler.post(new Runnable() {\\n                        public void run() {\\n                            singleListener.onConsumeFinished(purchases.get(0), results.get(0));\\n                        }\\n                    });\\n                }\\n                if (!mDisposed && multiListener != null) {\\n                    handler.post(new Runnable() {\\n                        public void run() {\\n                            multiListener.onConsumeMultiFinished(purchases, results);\\n                        }\\n                    });\\n                }\\n            }\\n        })).start();\\n    }\\n\\n    void logDebug(String msg) {\\n        if (mDebugLog) Log.d(mDebugTag, msg);\\n    }\\n\\n    void logError(String msg) {\\n        Log.e(mDebugTag, \\\"In-app billing error: \\\" + msg);\\n    }\\n\\n    void logWarn(String msg) {\\n        Log.w(mDebugTag, \\\"In-app billing warning: \\\" + msg);\\n    }\\n\\n    public boolean isAsyncInProgress(){\\n        return mAsyncInProgress;\\n    }\\n    public boolean isSetupDone (){\\n        return mSetupDone;\\n    }\\n    public boolean isDisposed (){\\n        return mDisposed;\\n    }\\n}\"}, {\"identifier\":\"IabResult\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/iap/IabResult.java\", \"snippet\":\"public class IabResult {\\n    int mResponse;\\n    String mMessage;\\n\\n    public IabResult(int response, String message) {\\n        mResponse = response;\\n        if (message == null || message.trim().length() == 0) {\\n            mMessage = IabHelper.getResponseDesc(response);\\n        }\\n        else {\\n            mMessage = message + \\\" (response: \\\" + IabHelper.getResponseDesc(response) + \\\")\\\";\\n        }\\n    }\\n    public int getResponse() { return mResponse; }\\n    public String getMessage() { return mMessage; }\\n    public boolean isSuccess() { return mResponse == IabHelper.BILLING_RESPONSE_RESULT_OK; }\\n    public boolean isFailure() { return !isSuccess(); }\\n    public String toString() { return \\\"IabResult: \\\" + getMessage(); }\\n}\"}, {\"identifier\":\"Inventory\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/iap/Inventory.java\", \"snippet\":\"public class Inventory {\\n    Map<String,SkuDetails> mSkuMap = new HashMap<String,SkuDetails>();\\n    Map<String,Purchase> mPurchaseMap = new HashMap<String,Purchase>();\\n\\n    Inventory() { }\\n\\n    /** Returns the listing details for an in-app product. */\\n    public SkuDetails getSkuDetails(String sku) {\\n        return mSkuMap.get(sku);\\n    }\\n\\n    /** Returns purchase information for a given product, or null if there is no purchase. */\\n    public Purchase getPurchase(String sku) {\\n        return mPurchaseMap.get(sku);\\n    }\\n\\n    /** Returns whether or not there exists a purchase of the given product. */\\n    public boolean hasPurchase(String sku) {\\n        return mPurchaseMap.containsKey(sku);\\n    }\\n\\n    /** Return whether or not details about the given product are available. */\\n    public boolean hasDetails(String sku) {\\n        return mSkuMap.containsKey(sku);\\n    }\\n\\n    /**\\n     * Erase a purchase (locally) from the inventory, given its product ID. This just\\n     * modifies the Inventory object locally and has no effect on the server! This is\\n     * useful when you have an existing Inventory object which you know to be up to date,\\n     * and you have just consumed an item successfully, which means that erasing its\\n     * purchase data from the Inventory you already have is quicker than querying for\\n     * a new Inventory.\\n     */\\n    public void erasePurchase(String sku) {\\n        if (mPurchaseMap.containsKey(sku)) mPurchaseMap.remove(sku);\\n    }\\n\\n    /** Returns a list of all owned product IDs. */\\n    List<String> getAllOwnedSkus() {\\n        return new ArrayList<String>(mPurchaseMap.keySet());\\n    }\\n\\n    /** Returns a list of all owned product IDs of a given type */\\n    List<String> getAllOwnedSkus(String itemType) {\\n        List<String> result = new ArrayList<String>();\\n        for (Purchase p : mPurchaseMap.values()) {\\n            if (p.getItemType().equals(itemType)) result.add(p.getSku());\\n        }\\n        return result;\\n    }\\n\\n    /** Returns a list of all purchases. */\\n    List<Purchase> getAllPurchases() {\\n        return new ArrayList<Purchase>(mPurchaseMap.values());\\n    }\\n\\n    void addSkuDetails(SkuDetails d) {\\n        mSkuMap.put(d.getSku(), d);\\n    }\\n\\n    void addPurchase(Purchase p) {\\n        mPurchaseMap.put(p.getSku(), p);\\n    }\\n}\"}, {\"identifier\":\"Purchase\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/iap/Purchase.java\", \"snippet\":\"public class Purchase {\\n    String mItemType;  // ITEM_TYPE_INAPP or ITEM_TYPE_SUBS\\n    String mOrderId;\\n    String mPackageName;\\n    String mSku;\\n    long mPurchaseTime;\\n    int mPurchaseState;\\n    String mDeveloperPayload;\\n    String mToken;\\n    String mOriginalJson;\\n    String mSignature;\\n\\n    public Purchase(String itemType, String jsonPurchaseInfo, String signature) throws JSONException {\\n        mItemType = itemType;\\n        mOriginalJson = jsonPurchaseInfo;\\n        JSONObject o = new JSONObject(mOriginalJson);\\n        mOrderId = o.optString(\\\"orderId\\\");\\n        mPackageName = o.optString(\\\"packageName\\\");\\n        mSku = o.optString(\\\"productId\\\");\\n        mPurchaseTime = o.optLong(\\\"purchaseTime\\\");\\n        mPurchaseState = o.optInt(\\\"purchaseState\\\");\\n        mDeveloperPayload = o.optString(\\\"developerPayload\\\");\\n        mToken = o.optString(\\\"token\\\", o.optString(\\\"purchaseToken\\\"));\\n        mSignature = signature;\\n    }\\n\\n    public String getItemType() { return mItemType; }\\n    public String getOrderId() { return mOrderId; }\\n    public String getPackageName() { return mPackageName; }\\n    public String getSku() { return mSku; }\\n    public long getPurchaseTime() { return mPurchaseTime; }\\n    public int getPurchaseState() { return mPurchaseState; }\\n    public String getDeveloperPayload() { return mDeveloperPayload; }\\n    public String getToken() { return mToken; }\\n    public String getOriginalJson() { return mOriginalJson; }\\n    public String getSignature() { return mSignature; }\\n\\n    @Override\\n    public String toString() { return \\\"PurchaseInfo(type:\\\" + mItemType + \\\"):\\\" + mOriginalJson; }\\n}\"}, {\"identifier\":\"VpnStatus\", \"path\":\"Android-code/app/src/main/java/de/blinkt/openvpn/core/VpnStatus.java\", \"snippet\":\"public class VpnStatus {\\n\\n\\n    public static LinkedList<LogItem> logbuffer;\\n\\n    private static Vector<LogListener> logListener;\\n    private static Vector<StateListener> stateListener;\\n    private static Vector<ByteCountListener> byteCountListener;\\n\\n    private static String mLaststatemsg = \\\"\\\";\\n\\n    private static String mLaststate = \\\"NOPROCESS\\\";\\n\\n    private static int mLastStateresid = R.string.state_noprocess;\\n\\n    private static long mlastByteCount[] = {0, 0, 0, 0};\\n    private static HandlerThread mHandlerThread;\\n\\n    public static void logException(LogLevel ll, String context, Exception e) {\\n        StringWriter sw = new StringWriter();\\n        e.printStackTrace(new PrintWriter(sw));\\n        LogItem li;\\n        if (context != null) {\\n            li = new LogItem(ll, R.string.unhandled_exception_context, e.getMessage(), sw.toString(), context);\\n        } else {\\n            li = new LogItem(ll, R.string.unhandled_exception, e.getMessage(), sw.toString());\\n        }\\n        newLogItem(li);\\n    }\\n\\n    public static void logException(Exception e) {\\n        logException(LogLevel.ERROR, null, e);\\n    }\\n\\n    public static void logException(String context, Exception e) {\\n        logException(LogLevel.ERROR, context, e);\\n    }\\n\\n    static final int MAXLOGENTRIES = 1000;\\n\\n    public static boolean isVPNActive() {\\n        return mLastLevel != ConnectionStatus.LEVEL_AUTH_FAILED && !(mLastLevel == ConnectionStatus.LEVEL_NOTCONNECTED);\\n    }\\n\\n    public static String getLastCleanLogMessage(Context c) {\\n        String message = mLaststatemsg;\\n        switch (mLastLevel) {\\n            case LEVEL_CONNECTED:\\n                String[] parts = mLaststatemsg.split(\\\",\\\");\\n                /*\\n                   (a) the integer unix date/time,\\n                   (b) the state name,\\n                   0 (c) optional descriptive string (used mostly on RECONNECTING\\n                    and EXITING to show the reason for the disconnect),\\n\\n                    1 (d) optional TUN/TAP local IPv4 address\\n                   2 (e) optional address of remote server,\\n                   3 (f) optional port of remote server,\\n                   4 (g) optional local address,\\n                   5 (h) optional local port, and\\n                   6 (i) optional TUN/TAP local IPv6 address.\\n*/\\n                // Return only the assigned IP addresses in the UI\\n                if (parts.length >= 7)\\n                    message = String.format(Locale.US, \\\"%s %s\\\", parts[1], parts[6]);\\n                break;\\n        }\\n\\n        while (message.endsWith(\\\",\\\"))\\n            message = message.substring(0, message.length() - 1);\\n\\n        String status = mLaststate;\\n        if (status.equals(\\\"NOPROCESS\\\"))\\n            return message;\\n\\n        if (mLastStateresid == R.string.state_waitconnectretry) {\\n            return c.getString(R.string.state_waitconnectretry, mLaststatemsg);\\n        }\\n\\n        String prefix = c.getString(mLastStateresid);\\n        if (mLastStateresid == R.string.unknown_state)\\n            message = status + message;\\n        if (message.length() > 0)\\n            prefix += \\\": \\\";\\n\\n        return prefix + message;\\n\\n    }\\n\\n    public static void initLogCache(File cacheDir) {\\n        mHandlerThread = new HandlerThread(\\\"LogFileWriter\\\", Thread.MIN_PRIORITY);\\n        mHandlerThread.start();\\n        mLogFileHandler = new LogFileHandler(mHandlerThread.getLooper());\\n\\n\\n        Message m = mLogFileHandler.obtainMessage(LogFileHandler.LOG_INIT, cacheDir);\\n        mLogFileHandler.sendMessage(m);\\n\\n    }\\n\\n    public static void flushLog() {\\n        if (mLogFileHandler != null)\\n            mLogFileHandler.sendEmptyMessage(LogFileHandler.FLUSH_TO_DISK);\\n    }\\n\\n    public enum ConnectionStatus {\\n        LEVEL_CONNECTED,\\n        LEVEL_VPNPAUSED,\\n        LEVEL_CONNECTING_SERVER_REPLIED,\\n        LEVEL_CONNECTING_NO_SERVER_REPLY_YET,\\n        LEVEL_NONETWORK,\\n        LEVEL_NOTCONNECTED,\\n        LEVEL_START,\\n        LEVEL_AUTH_FAILED,\\n        LEVEL_WAITING_FOR_USER_INPUT,\\n        UNKNOWN_LEVEL\\n    }\\n\\n    public enum LogLevel {\\n        INFO(2),\\n        ERROR(-2),\\n        WARNING(1),\\n        VERBOSE(3),\\n        DEBUG(4);\\n\\n        protected int mValue;\\n\\n        LogLevel(int value) {\\n            mValue = value;\\n        }\\n\\n        public int getInt() {\\n            return mValue;\\n        }\\n\\n        public static LogLevel getEnumByValue(int value) {\\n            switch (value) {\\n                case 1:\\n                    return INFO;\\n                case 2:\\n                    return ERROR;\\n                case 3:\\n                    return WARNING;\\n                case 4:\\n                    return DEBUG;\\n                default:\\n                    return null;\\n            }\\n        }\\n    }\\n\\n    // keytool -printcert -jarfile de.blinkt.openvpn_85.apk\\n    public static final byte[] officalkey = {-58, -42, -44, -106, 90, -88, -87, -88, -52, -124, 84, 117, 66, 79, -112, -111, -46, 86, -37, 109};\\n    public static final byte[] officaldebugkey = {-99, -69, 45, 71, 114, -116, 82, 66, -99, -122, 50, -70, -56, -111, 98, -35, -65, 105, 82, 43};\\n    public static final byte[] amazonkey = {-116, -115, -118, -89, -116, -112, 120, 55, 79, -8, -119, -23, 106, -114, -85, -56, -4, 105, 26, -57};\\n    public static final byte[] fdroidkey = {-92, 111, -42, -46, 123, -96, -60, 79, -27, -31, 49, 103, 11, -54, -68, -27, 17, 2, 121, 104};\\n\\n\\n    private static ConnectionStatus mLastLevel = ConnectionStatus.LEVEL_NOTCONNECTED;\\n\\n    private static LogFileHandler mLogFileHandler;\\n\\n    static {\\n        logbuffer = new LinkedList<>();\\n        logListener = new Vector<>();\\n        stateListener = new Vector<>();\\n        byteCountListener = new Vector<>();\\n\\n\\n        logInformation();\\n\\n    }\\n\\n\\n    public interface LogListener {\\n        void newLog(LogItem logItem);\\n    }\\n\\n    public interface StateListener {\\n        void updateState(String state, String logmessage, int localizedResId, ConnectionStatus level);\\n    }\\n\\n    public interface ByteCountListener {\\n        void updateByteCount(long in, long out, long diffIn, long diffOut);\\n    }\\n\\n    public synchronized static void logMessage(LogLevel level, String prefix, String message) {\\n        newLogItem(new LogItem(level, prefix + message));\\n\\n    }\\n\\n    public synchronized static void clearLog() {\\n        logbuffer.clear();\\n        logInformation();\\n        if (mLogFileHandler != null)\\n            mLogFileHandler.sendEmptyMessage(LogFileHandler.TRIM_LOG_FILE);\\n    }\\n\\n    private static void logInformation() {\\n      /*  String nativeAPI;\\n        try {\\n            nativeAPI = NativeUtils.getNativeAPI();\\n        } catch (UnsatisfiedLinkError ignore) {\\n            nativeAPI = \\\"error\\\";\\n        }\\n\\n        logInfo(R.string.mobile_info, Build.MODEL, Build.BOARD, Build.BRAND, Build.VERSION.SDK_INT,\\n                nativeAPI, Build.VERSION.RELEASE, Build.ID, Build.FINGERPRINT, \\\"\\\", \\\"\\\");*/\\n    }\\n\\n    public synchronized static void addLogListener(LogListener ll) {\\n        logListener.add(ll);\\n    }\\n\\n    public synchronized static void removeLogListener(LogListener ll) {\\n        logListener.remove(ll);\\n    }\\n\\n    public synchronized static void addByteCountListener(ByteCountListener bcl) {\\n        bcl.updateByteCount(mlastByteCount[0], mlastByteCount[1], mlastByteCount[2], mlastByteCount[3]);\\n        byteCountListener.add(bcl);\\n    }\\n\\n    public synchronized static void removeByteCountListener(ByteCountListener bcl) {\\n        byteCountListener.remove(bcl);\\n    }\\n\\n\\n    public synchronized static void addStateListener(StateListener sl) {\\n        if (!stateListener.contains(sl)) {\\n            stateListener.add(sl);\\n            if (mLaststate != null)\\n                sl.updateState(mLaststate, mLaststatemsg, mLastStateresid, mLastLevel);\\n        }\\n    }\\n\\n    private static int getLocalizedState(String state) {\\n        switch (state) {\\n            case \\\"CONNECTING\\\":\\n                return R.string.state_connecting;\\n            case \\\"WAIT\\\":\\n                return R.string.state_wait;\\n            case \\\"AUTH\\\":\\n                return R.string.state_auth;\\n            case \\\"GET_CONFIG\\\":\\n                return R.string.state_get_config;\\n            case \\\"ASSIGN_IP\\\":\\n                return R.string.state_assign_ip;\\n            case \\\"ADD_ROUTES\\\":\\n                return R.string.state_add_routes;\\n            case \\\"CONNECTED\\\":\\n                return R.string.state_connected;\\n            case \\\"DISCONNECTED\\\":\\n                return R.string.state_disconnected;\\n            case \\\"RECONNECTING\\\":\\n                return R.string.state_reconnecting;\\n            case \\\"EXITING\\\":\\n                return R.string.state_exiting;\\n            case \\\"RESOLVE\\\":\\n                return R.string.state_resolve;\\n            case \\\"TCP_CONNECT\\\":\\n                return R.string.state_tcp_connect;\\n            default:\\n                return R.string.unknown_state;\\n        }\\n\\n    }\\n\\n    public static void updateStatePause(OpenVPNManagement.pauseReason pauseReason) {\\n        switch (pauseReason) {\\n            case noNetwork:\\n                VpnStatus.updateStateString(\\\"NONETWORK\\\", \\\"\\\", R.string.state_nonetwork, ConnectionStatus.LEVEL_NONETWORK);\\n                break;\\n            case screenOff:\\n                VpnStatus.updateStateString(\\\"SCREENOFF\\\", \\\"\\\", R.string.state_screenoff, ConnectionStatus.LEVEL_VPNPAUSED);\\n                break;\\n            case userPause:\\n                VpnStatus.updateStateString(\\\"USERPAUSE\\\", \\\"\\\", R.string.state_userpause, ConnectionStatus.LEVEL_VPNPAUSED);\\n                break;\\n        }\\n\\n    }\\n\\n    private static ConnectionStatus getLevel(String state) {\\n        String[] noreplyet = {\\\"CONNECTING\\\", \\\"WAIT\\\", \\\"RECONNECTING\\\", \\\"RESOLVE\\\", \\\"TCP_CONNECT\\\"};\\n        String[] reply = {\\\"AUTH\\\", \\\"GET_CONFIG\\\", \\\"ASSIGN_IP\\\", \\\"ADD_ROUTES\\\"};\\n        String[] connected = {\\\"CONNECTED\\\"};\\n        String[] notconnected = {\\\"DISCONNECTED\\\", \\\"EXITING\\\"};\\n\\n        for (String x : noreplyet)\\n            if (state.equals(x))\\n                return ConnectionStatus.LEVEL_CONNECTING_NO_SERVER_REPLY_YET;\\n\\n        for (String x : reply)\\n            if (state.equals(x))\\n                return ConnectionStatus.LEVEL_CONNECTING_SERVER_REPLIED;\\n\\n        for (String x : connected)\\n            if (state.equals(x))\\n                return ConnectionStatus.LEVEL_CONNECTED;\\n\\n        for (String x : notconnected)\\n            if (state.equals(x))\\n                return ConnectionStatus.LEVEL_NOTCONNECTED;\\n\\n        return ConnectionStatus.UNKNOWN_LEVEL;\\n\\n    }\\n\\n\\n    public synchronized static void removeStateListener(StateListener sl) {\\n        stateListener.remove(sl);\\n    }\\n\\n\\n    synchronized public static LogItem[] getlogbuffer() {\\n\\n        // The stoned way of java to return an array from a vector\\n        // brought to you by eclipse auto complete\\n        return logbuffer.toArray(new LogItem[logbuffer.size()]);\\n\\n    }\\n\\n    public static void updateStateString(String state, String msg) {\\n        int rid = getLocalizedState(state);\\n        ConnectionStatus level = getLevel(state);\\n        updateStateString(state, msg, rid, level);\\n    }\\n\\n    public synchronized static void updateStateString(String state, String msg, int resid, ConnectionStatus level) {\\n        // Workound for OpenVPN doing AUTH and wait and being connected\\n        // Simply ignore these state\\n        if (mLastLevel == ConnectionStatus.LEVEL_CONNECTED &&\\n                (state.equals(\\\"WAIT\\\") || state.equals(\\\"AUTH\\\"))) {\\n            newLogItem(new LogItem((LogLevel.DEBUG), String.format(\\\"Ignoring OpenVPN Status in CONNECTED state (%s->%s): %s\\\", state, level.toString(), msg)));\\n            return;\\n        }\\n\\n        mLaststate = state;\\n        mLaststatemsg = msg;\\n        mLastStateresid = resid;\\n        mLastLevel = level;\\n\\n\\n        for (StateListener sl : stateListener) {\\n            sl.updateState(state, msg, resid, level);\\n        }\\n        //newLogItem(new LogItem((LogLevel.DEBUG), String.format(\\\"New OpenVPN Status (%s->%s): %s\\\",state,level.toString(),msg)));\\n    }\\n\\n    public static void logInfo(String message) {\\n        newLogItem(new LogItem(LogLevel.INFO, message));\\n    }\\n\\n    public static void logDebug(String message) {\\n        newLogItem(new LogItem(LogLevel.DEBUG, message));\\n    }\\n\\n    public static void logInfo(int resourceId, Object... args) {\\n        newLogItem(new LogItem(LogLevel.INFO, resourceId, args));\\n    }\\n\\n    public static void logDebug(int resourceId, Object... args) {\\n        newLogItem(new LogItem(LogLevel.DEBUG, resourceId, args));\\n    }\\n\\n    private static void newLogItem(LogItem logItem) {\\n        newLogItem(logItem, false);\\n    }\\n\\n\\n    synchronized static void newLogItem(LogItem logItem, boolean cachedLine) {\\n        if (cachedLine) {\\n            logbuffer.addFirst(logItem);\\n        } else {\\n            logbuffer.addLast(logItem);\\n            if (mLogFileHandler != null) {\\n                Message m = mLogFileHandler.obtainMessage(LogFileHandler.LOG_MESSAGE, logItem);\\n                mLogFileHandler.sendMessage(m);\\n            }\\n        }\\n\\n        if (logbuffer.size() > MAXLOGENTRIES + MAXLOGENTRIES / 2) {\\n            while (logbuffer.size() > MAXLOGENTRIES)\\n                logbuffer.removeFirst();\\n            if (mLogFileHandler != null)\\n                mLogFileHandler.sendMessage(mLogFileHandler.obtainMessage(LogFileHandler.TRIM_LOG_FILE));\\n        }\\n\\n        //if (BuildConfig.DEBUG && !cachedLine && !BuildConfig.FLAVOR.equals(\\\"test\\\"))\\n        //    Log.d(\\\"OpenVPN\\\", logItem.getString(null));\\n\\n\\n        for (LogListener ll : logListener) {\\n            ll.newLog(logItem);\\n        }\\n    }\\n\\n\\n    public static void logError(String msg) {\\n        newLogItem(new LogItem(LogLevel.ERROR, msg));\\n\\n    }\\n\\n    public static void logWarning(int resourceId, Object... args) {\\n        newLogItem(new LogItem(LogLevel.WARNING, resourceId, args));\\n    }\\n\\n    public static void logWarning(String msg) {\\n        newLogItem(new LogItem(LogLevel.WARNING, msg));\\n    }\\n\\n\\n    public static void logError(int resourceId) {\\n        newLogItem(new LogItem(LogLevel.ERROR, resourceId));\\n    }\\n\\n    public static void logError(int resourceId, Object... args) {\\n        newLogItem(new LogItem(LogLevel.ERROR, resourceId, args));\\n    }\\n\\n    public static void logMessageOpenVPN(LogLevel level, int ovpnlevel, String message) {\\n        newLogItem(new LogItem(level, ovpnlevel, message));\\n\\n    }\\n\\n\\n    public static synchronized void updateByteCount(long in, long out) {\\n        long lastIn = mlastByteCount[0];\\n        long lastOut = mlastByteCount[1];\\n        long diffIn = mlastByteCount[2] = Math.max(0, in - lastIn);\\n        long diffOut = mlastByteCount[3] = Math.max(0, out - lastOut);\\n\\n\\n        mlastByteCount = new long[]{in, out, diffIn, diffOut};\\n        for (ByteCountListener bcl : byteCountListener) {\\n            bcl.updateByteCount(in, out, diffIn, diffOut);\\n        }\\n    }\\n\\n\\n}\"}]", "import_statement": "import android.content.Intent;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.util.DisplayMetrics;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.FrameLayout;\nimport com.androidnetworking.AndroidNetworking;\nimport com.androidnetworking.common.Priority;\nimport com.androidnetworking.error.ANError;\nimport com.androidnetworking.interfaces.JSONArrayRequestListener;\nimport com.crashlytics.android.answers.Answers;\nimport com.crashlytics.android.answers.CustomEvent;\nimport com.google.android.gms.analytics.HitBuilders;\nimport com.google.android.gms.analytics.Tracker;\nimport com.vasilkoff.easyvpnfree.App;\nimport com.vasilkoff.easyvpnfree.BuildConfig;\nimport com.vasilkoff.easyvpnfree.R;\nimport com.vasilkoff.easyvpnfree.database.DBHelper;\nimport com.vasilkoff.easyvpnfree.model.Server;\nimport com.vasilkoff.easyvpnfree.util.CountriesNames;\nimport com.vasilkoff.easyvpnfree.util.PropertiesService;\nimport com.vasilkoff.easyvpnfree.util.TotalTraffic;\nimport com.vasilkoff.easyvpnfree.util.iap.IabHelper;\nimport com.vasilkoff.easyvpnfree.util.iap.IabResult;\nimport com.vasilkoff.easyvpnfree.util.iap.Inventory;\nimport com.vasilkoff.easyvpnfree.util.iap.Purchase;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Random;\nimport de.blinkt.openvpn.core.VpnStatus;", "code": "package com.vasilkoff.easyvpnfree.activity;\n\n\n\n\n\n\n\n\n\n/**\n * Created by Kusenko on 20.10.2016.\n */\n\npublic abstract class BaseActivity extends AppCompatActivity {\n\n    private DrawerLayout fullLayout;\n    private Toolbar toolbar;\n\n    static final int ADBLOCK_REQUEST = 10001;\n    static final int PREMIUM_SERVERS_REQUEST = 10002;\n    public static Server connectedServer = null;\n    boolean hideCurrentConnection = false;\n    IabHelper iapHelper;\n    public static final String IAP_TAG = \"IAP\";\n    static final String TEST_ITEM_SKU = \"android.test.purchased\";\n    static final String ADBLOCK_ITEM_SKU = \"adblock\";\n    static final String MORE_SERVERS_ITEM_SKU = \"more_servers\";\n    static String key = \"\";\n\n    static boolean availableFilterAds = false;\n    static boolean premiumServers = false;\n\n    static String adblockSKU;\n    static String moreServersSKU;\n    static String currentSKU;\n\n    int widthWindow ;\n    int heightWindow;\n\n    static DBHelper dbHelper;\n    Map<String, String> localeCountries;\n\n    static Tracker mTracker;\n\n    @Override\n    public void setContentView(int layoutResID)\n    {\n        if (BuildConfig.FLAVOR == \"pro\" || BuildConfig.FLAVOR == \"underground\") {\n            availableFilterAds = true;\n            premiumServers = true;\n        }\n\n        fullLayout = (DrawerLayout) getLayoutInflater().inflate(R.layout.activity_base, null);\n        FrameLayout activityContainer = (FrameLayout) fullLayout.findViewById(R.id.activity_content);\n        getLayoutInflater().inflate(layoutResID, activityContainer, true);\n        super.setContentView(fullLayout);\n\n        toolbar = (Toolbar) findViewById(R.id.toolbar);\n\n        if (useToolbar()) {\n            setSupportActionBar(toolbar);\n        } else {\n            toolbar.setVisibility(View.GONE);\n        }\n\n        if (useHomeButton()) {\n            if (getSupportActionBar() != null){\n                getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n                getSupportActionBar().setDisplayShowHomeEnabled(true);\n            }\n        }\n\n        if (BuildConfig.DEBUG) {\n            moreServersSKU = TEST_ITEM_SKU;\n            adblockSKU = TEST_ITEM_SKU;\n        } else {\n            moreServersSKU = MORE_SERVERS_ITEM_SKU;\n            adblockSKU = ADBLOCK_ITEM_SKU;\n        }\n\n\n\n        dbHelper = new DBHelper(this);\n\n        DisplayMetrics dm = new DisplayMetrics();\n        getWindowManager().getDefaultDisplay().getMetrics(dm);\n\n        widthWindow = dm.widthPixels;\n        heightWindow = dm.heightPixels;\n\n        localeCountries = CountriesNames.getCountries();\n", "next_line": "        App application = (App) getApplication();", "gold_snippet_index": 0, "id": 0, "__internal_uuid__": "5877c38b-f224-4524-9d48-8751b161a5db"}
{"repo_name": "xapn/test-as-you-think", "file_path": "test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java", "context": "[{\"identifier\":\"Mutable\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java\", \"snippet\":\"public static class Mutable {\\n\\n    private int forDemonstration;\\n\\n    void setForDemonstration(int forDemonstration) {\\n        this.forDemonstration = forDemonstration;\\n    }\\n}\"}, {\"identifier\":\"MutableButUninstantiable\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java\", \"snippet\":\"public static class MutableButUninstantiable {\\n\\n    public MutableButUninstantiable() throws InstantiationException {\\n        throw new InstantiationException(\\\"Impossible to instantiate it!\\\");\\n    }\\n}\"}, {\"identifier\":\"ExecutionError\", \"path\":\"test-as-you-think-core/src/main/java/testasyouthink/execution/ExecutionError.java\", \"snippet\":\"public class ExecutionError extends Error {\\n\\n    public ExecutionError(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n}\"}, {\"identifier\":\"ExpectedException\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/fixture/ExpectedException.java\", \"snippet\":\"public class ExpectedException extends Exception {\\n\\n    public ExpectedException() {\\n        super();\\n    }\\n\\n    public ExpectedException(String message) {\\n        super(message);\\n    }\\n\\n    public ExpectedException(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n}\"}, {\"identifier\":\"GivenWhenThenDefinition\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/fixture/GivenWhenThenDefinition.java\", \"snippet\":\"public class GivenWhenThenDefinition {\\n\\n    private static final int DEFAULT_NUMBER_OF_STEPS = 1;\\n\\n    public static GivenWhenThenDefinition orderedSteps() {\\n        return orderedSteps(DEFAULT_NUMBER_OF_STEPS, DEFAULT_NUMBER_OF_STEPS, DEFAULT_NUMBER_OF_STEPS);\\n    }\\n\\n    public static GivenWhenThenDefinition orderedSteps(int numberOfGivenSteps) {\\n        return orderedSteps(numberOfGivenSteps, DEFAULT_NUMBER_OF_STEPS, DEFAULT_NUMBER_OF_STEPS);\\n    }\\n\\n    public static GivenWhenThenDefinition orderedSteps(int numberOfGivenSteps, int numberOfThenSteps) {\\n        return orderedSteps(numberOfGivenSteps, DEFAULT_NUMBER_OF_STEPS, numberOfThenSteps);\\n    }\\n\\n    public static GivenWhenThenDefinition orderedSteps(int numberOfGivenSteps, int numberOfWhenSteps,\\n            int numberOfThenSteps) {\\n        GivenWhenThenDefinition mock = strictMock(GivenWhenThenDefinition.class);\\n\\n        if (numberOfGivenSteps > 0) {\\n            mock.givenAContextThatDefinesTheInitialStateOfTheSystem();\\n            expectLastCall().times(numberOfGivenSteps);\\n        }\\n        if (numberOfWhenSteps > 0) {\\n            mock.whenAnEventHappensInRelationToAnActionOfTheConsumer();\\n            expectLastCall().times(numberOfWhenSteps);\\n        }\\n        if (numberOfThenSteps > 0) {\\n            mock.thenTheActualResultIsInKeepingWithTheExpectedResult();\\n            expectLastCall().times(numberOfThenSteps);\\n        }\\n\\n        replay(mock);\\n        return mock;\\n    }\\n\\n    public void givenAContextThatDefinesTheInitialStateOfTheSystem() {}\\n\\n    public void whenAnEventHappensInRelationToAnActionOfTheConsumer() {}\\n\\n    public void thenTheActualResultIsInKeepingWithTheExpectedResult() {}\\n}\"}, {\"identifier\":\"ParameterizedSystemUnderTest\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/fixture/ParameterizedSystemUnderTest.java\", \"snippet\":\"public class ParameterizedSystemUnderTest<$Parameter1, $Parameter2, $Parameter3> {\\n\\n    public void voidMethodWithParameter($Parameter1 parameter) {}\\n\\n    public String nonVoidMethodWithParameter($Parameter1 parameter) {\\n        return null;\\n    }\\n\\n    public void voidMethodWithTwoParameters($Parameter1 parameter1, $Parameter2 parameter2) {}\\n\\n    public String nonVoidMethodWithTwoParameters($Parameter1 parameter1, $Parameter2 parameter2) {\\n        return null;\\n    }\\n\\n    public void voidMethodWithThreeParameters($Parameter1 parameter1, $Parameter2 parameter2, $Parameter3 parameter3) {}\\n\\n    public String nonVoidMethodWithThreeParameters($Parameter1 parameter1, $Parameter2 parameter2,\\n            $Parameter3 parameter3) {\\n        return null;\\n    }\\n\\n    public void failWithParameter($Parameter1 parameter) throws Throwable {}\\n\\n    public void failWithTwoParameters($Parameter1 parameter1, $Parameter2 parameter2) throws Throwable {}\\n\\n    public void failWithThreeParameters($Parameter1 parameter1, $Parameter2 parameter2,\\n            $Parameter3 parameter3) throws Throwable {}\\n\\n    public String nonVoidFailWithParameter($Parameter1 parameter) throws Throwable {\\n        return null;\\n    }\\n\\n    public String nonVoidFailWithTwoParameters($Parameter1 parameter1, $Parameter2 parameter2) throws Throwable {\\n        return null;\\n    }\\n\\n    public String nonVoidFailWithThreeParameters($Parameter1 parameter1, $Parameter2 parameter2,\\n            $Parameter3 parameter3) throws Throwable {\\n        return null;\\n    }\\n}\"}, {\"identifier\":\"SystemUnderTest\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/fixture/SystemUnderTest.java\", \"snippet\":\"public class SystemUnderTest {\\n\\n    private GivenWhenThenDefinition givenWhenThenDefinition;\\n    private String state;\\n\\n    public SystemUnderTest() {}\\n\\n    public SystemUnderTest(GivenWhenThenDefinition givenWhenThenDefinition) {\\n        this.givenWhenThenDefinition = givenWhenThenDefinition;\\n    }\\n\\n    private void whenAnEventHappens() {\\n        if (givenWhenThenDefinition != null) {\\n            givenWhenThenDefinition.whenAnEventHappensInRelationToAnActionOfTheConsumer();\\n        }\\n    }\\n\\n    public String nonVoidMethod() {\\n        whenAnEventHappens();\\n        changeState();\\n        return \\\"expected result\\\";\\n    }\\n\\n    public void voidMethod() {\\n        whenAnEventHappens();\\n        changeState();\\n    }\\n\\n    public void voidMethodWithParameter(String parameter) {\\n        voidMethod();\\n    }\\n\\n    public String nonVoidMethodWithParameter(String parameter) {\\n        return nonVoidMethod();\\n    }\\n\\n    public void voidMethodWithTwoParameters(String parameter1, Integer parameter2) {\\n        voidMethod();\\n    }\\n\\n    public String nonVoidMethodWithTwoParameters(String parameter1, Integer parameter2) {\\n        return nonVoidMethod();\\n    }\\n\\n    public void voidMethodWithThreeParameters(String parameter1, Integer parameter2, Boolean parameter3) {\\n        voidMethod();\\n    }\\n\\n    public String nonVoidMethodWithThreeParameters(String parameter1, Integer parameter2, Boolean parameter3) {\\n        return nonVoidMethod();\\n    }\\n\\n    public void failWithParameter(String parameter) throws Throwable {}\\n\\n    public void failWithTwoParameters(String parameter1, Integer parameter2) throws Throwable {}\\n\\n    public void failWithThreeParameters(String parameter1, Integer parameter2, Boolean parameter3) throws Throwable {}\\n\\n    public String nonVoidFailWithParameter(String parameter) throws Throwable {\\n        return null;\\n    }\\n\\n    public String nonVoidFailWithTwoParameters(String parameter1, Integer parameter2) throws Throwable {\\n        return null;\\n    }\\n\\n    public String nonVoidFailWithThreeParameters(String parameter1, Integer parameter2,\\n            Boolean parameter3) throws Throwable {\\n        return null;\\n    }\\n\\n    public void voidMethodWithThrowsClause() throws Throwable {}\\n\\n    public String nonVoidMethodWithThrowsClause() throws Throwable {\\n        return null;\\n    }\\n\\n    public String methodWithThrowsClause() throws Throwable {\\n        return null;\\n    }\\n\\n    private void changeState() {\\n        state = \\\"state updated\\\";\\n    }\\n\\n    public void setGivenWhenThenDefinition(GivenWhenThenDefinition givenWhenThenDefinition) {\\n        this.givenWhenThenDefinition = givenWhenThenDefinition;\\n    }\\n\\n    public String getState() {\\n        return state;\\n    }\\n}\"}, {\"identifier\":\"UnexpectedException\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/fixture/UnexpectedException.java\", \"snippet\":\"public class UnexpectedException extends Exception {\\n\\n    public UnexpectedException() {\\n        super();\\n    }\\n\\n    public UnexpectedException(String message) {\\n        super(message);\\n    }\\n}\"}, {\"identifier\":\"CheckedSupplier\", \"path\":\"test-as-you-think-core/src/main/java/testasyouthink/function/CheckedSupplier.java\", \"snippet\":\"public interface CheckedSupplier<R> {\\n\\n    R get() throws Throwable;\\n}\"}, {\"identifier\":\"PreparationError\", \"path\":\"test-as-you-think-core/src/main/java/testasyouthink/preparation/PreparationError.java\", \"snippet\":\"public class PreparationError extends Error {\\n\\n    public PreparationError(String message, Throwable cause) {\\n        super(message, cause);\\n    }\\n}\"}, {\"identifier\":\"assertThatFailure\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java\", \"snippet\":\"static ArgumentPreparationAssertions assertThatFailure(Throwable thrown) {\\n    return new ArgumentPreparationAssertions(thrown);\\n}\"}, {\"identifier\":\"EXPECTED_ERROR_MESSAGE\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java\", \"snippet\":\"static final String EXPECTED_ERROR_MESSAGE = \\\"Expected error message\\\";\"}, {\"identifier\":\"EXPECTED_RESULT\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java\", \"snippet\":\"static final String EXPECTED_RESULT = \\\"expected result\\\";\"}, {\"identifier\":\"GIVEN_BOOLEAN\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java\", \"snippet\":\"static final boolean GIVEN_BOOLEAN = false;\"}, {\"identifier\":\"GIVEN_INTEGER\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java\", \"snippet\":\"static final int GIVEN_INTEGER = 201705;\"}, {\"identifier\":\"GIVEN_STRING\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/GivenArgumentsTest.java\", \"snippet\":\"static final String GIVEN_STRING = \\\"given argument\\\";\"}, {\"identifier\":\"givenSut\", \"path\":\"test-as-you-think-core/src/main/java/testasyouthink/TestAsYouThink.java\", \"snippet\":\"public static <$SystemUnderTest> Given<$SystemUnderTest> givenSut($SystemUnderTest systemUnderTest) {\\n    return new GivenWhenSteps<>(systemUnderTest);\\n}\"}, {\"identifier\":\"givenSutClass\", \"path\":\"test-as-you-think-core/src/main/java/testasyouthink/TestAsYouThink.java\", \"snippet\":\"public static <$SystemUnderTest> Given<$SystemUnderTest> givenSutClass(Class<$SystemUnderTest> sutClass) {\\n    return new GivenWhenSteps<>(sutClass);\\n}\"}, {\"identifier\":\"EXPECTED_EXECUTION_FAILURE_MESSAGE\", \"path\":\"test-as-you-think-core/src/test/java/testasyouthink/fixture/Specifications.java\", \"snippet\":\"public static final String EXPECTED_EXECUTION_FAILURE_MESSAGE = \\\"Fails to execute the target method \\\" //\\n        + \\\"of the system under test because of an unexpected failure!\\\";\"}]", "import_statement": "import org.assertj.core.api.AbstractAssert;\nimport org.easymock.IMocksControl;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport testasyouthink.GivenArgumentsTest.Parameter.Mutable;\nimport testasyouthink.GivenArgumentsTest.Parameter.MutableButUninstantiable;\nimport testasyouthink.execution.ExecutionError;\nimport testasyouthink.fixture.ExpectedException;\nimport testasyouthink.fixture.GivenWhenThenDefinition;\nimport testasyouthink.fixture.ParameterizedSystemUnderTest;\nimport testasyouthink.fixture.SystemUnderTest;\nimport testasyouthink.fixture.UnexpectedException;\nimport testasyouthink.function.CheckedSupplier;\nimport testasyouthink.preparation.PreparationError;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.catchThrowable;\nimport static org.easymock.EasyMock.anyObject;\nimport static org.easymock.EasyMock.createStrictControl;\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.expectLastCall;\nimport static org.mockito.Mockito.mock;\nimport static testasyouthink.ArgumentPreparationAssertions.assertThatFailure;\nimport static testasyouthink.GivenArgumentsTest.GivenData.EXPECTED_ERROR_MESSAGE;\nimport static testasyouthink.GivenArgumentsTest.GivenData.EXPECTED_RESULT;\nimport static testasyouthink.GivenArgumentsTest.GivenData.GIVEN_BOOLEAN;\nimport static testasyouthink.GivenArgumentsTest.GivenData.GIVEN_INTEGER;\nimport static testasyouthink.GivenArgumentsTest.GivenData.GIVEN_STRING;\nimport static testasyouthink.TestAsYouThink.givenSut;\nimport static testasyouthink.TestAsYouThink.givenSutClass;\nimport static testasyouthink.fixture.Specifications.ExpectedMessage.EXPECTED_EXECUTION_FAILURE_MESSAGE;", "code": "/*-\n * #%L\n * Test As You Think\n * %%\n * Copyright (C) 2017 - 2018 Xavier Pigeon and TestAsYouThink contributors\n * %%\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Lesser Public License for more details.\n *\n * You should have received a copy of the GNU General Lesser Public\n * License along with this program.  If not, see\n * <http://www.gnu.org/licenses/lgpl-3.0.html>.\n * #L%\n */\n\npackage testasyouthink;\n\n\n\n/**\n * Acceptance testing to prepare arguments for the target method before playing a whole Given-When-Then scenario.\n */\nclass GivenArgumentsTest {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(GivenArgumentsTest.class);\n    private IMocksControl mocksControl;\n    private SystemUnderTest systemUnderTestMock;\n    private GivenWhenThenDefinition givenWhenThenDefinitionMock;\n\n    @BeforeEach\n    void prepareFixtures() {\n        mocksControl = createStrictControl();\n        systemUnderTestMock = mocksControl.createMock(SystemUnderTest.class);\n        givenWhenThenDefinitionMock = mocksControl.createMock(GivenWhenThenDefinition.class);\n    }\n\n    @AfterEach\n    void verifyMocks() {\n        // THEN\n        mocksControl.verify();\n    }\n\n    static class GivenData {\n", "next_line": "        static final String GIVEN_STRING = \"given argument\";", "gold_snippet_index": 15, "id": 1, "__internal_uuid__": "409ddb4a-cc35-4af9-baab-118c69544d15"}
{"repo_name": "pedja1/SMC-Android", "file_path": "core/src/rs/pedjaapps/smc/object/items/Star.java", "context": "[{\"identifier\":\"Assets\", \"path\":\"core/src/rs/pedjaapps/smc/assets/Assets.java\", \"snippet\":\"public class Assets {\\n    public static final String SKIN_HUD = \\\"data/hud/smcskin.json\\\";\\n    public static final String LOGO_GAME = \\\"logo_smc_big_1\\\";\\n    public static final String LOGO_LOADING = \\\"logo_loading\\\";\\n\\n    public static final String FONT_SIMPLE25 = \\\"grobold25\\\";\\n    public static final String LABEL_SIMPLE25 = \\\"small\\\";\\n    public static final String LABEL_BORDER25 = \\\"outline_small\\\";\\n    public static final String LABEL_BORDER60 = \\\"outline\\\";\\n\\n    public static final String WINDOW_NOFRAME = \\\"frameless\\\";\\n    public static final String WINDOW_SMALL = \\\"small\\\";\\n\\n    public static final String BUTTON_BORDER = \\\"framed\\\";\\n    public static final String BUTTON_FA = \\\"fa45\\\";\\n    public static final String BUTTON_FA_FRAMELESS = \\\"fa45noborder\\\";\\n    public static final String BUTTON_SMALL = \\\"small\\\";\\n    public static final String BUTTON_SMALL_FRAMELESS = \\\"smallnoborder\\\";\\n\\n    public static final String COLOR_EMPH1 = \\\"emph1\\\";\\n    public static final String COLOR_EMPH2 = \\\"emph2\\\";\\n    public static final String COLOR_PRESSED = \\\"button_pressed\\\";\\n\\n    public static final String SOUND_ITEM_LIVE_UP_2 = \\\"data/sounds/item/live_up_2.ogg\\\";\\n    public static final String SOUND_ITEM_LIVE_UP = \\\"data/sounds/item/live_up.ogg\\\";\\n    public static final String SOUND_PLAYER_DEAD = \\\"data/sounds/player/dead.ogg\\\";\\n    public static final String SOUND_PLAYER_GHOSTEND = \\\"data/sounds/player/ghost_end.ogg\\\";\\n    public static final String SOUND_JUMP_BIG = \\\"data/sounds/player/jump_big.ogg\\\";\\n    public static final String SOUND_JUMP_BIG_POWER = \\\"data/sounds/player/jump_big_power.ogg\\\";\\n    public static final String SOUND_JUMP_SMALL = \\\"data/sounds/player/jump_small.ogg\\\";\\n    public static final String SOUND_PLAYER_POWERDOWN = \\\"data/sounds/player/powerdown.ogg\\\";\\n    public static final String SOUND_JUMP_SMALL_POWER = \\\"data/sounds/player/jump_small_power.ogg\\\";\\n    public static final String SOUND_AUDIO_ON = \\\"data/sounds/audio_on.ogg\\\";\\n    public static final String SOUND_ENTER_PIPE = \\\"data/sounds/enter_pipe.ogg\\\";\\n    public static final String SOUND_LEAVE_PIPE = \\\"data/sounds/leave_pipe.ogg\\\";\\n    public static final String SOUND_SPROUT = \\\"data/sounds/sprout_1.ogg\\\";\\n    public static final String SOUND_ITEMBOX_SET = \\\"data/sounds/itembox_set.ogg\\\";\\n    public static final String SOUND_ITEMBOX_GET = \\\"data/sounds/itembox_get.ogg\\\";\\n    //???? unused\\n    public static final String SOUND_STOMP1 = \\\"data/sounds/stomp_1.ogg\\\";\\n    public static final String SOUND_STOMP4 = \\\"data/sounds/stomp_4.ogg\\\";\\n    public static final String SOUND_WALL_HIT = \\\"data/sounds/wall_hit.ogg\\\";\\n    public static final String SOUND_BOSS_FURBALL_HIT_FAILED = \\\"data/sounds/enemy/boss/furball/hit_failed.ogg\\\";\\n    public static final String SOUND_BOSS_FURBALL_HIT = \\\"data/sounds/enemy/boss/furball/hit.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_EATO = \\\"data/sounds/enemy/eato/die.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_FLYON = \\\"data/sounds/enemy/flyon/die.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_FURBALL = \\\"data/sounds/enemy/furball/die.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_GEE = \\\"data/sounds/enemy/gee/die.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_KRUSH = \\\"data/sounds/enemy/krush/die.ogg\\\";\\n    public static final String SOUND_ENEMY_ROKKO_HIT = \\\"data/sounds/enemy/rokko/hit.ogg\\\";\\n    public static final String SOUND_ENEMY_TURTLE_SHELL_HIT = \\\"data/sounds/enemy/turtle/shell/hit.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_THROMP = \\\"data/sounds/enemy/thromp/die.ogg\\\";\\n    public static final String SOUND_ITEM_FIREBALL = \\\"data/sounds/item/fireball.ogg\\\";\\n    public static final String SOUND_ITEM_FIREBALL_EXPLOSION = \\\"data/sounds/item/fireball_explosion.ogg\\\";\\n    public static final String SOUND_ITEM_ICEBALL_HIT = \\\"data/sounds/item/iceball.ogg\\\";\\n    public static final String SOUND_ITEM_FIREBALL_REPELLED = \\\"data/sounds/item/fireball_repelled.ogg\\\";\\n    public static final String SOUND_ITEM_FIREPLANT = \\\"data/sounds/item/fireplant.ogg\\\";\\n    public static final String SOUND_ITEM_GOLDPIECE1 = \\\"data/sounds/item/goldpiece_1.ogg\\\";\\n    public static final String SOUND_ITEM_GOLDPIECE_RED = \\\"data/sounds/item/goldpiece_red.ogg\\\";\\n    public static final String SOUND_ITEM_ICE_KILL = \\\"data/sounds/item/ice_kill.ogg\\\";\\n    public static final String SOUND_ITEM_MOON = \\\"data/sounds/item/moon.ogg\\\";\\n    public static final String SOUND_ITEM_MUSHROOM = \\\"data/sounds/item/mushroom.ogg\\\";\\n    public static final String SOUND_ITEM_MUSHROOM_BLUE = \\\"data/sounds/item/mushroom_blue.ogg\\\";\\n    public static final String SOUND_ITEM_MUSHROOM_GHOST = \\\"data/sounds/item/mushroom_ghost.ogg\\\";\\n    public static final String SOUND_ITEM_STAR_KILL = \\\"data/sounds/item/star_kill.ogg\\\";\\n\\n    public static final String PARTICLES_BOX_ACTIVATED = \\\"data/animation/particles/box_activated.p\\\";\\n\\n    public static final String MUSIC_COURSECLEAR = \\\"data/music/game/courseclear.ogg\\\";\\n    public static final String MUSIC_INVINCIBLE = \\\"data/music/game/star.ogg\\\";\\n\\n    public static final String ATLAS_STATIC = \\\"data/static.pack\\\";\\n    public static final String ATLAS_DYNAMIC = \\\"data/dynamic.pack\\\";\\n\\n    public AssetManager manager;\\n    public TextureLoader.TextureParameter textureParameter;\\n    public ParticleEffectLoader.ParticleEffectParameter particleEffectParameter;\\n\\n    public Assets() {\\n        textureParameter = new TextureLoader.TextureParameter();\\n        //textureParameter.genMipMaps = true;\\n        textureParameter.magFilter = Texture.TextureFilter.Linear;\\n        textureParameter.minFilter = Texture.TextureFilter.Linear;\\n\\n        manager = new AssetManager();\\n\\n        particleEffectParameter = new ParticleEffectLoader.ParticleEffectParameter();\\n        particleEffectParameter.atlasFile = Assets.ATLAS_DYNAMIC;\\n        particleEffectParameter.atlasPrefix = \\\"particles_\\\";\\n        particleEffectParameter.imagesDir = Gdx.files.internal(\\\"data/animation/particles\\\");\\n\\n        // set the loaders for the generator and the fonts themselves\\n        manager.setLoader(ParticleEffect.class, \\\".p\\\", new ParticleEffectLoader(new InternalFileHandleResolver()));\\n        manager.setLoader(Sound.class, \\\".ogg\\\", new SoundLoader(new InternalFileHandleResolver()));\\n        manager.setLoader(Music.class, \\\".ogg\\\", new MusicLoader(new InternalFileHandleResolver()));\\n    }\\n\\n    public void dispose() {\\n        //do not clear. This is just annoying because it needs to be loaded again\\n        //TODO: große Klopper müssen wieder weggemacht werden (Background, Musik)\\n        //manager.clear();\\n    }\\n\\n}\"}, {\"identifier\":\"MusicManager\", \"path\":\"core/src/rs/pedjaapps/smc/audio/MusicManager.java\", \"snippet\":\"public class MusicManager {\\n    private static Music main, temporary;\\n    private static boolean isPaused;\\n    private static Music wasPlayingBeforePause;\\n\\n    public static void pause() {\\n        if (isPaused)\\n            return;\\n\\n        isPaused = true;\\n\\n        if (temporary != null && temporary.isPlaying())\\n            wasPlayingBeforePause = temporary;\\n        else if (main != null && main.isPlaying())\\n            wasPlayingBeforePause = main;\\n        else\\n            wasPlayingBeforePause = null;\\n\\n        if (wasPlayingBeforePause != null)\\n            wasPlayingBeforePause.pause();\\n    }\\n\\n    public static void resume() {\\n        if (!isPaused)\\n            return;\\n\\n        if (wasPlayingBeforePause != null && PrefsManager.isPlayMusic())\\n            wasPlayingBeforePause.play();\\n\\n        isPaused = false;\\n        wasPlayingBeforePause = null;\\n    }\\n\\n    public static void play(Music music) {\\n        play(music, PrefsManager.getMusicVolume(), true);\\n    }\\n\\n    public static void play(Music music, boolean main) {\\n        play(music, PrefsManager.getMusicVolume(), main);\\n    }\\n\\n    public static void play(Music music, float volume) {\\n        play(music, volume, true);\\n    }\\n\\n    private static void play(Music music, float volume, boolean isMain) {\\n        wasPlayingBeforePause = null;\\n        if (music == null || !PrefsManager.isPlayMusic() && isMain || !isMain && !PrefsManager.isPlaySounds())\\n            return;\\n\\n        if (isMain) {\\n            if (main == music && music.isPlaying())\\n                return;\\n            if (main != null) {\\n                main.stop();\\n                main = null;\\n            }\\n            main = music;\\n            music.setVolume(volume);\\n            music.play();\\n        } else {\\n            if (main != null) {\\n                main.pause();\\n            }\\n            if (temporary != null) {\\n                temporary.stop();\\n            }\\n            temporary = music;\\n            temporary.setVolume(volume);\\n            temporary.play();\\n            temporary.setOnCompletionListener(new Music.OnCompletionListener() {\\n                @Override\\n                public void onCompletion(Music music) {\\n                    if (main != null) {\\n                        main.play();\\n                    }\\n                }\\n            });\\n        }\\n    }\\n\\n    public static void stop(boolean isMain) {\\n        wasPlayingBeforePause = null;\\n        if (isMain) {\\n            if (main != null) {\\n                main.stop();\\n                main = null;\\n            }\\n        } else {\\n            if (temporary != null) {\\n                temporary.stop();\\n                temporary = null;\\n                if (main != null && PrefsManager.isPlayMusic()) {\\n                    main.play();\\n                }\\n            }\\n        }\\n    }\\n}\"}, {\"identifier\":\"GameObject\", \"path\":\"core/src/rs/pedjaapps/smc/object/GameObject.java\", \"snippet\":\"public abstract class GameObject\\n{\\n    public Rectangle mDrawRect = new Rectangle();//used for draw\\n    public Rectangle mColRect = new Rectangle();//used for collision detection\\n\\tpublic Vector3 position = new Vector3();\\n    public Vector3 velocity = new Vector3();\\n    public Vector3 acceleration = new Vector3();\\n    protected World world;\\n    public float mRotationX, mRotationY, mRotationZ;//degrees\\n    \\n\\tpublic enum WorldState\\n    {\\n        IDLE, WALKING, JUMPING, DYING, DUCKING, CLIMBING\\n    }\\n\\n    public enum TKey\\n    {\\n        stand_right(\\\"stand_right\\\"),\\n        walk_right_1(\\\"walk_right-1\\\"),\\n        walk_right_2(\\\"walk_right-2\\\"),\\n        jump_right(\\\"jump_right\\\"),\\n        fall_right(\\\"fall_right\\\"),\\n        dead_right(\\\"dead_right\\\"),\\n        duck_right(\\\"duck_right\\\"),\\n        climb_left(\\\"climb_left\\\"),\\n        climb_right(\\\"climb_right\\\"),\\n        throw_right_1(\\\"throw_right_1\\\"),\\n        throw_right_2(\\\"throw_right_2\\\"),\\n        one(\\\"1\\\"),\\n        two(\\\"2\\\"),\\n        three(\\\"3\\\"),;\\n\\n        String mValue;\\n        TKey(String value)\\n        {\\n            mValue = value;\\n        }\\n\\n        @Override\\n        public String toString()\\n        {\\n            return mValue;\\n        }\\n    }\\n\\n    public enum AKey\\n    {\\n        walk, climb, _throw\\n    }\\n\\n    public GameObject(World world, Vector2 size, Vector3 position)\\n    {\\n        this.mDrawRect = new Rectangle(position.x, position.y, size.x, size.y);\\n        mColRect = new Rectangle(mDrawRect);\\n\\t\\tthis.position = position;\\n        this.world = world;\\n    }\\n\\t\\n\\tpublic void updateBounds()\\n    {\\n        mDrawRect.x = mColRect.x;\\n        mDrawRect.y = mColRect.y;\\n    }\\n\\n    public abstract void _render(SpriteBatch spriteBatch);\\n    public abstract void _update(float delta);\\n    public abstract void initAssets();\\n    public abstract void dispose();\\n\\n    /**whether this object acts as bullet when hitting other objects (enemies, mario)*/\\n    public boolean isBullet()\\n    {\\n        return false;\\n    }\\n\\n    @Override\\n    public String toString()\\n    {\\n        return \\\"GameObject{\\\" +\\n                \\\"\\\\n\\\\tmDrawRect=\\\" + mDrawRect +\\n                \\\"\\\\n\\\\t mColRect=\\\" + mColRect +\\n                \\\"\\\\n\\\\t position=\\\" + position +\\n                \\\"\\\\n\\\\t velocity=\\\" + velocity +\\n                \\\"\\\\n\\\\t acceleration=\\\" + acceleration +\\n                \\\"\\\\n\\\\t world=\\\" + world +\\n                \\\"\\\\n\\\\t mRotationX=\\\" + mRotationX +\\n                \\\"\\\\n\\\\t mRotationY=\\\" + mRotationY +\\n                \\\"\\\\n\\\\t mRotationZ=\\\" + mRotationZ +\\n                \\\"\\\\n}\\\";\\n    }\\n}\"}, {\"identifier\":\"Sprite\", \"path\":\"core/src/rs/pedjaapps/smc/object/Sprite.java\", \"snippet\":\"public class Sprite extends GameObject\\n{\\n    public static final int GROUND_NORMAL = 0;\\n    public static final int GROUND_EARTH = 1;\\n    public static final int GROUND_ICE = 2;\\n    public static final int GROUND_SAND = 3;\\n    public static final int GROUND_STONE = 4;\\n    public static final int GROUND_PLASTIC = 5;\\n\\n    private boolean rotationAplied = false;\\n    public String textureAtlas;\\n    public String textureName;//name of texture from pack or png\\n    public Type type = null;\\n    private Rectangle mOrigDrawRect;\\n    private Texture txt = null;\\n    private TextureRegion region = null;\\n    public int groundType = GROUND_NORMAL;\\n\\n    public Sprite(World world, Vector2 size, Vector3 position, Rectangle colRect)\\n    {\\n        super(world, size, position);\\n        this.position = position;\\n        mOrigDrawRect = new Rectangle(mDrawRect);\\n        if (colRect != null)\\n        {\\n            mColRect.x = mDrawRect.x + Math.abs(colRect.x);\\n            mColRect.y = mDrawRect.y + Math.abs(colRect.y);\\n            mColRect.width = colRect.width;\\n            mColRect.height = colRect.height;\\n        }\\n    }\\n\\n    @Override\\n    public void _render(SpriteBatch spriteBatch)\\n    {\\n        float width = txt == null ? Utility.getWidth(region, mOrigDrawRect.height) : Utility.getWidth(txt, mOrigDrawRect.height);\\n        float originX = width * 0.5f;\\n        float originY = getOriginY();\\n        float rotation = mRotationZ;\\n        boolean flipX = mRotationY == 180;\\n        boolean flipY = mRotationX == 180;\\n\\n        if (txt != null)\\n        {\\n            spriteBatch.draw(txt, mOrigDrawRect.x, mOrigDrawRect.y, originX, originY, width, mOrigDrawRect.height, 1, 1, rotation, 0, 0, txt.getWidth(), txt.getHeight(), flipX, flipY);\\n        }\\n        else\\n        {\\n            region.flip(flipX, flipY);//flip it\\n            spriteBatch.draw(region, mOrigDrawRect.x, mOrigDrawRect.y, originX, originY, width, mOrigDrawRect.height, 1, 1, rotation);\\n            region.flip(flipX, flipY);//return it to original\\n        }\\n    }\\n\\n    @Override\\n    public void _update(float delta)\\n    {\\n\\n    }\\n\\n    @Override\\n    public void initAssets()\\n    {\\n        if (mRotationZ == 90 && mRotationX == 0 && mRotationY == 0)\\n        {\\n            mRotationY = 180;\\n            mRotationX = 180;\\n        }\\n        //load all assets\\n        TextureAtlas atlas = null;\\n        if (textureAtlas != null && textureAtlas.length() > 0)\\n        {\\n            atlas = world.screen.game.assets.manager.get(textureAtlas);\\n        }\\n\\n        if (atlas != null)\\n        {\\n            region = atlas.findRegion(textureName.split(\\\":\\\")[1]);\\n        }\\n        else\\n        {\\n            txt = world.screen.game.assets.manager.get(textureName);\\n        }\\n\\n        if (txt == null && region == null)\\n        {\\n            throw new GdxRuntimeException(\\\"both Texture and TextureRegion are null: \\\" + textureName);\\n        }\\n\\n        if (!rotationAplied)\\n        {\\n            applyRotation();\\n            rotationAplied = true;\\n        }\\n\\n    }\\n\\n    @Override\\n    public void dispose()\\n    {\\n        txt = null;\\n        region = null;\\n    }\\n\\n    private void applyRotation()\\n    {\\n        //apply rotation\\n        if (mRotationX == 180.0)\\n        {\\n            mColRect.y = mDrawRect.y + ((mDrawRect.y + mDrawRect.height) - (mColRect.y + mColRect.height));\\n        }\\n\\n        if (mRotationY == 180.0)\\n        {\\n            mColRect.x = mDrawRect.x + ((mDrawRect.x + mDrawRect.width) - (mColRect.x + mColRect.width));\\n        }\\n\\n        if (mRotationZ != 0)\\n        {\\n            float originY = getOriginY();\\n            rotate2(mOrigDrawRect, mDrawRect, mOrigDrawRect.width / 2, getOriginY(), mRotationZ);\\n            rotate2(mColRect, mColRect, mColRect.width / 2, originY, mRotationZ);\\n        }\\n    }\\n\\n    private float getOriginY()\\n    {\\n        float originY = 0;\\n        if (MathUtils.isEqual(mDrawRect.width, mDrawRect.height))\\n        {\\n            originY = mOrigDrawRect.height / 2;\\n        }\\n        return originY;\\n    }\\n\\n    /**\\n     * @param originX , originY, rotation point relative to self\\n     */\\n    private void rotate2(Rectangle sourceRect, Rectangle destRect, float originX, float originY, float rotate)\\n    {\\n        float x = sourceRect.x;\\n        float y = sourceRect.y;\\n        float centerX = sourceRect.x + originX;\\n        float centerY = sourceRect.y + originY;\\n        float w = sourceRect.width;\\n        float h = sourceRect.height;\\n\\n        Polygon polygon = new Polygon(new float[]{\\n                x, y,\\n                x, y + h,\\n                x + w, y + h,\\n                x + w, y\\n        });\\n\\n        polygon.setOrigin(centerX, centerY);\\n        polygon.setRotation(rotate);\\n        destRect.set(polygon.getBoundingRectangle());\\n    }\\n\\n    /**\\n     * Type of the block\\n     * massive = player cant pass by it\\n     * passive = player passes in front of it\\n     * front_passive = player passes behind it\\n     */\\n    public enum Type\\n    {\\n        massive, passive, front_passive, halfmassive, climbable\\n    }\\n\\n    @Override\\n    public String toString()\\n    {\\n        return \\\"Sprite{\\\" +\\n                \\\"\\\\nrotationAplied=\\\" + rotationAplied +\\n                \\\"\\\\n textureAtlas='\\\" + textureAtlas + '\\\\'' +\\n                \\\"\\\\n textureName='\\\" + textureName + '\\\\'' +\\n                \\\"\\\\n type=\\\" + type +\\n                \\\"\\\\n mOrigDrawRect=\\\" + mOrigDrawRect +\\n                \\\"\\\\n txt=\\\" + txt +\\n                \\\"\\\\n region=\\\" + region +\\n                \\\"\\\\n} \\\\n\\\" + super.toString();\\n    }\\n}\"}, {\"identifier\":\"World\", \"path\":\"core/src/rs/pedjaapps/smc/object/World.java\", \"snippet\":\"public class World\\n{\\n\\tpublic AbstractScreen screen;\\n    /**\\n     * Our player controlled hero *\\n     */\\n    public Maryo maryo;\\n    /**\\n     * A world has a level through which Mario needs to go through *\\n     */\\n    public Level level;\\n    public Array<String> visitedSubLevels = new Array<>();\\n    private Array<GameObject> visibleObjects = new Array<>(50);\\n    private Rectangle worldBounds = new Rectangle();\\n\\n\\t/**\\n\\t *\\n\\t */\\n\\tpublic final Array<GameObject> trashObjects = new Array<>();\\n\\n\\t// This is the rectangle pool used in collision detection\\n\\t// Good to avoid instantiation each frame\\n\\tpublic static Pool<Rectangle> RECT_POOL = new Pool<Rectangle>()\\n\\t{\\n\\t\\t@Override\\n\\t\\tprotected Rectangle newObject()\\n\\t\\t{\\n\\t\\t\\treturn new Rectangle();\\n\\t\\t}\\n\\t};\\n\\n    public static Pool<Polygon> POLY_POOL = new Pool<Polygon>()\\n    {\\n        @Override\\n        protected Polygon newObject()\\n        {\\n            return new Polygon();\\n        }\\n    };\\n\\n    public static Pool<Vector3> VECTOR3_POOL = new Pool<Vector3>()\\n    {\\n        @Override\\n        protected Vector3 newObject()\\n        {\\n            return new Vector3();\\n        }\\n    };\\n\\n    public static Pool<Vector2> VECTOR2_POOL = new Pool<Vector2>()\\n    {\\n        @Override\\n        protected Vector2 newObject()\\n        {\\n            return new Vector2();\\n        }\\n    };\\n\\n    public Pool<Fireball> FIREBALL_POOL = new Pool<Fireball>()\\n    {\\n        @Override\\n        protected Fireball newObject()\\n        {\\n            Fireball fb = new Fireball(World.this, new Vector3());\\n            fb.initAssets();\\n            return fb;\\n        }\\n    };\\n\\n    public Pool<Iceball> ICEBALL_POOL = new Pool<Iceball>()\\n    {\\n        @Override\\n        protected Iceball newObject()\\n        {\\n            Iceball fb = new Iceball(World.this, new Vector3());\\n            fb.initAssets();\\n            return fb;\\n        }\\n    };\\n\\n    /**\\n     * Return only the blocks that need to be drawn *\\n     *\\n     */\\n    public void drawVisibleObjects(OrthographicCamera cam, SpriteBatch batch)\\n    {\\n        visibleObjects.clear();\\n        setRectToVisibleCamArea(worldBounds, cam);\\n        for (int i = 0, size = level.gameObjects.size(); i < size; i++)\\n        {\\n            GameObject object = level.gameObjects.get(i);\\n            Rectangle bounds = object.mDrawRect;\\n            if (bounds.overlaps(worldBounds))\\n            {\\n                visibleObjects.add(object);\\n                object._render(batch);\\n            }\\n        }\\n    }\\n\\n    public static void setRectToVisibleCamArea(Rectangle worldBounds, OrthographicCamera cam) {\\n        float camX = cam.position.x;\\n        float camY = cam.position.y;\\n        float camWidth = (cam.viewportWidth * cam.zoom);\\n        float camHeight = (cam.viewportHeight * cam.zoom);\\n        float wX = camX - camWidth * 0.5f - 1;\\n        float wY = camY - camHeight * 0.5f - 1;\\n        float wW = camWidth + 1;\\n        float wH = camHeight + 1;\\n        worldBounds.set(wX, wY, wW, wH);\\n    }\\n\\n    public void createMaryoRectWithOffset(Rectangle offsetBounds, float offset)\\n\\t{\\n        float offsetX = Math.max(offset, Constants.CAMERA_WIDTH);\\n        float offsetY = Math.max(offset * 0.5f, Constants.CAMERA_HEIGHT);\\n\\t\\tfloat wX = maryo.mColRect.x - offsetX;\\n        float wY = maryo.mColRect.y - offsetY;\\n        float wW = maryo.mColRect.x + maryo.mColRect.width + offsetX * 2;\\n        float wH = maryo.mColRect.y + maryo.mColRect.height + offsetY * 2;\\n\\t\\toffsetBounds.set(wX, wY, wW, wH);\\n\\t}\\n\\n    // --------------------\\n    public World(AbstractScreen screen)\\n    {\\n\\t\\tthis.screen = screen;\\n    }\\n\\n    public Array<GameObject> getVisibleObjects()\\n    {\\n        return visibleObjects == null ? new Array<GameObject>() : visibleObjects;\\n    }\\n\\n    /**\\n     * Check if obejct is visible in current camera bounds\\n     *\\n     */\\n    public boolean isObjectVisible(GameObject object, OrthographicCamera cam)\\n    {\\n        setRectToVisibleCamArea(worldBounds, cam);\\n        return object.mDrawRect.overlaps(worldBounds);\\n    }\\n\\n    public void dispose()\\n    {\\n        level.dispose();\\n        maryo.dispose();\\n        maryo = null;\\n    }\\n}\"}, {\"identifier\":\"GameScreen\", \"path\":\"core/src/rs/pedjaapps/smc/screen/GameScreen.java\", \"snippet\":\"public class GameScreen extends AbstractScreen {\\n    private static final String GOD_MOD_TEXT = \\\"god\\\";\\n    private static final float FREQ_OTU_REFRESH = .2f;\\n    public OrthographicCamera cam;\\n    public OrthographicCamera guiCam;\\n    public HUD hud;\\n    public String levelName;\\n    public KillPointsTextHandler killPointsTextHandler;\\n    public String entryName;\\n    public GameScreen parent;\\n    public boolean resumed, forceCheckEnter;\\n    protected Vector3 cameraEditModeTranslate = new Vector3();\\n    private boolean debug;\\n    private World world;\\n    private OrthographicCamera pCamera;\\n    private ShapeRenderer shapeRenderer = new ShapeRenderer();\\n    /**\\n     * Textures *\\n     */\\n    private ParticleEffect globalEffect;\\n    private SpriteBatch spriteBatch;\\n    private BitmapFont debugFont, debugObjectFont;\\n    private GlyphLayout debugGlyph;\\n    private Vector2 camMin = new Vector2();\\n    private Vector2 camMax = new Vector2();\\n    private float width, height;\\n    private Rectangle maryoBWO = new Rectangle();\\n    private GAME_STATE gameState;\\n    private LevelLoader loader;\\n    private Music music;\\n    private boolean cameraForceSnap;\\n    private InputProcessor keyboardAndTouch;\\n    private Array<GameObject> objectsToUpdate = new Array<>(75);\\n    private float timeSinceUpdObjRefresh = FREQ_OTU_REFRESH;\\n    private int objRefreshSize;\\n    private InputMultiplexer inputprocessor;\\n    private GLProfiler profiler;\\n\\n    public GameScreen(MaryoGame game, boolean fromMenu, String levelName) {\\n        this(game, fromMenu, levelName, null);\\n    }\\n\\n    public GameScreen(MaryoGame game, boolean fromMenu, String levelName, GameScreen parent) {\\n        super(game);\\n        this.profiler = new GLProfiler(Gdx.graphics);\\n        this.parent = parent;\\n        this.levelName = levelName;\\n        gameState = GAME_STATE.GAME_READY;\\n        width = Gdx.graphics.getWidth();\\n        height = Gdx.graphics.getHeight();\\n        world = new World(this);\\n        hud = new HUD(world, this);\\n        if (parent != null)\\n            hud.setHasKeyboardOrController(parent.hud.isHasKeyboardOrController(), true);\\n        keyboardAndTouch = new GameScreenInput(this, world);\\n        this.cam = new OrthographicCamera(Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        this.cam.setToOrtho(false, Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        this.cam.update();\\n\\n        pCamera = new OrthographicCamera(Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        pCamera.setToOrtho(false, Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        pCamera.position.set(Constants.CAMERA_WIDTH / 2f, Constants.CAMERA_HEIGHT / 2f, 0);\\n        pCamera.update();\\n\\n        guiCam = new OrthographicCamera(width, height);\\n        guiCam.position.set(width / 2f, height / 2f, 0);\\n        guiCam.update();\\n\\n        spriteBatch = new SpriteBatch();\\n\\n        if (fromMenu) {\\n            GameSave.startLevelFresh();\\n            game.levelStart(levelName);\\n        }\\n\\n        loader = new LevelLoader(levelName);\\n    }\\n\\n    public GAME_STATE getGameState() {\\n        return gameState;\\n    }\\n\\n    public void setGameState(GAME_STATE gameState) {\\n        if (gameState == GAME_STATE.GAME_PAUSED && (GameScreenInput.isGamePausedOrEnded(this.gameState)))\\n            return;\\n\\n        if (gameState == GAME_STATE.GAME_PAUSED && this.gameState != GAME_STATE.GAME_PAUSED)\\n            MusicManager.pause();\\n        else if (gameState != GAME_STATE.GAME_PAUSED && this.gameState == GAME_STATE.GAME_PAUSED)\\n            MusicManager.resume();\\n\\n        this.gameState = gameState;\\n        hud.onGameStateChange();\\n        hud.updateTimer = !(gameState == GAME_STATE.PLAYER_DEAD || gameState == GAME_STATE.PLAYER_UPDATING ||\\n                gameState == GAME_STATE.SHOW_BOX || gameState == GAME_STATE.PLAYER_DIED);\\n\\n        if (gameState == GAME_STATE.PLAYER_DIED || gameState == GAME_STATE.GAME_LEVEL_END)\\n            MusicManager.stop(true);\\n\\n        if (gameState == GAME_STATE.PLAYER_DEAD)\\n            hud.showLevelEndScreen();\\n    }\\n\\n    public Music getMusic() {\\n        return music;\\n    }\\n\\n    public boolean isDebug() {\\n        return debug;\\n    }\\n\\n    public void setDebug(boolean debug) {\\n        this.debug = debug;\\n        if (debug)\\n            profiler.enable();\\n        else\\n            profiler.disable();\\n    }\\n\\n    @Override\\n    public void show() {\\n        music = game.assets.manager.get(loader.level.music.first());\\n        if (!resumed)\\n            music.setPosition(0);\\n        music.setLooping(true);\\n        MusicManager.play(music);\\n        if (!resumed || forceCheckEnter) {\\n            world.maryo.checkLevelEnter(entryName);\\n            forceCheckEnter = false;\\n        }\\n        Gdx.input.setCatchBackKey(true);\\n\\n        inputprocessor = new InputMultiplexer();\\n        inputprocessor.addProcessor(keyboardAndTouch);\\n        inputprocessor.addProcessor(hud.stage);\\n\\n        Gdx.input.setInputProcessor(inputprocessor);\\n        game.controllerMappings.setInputProcessor(inputprocessor);\\n        if (resumed) {\\n            cameraForceSnap = true;\\n        }\\n    }\\n\\n    @Override\\n    public void render(float delta) {\\n        delta = Math.min(delta, 1 / 30f);\\n        if (delta <= 0)\\n            return;\\n\\n        Gdx.gl.glClearColor(0f, 0f, 0f, 1);\\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\\n\\n        //physics\\n        updateObjects(delta);\\n        //physics end\\n\\n        moveCamera(cam, gameState == GAME_STATE.GAME_EDIT_MODE ? cameraEditModeTranslate : world.maryo.position,\\n                gameState == GAME_STATE.GAME_EDIT_MODE || (gameState != GAME_STATE.GAME_RUNNING && gameState !=\\n                        GAME_STATE.PLAYER_UPDATING && gameState != GAME_STATE.PLAYER_DEAD));\\n        drawBackground();\\n        spriteBatch.setProjectionMatrix(cam.combined);\\n        spriteBatch.begin();\\n        drawObjects();\\n        killPointsTextHandler.render(spriteBatch, delta);\\n\\n        if (globalEffect != null) {\\n            globalEffect.setPosition(cam.position.x - Constants.CAMERA_WIDTH * 0.5f, cam.position.y + 0.5f *\\n                    Constants.CAMERA_HEIGHT);\\n            globalEffect.draw(spriteBatch);\\n\\n            if (gameState == GAME_STATE.GAME_RUNNING) globalEffect.update(delta);\\n        }\\n\\n        spriteBatch.end();\\n\\n        hud.render(gameState, delta);\\n\\n        if (debug) {\\n            spriteBatch.setProjectionMatrix(guiCam.combined);\\n            spriteBatch.begin();\\n            drawDebugText();\\n            spriteBatch.end();\\n            drawDebug();\\n        }\\n\\n        if (gameState == GAME_STATE.PLAYER_DIED) {\\n            handlePlayerDied();\\n        }\\n\\n        if (gameState == GAME_STATE.GAME_LEVEL_END) {\\n            handleLevelEnded(delta);\\n        }\\n\\n        //cleanup\\n        if (world.trashObjects.size > 0) {\\n            for (int i = 0; i < world.trashObjects.size; i++)\\n                world.level.gameObjects.remove(world.trashObjects.get(i));\\n            world.trashObjects.clear();\\n            // neuaufbau der objectstoupdate auslösen\\n            objRefreshSize = 0;\\n        }\\n\\n        //debug\\n        if (gameState == GAME_STATE.GAME_EDIT_MODE) {\\n            if (Gdx.input.isKeyPressed(Input.Keys.RIGHT)) {\\n                cameraEditModeTranslate.x += 0.2f;\\n            } else if (Gdx.input.isKeyPressed(Input.Keys.LEFT)) {\\n                cameraEditModeTranslate.x -= 0.2f;\\n            }\\n            if (Gdx.input.isKeyPressed(Input.Keys.UP)) {\\n                cameraEditModeTranslate.y += 0.2f;\\n            } else if (Gdx.input.isKeyPressed(Input.Keys.DOWN)) {\\n                cameraEditModeTranslate.y -= 0.2f;\\n            }\\n        }\\n        if (debug) profiler.reset();\\n    }\\n\\n    public void endLevel() {\\n        levelName = getMenuLevelname();\\n\\n        if (parent != null) {\\n            parent.dispose();\\n            parent = null;\\n        }\\n\\n        GameSave.levelCleared(levelName);\\n        game.levelEnd(levelName, true);\\n        MusicManager.stop(true);\\n        Sound clear = game.assets.manager.get(Assets.MUSIC_COURSECLEAR);\\n        SoundManager.play(clear);\\n        setGameState(GAME_STATE.GAME_LEVEL_END);\\n        hud.showLevelEndScreen();\\n    }\\n\\n    public String getMenuLevelname() {\\n        return parent == null ? levelName : parent.levelName;\\n    }\\n\\n    private void handleLevelEnded(float delta) {\\n\\n    }\\n\\n    public void showBoxText(Box box) {\\n        setGameState(GAME_STATE.SHOW_BOX);\\n        hud.showPopupBox(box.text);\\n    }\\n\\n    public void discardBoxText() {\\n        if (gameState == GAME_STATE.SHOW_BOX) {\\n            if (hud.hidePopupBox())\\n                setGameState(GAME_STATE.GAME_RUNNING);\\n        }\\n    }\\n\\n    private void handlePlayerDied() {\\n    }\\n\\n    private void drawBackground() {\\n        for (Background background : world.level.backgrounds) {\\n            background.render(cam, spriteBatch);\\n        }\\n    }\\n\\n    private void moveCamera(OrthographicCamera cam, Vector3 pos, boolean snap) {\\n        //frieren bei größer/kleiner, aber sicherstellen das Maryo sichtbar ist (falls aus Kamerabereich geplumpst)\\n        if ((gameState == GAME_STATE.PLAYER_UPDATING && !world.maryo.entering && !world.maryo.exiting\\n                && world.isObjectVisible(world.maryo, cam))) {\\n            return;\\n        }\\n        if (snap || cameraForceSnap) {\\n            cam.position.set(pos);\\n            cameraForceSnap = false;\\n        } else {\\n            cam.position.lerp(pos, 0.05f);\\n        }\\n        cam.update();\\n        if (gameState != GAME_STATE.GAME_EDIT_MODE) keepCameraInBounds(cam);\\n    }\\n\\n    private void keepCameraInBounds(OrthographicCamera cam) {\\n        float camX = cam.position.x;\\n        float camY = cam.position.y;\\n\\n        camMin.set(cam.viewportWidth, cam.viewportHeight);\\n        camMin.scl(cam.zoom / 2); //bring to center and scale by the zoom level\\n        camMax.set(world.level.width, world.level.height);\\n        camMax.sub(camMin); //bring to center\\n\\n        //keep camera within borders\\n        camX = Math.min(camMax.x, Math.max(camX, camMin.x));\\n        camY = Math.min(camMax.y, Math.max(camY, camMin.y));\\n\\n        cam.position.set(camX, camY, cam.position.z);\\n        cam.update();\\n    }\\n\\n    private void updateObjects(float delta) {\\n        if (gameState == GAME_STATE.GAME_RUNNING) {\\n            timeSinceUpdObjRefresh += delta;\\n            if (timeSinceUpdObjRefresh >= FREQ_OTU_REFRESH || world.level.gameObjects.size() != objRefreshSize) {\\n                objectsToUpdate.clear();\\n                timeSinceUpdObjRefresh = 0;\\n                objRefreshSize = world.level.gameObjects.size();\\n                world.createMaryoRectWithOffset(maryoBWO, 8);\\n                for (int i = 0, size = world.level.gameObjects.size(); i < size; i++) {\\n                    GameObject go = world.level.gameObjects.get(i);\\n                    if (maryoBWO.overlaps(go.mColRect) || (go instanceof Fireball) || (go instanceof Iceball)) {\\n                        objectsToUpdate.add(go);\\n                        go._update(delta);\\n                    }\\n                }\\n            } else {\\n                for (int i = 0; i < objectsToUpdate.size; i++) {\\n                    GameObject go = objectsToUpdate.get(i);\\n                    go._update(delta);\\n                }\\n            }\\n\\n        } else if (gameState == GAME_STATE.PLAYER_DEAD || gameState == GAME_STATE.PLAYER_UPDATING)\\n            world.maryo._update(delta);\\n    }\\n\\n    private void drawObjects() {\\n        world.drawVisibleObjects(cam, spriteBatch);\\n    }\\n\\n    private void drawDebug() {\\n        // render blocks\\n        shapeRenderer.setProjectionMatrix(cam.combined);\\n        shapeRenderer.begin(ShapeRenderer.ShapeType.Line);\\n        for (int i = 0; i < world.getVisibleObjects().size; i++) {\\n            GameObject go = world.getVisibleObjects().get(i);\\n            Rectangle colRect = go.mColRect;\\n            Rectangle drawRect = go.mDrawRect;\\n            shapeRenderer.setColor(0, 1, 0, 1);\\n            shapeRenderer.rect(colRect.x, colRect.y, colRect.width, colRect.height);\\n            shapeRenderer.setColor(1, 0, 0, 1);\\n            shapeRenderer.rect(drawRect.x, drawRect.y, drawRect.width, drawRect.height);\\n        }\\n        // render maryo\\n        Maryo maryo = world.maryo;\\n        Rectangle body = maryo.mColRect;\\n        Rectangle bounds = maryo.mDrawRect;\\n        world.createMaryoRectWithOffset(maryoBWO, 8);\\n        shapeRenderer.setColor(0, 1, 0, 1);\\n        shapeRenderer.rect(body.x, body.y, body.width, body.height);\\n        shapeRenderer.setColor(1, 0, 0, 1);\\n        shapeRenderer.rect(bounds.x, bounds.y, bounds.width, bounds.height);\\n        shapeRenderer.setColor(0, 0, 1, 1);\\n        shapeRenderer.rect(maryo.debugRayRect.x, maryo.debugRayRect.y, maryo.debugRayRect.width, maryo.debugRayRect\\n                .height);\\n        shapeRenderer.setColor(0.3f, 0.9f, 0, 0);\\n        shapeRenderer.rect(maryoBWO.x, maryoBWO.y, maryoBWO.width, maryoBWO.height);\\n        shapeRenderer.end();\\n    }\\n\\n    private void drawDebugText() {\\n        String debugMessage = generateDebugMessage();\\n        debugGlyph.setText(debugFont, debugMessage);\\n        debugFont.draw(spriteBatch, debugMessage, 20, height - 20);\\n\\n        Vector2 point = World.VECTOR2_POOL.obtain();\\n        float x = Gdx.input.getX();\\n        float y = invertY(Gdx.input.getY());\\n        Utility.guiPositionToGamePosition(x, y, this, point);\\n\\n        for (GameObject gameObject : world.level.gameObjects) {\\n            if (gameObject.mDrawRect.contains(point)) {\\n                String objectDebugText = gameObject.toString();\\n                float tWidth = width * 0.4f;\\n                debugGlyph.setText(debugObjectFont, objectDebugText, Color.BLACK, tWidth, Align.left, true);\\n                float height = debugGlyph.height;\\n                debugObjectFont.draw(spriteBatch, debugGlyph, x - tWidth, y + height);\\n                break;\\n            }\\n        }\\n\\n        World.VECTOR2_POOL.free(point);\\n    }\\n\\n    private String generateDebugMessage() {\\n        return \\\"Level: width=\\\" + world.level.width + \\\", height=\\\" + world.level.height\\n                + \\\"\\\\n\\\" + \\\"Player: x=\\\" + world.maryo.position.x + \\\", y=\\\" + world.maryo.position.y\\n                + \\\"\\\\n\\\" + \\\"LevelName: \\\" + levelName\\n                + \\\"\\\\n\\\" + \\\"Player Vel: x=\\\" + world.maryo.velocity.x + \\\", y=\\\" + world.maryo.velocity.y\\n                + \\\"\\\\n\\\" + \\\"World Camera: x=\\\" + cam.position.x + \\\", y=\\\" + cam.position.y\\n                + \\\"\\\\n\\\" + \\\"JavaHeap: \\\" + Gdx.app.getJavaHeap() / 1000000 + \\\"MB\\\"\\n                + \\\"\\\\n\\\" + \\\"NativeHeap: \\\" + Gdx.app.getNativeHeap() / 1000000 + \\\"MB\\\"\\n                + \\\"\\\\n\\\" + \\\"OGL Draw Calls: \\\" + profiler.getDrawCalls()\\n                + \\\"\\\\n\\\" + \\\"OGL TextureBindings: \\\" + profiler.getTextureBindings()\\n                + \\\"\\\\n\\\" + \\\"Screen w=\\\" + width + \\\"h=\\\" + height\\n                + \\\"\\\\n\\\" + \\\"FPS: \\\" + Gdx.graphics.getFramesPerSecond();\\n    }\\n\\n    @Override\\n    public void resize(int width, int height) {\\n        super.resize(width, height);\\n        this.width = width;\\n        this.height = height;\\n        Vector3 oldPos = cam.position;\\n\\n        Constants.initCamera();\\n\\n        cam = new OrthographicCamera(Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        cam.setToOrtho(false, Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        cam.update();\\n        cam.position.x = oldPos.x;\\n        cam.position.y = oldPos.y;\\n\\n        pCamera = new OrthographicCamera(Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        pCamera.setToOrtho(false, Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        pCamera.position.set(Constants.CAMERA_WIDTH / 2f, Constants.CAMERA_HEIGHT / 2f, 0);\\n        pCamera.update();\\n\\n        guiCam = new OrthographicCamera(width, height);\\n        guiCam.position.set(width / 2f, height / 2f, 0);\\n        guiCam.update();\\n\\n        for (Background background : world.level.backgrounds) {\\n            background.resize(cam);\\n        }\\n        hud.resize(width, height);\\n    }\\n\\n    @Override\\n    public void hide() {\\n        setGameState(GAME_STATE.GAME_PAUSED);\\n        music.stop();\\n    }\\n\\n    @Override\\n    public void pause() {\\n        setGameState(GAME_STATE.GAME_PAUSED);\\n        super.pause();\\n    }\\n\\n    @Override\\n    public void resume() {\\n        super.resume();\\n    }\\n\\n    @Override\\n    public void dispose() {\\n        super.dispose();\\n        music.stop();\\n        hud.dispose();\\n        inputprocessor.clear();\\n        game.assets.dispose();\\n        world.dispose();\\n        if (globalEffect != null) {\\n            globalEffect.dispose();\\n        }\\n        if (debug) profiler.disable();\\n    }\\n\\n    @Override\\n    public void loadAssets() {\\n        loader.parseLevel(world);\\n        game.assets.manager.load(\\\"data/animation/particles/fireball_emitter_2.p\\\", ParticleEffect.class, game.assets\\n                .particleEffectParameter);\\n        game.assets.manager.load(\\\"data/animation/particles/fireball_explosion_emitter.p\\\", ParticleEffect.class, game\\n                .assets.particleEffectParameter);\\n        game.assets.manager.load(\\\"data/animation/particles/iceball_emitter.p\\\", ParticleEffect.class, game.assets\\n                .particleEffectParameter);\\n        game.assets.manager.load(\\\"data/animation/particles/iceball_explosion_emitter.p\\\", ParticleEffect.class, game\\n                .assets.particleEffectParameter);\\n        game.assets.manager.load(\\\"data/animation/particles/star_trail.p\\\", ParticleEffect.class, game.assets\\n                .particleEffectParameter);\\n        game.assets.manager.load(\\\"data/animation/particles/maryo_star.p\\\", ParticleEffect.class, game.assets\\n                .particleEffectParameter);\\n        hud.loadAssets();\\n\\n        //audio\\n        game.assets.manager.load(Assets.SOUND_AUDIO_ON, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ITEM_GOLDPIECE1, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ITEM_GOLDPIECE_RED, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_PLAYER_DEAD, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_JUMP_BIG, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_JUMP_BIG_POWER, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_JUMP_SMALL, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_JUMP_SMALL_POWER, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_PLAYER_POWERDOWN, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_WALL_HIT, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ITEM_FIREBALL, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ITEM_LIVE_UP, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ITEMBOX_SET, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ITEMBOX_GET, Sound.class);\\n\\n        game.assets.manager.load(Assets.SOUND_SPROUT, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ITEM_STAR_KILL, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_LEAVE_PIPE, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ENTER_PIPE, Sound.class);\\n\\n        game.assets.manager.load(Assets.SOUND_ITEM_FIREBALL_REPELLED, Sound.class);\\n\\n        game.assets.manager.load(Assets.SOUND_ITEM_ICEBALL_HIT, Sound.class);\\n        game.assets.manager.load(Assets.SOUND_ITEM_FIREBALL_EXPLOSION, Sound.class);\\n\\n        game.assets.manager.load(Assets.MUSIC_COURSECLEAR, Sound.class);\\n\\n    }\\n\\n    @Override\\n    public void onAssetsLoaded() {\\n        hud.initAssets();\\n        world.level = loader.level;\\n\\n        debugFont = new BitmapFont();\\n        debugFont.setColor(1, 0, 0, 1);\\n\\n        debugObjectFont = new BitmapFont();\\n        debugGlyph = new GlyphLayout();\\n\\n        for (GameObject go : loader.level.gameObjects) {\\n            go.initAssets();\\n        }\\n\\n        BitmapFont pointsFont = game.assets.manager.get(Assets.SKIN_HUD, Skin.class).getFont(Assets.FONT_SIMPLE25);\\n        pointsFont.setColor(1, 1, 1, 1);\\n        killPointsTextHandler = new KillPointsTextHandler(pointsFont);\\n        for (Background background : world.level.backgrounds) {\\n            background.onAssetsLoaded(cam, game.assets);\\n        }\\n\\n        if (!TextUtils.isEmpty(world.level.particleEffect)) {\\n            globalEffect = new ParticleEffect(game.assets.manager.get(world.level.particleEffect, ParticleEffect\\n                    .class));\\n            globalEffect.start();\\n        }\\n    }\\n\\n    private float invertY(float y) {\\n        return height - y;\\n    }\\n\\n    public World getWorld() {\\n        return world;\\n    }\\n\\n    public void setWorld(World world) {\\n        this.world = world;\\n    }\\n\\n    public float getWidth() {\\n        return width;\\n    }\\n\\n    public void setWidth(float width) {\\n        this.width = width;\\n    }\\n\\n    public float getHeight() {\\n        return height;\\n    }\\n\\n    public void setHeight(float height) {\\n        this.height = height;\\n    }\\n\\n    /**\\n     * Wird aufgerufen wenn ENTER oder im HUD weiter gedrückt wird bei Tod, Game Over oder Levenende\\n     */\\n    public void proceedFromPausedOrEnded() {\\n\\n        // aus der Pause heraus einfach weitermachen\\n        if (gameState == GAME_STATE.GAME_PAUSED)\\n            setGameState(GAME_STATE.GAME_RUNNING);\\n\\n        else if (gameState == GAME_STATE.GAME_LEVEL_END) {\\n            // nächstes Level\\n            String nextLevel = Level.getNextLevel(getMenuLevelname());\\n            if (nextLevel != null)\\n                game.setScreen(new LoadingScreen(new GameScreen(game, true, nextLevel), false));\\n            else\\n                exitToMenu();\\n\\n        } else if (gameState == GAME_STATE.PLAYER_DEAD || gameState == GAME_STATE.PLAYER_DIED) {\\n            if (GameSave.getLifes() > 0)\\n                game.setScreen(new LoadingScreen(new GameScreen(game, true, getMenuLevelname()), false));\\n            else\\n                game.setScreen(new LoadingScreen(new MainMenuScreen(game), false));\\n\\n            game.levelEnd(levelName, false);\\n        }\\n    }\\n\\n    public enum GAME_STATE {\\n        GAME_READY, GAME_RUNNING, GAME_PAUSED, GAME_LEVEL_END, PLAYER_DIED, PLAYER_DEAD,\\n        SHOW_BOX, PLAYER_UPDATING, GAME_EDIT_MODE\\n    }\\n\\n    public static class KillPointsTextHandler {\\n        private final List<KillPoint> pointsTextPool = new ArrayList<>(10);\\n        NAHudText<Integer> text = new NAHudText<>(null, null);\\n        private BitmapFont font;\\n\\n        KillPointsTextHandler(BitmapFont font) {\\n            this.font = font;\\n        }\\n\\n        public void add(int points, float positionX, float positionY) {\\n            for (KillPoint point : pointsTextPool) {\\n                if (point.recycled) {\\n                    point.reset(positionX, positionY, points);\\n                    return;\\n                }\\n            }\\n            KillPoint point = new KillPoint(points, positionX, positionY);\\n            pointsTextPool.add(point);\\n        }\\n\\n        public void render(SpriteBatch batch, float deltaTime) {\\n            //noinspection ForLoopReplaceableByForEach\\n            float oldScale = font.getData().scaleX;\\n            boolean useInt = font.usesIntegerPositions();\\n            font.getData().setScale(0.015f);\\n            font.setUseIntegerPositions(false);\\n\\n            for (int i = 0, size = pointsTextPool.size(); i < size; i++) {\\n                KillPoint point = pointsTextPool.get(i);\\n                if (!point.recycled) {\\n                    point.draw(batch, deltaTime, font, text);\\n                }\\n            }\\n\\n            font.getData().setScale(oldScale);\\n            font.setUseIntegerPositions(useInt);\\n\\n        }\\n\\n        private static class KillPoint {\\n            static final float velocity = 0.9f;\\n            static final float maxDistance = 0.4f;\\n            private boolean recycled = false;\\n            private int points;\\n            private float positionX, positionY, origPosY;\\n            private float alpha = 1;\\n\\n            KillPoint(int points, float positionX, float positionY) {\\n                this.points = points;\\n                this.positionX = positionX;\\n                this.positionY = positionY;\\n                this.origPosY = positionY;\\n            }\\n\\n            public void draw(SpriteBatch spriteBatch, float deltaTime, BitmapFont font, NAHudText<Integer> text) {\\n                if (positionY >= origPosY + maxDistance) {\\n                    recycled = true;\\n                    return;\\n                }\\n                float velDelta = velocity * deltaTime;\\n                positionY += maxDistance * velDelta;\\n                alpha -= 1 / (maxDistance / (maxDistance * velDelta));\\n                font.getColor().set(1, 1, 1, alpha);\\n                font.draw(spriteBatch, text.toString(points), positionX, positionY);\\n            }\\n\\n            void reset(float posX, float posY, int points) {\\n                recycled = false;\\n                positionX = posX;\\n                positionY = posY;\\n                this.points = points;\\n                origPosY = posY;\\n                alpha = 1;\\n            }\\n        }\\n    }\\n}\"}, {\"identifier\":\"Shader\", \"path\":\"core/src/rs/pedjaapps/smc/shader/Shader.java\", \"snippet\":\"public class Shader\\n{\\n    public static ShaderProgram FREEZE_SHADER;\\n    public static ShaderProgram SHAKE_SHADER;\\n    public static ShaderProgram NORMAL_BLEND_SHADER;\\n    public static ShaderProgram GLOW_SHADER;\\n    public static ShaderProgram GS_SHADER; //Grayscale!\\n\\n    public static void init()\\n    {\\n        ShaderProgram.pedantic = false;\\n        FREEZE_SHADER = new ShaderProgram(Gdx.files.internal(\\\"data/shaders/freeze.vert\\\"), Gdx.files.internal(\\\"data/shaders/freeze.frag\\\"));\\n        SHAKE_SHADER = new ShaderProgram(Gdx.files.internal(\\\"data/shaders/shake.vert\\\"), Gdx.files.internal(\\\"data/shaders/shake.frag\\\"));\\n        GS_SHADER = new ShaderProgram(Gdx.files.internal(\\\"data/shaders/gs.vert\\\"), Gdx.files.internal(\\\"data/shaders/gs.frag\\\"));\\n        GLOW_SHADER = new ShaderProgram(Gdx.files.internal(\\\"data/shaders/glow.vert\\\"), Gdx.files.internal(\\\"data/shaders/glow.frag\\\"));\\n        NORMAL_BLEND_SHADER = new ShaderProgram(Gdx.files.internal(\\\"data/shaders/normal_blend.vert\\\"), Gdx.files.internal(\\\"data/shaders/normal_blend.frag\\\"));\\n    }\\n\\n    public static void dispose()\\n    {\\n        FREEZE_SHADER.dispose();\\n        NORMAL_BLEND_SHADER.dispose();\\n        GLOW_SHADER.dispose();\\n        GS_SHADER.dispose();\\n    }\\n}\"}, {\"identifier\":\"Constants\", \"path\":\"core/src/rs/pedjaapps/smc/utility/Constants.java\", \"snippet\":\"public class Constants\\n{\\n    public static float CAMERA_WIDTH/* = 10f*/;\\n    public static float MENU_CAMERA_WIDTH/* = 10f*/;\\n\\n    public static final float MENU_CAMERA_HEIGHT = 7f;\\n    public static final float CAMERA_HEIGHT = 9f;\\n\\n    public static float ASPECT_RATIO;\\n\\n    public static final float MENU_DRAW_WIDTH = 12.444444444f;\\n    public static final float DRAW_WIDTH = 16f;\\n\\n    public static final int GRAVITY = -20;\\n\\n    static\\n    {\\n        initCamera();\\n    }\\n\\n    public static void initCamera()\\n    {\\n        ASPECT_RATIO = (float)MaryoGame.NATIVE_WIDTH/(float)MaryoGame.NATIVE_HEIGHT;\\n        CAMERA_WIDTH = CAMERA_HEIGHT * ASPECT_RATIO;\\n        MENU_CAMERA_WIDTH = MENU_CAMERA_HEIGHT * ASPECT_RATIO;\\n    }\\n}\"}, {\"identifier\":\"GameSave\", \"path\":\"core/src/rs/pedjaapps/smc/utility/GameSave.java\", \"snippet\":\"public class GameSave {\\n    public static final String LEADERBOARD_TOTAL = \\\"TOTAL_SCORE\\\";\\n    public static final String EVENT_LEVEL_STARTED = \\\"EVENT_LEVEL_STARTED\\\";\\n    public static final String EVENT_LEVEL_CLEARED = \\\"EVENT_LEVEL_CLEARED\\\";\\n    public static final String CLOUD_FILE_NAME = \\\"gamestate\\\";\\n    public static IGameServiceClient cloudSaveClient;\\n    // der aktuelle Stand, der gerade gespielt wird\\n    private static int levelScore;\\n    private static long levelPlaytime;\\n    private static int levelStartedNum;\\n    private static int maryoState;\\n    private static int persistentMaryoState;\\n    private static int lifes;\\n    private static long totalPlaytime;\\n    private static int coins;\\n    private static int item;\\n    private static int persistentItem;\\n    private static int totalScore;\\n    private static int bestTotal;\\n    private static int gameOverNum;\\n    //cloud save\\n    private static boolean loadedFromCloud;\\n    private static boolean loadingFromCloud;\\n\\n    public static boolean isLoadingFromCloud() {\\n        return loadingFromCloud || cloudSaveClient != null && cloudSaveClient.isConnectionPending();\\n    }\\n\\n    public static long getLevelPlaytime() {\\n        return levelPlaytime;\\n    }\\n\\n    public static void addLevelPlaytime(long timeToAdd) {\\n        levelPlaytime += timeToAdd;\\n        totalPlaytime += timeToAdd;\\n    }\\n\\n    public static void init() {\\n        // gibt es bereits einen gespeicherten Stand?\\n        boolean didRead = false;\\n        try {\\n            String savedGame = PrefsManager.getSaveGame();\\n            if (savedGame != null) {\\n                readFromJson(savedGame);\\n                didRead = true;\\n            }\\n        } catch (Throwable t) {\\n            Gdx.app.error(\\\"GameSave\\\", \\\"Error loading saved state\\\", t);\\n        }\\n\\n        if (!didRead || lifes <= 0)\\n            resetGameOver();\\n    }\\n\\n    /**\\n     * read saved game, if gameovernum and levelstarts are greater than current state\\n     *\\n     * @param savedgame json\\n     * @return true if savegame was read, false otherwise\\n     */\\n    private static boolean readFromJson(String savedgame) {\\n        JsonValue savegame = new JsonReader().parse(savedgame);\\n        int readLevelStartedNum = savegame.getInt(\\\"levelstarts\\\", 0);\\n        int readGameOverNum = savegame.getInt(\\\"gameovers\\\", 1);\\n\\n        boolean readStateIsNewer = (readGameOverNum > gameOverNum\\n                || readGameOverNum == gameOverNum && readLevelStartedNum > levelStartedNum);\\n\\n        if (readStateIsNewer) {\\n            lifes = savegame.getInt(\\\"lifes\\\");\\n            coins = savegame.getInt(\\\"coins\\\");\\n            persistentItem = savegame.getInt(\\\"item\\\");\\n            persistentMaryoState = savegame.getInt(\\\"state\\\");\\n            totalPlaytime = savegame.getLong(\\\"playtime\\\");\\n            levelStartedNum = readLevelStartedNum;\\n            gameOverNum = readGameOverNum;\\n            item = persistentItem;\\n            maryoState = persistentMaryoState;\\n        }\\n\\n        // following\\n        bestTotal = Math.max(bestTotal, savegame.getInt(\\\"bestTotal\\\", 0));\\n\\n        JsonValue levelList = savegame.get(\\\"levels\\\");\\n        for (JsonValue jsonlevel = levelList.child; jsonlevel != null; jsonlevel = jsonlevel.next) {\\n            String levelId = jsonlevel.getString(\\\"id\\\");\\n            Level level = Level.getLevel(levelId);\\n            if (level != null) {\\n                if (readStateIsNewer)\\n                    level.currentScore = jsonlevel.getInt(\\\"score\\\");\\n                level.bestScore = Math.max(level.bestScore, jsonlevel.getInt(\\\"best\\\"));\\n            }\\n        }\\n\\n        recalcTotalScore();\\n\\n        return readStateIsNewer;\\n    }\\n\\n    private static JsonValue toJson() {\\n        JsonValue json = new JsonValue(JsonValue.ValueType.object);\\n        json.addChild(\\\"lifes\\\", new JsonValue(lifes));\\n        json.addChild(\\\"coins\\\", new JsonValue(coins));\\n        json.addChild(\\\"item\\\", new JsonValue(persistentItem));\\n        json.addChild(\\\"state\\\", new JsonValue(persistentMaryoState));\\n        json.addChild(\\\"playtime\\\", new JsonValue(totalPlaytime));\\n        json.addChild(\\\"levelstarts\\\", new JsonValue(levelStartedNum));\\n        json.addChild(\\\"gameovers\\\", new JsonValue(gameOverNum));\\n        json.addChild(\\\"bestTotal\\\", new JsonValue(bestTotal));\\n\\n        JsonValue levelArray = new JsonValue(JsonValue.ValueType.array);\\n        for (String levelId : Level.getLevelList()) {\\n            Level level = Level.getLevel(levelId);\\n\\n            if (level.bestScore > 0) {\\n                JsonValue levelJson = new JsonValue(JsonValue.ValueType.object);\\n                levelJson.addChild(\\\"id\\\", new JsonValue(levelId));\\n                levelJson.addChild(\\\"score\\\", new JsonValue(level.currentScore));\\n                levelJson.addChild(\\\"best\\\", new JsonValue(level.bestScore));\\n                levelArray.addChild(levelJson);\\n            }\\n        }\\n        json.addChild(\\\"levels\\\", levelArray);\\n\\n        return json;\\n    }\\n\\n    public static void resetGameOver() {\\n        lifes = 4;\\n        item = 0;\\n        coins = 0;\\n        persistentMaryoState = 0;\\n        maryoState = 0;\\n        totalPlaytime = 0;\\n        totalScore = 0;\\n        gameOverNum++;\\n\\n        for (String levelId : Level.getLevelList()) {\\n            Level level = Level.getLevel(levelId);\\n\\n            level.currentScore = 0;\\n        }\\n        save();\\n    }\\n\\n    private static void save() {\\n        save(null);\\n    }\\n\\n    public static void save(ISaveGameStateResponseListener cloudResponseListener) {\\n        JsonValue json = toJson();\\n        String jsonString = json.toJson(JsonWriter.OutputType.json);\\n        PrefsManager.setSaveGame(jsonString);\\n\\n        if (cloudSaveClient != null && loadedFromCloud)\\n            cloudSaveClient.saveGameState(CLOUD_FILE_NAME,\\n                    Utility.encode(jsonString, PrefsManager.SCCPLF).getBytes(),\\n                    levelStartedNum, cloudResponseListener);\\n    }\\n\\n    public static void addCoins(AbstractScreen screen, int addCoins) {\\n        coins += addCoins;\\n        if (coins >= 100) {\\n            coins -= 100;\\n            lifes++;\\n            AssetManager manager = screen.game.assets.manager;\\n            if (manager.isLoaded(Assets.SOUND_ITEM_LIVE_UP_2))\\n                SoundManager.play(manager.get(Assets.SOUND_ITEM_LIVE_UP_2, Sound.class));\\n        }\\n    }\\n\\n    public static int getCoins() {\\n        return coins;\\n    }\\n\\n    public static int getItem() {\\n        return item;\\n    }\\n\\n    public static void setItem(int itemType) {\\n        item = itemType;\\n    }\\n\\n    public static Maryo.MaryoState getMaryoState() {\\n        return Maryo.MaryoState.fromInt(maryoState);\\n    }\\n\\n    public static void setMaryoState(Maryo.MaryoState newState) {\\n        maryoState = Maryo.MaryoState.toInt(newState);\\n    }\\n\\n    public static Maryo.MaryoState getPersistentMaryoState() {\\n        return Maryo.MaryoState.fromInt(persistentMaryoState);\\n    }\\n\\n    public static int getPersistentItem() {\\n        return persistentItem;\\n    }\\n\\n    public static int getLifes() {\\n        return lifes;\\n    }\\n\\n    public static void addScore(int score) {\\n        levelScore += score;\\n    }\\n\\n    public static void addLifes(int addedLifes) {\\n        lifes += addedLifes;\\n    }\\n\\n    public static int getScore() {\\n        return levelScore;\\n    }\\n\\n    public static int getTotalScore() {\\n        return totalScore;\\n    }\\n\\n    /**\\n     * Starten eines Spiels aus dem Menü heraus\\n     */\\n    public static boolean startLevelFresh() {\\n        item = persistentItem;\\n        maryoState = persistentMaryoState;\\n        persistentMaryoState = 0;\\n        persistentItem = 0;\\n        levelPlaytime = 0;\\n        lifes--;\\n        levelScore = 0;\\n        levelStartedNum++;\\n        save();\\n        return lifes >= 0;\\n    }\\n\\n    /**\\n     * Level erfolgreich beendet => Punkte etc übernehmen\\n     */\\n    public static void levelCleared(String levelName) {\\n        persistentItem = item;\\n        persistentMaryoState = maryoState;\\n        lifes++;\\n\\n        Level level = Level.getLevel(levelName);\\n        level.currentScore = levelScore;\\n        if (level.currentScore > level.bestScore)\\n            level.bestScore = levelScore;\\n\\n        recalcTotalScore();\\n        save();\\n    }\\n\\n    private static void recalcTotalScore() {\\n        totalScore = 0;\\n\\n        for (String levelId : Level.getLevelList()) {\\n            Level level = Level.getLevel(levelId);\\n\\n            totalScore += level.currentScore;\\n        }\\n\\n        if (totalScore > bestTotal)\\n            bestTotal = totalScore;\\n    }\\n\\n    public static void loadFromCloudIfApplicable(final MaryoGame game) {\\n        if (!loadedFromCloud && !loadingFromCloud && cloudSaveClient != null && cloudSaveClient.isSessionActive()\\n                && cloudSaveClient.isFeatureSupported(IGameServiceClient.GameServiceFeature.GameStateStorage)) {\\n            loadingFromCloud = true;\\n            cloudSaveClient.loadGameState(GameSave.CLOUD_FILE_NAME, new ILoadGameStateResponseListener() {\\n                @Override\\n                public void gsGameStateLoaded(final byte[] gameState) {\\n                    Gdx.app.postRunnable(new Runnable() {\\n                        @Override\\n                        public void run() {\\n                            // wenn abgebrochen wurde, dann nicht mehr laden\\n                            if (loadedFromCloud)\\n                                return;\\n\\n                            loadingFromCloud = false;\\n                            loadedFromCloud = true;\\n\\n                            try {\\n                                String json = Utility.decode(new String(gameState), PrefsManager.SCCPLF);\\n                                boolean madeChanges = false;\\n                                if (json != null)\\n                                    madeChanges = readFromJson(json);\\n\\n                                if (madeChanges)\\n                                    game.onChangedStateFromCloud();\\n                            } catch (Throwable t) {\\n                                // eat\\n                            }\\n                        }\\n                    });\\n                }\\n            });\\n        }\\n    }\\n\\n    public static void resetLoadedFromCloud() {\\n        loadingFromCloud = false;\\n        loadedFromCloud = false;\\n    }\\n}\"}, {\"identifier\":\"Utility\", \"path\":\"core/src/rs/pedjaapps/smc/utility/Utility.java\", \"snippet\":\"public class Utility\\n{\\n\\n    /**\\n     * This class can not bi instantiated, it will throw exception if you try to instantiate it\\n     * @throws java.lang.IllegalStateException*/\\n    public Utility()\\n    {\\n        throw new IllegalStateException(\\\"Class \\\" + this.getClass().getName() + \\\" is not instantiable!\\\");\\n    }\\n\\n    public static float getHeight(float width, TextureRegion region)\\n    {\\n        return width*region.getRegionHeight()/region.getRegionWidth();\\n    }\\n\\n    public static float getHeight(float width, Texture texture)\\n    {\\n        return width*texture.getHeight()/texture.getWidth();\\n    }\\n\\n    public static float getHeight(float newWidth, float origWidth, float origHeight)\\n    {\\n        return newWidth * origHeight / origWidth;\\n    }\\n\\n    /**Checks current sound state(on/off) and toggles it\\n     * @return new state of the sound(true = on, false = off)*/\\n    public static boolean toggleSound()\\n    {\\n        boolean currentState = PrefsManager.isPlaySounds();\\n        PrefsManager.setPlaySounds(!currentState);\\n        return !currentState;\\n    }\\n\\n\\n    /**Checks current music state(on/off) and toggles it\\n     * @return new state of the music(true = on, false = off)*/\\n    public static boolean toggleMusic()\\n    {\\n        boolean currentState = PrefsManager.isPlayMusic();\\n        PrefsManager.setPlayMusic(!currentState);\\n        return !currentState;\\n    }\\n\\n    public static void draw(SpriteBatch batch, Texture texture, float x, float y, float height)\\n    {\\n        batch.draw(texture, x, y, height * texture.getWidth()/texture.getHeight(), height);\\n    }\\n\\n    public static void draw(SpriteBatch batch, TextureRegion region, float x, float y, float height)\\n    {\\n        batch.draw(region, x, y, height * region.getRegionWidth() / region.getRegionHeight(), height);\\n    }\\n\\n    public static float getWidth(TextureRegion region, float height)\\n    {\\n        return height * region.getRegionWidth() / region.getRegionHeight();\\n    }\\n\\n    public static float getWidth(Texture texture, float height)\\n    {\\n        return height * texture.getWidth() / texture.getHeight();\\n    }\\n\\n    /*(+x\\\\y-height)/64*/\\n\\n\\tpublic static int parseInt(String input, int defValue)\\n\\t{\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\treturn Integer.parseInt(input);\\n\\t\\t}\\n\\t\\tcatch(Exception e)\\n\\t\\t{\\n\\t\\t\\treturn defValue;\\n\\t\\t}\\n\\t}\\n\\n\\tpublic static String millisToString(float millis)\\n\\t{\\n        int s = (int) millis % 60;\\n        int m = ((int) ((millis / 60) % 60));\\n\\n\\t\\treturn (m < 10 ? \\\"0\\\" : \\\"\\\") + m + \\\":\\\" + (s < 10 ? \\\"0\\\" : \\\"\\\") + s;\\n\\t}\\n\\n    public static void guiPositionToGamePosition(float positionX, float positionY, GameScreen gameScreen, Vector2 point)\\n    {\\n        OrthographicCamera cam = gameScreen.cam;\\n        OrthographicCamera guiCam = gameScreen.guiCam;\\n\\n        float camViewX = cam.position.x - (cam.viewportWidth * cam.zoom) * 0.5f;\\n        float camViewY = cam.position.y - (cam.viewportHeight * cam.zoom) * 0.5f;\\n        float widthMul = guiCam.viewportWidth / (cam.viewportWidth * cam.zoom);\\n        float heightMul = guiCam.viewportHeight / (cam.viewportHeight * cam.zoom);\\n        point.x = camViewX + positionX / widthMul;\\n        point.y = camViewY + positionY / heightMul;\\n    }\\n\\n    public static String encode(String s, String key) {\\n        return new String(Base64Coder.encode(xorWithKey(s.getBytes(), key.getBytes())));\\n    }\\n\\n    public static String decode(String s, String key) {\\n        return new String(xorWithKey(Base64Coder.decode(s), key.getBytes()));\\n    }\\n\\n    private static byte[] xorWithKey(byte[] a, byte[] key) {\\n        byte[] out = new byte[a.length];\\n        for (int i = 0; i < a.length; i++) {\\n            out[i] = (byte) (a[i] ^ key[i % key.length]);\\n        }\\n\\n        return out;\\n    }\\n\\n\\n}\"}]", "import_statement": "import com.badlogic.gdx.assets.AssetManager;\nimport com.badlogic.gdx.audio.Music;\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.g2d.ParticleEffect;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.g2d.TextureAtlas;\nimport com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.math.Vector3;\nimport rs.pedjaapps.smc.assets.Assets;\nimport rs.pedjaapps.smc.audio.MusicManager;\nimport rs.pedjaapps.smc.object.GameObject;\nimport rs.pedjaapps.smc.object.Sprite;\nimport rs.pedjaapps.smc.object.World;\nimport rs.pedjaapps.smc.screen.GameScreen;\nimport rs.pedjaapps.smc.shader.Shader;\nimport rs.pedjaapps.smc.utility.Constants;\nimport rs.pedjaapps.smc.utility.GameSave;\nimport rs.pedjaapps.smc.utility.Utility;", "code": "package rs.pedjaapps.smc.object.items;\n\n\n\n/**\n * Created by pedja on 29.3.15..\n * <p/>\n * This file is part of SMC-Android\n * Copyright Predrag Čokulov 2015\n */\npublic class Star extends Item\n{\n    public static final float GLIM_COLOR_START_ALPHA = 0f;\n    public static final float GLIM_COLOR_MAX_ALPHA = 0.95f;\n    public static final float POSITION_Z = 0.053f;\n    public static final float VELOCITY_X = 3f;\n    public static final float VELOCITY_Y = 10f;\n    public static final float DEF_SIZE = 0.65625f;\n\n    public boolean moving;\n    public float velY = -1;\n\n    private Direction direction = Direction.right;\n\n    private final Color glimColor = new Color(0.160784314f, 0.654901961f, 1f, GLIM_COLOR_START_ALPHA);\n    private float glimCounter;\n    private boolean glimMode = true;\n    ParticleEffect trail;\n\n    public Star(World world, Vector2 size, Vector3 position)\n    {\n        super(world, size, position);\n        position.z = POSITION_Z;\n        textureName = \"game_items_star\";\n    }\n\n    @Override\n    public int getType() {\n        return TYPE_STAR;\n    }\n\n    @Override\n    public void initAssets()\n    {\n        texture = world.screen.game.assets.manager.get(Assets.ATLAS_DYNAMIC, TextureAtlas.class)\n                .findRegion(textureName);\n        trail = new ParticleEffect(world.screen.game.assets.manager.get(\"data/animation/particles/star_trail.p\", ParticleEffect.class));\n    }\n\n    @Override\n    public void _render(SpriteBatch spriteBatch)\n    {\n        if (!visible) return;\n        trail.setPosition(mColRect.x + mColRect.width * 0.5f, mColRect.y + mColRect.height * 0.5f);\n        trail.draw(spriteBatch);", "next_line": "        spriteBatch.setShader(Shader.NORMAL_BLEND_SHADER);", "gold_snippet_index": 6, "id": 2, "__internal_uuid__": "035f4dc2-9879-4a61-8da8-63de3997a147"}
{"repo_name": "pedja1/SMC-Android", "file_path": "core/src/rs/pedjaapps/smc/screen/MainMenuScreen.java", "context": "[{\"identifier\":\"MaryoGame\", \"path\":\"core/src/rs/pedjaapps/smc/MaryoGame.java\", \"snippet\":\"public class MaryoGame extends Game implements IGameServiceListener {\\n\\tpublic static final int NATIVE_WIDTH = 1024;\\n\\tpublic static final int NATIVE_HEIGHT = 576;\\n\\n\\tpublic static final String GAME_VERSION = \\\"2.1.1710\\\";\\n    public static final boolean GAME_DEVMODE = true;\\n\\tpublic static final String GAME_STOREURL = \\\"https://play.google.com/store/apps/details?id=de.golfgl.smc.android\\\";\\n\\tpublic static final String GAME_WEBURL = \\\"https://www.golfgl.de/sccplf/\\\";\\n\\n\\tpublic static final String GAME_SOURCEURL = \\\"https://www.golfgl.de/sccplf/sccsrc.zip\\\";\\n\\n\\n\\tpublic MyControllerMapping controllerMappings;\\n\\tpublic String isRunningOn = \\\"\\\";\\n\\tpublic IGameServiceClient gsClient;\\n\\tpublic IGameServiceClient gpgsClient;\\n\\tpublic Assets assets;\\n\\tprivate Event event;\\n\\n\\tpublic MaryoGame(Event event)\\n\\t{\\n\\t\\tthis.event = event;\\n\\t}\\n\\n\\t@Override\\n\\tpublic void create()\\n\\t{\\n        if (!GAME_DEVMODE)\\n            Gdx.app.setLogLevel(Application.LOG_ERROR);\\n\\n\\t\\tassets = new Assets();\\n\\t\\tShader.init();\\n\\t\\tGameSave.init();\\n        assets.manager.load(Assets.SKIN_HUD, Skin.class);\\n\\n\\t\\ttry {\\n\\t\\t\\tcontrollerMappings = new MyControllerMapping();\\n\\t\\t\\tControllers.addListener(controllerMappings.controllerToInputAdapter);\\n\\t\\t} catch (Throwable t) {\\n\\t\\t\\tGdx.app.error(\\\"Application\\\", \\\"Controllers not instantiated\\\", t);\\n\\t\\t}\\n\\n\\t\\tif (gsClient == null)\\n\\t\\t\\tgsClient = new NoGameServiceClient();\\n\\t\\tgsClient.resumeSession();\\n\\n\\t\\tif (gpgsClient != null) {\\n\\t\\t\\tgpgsClient.setListener(this);\\n\\t\\t\\tgpgsClient.resumeSession();\\n            GameSave.cloudSaveClient = gpgsClient;\\n\\t\\t}\\n\\n\\t\\tsetScreen(new LoadingScreen(new MainMenuScreen(this), false));\\n\\t}\\n\\n\\t@Override\\n\\tpublic void pause()\\t{\\n\\t\\tsuper.pause();\\n\\t\\t// kann null sein wenn preloader versteckt wird\\n\\t\\tif (Gdx.app != null) {\\n\\t\\t\\tPrefsManager.flush();\\n\\t\\t\\tgsClient.pauseSession();\\n\\t\\t\\tif (gpgsClient != null)\\n\\t\\t\\t\\tgpgsClient.pauseSession();\\n\\t\\t}\\n\\t}\\n\\n\\t@Override\\n\\tpublic void resume() {\\n\\t\\tsuper.resume();\\n\\n\\t\\tif (gsClient != null)\\n\\t\\t\\tgsClient.resumeSession();\\n\\t\\tif (gpgsClient != null)\\n\\t\\t\\tgpgsClient.resumeSession();\\n\\t}\\n\\n\\t@Override\\n    public void dispose()\\n    {\\n        super.dispose();\\n        assets.dispose();\\n\\t\\tassets = null;\\n\\t\\tShader.dispose();\\n    }\\n\\n    public void exit()\\n    {\\n        Gdx.app.exit();\\n    }\\n\\n\\tpublic void showAd()\\n\\t{\\n\\t\\tif(event != null)\\n\\t\\t\\tevent.showInterestitialAd();\\n\\t}\\n\\n\\tpublic void levelStart(String levelName)\\n\\t{\\n\\t\\tif(event != null)\\n\\t\\t\\tevent.levelStart(levelName);\\n\\n\\t\\tgsClient.submitEvent(GameSave.EVENT_LEVEL_STARTED, 1);\\n\\t\\tif (gpgsClient != null)\\n\\t\\t\\tgpgsClient.submitEvent(GameSave.EVENT_LEVEL_STARTED, 1);\\n\\t}\\n\\n\\tpublic void levelEnd(String levelName, boolean success)\\n\\t{\\n\\t\\tif(event != null)\\n\\t\\t\\tevent.levelEnd(levelName, success);\\n\\n\\t\\tif (success) {\\n\\t\\t\\tgsClient.submitEvent(GameSave.EVENT_LEVEL_CLEARED, 1);\\n\\t\\t\\tgsClient.submitToLeaderboard(GameSave.LEADERBOARD_TOTAL, GameSave.getTotalScore(), null);\\n\\t\\t\\tif (gpgsClient != null) {\\n\\t\\t\\t\\tgpgsClient.unlockAchievement(levelName + \\\"_CLEAR\\\");\\n\\t\\t\\t\\tgpgsClient.submitEvent(GameSave.EVENT_LEVEL_CLEARED, 1);\\n\\t\\t\\t\\tgpgsClient.submitToLeaderboard(GameSave.LEADERBOARD_TOTAL, GameSave.getTotalScore(), null);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t@Override\\n\\tpublic void gsOnSessionActive() {\\n\\t\\tGameSave.loadFromCloudIfApplicable(this);\\n\\t}\\n\\n\\t@Override\\n\\tpublic void gsOnSessionInactive() {\\n\\n\\t}\\n\\n\\t@Override\\n\\tpublic void gsShowErrorToUser(GsErrorType et, String msg, Throwable t) {\\n\\t\\tGdx.app.error(\\\"GS\\\", msg, t);\\n\\t}\\n\\n\\tpublic void onChangedStateFromCloud() {\\n\\t\\t// aus der Cloud wurde ein Spielstand geladen, der abweichend war. Wenn noch im Ladebildschirm, dann ist eh\\n\\t\\t// alles super. Wenn schon auf Menü, dann benachrichtigen\\n\\n\\t\\tif (getScreen() instanceof MainMenuScreen)\\n\\t\\t\\t((MainMenuScreen) getScreen()).onChangedStateFromCloud();\\n\\t}\\n\\n\\tpublic interface Event\\n\\t{\\n\\t\\tvoid showInterestitialAd();\\n\\t\\tvoid levelStart(String levelName);\\n\\t\\tvoid levelEnd(String levelName, boolean success);\\n\\t}\\n}\"}, {\"identifier\":\"Assets\", \"path\":\"core/src/rs/pedjaapps/smc/assets/Assets.java\", \"snippet\":\"public class Assets {\\n    public static final String SKIN_HUD = \\\"data/hud/smcskin.json\\\";\\n    public static final String LOGO_GAME = \\\"logo_smc_big_1\\\";\\n    public static final String LOGO_LOADING = \\\"logo_loading\\\";\\n\\n    public static final String FONT_SIMPLE25 = \\\"grobold25\\\";\\n    public static final String LABEL_SIMPLE25 = \\\"small\\\";\\n    public static final String LABEL_BORDER25 = \\\"outline_small\\\";\\n    public static final String LABEL_BORDER60 = \\\"outline\\\";\\n\\n    public static final String WINDOW_NOFRAME = \\\"frameless\\\";\\n    public static final String WINDOW_SMALL = \\\"small\\\";\\n\\n    public static final String BUTTON_BORDER = \\\"framed\\\";\\n    public static final String BUTTON_FA = \\\"fa45\\\";\\n    public static final String BUTTON_FA_FRAMELESS = \\\"fa45noborder\\\";\\n    public static final String BUTTON_SMALL = \\\"small\\\";\\n    public static final String BUTTON_SMALL_FRAMELESS = \\\"smallnoborder\\\";\\n\\n    public static final String COLOR_EMPH1 = \\\"emph1\\\";\\n    public static final String COLOR_EMPH2 = \\\"emph2\\\";\\n    public static final String COLOR_PRESSED = \\\"button_pressed\\\";\\n\\n    public static final String SOUND_ITEM_LIVE_UP_2 = \\\"data/sounds/item/live_up_2.ogg\\\";\\n    public static final String SOUND_ITEM_LIVE_UP = \\\"data/sounds/item/live_up.ogg\\\";\\n    public static final String SOUND_PLAYER_DEAD = \\\"data/sounds/player/dead.ogg\\\";\\n    public static final String SOUND_PLAYER_GHOSTEND = \\\"data/sounds/player/ghost_end.ogg\\\";\\n    public static final String SOUND_JUMP_BIG = \\\"data/sounds/player/jump_big.ogg\\\";\\n    public static final String SOUND_JUMP_BIG_POWER = \\\"data/sounds/player/jump_big_power.ogg\\\";\\n    public static final String SOUND_JUMP_SMALL = \\\"data/sounds/player/jump_small.ogg\\\";\\n    public static final String SOUND_PLAYER_POWERDOWN = \\\"data/sounds/player/powerdown.ogg\\\";\\n    public static final String SOUND_JUMP_SMALL_POWER = \\\"data/sounds/player/jump_small_power.ogg\\\";\\n    public static final String SOUND_AUDIO_ON = \\\"data/sounds/audio_on.ogg\\\";\\n    public static final String SOUND_ENTER_PIPE = \\\"data/sounds/enter_pipe.ogg\\\";\\n    public static final String SOUND_LEAVE_PIPE = \\\"data/sounds/leave_pipe.ogg\\\";\\n    public static final String SOUND_SPROUT = \\\"data/sounds/sprout_1.ogg\\\";\\n    public static final String SOUND_ITEMBOX_SET = \\\"data/sounds/itembox_set.ogg\\\";\\n    public static final String SOUND_ITEMBOX_GET = \\\"data/sounds/itembox_get.ogg\\\";\\n    //???? unused\\n    public static final String SOUND_STOMP1 = \\\"data/sounds/stomp_1.ogg\\\";\\n    public static final String SOUND_STOMP4 = \\\"data/sounds/stomp_4.ogg\\\";\\n    public static final String SOUND_WALL_HIT = \\\"data/sounds/wall_hit.ogg\\\";\\n    public static final String SOUND_BOSS_FURBALL_HIT_FAILED = \\\"data/sounds/enemy/boss/furball/hit_failed.ogg\\\";\\n    public static final String SOUND_BOSS_FURBALL_HIT = \\\"data/sounds/enemy/boss/furball/hit.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_EATO = \\\"data/sounds/enemy/eato/die.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_FLYON = \\\"data/sounds/enemy/flyon/die.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_FURBALL = \\\"data/sounds/enemy/furball/die.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_GEE = \\\"data/sounds/enemy/gee/die.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_KRUSH = \\\"data/sounds/enemy/krush/die.ogg\\\";\\n    public static final String SOUND_ENEMY_ROKKO_HIT = \\\"data/sounds/enemy/rokko/hit.ogg\\\";\\n    public static final String SOUND_ENEMY_TURTLE_SHELL_HIT = \\\"data/sounds/enemy/turtle/shell/hit.ogg\\\";\\n    public static final String SOUND_ENEMY_DIE_THROMP = \\\"data/sounds/enemy/thromp/die.ogg\\\";\\n    public static final String SOUND_ITEM_FIREBALL = \\\"data/sounds/item/fireball.ogg\\\";\\n    public static final String SOUND_ITEM_FIREBALL_EXPLOSION = \\\"data/sounds/item/fireball_explosion.ogg\\\";\\n    public static final String SOUND_ITEM_ICEBALL_HIT = \\\"data/sounds/item/iceball.ogg\\\";\\n    public static final String SOUND_ITEM_FIREBALL_REPELLED = \\\"data/sounds/item/fireball_repelled.ogg\\\";\\n    public static final String SOUND_ITEM_FIREPLANT = \\\"data/sounds/item/fireplant.ogg\\\";\\n    public static final String SOUND_ITEM_GOLDPIECE1 = \\\"data/sounds/item/goldpiece_1.ogg\\\";\\n    public static final String SOUND_ITEM_GOLDPIECE_RED = \\\"data/sounds/item/goldpiece_red.ogg\\\";\\n    public static final String SOUND_ITEM_ICE_KILL = \\\"data/sounds/item/ice_kill.ogg\\\";\\n    public static final String SOUND_ITEM_MOON = \\\"data/sounds/item/moon.ogg\\\";\\n    public static final String SOUND_ITEM_MUSHROOM = \\\"data/sounds/item/mushroom.ogg\\\";\\n    public static final String SOUND_ITEM_MUSHROOM_BLUE = \\\"data/sounds/item/mushroom_blue.ogg\\\";\\n    public static final String SOUND_ITEM_MUSHROOM_GHOST = \\\"data/sounds/item/mushroom_ghost.ogg\\\";\\n    public static final String SOUND_ITEM_STAR_KILL = \\\"data/sounds/item/star_kill.ogg\\\";\\n\\n    public static final String PARTICLES_BOX_ACTIVATED = \\\"data/animation/particles/box_activated.p\\\";\\n\\n    public static final String MUSIC_COURSECLEAR = \\\"data/music/game/courseclear.ogg\\\";\\n    public static final String MUSIC_INVINCIBLE = \\\"data/music/game/star.ogg\\\";\\n\\n    public static final String ATLAS_STATIC = \\\"data/static.pack\\\";\\n    public static final String ATLAS_DYNAMIC = \\\"data/dynamic.pack\\\";\\n\\n    public AssetManager manager;\\n    public TextureLoader.TextureParameter textureParameter;\\n    public ParticleEffectLoader.ParticleEffectParameter particleEffectParameter;\\n\\n    public Assets() {\\n        textureParameter = new TextureLoader.TextureParameter();\\n        //textureParameter.genMipMaps = true;\\n        textureParameter.magFilter = Texture.TextureFilter.Linear;\\n        textureParameter.minFilter = Texture.TextureFilter.Linear;\\n\\n        manager = new AssetManager();\\n\\n        particleEffectParameter = new ParticleEffectLoader.ParticleEffectParameter();\\n        particleEffectParameter.atlasFile = Assets.ATLAS_DYNAMIC;\\n        particleEffectParameter.atlasPrefix = \\\"particles_\\\";\\n        particleEffectParameter.imagesDir = Gdx.files.internal(\\\"data/animation/particles\\\");\\n\\n        // set the loaders for the generator and the fonts themselves\\n        manager.setLoader(ParticleEffect.class, \\\".p\\\", new ParticleEffectLoader(new InternalFileHandleResolver()));\\n        manager.setLoader(Sound.class, \\\".ogg\\\", new SoundLoader(new InternalFileHandleResolver()));\\n        manager.setLoader(Music.class, \\\".ogg\\\", new MusicLoader(new InternalFileHandleResolver()));\\n    }\\n\\n    public void dispose() {\\n        //do not clear. This is just annoying because it needs to be loaded again\\n        //TODO: große Klopper müssen wieder weggemacht werden (Background, Musik)\\n        //manager.clear();\\n    }\\n\\n}\"}, {\"identifier\":\"FontAwesome\", \"path\":\"core/src/rs/pedjaapps/smc/assets/FontAwesome.java\", \"snippet\":\"public class FontAwesome {\\n\\n    public static final String SKIN_FONT_FA = \\\"fontawesome\\\";\\n\\n    public static final String GPGS_LOGO = \\\"A\\\";\\n    public static final String GPGS_LEADERBOARD = \\\"B\\\";\\n    public static final String GPGS_ACHIEVEMENT = \\\"C\\\";\\n\\n    public static final String ROTATE_RIGHT = \\\"\\\\uF01E\\\";\\n    public static final String ROTATE_LEFT = \\\"\\\\uF0E2\\\";\\n    public static final String ROTATE_RELOAD = \\\"\\\\uF021\\\";\\n\\n    public static final String BIG_PLAY = \\\"\\\\uF04B\\\";\\n    public static final String BIG_PAUSE = \\\"\\\\uF04C\\\";\\n    public static final String BIG_STOP = \\\"\\\\uF04D\\\";\\n    public static final String BIG_BACKWARD = \\\"\\\\uF04A\\\";\\n    public static final String BIG_FORWARD = \\\"\\\\uF04E\\\";\\n    public static final String BIG_FASTBW = \\\"\\\\uF049\\\";\\n    public static final String BIG_FASTFW = \\\"\\\\uF050\\\";\\n\\n    public static final String RIGHT_CHEVRON = \\\"\\\\uF054\\\";\\n    public static final String LEFT_CHEVRON = \\\"\\\\uF053\\\";\\n    public static final String UP_CHEVRON = \\\"\\\\uF077\\\";\\n    public static final String DOWN_CHEVRON = \\\"\\\\uF078\\\";\\n\\n    public static final String RIGHT_CARET = \\\"\\\\uF0DA\\\";\\n    public static final String LEFT_CARET = \\\"\\\\uF0D9\\\";\\n    public static final String UP_CARET = \\\"\\\\uF0D8\\\";\\n    public static final String DOWN_CARET = \\\"\\\\uF0D7\\\";\\n\\n    public static final String RIGHT_ARROW = \\\"\\\\uF061\\\";\\n    public static final String LEFT_ARROW = \\\"\\\\uF060\\\";\\n    public static final String UP_ARROW = \\\"\\\\uF062\\\";\\n    public static final String DOWN_ARROW = \\\"\\\\uF063\\\";\\n\\n    public static final String CIRCLE_LEFT = \\\"\\\\uF137\\\";\\n    public static final String CIRCLE_RIGHT = \\\"\\\\uF138\\\";\\n    public static final String CIRCLE_UP = \\\"\\\\uF139\\\";\\n    public static final String CIRCLE_DOWN = \\\"\\\\uF13A\\\";\\n    public static final String CIRCLE_PLAY = \\\"\\\\uF144\\\";\\n    public static final String CIRCLE_PAUSE = \\\"\\\\uF28B\\\";\\n    public static final String CIRCLE_STOP = \\\"\\\\uF28D\\\";\\n    public static final String CIRCLE_CROSS = \\\"\\\\uF057\\\";\\n    public static final String CIRCLE_CHECK = \\\"\\\\uF058\\\";\\n    public static final String CIRCLE_EMPTY = \\\"\\\\uF111\\\";\\n\\n    public static final String MENU_TREE = \\\"\\\\uF0E8\\\";\\n    public static final String MENU_SANDWICH = \\\"\\\\uF0C9\\\";\\n    public static final String MENU_BULLETS = \\\"\\\\uF0CA\\\";\\n    public static final String MENU_SIDEBAR = \\\"\\\\uF142\\\";\\n    public static final String MENU_BIGBULLETS = \\\"\\\\uF00B\\\";\\n\\n    public static final String SQUARE_CHECKED = \\\"\\\\uF046\\\";\\n    public static final String SQUARE_EMPTY = \\\"\\\\uF096\\\";\\n    public static final String SQUARE_PENCIL = \\\"\\\\uF044\\\";\\n\\n    public static final String SETTING_PENCIL = \\\"\\\\uF040\\\";\\n    public static final String SETTINGS_SPEAKER_ON = \\\"\\\\uF028\\\";\\n    public static final String SETTINGS_SPEAKER_OFF = \\\"\\\\uF026\\\";\\n    public static final String SETTINGS_MUSIC = \\\"\\\\uF001\\\";\\n    public static final String SETTINGS_GEAR = \\\"\\\\uF013\\\";\\n    public static final String SETTINGS_GEARS = \\\"\\\\uF085\\\";\\n    public static final String SETTINGS_SLIDERS = \\\"\\\\uF1DE\\\";\\n    public static final String SETTINGS_SLIDER_ON = \\\"\\\\uF205\\\";\\n    public static final String SETTINGS_SLIDER_OFF = \\\"\\\\uF204\\\";\\n    public static final String SETTINGS_WRENCH = \\\"\\\\uF0AD\\\";\\n\\n    public static final String DEVICE_POWERSWITCH = \\\"\\\\uF011\\\";\\n    public static final String DEVICE_LAPTOP = \\\"\\\\uF109\\\";\\n    public static final String DEVICE_GAMEPAD = \\\"\\\\uF11B\\\";\\n    public static final String DEVICE_KEYBOARD = \\\"\\\\uF11C\\\";\\n    public static final String DEVICE_GESTURE1 = \\\"\\\\uF0A6\\\";\\n    public static final String DEVICE_GESTURE2 = \\\"\\\\uF25A\\\";\\n    public static final String DEVICE_TABLET = \\\"\\\\uF10A\\\";\\n    public static final String DEVICE_MOBILEPHONE = \\\"\\\\uF10B\\\";\\n    public static final String DEVICE_ANDROID = \\\"\\\\uF17B\\\";\\n    public static final String DEVICE_GRAVITY = \\\"\\\\uF24E\\\";\\n\\n    public static final String NET_LOGIN = \\\"\\\\uF090\\\";\\n    public static final String NET_LOGOUT = \\\"\\\\uF08B\\\";\\n    public static final String NET_GOOGLEPLUS = \\\"\\\\uF0D5\\\";\\n    public static final String NET_FACEBOOK = \\\"\\\\uF09A\\\";\\n    public static final String NET_TWITTER = \\\"\\\\uF099\\\";\\n    public static final String NET_CLOUDSAVE = \\\"\\\\uF0EE\\\";\\n    public static final String NET_SQUARELINK = \\\"\\\\uF08E\\\";\\n    public static final String NET_PEOPLE = \\\"\\\\uF0C0\\\";\\n    public static final String NET_PERSON = \\\"\\\\uF007\\\";\\n    public static final String NET_ADDPERSON = \\\"\\\\uF234\\\";\\n    public static final String NET_UNLOCKED = \\\"\\\\uF13E\\\";\\n    public static final String NET_LOCKED = \\\"\\\\uF023\\\";\\n    public static final String NET_SHARE1 = \\\"\\\\uF1E0\\\";\\n    public static final String NET_SHARE2 = \\\"\\\\uF064\\\";\\n\\n    public static final String MISC_ATTACH = \\\"\\\\uF0C6\\\";\\n    public static final String MISC_PLUS = \\\"\\\\uF067\\\";\\n    public static final String MISC_MINUS = \\\"\\\\uF068\\\";\\n    public static final String MISC_CROSS = \\\"\\\\uF00D\\\";\\n    public static final String MISC_PIECE = \\\"\\\\uF12E\\\";\\n\\n    public static final String COMMENT_STAR_FULL = \\\"\\\\uF005\\\";\\n    public static final String COMMENT_STAR_HALF = \\\"\\\\uF123\\\";\\n    public static final String COMMENT_STAR_EMPTY = \\\"\\\\uF006\\\";\\n    public static final String COMMENT_STAR_HEART = \\\"\\\\uF004\\\";\\n    public static final String COMMENT_STAR_TROPHY = \\\"\\\\uF091\\\";\\n    public static final String COMMENT_STAR_FLAG = \\\"\\\\uF11D\\\";\\n\\n    public static final String COMMENT_FACE_BAD = \\\"\\\\uF119\\\";\\n    public static final String COMMENT_FACE_GOOD = \\\"\\\\uF118\\\";\\n    public static final String COMMENT_FACE_UNDECIDED = \\\"\\\\uF11A\\\";\\n\\n    public static final String COMMENT_THUMB_DOWN = \\\"\\\\uF165\\\";\\n    public static final String COMMENT_THUMB_UP = \\\"\\\\uF164\\\";\\n\\n}\"}, {\"identifier\":\"MusicManager\", \"path\":\"core/src/rs/pedjaapps/smc/audio/MusicManager.java\", \"snippet\":\"public class MusicManager {\\n    private static Music main, temporary;\\n    private static boolean isPaused;\\n    private static Music wasPlayingBeforePause;\\n\\n    public static void pause() {\\n        if (isPaused)\\n            return;\\n\\n        isPaused = true;\\n\\n        if (temporary != null && temporary.isPlaying())\\n            wasPlayingBeforePause = temporary;\\n        else if (main != null && main.isPlaying())\\n            wasPlayingBeforePause = main;\\n        else\\n            wasPlayingBeforePause = null;\\n\\n        if (wasPlayingBeforePause != null)\\n            wasPlayingBeforePause.pause();\\n    }\\n\\n    public static void resume() {\\n        if (!isPaused)\\n            return;\\n\\n        if (wasPlayingBeforePause != null && PrefsManager.isPlayMusic())\\n            wasPlayingBeforePause.play();\\n\\n        isPaused = false;\\n        wasPlayingBeforePause = null;\\n    }\\n\\n    public static void play(Music music) {\\n        play(music, PrefsManager.getMusicVolume(), true);\\n    }\\n\\n    public static void play(Music music, boolean main) {\\n        play(music, PrefsManager.getMusicVolume(), main);\\n    }\\n\\n    public static void play(Music music, float volume) {\\n        play(music, volume, true);\\n    }\\n\\n    private static void play(Music music, float volume, boolean isMain) {\\n        wasPlayingBeforePause = null;\\n        if (music == null || !PrefsManager.isPlayMusic() && isMain || !isMain && !PrefsManager.isPlaySounds())\\n            return;\\n\\n        if (isMain) {\\n            if (main == music && music.isPlaying())\\n                return;\\n            if (main != null) {\\n                main.stop();\\n                main = null;\\n            }\\n            main = music;\\n            music.setVolume(volume);\\n            music.play();\\n        } else {\\n            if (main != null) {\\n                main.pause();\\n            }\\n            if (temporary != null) {\\n                temporary.stop();\\n            }\\n            temporary = music;\\n            temporary.setVolume(volume);\\n            temporary.play();\\n            temporary.setOnCompletionListener(new Music.OnCompletionListener() {\\n                @Override\\n                public void onCompletion(Music music) {\\n                    if (main != null) {\\n                        main.play();\\n                    }\\n                }\\n            });\\n        }\\n    }\\n\\n    public static void stop(boolean isMain) {\\n        wasPlayingBeforePause = null;\\n        if (isMain) {\\n            if (main != null) {\\n                main.stop();\\n                main = null;\\n            }\\n        } else {\\n            if (temporary != null) {\\n                temporary.stop();\\n                temporary = null;\\n                if (main != null && PrefsManager.isPlayMusic()) {\\n                    main.play();\\n                }\\n            }\\n        }\\n    }\\n}\"}, {\"identifier\":\"GameObject\", \"path\":\"core/src/rs/pedjaapps/smc/object/GameObject.java\", \"snippet\":\"public abstract class GameObject\\n{\\n    public Rectangle mDrawRect = new Rectangle();//used for draw\\n    public Rectangle mColRect = new Rectangle();//used for collision detection\\n\\tpublic Vector3 position = new Vector3();\\n    public Vector3 velocity = new Vector3();\\n    public Vector3 acceleration = new Vector3();\\n    protected World world;\\n    public float mRotationX, mRotationY, mRotationZ;//degrees\\n    \\n\\tpublic enum WorldState\\n    {\\n        IDLE, WALKING, JUMPING, DYING, DUCKING, CLIMBING\\n    }\\n\\n    public enum TKey\\n    {\\n        stand_right(\\\"stand_right\\\"),\\n        walk_right_1(\\\"walk_right-1\\\"),\\n        walk_right_2(\\\"walk_right-2\\\"),\\n        jump_right(\\\"jump_right\\\"),\\n        fall_right(\\\"fall_right\\\"),\\n        dead_right(\\\"dead_right\\\"),\\n        duck_right(\\\"duck_right\\\"),\\n        climb_left(\\\"climb_left\\\"),\\n        climb_right(\\\"climb_right\\\"),\\n        throw_right_1(\\\"throw_right_1\\\"),\\n        throw_right_2(\\\"throw_right_2\\\"),\\n        one(\\\"1\\\"),\\n        two(\\\"2\\\"),\\n        three(\\\"3\\\"),;\\n\\n        String mValue;\\n        TKey(String value)\\n        {\\n            mValue = value;\\n        }\\n\\n        @Override\\n        public String toString()\\n        {\\n            return mValue;\\n        }\\n    }\\n\\n    public enum AKey\\n    {\\n        walk, climb, _throw\\n    }\\n\\n    public GameObject(World world, Vector2 size, Vector3 position)\\n    {\\n        this.mDrawRect = new Rectangle(position.x, position.y, size.x, size.y);\\n        mColRect = new Rectangle(mDrawRect);\\n\\t\\tthis.position = position;\\n        this.world = world;\\n    }\\n\\t\\n\\tpublic void updateBounds()\\n    {\\n        mDrawRect.x = mColRect.x;\\n        mDrawRect.y = mColRect.y;\\n    }\\n\\n    public abstract void _render(SpriteBatch spriteBatch);\\n    public abstract void _update(float delta);\\n    public abstract void initAssets();\\n    public abstract void dispose();\\n\\n    /**whether this object acts as bullet when hitting other objects (enemies, mario)*/\\n    public boolean isBullet()\\n    {\\n        return false;\\n    }\\n\\n    @Override\\n    public String toString()\\n    {\\n        return \\\"GameObject{\\\" +\\n                \\\"\\\\n\\\\tmDrawRect=\\\" + mDrawRect +\\n                \\\"\\\\n\\\\t mColRect=\\\" + mColRect +\\n                \\\"\\\\n\\\\t position=\\\" + position +\\n                \\\"\\\\n\\\\t velocity=\\\" + velocity +\\n                \\\"\\\\n\\\\t acceleration=\\\" + acceleration +\\n                \\\"\\\\n\\\\t world=\\\" + world +\\n                \\\"\\\\n\\\\t mRotationX=\\\" + mRotationX +\\n                \\\"\\\\n\\\\t mRotationY=\\\" + mRotationY +\\n                \\\"\\\\n\\\\t mRotationZ=\\\" + mRotationZ +\\n                \\\"\\\\n}\\\";\\n    }\\n}\"}, {\"identifier\":\"World\", \"path\":\"core/src/rs/pedjaapps/smc/object/World.java\", \"snippet\":\"public class World\\n{\\n\\tpublic AbstractScreen screen;\\n    /**\\n     * Our player controlled hero *\\n     */\\n    public Maryo maryo;\\n    /**\\n     * A world has a level through which Mario needs to go through *\\n     */\\n    public Level level;\\n    public Array<String> visitedSubLevels = new Array<>();\\n    private Array<GameObject> visibleObjects = new Array<>(50);\\n    private Rectangle worldBounds = new Rectangle();\\n\\n\\t/**\\n\\t *\\n\\t */\\n\\tpublic final Array<GameObject> trashObjects = new Array<>();\\n\\n\\t// This is the rectangle pool used in collision detection\\n\\t// Good to avoid instantiation each frame\\n\\tpublic static Pool<Rectangle> RECT_POOL = new Pool<Rectangle>()\\n\\t{\\n\\t\\t@Override\\n\\t\\tprotected Rectangle newObject()\\n\\t\\t{\\n\\t\\t\\treturn new Rectangle();\\n\\t\\t}\\n\\t};\\n\\n    public static Pool<Polygon> POLY_POOL = new Pool<Polygon>()\\n    {\\n        @Override\\n        protected Polygon newObject()\\n        {\\n            return new Polygon();\\n        }\\n    };\\n\\n    public static Pool<Vector3> VECTOR3_POOL = new Pool<Vector3>()\\n    {\\n        @Override\\n        protected Vector3 newObject()\\n        {\\n            return new Vector3();\\n        }\\n    };\\n\\n    public static Pool<Vector2> VECTOR2_POOL = new Pool<Vector2>()\\n    {\\n        @Override\\n        protected Vector2 newObject()\\n        {\\n            return new Vector2();\\n        }\\n    };\\n\\n    public Pool<Fireball> FIREBALL_POOL = new Pool<Fireball>()\\n    {\\n        @Override\\n        protected Fireball newObject()\\n        {\\n            Fireball fb = new Fireball(World.this, new Vector3());\\n            fb.initAssets();\\n            return fb;\\n        }\\n    };\\n\\n    public Pool<Iceball> ICEBALL_POOL = new Pool<Iceball>()\\n    {\\n        @Override\\n        protected Iceball newObject()\\n        {\\n            Iceball fb = new Iceball(World.this, new Vector3());\\n            fb.initAssets();\\n            return fb;\\n        }\\n    };\\n\\n    /**\\n     * Return only the blocks that need to be drawn *\\n     *\\n     */\\n    public void drawVisibleObjects(OrthographicCamera cam, SpriteBatch batch)\\n    {\\n        visibleObjects.clear();\\n        setRectToVisibleCamArea(worldBounds, cam);\\n        for (int i = 0, size = level.gameObjects.size(); i < size; i++)\\n        {\\n            GameObject object = level.gameObjects.get(i);\\n            Rectangle bounds = object.mDrawRect;\\n            if (bounds.overlaps(worldBounds))\\n            {\\n                visibleObjects.add(object);\\n                object._render(batch);\\n            }\\n        }\\n    }\\n\\n    public static void setRectToVisibleCamArea(Rectangle worldBounds, OrthographicCamera cam) {\\n        float camX = cam.position.x;\\n        float camY = cam.position.y;\\n        float camWidth = (cam.viewportWidth * cam.zoom);\\n        float camHeight = (cam.viewportHeight * cam.zoom);\\n        float wX = camX - camWidth * 0.5f - 1;\\n        float wY = camY - camHeight * 0.5f - 1;\\n        float wW = camWidth + 1;\\n        float wH = camHeight + 1;\\n        worldBounds.set(wX, wY, wW, wH);\\n    }\\n\\n    public void createMaryoRectWithOffset(Rectangle offsetBounds, float offset)\\n\\t{\\n        float offsetX = Math.max(offset, Constants.CAMERA_WIDTH);\\n        float offsetY = Math.max(offset * 0.5f, Constants.CAMERA_HEIGHT);\\n\\t\\tfloat wX = maryo.mColRect.x - offsetX;\\n        float wY = maryo.mColRect.y - offsetY;\\n        float wW = maryo.mColRect.x + maryo.mColRect.width + offsetX * 2;\\n        float wH = maryo.mColRect.y + maryo.mColRect.height + offsetY * 2;\\n\\t\\toffsetBounds.set(wX, wY, wW, wH);\\n\\t}\\n\\n    // --------------------\\n    public World(AbstractScreen screen)\\n    {\\n\\t\\tthis.screen = screen;\\n    }\\n\\n    public Array<GameObject> getVisibleObjects()\\n    {\\n        return visibleObjects == null ? new Array<GameObject>() : visibleObjects;\\n    }\\n\\n    /**\\n     * Check if obejct is visible in current camera bounds\\n     *\\n     */\\n    public boolean isObjectVisible(GameObject object, OrthographicCamera cam)\\n    {\\n        setRectToVisibleCamArea(worldBounds, cam);\\n        return object.mDrawRect.overlaps(worldBounds);\\n    }\\n\\n    public void dispose()\\n    {\\n        level.dispose();\\n        maryo.dispose();\\n        maryo = null;\\n    }\\n}\"}, {\"identifier\":\"Constants\", \"path\":\"core/src/rs/pedjaapps/smc/utility/Constants.java\", \"snippet\":\"public class Constants\\n{\\n    public static float CAMERA_WIDTH/* = 10f*/;\\n    public static float MENU_CAMERA_WIDTH/* = 10f*/;\\n\\n    public static final float MENU_CAMERA_HEIGHT = 7f;\\n    public static final float CAMERA_HEIGHT = 9f;\\n\\n    public static float ASPECT_RATIO;\\n\\n    public static final float MENU_DRAW_WIDTH = 12.444444444f;\\n    public static final float DRAW_WIDTH = 16f;\\n\\n    public static final int GRAVITY = -20;\\n\\n    static\\n    {\\n        initCamera();\\n    }\\n\\n    public static void initCamera()\\n    {\\n        ASPECT_RATIO = (float)MaryoGame.NATIVE_WIDTH/(float)MaryoGame.NATIVE_HEIGHT;\\n        CAMERA_WIDTH = CAMERA_HEIGHT * ASPECT_RATIO;\\n        MENU_CAMERA_WIDTH = MENU_CAMERA_HEIGHT * ASPECT_RATIO;\\n    }\\n}\"}, {\"identifier\":\"GameSave\", \"path\":\"core/src/rs/pedjaapps/smc/utility/GameSave.java\", \"snippet\":\"public class GameSave {\\n    public static final String LEADERBOARD_TOTAL = \\\"TOTAL_SCORE\\\";\\n    public static final String EVENT_LEVEL_STARTED = \\\"EVENT_LEVEL_STARTED\\\";\\n    public static final String EVENT_LEVEL_CLEARED = \\\"EVENT_LEVEL_CLEARED\\\";\\n    public static final String CLOUD_FILE_NAME = \\\"gamestate\\\";\\n    public static IGameServiceClient cloudSaveClient;\\n    // der aktuelle Stand, der gerade gespielt wird\\n    private static int levelScore;\\n    private static long levelPlaytime;\\n    private static int levelStartedNum;\\n    private static int maryoState;\\n    private static int persistentMaryoState;\\n    private static int lifes;\\n    private static long totalPlaytime;\\n    private static int coins;\\n    private static int item;\\n    private static int persistentItem;\\n    private static int totalScore;\\n    private static int bestTotal;\\n    private static int gameOverNum;\\n    //cloud save\\n    private static boolean loadedFromCloud;\\n    private static boolean loadingFromCloud;\\n\\n    public static boolean isLoadingFromCloud() {\\n        return loadingFromCloud || cloudSaveClient != null && cloudSaveClient.isConnectionPending();\\n    }\\n\\n    public static long getLevelPlaytime() {\\n        return levelPlaytime;\\n    }\\n\\n    public static void addLevelPlaytime(long timeToAdd) {\\n        levelPlaytime += timeToAdd;\\n        totalPlaytime += timeToAdd;\\n    }\\n\\n    public static void init() {\\n        // gibt es bereits einen gespeicherten Stand?\\n        boolean didRead = false;\\n        try {\\n            String savedGame = PrefsManager.getSaveGame();\\n            if (savedGame != null) {\\n                readFromJson(savedGame);\\n                didRead = true;\\n            }\\n        } catch (Throwable t) {\\n            Gdx.app.error(\\\"GameSave\\\", \\\"Error loading saved state\\\", t);\\n        }\\n\\n        if (!didRead || lifes <= 0)\\n            resetGameOver();\\n    }\\n\\n    /**\\n     * read saved game, if gameovernum and levelstarts are greater than current state\\n     *\\n     * @param savedgame json\\n     * @return true if savegame was read, false otherwise\\n     */\\n    private static boolean readFromJson(String savedgame) {\\n        JsonValue savegame = new JsonReader().parse(savedgame);\\n        int readLevelStartedNum = savegame.getInt(\\\"levelstarts\\\", 0);\\n        int readGameOverNum = savegame.getInt(\\\"gameovers\\\", 1);\\n\\n        boolean readStateIsNewer = (readGameOverNum > gameOverNum\\n                || readGameOverNum == gameOverNum && readLevelStartedNum > levelStartedNum);\\n\\n        if (readStateIsNewer) {\\n            lifes = savegame.getInt(\\\"lifes\\\");\\n            coins = savegame.getInt(\\\"coins\\\");\\n            persistentItem = savegame.getInt(\\\"item\\\");\\n            persistentMaryoState = savegame.getInt(\\\"state\\\");\\n            totalPlaytime = savegame.getLong(\\\"playtime\\\");\\n            levelStartedNum = readLevelStartedNum;\\n            gameOverNum = readGameOverNum;\\n            item = persistentItem;\\n            maryoState = persistentMaryoState;\\n        }\\n\\n        // following\\n        bestTotal = Math.max(bestTotal, savegame.getInt(\\\"bestTotal\\\", 0));\\n\\n        JsonValue levelList = savegame.get(\\\"levels\\\");\\n        for (JsonValue jsonlevel = levelList.child; jsonlevel != null; jsonlevel = jsonlevel.next) {\\n            String levelId = jsonlevel.getString(\\\"id\\\");\\n            Level level = Level.getLevel(levelId);\\n            if (level != null) {\\n                if (readStateIsNewer)\\n                    level.currentScore = jsonlevel.getInt(\\\"score\\\");\\n                level.bestScore = Math.max(level.bestScore, jsonlevel.getInt(\\\"best\\\"));\\n            }\\n        }\\n\\n        recalcTotalScore();\\n\\n        return readStateIsNewer;\\n    }\\n\\n    private static JsonValue toJson() {\\n        JsonValue json = new JsonValue(JsonValue.ValueType.object);\\n        json.addChild(\\\"lifes\\\", new JsonValue(lifes));\\n        json.addChild(\\\"coins\\\", new JsonValue(coins));\\n        json.addChild(\\\"item\\\", new JsonValue(persistentItem));\\n        json.addChild(\\\"state\\\", new JsonValue(persistentMaryoState));\\n        json.addChild(\\\"playtime\\\", new JsonValue(totalPlaytime));\\n        json.addChild(\\\"levelstarts\\\", new JsonValue(levelStartedNum));\\n        json.addChild(\\\"gameovers\\\", new JsonValue(gameOverNum));\\n        json.addChild(\\\"bestTotal\\\", new JsonValue(bestTotal));\\n\\n        JsonValue levelArray = new JsonValue(JsonValue.ValueType.array);\\n        for (String levelId : Level.getLevelList()) {\\n            Level level = Level.getLevel(levelId);\\n\\n            if (level.bestScore > 0) {\\n                JsonValue levelJson = new JsonValue(JsonValue.ValueType.object);\\n                levelJson.addChild(\\\"id\\\", new JsonValue(levelId));\\n                levelJson.addChild(\\\"score\\\", new JsonValue(level.currentScore));\\n                levelJson.addChild(\\\"best\\\", new JsonValue(level.bestScore));\\n                levelArray.addChild(levelJson);\\n            }\\n        }\\n        json.addChild(\\\"levels\\\", levelArray);\\n\\n        return json;\\n    }\\n\\n    public static void resetGameOver() {\\n        lifes = 4;\\n        item = 0;\\n        coins = 0;\\n        persistentMaryoState = 0;\\n        maryoState = 0;\\n        totalPlaytime = 0;\\n        totalScore = 0;\\n        gameOverNum++;\\n\\n        for (String levelId : Level.getLevelList()) {\\n            Level level = Level.getLevel(levelId);\\n\\n            level.currentScore = 0;\\n        }\\n        save();\\n    }\\n\\n    private static void save() {\\n        save(null);\\n    }\\n\\n    public static void save(ISaveGameStateResponseListener cloudResponseListener) {\\n        JsonValue json = toJson();\\n        String jsonString = json.toJson(JsonWriter.OutputType.json);\\n        PrefsManager.setSaveGame(jsonString);\\n\\n        if (cloudSaveClient != null && loadedFromCloud)\\n            cloudSaveClient.saveGameState(CLOUD_FILE_NAME,\\n                    Utility.encode(jsonString, PrefsManager.SCCPLF).getBytes(),\\n                    levelStartedNum, cloudResponseListener);\\n    }\\n\\n    public static void addCoins(AbstractScreen screen, int addCoins) {\\n        coins += addCoins;\\n        if (coins >= 100) {\\n            coins -= 100;\\n            lifes++;\\n            AssetManager manager = screen.game.assets.manager;\\n            if (manager.isLoaded(Assets.SOUND_ITEM_LIVE_UP_2))\\n                SoundManager.play(manager.get(Assets.SOUND_ITEM_LIVE_UP_2, Sound.class));\\n        }\\n    }\\n\\n    public static int getCoins() {\\n        return coins;\\n    }\\n\\n    public static int getItem() {\\n        return item;\\n    }\\n\\n    public static void setItem(int itemType) {\\n        item = itemType;\\n    }\\n\\n    public static Maryo.MaryoState getMaryoState() {\\n        return Maryo.MaryoState.fromInt(maryoState);\\n    }\\n\\n    public static void setMaryoState(Maryo.MaryoState newState) {\\n        maryoState = Maryo.MaryoState.toInt(newState);\\n    }\\n\\n    public static Maryo.MaryoState getPersistentMaryoState() {\\n        return Maryo.MaryoState.fromInt(persistentMaryoState);\\n    }\\n\\n    public static int getPersistentItem() {\\n        return persistentItem;\\n    }\\n\\n    public static int getLifes() {\\n        return lifes;\\n    }\\n\\n    public static void addScore(int score) {\\n        levelScore += score;\\n    }\\n\\n    public static void addLifes(int addedLifes) {\\n        lifes += addedLifes;\\n    }\\n\\n    public static int getScore() {\\n        return levelScore;\\n    }\\n\\n    public static int getTotalScore() {\\n        return totalScore;\\n    }\\n\\n    /**\\n     * Starten eines Spiels aus dem Menü heraus\\n     */\\n    public static boolean startLevelFresh() {\\n        item = persistentItem;\\n        maryoState = persistentMaryoState;\\n        persistentMaryoState = 0;\\n        persistentItem = 0;\\n        levelPlaytime = 0;\\n        lifes--;\\n        levelScore = 0;\\n        levelStartedNum++;\\n        save();\\n        return lifes >= 0;\\n    }\\n\\n    /**\\n     * Level erfolgreich beendet => Punkte etc übernehmen\\n     */\\n    public static void levelCleared(String levelName) {\\n        persistentItem = item;\\n        persistentMaryoState = maryoState;\\n        lifes++;\\n\\n        Level level = Level.getLevel(levelName);\\n        level.currentScore = levelScore;\\n        if (level.currentScore > level.bestScore)\\n            level.bestScore = levelScore;\\n\\n        recalcTotalScore();\\n        save();\\n    }\\n\\n    private static void recalcTotalScore() {\\n        totalScore = 0;\\n\\n        for (String levelId : Level.getLevelList()) {\\n            Level level = Level.getLevel(levelId);\\n\\n            totalScore += level.currentScore;\\n        }\\n\\n        if (totalScore > bestTotal)\\n            bestTotal = totalScore;\\n    }\\n\\n    public static void loadFromCloudIfApplicable(final MaryoGame game) {\\n        if (!loadedFromCloud && !loadingFromCloud && cloudSaveClient != null && cloudSaveClient.isSessionActive()\\n                && cloudSaveClient.isFeatureSupported(IGameServiceClient.GameServiceFeature.GameStateStorage)) {\\n            loadingFromCloud = true;\\n            cloudSaveClient.loadGameState(GameSave.CLOUD_FILE_NAME, new ILoadGameStateResponseListener() {\\n                @Override\\n                public void gsGameStateLoaded(final byte[] gameState) {\\n                    Gdx.app.postRunnable(new Runnable() {\\n                        @Override\\n                        public void run() {\\n                            // wenn abgebrochen wurde, dann nicht mehr laden\\n                            if (loadedFromCloud)\\n                                return;\\n\\n                            loadingFromCloud = false;\\n                            loadedFromCloud = true;\\n\\n                            try {\\n                                String json = Utility.decode(new String(gameState), PrefsManager.SCCPLF);\\n                                boolean madeChanges = false;\\n                                if (json != null)\\n                                    madeChanges = readFromJson(json);\\n\\n                                if (madeChanges)\\n                                    game.onChangedStateFromCloud();\\n                            } catch (Throwable t) {\\n                                // eat\\n                            }\\n                        }\\n                    });\\n                }\\n            });\\n        }\\n    }\\n\\n    public static void resetLoadedFromCloud() {\\n        loadingFromCloud = false;\\n        loadedFromCloud = false;\\n    }\\n}\"}, {\"identifier\":\"LevelLoader\", \"path\":\"core/src/rs/pedjaapps/smc/utility/LevelLoader.java\", \"snippet\":\"public class LevelLoader\\n{\\n    public static final Pattern TXT_NAME_IN_ATLAS = Pattern.compile(\\\".+\\\\\\\\.pack:.+\\\");\\n    public Level level;\\n    private boolean levelParsed = false;\\n\\n    private enum ObjectClass\\n    {\\n        sprite, item, box, player, enemy, moving_platform, enemy_stopper, level_entry, level_exit,\\n    }\\n\\n    public static final float m_pos_z_passive_start = 0.01f;\\n    private static final float m_pos_z_massive_start = 0.08f;\\n    private static final float m_pos_z_front_passive_start = 0.1f;\\n    private static final float m_pos_z_halfmassive_start = 0.04f;\\n\\n    /**\\n     * Use this constructor only from pc when you want to automatically fix assets dependencies\\n     */\\n    public LevelLoader(String levelName)\\n    {\\n        level = new Level(levelName);\\n    }\\n\\n    public synchronized void parseLevel(World world)\\n    {\\n        JsonValue jLevel;\\n        try\\n        {\\n            jLevel = new JsonReader().parse (Gdx.files.internal(\\\"data/levels/\\\" + level.levelName + Level.LEVEL_EXT));\\n            parseInfo(jLevel, world.screen.game.assets);\\n            parseParticleEffect(jLevel, world.screen.game.assets);\\n            parseBg(jLevel, world.screen.game.assets);\\n            parseGameObjects(world, jLevel, world.screen.game.assets);\\n        }\\n        catch (Throwable e)\\n        {\\n            e.printStackTrace();\\n            throw new RuntimeException(\\\"Unable to load level! \\\" + e.getMessage());\\n        }\\n        levelParsed = true;\\n    }\\n\\n    private void parseParticleEffect(JsonValue jLevel, Assets assets)\\n    {\\n        JsonValue jParticleEffect = jLevel.get(\\\"particle_effect\\\");\\n        if(jParticleEffect != null)\\n        {\\n            String effect = jParticleEffect.getString(\\\"effect\\\", \\\"\\\");\\n            if(!TextUtils.isEmpty(effect))\\n            {\\n                assets.manager.load(effect, ParticleEffect.class, assets.particleEffectParameter);\\n                level.particleEffect = effect;\\n            }\\n        }\\n    }\\n\\n    private void parseGameObjects(World world, JsonValue level, Assets assets)\\n    {\\n        JsonValue jObjects = level.get(\\\"objects\\\");\\n        for (JsonValue jObject = jObjects.child; jObject != null; jObject = jObject.next)\\n        {\\n            switch (ObjectClass.valueOf(jObject.getString(\\\"obj_class\\\")))\\n            {\\n                case sprite:\\n                    parseSprite(world, jObject, assets);\\n                    break;\\n                case player:\\n                    parsePlayer(jObject, world);\\n                    break;\\n                case item:\\n                    parseItem(world, jObject, assets);\\n                    break;\\n                case enemy:\\n                    parseEnemy(world, jObject, assets);\\n                    break;\\n                case enemy_stopper:\\n                    parseEnemyStopper(world, jObject);\\n                    break;\\n                case box:\\n                    parseBox(world, jObject, assets);\\n                    break;\\n                case level_entry:\\n                    /*{\\\"direction\\\":\\\"up\\\",\\\"posy\\\":-228,\\\"name\\\":\\\"1\\\",\\\"posx\\\":8074,\\\"type\\\":1,\\\"obj_class\\\":\\\"level_entry\\\"}*/\\n                    parseLevelEntry(world, jObject);\\n                    break;\\n                case level_exit:\\n                    parseLevelExit(world, jObject);\\n                    break;\\n                case moving_platform:\\n                    parseMovingPlatform(world, jObject, assets);\\n                    break;\\n            }\\n        }\\n        //this.level.gameObjects.sort(new ZSpriteComparator());\\n        Collections.sort(this.level.gameObjects, new ZSpriteComparator());\\n    }\\n\\n    private void parseInfo(JsonValue jLevel, Assets assets)\\n    {\\n        JsonValue jInfo = jLevel.get(\\\"info\\\");\\n        float width = jInfo.getFloat(\\\"level_width\\\");\\n        float height = jInfo.getFloat(\\\"level_height\\\");\\n        level.width = width;\\n        level.height = Math.max(height, Constants.CAMERA_HEIGHT);\\n        if (jInfo.has(\\\"level_music\\\"))\\n        {\\n            JsonValue jMusic = jInfo.get(\\\"level_music\\\");\\n            Array<String> music = new Array<>();\\n            for (JsonValue thisMusic = jMusic.child; thisMusic != null; thisMusic = thisMusic.next)\\n            {\\n                String tmp = thisMusic.asString();\\n                assets.manager.load(tmp, Music.class);\\n                if (!levelParsed) music.add(thisMusic.asString());\\n            }\\n            if (!levelParsed) level.music = music;\\n        }\\n    }\\n\\n    private void parseBg(JsonValue jLevel, Assets assets)\\n    {\\n        JsonValue jBgs = jLevel.get(\\\"backgrounds\\\");\\n        if (jBgs != null)\\n        {\\n            for (JsonValue jBg = jBgs.child; jBg != null; jBg = jBg.next)\\n            {\\n                int type = jBg.getInt(\\\"type\\\", 0);\\n                if (type == BG_IMG_ALL || type == BG_IMG_BOTTOM || type == BG_IMG_TOP)\\n                {\\n                    String textureName = jBg.getString(\\\"texture_name\\\", null);\\n                    if (textureName != null)\\n                        assets.manager.load(textureName, Texture.class, assets.textureParameter);\\n                    if (levelParsed) return;\\n\\n                    Vector2 speed = new Vector2();\\n\\n                    speed.x = jBg.getFloat(\\\"speedx\\\", 0);\\n                    speed.y = jBg.getFloat(\\\"speedy\\\", 0);\\n\\n                    Vector2 pos = new Vector2();\\n\\n                    pos.x = jBg.getFloat(\\\"posx\\\", 0);\\n                    pos.y = jBg.getFloat(\\\"posy\\\", 0);\\n\\n                    float width = jBg.getFloat(\\\"width\\\", 0);\\n                    float height = jBg.getFloat(\\\"height\\\", 0);\\n\\n                    Background bg = new Background(pos, speed, textureName, width, height, level.width, level.height, type);\\n\\n                    bg.width = jBg.getFloat(\\\"width\\\", 0);\\n                    bg.height = jBg.getFloat(\\\"height\\\", 0);\\n                    level.backgrounds.add(bg);\\n                }\\n                else if (type == BG_GR_VER || type == BG_GR_HOR)\\n                {\\n                    Background bg = new Background(type);\\n                    float r1 = jBg.getFloat(\\\"r_1\\\") / 255;//convert from 0-255 range to 0-1 range\\n                    float r2 = jBg.getFloat(\\\"r_2\\\") / 255;\\n                    float g1 = jBg.getFloat(\\\"g_1\\\") / 255;\\n                    float g2 = jBg.getFloat(\\\"g_2\\\") / 255;\\n                    float b1 = jBg.getFloat(\\\"b_1\\\") / 255;\\n                    float b2 = jBg.getFloat(\\\"b_2\\\") / 255;\\n\\n                    Color color1 = new Color(r1, g1, b1, 0f);//color is 0-1 range where 1 = 255\\n                    Color color2 = new Color(r2, g2, b2, 0f);\\n\\n                    bg.setColors(color1, color2);\\n                    level.backgrounds.add(bg);\\n                }\\n            }\\n        }\\n    }\\n\\n    private void parsePlayer(JsonValue jPlayer, World world)\\n    {\\n        if (levelParsed) return;\\n        float x = jPlayer.getFloat(\\\"posx\\\");\\n        float y = jPlayer.getFloat(\\\"posy\\\");\\n        level.spanPosition = new Vector3(x, y, Maryo.POSITION_Z);\\n        Maryo maryo = new Maryo(world, level.spanPosition, new Vector2(0.9f, 0.9f));\\n        world.maryo = maryo;\\n        level.gameObjects.add(maryo);\\n    }\\n\\n    private void parseSprite(World world, JsonValue jSprite, Assets assets)\\n    {\\n        Vector3 position = new Vector3(jSprite.getFloat(\\\"posx\\\"), jSprite.getFloat(\\\"posy\\\"), 0);\\n        Sprite.Type sType = null;\\n        if (jSprite.has(\\\"massive_type\\\"))\\n        {\\n            sType = Sprite.Type.valueOf(jSprite.getString(\\\"massive_type\\\"));\\n            switch (sType)\\n            {\\n                case massive:\\n                    position.z = m_pos_z_massive_start;\\n                    break;\\n                case passive:\\n                    position.z = m_pos_z_passive_start;\\n                    break;\\n                case halfmassive:\\n                    position.z = m_pos_z_halfmassive_start;\\n                    break;\\n                case front_passive:\\n                    position.z = m_pos_z_front_passive_start;\\n                    break;\\n                case climbable:\\n                    position.z = m_pos_z_halfmassive_start;\\n                    break;\\n            }\\n        }\\n        else\\n        {\\n            position.z = m_pos_z_front_passive_start;\\n        }\\n        Vector2 size = new Vector2(jSprite.getFloat(\\\"width\\\"), jSprite.getFloat(\\\"height\\\"));\\n\\n        Rectangle rectangle = new Rectangle();\\n        rectangle.x = jSprite.getFloat(\\\"c_posx\\\", 0);\\n        rectangle.y = jSprite.getFloat(\\\"c_posy\\\", 0);\\n        rectangle.width = jSprite.getFloat(\\\"c_width\\\", size.x);\\n        rectangle.height = jSprite.getFloat(\\\"c_height\\\", size.y);\\n        Sprite sprite = new Sprite(world, size, position, rectangle);\\n        sprite.type = sType;\\n        sprite.groundType = jSprite.getInt(\\\"ground_type\\\", Sprite.GROUND_NORMAL);\\n\\n        sprite.textureName = jSprite.getString(\\\"texture_name\\\");\\n        sprite.textureAtlas = jSprite.getString(\\\"texture_atlas\\\", null);\\n\\n        if (TextUtils.isEmpty(sprite.textureName) && TextUtils.isEmpty(sprite.textureAtlas))\\n        {\\n            throw new GdxRuntimeException(\\\"Both textureName and textureAtlas are null\\\");\\n        }\\n\\n        if (TextUtils.isEmpty(sprite.textureName))\\n        {\\n            throw new IllegalArgumentException(\\\"texture name is invalid: \\\\\\\"\\\" + sprite.textureName + \\\"\\\\\\\"\\\");\\n        }\\n\\n        if (!TXT_NAME_IN_ATLAS.matcher(sprite.textureName).matches())\\n        {\\n            assets.manager.load(sprite.textureName, Texture.class, assets.textureParameter);\\n        }\\n\\n        if (!TextUtils.isEmpty(sprite.textureAtlas))\\n        {\\n            assets.manager.load(sprite.textureAtlas, TextureAtlas.class);\\n        }\\n\\n        sprite.mRotationX = jSprite.getInt(\\\"rotationX\\\", 0);\\n        sprite.mRotationY = jSprite.getInt(\\\"rotationY\\\", 0);\\n        sprite.mRotationZ = jSprite.getInt(\\\"rotationZ\\\", 0);\\n        if (sprite.mRotationZ == 270)\\n        {\\n            sprite.mRotationZ = -sprite.mRotationZ;\\n        }\\n        if (!levelParsed) level.gameObjects.add(sprite);\\n\\n    }\\n\\n    private void parseEnemy(World world, JsonValue jEnemy, Assets assets)\\n    {\\n        Enemy enemy = Enemy.initEnemy(world, jEnemy);\\n        if (enemy == null) return;\\n        if (jEnemy.has(\\\"texture_atlas\\\"))\\n        {\\n            enemy.textureAtlas = jEnemy.getString(\\\"texture_atlas\\\");\\n            assets.manager.load(enemy.textureAtlas, TextureAtlas.class);\\n        }\\n        if (jEnemy.has(\\\"texture_name\\\"))\\n            enemy.textureName = jEnemy.getString(\\\"texture_name\\\");\\n\\n        if (!levelParsed) level.gameObjects.add(enemy);\\n    }\\n\\n    private void parseEnemyStopper(World world, JsonValue jEnemyStopper)\\n    {\\n        if (levelParsed) return;\\n        Vector3 position = new Vector3(jEnemyStopper.getFloat(\\\"posx\\\"), jEnemyStopper.getFloat(\\\"posy\\\"), 0);\\n        float width = jEnemyStopper.getFloat(\\\"width\\\");\\n        float height = jEnemyStopper.getFloat(\\\"height\\\");\\n\\n        EnemyStopper stopper = new EnemyStopper(world, new Vector2(width, height), position);\\n\\n        level.gameObjects.add(stopper);\\n    }\\n\\n    private void parseLevelEntry(World world, JsonValue jEntry)\\n    {\\n        if (levelParsed) return;\\n        Vector3 position = new Vector3(jEntry.getFloat(\\\"posx\\\"), jEntry.getFloat(\\\"posy\\\"), 0);\\n        float width = jEntry.getFloat(\\\"width\\\");\\n        float height = jEntry.getFloat(\\\"height\\\");\\n\\n        LevelEntry entry = new LevelEntry(world, new Vector2(width, height), position);\\n        entry.direction = jEntry.getString(\\\"direction\\\", \\\"\\\");\\n        entry.type = jEntry.getInt(\\\"type\\\", 0);\\n        entry.name = jEntry.getString(\\\"name\\\", \\\"\\\");\\n\\n        level.gameObjects.add(entry);\\n    }\\n\\n    private void parseLevelExit(World world, JsonValue jExit)\\n    {\\n        if (levelParsed) return;\\n        Vector3 position = new Vector3(jExit.getFloat(\\\"posx\\\"), jExit.getFloat(\\\"posy\\\"), 0);\\n        float width = jExit.getFloat(\\\"width\\\");\\n        float height = jExit.getFloat(\\\"height\\\");\\n        LevelExit exit = new LevelExit(world, new Vector2(width, height), position, jExit.getInt(\\\"type\\\", 0), jExit.getString(\\\"direction\\\", \\\"\\\"));\\n        exit.cameraMotion = jExit.getInt(\\\"camera_motion\\\", 0);\\n        exit.levelName = jExit.getString(\\\"level_name\\\", null);\\n        exit.entry = jExit.getString(\\\"entry\\\", \\\"\\\");\\n\\n        level.gameObjects.add(exit);\\n    }\\n\\n    private void parseMovingPlatform(World world, JsonValue jMovingPlatform, Assets assets)\\n    {\\n        if (levelParsed) return;\\n        Vector3 position = new Vector3(jMovingPlatform.getFloat(\\\"posx\\\"), jMovingPlatform.getFloat(\\\"posy\\\"), 0);\\n        float width = jMovingPlatform.getFloat(\\\"width\\\");\\n        float height = jMovingPlatform.getFloat(\\\"height\\\");\\n        MovingPlatform platform = new MovingPlatform(world, new Vector2(width, height), position, null);\\n        platform.max_distance = jMovingPlatform.getInt(\\\"max_distance\\\", 0);\\n        platform.speed = jMovingPlatform.getFloat(\\\"speed\\\", 0);\\n        platform.touch_time = jMovingPlatform.getFloat(\\\"touch_time\\\", 0);\\n        platform.shake_time = jMovingPlatform.getFloat(\\\"shake_time\\\", 0);\\n        platform.touch_move_time = jMovingPlatform.getFloat(\\\"touch_move_time\\\", 0);\\n        platform.move_type = jMovingPlatform.getInt(\\\"move_type\\\", 0);\\n        platform.middle_img_count = jMovingPlatform.getInt(\\\"middle_img_count\\\", 0);\\n        platform.direction = jMovingPlatform.getString(\\\"direction\\\", \\\"\\\");\\n        platform.image_top_left = jMovingPlatform.getString(\\\"image_top_left\\\", \\\"\\\");\\n        platform.image_top_middle = jMovingPlatform.getString(\\\"image_top_middle\\\", \\\"\\\");\\n        platform.image_top_right = jMovingPlatform.getString(\\\"image_top_right\\\", \\\"\\\");\\n        platform.textureAtlas = jMovingPlatform.getString(\\\"texture_atlas\\\", \\\"\\\");\\n        if (platform.textureAtlas != null && !platform.textureAtlas.trim().isEmpty())\\n        {\\n            assets.manager.load(platform.textureAtlas, TextureAtlas.class);\\n        }\\n        else\\n        {\\n            assets.manager.load(platform.image_top_left, Texture.class);\\n            assets.manager.load(platform.image_top_middle, Texture.class);\\n            assets.manager.load(platform.image_top_right, Texture.class);\\n        }\\n\\n        Sprite.Type sType = null;\\n        if (jMovingPlatform.has(\\\"massive_type\\\"))\\n        {\\n            sType = Sprite.Type.valueOf(jMovingPlatform.getString(\\\"massive_type\\\"));\\n            switch (sType)\\n            {\\n                case massive:\\n                    position.z = m_pos_z_massive_start;\\n                    break;\\n                case passive:\\n                    position.z = m_pos_z_passive_start;\\n                    break;\\n                case halfmassive:\\n                    position.z = m_pos_z_halfmassive_start;\\n                    break;\\n                case front_passive:\\n                    position.z = m_pos_z_front_passive_start;\\n                    break;\\n                case climbable:\\n                    position.z = m_pos_z_halfmassive_start;\\n                    break;\\n            }\\n        }\\n        else\\n        {\\n            position.z = m_pos_z_front_passive_start;\\n        }\\n        platform.type = sType;\\n\\n        JsonValue jPath = jMovingPlatform.get(\\\"path\\\");\\n        if (platform.move_type == MovingPlatform.MOVING_PLATFORM_TYPE_PATH && jPath == null)\\n        {\\n            throw new GdxRuntimeException(\\\"MovingPlatform type is 'path' but no path defined\\\");\\n        }\\n        if (jPath != null)\\n        {\\n            MovingPlatform.Path path = new MovingPlatform.Path();\\n            path.posx = jPath.getFloat(\\\"posx\\\", 0);\\n            path.posy = jPath.getFloat(\\\"posy\\\", 0);\\n            path.rewind = jPath.getInt(\\\"rewind\\\", 0);\\n\\n            JsonValue jSegments = jPath.get(\\\"segments\\\");\\n            if (jSegments == null || jSegments.child == null)\\n            {\\n                throw new GdxRuntimeException(\\\"Path doesn't contain segments. Level: \\\" + level.levelName);\\n            }\\n            for (JsonValue jSegment = jSegments.child; jSegment != null; jSegment = jSegment.next)\\n            {\\n                MovingPlatform.Path.Segment segment = new MovingPlatform.Path.Segment();\\n                segment.start.x = jSegment.getFloat(\\\"startx\\\", 0);\\n                segment.start.y = jSegment.getFloat(\\\"starty\\\", 0);\\n                segment.end.x = jSegment.getFloat(\\\"endx\\\", 0);\\n                segment.end.y = jSegment.getFloat(\\\"endy\\\", 0);\\n                path.segments.add(segment);\\n            }\\n            platform.path = path;\\n        }\\n\\n        level.gameObjects.add(platform);\\n    }\\n\\n    private void parseItem(World world, JsonValue jItem, Assets assets)\\n    {\\n        Vector3 position = new Vector3(jItem.getFloat(\\\"posx\\\", 0), jItem.getFloat(\\\"posy\\\", 0), 0);\\n\\n        String type = jItem.getString(\\\"type\\\");\\n        int itemSubtype;\\n        switch (Item.CLASS.valueOf(type)) {\\n            case mushroom:\\n                itemSubtype = jItem.getInt(\\\"mushroom_type\\\", 0);\\n                break;\\n            case goldpiece:\\n                itemSubtype = (jItem.getString(\\\"color\\\", \\\"\\\").equals(\\\"red\\\") ? Coin.TYPE_RED : Coin.TYPE_YELLOW);\\n                break;\\n            default:\\n                itemSubtype = 0;\\n        }\\n\\n        Item item = Item.createObject(world, assets, itemSubtype, type, new Vector2(jItem.getFloat(\\\"width\\\"), jItem.getFloat(\\\"height\\\")), position);\\n\\n        if (item == null) return;\\n        if (jItem.has(\\\"texture_atlas\\\"))\\n        {\\n            item.textureAtlas = jItem.getString(\\\"texture_atlas\\\");\\n            assets.manager.load(item.textureAtlas, TextureAtlas.class);\\n        }\\n        if (!levelParsed) level.gameObjects.add(item);\\n    }\\n\\n    private void parseBox(World world, JsonValue jBox, Assets assets)\\n    {\\n        Box box = Box.initBox(world, jBox, assets);\\n        if (!levelParsed) level.gameObjects.add(box);\\n    }\\n\\n    /**\\n     * Comparator used for sorting, sorts in ascending order (biggset z to smallest z).\\n     *\\n     * @author mzechner\\n     */\\n    public static class ZSpriteComparator implements Comparator<GameObject>\\n    {\\n        @Override\\n        public int compare(GameObject sprite1, GameObject sprite2)\\n        {\\n            if (sprite1.position.z > sprite2.position.z) return 1;\\n            if (sprite1.position.z < sprite2.position.z) return -1;\\n            return 0;\\n        }\\n    }\\n\\n}\"}, {\"identifier\":\"AboutDialog\", \"path\":\"core/src/rs/pedjaapps/smc/view/AboutDialog.java\", \"snippet\":\"public class AboutDialog extends ScrollDialog {\\n    public final Label.LabelStyle simpleLabel = new Label.LabelStyle(new BitmapFont(), Color.WHITE);\\n    private final ColorableTextButton scrollDownButton;\\n    private final ColorableTextButton scrollUpButton;\\n    private Stage stage;\\n    private float sinceLastScroll;\\n\\n    public AboutDialog(Skin skin) {\\n        super(skin, .8f, .5f);\\n\\n        // Als allererstes um dieses als Defaulbutton zu setzen\\n        button(new ColorableTextButton(FontAwesome.CIRCLE_CHECK, skin, Assets.BUTTON_FA_FRAMELESS));\\n\\n        Runnable gpl3runnable = getLicenseBoxRunnable(\\\"data/about/license_gpl3.txt\\\");\\n        Runnable apache2runnable = getLicenseBoxRunnable(\\\"data/about/license_ap2.txt\\\");\\n\\n        Table aboutTable = new Table();\\n        aboutTable.defaults().pad(5).align(Align.center);\\n\\n        aboutTable.add(new Label(\\\"Secret Chronicles Classic\\\", skin, Assets.LABEL_BORDER60));\\n        aboutTable.row();\\n        aboutTable.add(new Label(\\\"Version \\\" + MaryoGame.GAME_VERSION, skin, Assets.LABEL_SIMPLE25));\\n        aboutTable.row();\\n        aboutTable.add(new Label(\\\"brought to you by Benjamin Schulte\\\", skin, Assets.LABEL_SIMPLE25));\\n        aboutTable.row().padBottom(40);\\n        aboutTable.add(getButtonsTable(new String[]{\\\"Website\\\", \\\"License\\\"},\\n                new Runnable[]{getWebRunnable(MaryoGame.GAME_WEBURL),\\n                        gpl3runnable}, Assets.BUTTON_SMALL));\\n\\n        aboutTable.row();\\n        aboutTable.add(new Label(\\\"This game is based on the following projects:\\\", skin, Assets.LABEL_SIMPLE25));\\n\\n        aboutTable.row().padTop(40);\\n        aboutTable.add(getCenteredSmallLabel(\\\"Graphics, levels, sounds:\\\\nSecret Maryo Chronicles by Florian Richter \\\" +\\n                \\\"and others\\\")).fill();\\n        aboutTable.row();\\n        aboutTable.add(getButtonsTable(new String[]{\\\"Website\\\", \\\"License\\\"},\\n                new Runnable[]{getWebRunnable(\\\"http://www.secretmaryo.org/\\\"),\\n                        gpl3runnable}));\\n\\n        aboutTable.row().padTop(40);\\n        aboutTable.add(getCenteredSmallLabel(\\\"Source code:\\\\nSMC-Android by Predrag Cokulov\\\")).fill();\\n        aboutTable.row();\\n        aboutTable.add(getButtonsTable(new String[]{\\\"Website\\\", \\\"License\\\"},\\n                new Runnable[]{getWebRunnable(\\\"https://github.com/pedja1/SMC-Android\\\"), gpl3runnable}));\\n\\n        aboutTable.row().padTop(40);\\n        aboutTable.add(getCenteredSmallLabel(\\\"Source code:\\\\nlibGDX game development framework\\\")).fill();\\n        aboutTable.row();\\n        aboutTable.add(getButtonsTable(new String[]{\\\"Website\\\", \\\"License\\\"},\\n                new Runnable[]{getWebRunnable(\\\"http://libgdx.badlogicgames.com/\\\"), apache2runnable}));\\n\\n        aboutTable.row().padTop(40);\\n        aboutTable.add(getCenteredSmallLabel(\\\"Game service connection:\\\\ngdx-gamesvcs by Benjamin Schulte\\\")).fill();\\n        aboutTable.row();\\n        aboutTable.add(getButtonsTable(new String[]{\\\"Website\\\", \\\"License\\\"},\\n                new Runnable[]{getWebRunnable(\\\"https://github.com/MrStahlfelge/gdx-gamesvcs\\\"), apache2runnable}));\\n\\n        aboutTable.row();\\n        aboutTable.add(getButtonsTable(new String[]{\\\"Source code\\\"},\\n                new Runnable[]{getWebRunnable(MaryoGame.GAME_SOURCEURL)}));\\n\\n        scrollActor = aboutTable;\\n\\n        scrollDownButton = new ColorableTextButton(FontAwesome.CIRCLE_DOWN, skin, Assets.BUTTON_FA_FRAMELESS);\\n        scrollUpButton = new ColorableTextButton(FontAwesome.CIRCLE_UP, skin, Assets.BUTTON_FA_FRAMELESS);\\n        getButtonTable().add(scrollDownButton);\\n        buttonsToAdd.add(scrollDownButton);\\n        getButtonTable().add(scrollUpButton);\\n        buttonsToAdd.add(scrollUpButton);\\n    }\\n\\n    private Runnable getLicenseBoxRunnable(final String file) {\\n        return new Runnable() {\\n            @Override\\n            public void run() {\\n                String license = Gdx.files.internal(file).readString();\\n                Label textLabel = new Label(license, simpleLabel);\\n                textLabel.setWrap(true);\\n\\n                ScrollDialog licenseBox = new ScrollDialog(skin, .5f, .75f);\\n                licenseBox.setScrollActor(textLabel);\\n                licenseBox.button(new ColorableTextButton(FontAwesome.CIRCLE_CHECK, skin, Assets.BUTTON_FA_FRAMELESS));\\n                licenseBox.show(stage);\\n            }\\n        };\\n    }\\n\\n    private Runnable getWebRunnable(final String url) {\\n        return new Runnable() {\\n            @Override\\n            public void run() {\\n                Gdx.net.openURI(url);\\n            }\\n        };\\n    }\\n\\n    private Table getButtonsTable(String[] label, Runnable[] run) {\\n        return getButtonsTable(label, run, Assets.BUTTON_SMALL_FRAMELESS);\\n    }\\n\\n    private Table getButtonsTable(String[] label, final Runnable[] run, String styleName) {\\n        Table storebuttons = new Table();\\n        for (int i = 0; i < label.length; i++) {\\n            TextButton actor = new ColorableTextButton(label[i], skin, styleName);\\n            final Runnable runnable = run[i];\\n            if (runnable != null)\\n                actor.addListener(new ChangeListener() {\\n                    @Override\\n                    public void changed(ChangeEvent event, Actor actor) {\\n                        runnable.run();\\n                    }\\n\\n                });\\n            storebuttons.add(actor).uniform().fill().pad(5);\\n            buttonsToAdd.add(actor);\\n        }\\n        return storebuttons;\\n    }\\n\\n    private Label getCenteredSmallLabel(String text) {\\n        Label smLabel = new Label(text, skin, Assets.LABEL_SIMPLE25);\\n        smLabel.setWrap(true);\\n        smLabel.setAlignment(Align.center);\\n        return smLabel;\\n    }\\n\\n    @Override\\n    public void act(float delta) {\\n        super.act(delta);\\n\\n        sinceLastScroll -= delta;\\n        sinceLastScroll = Math.max(-1, sinceLastScroll);\\n        int forceScroll = (scrollDownButton.isPressed() ? 1 : scrollUpButton.isPressed() ? -1 : 0);\\n\\n        if (forceScroll != 0 && sinceLastScroll <= 0) {\\n            getStage().setScrollFocus(scrollPane);\\n            getStage().scrolled(forceScroll);\\n            sinceLastScroll=.1f;\\n        }\\n    }\\n\\n    @Override\\n    public Dialog show(Stage stage, Action action) {\\n        this.stage = stage;\\n        return super.show(stage, action);\\n    }\\n}\"}, {\"identifier\":\"Background\", \"path\":\"core/src/rs/pedjaapps/smc/view/Background.java\", \"snippet\":\"public class Background\\n{\\n\\tpublic static final int BG_NONE = 0;// nothing\\n\\tpublic static final int BG_IMG_TOP = 3;// tiles only horizontal and is on the top\\n\\tpublic static final int BG_IMG_BOTTOM = 1;// tiles only horizontal and is on the bottom\\n\\tpublic static final int BG_IMG_ALL = 2;// tiles into all directions\\n\\tpublic static final int BG_GR_VER = 103;// vertical gradient\\n\\tpublic static final int BG_GR_HOR = 104;// horizontal gradient\\n\\n\\tprivate boolean cameraPositioned;\\n\\tpublic Vector2 position, speed;\\n\\tpublic Texture texture;\\n\\tpublic String textureName;\\n\\tpublic float width;\\n\\tpublic float height;\\n\\tprivate Vector3 oldGameCamPos = new Vector3();\\n\\n\\tprivate Color[] colors;\\n\\tprivate ShapeRenderer renderer;\\n\\tpublic OrthographicCamera bgCam;\\n\\n\\tprivate float widthMul;\\n\\tprivate float heightMul;\\n\\tprivate int type;\\n\\n\\tpublic Background(int type)\\n\\t{\\n\\t\\tthis(null, null, null, 0, 0, 0, 0, type);\\n\\t}\\n\\n\\tpublic Background(Vector2 position, Vector2 speed, String textureName, float width, float height, float levelWidth, float levelHeight, int type)\\n\\t{\\n\\t\\tthis.speed = speed;\\n\\t\\tthis.position = position;\\n\\t\\tthis.textureName = textureName;\\n\\t\\tthis.type = type;\\n\\t\\tthis.width = width;\\n\\t\\tthis.height = height;\\n\\t\\tbgCam = new OrthographicCamera(Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        bgCam.setToOrtho(false, Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        bgCam.update();\\n\\n\\t\\twidthMul = levelWidth / width;\\n\\t\\theightMul = getVerticalWarp() == Texture.TextureWrap.Repeat ? levelHeight / height : 1;\\n\\t\\tif(isColor())\\n\\t\\t{\\n\\t\\t\\trenderer = new ShapeRenderer();\\n\\t\\t}\\n\\t}\\n\\n\\tpublic void setColors(Color color1, Color color2)\\n\\t{\\n\\t\\tif(type == BG_GR_HOR)\\n\\t\\t{\\n\\t\\t\\tcolors = new Color[]{color2, color2, color1, color1};\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tcolors = new Color[]{color2, color1, color1, color2};\\n\\t\\t}\\n\\t}\\n\\n\\tpublic void resize(OrthographicCamera gameCam)\\n\\t{\\n\\t\\tbgCam = new OrthographicCamera(Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        bgCam.setToOrtho(false, Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT);\\n        bgCam.position.set(gameCam.position.x, gameCam.position.y, 0);\\n        bgCam.update();\\n\\t}\\n\\n\\tpublic void render(OrthographicCamera gameCam, SpriteBatch spriteBatch)\\n\\t{\\n\\t\\tif (isColor())\\n\\t\\t{\\n\\t\\t\\trenderer.setProjectionMatrix(gameCam.combined);\\n\\t\\t\\trenderer.begin(ShapeRenderer.ShapeType.Filled);\\n\\t\\t\\trenderer.rect(gameCam.position.x - Constants.CAMERA_WIDTH / 2, gameCam.position.y - Constants.CAMERA_HEIGHT / 2,\\n                          Constants.CAMERA_WIDTH, Constants.CAMERA_HEIGHT, colors[0],\\n                          colors[1], colors[2], colors[3]);\\n\\t\\t\\trenderer.end();\\n\\t\\t}\\n\\n\\t\\tif (texture != null && isTexture())\\n\\t\\t{\\n\\t\\t\\tbgCam.position.add((gameCam.position.x - oldGameCamPos.x) * speed.x, (gameCam.position.y - oldGameCamPos.y) * speed.y, 0);\\n\\t\\t\\tif(bgCam.position.x < bgCam.viewportWidth * .5f)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbgCam.position.x = bgCam.viewportWidth * .5f;\\n\\t\\t\\t}\\n\\t\\t\\tif(bgCam.position.y < bgCam.viewportHeight * .5f)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbgCam.position.y = bgCam.viewportHeight * .5f;\\n\\t\\t\\t}\\n\\t\\t\\tbgCam.update();\\n\\t\\t\\toldGameCamPos.set(gameCam.position);\\n\\n\\t\\t\\tspriteBatch.setProjectionMatrix(bgCam.combined);\\n\\t\\t\\tspriteBatch.begin();\\n\\n\\t\\t\\tspriteBatch.draw(texture, position.x, position.y, width * widthMul, height * heightMul, 0, 0, MathUtils.ceil(texture.getWidth() * widthMul), MathUtils.ceil(texture.getHeight() * heightMul), false, false);\\n\\n\\t\\t\\tspriteBatch.end();\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic void onAssetsLoaded(OrthographicCamera gameCam, Assets assets)\\n\\t{\\n\\t\\tif(textureName != null && isTexture())\\n\\t\\t{\\n\\t\\t\\tif(cameraPositioned)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\ttexture = assets.manager.get(textureName);\\n\\t\\t\\ttexture.setWrap(getHorizontalWrap(), getVerticalWarp());\\n\\t\\t\\tbgCam.position.set(gameCam.position.x, gameCam.position.y, 0);\\n        \\toldGameCamPos.set(gameCam.position);\\n\\t\\t\\tcameraPositioned = true;\\n\\t\\t}\\n\\t}\\n\\n\\tpublic void dispose()\\n\\t{\\n\\t\\tif (renderer != null)\\n\\t\\t{\\n\\t\\t\\trenderer.dispose();\\n\\t\\t\\trenderer = null;\\n\\t\\t}\\n\\t}\\n\\n\\tprivate Texture.TextureWrap getHorizontalWrap()\\n\\t{\\n\\t\\tif(type == BG_IMG_ALL || type == BG_IMG_BOTTOM || type == BG_IMG_TOP)\\n\\t\\t\\treturn Texture.TextureWrap.Repeat;\\n\\t\\treturn Texture.TextureWrap.ClampToEdge;\\n\\t}\\n\\n\\tprivate Texture.TextureWrap getVerticalWarp()\\n\\t{\\n\\t\\tif(type == BG_IMG_ALL)\\n\\t\\t\\treturn Texture.TextureWrap.Repeat;\\n\\t\\treturn Texture.TextureWrap.ClampToEdge;\\n\\t}\\n\\n\\tprivate boolean isTexture()\\n\\t{\\n\\t\\treturn type == BG_IMG_ALL || type == BG_IMG_BOTTOM || type == BG_IMG_TOP;\\n\\t}\\n\\n\\tprivate boolean isColor()\\n\\t{\\n\\t\\treturn type == BG_GR_VER || type == BG_GR_HOR;\\n\\t}\\n}\"}, {\"identifier\":\"ChoseLevelView\", \"path\":\"core/src/rs/pedjaapps/smc/view/ChoseLevelView.java\", \"snippet\":\"public class ChoseLevelView extends Group {\\n    private MainMenuScreen mainMenuScreen;\\n    private Skin skin;\\n    private ScrollPane levelScrollPane;\\n    private Label numLives;\\n    private Group statusgroup;\\n    private Table levelStatusGroup;\\n    private TextButton backButton;\\n    private LevelButton currentSelectedButton;\\n    private TextButton leaderBoardButton;\\n    private Array<LevelButton> allLevelButtons;\\n\\n    public ChoseLevelView(MainMenuScreen mainMenuScreen, Skin skin) {\\n        super();\\n\\n        this.mainMenuScreen = mainMenuScreen;\\n        this.skin = skin;\\n    }\\n\\n    public void inflateWidgets(TextureAtlas dynAtlas, Array<Actor> focussableActors) {\\n        Table levelTable = new Table();\\n        LevelButton preselected = null;\\n        boolean beforeWasCleared = true;\\n\\n        Label lblChoose = new Label(\\\"Choose challenge!\\\", skin, Assets.LABEL_BORDER60);\\n        lblChoose.setFontScale(.6f);\\n        levelTable.add(lblChoose).minHeight(getHeight() * .35f);\\n\\n        allLevelButtons = new Array<>();\\n\\n        int world = 1;\\n        for (final String levelId : Level.getLevelList()) {\\n            levelTable.row();\\n            Level level = Level.getLevel(levelId);\\n\\n            if (world != level.world) {\\n                world = level.world;\\n                levelTable.add(new Label(\\\"World \\\" + String.valueOf(world), skin, Assets.LABEL_BORDER25))\\n                        .center().padTop(getHeight() * .1f);\\n                levelTable.row();\\n            }\\n\\n            LevelButton levelButton = new LevelButton(skin, dynAtlas) {\\n                @Override\\n                protected void onChosen() {\\n                    if (!isMarked())\\n                        selectLevelButton(this);\\n                    else if (isUnlocked() || MaryoGame.GAME_DEVMODE) {\\n                        if (GameSave.isLoadingFromCloud())\\n                            new ErrorDialog(\\\"Cannot start game, still loading gamestate from cloud...\\\\n\\\" +\\n                                    \\\"If this problem remains, log out from cloud service to cancel.\\\",\\n                                    getSkin(), .8f, .5f);\\n                        else {\\n                            ChoseLevelView.this.mainMenuScreen.game.setScreen(\\n                                    new LoadingScreen(new GameScreen(ChoseLevelView.this.mainMenuScreen.game, true,\\n                                            getLevel().levelId), false));\\n                        }\\n                    }\\n                }\\n            };\\n            levelButton.setLevel(level, beforeWasCleared || level.bestScore > 0);\\n            levelTable.add(levelButton).fill().uniform().pad(15);\\n            allLevelButtons.add(levelButton);\\n\\n            if (levelButton.isUnlocked() && (level.number == 1 || level.currentScore == 0))\\n                preselected = levelButton;\\n\\n            beforeWasCleared = level.bestScore > 0;\\n        }\\n\\n        levelTable.row();\\n        Label lbl = new Label(\\\"And there is even more to come!\\\\nAlso check out the level editor!\\\", skin, Assets\\n                .LABEL_BORDER25);\\n        lbl.setFontScale(.8f);\\n        lbl.setWrap(true);\\n        lbl.setAlignment(Align.center);\\n        levelTable.add(lbl).fill().minHeight(getHeight() * .35f);\\n\\n        backButton = new ColorableTextButton(FontAwesome.LEFT_ARROW, skin, Assets.BUTTON_FA);\\n        backButton.addListener(new ChangeListener() {\\n            @Override\\n            public void changed(ChangeEvent event, Actor actor) {\\n                goBack();\\n            }\\n        });\\n        backButton.setPosition(10, getHeight() - 10, Align.topLeft);\\n        this.addActor(backButton);\\n\\n        final TextButton downButton = new TextButton(FontAwesome.CIRCLE_DOWN, skin, Assets.BUTTON_FA_FRAMELESS);\\n        downButton.setPosition(getWidth() - 5, 5, Align.bottomRight);\\n        this.addActor(downButton);\\n\\n        final TextButton upButton = new TextButton(FontAwesome.CIRCLE_UP, skin, Assets.BUTTON_FA_FRAMELESS);\\n        upButton.setPosition(getWidth() - 5, getHeight() - 5, Align.topRight);\\n        this.addActor(upButton);\\n\\n        levelScrollPane = new ScrollPane(levelTable) {\\n            @Override\\n            public void act(float delta) {\\n                int forceScroll = (downButton.isOver() ? 1 : upButton.isOver() ? -1 : 0);\\n\\n                if (forceScroll != 0)\\n                    setScrollY(getScrollY() + forceScroll * getMouseWheelY() * delta * 6);\\n\\n                super.act(delta);\\n            }\\n        };\\n        levelScrollPane.addListener(new InputListener() {\\n            @Override\\n            public boolean keyDown(InputEvent event, int keycode) {\\n                int navigate = 0;\\n                switch (keycode) {\\n                    case Input.Keys.UP:\\n                        navigate--;\\n                        break;\\n                    case Input.Keys.DOWN:\\n                        navigate++;\\n                        break;\\n                    case Input.Keys.HOME:\\n                        navigate -= 100;\\n                        break;\\n                    case Input.Keys.END:\\n                        navigate += 100;\\n                        break;\\n                    case Input.Keys.PAGE_DOWN:\\n                        navigate = navigate + 3;\\n                        break;\\n                    case Input.Keys.PAGE_UP:\\n                        navigate = navigate - 3;\\n                        break;\\n                }\\n\\n                if (navigate != 0) {\\n                    int goToLevel = currentSelectedButton.getLevel().number + navigate;\\n\\n                    if (goToLevel < 1)\\n                        goToLevel = 1;\\n                    else if (goToLevel > allLevelButtons.size)\\n                        goToLevel = allLevelButtons.size;\\n\\n                    if (goToLevel != currentSelectedButton.getLevel().number)\\n                        selectLevelButton(allLevelButtons.get(goToLevel - 1));\\n                    return true;\\n\\n                }\\n\\n                //Keycode kann bei Controller oder FireTV anders als Enter sein\\n                if (keycode == Input.Keys.ENTER || getStage() != null\\n                        && getStage() instanceof ControllerMenuStage\\n                        && ((ControllerMenuStage) getStage()).isDefaultActionKeyCode(keycode)) {\\n                    currentSelectedButton.getClickListener().clicked(event, 0, 0);\\n                    return true;\\n\\n                } else {\\n                    return super.keyDown(event, keycode);\\n                }\\n            }\\n        });\\n        levelScrollPane.setScrollingDisabled(true, false);\\n        levelScrollPane.setWidth(getWidth() * .42f);\\n        levelScrollPane.setHeight(getHeight());\\n        levelScrollPane.setPosition(upButton.getX() - 5, getHeight() / 2, Align.right);\\n        this.addActor(levelScrollPane);\\n\\n        // Statusinfos zu Maryo\\n        statusgroup = new Group();\\n\\n        if (GameSave.getPersistentItem() != 0) {\\n            Image imItem = new Image(dynAtlas.findRegion(Item.getSavedItemTextureName(GameSave.getPersistentItem())));\\n            imItem.setScale(.7f);\\n            imItem.setPosition(165, 380);\\n            statusgroup.addActor(imItem);\\n        }\\n\\n        numLives = new Label(\\\"x\\\" + String.valueOf(GameSave.getLifes() - 1), skin, Assets.LABEL_BORDER60);\\n        numLives.setFontScale(.5f);\\n        // die Zahlen sind die von Maryo\\n        numLives.setPosition(175, 390);\\n        statusgroup.addActor(numLives);\\n\\n        Label numCoins = new Label(String.valueOf(GameSave.getCoins()), skin, Assets.LABEL_BORDER60);\\n        numCoins.setFontScale(.5f);\\n        numCoins.setHeight(numCoins.getPrefHeight());\\n        numCoins.setPosition(numLives.getX(), numLives.getY() - 20, Align.topLeft);\\n        statusgroup.addActor(numCoins);\\n\\n        Image imCoins = new Image(skin, HUD.IMAGE_WAFFLES);\\n        imCoins.setSize((numCoins.getPrefHeight() / imCoins.getPrefHeight()) * imCoins.getPrefWidth(), numCoins\\n                .getPrefHeight());\\n        imCoins.setPosition(numCoins.getX() - 5, numCoins.getY(), Align.bottomRight);\\n        statusgroup.addActor(imCoins);\\n\\n        Label lblTotal = getScaledLabel(\\\"SCORE\\\", .5f);\\n        lblTotal.setPosition(numCoins.getX() - 10, getHeight() / 2, Align.right);\\n        statusgroup.addActor(lblTotal);\\n\\n        Label totalScore = getScaledLabel(String.valueOf(GameSave.getTotalScore()), .5f);\\n        totalScore.setPosition(numCoins.getX(), getHeight() / 2, Align.left);\\n        statusgroup.addActor(totalScore);\\n\\n        addActor(statusgroup);\\n\\n        levelScrollPane.validate();\\n\\n        selectLevelButton(preselected);\\n\\n        focussableActors.add(levelScrollPane);\\n        focussableActors.add(backButton);\\n\\n        //kommt erst später in die Anzeige, hier hinzufügen wegen focussableActors\\n        leaderBoardButton = new ColorableTextButton(\\\"SHOW LEADER\\\", skin, Assets.BUTTON_SMALL_FRAMELESS);\\n        focussableActors.add(leaderBoardButton);\\n    }\\n\\n    private void selectLevelButton(LevelButton levelButton) {\\n        if (currentSelectedButton != levelButton && currentSelectedButton != null)\\n            currentSelectedButton.setMarked(false);\\n\\n        currentSelectedButton = levelButton;\\n        levelButton.setMarked(true);\\n\\n        if (levelStatusGroup != null)\\n            removeActor(levelStatusGroup);\\n\\n        final Level level = currentSelectedButton.getLevel();\\n\\n        levelStatusGroup = new Table();\\n        levelStatusGroup.add().minWidth(numLives.getX());\\n        levelStatusGroup.add().minWidth(levelScrollPane.getX() - numLives.getX());\\n        levelStatusGroup.row();\\n        if (levelButton.isUnlocked()) {\\n            levelStatusGroup.add();\\n            levelStatusGroup.add(getScaledLabel(\\\"LEVEL \\\" + level.number + \\\" SCORES\\\", .5f)).padBottom(5).left();\\n\\n            levelStatusGroup.row();\\n            if (level.bestScore == 0 && level.currentScore == 0) {\\n                levelStatusGroup.add();\\n                levelStatusGroup.add(getScaledLabel(\\\"- NO SCORES YET -\\\", .5f)).left();\\n            } else {\\n                levelStatusGroup.add(new Label(\\\"CURRENT\\\", skin, Assets.LABEL_BORDER25)).right().bottom()\\n                        .padRight(10);\\n                levelStatusGroup.add(getScaledLabel(String.valueOf(level.currentScore), .5f)).left();\\n\\n                levelStatusGroup.row();\\n                levelStatusGroup.add(new Label(\\\"BEST\\\", skin, Assets.LABEL_BORDER25)).right().bottom()\\n                        .padRight(10);\\n                levelStatusGroup.add(getScaledLabel(String.valueOf(level.bestScore), .5f)).left();\\n            }\\n        } else {\\n            Label levelTitle = getScaledLabel(\\\"LEVEL \\\" + level.number + \\\" LOCKED\\\", .5f);\\n            levelStatusGroup.add(levelTitle).colspan(2).padBottom(5);\\n\\n            levelStatusGroup.row();\\n            Label unlockHint = getScaledLabel(\\\"CLEAR LEVEL \\\" + String.valueOf(level.number - 1)\\n                    + \\\" TO UNLOCK\\\", .5f);\\n            levelStatusGroup.add(unlockHint).colspan(2);\\n            unlockHint.addAction(HUD.getForeverFade());\\n            levelTitle.addAction(HUD.getForeverFade());\\n        }\\n\\n\\n        //levelStatusGroup.row();\\n        //levelStatusGroup.add(leaderBoardButton).colspan(2)\\n        //        .padTop(5).minHeight(backButton.getPrefHeight() * .75f);\\n        levelStatusGroup.validate();\\n        levelStatusGroup.setPosition(levelScrollPane.getX() / 2, levelStatusGroup.getPrefHeight() / 2 + 10);\\n        addActor(levelStatusGroup);\\n    }\\n\\n    private Label getScaledLabel(String text, float scale) {\\n        Label newLabelActor = new Label(text, skin, Assets.LABEL_BORDER60);\\n        newLabelActor.setFontScale(scale);\\n        newLabelActor.setHeight(newLabelActor.getPrefHeight());\\n        newLabelActor.setWidth(newLabelActor.getPrefWidth());\\n        return newLabelActor;\\n    }\\n\\n    protected void goBack() {\\n        //overriden\\n    }\\n\\n    /**\\n     * informs that the Group is shown on a stage\\n     *\\n     * @param stage\\n     */\\n    public void onShow(MenuStage stage) {\\n        //statusgroup.addAction(Actions.sequence(Actions.alpha(0),\\n        //        Actions.delay(MainMenuScreen.DURATION_TRANSITION), Actions.fadeIn(1f)));\\n        stage.setFocussedActor(levelScrollPane);\\n        if (currentSelectedButton != null)\\n            currentSelectedButton.scrollTo();\\n        stage.setEscapeActor(backButton);\\n    }\\n}\"}, {\"identifier\":\"ColorableTextButton\", \"path\":\"core/src/rs/pedjaapps/smc/view/ColorableTextButton.java\", \"snippet\":\"public class ColorableTextButton extends TextButton {\\n    public ColorableTextButton(String text, Skin skin) {\\n        super(text, skin);\\n    }\\n\\n    public ColorableTextButton(String text, Skin skin, String styleName) {\\n        super(text, skin, styleName);\\n    }\\n\\n    public ColorableTextButton(String text, TextButtonStyle style) {\\n        super(text, style);\\n    }\\n\\n    @Override\\n    public void draw(Batch batch, float parentAlpha) {\\n        Color oldColor = getStyle().fontColor;\\n        getStyle().fontColor = getColor();\\n        super.draw(batch, parentAlpha);\\n        getStyle().fontColor = oldColor;\\n    }\\n}\"}, {\"identifier\":\"ErrorDialog\", \"path\":\"core/src/rs/pedjaapps/smc/view/ErrorDialog.java\", \"snippet\":\"public class ErrorDialog extends ScrollDialog {\\n    public ErrorDialog(String msg, Skin skin, float percentWidth, float percentHeight) {\\n        super(skin, percentWidth, percentHeight);\\n\\n        Label textLabel = new Label(msg, skin, Assets.LABEL_SIMPLE25);\\n        textLabel.setWrap(true);\\n\\n        setScrollActor(textLabel);\\n        button(new ColorableTextButton(FontAwesome.CIRCLE_CHECK, skin, Assets.BUTTON_FA_FRAMELESS));\\n    }\\n}\"}, {\"identifier\":\"GamepadMappingDialog\", \"path\":\"core/src/rs/pedjaapps/smc/view/GamepadMappingDialog.java\", \"snippet\":\"public class GamepadMappingDialog extends ControllerMenuDialog {\\n    private static final String PRESS_THE_BUTTON_TO = \\\"Hold the button to \\\";\\n    private final Label instructionLabel;\\n    private final ControllerMappings mappings;\\n    private final Controller controller;\\n    private final TextButton skipButton;\\n    private final Label axisLabel;\\n    private final Label buttonLabel;\\n    private int currentStep = 0;\\n    private float timeSinceLastRecord = 0;\\n    private int inputToRecord = -1;\\n\\n    public GamepadMappingDialog(Skin skin, Controller controller, ControllerMappings mappings) {\\n        super(\\\"\\\", skin, Assets.WINDOW_SMALL);\\n\\n        this.mappings = mappings;\\n        this.controller = controller;\\n\\n        instructionLabel = new Label(\\\"\\\", skin, Assets.LABEL_SIMPLE25);\\n        instructionLabel.setWrap(true);\\n\\n        buttonLabel = new Label(\\\"\\\", skin, Assets.LABEL_SIMPLE25);\\n        axisLabel = new Label(\\\"\\\", skin, Assets.LABEL_SIMPLE25);\\n\\n        String name = controller.getName();\\n        if (name.length() > 50)\\n            name = name.substring(0, 48) + \\\"...\\\";\\n\\n        getContentTable().add(new Label(\\\"Configure \\\" + name, skin, Assets.LABEL_SIMPLE25)).colspan(2);\\n        getContentTable().row();\\n\\n        getContentTable().add(instructionLabel).fill().minWidth(MaryoGame.NATIVE_WIDTH * .7f)\\n                .minHeight(MaryoGame.NATIVE_HEIGHT * .5f).colspan(2);\\n        instructionLabel.setAlignment(Align.center);\\n\\n        if (MaryoGame.GAME_DEVMODE) {\\n            getContentTable().row();\\n            getContentTable().add(buttonLabel).minWidth(MaryoGame.NATIVE_WIDTH * .35f);\\n            getContentTable().add(axisLabel).minWidth(MaryoGame.NATIVE_WIDTH * .35f);\\n        }\\n\\n        getButtonTable().defaults().pad(20, 40, 0, 40);\\n\\n        skipButton = new ColorableTextButton(\\\"Skip\\\", getSkin(), Assets.BUTTON_SMALL);\\n        skipButton.addListener(new ChangeListener() {\\n            @Override\\n            public void changed(ChangeEvent event, Actor actor) {\\n                if (inputToRecord >= 0) {\\n                    currentStep = currentStep + 2 - (currentStep % 2);\\n                    switchStep();\\n                } else\\n                    hide();\\n            }\\n        });\\n\\n        getButtonTable().add(skipButton);\\n        buttonsToAdd.add(skipButton);\\n\\n        TextButton restartButton = new ColorableTextButton(\\\"Restart\\\", getSkin(), Assets.BUTTON_SMALL);\\n        restartButton.addListener(new ChangeListener() {\\n            @Override\\n            public void changed(ChangeEvent event, Actor actor) {\\n                currentStep = 0;\\n                switchStep();\\n            }\\n        });\\n\\n        getButtonTable().add(restartButton);\\n        buttonsToAdd.add(restartButton);\\n\\n        switchStep();\\n    }\\n\\n    @Override\\n    public void act(float delta) {\\n        super.act(delta);\\n\\n        timeSinceLastRecord += delta;\\n\\n        if (timeSinceLastRecord > .25f && inputToRecord >= 0) {\\n            timeSinceLastRecord = 0;\\n            ControllerMappings.RecordResult recordResult = mappings.recordMapping(controller, inputToRecord);\\n\\n            if (MaryoGame.GAME_DEVMODE) {\\n                int pressedButton = ControllerMappings.findPressedButton(controller);\\n                buttonLabel.setText(pressedButton >= 0 ? \\\"B\\\" + String.valueOf(pressedButton) : \\\"\\\");\\n                int movedAxis = ControllerMappings.findHighAxisValue(controller, mappings.analogToDigitalTreshold,\\n                        mappings.maxAcceptedAnalogValue);\\n                axisLabel.setText(movedAxis >= 0 ? \\\"A\\\" + String.valueOf(movedAxis) : \\\"\\\");\\n                if (controller.getPov(0) != PovDirection.center)\\n                    axisLabel.setText(\\\"P0\\\");\\n            }\\n\\n            switch (recordResult) {\\n                case need_second_button:\\n                    currentStep++;\\n                    switchStep();\\n                    break;\\n                case recorded:\\n                    currentStep = currentStep + 2 - (currentStep % 2);\\n                    switchStep();\\n                    break;\\n                default:\\n                    //nix zu tun, wir warten ab\\n            }\\n        }\\n    }\\n\\n    private void switchStep() {\\n        switch (currentStep) {\\n            case 0:\\n                mappings.resetMappings(controller);\\n                instructionLabel.setText(PRESS_THE_BUTTON_TO + \\\"move RIGHT\\\");\\n                inputToRecord = MyControllerMapping.AXIS_HORIZONTAL;\\n                break;\\n            case 1:\\n                instructionLabel.setText(PRESS_THE_BUTTON_TO + \\\"move LEFT\\\");\\n                inputToRecord = MyControllerMapping.AXIS_HORIZONTAL;\\n                break;\\n            case 2:\\n                instructionLabel.setText(PRESS_THE_BUTTON_TO + \\\"move DOWN\\\");\\n                inputToRecord = MyControllerMapping.AXIS_VERTICAL;\\n                break;\\n            case 3:\\n                instructionLabel.setText(PRESS_THE_BUTTON_TO + \\\"move UP\\\");\\n                inputToRecord = MyControllerMapping.AXIS_VERTICAL;\\n                break;\\n            case 4:\\n            case 5:\\n                instructionLabel.setText(PRESS_THE_BUTTON_TO + \\\"JUMP\\\");\\n                inputToRecord = MyControllerMapping.BUTTON_JUMP;\\n                break;\\n            case 6:\\n            case 7:\\n                instructionLabel.setText(PRESS_THE_BUTTON_TO + \\\"FIRE\\\");\\n                inputToRecord = MyControllerMapping.BUTTON_FIRE;\\n                break;\\n            case 8:\\n            case 9:\\n                instructionLabel.setText(PRESS_THE_BUTTON_TO + \\\"ENTER menus and pause\\\");\\n                inputToRecord = MyControllerMapping.BUTTON_START;\\n                break;\\n            case 10:\\n            case 11:\\n                instructionLabel.setText(PRESS_THE_BUTTON_TO + \\\"ESCAPE menus\\\");\\n                inputToRecord = MyControllerMapping.BUTTON_CANCEL;\\n                break;\\n            default:\\n                instructionLabel.setText(\\\"Finished\\\");\\n                PrefsManager.saveControllerMappings(mappings.toJson().toJson(JsonWriter.OutputType.json));\\n                skipButton.setText(\\\"OK\\\");\\n\\n                inputToRecord = -1;\\n        }\\n    }\\n}\"}, {\"identifier\":\"GamepadSettingsDialog\", \"path\":\"core/src/rs/pedjaapps/smc/view/GamepadSettingsDialog.java\", \"snippet\":\"public class GamepadSettingsDialog extends ControllerMenuDialog {\\n\\n    private final ColorableTextButton closeButton;\\n    private Button refreshButton;\\n    private RefreshListener controllerListener;\\n    private ControllerMappings mappings;\\n    private boolean runsOnChrome;\\n\\n    public GamepadSettingsDialog(Skin skin, ControllerMappings mappings, String isRunningOn) {\\n        super(\\\"\\\", skin, Assets.WINDOW_SMALL);\\n\\n        this.mappings = mappings;\\n\\n        getButtonTable().defaults().pad(20, 40, 0, 40);\\n        closeButton = new ColorableTextButton(\\\"Close\\\", skin, Assets.BUTTON_SMALL);\\n        button(closeButton);\\n\\n        refreshButton = new ColorableTextButton(\\\"Refresh\\\", getSkin(), Assets.BUTTON_SMALL);\\n        refreshButton.addListener(new ChangeListener() {\\n            @Override\\n            public void changed(ChangeEvent event, Actor actor) {\\n                refreshShownControllers();\\n            }\\n        });\\n\\n        getButtonTable().add(refreshButton);\\n        buttonsToAdd.add(refreshButton);\\n\\n        controllerListener = new RefreshListener();\\n\\n        runsOnChrome = (isRunningOn != null && isRunningOn.toLowerCase().contains(\\\"chrome/\\\"));\\n    }\\n\\n    private void refreshShownControllers() {\\n        fillContentTable();\\n        invalidate();\\n        pack();\\n        setPosition(getStage().getWidth() / 2, getStage().getHeight() / 2, Align.center);\\n    }\\n\\n    private void fillContentTable() {\\n        Table contentTable = getContentTable();\\n        contentTable.clear();\\n\\n        Array<Controller> controllers = Controllers.getControllers();\\n\\n        contentTable.add(new Label(controllers.size == 0 ? \\\"No controllers found.\\\" : \\\"Controllers found:\\\",\\n                getSkin(), Assets.LABEL_SIMPLE25)).padBottom(30);\\n\\n        Table controllerList = new Table();\\n        controllerList.defaults().pad(10);\\n        for (int i = 0; i < controllers.size; i++) {\\n            controllerList.row();\\n            final Controller controller = controllers.get(i);\\n            String shownName = controller.getName();\\n            if (shownName.length() > 40)\\n                shownName = shownName.substring(0, 38) + \\\"...\\\";\\n            controllerList.add(new Label(shownName, getSkin(), Assets.LABEL_SIMPLE25)).left().expandX();\\n            ColorableTextButton configureButton = new ColorableTextButton(\\\"Configure\\\", getSkin(), Assets\\n                    .BUTTON_SMALL_FRAMELESS);\\n            configureButton.addListener(new ChangeListener() {\\n                @Override\\n                public void changed(ChangeEvent event, Actor actor) {\\n                    startControllerConfiguration(controller);\\n                }\\n            });\\n            controllerList.add(configureButton);\\n            buttonsToAdd.add(configureButton);\\n            if (getStage() != null)\\n                ((MenuStage) getStage()).addFocussableActor(configureButton);\\n        }\\n        contentTable.row();\\n        contentTable.add(controllerList);\\n\\n        contentTable.row().padTop(30);\\n        Label hint = new Label(\\\"If a connected controller does not show up,\\\\ntry pressing a button.\\\\n\\\" +\\n                (Gdx.app.getType() == Application.ApplicationType.WebGL && runsOnChrome ?\\n                        \\\"If you face problems with controllers on Chrome, press a button, reload the game, try again.\\\\n\\\" +\\n                                \\\"If that does not help, try Mozilla Firefox.\\\" : \\\"\\\"),\\n                getSkin(), Assets.LABEL_SIMPLE25);\\n        hint.setFontScale(.8f);\\n        hint.setWrap(true);\\n        hint.setAlignment(Align.center);\\n        contentTable.add(hint).fill().minWidth(MaryoGame.NATIVE_WIDTH * .7f);\\n    }\\n\\n    private void startControllerConfiguration(Controller controller) {\\n        Dialog configurationDialog = new GamepadMappingDialog(getSkin(), controller, mappings);\\n\\n        configurationDialog.show(getStage());\\n    }\\n\\n    @Override\\n    public Dialog show(Stage stage, Action action) {\\n        //getContentTable().setWidth(stage.getWidth() * .7f);\\n        fillContentTable();\\n\\n        super.show(stage, action);\\n\\n        if (stage instanceof MenuStage)\\n            ((MenuStage) stage).setEscapeActor(closeButton);\\n\\n        Controllers.addListener(controllerListener);\\n        return this;\\n    }\\n\\n    @Override\\n    public void hide(Action action) {\\n        // removeListener darf erst im nächsten Call passieren, da es eine Exception gibt wenn diese Aktion\\n        // aus einem Controller-Aufruf heraus passiert\\n        Gdx.app.postRunnable(new Runnable() {\\n            @Override\\n            public void run() {\\n                Controllers.removeListener(controllerListener);\\n            }\\n        });\\n        super.hide(action);\\n    }\\n\\n    private class RefreshListener extends ControllerAdapter {\\n        @Override\\n        public void connected(Controller controller) {\\n            refreshShownControllers();\\n        }\\n\\n        @Override\\n        public void disconnected(Controller controller) {\\n            refreshShownControllers();\\n        }\\n    }\\n}\"}, {\"identifier\":\"GpgsDialog\", \"path\":\"core/src/rs/pedjaapps/smc/view/GpgsDialog.java\", \"snippet\":\"public class GpgsDialog extends ControllerMenuDialog implements IGameServiceListener {\\n    private final ColorableTextButton loginButton;\\n    private final ColorableTextButton saveNowButton;\\n    protected MaryoGame game;\\n    boolean alreadySaved;\\n    private float timeSinceRefresh;\\n\\n    public GpgsDialog(Skin skin, MaryoGame game) {\\n        super(\\\"\\\", skin, Assets.WINDOW_SMALL);\\n\\n        this.game = game;\\n\\n        getButtonTable().defaults().pad(20, 40, 0, 40);\\n        ColorableTextButton closeButton = new ColorableTextButton(\\\"Close\\\", skin, Assets.BUTTON_SMALL);\\n        button(closeButton);\\n\\n        Table contentTable = getContentTable();\\n        contentTable.clear();\\n\\n        contentTable.add(new Label(\\\"Cloud save\\\", getSkin(), Assets.LABEL_SIMPLE25)).padBottom(30);\\n\\n        contentTable.row();\\n        Label hint = new Label(\\\"If you log in to your Google Account, Secret Chronicles will automatically save your \\\" +\\n                \\\"gamestate to your Google Drive.\\\", getSkin(), Assets.LABEL_SIMPLE25);\\n        hint.setFontScale(.8f);\\n        hint.setWrap(true);\\n        hint.setAlignment(Align.center);\\n        contentTable.add(hint).padBottom(30).fill().minWidth(MaryoGame.NATIVE_WIDTH * .7f);\\n\\n        contentTable.row();\\n        loginButton = new ColorableTextButton(\\\"\\\", getSkin(), Assets.BUTTON_SMALL);\\n        loginButton.addListener(new ChangeListener() {\\n            @Override\\n            public void changed(ChangeEvent event, Actor actor) {\\n                logInOurOut();\\n            }\\n        });\\n        contentTable.add(loginButton);\\n        buttonsToAdd.add(loginButton);\\n\\n        contentTable.row();\\n        saveNowButton = new ColorableTextButton(\\\"Save gamestate now\\\", getSkin(),\\n                Assets.BUTTON_SMALL_FRAMELESS);\\n        saveNowButton.addListener(new ChangeListener() {\\n            @Override\\n            public void changed(ChangeEvent event, Actor actor) {\\n                if (alreadySaved)\\n                    return;\\n\\n                alreadySaved = true;\\n                saveNowButton.setText(\\\"Saving...\\\");\\n                GameSave.save(new ISaveGameStateResponseListener() {\\n                    @Override\\n                    public void onGameStateSaved(boolean success, String errorCode) {\\n                        saveNowButton.setText(success ? \\\"Gamestate saved.\\\" : \\\"Saving gamestate failed\\\");\\n                        alreadySaved = success;\\n                    }\\n                });\\n            }\\n        });\\n        contentTable.add(saveNowButton).minHeight(saveNowButton.getPrefHeight() * 2);\\n        buttonsToAdd.add(saveNowButton);\\n\\n        refreshState();\\n    }\\n\\n    @Override\\n    public void act(float delta) {\\n        super.act(delta);\\n\\n        timeSinceRefresh = timeSinceRefresh + delta;\\n\\n        if (timeSinceRefresh >= 2f)\\n            refreshState();\\n    }\\n\\n    private void refreshState() {\\n        if (game.gpgsClient.isSessionActive()) {\\n            String playerDisplayName = game.gpgsClient.getPlayerDisplayName();\\n\\n            if (GameSave.isLoadingFromCloud())\\n                loginButton.setText(\\\"Loading gamestate... Click to cancel\\\");\\n            else\\n                loginButton.setText(\\\"Sign out to deactivate cloud save\\\" +\\n                        (playerDisplayName == null ? \\\"\\\" : \\\"\\\\n\\\" + playerDisplayName));\\n\\n        } else if (game.gpgsClient.isConnectionPending())\\n            loginButton.setText(\\\"Signing in, please wait...\\\");\\n        else\\n            loginButton.setText(\\\"Sign in and activate cloud save\\\");\\n\\n        saveNowButton.setVisible(game.gpgsClient.isSessionActive());\\n\\n        timeSinceRefresh = 0;\\n    }\\n\\n    private void logInOurOut() {\\n        if (game.gpgsClient.isConnectionPending())\\n            return;\\n\\n        if (!game.gpgsClient.isSessionActive())\\n            game.gpgsClient.logIn();\\n        else {\\n            GameSave.resetLoadedFromCloud();\\n            game.gpgsClient.logOff();\\n        }\\n    }\\n\\n    @Override\\n    public void gsOnSessionActive() {\\n        refreshState();\\n        GameSave.loadFromCloudIfApplicable(game);\\n    }\\n\\n    @Override\\n    public void gsOnSessionInactive() {\\n        refreshState();\\n    }\\n\\n    @Override\\n    public void gsShowErrorToUser(IGameServiceListener.GsErrorType et, String msg, Throwable t) {\\n        // GPGS Error auf aktuellem Bildschirm oder in Log anzeigen\\n        String errorMsg = \\\"Could not log in to Google.\\\";\\n\\n        if (msg != null)\\n            errorMsg = errorMsg + \\\"\\\\n\\\\nFailure message:\\\\n\\\" + msg;\\n\\n        new ErrorDialog(errorMsg, getSkin(), .8f, .4f).show(getStage());\\n    }\\n\\n    @Override\\n    public Dialog show(Stage stage, Action action) {\\n        game.gpgsClient.setListener(new GameServiceRenderThreadListener(this));\\n        return super.show(stage, action);\\n    }\\n\\n    @Override\\n    public boolean remove() {\\n        game.gpgsClient.setListener(game);\\n        return super.remove();\\n    }\\n}\"}, {\"identifier\":\"MusicButton\", \"path\":\"core/src/rs/pedjaapps/smc/view/MusicButton.java\", \"snippet\":\"public class MusicButton extends ColorableTextButton {\\n    public MusicButton(Skin skin, final Sound audioOn) {\\n        super(getSoundStateIcon(), skin, Assets.BUTTON_FA);\\n\\n        this.addListener(new ChangeListener() {\\n            @Override\\n            public void changed(ChangeEvent event, Actor actor) {\\n                Music music = getMusic();\\n\\n                if (!PrefsManager.isPlaySounds()) {\\n                    PrefsManager.setPlayMusic(true);\\n                    PrefsManager.setPlaySounds(true);\\n                    if (music != null)\\n                        MusicManager.play(music);\\n                } else if (PrefsManager.isPlayMusic()) {\\n                    PrefsManager.setPlayMusic(false);\\n                    PrefsManager.setPlaySounds(true);\\n\\n                    if (music != null)\\n                        music.pause();\\n\\n                    if (audioOn != null)\\n                        SoundManager.play(audioOn);\\n                } else {\\n                    PrefsManager.setPlayMusic(false);\\n                    PrefsManager.setPlaySounds(false);\\n                }\\n                ((TextButton) actor).setText(getSoundStateIcon());\\n            }\\n        });\\n    }\\n\\n    private static String getSoundStateIcon() {\\n        if (PrefsManager.isPlayMusic())\\n            return FontAwesome.SETTINGS_MUSIC;\\n        else if (PrefsManager.isPlaySounds())\\n            return FontAwesome.SETTINGS_SPEAKER_ON;\\n        else\\n            return FontAwesome.SETTINGS_SPEAKER_OFF;\\n    }\\n\\n    protected Music getMusic() {\\n        return null;\\n    }\\n}\"}]", "import_statement": "import com.badlogic.gdx.Application;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Input;\nimport com.badlogic.gdx.audio.Music;\nimport com.badlogic.gdx.audio.Sound;\nimport com.badlogic.gdx.controllers.Controllers;\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.BitmapFont;\nimport com.badlogic.gdx.graphics.g2d.ParticleEffect;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.g2d.TextureAtlas;\nimport com.badlogic.gdx.math.Interpolation;\nimport com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.scenes.scene2d.Actor;\nimport com.badlogic.gdx.scenes.scene2d.Group;\nimport com.badlogic.gdx.scenes.scene2d.InputEvent;\nimport com.badlogic.gdx.scenes.scene2d.InputListener;\nimport com.badlogic.gdx.scenes.scene2d.actions.Actions;\nimport com.badlogic.gdx.scenes.scene2d.ui.Image;\nimport com.badlogic.gdx.scenes.scene2d.ui.Label;\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\nimport com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;\nimport com.badlogic.gdx.utils.Align;\nimport com.badlogic.gdx.utils.viewport.FitViewport;\nimport com.badlogic.gdx.utils.viewport.Viewport;\nimport rs.pedjaapps.smc.MaryoGame;\nimport rs.pedjaapps.smc.assets.Assets;\nimport rs.pedjaapps.smc.assets.FontAwesome;\nimport rs.pedjaapps.smc.audio.MusicManager;\nimport rs.pedjaapps.smc.object.GameObject;\nimport rs.pedjaapps.smc.object.World;\nimport rs.pedjaapps.smc.utility.Constants;\nimport rs.pedjaapps.smc.utility.GameSave;\nimport rs.pedjaapps.smc.utility.LevelLoader;\nimport rs.pedjaapps.smc.view.AboutDialog;\nimport rs.pedjaapps.smc.view.Background;\nimport rs.pedjaapps.smc.view.ChoseLevelView;\nimport rs.pedjaapps.smc.view.ColorableTextButton;\nimport rs.pedjaapps.smc.view.ErrorDialog;\nimport rs.pedjaapps.smc.view.GamepadMappingDialog;\nimport rs.pedjaapps.smc.view.GamepadSettingsDialog;\nimport rs.pedjaapps.smc.view.GpgsDialog;\nimport rs.pedjaapps.smc.view.MusicButton;", "code": "                && !Gdx.input.isPeripheralAvailable(Input.Peripheral.HardwareKeyboard)\n                && !firstStartDone\n                && Controllers.getControllers().size >= 1\n                && !game.controllerMappings.loadedSavedSettings)\n            new GamepadMappingDialog(skin, Controllers.getControllers().get(0), game.controllerMappings).show(stage);\n\n        firstStartDone = true;\n    }\n\n    private void initStartMenu() {\n        shadeBackground = new Image(skin, \"stagebackground\");\n        shadeBackground.setFillParent(true);\n        shadeBackground.getColor().a = 0;\n        stage.addActor(shadeBackground);\n\n        startMenu = new Group();\n        startMenu.setSize(stage.getWidth(), stage.getHeight());\n        stage.addActor(startMenu);\n        playButton = new ColorableTextButton(\"Play\", skin, Assets.BUTTON_BORDER) {\n//            private float time;\n//\n//            @Override\n//            public void act(float delta) {\n//                super.act(delta);\n//                time += delta;\n//            }\n//\n//            @Override\n//            public void draw(Batch batch, float parentAlpha) {\n//                stage.getBatch().setShader(Shader.GLOW_SHADER);\n//                Shader.GLOW_SHADER.setUniformf(\"u_time\", time);\n//                super.draw(batch, parentAlpha);\n//                stage.getBatch().setShader(null);\n//            }\n        };\n        stage.setEmphColor(skin.getColor(Assets.COLOR_EMPH2));\n        playButton.getLabel().setFontScale(.8f);\n        playButton.setSize(playButton.getPrefWidth() * 1.2f, playButton.getPrefHeight());\n        playButton.addListener(new ChangeListener() {\n            @Override\n            public void changed(ChangeEvent event, Actor actor) {\n                showLevels();\n            }\n        });\n\n        TextButton soundButton = new MusicButton(skin, audioOn) {\n            @Override\n            protected Music getMusic() {\n                return music;\n            }\n        };\n\n        startMenu.addActor(playButton);\n        stage.addFocussableActor(playButton);\n        playButton.setPosition(startMenu.getWidth() / 2, startMenu.getHeight() / 2 - 50, Align.center);\n        startMenu.addActor(soundButton);\n        stage.addFocussableActor(soundButton);\n\n        Image imGameLogo = createLogoImage(game);\n        imGameLogo.setPosition(startMenu.getWidth() / 2, (startMenu.getHeight() + playButton.getY() + playButton\n                .getHeight()) /\n                2, Align.center);\n        startMenu.addActor(imGameLogo);\n\n        Label gameVersion = new Label(\"v\" + MaryoGame.GAME_VERSION + \" by Benjamin Schulte\", skin, Assets\n                .LABEL_BORDER25);\n        if (MaryoGame.GAME_DEVMODE)\n            gameVersion.setColor(Color.RED);\n        gameVersion.setPosition(startMenu.getWidth() / 2, 10, Align.bottom);\n        gameVersion.addListener(new InputListener() {\n            @Override\n            public boolean touchDown(InputEvent event, float x, float y, int pointer, int button) {\n                new AboutDialog(skin).show(stage);\n                return true;\n            }\n        });\n        startMenu.addActor(gameVersion);\n        stage.addFocussableActor(gameVersion);\n\n        exitButton = new ColorableTextButton(FontAwesome.CIRCLE_CROSS, skin, Assets.BUTTON_FA_FRAMELESS);\n        exitButton.setPosition(10, startMenu.getHeight() - 10, Align.topLeft);\n        exitButton.setVisible(Gdx.app.getType() != Application.ApplicationType.WebGL);\n        exitButton.addListener(new ChangeListener() {\n            @Override\n            public void changed(ChangeEvent event, Actor actor) {\n                Gdx.app.exit();\n            }\n        });\n        startMenu.addActor(exitButton);\n        stage.addFocussableActor(exitButton);\n\n        TextButton gamePadSettings = new ColorableTextButton(FontAwesome.DEVICE_GAMEPAD, skin, Assets.BUTTON_FA);\n        gamePadSettings.setPosition(startMenu.getWidth() - 10, 10, Align.bottomRight);\n        gamePadSettings.addListener(new ChangeListener() {\n            @Override\n            public void changed(ChangeEvent event, Actor actor) {\n                new GamepadSettingsDialog(skin, game.controllerMappings, game.isRunningOn).show(stage);\n            }\n        });\n        startMenu.addActor(gamePadSettings);\n        stage.addFocussableActor(gamePadSettings);\n\n        soundButton.setPosition(gamePadSettings.getX(), gamePadSettings.getY() + gamePadSettings.getHeight() + 20);\n\n        if (game.gpgsClient != null) {\n            TextButton gpgsLogin = new ColorableTextButton(FontAwesome.NET_CLOUDSAVE, skin, Assets.BUTTON_FA) {\n                private boolean isConnected = true;\n\n                @Override\n                public void act(float delta) {\n                    super.act(delta);\n                    if (game.gpgsClient.isSessionActive() != isConnected) {\n                        isConnected = !isConnected;\n                        getLabel().setColor(isConnected ? Color.WHITE : Color.SALMON);\n                    }\n                }\n            };\n            gpgsLogin.addListener(new ChangeListener() {\n                @Override\n                public void changed(ChangeEvent event, Actor actor) {", "next_line": "                    new GpgsDialog(skin, game).show(stage);", "gold_snippet_index": 16, "id": 3, "__internal_uuid__": "56bd86fb-3084-4344-916e-7b49b88989fc"}
{"repo_name": "nithril/sandbox-query-benchmark-jooq-hibernate-jdbc", "file_path": "application/src/main/java/demo/service/AuthorQueries.java", "context": "[{\"identifier\":\"TAuthor\", \"path\":\"application/src/main/java/demo/dom/tables/TAuthor.java\", \"snippet\":\"@Generated(\\n\\tvalue = {\\n\\t\\t\\\"http://www.jooq.org\\\",\\n\\t\\t\\\"jOOQ version:3.7.0\\\"\\n\\t},\\n\\tcomments = \\\"This class is generated by jOOQ\\\"\\n)\\n@SuppressWarnings({ \\\"all\\\", \\\"unchecked\\\", \\\"rawtypes\\\" })\\npublic class TAuthor extends TableImpl<RAuthorRecord> {\\n\\n\\tprivate static final long serialVersionUID = 996098554;\\n\\n\\t/**\\n\\t * The reference instance of <code>PUBLIC.AUTHOR</code>\\n\\t */\\n\\tpublic static final TAuthor AUTHOR = new TAuthor();\\n\\n\\t/**\\n\\t * The class holding records for this type\\n\\t */\\n\\t@Override\\n\\tpublic Class<RAuthorRecord> getRecordType() {\\n\\t\\treturn RAuthorRecord.class;\\n\\t}\\n\\n\\t/**\\n\\t * The column <code>PUBLIC.AUTHOR.ID</code>.\\n\\t */\\n\\tpublic final TableField<RAuthorRecord, Long> ID = createField(\\\"ID\\\", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, \\\"\\\");\\n\\n\\t/**\\n\\t * The column <code>PUBLIC.AUTHOR.NAME</code>.\\n\\t */\\n\\tpublic final TableField<RAuthorRecord, String> NAME = createField(\\\"NAME\\\", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, \\\"\\\");\\n\\n\\t/**\\n\\t * Create a <code>PUBLIC.AUTHOR</code> table reference\\n\\t */\\n\\tpublic TAuthor() {\\n\\t\\tthis(\\\"AUTHOR\\\", null);\\n\\t}\\n\\n\\t/**\\n\\t * Create an aliased <code>PUBLIC.AUTHOR</code> table reference\\n\\t */\\n\\tpublic TAuthor(String alias) {\\n\\t\\tthis(alias, AUTHOR);\\n\\t}\\n\\n\\tprivate TAuthor(String alias, Table<RAuthorRecord> aliased) {\\n\\t\\tthis(alias, aliased, null);\\n\\t}\\n\\n\\tprivate TAuthor(String alias, Table<RAuthorRecord> aliased, Field<?>[] parameters) {\\n\\t\\tsuper(alias, TPublic.PUBLIC, aliased, parameters, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic Identity<RAuthorRecord, Long> getIdentity() {\\n\\t\\treturn Keys.IDENTITY_AUTHOR;\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic UniqueKey<RAuthorRecord> getPrimaryKey() {\\n\\t\\treturn Keys.PK_AUTHOR;\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic List<UniqueKey<RAuthorRecord>> getKeys() {\\n\\t\\treturn Arrays.<UniqueKey<RAuthorRecord>>asList(Keys.PK_AUTHOR);\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic TAuthor as(String alias) {\\n\\t\\treturn new TAuthor(alias, this);\\n\\t}\\n\\n\\t/**\\n\\t * Rename this table\\n\\t */\\n\\tpublic TAuthor rename(String name) {\\n\\t\\treturn new TAuthor(name, null);\\n\\t}\\n}\"}, {\"identifier\":\"TBook\", \"path\":\"application/src/main/java/demo/dom/tables/TBook.java\", \"snippet\":\"@Generated(\\n\\tvalue = {\\n\\t\\t\\\"http://www.jooq.org\\\",\\n\\t\\t\\\"jOOQ version:3.7.0\\\"\\n\\t},\\n\\tcomments = \\\"This class is generated by jOOQ\\\"\\n)\\n@SuppressWarnings({ \\\"all\\\", \\\"unchecked\\\", \\\"rawtypes\\\" })\\npublic class TBook extends TableImpl<RBookRecord> {\\n\\n\\tprivate static final long serialVersionUID = -146557646;\\n\\n\\t/**\\n\\t * The reference instance of <code>PUBLIC.BOOK</code>\\n\\t */\\n\\tpublic static final TBook BOOK = new TBook();\\n\\n\\t/**\\n\\t * The class holding records for this type\\n\\t */\\n\\t@Override\\n\\tpublic Class<RBookRecord> getRecordType() {\\n\\t\\treturn RBookRecord.class;\\n\\t}\\n\\n\\t/**\\n\\t * The column <code>PUBLIC.BOOK.ID</code>.\\n\\t */\\n\\tpublic final TableField<RBookRecord, Long> ID = createField(\\\"ID\\\", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, \\\"\\\");\\n\\n\\t/**\\n\\t * The column <code>PUBLIC.BOOK.TITLE</code>.\\n\\t */\\n\\tpublic final TableField<RBookRecord, String> TITLE = createField(\\\"TITLE\\\", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, \\\"\\\");\\n\\n\\t/**\\n\\t * The column <code>PUBLIC.BOOK.AUTHOR_ID</code>.\\n\\t */\\n\\tpublic final TableField<RBookRecord, Long> AUTHOR_ID = createField(\\\"AUTHOR_ID\\\", org.jooq.impl.SQLDataType.BIGINT, this, \\\"\\\");\\n\\n\\t/**\\n\\t * Create a <code>PUBLIC.BOOK</code> table reference\\n\\t */\\n\\tpublic TBook() {\\n\\t\\tthis(\\\"BOOK\\\", null);\\n\\t}\\n\\n\\t/**\\n\\t * Create an aliased <code>PUBLIC.BOOK</code> table reference\\n\\t */\\n\\tpublic TBook(String alias) {\\n\\t\\tthis(alias, BOOK);\\n\\t}\\n\\n\\tprivate TBook(String alias, Table<RBookRecord> aliased) {\\n\\t\\tthis(alias, aliased, null);\\n\\t}\\n\\n\\tprivate TBook(String alias, Table<RBookRecord> aliased, Field<?>[] parameters) {\\n\\t\\tsuper(alias, TPublic.PUBLIC, aliased, parameters, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic Identity<RBookRecord, Long> getIdentity() {\\n\\t\\treturn Keys.IDENTITY_BOOK;\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic UniqueKey<RBookRecord> getPrimaryKey() {\\n\\t\\treturn Keys.PK_BOOK;\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic List<UniqueKey<RBookRecord>> getKeys() {\\n\\t\\treturn Arrays.<UniqueKey<RBookRecord>>asList(Keys.PK_BOOK);\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic TBook as(String alias) {\\n\\t\\treturn new TBook(alias, this);\\n\\t}\\n\\n\\t/**\\n\\t * Rename this table\\n\\t */\\n\\tpublic TBook rename(String name) {\\n\\t\\treturn new TBook(name, null);\\n\\t}\\n}\"}, {\"identifier\":\"Author\", \"path\":\"application/src/main/java/demo/dom/tables/pojos/Author.java\", \"snippet\":\"@Generated(\\n\\tvalue = {\\n\\t\\t\\\"http://www.jooq.org\\\",\\n\\t\\t\\\"jOOQ version:3.7.0\\\"\\n\\t},\\n\\tcomments = \\\"This class is generated by jOOQ\\\"\\n)\\n@SuppressWarnings({ \\\"all\\\", \\\"unchecked\\\", \\\"rawtypes\\\" })\\npublic class Author implements Serializable {\\n\\n\\tprivate static final long serialVersionUID = -2018295126;\\n\\n\\tprivate Long   id;\\n\\tprivate String name;\\n\\n\\tpublic Author() {}\\n\\n\\tpublic Author(Author value) {\\n\\t\\tthis.id = value.id;\\n\\t\\tthis.name = value.name;\\n\\t}\\n\\n\\tpublic Author(\\n\\t\\tLong   id,\\n\\t\\tString name\\n\\t) {\\n\\t\\tthis.id = id;\\n\\t\\tthis.name = name;\\n\\t}\\n\\n\\tpublic Long getId() {\\n\\t\\treturn this.id;\\n\\t}\\n\\n\\tpublic void setId(Long id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\n\\tpublic String getName() {\\n\\t\\treturn this.name;\\n\\t}\\n\\n\\tpublic void setName(String name) {\\n\\t\\tthis.name = name;\\n\\t}\\n\\n\\t@Override\\n\\tpublic boolean equals(Object obj) {\\n\\t\\tif (this == obj)\\n\\t\\t\\treturn true;\\n\\t\\tif (obj == null)\\n\\t\\t\\treturn false;\\n\\t\\tif (getClass() != obj.getClass())\\n\\t\\t\\treturn false;\\n\\t\\tfinal Author other = (Author) obj;\\n\\t\\tif (id == null) {\\n\\t\\t\\tif (other.id != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\telse if (!id.equals(other.id))\\n\\t\\t\\treturn false;\\n\\t\\tif (name == null) {\\n\\t\\t\\tif (other.name != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\telse if (!name.equals(other.name))\\n\\t\\t\\treturn false;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int hashCode() {\\n\\t\\tfinal int prime = 31;\\n\\t\\tint result = 1;\\n\\t\\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\\n\\t\\tresult = prime * result + ((name == null) ? 0 : name.hashCode());\\n\\t\\treturn result;\\n\\t}\\n\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\tStringBuilder sb = new StringBuilder(\\\"Author (\\\");\\n\\n\\t\\tsb.append(id);\\n\\t\\tsb.append(\\\", \\\").append(name);\\n\\n\\t\\tsb.append(\\\")\\\");\\n\\t\\treturn sb.toString();\\n\\t}\\n}\"}, {\"identifier\":\"Book\", \"path\":\"application/src/main/java/demo/dom/tables/pojos/Book.java\", \"snippet\":\"@Generated(\\n\\tvalue = {\\n\\t\\t\\\"http://www.jooq.org\\\",\\n\\t\\t\\\"jOOQ version:3.7.0\\\"\\n\\t},\\n\\tcomments = \\\"This class is generated by jOOQ\\\"\\n)\\n@SuppressWarnings({ \\\"all\\\", \\\"unchecked\\\", \\\"rawtypes\\\" })\\npublic class Book implements Serializable {\\n\\n\\tprivate static final long serialVersionUID = 211230648;\\n\\n\\tprivate Long   id;\\n\\tprivate String title;\\n\\n\\t@JsonIgnore\\n\\tprivate Long   authorId;\\n\\n\\tpublic Book() {}\\n\\n\\tpublic Book(Book value) {\\n\\t\\tthis.id = value.id;\\n\\t\\tthis.title = value.title;\\n\\t\\tthis.authorId = value.authorId;\\n\\t}\\n\\n\\tpublic Book(\\n\\t\\tLong   id,\\n\\t\\tString title,\\n\\t\\tLong   authorId\\n\\t) {\\n\\t\\tthis.id = id;\\n\\t\\tthis.title = title;\\n\\t\\tthis.authorId = authorId;\\n\\t}\\n\\n\\tpublic Long getId() {\\n\\t\\treturn this.id;\\n\\t}\\n\\n\\tpublic void setId(Long id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\n\\tpublic String getTitle() {\\n\\t\\treturn this.title;\\n\\t}\\n\\n\\tpublic void setTitle(String title) {\\n\\t\\tthis.title = title;\\n\\t}\\n\\n\\tpublic Long getAuthorId() {\\n\\t\\treturn this.authorId;\\n\\t}\\n\\n\\tpublic void setAuthorId(Long authorId) {\\n\\t\\tthis.authorId = authorId;\\n\\t}\\n\\n\\t@Override\\n\\tpublic boolean equals(Object obj) {\\n\\t\\tif (this == obj)\\n\\t\\t\\treturn true;\\n\\t\\tif (obj == null)\\n\\t\\t\\treturn false;\\n\\t\\tif (getClass() != obj.getClass())\\n\\t\\t\\treturn false;\\n\\t\\tfinal Book other = (Book) obj;\\n\\t\\tif (id == null) {\\n\\t\\t\\tif (other.id != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\telse if (!id.equals(other.id))\\n\\t\\t\\treturn false;\\n\\t\\tif (title == null) {\\n\\t\\t\\tif (other.title != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\telse if (!title.equals(other.title))\\n\\t\\t\\treturn false;\\n\\t\\tif (authorId == null) {\\n\\t\\t\\tif (other.authorId != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\telse if (!authorId.equals(other.authorId))\\n\\t\\t\\treturn false;\\n\\t\\treturn true;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int hashCode() {\\n\\t\\tfinal int prime = 31;\\n\\t\\tint result = 1;\\n\\t\\tresult = prime * result + ((id == null) ? 0 : id.hashCode());\\n\\t\\tresult = prime * result + ((title == null) ? 0 : title.hashCode());\\n\\t\\tresult = prime * result + ((authorId == null) ? 0 : authorId.hashCode());\\n\\t\\treturn result;\\n\\t}\\n\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\tStringBuilder sb = new StringBuilder(\\\"Book (\\\");\\n\\n\\t\\tsb.append(id);\\n\\t\\tsb.append(\\\", \\\").append(title);\\n\\t\\tsb.append(\\\", \\\").append(authorId);\\n\\n\\t\\tsb.append(\\\")\\\");\\n\\t\\treturn sb.toString();\\n\\t}\\n}\"}, {\"identifier\":\"RAuthorRecord\", \"path\":\"application/src/main/java/demo/dom/tables/records/RAuthorRecord.java\", \"snippet\":\"@Generated(\\n\\tvalue = {\\n\\t\\t\\\"http://www.jooq.org\\\",\\n\\t\\t\\\"jOOQ version:3.7.0\\\"\\n\\t},\\n\\tcomments = \\\"This class is generated by jOOQ\\\"\\n)\\n@SuppressWarnings({ \\\"all\\\", \\\"unchecked\\\", \\\"rawtypes\\\" })\\npublic class RAuthorRecord extends UpdatableRecordImpl<RAuthorRecord> implements Record2<Long, String> {\\n\\n\\tprivate static final long serialVersionUID = 1732267430;\\n\\n\\t/**\\n\\t * Setter for <code>PUBLIC.AUTHOR.ID</code>.\\n\\t */\\n\\tpublic void setId(Long value) {\\n\\t\\tsetValue(0, value);\\n\\t}\\n\\n\\t/**\\n\\t * Getter for <code>PUBLIC.AUTHOR.ID</code>.\\n\\t */\\n\\tpublic Long getId() {\\n\\t\\treturn (Long) getValue(0);\\n\\t}\\n\\n\\t/**\\n\\t * Setter for <code>PUBLIC.AUTHOR.NAME</code>.\\n\\t */\\n\\tpublic void setName(String value) {\\n\\t\\tsetValue(1, value);\\n\\t}\\n\\n\\t/**\\n\\t * Getter for <code>PUBLIC.AUTHOR.NAME</code>.\\n\\t */\\n\\tpublic String getName() {\\n\\t\\treturn (String) getValue(1);\\n\\t}\\n\\n\\t// -------------------------------------------------------------------------\\n\\t// Primary key information\\n\\t// -------------------------------------------------------------------------\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic Record1<Long> key() {\\n\\t\\treturn (Record1) super.key();\\n\\t}\\n\\n\\t// -------------------------------------------------------------------------\\n\\t// Record2 type implementation\\n\\t// -------------------------------------------------------------------------\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic Row2<Long, String> fieldsRow() {\\n\\t\\treturn (Row2) super.fieldsRow();\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic Row2<Long, String> valuesRow() {\\n\\t\\treturn (Row2) super.valuesRow();\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic Field<Long> field1() {\\n\\t\\treturn TAuthor.AUTHOR.ID;\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic Field<String> field2() {\\n\\t\\treturn TAuthor.AUTHOR.NAME;\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic Long value1() {\\n\\t\\treturn getId();\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic String value2() {\\n\\t\\treturn getName();\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic RAuthorRecord value1(Long value) {\\n\\t\\tsetId(value);\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic RAuthorRecord value2(String value) {\\n\\t\\tsetName(value);\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * {@inheritDoc}\\n\\t */\\n\\t@Override\\n\\tpublic RAuthorRecord values(Long value1, String value2) {\\n\\t\\tvalue1(value1);\\n\\t\\tvalue2(value2);\\n\\t\\treturn this;\\n\\t}\\n\\n\\t// -------------------------------------------------------------------------\\n\\t// Constructors\\n\\t// -------------------------------------------------------------------------\\n\\n\\t/**\\n\\t * Create a detached RAuthorRecord\\n\\t */\\n\\tpublic RAuthorRecord() {\\n\\t\\tsuper(TAuthor.AUTHOR);\\n\\t}\\n\\n\\t/**\\n\\t * Create a detached, initialised RAuthorRecord\\n\\t */\\n\\tpublic RAuthorRecord(Long id, String name) {\\n\\t\\tsuper(TAuthor.AUTHOR);\\n\\n\\t\\tsetValue(0, id);\\n\\t\\tsetValue(1, name);\\n\\t}\\n}\"}, {\"identifier\":\"AuthorWithBooks\", \"path\":\"hibernate/src/main/java/demo/domain/AuthorWithBooks.java\", \"snippet\":\"public class AuthorWithBooks {\\n\\n\\tprivate Author author;\\n\\tprivate List<Book> books = Collections.emptyList();\\n\\n\\tpublic AuthorWithBooks() {\\n\\t}\\n\\n\\tpublic AuthorWithBooks(Author author, List<Book> books) {\\n\\t\\tthis.author = author;\\n\\t\\tthis.books = books;\\n\\t}\\n\\n\\tprivate AuthorWithBooks(Builder builder) {\\n\\t\\tsetAuthor(builder.author);\\n\\t\\tsetBooks(builder.books);\\n\\t}\\n\\n\\tpublic static Builder newBuilder() {\\n\\t\\treturn new Builder();\\n\\t}\\n\\n\\tpublic static Builder newBuilder(AuthorWithBooks copy) {\\n\\t\\tBuilder builder = new Builder();\\n\\t\\tbuilder.author = copy.author;\\n\\t\\tbuilder.books = copy.books;\\n\\t\\treturn builder;\\n\\t}\\n\\n\\tpublic Author getAuthor() {\\n\\t\\treturn author;\\n\\t}\\n\\n\\tpublic void setAuthor(Author author) {\\n\\t\\tthis.author = author;\\n\\t}\\n\\n\\tpublic List<Book> getBooks() {\\n\\t\\treturn books;\\n\\t}\\n\\n\\tpublic void setBooks(List<Book> books) {\\n\\t\\tthis.books = books;\\n\\t}\\n\\n\\n\\tpublic static final class Builder {\\n\\t\\tprivate Author author;\\n\\t\\tprivate List<Book> books;\\n\\n\\t\\tprivate Builder() {\\n\\t\\t}\\n\\n\\t\\tpublic Builder author(Author val) {\\n\\t\\t\\tauthor = val;\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tpublic Builder books(List<Book> val) {\\n\\t\\t\\tbooks = val;\\n\\t\\t\\treturn this;\\n\\t\\t}\\n\\n\\t\\tpublic AuthorWithBooks build() {\\n\\t\\t\\treturn new AuthorWithBooks(this);\\n\\t\\t}\\n\\t}\\n\\n\\n\\t@Override\\n\\tpublic boolean equals(Object o) {\\n\\t\\tif (this == o) return true;\\n\\t\\tif (o == null || getClass() != o.getClass()) return false;\\n\\n\\t\\tAuthorWithBooks that = (AuthorWithBooks) o;\\n\\n\\t\\tif (!getAuthor().equals(that.getAuthor())) return false;\\n\\t\\treturn getBooks().equals(that.getBooks());\\n\\n\\t}\\n\\n\\t@Override\\n\\tpublic int hashCode() {\\n\\t\\tint result = getAuthor().hashCode();\\n\\t\\tresult = 31 * result + getBooks().hashCode();\\n\\t\\treturn result;\\n\\t}\\n}\"}, {\"identifier\":\"AuthorRepository\", \"path\":\"application/src/main/java/demo/repository/AuthorRepository.java\", \"snippet\":\"public class AuthorRepository extends AuthorDao {\\n\\n\\tpublic AuthorRepository(Configuration configuration) {\\n\\t\\tsuper(configuration);\\n\\t}\\n\\n}\"}, {\"identifier\":\"BookRepository\", \"path\":\"hibernate/src/main/java/demo/repository/BookRepository.java\", \"snippet\":\"public interface BookRepository extends JpaRepository<Book, Long> {\\n}\"}, {\"identifier\":\"AUTHOR\", \"path\":\"application/src/main/java/demo/dom/tables/TAuthor.java\", \"snippet\":\"public static final TAuthor AUTHOR = new TAuthor();\"}, {\"identifier\":\"BOOK\", \"path\":\"application/src/main/java/demo/dom/tables/TBook.java\", \"snippet\":\"public static final TBook BOOK = new TBook();\"}]", "import_statement": "import javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.stream.Collectors;\nimport org.jooq.Cursor;\nimport org.jooq.DSLContext;\nimport org.jooq.Record;\nimport org.jooq.RecordMapper;\nimport org.jooq.Result;\nimport org.jooq.TableField;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.PreparedStatementCreator;\nimport org.springframework.jdbc.core.PreparedStatementSetter;\nimport org.springframework.jdbc.core.RowCallbackHandler;\nimport org.springframework.jdbc.core.RowMapper;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport demo.dom.tables.TAuthor;\nimport demo.dom.tables.TBook;\nimport demo.dom.tables.pojos.Author;\nimport demo.dom.tables.pojos.Book;\nimport demo.dom.tables.records.RAuthorRecord;\nimport demo.domain.AuthorWithBooks;\nimport demo.repository.AuthorRepository;\nimport demo.repository.BookRepository;\nimport static demo.dom.tables.TAuthor.AUTHOR;\nimport static demo.dom.tables.TBook.BOOK;", "code": "package demo.service;\n\n\n\n\n\n/**\n * Created by nlabrot on 30/09/15.\n */\n@Service\npublic class AuthorQueries {\n\n\t@Autowired\n\tprivate AuthorRepository authorRepository;\n\n\t@Autowired\n\tprivate BookRepository bookRepository;\n\n\t@Autowired\n\tprivate DSLContext dslContext;\n\n\t@Autowired\n\tprivate JdbcTemplate jdbcTemplate;\n\n\n\t@Transactional(readOnly = true)\n\tpublic Long reference() {\n\t\tSet<Long> set = new HashSet<>();\n\t\tAtomicLong aLong = new AtomicLong();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BOOK.AUTHOR_ID\", r -> {\n\t\t\tLong authorId = r.getLong(\"AUTHOR.ID\");\n\t\t\tif (!set.contains(authorId)) {\n\t\t\t\tset.add(authorId);\n\t\t\t\taLong.addAndGet(r.getString(\"AUTHOR.NAME\").length());\n\t\t\t}\n\t\t\taLong.addAndGet(r.getLong(\"BOOK.ID\"));\n\t\t\taLong.addAndGet(r.getString(\"BOOK.TITLE\").length());\n\t\t});\n\t\treturn aLong.get();\n\n\t}\n\n\t@Transactional(readOnly = true)\n\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {\n\t\tMap<Long, AuthorWithBooks> booksMap = new HashMap<>();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BOOK.AUTHOR_ID\", r -> {\n\t\t\tLong authorId = r.getLong(\"AUTHOR.ID\");\n\t\t\tAuthorWithBooks authorWithBooks = booksMap.get(authorId);\n\t\t\tif (authorWithBooks == null) {\n\t\t\t\tauthorWithBooks = new AuthorWithBooks();\n\t\t\t\tauthorWithBooks.setAuthor(new Author(authorId, r.getString(\"AUTHOR.NAME\")));\n\t\t\t\tauthorWithBooks.setBooks(new ArrayList<>());\n\t\t\t\tbooksMap.put(authorId, authorWithBooks);\n\t\t\t}", "next_line": "\t\t\tBook book = new Book(r.getLong(\"BOOK.ID\"), r.getString(\"BOOK.TITLE\"), authorId);", "gold_snippet_index": 3, "id": 4, "__internal_uuid__": "4e887d86-054a-42f4-8152-abb71baea0e6"}
{"repo_name": "duckAsteroid/progress", "file_path": "format/src/main/java/io/github/duckasteroid/progress/base/format/CompoundFormat.java", "context": "[{\"identifier\":\"BAR_EQUALS\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/ProgressBar.java\", \"snippet\":\"public static final char[] BAR_EQUALS = new char[] {'=', '>', ' '};\"}, {\"identifier\":\"ProgressMonitor\", \"path\":\"api/src/main/java/io/github/duckasteroid/progress/ProgressMonitor.java\", \"snippet\":\"public interface ProgressMonitor extends Comparable<ProgressMonitor>, Closeable {\\n  /**\\n   * The parent monitor of this monitor (if any).\\n   * @return the parent monitor or <code>null</code> if this is the root\\n   */\\n  ProgressMonitor getParent();\\n\\n  /**\\n   * The path from this monitor to the root through all parent contexts in order leaf to root.\\n   * @return a list of parent contexts (all the way to the root); an empty list if this is the\\n   *         root.\\n   */\\n  List<ProgressMonitor> getContext();\\n\\n  /**\\n   * The name of this task set by the {@link #getParent() parent} (if any).\\n   * @return the task name (or empty String)\\n   */\\n  String getTaskName();\\n\\n  /**\\n   * The last {@link #setStatus(String) notified} status.\\n   * @return the task status (or empty String)\\n   */\\n  String getStatus();\\n\\n  /**\\n   * Notify users (if possible) of the status of this task (without changing the fraction done).\\n   * @param status The task status notification message\\n   */\\n  void setStatus(String status);\\n\\n  /**\\n   * The \\\"size\\\" of this task - by default this is <code>1</code>.\\n   * @return the \\\"relative\\\" size of this task\\n   */\\n  long getSize();\\n\\n  /**\\n   * Modify the overall size of this task. If the current {@link #getWorkDone()} is already more\\n   * than this then the monitor will also be marked {@link #isDone() done}.\\n   * Changing the size of a \\\"done\\\" monitor has no effect, it remains done...\\n   * The size cannot be modified to less than 1; the value defaults to this if out of range.\\n   * Note: modifying the size of a subtask - does not influence the work it contributes to the\\n   * parent task\\n   * @param size the new size of this task\\n   */\\n  void setSize(long size);\\n\\n  /**\\n   * The unit of work in this monitor (default empty).\\n   * Sub tasks will inherit this unit.\\n   * @return the unit as set in {@link #setUnit(String)}\\n   */\\n  String getUnit();\\n\\n  /**\\n   * Modify the unit of this task, only new subtasks will pick up this unit.\\n   * @param unit the new unit\\n   */\\n  void setUnit(String unit);\\n\\n  /**\\n   * The current amount of work done. This is always a positive number or zero.\\n   * It may be more than the size of this task (which simply means the task is done)\\n   * @return the current amount of work done\\n   */\\n  long getWorkDone();\\n\\n  /**\\n   * Log an amount of work and (optionally) update the status in a single operation.\\n   * This operation has no effect if the monitor is {@linkplain #isDone() done} or\\n   * {@linkplain #isCancelled() cancelled}.\\n   * If this work takes the {@linkplain #getWorkDone() total work done} past the {@linkplain\\n   * #getSize() size} then the monitor will be marked done.\\n   * If the amount of work is less than zero, it will default to zero\\n   * @param amount the amount of work done\\n   * @param status a status message to set (if not <code>null</code>)\\n   * @return the value of {@link #getWorkDone()} as a result of this new work\\n   */\\n  long worked(long amount, String status);\\n\\n  /**\\n   * Log an amount of work with no (null) corresponding status update.\\n   * This is the same as calling <code>worked(amount, null)</code>\\n   * @see #worked(long, String)\\n   * @param amount the amount of work done\\n   * @return the value of {@link #getWorkDone()} as a result of this new work\\n   */\\n  long worked(long amount);\\n\\n  /**\\n   * Called to set the work done to the size of the task (at this point in time).\\n   * Subsequent modifications to {@link #getSize()} may alter this, but the progress will only be\\n   * done once\\n   */\\n  void done();\\n\\n  /**\\n   * Has the work reported completed (i.e. {@link #getWorkDone()} &gt;= {@link #getSize()}} )\\n   * NOTE: This is a one time event, if the work done is ever &gt;= the size - subsequent\\n   * increases in the size don't \\\"undo\\\" the monitor, it remains done.\\n   * @return true if the work was complete/done\\n   */\\n  boolean isDone();\\n\\n  @Override\\n  default void close() {\\n    done();\\n  }\\n\\n  /**\\n   * Has the task being reported been cancelled. This is used as a signal between the class doing\\n   * progress and the outside world that may wish it to stop before it is complete.\\n   * The cancelled state has no appreciable impact on the rest of the workings of the monitor -\\n   * it's for the receiver and the publisher of the progress to decide what to do with it.\\n   * @return true if cancelled\\n   */\\n  boolean isCancelled();\\n\\n  /**\\n   * Change the cancelled state of the task being monitored (and that of all sub-tasks).\\n   * @see #isCancelled()\\n   * @param cancelled the new cancelled state\\n   */\\n  void setCancelled(boolean cancelled);\\n\\n  /**\\n   * Create a sub task of this - which when {@linkplain #isDone() done} equates to the given\\n   * amount of work in this monitor.\\n   * NOTE: The progress of the subtask is not reflected in this monitor until it is\\n   * {@link #done()}, only then is the total work posted on this monitor.\\n   * @param name the name of the sub task\\n   * @param work the amount of work the new sub task will contribute to this monitor when done\\n   * @return a new progress monitor for the sub task\\n   * @throws IllegalStateException If this task is already {@link #isDone() done} or is\\n   *                 {@link #isCancelled() cancelled}\\n   */\\n  ProgressMonitor newSubTask(String name, long work);\\n\\n  /**\\n   * Create a sub task of this - which when {@link #isDone()} equates to a single (1) unit of work\\n   * in this task.\\n   * Equivalent to calling {@link #newSubTask(String, long)} with the given <code>name</code> and\\n   * a <code>size = 1</code>\\n   * @param name the name of the sub task\\n   * @return a new progress monitor for the sub task\\n   * @throws IllegalStateException If this task is already {@link #isDone() done} or is\\n   *                 {@link #isCancelled() cancelled}\\n   */\\n  ProgressMonitor newSubTask(String name);\\n\\n  /**\\n   * The {@link #getWorkDone()} as a fraction of the {@link #getSize()} for this task in the range\\n   * 0 to 1.\\n   * NOTE: This value can never be less than 0 or more than 1\\n   * @return the fraction done\\n   */\\n  double getFractionDone();\\n\\n\\n}\"}, {\"identifier\":\"FormatElement\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/FormatElement.java\", \"snippet\":\"public interface FormatElement {\\n  /**\\n   * Write the output of this format element to the string for the given\\n   * monitor state.\\n   *\\n   * @param sb      the place to write output\\n   * @param monitor the monitor to capture state from\\n   */\\n  void appendTo(StringBuilder sb, ProgressMonitor monitor);\\n\\n  /**\\n   * Does this element produce any output for the given monitor.\\n   *\\n   * @param monitor the monitor to test for output\\n   * @return true if calling {@link #appendTo(StringBuilder, ProgressMonitor)} would\\n   *     result in output\\n   */\\n  default boolean hasContent(ProgressMonitor monitor) {\\n    return true;\\n  }\\n\\n  /**\\n   * A kind of element that wraps another element.\\n   */\\n  interface Wrapping extends FormatElement {\\n    void setWrapped(FormatElement element);\\n\\n    boolean isWrapping();\\n  }\\n}\"}, {\"identifier\":\"Fraction\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/Fraction.java\", \"snippet\":\"public class Fraction implements FormatElement {\\n  @Override\\n  public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\\n    final int chars = (int) Math.floor(Math.log10(monitor.getSize())) + 1;\\n    sb.append(\\n        String.format(\\\"%\\\" + chars + \\\"d/%\\\" + chars + \\\"d\\\", monitor.getWorkDone(), monitor.getSize()));\\n  }\\n}\"}, {\"identifier\":\"Percentage\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/Percentage.java\", \"snippet\":\"public class Percentage implements FormatElement {\\n  @Override\\n  public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\\n    int percent = Math.min((int) (100 * monitor.getFractionDone()), 100);\\n    sb.append(String.format(\\\"%3d%%\\\", percent));\\n  }\\n}\"}, {\"identifier\":\"ProgressBar\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/ProgressBar.java\", \"snippet\":\"public class ProgressBar implements FormatElement {\\n  /**\\n   * A bar pattern like this: <code>====&gt;   </code>.\\n   */\\n  public static final char[] BAR_EQUALS = new char[] {'=', '>', ' '};\\n  private static final int MIN_WIDTH = 1;\\n  private static final int MIN_BAR_CHARS = 3;\\n\\n  /**\\n   * show a \\\"fake\\\" character progress bar using the first 3 chars from this array.\\n   */\\n  private final transient char[] barChars;\\n  private final transient String fullBar;\\n  private final transient String emptyBar;\\n\\n  /**\\n   * how wide (in characters) to make the formatted message.\\n   */\\n  private final transient int width;\\n\\n  /**\\n   * Create progress bar component.\\n   * @param width the width of the progress bar in chars\\n   * @param barChars the characters to use to paint the bar\\n   */\\n  public ProgressBar(int width, char[] barChars) {\\n    if (width <= MIN_WIDTH) {\\n      throw new IllegalArgumentException(\\\"Width must be > 1\\\");\\n    }\\n    this.width = width;\\n    this.barChars = barChars;\\n    if (barChars != null) {\\n      if (barChars.length >= MIN_BAR_CHARS) {\\n        // create full length strings for the bar to avoid doing on every progress update\\n        char[] tmp = new char[width];\\n        Arrays.fill(tmp, barChars[0]);\\n        fullBar = new String(tmp);\\n        Arrays.fill(tmp, barChars[2]);\\n        emptyBar = new String(tmp);\\n      } else {\\n        throw new IllegalArgumentException(\\\"Bar chars should contain 4 chars\\\");\\n      }\\n    } else {\\n      throw new IllegalArgumentException(\\\"Bar chars should not be null\\\");\\n    }\\n  }\\n\\n  @Override\\n  public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\\n    int percent = Math.max(0, (int) (monitor.getWorkDone() * width / monitor.getSize()));\\n    sb.append(fullBar.substring(width - percent))\\n        .append(barChars[1])\\n        .append(emptyBar.substring(percent));\\n  }\\n}\"}, {\"identifier\":\"Spinner\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/Spinner.java\", \"snippet\":\"public class Spinner implements FormatElement {\\n  /**\\n   * A char pattern that does a really boring spinner with slash chars.\\n   */\\n  public static final char[] SPINNER_SLASHES = new char[] {'-', '\\\\\\\\', '|', '/'};\\n  private static final int MIN_SPIN_CHARS = 2;\\n  /**\\n   * a sequence of characters for the spinner - looped over.\\n   */\\n  private final transient char[] spinnerChars;\\n  /**\\n   * index for spinner updates.\\n   */\\n  private transient int spindex = 0;\\n\\n  /**\\n   * Create a spinner.\\n   * @param spinnerChars the characters to use for the spinner\\n   */\\n  public Spinner(char[] spinnerChars) {\\n    if (spinnerChars == null) {\\n      throw new IllegalArgumentException(\\\"Spinner chars cannot be null\\\");\\n    }\\n    if (spinnerChars.length < MIN_SPIN_CHARS) {\\n      throw new IllegalArgumentException(\\\"Spinner chars length must be 2 or more\\\");\\n    }\\n\\n    this.spinnerChars = spinnerChars;\\n  }\\n\\n  @Override\\n  public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\\n    sb.append(spinnerChars[spindex++]);\\n    if (spindex >= spinnerChars.length) {\\n      spindex = 0;\\n    }\\n  }\\n}\"}, {\"identifier\":\"StaticString\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/StaticString.java\", \"snippet\":\"public class StaticString implements FormatElement {\\n  public static final StaticString CONDITIONAL_WHITESPACE = new StaticString(\\\" \\\", false);\\n  public static final StaticString WHITESPACE = new StaticString(\\\" \\\", true);\\n  /**\\n   * should this be printed even if empty.\\n   */\\n  private final transient boolean appendWhenEmpty;\\n  private final transient String separator;\\n\\n  public StaticString(String separator) {\\n    this(separator, true);\\n  }\\n\\n  public StaticString(String separator, boolean appendWhenEmpty) {\\n    this.separator = separator;\\n    this.appendWhenEmpty = appendWhenEmpty;\\n  }\\n\\n  @Override\\n  public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\\n    if (sb.length() == 0 && !appendWhenEmpty) {\\n      return;\\n    }\\n    sb.append(separator);\\n  }\\n}\"}, {\"identifier\":\"Status\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/Status.java\", \"snippet\":\"public class Status implements FormatElement {\\n  @Override\\n  public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\\n    if (hasContent(monitor)) {\\n      sb.append(Utils.sanitize(monitor.getStatus()));\\n    }\\n  }\\n\\n  @Override\\n  public boolean hasContent(ProgressMonitor monitor) {\\n    if (monitor == null) {\\n      return false;\\n    }\\n\\n    String status = monitor.getStatus();\\n    return Utils.notEmpty(status);\\n  }\\n}\"}, {\"identifier\":\"StringWrapper\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/StringWrapper.java\", \"snippet\":\"public class StringWrapper implements FormatElement {\\n  private final transient String before;\\n  private final transient String after;\\n  private final transient FormatElement wrapped;\\n\\n  /**\\n   * Create string wrapper segment.\\n   * @param before the string before\\n   * @param wrapped the wrapped element\\n   * @param after the string after\\n   */\\n  public StringWrapper(String before, FormatElement wrapped, String after) {\\n    this.before = before;\\n    this.wrapped = wrapped;\\n    this.after = after;\\n  }\\n\\n  public static StringWrapper prefix(String prefix, FormatElement wrapped) {\\n    return new StringWrapper(prefix, wrapped, \\\"\\\");\\n  }\\n\\n  public static FormatElement wrap(String before, FormatElement wrap, String after) {\\n    return new StringWrapper(before, wrap, after);\\n  }\\n\\n  @Override\\n  public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\\n    if (wrapped.hasContent(monitor)) {\\n      sb.append(before);\\n      wrapped.appendTo(sb, monitor);\\n      sb.append(after);\\n    }\\n  }\\n\\n  @Override\\n  public boolean hasContent(ProgressMonitor monitor) {\\n    return wrapped.hasContent(monitor);\\n  }\\n}\"}, {\"identifier\":\"TaskName\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/elements/TaskName.java\", \"snippet\":\"public class TaskName implements FormatElement {\\n  @Override\\n  public void appendTo(StringBuilder sb, ProgressMonitor monitor) {\\n    sb.append(Utils.sanitize(monitor.getTaskName()));\\n  }\\n}\"}, {\"identifier\":\"FormatParser\", \"path\":\"format/src/main/java/io/github/duckasteroid/progress/base/format/parse/FormatParser.java\", \"snippet\":\"public interface FormatParser {\\n  /**\\n   * Load the registered parsers using {@link ServiceLoader}.\\n   *\\n   * @return A map of the parsers keyed by their tag names\\n   */\\n  static Map<String, Function<String, FormatElement>> loadParsers() {\\n    ServiceLoader<FormatParser> serviceLoader = ServiceLoader.load(FormatParser.class);\\n    return serviceLoader.stream()\\n        .map(ServiceLoader.Provider::get)\\n        .flatMap(fp -> fp.parsers().entrySet().stream())\\n        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\\n  }\\n\\n  ;\\n\\n  /**\\n   * A map of a format parser functions by \\\"tag\\\".\\n   *\\n   * @return a map of parser functions\\n   */\\n  default Map<String, Function<String, FormatElement>> parsers() {\\n    return Collections.emptyMap();\\n  }\\n}\"}]", "import_statement": "import static io.github.duckasteroid.progress.base.format.elements.ProgressBar.BAR_EQUALS;\nimport io.github.duckasteroid.progress.ProgressMonitor;\nimport io.github.duckasteroid.progress.base.format.elements.FormatElement;\nimport io.github.duckasteroid.progress.base.format.elements.Fraction;\nimport io.github.duckasteroid.progress.base.format.elements.Percentage;\nimport io.github.duckasteroid.progress.base.format.elements.ProgressBar;\nimport io.github.duckasteroid.progress.base.format.elements.Spinner;\nimport io.github.duckasteroid.progress.base.format.elements.StaticString;\nimport io.github.duckasteroid.progress.base.format.elements.Status;\nimport io.github.duckasteroid.progress.base.format.elements.StringWrapper;\nimport io.github.duckasteroid.progress.base.format.elements.TaskName;\nimport io.github.duckasteroid.progress.base.format.parse.FormatParser;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport java.util.function.Function;", "code": "package io.github.duckasteroid.progress.base.format;\n\n\n\n/**\n * A compound format made up by delegating to a list of {@link FormatElement}s.\n */\npublic class CompoundFormat implements ProgressFormat {\n\n  public static CompoundFormat MAXIMAL = new CompoundFormat(new FormatElement[] {", "next_line": "      new TaskName(), StaticString.CONDITIONAL_WHITESPACE,", "gold_snippet_index": 7, "id": 5, "__internal_uuid__": "3e3c7817-6480-43f4-82f0-46e20f6dcb8a"}
{"repo_name": "youth5201314/banner", "file_path": "app/src/main/java/com/test/banner/MainActivity.java", "context": "[{\"identifier\":\"ImageAdapter\", \"path\":\"app/src/main/java/com/test/banner/adapter/ImageAdapter.java\", \"snippet\":\"public class ImageAdapter extends BannerAdapter<DataBean, ImageHolder> {\\n\\n    public ImageAdapter(List<DataBean> mDatas) {\\n        //设置数据，也可以调用banner提供的方法,或者自己在adapter中实现\\n        super(mDatas);\\n    }\\n\\n    //更新数据\\n    public void updateData(List<DataBean> data) {\\n        //这里的代码自己发挥，比如如下的写法等等\\n        mDatas.clear();\\n        mDatas.addAll(data);\\n        notifyDataSetChanged();\\n    }\\n\\n\\n    //创建ViewHolder，可以用viewType这个字段来区分不同的ViewHolder\\n    @Override\\n    public ImageHolder onCreateHolder(ViewGroup parent, int viewType) {\\n        ImageView imageView = new ImageView(parent.getContext());\\n        //注意，必须设置为match_parent，这个是viewpager2强制要求的\\n        ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(\\n                ViewGroup.LayoutParams.MATCH_PARENT,\\n                ViewGroup.LayoutParams.MATCH_PARENT);\\n        imageView.setLayoutParams(params);\\n        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\\n        return new ImageHolder(imageView);\\n    }\\n\\n    @Override\\n    public void onBindView(ImageHolder holder, DataBean data, int position, int size) {\\n        holder.imageView.setImageResource(data.imageRes);\\n    }\\n\\n}\"}, {\"identifier\":\"ImageTitleAdapter\", \"path\":\"app/src/main/java/com/test/banner/adapter/ImageTitleAdapter.java\", \"snippet\":\"public class ImageTitleAdapter extends BannerAdapter<DataBean, ImageTitleHolder> {\\n\\n    public ImageTitleAdapter(List<DataBean> mDatas) {\\n        super(mDatas);\\n    }\\n\\n    @Override\\n    public ImageTitleHolder onCreateHolder(ViewGroup parent, int viewType) {\\n        return new ImageTitleHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.banner_image_title, parent, false));\\n    }\\n\\n    @Override\\n    public void onBindView(ImageTitleHolder holder, DataBean data, int position, int size) {\\n        holder.imageView.setImageResource(data.imageRes);\\n        holder.title.setText(data.title);\\n    }\\n\\n}\"}, {\"identifier\":\"ImageTitleNumAdapter\", \"path\":\"app/src/main/java/com/test/banner/adapter/ImageTitleNumAdapter.java\", \"snippet\":\"public class ImageTitleNumAdapter extends BannerAdapter<DataBean, ImageTitleNumAdapter.BannerViewHolder> {\\n\\n    public ImageTitleNumAdapter(List<DataBean> mDatas) {\\n        //设置数据，也可以调用banner提供的方法\\n        super(mDatas);\\n    }\\n\\n    //创建ViewHolder，可以用viewType这个字段来区分不同的ViewHolder\\n    @Override\\n    public BannerViewHolder onCreateHolder(ViewGroup parent, int viewType) {\\n        //注意布局文件，item布局文件要设置为match_parent，这个是viewpager2强制要求的\\n        //或者调用BannerUtils.getView(parent,R.layout.banner_image_title_num);\\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.banner_image_title_num, parent, false);\\n        return new BannerViewHolder(view);\\n    }\\n\\n    //绑定数据\\n    @Override\\n    public void onBindView(BannerViewHolder holder, DataBean data, int position, int size) {\\n        holder.imageView.setImageResource(data.imageRes);\\n        holder.title.setText(data.title);\\n        //可以在布局文件中自己实现指示器，亦可以使用banner提供的方法自定义指示器，目前样式较少，后面补充\\n        holder.numIndicator.setText((position + 1) + \\\"/\\\" + size);\\n    }\\n\\n\\n    class BannerViewHolder extends RecyclerView.ViewHolder {\\n        ImageView imageView;\\n        TextView title;\\n        TextView numIndicator;\\n\\n        public BannerViewHolder(@NonNull View view) {\\n            super(view);\\n            imageView = view.findViewById(R.id.image);\\n            title = view.findViewById(R.id.bannerTitle);\\n            numIndicator = view.findViewById(R.id.numIndicator);\\n        }\\n    }\\n\\n}\"}, {\"identifier\":\"MultipleTypesAdapter\", \"path\":\"app/src/main/java/com/test/banner/adapter/MultipleTypesAdapter.java\", \"snippet\":\"public class MultipleTypesAdapter extends BannerAdapter<DataBean, RecyclerView.ViewHolder> {\\n    private Context context;\\n    private SparseArray<RecyclerView.ViewHolder> mVHMap = new SparseArray<>();\\n\\n    public MultipleTypesAdapter(Context context, List<DataBean> mDatas) {\\n        super(mDatas);\\n        this.context = context;\\n    }\\n\\n    @Override\\n    public RecyclerView.ViewHolder onCreateHolder(ViewGroup parent, int viewType) {\\n        switch (viewType) {\\n            case 1:\\n                return new ImageHolder(BannerUtils.getView(parent, R.layout.banner_image));\\n            case 2:\\n                return new VideoHolder(BannerUtils.getView(parent, R.layout.banner_video));\\n            case 3:\\n                return new TitleHolder(BannerUtils.getView(parent, R.layout.banner_title));\\n        }\\n        return new ImageHolder(BannerUtils.getView(parent, R.layout.banner_image));\\n    }\\n\\n    @Override\\n    public int getItemViewType(int position) {\\n        //先取得真实的position,在获取实体\\n//        return getData(getRealPosition(position)).viewType;\\n        //直接获取真实的实体\\n        return getRealData(position).viewType;\\n        //或者自己直接去操作集合\\n//        return mDatas.get(getRealPosition(position)).viewType;\\n    }\\n\\n    @Override\\n    public void onBindView(RecyclerView.ViewHolder holder, DataBean data, int position, int size) {\\n        int viewType = holder.getItemViewType();\\n        switch (viewType) {\\n            case 1:\\n                ImageHolder imageHolder = (ImageHolder) holder;\\n                mVHMap.append(position,imageHolder);\\n                imageHolder.imageView.setImageResource(data.imageRes);\\n                break;\\n            case 2:\\n                VideoHolder videoHolder = (VideoHolder) holder;\\n                mVHMap.append(position,videoHolder);\\n                videoHolder.player.setUp(data.imageUrl, true, null);\\n                videoHolder.player.getBackButton().setVisibility(View.GONE);\\n                //增加封面\\n                ImageView imageView = new ImageView(context);\\n                imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\\n                imageView.setImageResource(R.drawable.image4);\\n                videoHolder.player.setThumbImageView(imageView);\\n//                videoHolder.player.startPlayLogic();\\n                break;\\n            case 3:\\n                TitleHolder titleHolder = (TitleHolder) holder;\\n                mVHMap.append(position,titleHolder);\\n                titleHolder.title.setText(data.title);\\n                titleHolder.title.setBackgroundColor(Color.parseColor(DataBean.getRandColor()));\\n                break;\\n        }\\n    }\\n\\n    public SparseArray<RecyclerView.ViewHolder> getVHMap() {\\n        return mVHMap;\\n    }\\n\\n\\n}\"}, {\"identifier\":\"DataBean\", \"path\":\"app/src/main/java/com/test/banner/bean/DataBean.java\", \"snippet\":\"public class DataBean {\\n    public Integer imageRes;\\n    public String imageUrl;\\n    public String title;\\n    public int viewType;\\n\\n    public DataBean(Integer imageRes, String title, int viewType) {\\n        this.imageRes = imageRes;\\n        this.title = title;\\n        this.viewType = viewType;\\n    }\\n\\n    public DataBean(String imageUrl, String title, int viewType) {\\n        this.imageUrl = imageUrl;\\n        this.title = title;\\n        this.viewType = viewType;\\n    }\\n\\n    public static List<DataBean> getTestData() {\\n        List<DataBean> list = new ArrayList<>();\\n        list.add(new DataBean(R.drawable.image1, \\\"相信自己,你努力的样子真的很美\\\", 1));\\n        list.add(new DataBean(R.drawable.image2, \\\"极致简约,梦幻小屋\\\", 3));\\n        list.add(new DataBean(R.drawable.image3, \\\"超级卖梦人\\\", 3));\\n        list.add(new DataBean(R.drawable.image4, \\\"夏季新搭配\\\", 1));\\n        list.add(new DataBean(R.drawable.image5, \\\"绝美风格搭配\\\", 1));\\n        list.add(new DataBean(R.drawable.image6, \\\"微微一笑 很倾城\\\", 3));\\n        return list;\\n    }\\n\\n    public static List<DataBean> getTestData2() {\\n        List<DataBean> list = new ArrayList<>();\\n        list.add(new DataBean(R.drawable.image7, \\\"听风.赏雨\\\", 3));\\n        list.add(new DataBean(R.drawable.image8, \\\"迪丽热巴.迪力木拉提\\\", 1));\\n        list.add(new DataBean(R.drawable.image9, \\\"爱美.人间有之\\\", 3));\\n        list.add(new DataBean(R.drawable.image10, \\\"洋洋洋.气质篇\\\", 1));\\n        list.add(new DataBean(R.drawable.image11, \\\"生活的态度\\\", 3));\\n        return list;\\n    }\\n\\n    /**\\n     * 仿淘宝商品详情第一个是视频\\n     * @return\\n     */\\n    public static List<DataBean> getTestDataVideo() {\\n        List<DataBean> list = new ArrayList<>();\\n        list.add(new DataBean(\\\"http://vfx.mtime.cn/Video/2019/03/09/mp4/190309153658147087.mp4\\\", \\\"第一个放视频\\\", 2));\\n        list.add(new DataBean(R.drawable.image7, \\\"听风.赏雨\\\", 1));\\n        list.add(new DataBean(R.drawable.image8, \\\"迪丽热巴.迪力木拉提\\\", 1));\\n        list.add(new DataBean(R.drawable.image9, \\\"爱美.人间有之\\\", 1));\\n        list.add(new DataBean(R.drawable.image10, \\\"洋洋洋.气质篇\\\", 1));\\n        list.add(new DataBean(R.drawable.image11, \\\"生活的态度\\\", 1));\\n        return list;\\n    }\\n\\n    public static List<DataBean> getTestData3() {\\n        List<DataBean> list = new ArrayList<>();\\n        list.add(new DataBean(\\\"https://img.zcool.cn/community/013de756fb63036ac7257948747896.jpg\\\", null, 1));\\n        list.add(new DataBean(\\\"https://img.zcool.cn/community/01639a56fb62ff6ac725794891960d.jpg\\\", null, 1));\\n        list.add(new DataBean(\\\"https://img.zcool.cn/community/01270156fb62fd6ac72579485aa893.jpg\\\", null, 1));\\n        list.add(new DataBean(\\\"https://img.zcool.cn/community/01233056fb62fe32f875a9447400e1.jpg\\\", null, 1));\\n        list.add(new DataBean(\\\"https://img.zcool.cn/community/016a2256fb63006ac7257948f83349.jpg\\\", null, 1));\\n        return list;\\n    }\\n\\n    public static List<DataBean> getVideos() {\\n        List<DataBean> list = new ArrayList<>();\\n        list.add(new DataBean(\\\"http://vfx.mtime.cn/Video/2019/03/21/mp4/190321153853126488.mp4\\\", null, 0));\\n        list.add(new DataBean(\\\"http://vfx.mtime.cn/Video/2019/03/18/mp4/190318231014076505.mp4\\\", null, 0));\\n        list.add(new DataBean(\\\"http://vfx.mtime.cn/Video/2019/03/18/mp4/190318214226685784.mp4\\\", null, 0));\\n        list.add(new DataBean(\\\"http://vfx.mtime.cn/Video/2019/03/19/mp4/190319125415785691.mp4\\\", null, 0));\\n        list.add(new DataBean(\\\"http://vfx.mtime.cn/Video/2019/03/14/mp4/190314223540373995.mp4\\\", null, 0));\\n        list.add(new DataBean(\\\"http://vfx.mtime.cn/Video/2019/03/14/mp4/190314102306987969.mp4\\\", null, 0));\\n        return list;\\n    }\\n\\n\\n    public static List<String> getColors(int size) {\\n        List<String> list = new ArrayList<>();\\n        for(int i = 0; i < size; i++) {\\n            list.add(getRandColor());\\n        }\\n        return list;\\n    }\\n\\n    /**\\n     * 获取十六进制的颜色代码.例如  \\\"#5A6677\\\"\\n     * 分别取R、G、B的随机值，然后加起来即可\\n     *\\n     * @return String\\n     */\\n    public static String getRandColor() {\\n        String R, G, B;\\n        Random random = new Random();\\n        R = Integer.toHexString(random.nextInt(256)).toUpperCase();\\n        G = Integer.toHexString(random.nextInt(256)).toUpperCase();\\n        B = Integer.toHexString(random.nextInt(256)).toUpperCase();\\n\\n        R = R.length() == 1 ? \\\"0\\\" + R : R;\\n        G = G.length() == 1 ? \\\"0\\\" + G : G;\\n        B = B.length() == 1 ? \\\"0\\\" + B : B;\\n\\n        return \\\"#\\\" + R + G + B;\\n    }\\n}\"}, {\"identifier\":\"DrawableIndicator\", \"path\":\"banner/src/main/java/com/youth/banner/indicator/DrawableIndicator.java\", \"snippet\":\"public class DrawableIndicator extends BaseIndicator {\\n    private Bitmap normalBitmap;\\n    private Bitmap selectedBitmap;\\n\\n    /**\\n     * 实例化Drawable指示器 ，也可以通过自定义属性设置\\n     * @param context\\n     * @param normalResId\\n     * @param selectedResId\\n     */\\n    public DrawableIndicator(Context context, @DrawableRes int normalResId, @DrawableRes int selectedResId) {\\n        super(context);\\n        normalBitmap = BitmapFactory.decodeResource(getResources(), normalResId);\\n        selectedBitmap = BitmapFactory.decodeResource(getResources(), selectedResId);\\n    }\\n\\n    public DrawableIndicator(Context context) {\\n        this(context, null);\\n    }\\n\\n    public DrawableIndicator(Context context, AttributeSet attrs) {\\n        this(context, attrs, 0);\\n    }\\n\\n    public DrawableIndicator(Context context, AttributeSet attrs, int defStyleAttr) {\\n        super(context, attrs, defStyleAttr);\\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.DrawableIndicator);\\n        if (a != null) {\\n            BitmapDrawable normal = (BitmapDrawable) a.getDrawable(R.styleable.DrawableIndicator_normal_drawable);\\n            BitmapDrawable selected = (BitmapDrawable) a.getDrawable(R.styleable.DrawableIndicator_selected_drawable);\\n            normalBitmap = normal.getBitmap();\\n            selectedBitmap = selected.getBitmap();\\n        }\\n    }\\n\\n    @Override\\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\\n        int count = config.getIndicatorSize();\\n        if (count <= 1) {\\n            return;\\n        }\\n        setMeasuredDimension(selectedBitmap.getWidth() * (count - 1) + selectedBitmap.getWidth() + config.getIndicatorSpace() * (count - 1),\\n                Math.max(normalBitmap.getHeight(), selectedBitmap.getHeight()));\\n    }\\n\\n    @Override\\n    protected void onDraw(Canvas canvas) {\\n        super.onDraw(canvas);\\n        int count = config.getIndicatorSize();\\n        if (count <= 1 || normalBitmap == null || selectedBitmap == null) {\\n            return;\\n        }\\n\\n        float left = 0;\\n        for (int i = 0; i < count; i++) {\\n            canvas.drawBitmap(config.getCurrentPosition() == i ? selectedBitmap : normalBitmap, left, 0, mPaint);\\n            left += normalBitmap.getWidth() + config.getIndicatorSpace();\\n        }\\n    }\\n\\n\\n}\"}, {\"identifier\":\"ConstraintLayoutBannerActivity\", \"path\":\"app/src/main/java/com/test/banner/ui/ConstraintLayoutBannerActivity.java\", \"snippet\":\"public class ConstraintLayoutBannerActivity extends AppCompatActivity {\\n    private static final String TAG = \\\"banner_log\\\";\\n    @BindView(R.id.banner)\\n    Banner banner;\\n\\n    @Override\\n    protected void onCreate(Bundle savedInstanceState) {\\n        super.onCreate(savedInstanceState);\\n        setContentView(R.layout.activity_constraint_layout_banner);\\n        ButterKnife.bind(this);\\n        banner.setAdapter(new ImageTitleAdapter(DataBean.getTestData()));\\n        banner.setIndicator(new CircleIndicator(this));\\n        banner.setIndicatorSelectedColorRes(R.color.main_color);\\n        banner.setIndicatorGravity(IndicatorConfig.Direction.RIGHT);\\n        banner.setIndicatorMargins(new IndicatorConfig.Margins(0, 0,\\n                BannerConfig.INDICATOR_MARGIN, (int) BannerUtils.dp2px(12)));\\n        banner.addBannerLifecycleObserver(this);\\n    }\\n\\n}\"}, {\"identifier\":\"GalleryActivity\", \"path\":\"app/src/main/java/com/test/banner/ui/GalleryActivity.java\", \"snippet\":\"public class GalleryActivity extends AppCompatActivity {\\n\\n    @BindView(R.id.banner1)\\n    Banner mBanner1;\\n    @BindView(R.id.banner2)\\n    Banner mBanner2;\\n    @BindView(R.id.indicator)\\n    DrawableIndicator indicator;\\n\\n    @Override\\n    protected void onCreate(Bundle savedInstanceState) {\\n        super.onCreate(savedInstanceState);\\n        setContentView(R.layout.activity_gallery);\\n        ButterKnife.bind(this);\\n\\n        /**\\n         * 画廊效果\\n         */\\n        mBanner1.setAdapter(new ImageAdapter(DataBean.getTestData2()));\\n        mBanner1.setIndicator(new CircleIndicator(this));\\n        //添加画廊效果\\n        mBanner1.setBannerGalleryEffect(50, 10);\\n        //(可以和其他PageTransformer组合使用，比如AlphaPageTransformer，注意但和其他带有缩放的PageTransformer会显示冲突)\\n        //添加透明效果(画廊配合透明效果更棒)\\n        //mBanner1.addPageTransformer(new AlphaPageTransformer());\\n\\n\\n        /**\\n         * 魅族效果\\n         */\\n        mBanner2.setAdapter(new ImageAdapter(DataBean.getTestData()));\\n        mBanner2.setIndicator(indicator,false);\\n        //添加魅族效果\\n        mBanner2.setBannerGalleryMZ(20);\\n\\n\\n\\n    }\\n\\n\\n}\"}, {\"identifier\":\"RecyclerViewBannerActivity\", \"path\":\"app/src/main/java/com/test/banner/ui/RecyclerViewBannerActivity.java\", \"snippet\":\"public class RecyclerViewBannerActivity extends AppCompatActivity {\\n    @BindView(R.id.net_rv)\\n    RecyclerView recyclerView;\\n\\n    @Override\\n    protected void onCreate(Bundle savedInstanceState) {\\n        super.onCreate(savedInstanceState);\\n        setContentView(R.layout.activity_recyclerview_banner);\\n        ButterKnife.bind(this);\\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\\n        recyclerView.setAdapter(new MyRecyclerViewAdapter(this));\\n    }\\n\\n}\"}, {\"identifier\":\"TVActivity\", \"path\":\"app/src/main/java/com/test/banner/ui/TVActivity.java\", \"snippet\":\"public class TVActivity extends AppCompatActivity {\\n\\n    private static final String TAG = \\\"banner_log\\\";\\n    @BindView(R.id.banner)\\n    Banner banner;\\n\\n    @Override\\n    protected void onCreate(Bundle savedInstanceState) {\\n        super.onCreate(savedInstanceState);\\n        setContentView(R.layout.activity_t_v);\\n        ButterKnife.bind(this);\\n        banner.setAdapter(new ImageAdapter(DataBean.getTestData()));\\n        banner.setIndicator(new CircleIndicator(this));\\n        banner.isAutoLoop(false);\\n    }\\n\\n    @Override\\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\\n        int count = banner.getItemCount();\\n        switch (keyCode) {\\n            case KeyEvent.KEYCODE_DPAD_LEFT:\\n                Log.d(TAG, \\\"向左\\\");\\n                int prev = (banner.getCurrentItem() - 1) % count;\\n                if (prev == 0) {\\n                    prev = banner.getRealCount();\\n                } else if (prev == count - 1) {\\n                    prev = 1;\\n                }\\n                banner.setCurrentItem(prev, false);\\n                break;\\n            case KeyEvent.KEYCODE_DPAD_RIGHT:\\n                Log.d(TAG, \\\"向右\\\");\\n                int next = (banner.getCurrentItem() + 1) % count;\\n                if (next == 0) {\\n                    next = banner.getRealCount();\\n                } else if (next == count - 1) {\\n                    next = 1;\\n                }\\n                banner.setCurrentItem(next, false);\\n                break;\\n        }\\n        //如果没有设置指示器，就不用执行下面两行\\n        int real = BannerUtils.getRealPosition(banner.isInfiniteLoop(), banner.getCurrentItem(), banner.getRealCount());\\n        banner.getIndicator().onPageSelected(real);\\n        return super.onKeyDown(keyCode, event);\\n    }\\n\\n}\"}, {\"identifier\":\"TouTiaoActivity\", \"path\":\"app/src/main/java/com/test/banner/ui/TouTiaoActivity.java\", \"snippet\":\"public class TouTiaoActivity extends AppCompatActivity {\\n    @BindView(R.id.banner)\\n    Banner banner;\\n\\n    @Override\\n    protected void onCreate(Bundle savedInstanceState) {\\n        super.onCreate(savedInstanceState);\\n        setContentView(R.layout.activity_tou_tiao);\\n        ButterKnife.bind(this);\\n\\n        //实现1号店和淘宝头条类似的效果\\n        banner.setAdapter(new TopLineAdapter(DataBean.getTestData2()))\\n               .setOrientation(Banner.VERTICAL)\\n               .setPageTransformer(new ZoomOutPageTransformer())\\n               .setOnBannerListener((data, position) -> {\\n                   Snackbar.make(banner, ((DataBean) data).title, Snackbar.LENGTH_SHORT).show();\\n                   LogUtils.d(\\\"position：\\\" + position);\\n               });\\n\\n    }\\n}\"}, {\"identifier\":\"VideoActivity\", \"path\":\"app/src/main/java/com/test/banner/ui/VideoActivity.java\", \"snippet\":\"public class VideoActivity extends AppCompatActivity {\\n    @BindView(R.id.banner)\\n    Banner banner;\\n    StandardGSYVideoPlayer player;\\n\\n    @Override\\n    protected void onCreate(Bundle savedInstanceState) {\\n        super.onCreate(savedInstanceState);\\n        setContentView(R.layout.activity_video);\\n        ButterKnife.bind(this);\\n\\n        banner.addBannerLifecycleObserver(this)\\n                .setAdapter(new MultipleTypesAdapter(this, DataBean.getTestDataVideo()))\\n                .setIndicator(new NumIndicator(this))\\n                .setIndicatorGravity(IndicatorConfig.Direction.RIGHT)\\n                .addOnPageChangeListener(new OnPageChangeListener() {\\n                    @Override\\n                    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\\n                        stopVideo(position);\\n                    }\\n\\n                    @Override\\n                    public void onPageSelected(int position) {\\n                        Log.e(\\\"--\\\",\\\"position:\\\"+position);\\n                        stopVideo(position);\\n                    }\\n\\n                    @Override\\n                    public void onPageScrollStateChanged(int state) {\\n\\n                    }\\n                });\\n    }\\n\\n    private void stopVideo(int position) {\\n        if (player == null) {\\n            RecyclerView.ViewHolder viewHolder = banner.getAdapter().getViewHolder();\\n            if (viewHolder instanceof VideoHolder) {\\n                VideoHolder holder = (VideoHolder) viewHolder;\\n                player = holder.player;\\n                if (position != 0) {\\n                    player.onVideoPause();\\n                }\\n            }\\n        }else {\\n            if (position != 0) {\\n                player.onVideoPause();\\n            }\\n        }\\n    }\\n\\n    @Override\\n    protected void onPause() {\\n        super.onPause();\\n        if (player != null)\\n            player.onVideoPause();\\n    }\\n\\n    @Override\\n    protected void onResume() {\\n        super.onResume();\\n        if (player != null)\\n            player.onVideoResume();\\n    }\\n\\n    @Override\\n    protected void onDestroy() {\\n        super.onDestroy();\\n        GSYVideoManager.releaseAllVideos();\\n    }\\n\\n    @Override\\n    public void onBackPressed() {\\n        //释放所有\\n        if (player != null)\\n            player.setVideoAllCallBack(null);\\n        super.onBackPressed();\\n    }\\n\\n}\"}, {\"identifier\":\"Vp2FragmentRecyclerviewActivity\", \"path\":\"app/src/main/java/com/test/banner/ui/Vp2FragmentRecyclerviewActivity.java\", \"snippet\":\"public class Vp2FragmentRecyclerviewActivity extends AppCompatActivity {\\n\\n    @BindView(R.id.vp2)\\n    ViewPager2 viewPager2;\\n    @BindView(R.id.tab_layout)\\n    TabLayout mTabLayout;\\n    @BindView(R.id.banner)\\n    Banner mBanner;\\n\\n    @Override\\n    protected void onCreate(Bundle savedInstanceState) {\\n        super.onCreate(savedInstanceState);\\n        setContentView(R.layout.activity_vp2_fragment_recyclerview);\\n        ButterKnife.bind(this);\\n\\n        viewPager2.setAdapter(new FragmentStateAdapter(this) {\\n            @NonNull\\n            @Override\\n            public Fragment createFragment(int position) {\\n                if (position == 0) {\\n                    return BannerListFragment.newInstance(position);\\n                } else if (position == 1) {\\n                    return BlankFragment.newInstance();\\n                } else {\\n                    return BannerFragment.newInstance();\\n                }\\n            }\\n\\n            @Override\\n            public int getItemCount() {\\n                return 3;\\n            }\\n        });\\n\\n        new TabLayoutMediator(mTabLayout, viewPager2, (tab, position) -> {\\n            tab.setText(\\\"页面\\\" + position);\\n        }).attach();\\n\\n\\n        mBanner.addBannerLifecycleObserver(this)\\n               .setAdapter(new ImageAdapter(DataBean.getTestData()))\\n               .setIntercept(false)\\n               .setIndicator(new CircleIndicator(this));\\n    }\\n}\"}, {\"identifier\":\"Banner\", \"path\":\"banner/src/main/java/com/youth/banner/Banner.java\", \"snippet\":\"public class Banner<T, BA extends BannerAdapter<T, ? extends RecyclerView.ViewHolder>> extends FrameLayout implements BannerLifecycleObserver {\\n    public static final int INVALID_VALUE = -1;\\n    private ViewPager2 mViewPager2;\\n    private AutoLoopTask mLoopTask;\\n    private OnPageChangeListener mOnPageChangeListener;\\n    private BA mAdapter;\\n    private Indicator mIndicator;\\n    private CompositePageTransformer mCompositePageTransformer;\\n    private BannerOnPageChangeCallback mPageChangeCallback;\\n\\n    // 是否允许无限轮播（即首尾直接切换）\\n    private boolean mIsInfiniteLoop = BannerConfig.IS_INFINITE_LOOP;\\n    // 是否自动轮播\\n    private boolean mIsAutoLoop = BannerConfig.IS_AUTO_LOOP;\\n    // 轮播切换间隔时间\\n    private long mLoopTime = BannerConfig.LOOP_TIME;\\n    // 轮播切换时间\\n    private int mScrollTime = BannerConfig.SCROLL_TIME;\\n    // 轮播开始位置\\n    private int mStartPosition = 1;\\n    // banner圆角半径，默认没有圆角\\n    private float mBannerRadius = 0;\\n    // banner圆角方向，如果一个都不设置，默认四个角全部圆角\\n    private boolean mRoundTopLeft, mRoundTopRight, mRoundBottomLeft, mRoundBottomRight;\\n\\n    // 指示器相关配置\\n    private int normalWidth = BannerConfig.INDICATOR_NORMAL_WIDTH;\\n    private int selectedWidth = BannerConfig.INDICATOR_SELECTED_WIDTH;\\n    private int normalColor = BannerConfig.INDICATOR_NORMAL_COLOR;\\n    private int selectedColor = BannerConfig.INDICATOR_SELECTED_COLOR;\\n    private int indicatorGravity = IndicatorConfig.Direction.CENTER;\\n    private int indicatorSpace;\\n    private int indicatorMargin;\\n    private int indicatorMarginLeft;\\n    private int indicatorMarginTop;\\n    private int indicatorMarginRight;\\n    private int indicatorMarginBottom;\\n    private int indicatorHeight = BannerConfig.INDICATOR_HEIGHT;\\n    private int indicatorRadius = BannerConfig.INDICATOR_RADIUS;\\n\\n    public static final int HORIZONTAL = 0;\\n    public static final int VERTICAL = 1;\\n    private int mOrientation = HORIZONTAL;\\n\\n    // 滑动距离范围\\n    private int mTouchSlop;\\n    // 记录触摸的位置（主要用于解决事件冲突问题）\\n    private float mStartX, mStartY;\\n    // 记录viewpager2是否被拖动\\n    private boolean mIsViewPager2Drag;\\n    // 是否要拦截事件\\n    private boolean isIntercept = true;\\n\\n    //绘制圆角视图\\n    private Paint mRoundPaint;\\n    private Paint mImagePaint;\\n\\n    @Retention(SOURCE)\\n    @IntDef( {HORIZONTAL, VERTICAL})\\n    public @interface Orientation {\\n    }\\n\\n    public Banner(Context context) {\\n        this(context, null);\\n    }\\n\\n    public Banner(Context context, AttributeSet attrs) {\\n        this(context, attrs, 0);\\n    }\\n\\n    public Banner(Context context, AttributeSet attrs, int defStyleAttr) {\\n        super(context, attrs, defStyleAttr);\\n        init(context);\\n        initTypedArray(context, attrs);\\n    }\\n\\n    private void init(Context context) {\\n        mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop() / 2;\\n        mCompositePageTransformer = new CompositePageTransformer();\\n        mPageChangeCallback = new BannerOnPageChangeCallback();\\n        mLoopTask = new AutoLoopTask(this);\\n        mViewPager2 = new ViewPager2(context);\\n        mViewPager2.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));\\n        mViewPager2.setOffscreenPageLimit(2);\\n        mViewPager2.registerOnPageChangeCallback(mPageChangeCallback);\\n        mViewPager2.setPageTransformer(mCompositePageTransformer);\\n        ScrollSpeedManger.reflectLayoutManager(this);\\n        addView(mViewPager2);\\n\\n        mRoundPaint = new Paint();\\n        mRoundPaint.setColor(Color.WHITE);\\n        mRoundPaint.setAntiAlias(true);\\n        mRoundPaint.setStyle(Paint.Style.FILL);\\n        mRoundPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));\\n        mImagePaint = new Paint();\\n        mImagePaint.setXfermode(null);\\n    }\\n\\n    private void initTypedArray(Context context, AttributeSet attrs) {\\n        if (attrs != null) {\\n            TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.Banner);\\n            mBannerRadius = a.getDimensionPixelSize(R.styleable.Banner_banner_radius, 0);\\n            mLoopTime = a.getInt(R.styleable.Banner_banner_loop_time, BannerConfig.LOOP_TIME);\\n            mIsAutoLoop = a.getBoolean(R.styleable.Banner_banner_auto_loop, BannerConfig.IS_AUTO_LOOP);\\n            mIsInfiniteLoop = a.getBoolean(R.styleable.Banner_banner_infinite_loop, BannerConfig.IS_INFINITE_LOOP);\\n            normalWidth = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_normal_width, BannerConfig.INDICATOR_NORMAL_WIDTH);\\n            selectedWidth = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_selected_width, BannerConfig.INDICATOR_SELECTED_WIDTH);\\n            normalColor = a.getColor(R.styleable.Banner_banner_indicator_normal_color, BannerConfig.INDICATOR_NORMAL_COLOR);\\n            selectedColor = a.getColor(R.styleable.Banner_banner_indicator_selected_color, BannerConfig.INDICATOR_SELECTED_COLOR);\\n            indicatorGravity = a.getInt(R.styleable.Banner_banner_indicator_gravity, IndicatorConfig.Direction.CENTER);\\n            indicatorSpace = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_space, 0);\\n            indicatorMargin = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_margin, 0);\\n            indicatorMarginLeft = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_marginLeft, 0);\\n            indicatorMarginTop = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_marginTop, 0);\\n            indicatorMarginRight = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_marginRight, 0);\\n            indicatorMarginBottom = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_marginBottom, 0);\\n            indicatorHeight = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_height, BannerConfig.INDICATOR_HEIGHT);\\n            indicatorRadius = a.getDimensionPixelSize(R.styleable.Banner_banner_indicator_radius, BannerConfig.INDICATOR_RADIUS);\\n            mOrientation = a.getInt(R.styleable.Banner_banner_orientation, HORIZONTAL);\\n            mRoundTopLeft = a.getBoolean(R.styleable.Banner_banner_round_top_left, false);\\n            mRoundTopRight = a.getBoolean(R.styleable.Banner_banner_round_top_right, false);\\n            mRoundBottomLeft = a.getBoolean(R.styleable.Banner_banner_round_bottom_left, false);\\n            mRoundBottomRight = a.getBoolean(R.styleable.Banner_banner_round_bottom_right, false);\\n            a.recycle();\\n        }\\n        setOrientation(mOrientation);\\n        setInfiniteLoop();\\n    }\\n\\n    private void initIndicatorAttr() {\\n        if (indicatorMargin != 0) {\\n            setIndicatorMargins(new IndicatorConfig.Margins(indicatorMargin));\\n        } else if (indicatorMarginLeft != 0\\n                || indicatorMarginTop != 0\\n                || indicatorMarginRight != 0\\n                || indicatorMarginBottom != 0) {\\n            setIndicatorMargins(new IndicatorConfig.Margins(\\n                    indicatorMarginLeft,\\n                    indicatorMarginTop,\\n                    indicatorMarginRight,\\n                    indicatorMarginBottom));\\n        }\\n        if (indicatorSpace > 0) {\\n            setIndicatorSpace(indicatorSpace);\\n        }\\n        if (indicatorGravity != IndicatorConfig.Direction.CENTER) {\\n            setIndicatorGravity(indicatorGravity);\\n        }\\n        if (normalWidth > 0) {\\n            setIndicatorNormalWidth(normalWidth);\\n        }\\n        if (selectedWidth > 0) {\\n            setIndicatorSelectedWidth(selectedWidth);\\n        }\\n\\n        if (indicatorHeight > 0) {\\n            setIndicatorHeight(indicatorHeight);\\n        }\\n        if (indicatorRadius > 0) {\\n            setIndicatorRadius(indicatorRadius);\\n        }\\n        setIndicatorNormalColor(normalColor);\\n        setIndicatorSelectedColor(selectedColor);\\n    }\\n\\n    @Override\\n    public boolean dispatchTouchEvent(MotionEvent ev) {\\n        if (!getViewPager2().isUserInputEnabled()) {\\n            return super.dispatchTouchEvent(ev);\\n        }\\n\\n        int action = ev.getActionMasked();\\n        if (action == MotionEvent.ACTION_UP\\n                || action == MotionEvent.ACTION_CANCEL\\n                || action == MotionEvent.ACTION_OUTSIDE) {\\n            start();\\n        } else if (action == MotionEvent.ACTION_DOWN) {\\n            stop();\\n        }\\n        return super.dispatchTouchEvent(ev);\\n    }\\n\\n    @Override\\n    public boolean onInterceptTouchEvent(MotionEvent event) {\\n        if (!getViewPager2().isUserInputEnabled() || !isIntercept) {\\n            return super.onInterceptTouchEvent(event);\\n        }\\n        switch (event.getAction()) {\\n            case MotionEvent.ACTION_DOWN:\\n                mStartX = event.getX();\\n                mStartY = event.getY();\\n                getParent().requestDisallowInterceptTouchEvent(true);\\n                break;\\n            case MotionEvent.ACTION_MOVE:\\n                float endX = event.getX();\\n                float endY = event.getY();\\n                float distanceX = Math.abs(endX - mStartX);\\n                float distanceY = Math.abs(endY - mStartY);\\n                if (getViewPager2().getOrientation() == HORIZONTAL) {\\n                    mIsViewPager2Drag = distanceX > mTouchSlop && distanceX > distanceY;\\n                } else {\\n                    mIsViewPager2Drag = distanceY > mTouchSlop && distanceY > distanceX;\\n                }\\n                getParent().requestDisallowInterceptTouchEvent(mIsViewPager2Drag);\\n                break;\\n            case MotionEvent.ACTION_UP:\\n            case MotionEvent.ACTION_CANCEL:\\n                getParent().requestDisallowInterceptTouchEvent(false);\\n                break;\\n        }\\n        return super.onInterceptTouchEvent(event);\\n    }\\n\\n    @Override\\n    protected void dispatchDraw(Canvas canvas) {\\n        if (mBannerRadius > 0) {\\n            canvas.saveLayer(new RectF(0, 0, canvas.getWidth(), canvas.getHeight()), mImagePaint, Canvas.ALL_SAVE_FLAG);\\n            super.dispatchDraw(canvas);\\n            //绘制外圆环边框圆环\\n            //默认四个角都设置\\n            if (!mRoundTopRight && !mRoundTopLeft && !mRoundBottomRight && !mRoundBottomLeft) {\\n                drawTopLeft(canvas);\\n                drawTopRight(canvas);\\n                drawBottomLeft(canvas);\\n                drawBottomRight(canvas);\\n                canvas.restore();\\n                return;\\n            }\\n            if (mRoundTopLeft) {\\n                drawTopLeft(canvas);\\n            }\\n            if (mRoundTopRight) {\\n                drawTopRight(canvas);\\n            }\\n            if (mRoundBottomLeft) {\\n                drawBottomLeft(canvas);\\n            }\\n            if (mRoundBottomRight) {\\n                drawBottomRight(canvas);\\n            }\\n            canvas.restore();\\n        } else {\\n            super.dispatchDraw(canvas);\\n        }\\n    }\\n\\n    private void drawTopLeft(Canvas canvas) {\\n        Path path = new Path();\\n        path.moveTo(0, mBannerRadius);\\n        path.lineTo(0, 0);\\n        path.lineTo(mBannerRadius, 0);\\n        path.arcTo(new RectF(0, 0, mBannerRadius * 2, mBannerRadius * 2), -90, -90);\\n        path.close();\\n        canvas.drawPath(path, mRoundPaint);\\n    }\\n\\n    private void drawTopRight(Canvas canvas) {\\n        int width = getWidth();\\n        Path path = new Path();\\n        path.moveTo(width - mBannerRadius, 0);\\n        path.lineTo(width, 0);\\n        path.lineTo(width, mBannerRadius);\\n        path.arcTo(new RectF(width - 2 * mBannerRadius, 0, width, mBannerRadius * 2), 0, -90);\\n        path.close();\\n        canvas.drawPath(path, mRoundPaint);\\n    }\\n\\n    private void drawBottomLeft(Canvas canvas) {\\n        int height = getHeight();\\n        Path path = new Path();\\n        path.moveTo(0, height - mBannerRadius);\\n        path.lineTo(0, height);\\n        path.lineTo(mBannerRadius, height);\\n        path.arcTo(new RectF(0, height - 2 * mBannerRadius, mBannerRadius * 2, height), 90, 90);\\n        path.close();\\n        canvas.drawPath(path, mRoundPaint);\\n    }\\n\\n    private void drawBottomRight(Canvas canvas) {\\n        int height = getHeight();\\n        int width = getWidth();\\n        Path path = new Path();\\n        path.moveTo(width - mBannerRadius, height);\\n        path.lineTo(width, height);\\n        path.lineTo(width, height - mBannerRadius);\\n        path.arcTo(new RectF(width - 2 * mBannerRadius, height - 2 * mBannerRadius, width, height), 0, 90);\\n        path.close();\\n        canvas.drawPath(path, mRoundPaint);\\n    }\\n\\n    @Override\\n    protected void onAttachedToWindow() {\\n        super.onAttachedToWindow();\\n        start();\\n    }\\n\\n    @Override\\n    protected void onDetachedFromWindow() {\\n        super.onDetachedFromWindow();\\n        stop();\\n    }\\n\\n    class BannerOnPageChangeCallback extends ViewPager2.OnPageChangeCallback {\\n        private int mTempPosition = INVALID_VALUE;\\n        private boolean isScrolled;\\n\\n        @Override\\n        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\\n            int realPosition = BannerUtils.getRealPosition(isInfiniteLoop(), position, getRealCount());\\n            if (mOnPageChangeListener != null && realPosition == getCurrentItem() - 1) {\\n                mOnPageChangeListener.onPageScrolled(realPosition, positionOffset, positionOffsetPixels);\\n            }\\n            if (getIndicator() != null && realPosition == getCurrentItem() - 1) {\\n                getIndicator().onPageScrolled(realPosition, positionOffset, positionOffsetPixels);\\n            }\\n        }\\n\\n        @Override\\n        public void onPageSelected(int position) {\\n            if (isScrolled) {\\n                mTempPosition = position;\\n                int realPosition = BannerUtils.getRealPosition(isInfiniteLoop(), position, getRealCount());\\n                if (mOnPageChangeListener != null) {\\n                    mOnPageChangeListener.onPageSelected(realPosition);\\n                }\\n                if (getIndicator() != null) {\\n                    getIndicator().onPageSelected(realPosition);\\n                }\\n            }\\n        }\\n\\n        @Override\\n        public void onPageScrollStateChanged(int state) {\\n            //手势滑动中,代码执行滑动中\\n            if (state == ViewPager2.SCROLL_STATE_DRAGGING || state == ViewPager2.SCROLL_STATE_SETTLING) {\\n                isScrolled = true;\\n            } else if (state == ViewPager2.SCROLL_STATE_IDLE) {\\n                //滑动闲置或滑动结束\\n                isScrolled = false;\\n                if (mTempPosition != INVALID_VALUE && mIsInfiniteLoop) {\\n                    if (mTempPosition == 0) {\\n                        setCurrentItem(getRealCount(), false);\\n                    } else if (mTempPosition == getItemCount() - 1) {\\n                        setCurrentItem(1, false);\\n                    }\\n                }\\n            }\\n            if (mOnPageChangeListener != null) {\\n                mOnPageChangeListener.onPageScrollStateChanged(state);\\n            }\\n            if (getIndicator() != null) {\\n                getIndicator().onPageScrollStateChanged(state);\\n            }\\n        }\\n\\n    }\\n\\n    static class AutoLoopTask implements Runnable {\\n        private final WeakReference<Banner> reference;\\n\\n        AutoLoopTask(Banner banner) {\\n            this.reference = new WeakReference<>(banner);\\n        }\\n\\n        @Override\\n        public void run() {\\n            Banner banner = reference.get();\\n            if (banner != null && banner.mIsAutoLoop) {\\n                int count = banner.getItemCount();\\n                if (count == 0) {\\n                    return;\\n                }\\n                int next = (banner.getCurrentItem() + 1) % count;\\n                banner.setCurrentItem(next);\\n                banner.postDelayed(banner.mLoopTask, banner.mLoopTime);\\n            }\\n        }\\n    }\\n\\n    private final RecyclerView.AdapterDataObserver mAdapterDataObserver = new RecyclerView.AdapterDataObserver() {\\n        @Override\\n        public void onChanged() {\\n            if (getItemCount() <= 1) {\\n                stop();\\n            } else {\\n                start();\\n            }\\n            setIndicatorPageChange();\\n        }\\n    };\\n\\n    private void initIndicator() {\\n        if (getIndicator() == null || getAdapter() == null) {\\n            return;\\n        }\\n        if (getIndicator().getIndicatorConfig().isAttachToBanner()) {\\n            removeIndicator();\\n            addView(getIndicator().getIndicatorView());\\n        }\\n        initIndicatorAttr();\\n        setIndicatorPageChange();\\n    }\\n\\n    private void setInfiniteLoop() {\\n        // 当不支持无限循环时，要关闭自动轮播\\n        if (!isInfiniteLoop()) {\\n            isAutoLoop(false);\\n        }\\n        setStartPosition(isInfiniteLoop() ? mStartPosition : 0);\\n    }\\n\\n    private void setRecyclerViewPadding(int itemPadding) {\\n        setRecyclerViewPadding(itemPadding, itemPadding);\\n    }\\n\\n    private void setRecyclerViewPadding(int leftItemPadding, int rightItemPadding) {\\n        RecyclerView recyclerView = (RecyclerView) getViewPager2().getChildAt(0);\\n        if (getViewPager2().getOrientation() == ViewPager2.ORIENTATION_VERTICAL) {\\n            recyclerView.setPadding(mViewPager2.getPaddingLeft(), leftItemPadding, mViewPager2.getPaddingRight(), rightItemPadding);\\n        } else {\\n            recyclerView.setPadding(leftItemPadding, mViewPager2.getPaddingTop(), rightItemPadding, mViewPager2.getPaddingBottom());\\n        }\\n        recyclerView.setClipToPadding(false);\\n    }\\n\\n\\n    /**\\n     * **********************************************************************\\n     * ------------------------ 对外公开API ---------------------------------*\\n     * **********************************************************************\\n     */\\n\\n    public int getCurrentItem() {\\n        return getViewPager2().getCurrentItem();\\n    }\\n\\n    public int getItemCount() {\\n        if (getAdapter() != null) {\\n            return getAdapter().getItemCount();\\n        }\\n        return 0;\\n\\n    }\\n\\n    public int getScrollTime() {\\n        return mScrollTime;\\n    }\\n\\n    public boolean isInfiniteLoop() {\\n        return mIsInfiniteLoop;\\n    }\\n\\n    public BannerAdapter getAdapter() {\\n        return mAdapter;\\n    }\\n\\n    public ViewPager2 getViewPager2() {\\n        return mViewPager2;\\n    }\\n\\n    public Indicator getIndicator() {\\n        return mIndicator;\\n    }\\n\\n    public IndicatorConfig getIndicatorConfig() {\\n        if (getIndicator() != null) {\\n            return getIndicator().getIndicatorConfig();\\n        }\\n        return null;\\n    }\\n\\n    /**\\n     * 返回banner真实总数\\n     */\\n    public int getRealCount() {\\n        if (getAdapter() != null) {\\n            return getAdapter().getRealCount();\\n        }\\n        return 0;\\n\\n    }\\n\\n    //-----------------------------------------------------------------------------------------\\n\\n    /**\\n     * 是否要拦截事件\\n     * @param intercept\\n     * @return\\n     */\\n    public Banner setIntercept(boolean intercept) {\\n        isIntercept = intercept;\\n        return this;\\n    }\\n\\n    /**\\n     * 跳转到指定位置（最好在设置了数据后在调用，不然没有意义）\\n     * @param position\\n     * @return\\n     */\\n    public Banner setCurrentItem(int position) {\\n        return setCurrentItem(position, true);\\n    }\\n\\n    /**\\n     * 跳转到指定位置（最好在设置了数据后在调用，不然没有意义）\\n     * @param position\\n     * @param smoothScroll\\n     * @return\\n     */\\n    public Banner setCurrentItem(int position, boolean smoothScroll) {\\n        getViewPager2().setCurrentItem(position, smoothScroll);\\n        return this;\\n    }\\n\\n    public Banner setIndicatorPageChange() {\\n        if (getIndicator() != null) {\\n            int realPosition = BannerUtils.getRealPosition(isInfiniteLoop(), getCurrentItem(), getRealCount());\\n            getIndicator().onPageChanged(getRealCount(), realPosition);\\n        }\\n        return this;\\n    }\\n\\n    public Banner removeIndicator() {\\n        if (getIndicator() != null) {\\n            removeView(getIndicator().getIndicatorView());\\n        }\\n        return this;\\n    }\\n\\n\\n    /**\\n     * 设置开始的位置 (需要在setAdapter或者setDatas之前调用才有效哦)\\n     */\\n    public Banner setStartPosition(int mStartPosition) {\\n        this.mStartPosition = mStartPosition;\\n        return this;\\n    }\\n\\n    public int getStartPosition() {\\n        return mStartPosition;\\n    }\\n\\n    /**\\n     * 禁止手动滑动\\n     *\\n     * @param enabled true 允许，false 禁止\\n     */\\n    public Banner setUserInputEnabled(boolean enabled) {\\n        getViewPager2().setUserInputEnabled(enabled);\\n        return this;\\n    }\\n\\n    /**\\n     * 添加PageTransformer，可以组合效果\\n     * {@link ViewPager2.PageTransformer}\\n     * 如果找不到请导入implementation \\\"androidx.viewpager2:viewpager2:1.0.0\\\"\\n     */\\n    public Banner addPageTransformer(@Nullable ViewPager2.PageTransformer transformer) {\\n        mCompositePageTransformer.addTransformer(transformer);\\n        return this;\\n    }\\n\\n    /**\\n     * 设置PageTransformer，和addPageTransformer不同，这个只支持一种transformer\\n     */\\n    public Banner setPageTransformer(@Nullable ViewPager2.PageTransformer transformer) {\\n        getViewPager2().setPageTransformer(transformer);\\n        return this;\\n    }\\n\\n    public Banner removeTransformer(ViewPager2.PageTransformer transformer) {\\n        mCompositePageTransformer.removeTransformer(transformer);\\n        return this;\\n    }\\n\\n    /**\\n     * 添加 ItemDecoration\\n     */\\n    public Banner addItemDecoration(RecyclerView.ItemDecoration decor) {\\n        getViewPager2().addItemDecoration(decor);\\n        return this;\\n    }\\n\\n    public Banner addItemDecoration(RecyclerView.ItemDecoration decor, int index) {\\n        getViewPager2().addItemDecoration(decor, index);\\n        return this;\\n    }\\n\\n    /**\\n     * 是否允许自动轮播\\n     *\\n     * @param isAutoLoop ture 允许，false 不允许\\n     */\\n    public Banner isAutoLoop(boolean isAutoLoop) {\\n        this.mIsAutoLoop = isAutoLoop;\\n        return this;\\n    }\\n\\n\\n    /**\\n     * 设置轮播间隔时间\\n     *\\n     * @param loopTime 时间（毫秒）\\n     */\\n    public Banner setLoopTime(long loopTime) {\\n        this.mLoopTime = loopTime;\\n        return this;\\n    }\\n\\n    /**\\n     * 设置轮播滑动过程的时间\\n     */\\n    public Banner setScrollTime(int scrollTime) {\\n        this.mScrollTime = scrollTime;\\n        return this;\\n    }\\n\\n    /**\\n     * 开始轮播\\n     */\\n    public Banner start() {\\n        if (mIsAutoLoop) {\\n            stop();\\n            postDelayed(mLoopTask, mLoopTime);\\n        }\\n        return this;\\n    }\\n\\n    /**\\n     * 停止轮播\\n     */\\n    public Banner stop() {\\n        if (mIsAutoLoop) {\\n            removeCallbacks(mLoopTask);\\n        }\\n        return this;\\n    }\\n\\n    /**\\n     * 移除一些引用\\n     */\\n    public void destroy() {\\n        if (getViewPager2() != null && mPageChangeCallback != null) {\\n            getViewPager2().unregisterOnPageChangeCallback(mPageChangeCallback);\\n            mPageChangeCallback = null;\\n        }\\n        stop();\\n    }\\n\\n    /**\\n     * 设置banner的适配器\\n     */\\n    public Banner setAdapter(BA adapter) {\\n        if (adapter == null) {\\n            throw new NullPointerException(getContext().getString(R.string.banner_adapter_null_error));\\n        }\\n        this.mAdapter = adapter;\\n        if (!isInfiniteLoop()) {\\n            getAdapter().setIncreaseCount(0);\\n        }\\n        getAdapter().registerAdapterDataObserver(mAdapterDataObserver);\\n        mViewPager2.setAdapter(adapter);\\n        setCurrentItem(mStartPosition, false);\\n        initIndicator();\\n        return this;\\n    }\\n\\n    /**\\n     * 设置banner的适配器\\n     * @param adapter\\n     * @param isInfiniteLoop 是否支持无限循环\\n     * @return\\n     */\\n    public Banner setAdapter(BA adapter,boolean isInfiniteLoop) {\\n        mIsInfiniteLoop=isInfiniteLoop;\\n        setInfiniteLoop();\\n        setAdapter(adapter);\\n        return this;\\n    }\\n\\n    /**\\n     * 重新设置banner数据，当然你也可以在你adapter中自己操作数据,不要过于局限在这个方法，举一反三哈\\n     *\\n     * @param datas 数据集合，当传null或者datas没有数据时，banner会变成空白的，请做好占位UI处理\\n     */\\n    public Banner setDatas(List<T> datas) {\\n        if (getAdapter() != null) {\\n            getAdapter().setDatas(datas);\\n            setCurrentItem(mStartPosition, false);\\n            setIndicatorPageChange();\\n            start();\\n        }\\n        return this;\\n    }\\n\\n    /**\\n     * 设置banner轮播方向\\n     *\\n     * @param orientation {@link Orientation}\\n     */\\n    public Banner setOrientation(@Orientation int orientation) {\\n        getViewPager2().setOrientation(orientation);\\n        return this;\\n    }\\n\\n    /**\\n     * 改变最小滑动距离\\n     */\\n    public Banner setTouchSlop(int mTouchSlop) {\\n        this.mTouchSlop = mTouchSlop;\\n        return this;\\n    }\\n\\n    /**\\n     * 设置点击事件\\n     */\\n    public Banner setOnBannerListener(OnBannerListener<T> listener) {\\n        if (getAdapter() != null) {\\n            getAdapter().setOnBannerListener(listener);\\n        }\\n        return this;\\n    }\\n\\n    /**\\n     * 添加viewpager切换事件\\n     * <p>\\n     * 在viewpager2中切换事件{@link ViewPager2.OnPageChangeCallback}是一个抽象类，\\n     * 为了方便使用习惯这里用的是和viewpager一样的{@link ViewPager.OnPageChangeListener}接口\\n     * </p>\\n     */\\n    public Banner addOnPageChangeListener(OnPageChangeListener pageListener) {\\n        this.mOnPageChangeListener = pageListener;\\n        return this;\\n    }\\n\\n    /**\\n     * 设置banner圆角\\n     * <p>\\n     * 默认没有圆角，需要取消圆角把半径设置为0即可\\n     *\\n     * @param radius 圆角半径\\n     */\\n    public Banner setBannerRound(float radius) {\\n        mBannerRadius = radius;\\n        return this;\\n    }\\n\\n    /**\\n     * 设置banner圆角(第二种方式，和上面的方法不要同时使用)，只支持5.0以上\\n     */\\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\\n    public Banner setBannerRound2(float radius) {\\n        BannerUtils.setBannerRound(this, radius);\\n        return this;\\n    }\\n\\n    /**\\n     * 为banner添加画廊效果\\n     *\\n     * @param itemWidth  item左右展示的宽度,单位dp\\n     * @param pageMargin 页面间距,单位dp\\n     */\\n    public Banner setBannerGalleryEffect(int itemWidth, int pageMargin) {\\n        return setBannerGalleryEffect(itemWidth, pageMargin, .85f);\\n    }\\n\\n    /**\\n     * 为banner添加画廊效果\\n     *\\n     * @param leftItemWidth  item左展示的宽度,单位dp\\n     * @param rightItemWidth item右展示的宽度,单位dp\\n     * @param pageMargin     页面间距,单位dp\\n     */\\n    public Banner setBannerGalleryEffect(int leftItemWidth, int rightItemWidth, int pageMargin) {\\n        return setBannerGalleryEffect(leftItemWidth,rightItemWidth, pageMargin, .85f);\\n    }\\n\\n    /**\\n     * 为banner添加画廊效果\\n     *\\n     * @param itemWidth  item左右展示的宽度,单位dp\\n     * @param pageMargin 页面间距,单位dp\\n     * @param scale      缩放[0-1],1代表不缩放\\n     */\\n    public Banner setBannerGalleryEffect(int itemWidth, int pageMargin, float scale) {\\n        return setBannerGalleryEffect(itemWidth, itemWidth, pageMargin, scale);\\n    }\\n\\n    /**\\n     * 为banner添加画廊效果\\n     *\\n     * @param leftItemWidth  item左展示的宽度,单位dp\\n     * @param rightItemWidth item右展示的宽度,单位dp\\n     * @param pageMargin     页面间距,单位dp\\n     * @param scale          缩放[0-1],1代表不缩放\\n     */\\n    public Banner setBannerGalleryEffect(int leftItemWidth, int rightItemWidth, int pageMargin, float scale) {\\n        if (pageMargin > 0) {\\n            addPageTransformer(new MarginPageTransformer(BannerUtils.dp2px(pageMargin)));\\n        }\\n        if (scale < 1 && scale > 0) {\\n            addPageTransformer(new ScaleInTransformer(scale));\\n        }\\n        setRecyclerViewPadding(leftItemWidth > 0 ? BannerUtils.dp2px(leftItemWidth + pageMargin) : 0,\\n                rightItemWidth > 0 ? BannerUtils.dp2px(rightItemWidth + pageMargin) : 0);\\n        return this;\\n    }\\n\\n    /**\\n     * 为banner添加魅族效果\\n     *\\n     * @param itemWidth item左右展示的宽度,单位dp\\n     */\\n    public Banner setBannerGalleryMZ(int itemWidth) {\\n        return setBannerGalleryMZ(itemWidth, .88f);\\n    }\\n\\n    /**\\n     * 为banner添加魅族效果\\n     *\\n     * @param itemWidth item左右展示的宽度,单位dp\\n     * @param scale     缩放[0-1],1代表不缩放\\n     */\\n    public Banner setBannerGalleryMZ(int itemWidth, float scale) {\\n        if (scale < 1 && scale > 0) {\\n            addPageTransformer(new MZScaleInTransformer(scale));\\n        }\\n        setRecyclerViewPadding(BannerUtils.dp2px(itemWidth));\\n        return this;\\n    }\\n\\n    /**\\n     * **********************************************************************\\n     * ------------------------ 指示器相关设置 --------------------------------*\\n     * **********************************************************************\\n     */\\n\\n    /**\\n     * 设置轮播指示器(显示在banner上)\\n     */\\n    public Banner setIndicator(Indicator indicator) {\\n        return setIndicator(indicator, true);\\n    }\\n\\n    /**\\n     * 设置轮播指示器(如果你的指示器写在布局文件中，attachToBanner传false)\\n     *\\n     * @param attachToBanner 是否将指示器添加到banner中，false 代表你可以将指示器通过布局放在任何位置\\n     *                       注意：设置为false后，内置的 setIndicatorGravity()和setIndicatorMargins() 方法将失效。\\n     *                       想改变可以自己调用系统提供的属性在布局文件中进行设置。具体可以参照demo\\n     */\\n    public Banner setIndicator(Indicator indicator, boolean attachToBanner) {\\n        removeIndicator();\\n        indicator.getIndicatorConfig().setAttachToBanner(attachToBanner);\\n        this.mIndicator = indicator;\\n        initIndicator();\\n        return this;\\n    }\\n\\n\\n    public Banner setIndicatorSelectedColor(@ColorInt int color) {\\n        if (getIndicatorConfig() != null) {\\n            getIndicatorConfig().setSelectedColor(color);\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorSelectedColorRes(@ColorRes int color) {\\n        setIndicatorSelectedColor(ContextCompat.getColor(getContext(), color));\\n        return this;\\n    }\\n\\n    public Banner setIndicatorNormalColor(@ColorInt int color) {\\n        if (getIndicatorConfig() != null) {\\n            getIndicatorConfig().setNormalColor(color);\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorNormalColorRes(@ColorRes int color) {\\n        setIndicatorNormalColor(ContextCompat.getColor(getContext(), color));\\n        return this;\\n    }\\n\\n    public Banner setIndicatorGravity(@IndicatorConfig.Direction int gravity) {\\n        if (getIndicatorConfig() != null && getIndicatorConfig().isAttachToBanner()) {\\n            getIndicatorConfig().setGravity(gravity);\\n            getIndicator().getIndicatorView().postInvalidate();\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorSpace(int indicatorSpace) {\\n        if (getIndicatorConfig() != null) {\\n            getIndicatorConfig().setIndicatorSpace(indicatorSpace);\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorMargins(IndicatorConfig.Margins margins) {\\n        if (getIndicatorConfig() != null && getIndicatorConfig().isAttachToBanner()) {\\n            getIndicatorConfig().setMargins(margins);\\n            getIndicator().getIndicatorView().requestLayout();\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorWidth(int normalWidth, int selectedWidth) {\\n        if (getIndicatorConfig() != null) {\\n            getIndicatorConfig().setNormalWidth(normalWidth);\\n            getIndicatorConfig().setSelectedWidth(selectedWidth);\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorNormalWidth(int normalWidth) {\\n        if (getIndicatorConfig() != null) {\\n            getIndicatorConfig().setNormalWidth(normalWidth);\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorSelectedWidth(int selectedWidth) {\\n        if (getIndicatorConfig() != null) {\\n            getIndicatorConfig().setSelectedWidth(selectedWidth);\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorRadius(int indicatorRadius) {\\n        if (getIndicatorConfig() != null) {\\n            getIndicatorConfig().setRadius(indicatorRadius);\\n        }\\n        return this;\\n    }\\n\\n    public Banner setIndicatorHeight(int indicatorHeight) {\\n        if (getIndicatorConfig() != null) {\\n            getIndicatorConfig().setHeight(indicatorHeight);\\n        }\\n        return this;\\n    }\\n\\n    /**\\n     * **********************************************************************\\n     * ------------------------ 生命周期控制 --------------------------------*\\n     * **********************************************************************\\n     */\\n\\n    public Banner addBannerLifecycleObserver(LifecycleOwner owner) {\\n        if (owner != null) {\\n            owner.getLifecycle().addObserver(new BannerLifecycleObserverAdapter(owner, this));\\n        }\\n        return this;\\n    }\\n\\n    @Override\\n    public void onStart(LifecycleOwner owner) {\\n        start();\\n    }\\n\\n    @Override\\n    public void onStop(LifecycleOwner owner) {\\n        stop();\\n    }\\n\\n    @Override\\n    public void onDestroy(LifecycleOwner owner) {\\n        destroy();\\n    }\\n\\n}\"}, {\"identifier\":\"BannerImageAdapter\", \"path\":\"banner/src/main/java/com/youth/banner/adapter/BannerImageAdapter.java\", \"snippet\":\"public abstract class BannerImageAdapter<T> extends BannerAdapter<T, BannerImageHolder> {\\n\\n    public BannerImageAdapter(List<T> mData) {\\n        super(mData);\\n    }\\n\\n    @Override\\n    public BannerImageHolder onCreateHolder(ViewGroup parent, int viewType) {\\n        ImageView imageView = new ImageView(parent.getContext());\\n        //注意，必须设置为match_parent，这个是viewpager2强制要求的\\n        ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(\\n                ViewGroup.LayoutParams.MATCH_PARENT,\\n                ViewGroup.LayoutParams.MATCH_PARENT);\\n        imageView.setLayoutParams(params);\\n        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);\\n        return new BannerImageHolder(imageView);\\n    }\\n\\n}\"}, {\"identifier\":\"BannerImageHolder\", \"path\":\"banner/src/main/java/com/youth/banner/holder/BannerImageHolder.java\", \"snippet\":\"public\\nclass BannerImageHolder extends RecyclerView.ViewHolder {\\n    public ImageView imageView;\\n\\n    public BannerImageHolder(@NonNull View view) {\\n        super(view);\\n        this.imageView = (ImageView) view;\\n    }\\n}\"}, {\"identifier\":\"BannerConfig\", \"path\":\"banner/src/main/java/com/youth/banner/config/BannerConfig.java\", \"snippet\":\"public class BannerConfig {\\n    public static final boolean IS_AUTO_LOOP = true;\\n    public static final boolean IS_INFINITE_LOOP = true;\\n    public static final int LOOP_TIME = 3000;\\n    public static final int SCROLL_TIME = 600;\\n    public static final int INCREASE_COUNT = 2;\\n    public static final int INDICATOR_NORMAL_COLOR = 0x88ffffff;\\n    public static final int INDICATOR_SELECTED_COLOR = 0x88000000;\\n    public static final int INDICATOR_NORMAL_WIDTH = (int) BannerUtils.dp2px(5);\\n    public static final int INDICATOR_SELECTED_WIDTH = (int) BannerUtils.dp2px(7);\\n    public static final int INDICATOR_SPACE = (int) BannerUtils.dp2px(5);\\n    public static final int INDICATOR_MARGIN = (int) BannerUtils.dp2px(5);\\n\\n    public static final int INDICATOR_HEIGHT = (int) BannerUtils.dp2px(3);\\n    public static final int INDICATOR_RADIUS = (int) BannerUtils.dp2px(3);\\n\\n}\"}, {\"identifier\":\"IndicatorConfig\", \"path\":\"banner/src/main/java/com/youth/banner/config/IndicatorConfig.java\", \"snippet\":\"public class IndicatorConfig {\\n\\n    private int indicatorSize;\\n    private int currentPosition;\\n    private int gravity = Direction.CENTER;\\n    private int indicatorSpace = BannerConfig.INDICATOR_SPACE;\\n    private int normalWidth = BannerConfig.INDICATOR_NORMAL_WIDTH;\\n    private int selectedWidth = BannerConfig.INDICATOR_SELECTED_WIDTH;\\n    @ColorInt\\n    private int normalColor = BannerConfig.INDICATOR_NORMAL_COLOR;\\n    @ColorInt\\n    private int selectedColor = BannerConfig.INDICATOR_SELECTED_COLOR;\\n\\n    private int radius = BannerConfig.INDICATOR_RADIUS;\\n    private int height = BannerConfig.INDICATOR_HEIGHT;\\n\\n    private Margins margins;\\n\\n    //是将指示器添加到banner上\\n    private boolean attachToBanner = true;\\n\\n    @IntDef({Direction.LEFT, Direction.CENTER, Direction.RIGHT})\\n    @Retention(RetentionPolicy.SOURCE)\\n    public @interface Direction {\\n        int LEFT = 0;\\n        int CENTER = 1;\\n        int RIGHT = 2;\\n    }\\n\\n    public static class Margins {\\n        public int leftMargin;\\n        public int topMargin;\\n        public int rightMargin;\\n        public int bottomMargin;\\n\\n        public Margins() {\\n            this(BannerConfig.INDICATOR_MARGIN);\\n        }\\n\\n        public Margins(int marginSize) {\\n            this(marginSize, marginSize, marginSize, marginSize);\\n        }\\n\\n        public Margins(int leftMargin, int topMargin, int rightMargin, int bottomMargin) {\\n            this.leftMargin = leftMargin;\\n            this.topMargin = topMargin;\\n            this.rightMargin = rightMargin;\\n            this.bottomMargin = bottomMargin;\\n        }\\n    }\\n\\n    public Margins getMargins() {\\n        if (margins == null) {\\n            setMargins(new Margins());\\n        }\\n        return margins;\\n    }\\n\\n    public IndicatorConfig setMargins(Margins margins) {\\n        this.margins = margins;\\n        return this;\\n    }\\n\\n    public int getIndicatorSize() {\\n        return indicatorSize;\\n    }\\n\\n    public IndicatorConfig setIndicatorSize(int indicatorSize) {\\n        this.indicatorSize = indicatorSize;\\n        return this;\\n    }\\n\\n    public int getNormalColor() {\\n        return normalColor;\\n    }\\n\\n    public IndicatorConfig setNormalColor(int normalColor) {\\n        this.normalColor = normalColor;\\n        return this;\\n    }\\n\\n    public int getSelectedColor() {\\n        return selectedColor;\\n    }\\n\\n    public IndicatorConfig setSelectedColor(int selectedColor) {\\n        this.selectedColor = selectedColor;\\n        return this;\\n    }\\n\\n    public int getIndicatorSpace() {\\n        return indicatorSpace;\\n    }\\n\\n    public IndicatorConfig setIndicatorSpace(int indicatorSpace) {\\n        this.indicatorSpace = indicatorSpace;\\n        return this;\\n    }\\n\\n    public int getCurrentPosition() {\\n        return currentPosition;\\n    }\\n\\n    public IndicatorConfig setCurrentPosition(int currentPosition) {\\n        this.currentPosition = currentPosition;\\n        return this;\\n    }\\n\\n    public int getNormalWidth() {\\n        return normalWidth;\\n    }\\n\\n    public IndicatorConfig setNormalWidth(int normalWidth) {\\n        this.normalWidth = normalWidth;\\n        return this;\\n    }\\n\\n    public int getSelectedWidth() {\\n        return selectedWidth;\\n    }\\n\\n    public IndicatorConfig setSelectedWidth(int selectedWidth) {\\n        this.selectedWidth = selectedWidth;\\n        return this;\\n    }\\n\\n    public int getGravity() {\\n        return gravity;\\n    }\\n\\n    public IndicatorConfig setGravity(@Direction int gravity) {\\n        this.gravity = gravity;\\n        return this;\\n    }\\n\\n    public boolean isAttachToBanner() {\\n        return attachToBanner;\\n    }\\n\\n    public IndicatorConfig setAttachToBanner(boolean attachToBanner) {\\n        this.attachToBanner = attachToBanner;\\n        return this;\\n    }\\n\\n    public int getRadius() {\\n        return radius;\\n    }\\n\\n    public IndicatorConfig setRadius(int radius) {\\n        this.radius = radius;\\n        return this;\\n    }\\n\\n    public int getHeight() {\\n        return height;\\n    }\\n\\n    public IndicatorConfig setHeight(int height) {\\n        this.height = height;\\n        return this;\\n    }\\n}\"}, {\"identifier\":\"CircleIndicator\", \"path\":\"banner/src/main/java/com/youth/banner/indicator/CircleIndicator.java\", \"snippet\":\"public class CircleIndicator extends BaseIndicator {\\n    private int mNormalRadius;\\n    private int mSelectedRadius;\\n    private int maxRadius;\\n\\n    public CircleIndicator(Context context) {\\n        this(context, null);\\n    }\\n\\n    public CircleIndicator(Context context, AttributeSet attrs) {\\n        this(context, attrs, 0);\\n    }\\n\\n    public CircleIndicator(Context context, AttributeSet attrs, int defStyleAttr) {\\n        super(context, attrs, defStyleAttr);\\n        mNormalRadius = config.getNormalWidth() / 2;\\n        mSelectedRadius = config.getSelectedWidth() / 2;\\n    }\\n\\n    @Override\\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\\n        int count = config.getIndicatorSize();\\n        if (count <= 1) {\\n            return;\\n        }\\n\\n        mNormalRadius = config.getNormalWidth() / 2;\\n        mSelectedRadius = config.getSelectedWidth() / 2;\\n        //考虑当 选中和默认 的大小不一样的情况\\n        maxRadius = Math.max(mSelectedRadius, mNormalRadius);\\n        //间距*（总数-1）+选中宽度+默认宽度*（总数-1）\\n        int width = (count - 1) * config.getIndicatorSpace() + config.getSelectedWidth() + config.getNormalWidth() * (count - 1);\\n        setMeasuredDimension(width, Math.max(config.getNormalWidth(), config.getSelectedWidth()));\\n    }\\n\\n    @Override\\n    protected void onDraw(Canvas canvas) {\\n        super.onDraw(canvas);\\n        int count = config.getIndicatorSize();\\n        if (count <= 1) {\\n            return;\\n        }\\n        float left = 0;\\n        for (int i = 0; i < count; i++) {\\n            mPaint.setColor(config.getCurrentPosition() == i ? config.getSelectedColor() : config.getNormalColor());\\n            int indicatorWidth = config.getCurrentPosition() == i ? config.getSelectedWidth() : config.getNormalWidth();\\n            int radius = config.getCurrentPosition() == i ? mSelectedRadius : mNormalRadius;\\n            canvas.drawCircle(left + radius, maxRadius, radius, mPaint);\\n            left += indicatorWidth + config.getIndicatorSpace();\\n        }\\n//        mPaint.setColor(config.getNormalColor());\\n//        for (int i = 0; i < count; i++) {\\n//            canvas.drawCircle(left + maxRadius, maxRadius, mNormalRadius, mPaint);\\n//            left += config.getNormalWidth() + config.getIndicatorSpace();\\n//        }\\n//        mPaint.setColor(config.getSelectedColor());\\n//        left = maxRadius + (config.getNormalWidth() + config.getIndicatorSpace()) * config.getCurrentPosition();\\n//        canvas.drawCircle(left, maxRadius, mSelectedRadius, mPaint);\\n    }\\n\\n}\"}, {\"identifier\":\"RoundLinesIndicator\", \"path\":\"banner/src/main/java/com/youth/banner/indicator/RoundLinesIndicator.java\", \"snippet\":\"public class RoundLinesIndicator extends BaseIndicator {\\n\\n    public RoundLinesIndicator(Context context) {\\n        this(context, null);\\n    }\\n\\n    public RoundLinesIndicator(Context context, @Nullable AttributeSet attrs) {\\n        this(context, attrs, 0);\\n    }\\n\\n    public RoundLinesIndicator(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\\n        super(context, attrs, defStyleAttr);\\n        mPaint.setStyle(Paint.Style.FILL);\\n    }\\n\\n    @Override\\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\\n        int count = config.getIndicatorSize();\\n        if (count <= 1) return;\\n        setMeasuredDimension((int) (config.getSelectedWidth() * count), config.getHeight());\\n    }\\n\\n    @Override\\n    protected void onDraw(Canvas canvas) {\\n        super.onDraw(canvas);\\n        int count = config.getIndicatorSize();\\n        if (count <= 1) return;\\n\\n        mPaint.setColor(config.getNormalColor());\\n        RectF oval = new RectF(0, 0, canvas.getWidth(), config.getHeight());\\n        canvas.drawRoundRect(oval, config.getRadius(), config.getRadius(), mPaint);\\n\\n        mPaint.setColor(config.getSelectedColor());\\n        int left = config.getCurrentPosition() * config.getSelectedWidth();\\n        RectF rectF = new RectF(left, 0, left + config.getSelectedWidth(), config.getHeight());\\n        canvas.drawRoundRect(rectF, config.getRadius(), config.getRadius(), mPaint);\\n    }\\n}\"}, {\"identifier\":\"OnPageChangeListener\", \"path\":\"banner/src/main/java/com/youth/banner/listener/OnPageChangeListener.java\", \"snippet\":\"public interface OnPageChangeListener {\\n    /**\\n     * This method will be invoked when the current page is scrolled, either as part\\n     * of a programmatically initiated smooth scroll or a user initiated touch scroll.\\n     *\\n     * @param position             Position index of the first page currently being displayed.\\n     *                             Page position+1 will be visible if positionOffset is nonzero.\\n     * @param positionOffset       Value from [0, 1) indicating the offset from the page at position.\\n     * @param positionOffsetPixels Value in pixels indicating the offset from position.\\n     */\\n    void onPageScrolled(int position, float positionOffset, @Px int positionOffsetPixels);\\n\\n    /**\\n     * This method will be invoked when a new page becomes selected. Animation is not\\n     * necessarily complete.\\n     *\\n     * @param position Position index of the new selected page.\\n     */\\n    void onPageSelected(int position);\\n\\n    /**\\n     * Called when the scroll state changes. Useful for discovering when the user begins\\n     * dragging, when a fake drag is started, when the pager is automatically settling to the\\n     * current page, or when it is fully stopped/idle. {@code state} can be one of\\n     * {@link ViewPager2.SCROLL_STATE_IDLE},\\n     * {@link ViewPager2.SCROLL_STATE_DRAGGING},\\n     * {@link ViewPager2.SCROLL_STATE_SETTLING}.\\n     */\\n    void onPageScrollStateChanged(@ViewPager2.ScrollState int state);\\n}\"}, {\"identifier\":\"BannerUtils\", \"path\":\"banner/src/main/java/com/youth/banner/util/BannerUtils.java\", \"snippet\":\"public class BannerUtils {\\n\\n    /**\\n     * 获取真正的位置\\n     *\\n     * @param isIncrease 首尾是否有增加\\n     * @param position  当前位置\\n     * @param realCount 真实数量\\n     * @return\\n     */\\n    public static int getRealPosition(boolean isIncrease, int position, int realCount) {\\n        if (!isIncrease) {\\n            return position;\\n        }\\n        int realPosition;\\n        if (position == 0) {\\n            realPosition = realCount - 1;\\n        } else if (position == realCount + 1) {\\n            realPosition = 0;\\n        } else {\\n            realPosition = position - 1;\\n        }\\n        return realPosition;\\n    }\\n\\n    /**\\n     * 将布局文件转成view，这里为了适配viewpager2中高宽必须为match_parent\\n     *\\n     * @param parent\\n     * @param layoutId\\n     * @return\\n     */\\n    public static View getView(@NonNull ViewGroup parent, @LayoutRes int layoutId) {\\n        View view = LayoutInflater.from(parent.getContext()).inflate(layoutId, parent, false);\\n        ViewGroup.LayoutParams params = view.getLayoutParams();\\n        //这里判断高度和宽带是否都是match_parent\\n        if (params.height != -1 || params.width != -1) {\\n            params.height = -1;\\n            params.width = -1;\\n            view.setLayoutParams(params);\\n        }\\n        return view;\\n    }\\n\\n    public static int dp2px(float dp) {\\n        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, Resources.getSystem().getDisplayMetrics());\\n    }\\n\\n    /**\\n     * 设置view圆角\\n     *\\n     * @param radius\\n     * @return\\n     */\\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\\n    public static void setBannerRound(View view,float radius) {\\n        view.setOutlineProvider(new ViewOutlineProvider() {\\n            @Override\\n            public void getOutline(View view, Outline outline) {\\n                outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(), radius);\\n            }\\n        });\\n        view.setClipToOutline(true);\\n    }\\n}\"}, {\"identifier\":\"LogUtils\", \"path\":\"banner/src/main/java/com/youth/banner/util/LogUtils.java\", \"snippet\":\"public class LogUtils {\\n    public static final String TAG = \\\"banner_log\\\";\\n\\n    private static final boolean DEBUG = BuildConfig.DEBUG;\\n\\n    public static void d(String msg) {\\n        if (DEBUG) {\\n            Log.d(TAG, msg);\\n        }\\n    }\\n\\n    public static void e(String msg) {\\n        if (DEBUG) {\\n            Log.e(TAG, msg);\\n        }\\n    }\\n\\n    public static void i(String msg) {\\n        if (DEBUG) {\\n            Log.i(TAG, msg);\\n        }\\n    }\\n\\n    public static void v( String msg) {\\n        if (DEBUG) {\\n            Log.v(TAG, msg);\\n        }\\n    }\\n\\n    public static void w(String msg) {\\n        if (DEBUG) {\\n            Log.w(TAG, msg);\\n        }\\n    }\\n}\"}]", "import_statement": "import android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.view.View;\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.load.resource.bitmap.RoundedCorners;\nimport com.bumptech.glide.request.RequestOptions;\nimport com.google.android.material.snackbar.Snackbar;\nimport com.test.banner.adapter.ImageAdapter;\nimport com.test.banner.adapter.ImageTitleAdapter;\nimport com.test.banner.adapter.ImageTitleNumAdapter;\nimport com.test.banner.adapter.MultipleTypesAdapter;\nimport com.test.banner.bean.DataBean;\nimport com.youth.banner.indicator.DrawableIndicator;\nimport com.test.banner.ui.ConstraintLayoutBannerActivity;\nimport com.test.banner.ui.GalleryActivity;\nimport com.test.banner.ui.RecyclerViewBannerActivity;\nimport com.test.banner.ui.TVActivity;\nimport com.test.banner.ui.TouTiaoActivity;\nimport com.test.banner.ui.VideoActivity;\nimport com.test.banner.ui.Vp2FragmentRecyclerviewActivity;\nimport com.youth.banner.Banner;\nimport com.youth.banner.adapter.BannerImageAdapter;\nimport com.youth.banner.holder.BannerImageHolder;\nimport com.youth.banner.config.BannerConfig;\nimport com.youth.banner.config.IndicatorConfig;\nimport com.youth.banner.indicator.CircleIndicator;\nimport com.youth.banner.indicator.RoundLinesIndicator;\nimport com.youth.banner.listener.OnPageChangeListener;\nimport com.youth.banner.util.BannerUtils;\nimport com.youth.banner.util.LogUtils;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport butterknife.OnClick;", "code": "package com.test.banner;\n\n\n\n\n\npublic class MainActivity extends AppCompatActivity {\n    @BindView(R.id.banner)\n    Banner banner;\n    @BindView(R.id.indicator)\n    RoundLinesIndicator indicator;\n    @BindView(R.id.swipeRefresh)\n    SwipeRefreshLayout refresh;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ButterKnife.bind(this);\n\n        //自定义的图片适配器，也可以使用默认的BannerImageAdapter", "next_line": "        ImageAdapter adapter = new ImageAdapter(DataBean.getTestData2());", "gold_snippet_index": 4, "id": 6, "__internal_uuid__": "7ef04321-ac20-4c98-b440-070e32075bfa"}
{"repo_name": "MeteoGroup/grib-library", "file_path": "src/main/java/org/meteogroup/griblibrary/grib2/Grib2RecordReader.java", "context": "[{\"identifier\":\"BinaryNumberConversionException\", \"path\":\"src/main/java/org/meteogroup/griblibrary/exception/BinaryNumberConversionException.java\", \"snippet\":\"public class BinaryNumberConversionException extends Exception {\\n\\n    public BinaryNumberConversionException(String message){\\n        super(message);\\n    }\\n\\n}\"}, {\"identifier\":\"GribReaderException\", \"path\":\"src/main/java/org/meteogroup/griblibrary/exception/GribReaderException.java\", \"snippet\":\"public class GribReaderException extends Exception {\\n\\n    public GribReaderException(String message){\\n        super(message);\\n    }\\n\\n    public GribReaderException(String message, Exception cause){\\n        super(message,cause);\\n    }\\n\\n}\"}, {\"identifier\":\"Grib2BMS\", \"path\":\"src/main/java/org/meteogroup/griblibrary/grib2/model/Grib2BMS.java\", \"snippet\":\"@ToString\\n@EqualsAndHashCode\\n@Getter\\n@Setter\\npublic class Grib2BMS {\\n\\n    private int length;\\n    private short sectionNumber;\\n    private short bitMapIndicator;\\n    private byte[] bitmap;\\n}\"}, {\"identifier\":\"Grib2DRS\", \"path\":\"src/main/java/org/meteogroup/griblibrary/grib2/model/Grib2DRS.java\", \"snippet\":\"@Getter\\n@Setter\\n@ToString\\n@EqualsAndHashCode\\npublic class Grib2DRS {\\n\\n\\tprivate int length;\\n\\tprivate int dataRepresenationtypeNumber = -1;\\t\\n\\tprivate int numberOfDataPoints;\\n\\t\\n\\tprivate DRSTemplate dataTemplate;\\n\\t\\n}\"}, {\"identifier\":\"Grib2DS\", \"path\":\"src/main/java/org/meteogroup/griblibrary/grib2/model/Grib2DS.java\", \"snippet\":\"@Getter\\n@Setter\\npublic class Grib2DS {\\n\\t\\n\\tprivate int length;\\n\\tprivate byte[] packedData;\\n}\"}, {\"identifier\":\"Grib2GDS\", \"path\":\"src/main/java/org/meteogroup/griblibrary/grib2/model/Grib2GDS.java\", \"snippet\":\"@Getter\\n@Setter\\n@ToString\\n@EqualsAndHashCode\\npublic class Grib2GDS {\\n\\n\\tprivate int length;\\n\\n    private int numberOfVerticalsCoordinateParams;\\n    private int locationOfVerticalCoordinateParams;\\n    private int locationListPer;\\n    private int representationType;\\n    private int numberOfPoints;\\n\\n    private double north;\\n    private double south;\\n    private double lat1;\\n    private double lat2;\\n\\n    private double Dj;\\n\\n//    private LatLon[] latLons;\\n\\n    private int ni;\\n    private int[] nis;\\n    private int nj;\\n    \\n    // GRIB2 variables\\n    \\n    private int gridDefinitionTemplateNumber;\\n    \\n    private GDSTemplate gdsTemplate;\\n\\n\\n}\"}, {\"identifier\":\"Grib2IDS\", \"path\":\"src/main/java/org/meteogroup/griblibrary/grib2/model/Grib2IDS.java\", \"snippet\":\"@Getter\\n@Setter\\n@ToString\\n@EqualsAndHashCode\\npublic class Grib2IDS {\\n\\n    private int length;\\n    public static final short SIGNIFICANCE_REFERENCETIME_FORECAST_START = 1;\\n    \\n    public static final short TYPE_OF_DATA_ANALYSIS = 0;\\n    public static final short TYPE_OF_DATA_FORECAST = 1;\\n    \\n    //private short id;\\n    private int centreId;\\n    private int subCenterId;\\n    private short tableVersion;\\n    private short localTableVersionNumber;\\n    private short significanceOfReferenceTime;\\n    private int year;\\n    private short month;\\n    private short day;\\n    private short hour;\\n    private short minute;\\n    private short second;\\n    private short productionStatus;\\n    private short typeOfData; \\n    \\n}\"}, {\"identifier\":\"Grib2LUS\", \"path\":\"src/main/java/org/meteogroup/griblibrary/grib2/model/Grib2LUS.java\", \"snippet\":\"@Getter\\n@Setter\\n@ToString\\n@EqualsAndHashCode\\npublic class Grib2LUS {\\n\\t\\n\\tprivate int length;\\n}\"}, {\"identifier\":\"Grib2PDS\", \"path\":\"src/main/java/org/meteogroup/griblibrary/grib2/model/Grib2PDS.java\", \"snippet\":\"@Getter\\n@Setter\\n@ToString\\n@EqualsAndHashCode\\npublic class Grib2PDS {\\n\\n    private int length;\\n    private short sectionNumber;\\n    private int numberOfCoordinateValues;\\n    private int templateNumber;\\n    private ProductTemplate template;\\n \\n}\"}, {\"identifier\":\"Grib2Record\", \"path\":\"src/main/java/org/meteogroup/griblibrary/grib2/model/Grib2Record.java\", \"snippet\":\"@Getter\\n@Setter\\npublic class Grib2Record extends GribRecord {\\n\\t\\n\\tprivate Grib2IDS ids;\\n\\n\\tprivate Grib2LUS lus;\\n\\n\\tprivate Grib2GDS gds;\\n\\n\\tprivate Grib2PDS pds;\\n\\n\\tprivate Grib2DRS drs;\\n\\n\\tprivate Grib2BMS bms;\\n\\n\\tprivate Grib2DS dataSection;\\n\\n\\tprivate Grib2Endsection endSection;\\n\\n}\"}, {\"identifier\":\"BytesToPrimitiveHelper\", \"path\":\"src/main/java/org/meteogroup/griblibrary/util/BytesToPrimitiveHelper.java\", \"snippet\":\"public class BytesToPrimitiveHelper {\\n\\n    public static final int BYTE_MASK = 0xff;\\n\\n    private BytesToPrimitiveHelper() {\\n    }\\n\\n    public static int bytesToInteger(byte... inputValue) throws BinaryNumberConversionException {\\n        if (inputValue.length == 2) {\\n            return bytes2ToInt(inputValue);\\n        } else if (inputValue.length == 3) {\\n            return bytes3ToInt(inputValue);\\n        } else if (inputValue.length == 4) {\\n            return bytes4ToInt(inputValue);\\n        }\\n        throw new BinaryNumberConversionException(\\\"Invalid length of input value in an attempt to convert byte array to int\\\");\\n    }\\n\\n    private static int bytes3ToInt(byte... values) {\\n        return (((values[0] & BYTE_MASK) << 8) | (values[1] & BYTE_MASK)) << 8 | (values[2] & BYTE_MASK);\\n    }\\n\\n    private static int bytes4ToInt(byte[] values) {\\n        int value = 0;\\n        for (int i = 0; i < values.length; i++) {\\n            value = (value << 8) + (values[i] & 0xff);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @deprecated SIGNING ISSUE, DO NOT USE!\\n     */\\n    @Deprecated\\n    public static short bytesToShort(byte... inputValues) throws BinaryNumberConversionException {\\n        if (inputValues.length == 2) {\\n            return (short) bytes2ToInt(inputValues);\\n        } else {\\n            throw new BinaryNumberConversionException(\\\"Invalid length of input value in an attempt to convert byte array to short\\\");\\n        }\\n    }\\n\\n    private static int bytes2ToInt(byte[] inputValues) {\\n        return ((inputValues[0] & BYTE_MASK) << 8) | (inputValues[1] & BYTE_MASK);\\n    }\\n\\n    public static int signedBytesToInt(byte... values) throws BinaryNumberConversionException {\\n        if (values.length == 2) {\\n            return BytesToPrimitiveHelper.signedBytes2ToInt(values);\\n        } else if (values.length == 3) {\\n            return BytesToPrimitiveHelper.signedBytes3ToInt(values);\\n        } else if (values.length == 4) {\\n            return BytesToPrimitiveHelper.getIntForFour(values);\\n        }\\n        throw new BinaryNumberConversionException(\\\"Failed to convert to integer.\\\");\\n    }\\n\\n    private static int signedBytes2ToInt(byte[] values) {\\n        return (1 - (((values[0] & BYTE_MASK) & 128) >> 6)) * (((values[0] & BYTE_MASK) & 127) << 8 | (values[1] & BYTE_MASK));\\n        //return ((values[0] & 0xff) | (values[1] << 8)) << 16 >> 16;\\n    }\\n\\n    private static int signedBytes3ToInt(byte... values) {\\n        int value = bytes3ToInt(values);\\n        if ((value & 0x800000) != 0) {\\n            value = value & 0x7FFFFF;\\n            value = -value;\\n        }\\n        return value;\\n    }\\n\\n    private static int signedBytes4ToInt(byte... values) {\\n        int value = bytes4ToInt(values);\\n        if ((value & 0x800000) != 0) {\\n            value = value & 0x7FFFFF;\\n            value = -value;\\n        }\\n        return value;\\n    }\\n\\n    public static float bytesToFloatAsIBM(byte... inputValue) throws BinaryNumberConversionException {\\n        if (inputValue.length == 4) {\\n            return byte4ToFloatAsIBM(inputValue);\\n        }\\n        throw new BinaryNumberConversionException(\\\"Invalid length of input value in an attempt to convert byte array to int\\\");\\n    }\\n\\n    public static float bytesToFloat(byte... inputValue) throws BinaryNumberConversionException {\\n        if (inputValue.length == 4) {\\n            int bits = bytes4ToInt(inputValue);\\n            return Float.intBitsToFloat(bits);\\n        }\\n        throw new BinaryNumberConversionException(\\\"Invalid length of input value in an attempt to convert byte array to int\\\");\\n    }\\n\\n    private static float byte4ToFloatAsIBM(byte[] values) {\\n        //TODO Check signing...\\n        int sgn, mant, exp;\\n        mant = (values[1] & 0xff) << 16 | (values[2] & 0xff) << 8 | (values[3]) & 0xff;\\n        if (mant == 0) {\\n            return 0.0f;\\n        }\\n\\n        sgn = -((((values[0] & 0xff) & 128) >> 6) - 1);\\n        exp = ((values[0] & 0xff) & 127) - 64;\\n        return (float) (sgn * Math.pow(16.0, exp - 6) * mant);\\n    }\\n\\n    public static long bytesToLong(byte... inputValues) throws BinaryNumberConversionException {\\n        if (inputValues.length == 8) {\\n            return BytesToPrimitiveHelper.bytes8ToLong(inputValues);\\n        }\\n        throw new BinaryNumberConversionException(\\\"Invalid length of input value in an attempt to convert byte array to int\\\");\\n    }\\n\\n    private static long bytes8ToLong(byte[] inputValues) {\\n        long value = 0;\\n        for (int i = 0; i < inputValues.length; i++) {\\n            value = (value << 8) + (inputValues[i] & 0xff);\\n        }\\n        return value;\\n    }\\n\\n    private static int getIntForFour(byte[] inputValues) {\\n        int valueAt0 = getBit(inputValues[0],8);\\n        byte newByte = (byte) (inputValues[0] & ~(1 << 7));\\n        if (valueAt0 == 1){\\n            byte[] values = new byte[4];\\n            values[0] = newByte;\\n            values[1] = inputValues[1];\\n            values[2] = inputValues[2];\\n            values[3] = inputValues[3];\\n            return -1 * bytes4ToInt(values);\\n        }\\n        else{\\n            return bytes4ToInt(inputValues);\\n        }\\n    }\\n\\n    public static int getBit(int value, int position)\\n    {\\n        return (value >> position) & 1;\\n    }\\n}\"}]", "import_statement": "import java.io.IOException;\nimport org.meteogroup.griblibrary.exception.BinaryNumberConversionException;\nimport org.meteogroup.griblibrary.exception.GribReaderException;\nimport org.meteogroup.griblibrary.grib2.model.Grib2BMS;\nimport org.meteogroup.griblibrary.grib2.model.Grib2DRS;\nimport org.meteogroup.griblibrary.grib2.model.Grib2DS;\nimport org.meteogroup.griblibrary.grib2.model.Grib2GDS;\nimport org.meteogroup.griblibrary.grib2.model.Grib2IDS;\nimport org.meteogroup.griblibrary.grib2.model.Grib2LUS;\nimport org.meteogroup.griblibrary.grib2.model.Grib2PDS;\nimport org.meteogroup.griblibrary.grib2.model.Grib2Record;\nimport org.meteogroup.griblibrary.util.BytesToPrimitiveHelper;", "code": "package org.meteogroup.griblibrary.grib2;\n\n\n\n/**\n * Created by roijen on 28-Oct-15.\n */\npublic class Grib2RecordReader {\n\t\n\n    public Grib2RecordReader(){\n    \tidsReader = new Grib2IDSReader();\n    \tlusReader = new Grib2LUSReader();\n    \tgdsReader = new Grib2GDSReader();\n    \tpdsReader = new Grib2PDSReader();\n    \tdrsReader = new Grib2DRSReader();\n    \tbmsReader = new Grib2BMSReader();\n    \tdsReader = new Grib2DSReader();\n    }\n    \n    public boolean checkIfGribFileIsValidGrib2(byte[] recordHeader) {\n        String headerString = new String();\n        for (int x = 0; x < GRIB_WORD_LENGTH ;x++) {\n            headerString = headerString + (char) recordHeader[x];\n        }\n        short versionNumber = recordHeader[POSITION_VERSION_NUMBER];\n        return (headerString.equals(\"GRIB\") && versionNumber == CORRECT_VERSION_NUMBER);\n    }\n\n    public long readRecordLength(byte[] recordHeader) throws GribReaderException {\n        long length = 0;\n        try {\n            length = BytesToPrimitiveHelper.bytesToLong(recordHeader[POSITION_LENGTH_1], recordHeader[POSITION_LENGTH_2], recordHeader[POSITION_LENGTH_3], recordHeader[POSITION_LENGTH_4], recordHeader[POSITION_LENGTH_5], recordHeader[POSITION_LENGTH_6], recordHeader[POSITION_LENGTH_7], recordHeader[POSITION_LENGTH_8]);\n        } catch (BinaryNumberConversionException e) {\n            throw new GribReaderException(e.getMessage(),e);\n        }\n        if (length < MINIMUM_REQUIRED_LENGTH_IN_BIT){\n            throw new GribReaderException(\"The suggested length in the record header is invalid.\");\n        }\n        return length;\n    }\n\n    public Grib2Record readCompleteRecord(Grib2Record record, byte[] recordAsByteArray, int headerLength) throws GribReaderException {\n        Grib2IDS identificationSection = null;\n        Grib2LUS localUseSection = null;\n        Grib2GDS gridDefinitionSection = null;\n        Grib2PDS productDefinitionSection = null;\n        Grib2DRS dataRepresentationSection = null;\n        Grib2BMS bitmapSection = null;", "next_line": "        Grib2DS dataSection = null;", "gold_snippet_index": 4, "id": 7, "__internal_uuid__": "cf363e14-c906-476b-b014-c18961cd22b6"}
{"repo_name": "obastani/glade", "file_path": "src/glade/grammar/synthesize/MergesSynthesis.java", "context": "[{\"identifier\":\"GrammarUtils\", \"path\":\"src/glade/grammar/GrammarUtils.java\", \"snippet\":\"public class GrammarUtils {\\n\\tpublic static class Grammar {\\n\\t\\tpublic final Node node;\\n\\t\\tpublic final NodeMerges merges;\\n\\t\\tpublic Grammar(Node node, NodeMerges merges) {\\n\\t\\t\\tthis.node = node;\\n\\t\\t\\tthis.merges = merges;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static final class Context {\\n\\t\\tpublic final String pre;\\n\\t\\tpublic final String post;\\n\\t\\tpublic final String extraPre;\\n\\t\\tpublic final String extraPost;\\n\\t\\tpublic Context() {\\n\\t\\t\\tthis.pre = \\\"\\\";\\n\\t\\t\\tthis.post = \\\"\\\";\\n\\t\\t\\tthis.extraPre = \\\"\\\";\\n\\t\\t\\tthis.extraPost = \\\"\\\";\\n\\t\\t}\\n\\t\\tpublic Context(Context parent, String pre, String post, String extraPre, String extraPost) {\\n\\t\\t\\tthis.pre = parent.pre + pre;\\n\\t\\t\\tthis.post = post + parent.post;\\n\\t\\t\\tthis.extraPre = parent.extraPre + extraPre;\\n\\t\\t\\tthis.extraPost = extraPost + parent.extraPost;\\n\\t\\t}\\n\\t\\tpublic boolean useExtra() {\\n\\t\\t\\treturn !this.pre.equals(this.extraPre) || !this.post.equals(this.extraPost);\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static class NodeData {\\n\\t\\tpublic final String example;\\n\\t\\tpublic final Context context;\\n\\t\\tpublic NodeData(String example, Context context) {\\n\\t\\t\\tthis.example = example;\\n\\t\\t\\tthis.context = context;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static interface Node {\\n\\t\\tpublic abstract List<Node> getChildren();\\n\\t\\tpublic abstract NodeData getData();\\n\\t}\\n\\t\\n\\tpublic static class ConstantNode implements Node {\\n\\t\\tprivate final NodeData data;\\n\\t\\tpublic ConstantNode(NodeData data) {\\n\\t\\t\\tthis.data = data;\\n\\t\\t}\\n\\t\\tpublic List<Node> getChildren() {\\n\\t\\t\\treturn new ArrayList<Node>();\\n\\t\\t}\\n\\t\\tpublic NodeData getData() {\\n\\t\\t\\treturn this.data;\\n\\t\\t}\\n\\t\\tpublic String toString() {\\n\\t\\t\\treturn this.data.example;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static class MultiConstantNode implements Node {\\n\\t\\tprivate final NodeData data;\\n\\t\\tpublic final List<Set<Character>> characterOptions = new ArrayList<Set<Character>>();\\n\\t\\tpublic final List<Set<Character>> characterChecks = new ArrayList<Set<Character>>();\\n\\t\\tpublic MultiConstantNode(NodeData data, List<List<Character>> characterOptions, List<List<Character>> characterChecks) {\\n\\t\\t\\tthis.data = data;\\n\\t\\t\\tif(characterOptions.size() != characterChecks.size()) {\\n\\t\\t\\t\\tthrow new RuntimeException(\\\"Invalid characters!\\\");\\n\\t\\t\\t}\\n\\t\\t\\tfor(List<Character> characters : characterOptions) {\\n\\t\\t\\t\\tthis.characterOptions.add(new LinkedHashSet<Character>(characters));\\n\\t\\t\\t}\\n\\t\\t\\tfor(List<Character>characters : characterChecks) {\\n\\t\\t\\t\\tthis.characterChecks.add(new LinkedHashSet<Character>(characters));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpublic List<Node> getChildren() {\\n\\t\\t\\treturn new ArrayList<Node>();\\n\\t\\t}\\n\\t\\tpublic NodeData getData() {\\n\\t\\t\\treturn this.data;\\n\\t\\t}\\n\\t\\tpublic String toString() {\\n\\t\\t\\tStringBuilder sb = new StringBuilder();\\n\\t\\t\\tfor(Set<Character> characterOption : this.characterOptions) {\\n\\t\\t\\t\\tsb.append(\\\"(\\\");\\n\\t\\t\\t\\tfor(char character : characterOption) {\\n\\t\\t\\t\\t\\tsb.append(character).append(\\\"+\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tsb.replace(sb.length()-1, sb.length(), \\\")\\\");\\n\\t\\t\\t}\\n\\t\\t\\treturn sb.toString();\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static class AlternationNode implements Node {\\n\\t\\tprivate final NodeData data;\\n\\t\\tpublic final Node first;\\n\\t\\tpublic final Node second;\\n\\t\\tpublic AlternationNode(NodeData data, Node first, Node second) {\\n\\t\\t\\tthis.data = data;\\n\\t\\t\\tthis.first = first;\\n\\t\\t\\tthis.second = second;\\n\\t\\t}\\n\\t\\tpublic List<Node> getChildren() {\\n\\t\\t\\tList<Node> children = new ArrayList<Node>();\\n\\t\\t\\tchildren.add(this.first);\\n\\t\\t\\tchildren.add(this.second);\\n\\t\\t\\treturn children;\\n\\t\\t}\\n\\t\\tpublic NodeData getData() {\\n\\t\\t\\treturn this.data;\\n\\t\\t}\\n\\t\\tpublic String toString() {\\n\\t\\t\\treturn \\\"(\\\" + this.first.toString() + \\\")+(\\\" + this.second.toString(); \\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static class MultiAlternationNode implements Node {\\n\\t\\tprivate final NodeData data;\\n\\t\\tprivate final List<Node> children = new ArrayList<Node>();\\n\\t\\tpublic MultiAlternationNode(NodeData data, List<Node> children) {\\n\\t\\t\\tthis.data = data;\\n\\t\\t\\tthis.children.addAll(children);\\n\\t\\t}\\n\\t\\tpublic List<Node> getChildren() {\\n\\t\\t\\tList<Node> newChildren = new ArrayList<Node>();\\n\\t\\t\\tnewChildren.addAll(this.children);\\n\\t\\t\\treturn newChildren;\\n\\t\\t}\\n\\t\\tpublic NodeData getData() {\\n\\t\\t\\treturn this.data;\\n\\t\\t}\\n\\t\\tpublic String toString() {\\n\\t\\t\\tStringBuilder sb = new StringBuilder();\\n\\t\\t\\tfor(Node child : this.children) {\\n\\t\\t\\t\\tsb.append(\\\"(\\\").append(child.toString()).append(\\\")+\\\");\\n\\t\\t\\t}\\n\\t\\t\\treturn sb.substring(0, sb.length()-1);\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static class RepetitionNode implements Node {\\n\\t\\tprivate final NodeData data;\\n\\t\\tpublic final Node start;\\n\\t\\tpublic final Node rep;\\n\\t\\tpublic final Node end;\\n\\t\\tpublic RepetitionNode(NodeData data, Node start, Node rep, Node end) {\\n\\t\\t\\tthis.data = data;\\n\\t\\t\\tthis.start = start;\\n\\t\\t\\tthis.rep = rep;\\n\\t\\t\\tthis.end = end;\\n\\t\\t}\\n\\t\\tpublic List<Node> getChildren() {\\n\\t\\t\\tList<Node> children = new ArrayList<Node>();\\n\\t\\t\\tchildren.add(this.start);\\n\\t\\t\\tchildren.add(this.rep);\\n\\t\\t\\tchildren.add(this.end);\\n\\t\\t\\treturn children;\\n\\t\\t}\\n\\t\\tpublic NodeData getData() {\\n\\t\\t\\treturn this.data;\\n\\t\\t}\\n\\t\\tpublic String toString() {\\n\\t\\t\\treturn this.start.toString() + \\\"(\\\" + this.rep.toString() + \\\")*\\\" + this.end.toString();\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static class NodeMerges {\\n\\t\\tprivate final MultivalueMap<Node,Node> merges = new MultivalueMap<Node,Node>();\\n\\t\\tpublic void add(Node first, Node second) {\\n\\t\\t\\tthis.merges.add(first, second);\\n\\t\\t\\tthis.merges.add(second, first);\\n\\t\\t}\\n\\t\\tpublic void addAll(NodeMerges other) {\\n\\t\\t\\tfor(Node first : other.keySet()) {\\n\\t\\t\\t\\tfor(Node second : other.get(first)) {\\n\\t\\t\\t\\t\\tthis.add(first, second);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpublic Set<Node> get(Node node) {\\n\\t\\t\\treturn this.merges.get(node);\\n\\t\\t}\\n\\t\\tpublic Set<Node> keySet() {\\n\\t\\t\\treturn this.merges.keySet();\\n\\t\\t}\\n\\t\\tpublic boolean contains(Node first, Node second) {\\n\\t\\t\\treturn this.merges.get(first).contains(second);\\n\\t\\t}\\n\\t}\\n\\t\\n\\tprivate static void getAllNodesHelper(Node root, List<Node> nodes) {\\n\\t\\tnodes.add(root);\\n\\t\\tfor(Node child : root.getChildren()) {\\n\\t\\t\\tgetAllNodesHelper(child, nodes);\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static List<Node> getAllNodes(Node root) {\\n\\t\\tList<Node> nodes = new ArrayList<Node>();\\n\\t\\tgetAllNodesHelper(root, nodes);\\n\\t\\treturn nodes;\\n\\t}\\n\\t\\n\\tprivate static void getDescendantsHelper(Node node, List<Node> descendants) {\\n\\t\\tdescendants.add(node);\\n\\t\\tfor(Node child : node.getChildren()) {\\n\\t\\t\\tgetDescendantsHelper(child, descendants);\\n\\t\\t}\\n\\t}\\n\\t\\n\\tpublic static List<Node> getDescendants(Node node) {\\n\\t\\tList<Node> descendants = new ArrayList<Node>();\\n\\t\\tgetDescendantsHelper(node, descendants);\\n\\t\\treturn descendants;\\n\\t}\\n}\"}, {\"identifier\":\"AlternationNode\", \"path\":\"src/glade/grammar/GrammarUtils.java\", \"snippet\":\"public static class AlternationNode implements Node {\\n\\tprivate final NodeData data;\\n\\tpublic final Node first;\\n\\tpublic final Node second;\\n\\tpublic AlternationNode(NodeData data, Node first, Node second) {\\n\\t\\tthis.data = data;\\n\\t\\tthis.first = first;\\n\\t\\tthis.second = second;\\n\\t}\\n\\tpublic List<Node> getChildren() {\\n\\t\\tList<Node> children = new ArrayList<Node>();\\n\\t\\tchildren.add(this.first);\\n\\t\\tchildren.add(this.second);\\n\\t\\treturn children;\\n\\t}\\n\\tpublic NodeData getData() {\\n\\t\\treturn this.data;\\n\\t}\\n\\tpublic String toString() {\\n\\t\\treturn \\\"(\\\" + this.first.toString() + \\\")+(\\\" + this.second.toString(); \\n\\t}\\n}\"}, {\"identifier\":\"ConstantNode\", \"path\":\"src/glade/grammar/GrammarUtils.java\", \"snippet\":\"public static class ConstantNode implements Node {\\n\\tprivate final NodeData data;\\n\\tpublic ConstantNode(NodeData data) {\\n\\t\\tthis.data = data;\\n\\t}\\n\\tpublic List<Node> getChildren() {\\n\\t\\treturn new ArrayList<Node>();\\n\\t}\\n\\tpublic NodeData getData() {\\n\\t\\treturn this.data;\\n\\t}\\n\\tpublic String toString() {\\n\\t\\treturn this.data.example;\\n\\t}\\n}\"}, {\"identifier\":\"MultiAlternationNode\", \"path\":\"src/glade/grammar/GrammarUtils.java\", \"snippet\":\"public static class MultiAlternationNode implements Node {\\n\\tprivate final NodeData data;\\n\\tprivate final List<Node> children = new ArrayList<Node>();\\n\\tpublic MultiAlternationNode(NodeData data, List<Node> children) {\\n\\t\\tthis.data = data;\\n\\t\\tthis.children.addAll(children);\\n\\t}\\n\\tpublic List<Node> getChildren() {\\n\\t\\tList<Node> newChildren = new ArrayList<Node>();\\n\\t\\tnewChildren.addAll(this.children);\\n\\t\\treturn newChildren;\\n\\t}\\n\\tpublic NodeData getData() {\\n\\t\\treturn this.data;\\n\\t}\\n\\tpublic String toString() {\\n\\t\\tStringBuilder sb = new StringBuilder();\\n\\t\\tfor(Node child : this.children) {\\n\\t\\t\\tsb.append(\\\"(\\\").append(child.toString()).append(\\\")+\\\");\\n\\t\\t}\\n\\t\\treturn sb.substring(0, sb.length()-1);\\n\\t}\\n}\"}, {\"identifier\":\"MultiConstantNode\", \"path\":\"src/glade/grammar/GrammarUtils.java\", \"snippet\":\"public static class MultiConstantNode implements Node {\\n\\tprivate final NodeData data;\\n\\tpublic final List<Set<Character>> characterOptions = new ArrayList<Set<Character>>();\\n\\tpublic final List<Set<Character>> characterChecks = new ArrayList<Set<Character>>();\\n\\tpublic MultiConstantNode(NodeData data, List<List<Character>> characterOptions, List<List<Character>> characterChecks) {\\n\\t\\tthis.data = data;\\n\\t\\tif(characterOptions.size() != characterChecks.size()) {\\n\\t\\t\\tthrow new RuntimeException(\\\"Invalid characters!\\\");\\n\\t\\t}\\n\\t\\tfor(List<Character> characters : characterOptions) {\\n\\t\\t\\tthis.characterOptions.add(new LinkedHashSet<Character>(characters));\\n\\t\\t}\\n\\t\\tfor(List<Character>characters : characterChecks) {\\n\\t\\t\\tthis.characterChecks.add(new LinkedHashSet<Character>(characters));\\n\\t\\t}\\n\\t}\\n\\tpublic List<Node> getChildren() {\\n\\t\\treturn new ArrayList<Node>();\\n\\t}\\n\\tpublic NodeData getData() {\\n\\t\\treturn this.data;\\n\\t}\\n\\tpublic String toString() {\\n\\t\\tStringBuilder sb = new StringBuilder();\\n\\t\\tfor(Set<Character> characterOption : this.characterOptions) {\\n\\t\\t\\tsb.append(\\\"(\\\");\\n\\t\\t\\tfor(char character : characterOption) {\\n\\t\\t\\t\\tsb.append(character).append(\\\"+\\\");\\n\\t\\t\\t}\\n\\t\\t\\tsb.replace(sb.length()-1, sb.length(), \\\")\\\");\\n\\t\\t}\\n\\t\\treturn sb.toString();\\n\\t}\\n}\"}, {\"identifier\":\"Node\", \"path\":\"src/glade/grammar/GrammarUtils.java\", \"snippet\":\"public static interface Node {\\n\\tpublic abstract List<Node> getChildren();\\n\\tpublic abstract NodeData getData();\\n}\"}, {\"identifier\":\"NodeMerges\", \"path\":\"src/glade/grammar/GrammarUtils.java\", \"snippet\":\"public static class NodeMerges {\\n\\tprivate final MultivalueMap<Node,Node> merges = new MultivalueMap<Node,Node>();\\n\\tpublic void add(Node first, Node second) {\\n\\t\\tthis.merges.add(first, second);\\n\\t\\tthis.merges.add(second, first);\\n\\t}\\n\\tpublic void addAll(NodeMerges other) {\\n\\t\\tfor(Node first : other.keySet()) {\\n\\t\\t\\tfor(Node second : other.get(first)) {\\n\\t\\t\\t\\tthis.add(first, second);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic Set<Node> get(Node node) {\\n\\t\\treturn this.merges.get(node);\\n\\t}\\n\\tpublic Set<Node> keySet() {\\n\\t\\treturn this.merges.keySet();\\n\\t}\\n\\tpublic boolean contains(Node first, Node second) {\\n\\t\\treturn this.merges.get(first).contains(second);\\n\\t}\\n}\"}, {\"identifier\":\"RepetitionNode\", \"path\":\"src/glade/grammar/GrammarUtils.java\", \"snippet\":\"public static class RepetitionNode implements Node {\\n\\tprivate final NodeData data;\\n\\tpublic final Node start;\\n\\tpublic final Node rep;\\n\\tpublic final Node end;\\n\\tpublic RepetitionNode(NodeData data, Node start, Node rep, Node end) {\\n\\t\\tthis.data = data;\\n\\t\\tthis.start = start;\\n\\t\\tthis.rep = rep;\\n\\t\\tthis.end = end;\\n\\t}\\n\\tpublic List<Node> getChildren() {\\n\\t\\tList<Node> children = new ArrayList<Node>();\\n\\t\\tchildren.add(this.start);\\n\\t\\tchildren.add(this.rep);\\n\\t\\tchildren.add(this.end);\\n\\t\\treturn children;\\n\\t}\\n\\tpublic NodeData getData() {\\n\\t\\treturn this.data;\\n\\t}\\n\\tpublic String toString() {\\n\\t\\treturn this.start.toString() + \\\"(\\\" + this.rep.toString() + \\\")*\\\" + this.end.toString();\\n\\t}\\n}\"}, {\"identifier\":\"Log\", \"path\":\"src/glade/util/Log.java\", \"snippet\":\"public class Log {\\n\\tprivate static String logName = null;\\n\\tprivate static boolean verboseValue = false;\\n\\t\\n\\tpublic static void init(String log, boolean verbose) {\\n\\t\\tlogName = log;\\n\\t\\tverboseValue = verbose;\\n\\t\\tnew File(logName).delete();\\n\\t}\\n\\t\\n\\tpublic static void info(String s) {\\n\\t\\tif(logName == null) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(verboseValue) {\\n\\t\\t\\tSystem.out.println(s);\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tPrintWriter pw = new PrintWriter(new FileOutputStream(logName, true));\\n\\t\\t\\tpw.println(s);\\n\\t\\t\\tpw.close();\\n\\t\\t} catch(IOException e) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t}\\n\\t}\\n\\n\\tpublic static void err(Exception e) {\\n\\t\\tif(verboseValue) {\\n\\t\\t\\te.printStackTrace();\\n\\t\\t} else {\\n\\t\\t\\tSystem.err.println(e.getMessage());\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tPrintWriter pw = new PrintWriter(new FileOutputStream(logName, true));\\n\\t\\t\\te.printStackTrace(pw);\\n\\t\\t\\tpw.close();\\n\\t\\t} catch(IOException ep) {\\n\\t\\t\\tep.printStackTrace();\\n\\t\\t}\\n\\t}\\n}\"}, {\"identifier\":\"DiscriminativeOracle\", \"path\":\"src/glade/util/OracleUtils.java\", \"snippet\":\"public interface DiscriminativeOracle {\\n\\tpublic abstract boolean query(String query);\\n}\"}, {\"identifier\":\"MultivalueMap\", \"path\":\"src/glade/util/Utils.java\", \"snippet\":\"public static class MultivalueMap<K,V> extends HashMap<K,Set<V>> {\\n\\tprivate static final long serialVersionUID = -6390444829513305915L;\\n\\n\\tpublic void add(K k, V v) {\\n\\t\\tensure(k).add(v);\\n\\t}\\n\\t\\t\\n\\tpublic Set<V> ensure(K k) {\\n\\t\\tSet<V> vSet = super.get(k);\\n\\t\\tif(vSet == null) {\\n\\t\\t\\tsuper.put(k, vSet = new HashSet<V>());\\n\\t\\t}\\n\\t\\treturn vSet;\\n\\t}\\n\\n\\t@Override\\n\\tpublic Set<V> get(Object k) {\\n\\t\\tSet<V> vSet = super.get(k);\\n\\t\\treturn vSet == null ? new HashSet<V>() : vSet;\\n\\t}\\n}\"}]", "import_statement": "import glade.grammar.GrammarUtils;\nimport glade.grammar.GrammarUtils.AlternationNode;\nimport glade.grammar.GrammarUtils.ConstantNode;\nimport glade.grammar.GrammarUtils.MultiAlternationNode;\nimport glade.grammar.GrammarUtils.MultiConstantNode;\nimport glade.grammar.GrammarUtils.Node;\nimport glade.grammar.GrammarUtils.NodeMerges;\nimport glade.grammar.GrammarUtils.RepetitionNode;\nimport glade.util.Log;\nimport glade.util.OracleUtils.DiscriminativeOracle;\nimport glade.util.Utils.MultivalueMap;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;", "code": "// Copyright 2015-2016 Stanford University\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage glade.grammar.synthesize;\n\n\n\npublic class MergesSynthesis {\n\tpublic static NodeMerges getMergesMultiple(List<Node> roots, DiscriminativeOracle oracle) {\n\t\tNodeMerges merges = new NodeMerges();\n\t\tNodeMerges processed = new NodeMerges();\n\t\tfor(Node first : roots) {\n\t\t\tfor(Node second : roots) {\n\t\t\t\tif(processed.contains(first, second)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tprocessed.add(first, second);\n\t\t\t\tmerges.addAll(getMergesSingle(first, second, oracle));\n\t\t\t}\n\t\t}\n\t\treturn merges;\n\t}\n\t\n\tpublic static NodeMerges getMergesSingle(Node firstRoot, Node secondRoot, DiscriminativeOracle oracle) {\n\t\tNodeMerges merges = new NodeMerges();\n\t\tNodeMerges processedMerges = new NodeMerges();\n\t\tMultivalueMap<Node,String> pairFirst = getAllExamples(firstRoot);\n\t\tMultivalueMap<Node,String> pairSecond = getAllExamples(secondRoot);", "next_line": "\t\tfor(Node first : GrammarUtils.getAllNodes(firstRoot)) {", "gold_snippet_index": 0, "id": 8, "__internal_uuid__": "cb4cf7c2-e950-4ab0-a487-845cbdffaf66"}
{"repo_name": "dockersamples/atsea-sample-shop-app", "file_path": "app/src/test/java/com/docker/atsea/test/UnitTest.java", "context": "[{\"identifier\":\"Customer\", \"path\":\"app/src/main/java/com/docker/atsea/model/Customer.java\", \"snippet\":\"@Entity\\n@Table(name = \\\"customer\\\")\\npublic class Customer implements Serializable {\\n\\t\\n\\tprivate static final long serialVersionUID = -8697455919895226841L;\\n\\n\\t@Id\\n\\t@GeneratedValue(strategy =  GenerationType.IDENTITY)\\n    private Long customerId;\\n\\t\\n\\t@NotEmpty\\n    @Column(name = \\\"name\\\", length = 255, nullable = false)\\n    private String name;\\n\\t\\n\\t@NotEmpty\\n\\t@Column(name = \\\"address\\\", length = 512, nullable = false)\\n\\t\\n\\tprivate String address;\\n\\t@NotEmpty\\n\\t@Column(name = \\\"email\\\", length = 128, nullable = false)\\n    private String email;\\n\\t\\n\\t@NotEmpty\\n\\t@Column(name = \\\"phone\\\", length = 32, nullable = false)\\n    private String phone;\\n\\t\\n\\t@NotEmpty\\n\\t@Column(name = \\\"username\\\", length = 255, nullable = false)\\n    private String username;\\n\\t\\n\\t@NotEmpty\\n\\t@Column(name = \\\"password\\\", length = 255, nullable = false)\\n    private String password;\\n\\t\\n\\t@Column(name = \\\"enabled\\\", nullable = false)\\n\\t@Type( type = \\\"org.hibernate.type.NumericBooleanType\\\")\\n\\tprivate boolean enabled;\\n\\t\\n\\t@NotEmpty\\n\\t@Column(name = \\\"role\\\", columnDefinition = \\\"varchar(5) DEFAULT 'USER'\\\")\\n\\tprivate String role;\\n\\t\\n\\tpublic Customer() {\\n\\t\\t\\n\\t}\\n\\t\\n\\tpublic Customer(Long customerId, String name, String address, String email, String phone,\\n\\t\\t\\tString username, String password, Boolean enabled, String role) {\\n\\t\\tthis.customerId = customerId;\\n\\t\\tthis.name = name;\\n\\t\\tthis.address = address;\\n\\t\\tthis.email = email;\\n\\t\\tthis.phone = phone;\\n\\t\\tthis.username = username;\\n\\t\\tthis.password = password;\\n\\t\\tthis.enabled = enabled;\\n\\t\\tthis.role = role;\\n\\t}\\n\\t\\n\\tpublic Long getCustomerId() {\\n    \\treturn customerId;\\n    }\\n    \\n    public void setCustomerId(Long customerId) {\\n        this.customerId = customerId;\\n    }\\n    \\n    public String getName() {\\n        return name;\\n    }\\n \\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n \\n    public String getEmail() {\\n        return email;\\n    }\\n \\n    public void setEmail(String email) {\\n        this.email = email;\\n    }\\n \\n    public String getAddress() {\\n        return address;\\n    }\\n \\n    public void setAddress(String address) {\\n        this.address = address;\\n    }\\n \\n    public String getPhone() {\\n        return phone;\\n    }\\n \\n    public void setPhone(String phone) {\\n        this.phone = phone;\\n    }\\n    \\n    public String getUsername() {\\n        return username;\\n    }\\n \\n    public void setUsername(String username) {\\n        this.username = username;\\n    }\\n    \\n    public String getPassword() {\\n        return password;\\n    }\\n \\n    public void setPassword(String password) {\\n        this.password = password;\\n    }\\n       \\n    public Boolean getEnabled() {\\n    \\treturn enabled;\\n    }\\n    \\n    public void setEnabled(Boolean enabled) {\\n    \\tthis.enabled = enabled;\\n    }\\n    \\n    public String getRole() {\\n    \\treturn role;\\n    }\\n    \\n    public void setRole(String role) {\\n    \\tthis.role = role;\\n    }\\n    \\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"Customer [customerId=\\\" + customerId \\n\\t\\t\\t\\t          + \\\", name=\\\" + name \\n\\t\\t\\t\\t          + \\\", username=\\\" + username\\n\\t\\t\\t\\t          + \\\", address=\\\" + address \\n\\t\\t\\t\\t          + \\\", email=\\\" + email \\n\\t\\t\\t\\t          + \\\", phone=\\\" + phone \\n\\t\\t\\t\\t          + \\\", password=\\\" + password + \\n\\t\\t\\t\\t          \\\"]\\\";\\n\\t}\\n    \\n}\"}, {\"identifier\":\"Order\", \"path\":\"app/src/main/java/com/docker/atsea/model/Order.java\", \"snippet\":\"@Entity\\n@Table(name = \\\"orders\\\")\\n@JsonInclude(Include.NON_NULL)\\npublic class Order implements Serializable {\\n\\t\\n\\tprivate static final long serialVersionUID = 8367647197454666804L;\\n\\n\\t@Id\\n    @GeneratedValue(strategy =  GenerationType.IDENTITY)\\n    private Long orderId;\\n\\t\\n    @CreationTimestamp\\n    @Temporal(TemporalType.DATE)\\n    @Column(name = \\\"orderdate\\\" )\\n    private Date orderDate;\\n        \\n    @Column(name = \\\"customerid\\\")\\n    private Long customerId;\\n    \\n    @ElementCollection\\n    @MapKeyColumn(name=\\\"productid\\\")\\n    @Column(name = \\\"productsordered\\\")\\n    @CollectionTable(name=\\\"orderquantities\\\", joinColumns=@JoinColumn(name=\\\"orderid\\\"))\\n    Map<Integer, Integer> productsOrdered = new HashMap<Integer, Integer>();\\n\\n    \\n    public Order(){\\n\\t\\t\\n\\t}\\n\\t\\n\\tpublic Order(Long orderId, Date orderDate, Long productId, Map<Integer, Integer> productsOrdered) {\\n    \\tthis.orderId = orderId;\\n    \\tthis.orderDate = orderDate;\\n    \\tthis.productsOrdered = productsOrdered;\\n\\t}\\n\\n    public Order(Long orderId, Date orderDate, Long productId, Map<Integer, Integer> productsOrdered, Long customerId) { \\n    \\tthis.orderId = orderId;\\n    \\tthis.orderDate = orderDate;\\n    \\tthis.productsOrdered = productsOrdered;\\n    \\tthis.customerId = customerId;\\n    };\\n\\n\\tpublic Long getCustomerId() {\\n\\t\\treturn customerId;\\n\\t}\\n\\t\\n    public void setCustomerId(Long customerId) {\\n        this.customerId = customerId;\\n    }\\n    \\n    public long getOrderId() {\\n    \\treturn orderId;\\n    }\\n    \\n    public void setOrderId(long orderId) {\\n        this.orderId = orderId;\\n    }\\n    \\n    public Date getOrderDate() {\\n    \\treturn orderDate;\\n    }\\n    \\n    public void setOrderDate(Date orderDate) {\\n        this.orderDate = orderDate;\\n    }\\n        \\n    public Map<Integer, Integer> getProductsOrdered() {\\n    \\treturn productsOrdered;\\n    }\\n    \\n    public void setProductsOrdered(Map<Integer, Integer> productsOrdered) {\\n    \\tthis.productsOrdered = productsOrdered;\\n    }\\n    \\t\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"Order [customerId = \\\" + customerId + \\n\\t\\t\\t\\t      \\\"orderDate= \\\" + orderDate + \\n\\t\\t\\t\\t      \\\"orderId = \\\"+ orderId + \\n\\t\\t\\t\\t      \\\"productsOrdered = \\\" + productsOrdered +\\n\\t\\t\\t\\t      \\\"]\\\";\\n\\t}\\n}\"}, {\"identifier\":\"Product\", \"path\":\"app/src/main/java/com/docker/atsea/model/Product.java\", \"snippet\":\"@Entity\\n@Table(name=\\\"product\\\", uniqueConstraints = { @UniqueConstraint(columnNames = \\\"productid\\\")})\\n@JsonInclude(Include.NON_NULL)\\npublic class Product implements Serializable {\\n\\n\\tprivate static final long serialVersionUID = 3222530297013481114L;\\n\\t \\n    @Id\\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\\n    private long productId;\\n    \\n    @NotEmpty\\n    @Column(name = \\\"name\\\", length = 255, nullable = false)\\n    private String name;\\n    \\n    @NotEmpty\\n    @Column(name = \\\"price\\\", nullable = false)\\n    private double price;\\n    \\n    @Column(name = \\\"description\\\", length=10485760, nullable = false)\\n    private String description;\\n        \\n    @NotEmpty\\n    @Column(name = \\\"image\\\", length = Integer.MAX_VALUE, nullable = true)\\n    private String image; \\n          \\n\\tpublic Product() {\\n\\t\\t\\n\\t}\\n\\t\\n\\tpublic Product(Long productId, String name, String description, double price, String image) {\\n\\t\\tthis.productId = productId;\\n\\t\\tthis.name = name;\\n\\t\\tthis.description = description;\\n\\t\\tthis.price = price;\\n\\t\\tthis.image = image;\\n\\t}\\n\\n    public long getProductId() {\\n    \\treturn productId;\\n    }\\n    \\n    public void setProductId(long productId) {\\n        this.productId = productId;\\n    }\\n \\n    public String getName() {\\n        return name;\\n    }\\n \\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n \\n    public double getPrice() {\\n        return price;\\n    }\\n \\n    public void setPrice(double price) {\\n        this.price = price;\\n    }\\n    \\n    public String getDescription() {\\n    \\treturn description;\\n    }\\n    \\n    public void setDescription(String description) {\\n    \\tthis.description = description;\\n    }\\n  \\n    public String getImage() {\\n        return image;\\n    }\\n \\n    public void setImage(String image) {\\n        this.image = image;\\n    }\\n    \\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"Product [productId=\\\" + productId +\\n\\t\\t\\t\\t         \\\", name=\\\" + name +\\n\\t\\t\\t\\t         \\\", price=\\\" + price +\\n\\t\\t\\t\\t         \\\", description=\\\" + description +\\n\\t\\t\\t\\t         \\\", image=\\\" + image + \\n\\t\\t\\t\\t         \\\"]\\\";\\n\\t}\\n\\t\\n}\"}, {\"identifier\":\"CustomerRepository\", \"path\":\"app/src/main/java/com/docker/atsea/repositories/CustomerRepository.java\", \"snippet\":\"@Repository\\npublic interface CustomerRepository extends JpaRepository<Customer, Long> {\\n\\t\\n\\tCustomer findOne(Long customerId);\\n\\t\\n\\tCustomer findByName(String name);\\n\\t\\n\\t// adding find by username\\n\\t@Query(\\\"SELECT c FROM Customer c WHERE c.username = :userName\\\")\\n\\tCustomer findByUserName(@Param(\\\"userName\\\") String userName);\\n}\"}, {\"identifier\":\"OrderRepository\", \"path\":\"app/src/main/java/com/docker/atsea/repositories/OrderRepository.java\", \"snippet\":\"@Repository\\n@Transactional\\npublic interface OrderRepository extends JpaRepository<Order, Long> {\\n\\n\\n}\"}, {\"identifier\":\"ProductRepository\", \"path\":\"app/src/main/java/com/docker/atsea/repositories/ProductRepository.java\", \"snippet\":\"@Repository\\n@Transactional\\npublic interface ProductRepository extends JpaRepository<Product, Long> {\\n\\t\\n\\tProduct findByName(String name);\\n}\"}, {\"identifier\":\"CustomerService\", \"path\":\"app/src/main/java/com/docker/atsea/service/CustomerService.java\", \"snippet\":\"public interface CustomerService {\\n\\n\\tCustomer findById(Long customerId);\\n\\n\\tCustomer findByUserName(String name);\\n\\t\\n\\tCustomer findByName(String name);\\n\\t\\n\\tCustomer createCustomer(Customer customer);\\n\\n\\tvoid saveCustomer(Customer customer);\\n\\n\\tvoid updateCustomer(Customer customer);\\n\\n\\tvoid deleteCustomerById(Long customerId);\\n\\n\\tvoid deleteAllCustomers();\\n\\n\\tList<Customer> findAllCustomers();\\n\\n\\tboolean customerExist(Customer customer);\\n}\"}, {\"identifier\":\"CustomerServiceImpl\", \"path\":\"app/src/main/java/com/docker/atsea/service/CustomerServiceImpl.java\", \"snippet\":\"@Service(\\\"customerService\\\")\\n@Transactional\\npublic class CustomerServiceImpl implements CustomerService {\\n\\t\\n\\t@Autowired\\n\\tprivate CustomerRepository customerRepository;\\n\\n\\tpublic Customer findById(Long customerId) {\\n\\t\\treturn customerRepository.findOne(customerId);\\n\\t}\\n\\n\\tpublic Customer findByUserName(String name) {\\n\\t\\treturn customerRepository.findByUserName(name);\\n\\t}\\n\\n\\tpublic Customer findByName(String name) {\\n\\t\\treturn customerRepository.findByName(name);\\n\\t}\\n\\t\\n\\tpublic Customer createCustomer(Customer customer) {\\t\\t\\n\\t\\tcustomer = customerRepository.save(customer);\\n\\t\\tcustomerRepository.flush();\\n\\t\\treturn customer;\\n\\t}\\n\\t\\n\\tpublic void saveCustomer(Customer customer) {\\n\\t\\tcustomerRepository.save(customer);\\n\\t}\\n\\n\\tpublic void updateCustomer(Customer customer) {\\n\\t\\tcustomerRepository.save(customer);\\n\\t}\\n\\n\\tpublic void deleteAllCustomers() {\\n\\t\\tcustomerRepository.deleteAll();\\n\\t}\\n\\n\\tpublic List<Customer> findAllCustomers() {\\n\\t\\treturn (List<Customer>) customerRepository.findAll();\\n\\t}\\n\\t\\n\\tpublic boolean customerExist(Customer customer) {\\n\\t\\tSystem.out.println(customer.getUsername());\\n\\t\\treturn customerRepository.findByUserName(customer.getUsername()) != null;\\n\\t}\\n\\n\\tpublic void deleteCustomerById(Long customerId) {\\n\\t\\tcustomerRepository.delete(customerId);\\t\\t\\n\\t}\\n}\"}, {\"identifier\":\"OrderService\", \"path\":\"app/src/main/java/com/docker/atsea/service/OrderService.java\", \"snippet\":\"public interface OrderService {\\n\\n\\tList<Order> findAllOrders();\\n\\t\\n\\tOrder findById(Long orderId);\\n\\t\\n\\tOrder createOrder(Order order);\\n\\t\\n\\tvoid saveOrder(Order order);\\n\\t\\n\\tvoid updateOrder(Order order);\\n\\t\\n\\tvoid deleteOrderById(Long orderId);\\n\\t\\n\\tvoid deleteAllItems();\\n\\n\\tboolean orderExists(Order order);\\t\\n}\"}, {\"identifier\":\"OrderServiceImpl\", \"path\":\"app/src/main/java/com/docker/atsea/service/OrderServiceImpl.java\", \"snippet\":\"@Service(\\\"orderService\\\")\\n@Transactional\\npublic class OrderServiceImpl implements OrderService {\\n\\n\\t@Autowired\\n\\tprivate OrderRepository orderRepository;\\n\\t\\t\\n\\tpublic Order findById(Long orderId) {\\n\\t\\treturn orderRepository.findOne(orderId) ;\\n\\t}\\n\\n\\tpublic Order createOrder(Order order) {\\t\\t\\n\\t\\torder = orderRepository.save(order);\\n\\t\\torderRepository.flush();\\n\\t\\treturn order;\\n\\t}\\n\\n\\tpublic void saveOrder(Order order) {\\n\\t\\torderRepository.save(order);\\n\\t}\\n\\t\\n\\tpublic void updateOrder(Order order) {\\n\\t\\torderRepository.save(order);\\n\\t}\\n\\n\\tpublic void deleteOrderById(Long orderId) {\\n\\t\\torderRepository.delete(orderId);\\n\\t}\\n\\n\\tpublic void deleteAllItems() {\\n\\t\\torderRepository.deleteAll();\\n\\t}\\n\\n\\tpublic boolean orderExists(Order order) {\\n\\t\\treturn findById(order.getOrderId()) != null;\\n\\t}\\n\\n\\tpublic List<Order> findAllOrders() {\\n\\t\\treturn (List<Order>) orderRepository.findAll();\\n\\t}\\t\\n}\"}, {\"identifier\":\"ProductService\", \"path\":\"app/src/main/java/com/docker/atsea/service/ProductService.java\", \"snippet\":\"public interface ProductService {\\n\\t\\n\\tProduct findByName(String name);\\n\\t\\t\\n\\tList<Product> findAllProducts();\\n\\n\\tProduct findById(Long productId);\\n\\t\\n\\n}\"}, {\"identifier\":\"ProductServiceImpl\", \"path\":\"app/src/main/java/com/docker/atsea/service/ProductServiceImpl.java\", \"snippet\":\"@Service(\\\"productService\\\")\\n@Transactional\\npublic class ProductServiceImpl implements ProductService {\\n\\n\\t@Autowired\\n\\tprivate ProductRepository productRepository;\\n\\n\\tpublic List<Product> findAllProducts() {\\n\\t\\treturn productRepository.findAll();\\n\\t}\\n\\n\\tpublic Product findByName(String name) {\\n\\t\\treturn productRepository.findByName(name);\\n\\t}\\n\\n\\tpublic Product findById(Long productId) {\\n\\t\\treturn productRepository.findOne(productId);\\n\\t}\\n}\"}]", "import_statement": "import java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport com.docker.atsea.model.Customer;\nimport com.docker.atsea.model.Order;\nimport com.docker.atsea.model.Product;\nimport com.docker.atsea.repositories.CustomerRepository;\nimport com.docker.atsea.repositories.OrderRepository;\nimport com.docker.atsea.repositories.ProductRepository;\nimport com.docker.atsea.service.CustomerService;\nimport com.docker.atsea.service.CustomerServiceImpl;\nimport com.docker.atsea.service.OrderService;\nimport com.docker.atsea.service.OrderServiceImpl;\nimport com.docker.atsea.service.ProductService;\nimport com.docker.atsea.service.ProductServiceImpl;", "code": "package com.docker.atsea.test;\n\n\n\n\n\n@SuppressWarnings(\"serial\")\n@RunWith(SpringRunner.class)\npublic class UnitTest {\n\t@Mock\n\tCustomerRepository customerRepository;\n\t\n\t@Mock\n\tCustomerService customerService;\n\n\t@InjectMocks\n\tCustomerServiceImpl mockCustomerServiceImpl = new CustomerServiceImpl();\t\n\t\n\t@Mock", "next_line": "\tProductRepository productRepository;", "gold_snippet_index": 5, "id": 9, "__internal_uuid__": "d6055137-d1ea-4613-922d-0e934ceb48c5"}
{"repo_name": "NLPchina/elasticsearch-sql", "file_path": "src/test/java/org/nlpcn/es4sql/SQLFunctionsTest.java", "context": "[{\"identifier\":\"QueryActionElasticExecutor\", \"path\":\"src/main/java/org/elasticsearch/plugin/nlpcn/QueryActionElasticExecutor.java\", \"snippet\":\"public class QueryActionElasticExecutor {\\n\\n    private static final Logger LOGGER = LogManager.getLogger();\\n\\n    public static SearchResponse executeSearchAction(DefaultQueryAction searchQueryAction) throws SqlParseException {\\n        SqlElasticSearchRequestBuilder builder  =  searchQueryAction.explain();\\n        SearchResponse resp = (SearchResponse) builder.get();\\n\\n        //\\n        if (resp.getFailedShards() > 0) {\\n            if (resp.getSuccessfulShards() < 1) {\\n                throw new IllegalStateException(\\\"fail to search[\\\" + builder + \\\"], \\\" + Arrays.toString(resp.getShardFailures()));\\n            }\\n\\n            LOGGER.warn(\\\"The failures that occurred during the search[{}]: {}\\\", builder, Arrays.toString(resp.getShardFailures()));\\n        }\\n\\n        return resp;\\n    }\\n\\n    public static SearchHits executeJoinSearchAction(Client client , ESJoinQueryAction joinQueryAction) throws IOException, SqlParseException {\\n        SqlElasticRequestBuilder joinRequestBuilder = joinQueryAction.explain();\\n        ElasticJoinExecutor executor = ElasticJoinExecutor.createJoinExecutor(client,joinRequestBuilder);\\n        executor.run();\\n        return executor.getHits();\\n    }\\n\\n    public static Aggregations executeAggregationAction(AggregationQueryAction aggregationQueryAction) throws SqlParseException {\\n        SqlElasticSearchRequestBuilder select =  aggregationQueryAction.explain();\\n        SearchResponse resp = (SearchResponse) select.get();\\n\\n        //\\n        if (resp.getFailedShards() > 0) {\\n            if (resp.getSuccessfulShards() < 1) {\\n                throw new IllegalStateException(\\\"fail to aggregation[\\\" + select + \\\"], \\\" + Arrays.toString(resp.getShardFailures()));\\n            }\\n\\n            LOGGER.warn(\\\"The failures that occurred during the aggregation[{}]: {}\\\", select, Arrays.toString(resp.getShardFailures()));\\n        }\\n\\n        return resp.getAggregations();\\n    }\\n\\n    public static ActionResponse executeDeleteAction(DeleteQueryAction deleteQueryAction) throws SqlParseException {\\n        return deleteQueryAction.explain().get();\\n    }\\n\\n    public static SearchHits executeMultiQueryAction(Client client, MultiQueryAction queryAction) throws SqlParseException, IOException {\\n        SqlElasticRequestBuilder multiRequestBuilder = queryAction.explain();\\n        ElasticHitsExecutor executor = MultiRequestExecutorFactory.createExecutor(client, (MultiQueryRequestBuilder) multiRequestBuilder);\\n        executor.run();\\n        return executor.getHits();\\n    }\\n\\n    public static Object executeAnyAction(Client client , QueryAction queryAction) throws SqlParseException, IOException {\\n        if(queryAction instanceof DefaultQueryAction)\\n            return executeSearchAction((DefaultQueryAction) queryAction);\\n        if(queryAction instanceof AggregationQueryAction)\\n            return executeAggregationAction((AggregationQueryAction) queryAction);\\n        if(queryAction instanceof ESJoinQueryAction)\\n            return executeJoinSearchAction(client, (ESJoinQueryAction) queryAction);\\n        if(queryAction instanceof MultiQueryAction)\\n            return executeMultiQueryAction(client, (MultiQueryAction) queryAction);\\n        if(queryAction instanceof DeleteQueryAction )\\n            return executeDeleteAction((DeleteQueryAction) queryAction);\\n        if (queryAction instanceof  ShowQueryAction)\\n            return ((ShowQueryAction)queryAction).explain().get();\\n        return null;\\n    }\\n\\n\\n}\"}, {\"identifier\":\"CSVResult\", \"path\":\"src/main/java/org/elasticsearch/plugin/nlpcn/executors/CSVResult.java\", \"snippet\":\"public class CSVResult {\\n    private final List<String> headers;\\n    private final List<String> lines;\\n    private long count; //对于聚合类型，返回数量为 limit 数量\\n\\n    public CSVResult(List<String> headers, List<String> lines, long count) {\\n        this.headers = headers;\\n        this.lines = lines;\\n        this.count = count;\\n    }\\n\\n    public CSVResult(List<String> headers, List<String> lines) {\\n        this.headers = headers;\\n        this.lines = lines;\\n    }\\n\\n    public List<String> getHeaders() {\\n        return headers;\\n    }\\n\\n    public List<String> getLines() {\\n        return lines;\\n    }\\n\\n    public long getCount() {\\n        return count;\\n    }\\n\\n}\"}, {\"identifier\":\"CSVResultsExtractor\", \"path\":\"src/main/java/org/elasticsearch/plugin/nlpcn/executors/CSVResultsExtractor.java\", \"snippet\":\"public class CSVResultsExtractor {\\n    private final boolean includeType;\\n    private final boolean includeScore;\\n    private final boolean includeId;\\n    private final boolean includeScrollId;\\n    private boolean includeIndex;\\n    private int currentLineIndex;\\n    private QueryAction queryAction;\\n\\n    public CSVResultsExtractor(boolean includeScore, boolean includeType, boolean includeId, boolean includeScrollId, QueryAction queryAction) {\\n        this.includeScore = includeScore;\\n        this.includeType = includeType;\\n        this.includeId = includeId;\\n        this.includeScrollId = includeScrollId;\\n        this.currentLineIndex = 0;\\n        this.queryAction = queryAction;\\n    }\\n\\n    public CSVResultsExtractor(boolean includeIndex, boolean includeScore, boolean includeType, boolean includeId, boolean includeScrollId, QueryAction queryAction) {\\n        this.includeIndex = includeIndex;\\n        this.includeScore = includeScore;\\n        this.includeType = includeType;\\n        this.includeId = includeId;\\n        this.includeScrollId = includeScrollId;\\n        this.currentLineIndex = 0;\\n        this.queryAction = queryAction;\\n    }\\n\\n\\n    public CSVResult extractResults(Object queryResult, boolean flat, String separator, boolean quote) throws CsvExtractorException {\\n        if(queryResult instanceof SearchHits){\\n            SearchHit[] hits = ((SearchHits) queryResult).getHits();\\n            List<Map<String,Object>> docsAsMap = new ArrayList<>();\\n            Set<String> hitFieldNames = new HashSet<>();\\n            List<String> headers = createHeadersAndFillDocsMap(flat, hits, null, docsAsMap, hitFieldNames);\\n            List<String> csvLines = createCSVLinesFromDocs(flat, separator, quote, docsAsMap, headers, hitFieldNames);\\n            return new CSVResult(headers,csvLines);\\n        }\\n        if(queryResult instanceof Aggregations){\\n            List<String> headers = new ArrayList<>();\\n            List<List<String>> lines = new ArrayList<>();\\n            lines.add(new ArrayList<String>());\\n            handleAggregations((Aggregations) queryResult, headers, lines);\\n\\n            List<String> csvLines  = new ArrayList<>();\\n            for(List<String> simpleLine : lines){\\n                csvLines.add(Joiner.on(separator).join(quote ? simpleLine.stream().map(Util::quoteString).collect(Collectors.toList()) : simpleLine));\\n            }\\n\\n            //todo: need to handle more options for aggregations:\\n            //Aggregations that inhrit from base\\n            //ScriptedMetric\\n\\n            return new CSVResult(headers,csvLines);\\n\\n        }\\n        if (queryResult instanceof SearchResponse) {\\n            SearchHit[] hits = ((SearchResponse) queryResult).getHits().getHits();\\n            List<Map<String, Object>> docsAsMap = new ArrayList<>();\\n            Set<String> hitFieldNames = new HashSet<>();\\n            List<String> headers = createHeadersAndFillDocsMap(flat, hits, ((SearchResponse) queryResult).getScrollId(), docsAsMap, hitFieldNames);\\n            List<String> csvLines = createCSVLinesFromDocs(flat, separator, quote, docsAsMap, headers, hitFieldNames);\\n            //return new CSVResult(headers, csvLines);\\n            return new CSVResult(headers, csvLines, ((SearchResponse) queryResult).getHits().getTotalHits().value);\\n        }\\n        if (queryResult instanceof GetIndexResponse){\\n            ImmutableOpenMap<String, ImmutableOpenMap<String, MappingMetadata>> mappings = ((GetIndexResponse) queryResult).getMappings();\\n            List<String> headers = Lists.newArrayList(\\\"field\\\", \\\"type\\\");\\n            List<String> csvLines  = new ArrayList<>();\\n            List<List<String>> lines = new ArrayList<>();\\n            Iterator<String> iter = mappings.keysIt();\\n            while (iter.hasNext()) {\\n                String index = iter.next();\\n                MappingMetadata mappingJson = (MappingMetadata)mappings.get(index).values().toArray()[0];\\n                 LinkedHashMap properties = (LinkedHashMap) mappingJson.sourceAsMap().get(\\\"properties\\\");\\n                Map<Object, Object> mapping = Maps.newLinkedHashMap();\\n                parseMapping(Lists.newArrayList(), properties, mapping, 0);\\n                for (Object key : mapping.keySet()) {\\n                    lines.add(Lists.newArrayList(key.toString(), mapping.get(key).toString()));\\n                }\\n            }\\n\\n            for(List<String> simpleLine : lines){\\n                csvLines.add(Joiner.on(separator).join(simpleLine));\\n            }\\n\\n              return new CSVResult(headers, csvLines, csvLines.size());\\n        }\\n\\n\\n        return null;\\n    }\\n\\n    private static void parseMapping(ArrayList path, LinkedHashMap properties, Map<Object, Object> mapping, int children) {\\n        int passed = 1;\\n        for (Object key : properties.keySet()) {\\n            if (properties.get(key) instanceof LinkedHashMap) {\\n                LinkedHashMap value = (LinkedHashMap) properties.get(key);\\n                if (!key.equals(\\\"properties\\\")) {\\n                    path.add(key.toString());\\n                }\\n                if (value.containsKey(\\\"type\\\")) {\\n                    String realPath = parsePath(path.toString());\\n                    mapping.put(realPath , value.get(\\\"type\\\"));\\n                    if (value.containsKey(\\\"fields\\\")) {\\n                        mapping.put(realPath + \\\".keyword\\\", \\\"keyword\\\");\\n                    }\\n                    if (passed == children) {\\n                        if (path.size() - 2 >= 0) {//还要清理当前key的上层\\n                            path.remove(path.size() - 2);\\n                        }\\n                    }\\n                    path.remove(path.size() - 1);//移除当前元素\\n                } else {\\n                    if (value.containsKey(\\\"properties\\\")) {\\n                        children = ((LinkedHashMap) value.get(\\\"properties\\\")).size();\\n                    }\\n                    parseMapping(path, value, mapping, children);\\n                }\\n            }\\n            passed++;\\n        }\\n    }\\n\\n    private  static String parsePath(String path) {\\n        return path.replaceAll(\\\"\\\\\\\\s+\\\", \\\"\\\").replace(\\\"[\\\", \\\"\\\").replace(\\\"]\\\", \\\"\\\").replace(\\\",\\\", \\\".\\\");\\n    }\\n\\n    private  void handleAggregations(Aggregations aggregations, List<String> headers, List<List<String>> lines) throws CsvExtractorException {\\n        if(allNumericAggregations(aggregations)){\\n            lines.get(this.currentLineIndex).addAll(fillHeaderAndCreateLineForNumericAggregations(aggregations, headers));\\n            return;\\n        }\\n        //aggregations with size one only supported when not metrics.\\n        List<Aggregation> aggregationList = aggregations.asList();\\n        if(aggregationList.size() > 1){\\n            throw new CsvExtractorException(\\\"currently support only one aggregation at same level (Except for numeric metrics)\\\");\\n        }\\n        Aggregation aggregation = aggregationList.get(0);\\n        //we want to skip singleBucketAggregations (nested,reverse_nested,filters)\\n        if(aggregation instanceof SingleBucketAggregation){\\n            Aggregations singleBucketAggs = ((SingleBucketAggregation) aggregation).getAggregations();\\n            handleAggregations(singleBucketAggs, headers, lines);\\n            return;\\n        }\\n        if(aggregation instanceof NumericMetricsAggregation){\\n            handleNumericMetricAggregation(headers, lines.get(currentLineIndex), aggregation);\\n            return;\\n        }\\n        if(aggregation instanceof GeoBounds){\\n            handleGeoBoundsAggregation(headers, lines, (GeoBounds) aggregation);\\n            return;\\n        }\\n        if(aggregation instanceof TopHits){\\n            //todo: handle this . it returns hits... maby back to normal?\\n            //todo: read about this usages\\n            // TopHits topHitsAggregation = (TopHits) aggregation;\\n        }\\n        if(aggregation instanceof MultiBucketsAggregation){\\n            MultiBucketsAggregation bucketsAggregation = (MultiBucketsAggregation) aggregation;\\n            String name = bucketsAggregation.getName();\\n            //checking because it can comes from sub aggregation again\\n            if(!headers.contains(name)){\\n                headers.add(name);\\n            }\\n            Collection<? extends MultiBucketsAggregation.Bucket> buckets = bucketsAggregation.getBuckets();\\n\\n            //clone current line.\\n            List<String> currentLine = lines.get(this.currentLineIndex);\\n            List<String> clonedLine = new ArrayList<>(currentLine);\\n\\n            //call handle_Agg with current_line++\\n            boolean firstLine = true;\\n            for (MultiBucketsAggregation.Bucket bucket : buckets) {\\n                //each bucket need to add new line with current line copied => except for first line\\n                String key = bucket.getKeyAsString();\\n                if(firstLine){\\n                    firstLine = false;\\n                }\\n                else {\\n                    currentLineIndex++;\\n                    currentLine = new ArrayList<String>(clonedLine);\\n                    lines.add(currentLine);\\n                }\\n                currentLine.add(key);\\n                handleAggregations(bucket.getAggregations(),headers,lines);\\n\\n            }\\n        }\\n\\n    }\\n\\n    private void handleGeoBoundsAggregation(List<String> headers, List<List<String>> lines, GeoBounds geoBoundsAggregation) {\\n        String geoBoundAggName = geoBoundsAggregation.getName();\\n        headers.add(geoBoundAggName+\\\".topLeft.lon\\\");\\n        headers.add(geoBoundAggName+\\\".topLeft.lat\\\");\\n        headers.add(geoBoundAggName+\\\".bottomRight.lon\\\");\\n        headers.add(geoBoundAggName+\\\".bottomRight.lat\\\");\\n        List<String> line = lines.get(this.currentLineIndex);\\n        line.add(String.valueOf(geoBoundsAggregation.topLeft().getLon()));\\n        line.add(String.valueOf(geoBoundsAggregation.topLeft().getLat()));\\n        line.add(String.valueOf(geoBoundsAggregation.bottomRight().getLon()));\\n        line.add(String.valueOf(geoBoundsAggregation.bottomRight().getLat()));\\n        lines.add(line);\\n    }\\n\\n    private  List<String> fillHeaderAndCreateLineForNumericAggregations(Aggregations aggregations, List<String> header) throws CsvExtractorException {\\n        List<String> line = new ArrayList<>();\\n        List<Aggregation> aggregationList = aggregations.asList();\\n        for(Aggregation aggregation : aggregationList){\\n            handleNumericMetricAggregation(header, line, aggregation);\\n        }\\n        return line;\\n    }\\n\\n    private  void handleNumericMetricAggregation(List<String> header, List<String> line, Aggregation aggregation) throws CsvExtractorException {\\n        String name = aggregation.getName();\\n\\n        if(aggregation instanceof NumericMetricsAggregation.SingleValue){\\n            if(!header.contains(name)){\\n                header.add(name);\\n            }\\n            NumericMetricsAggregation.SingleValue agg = (NumericMetricsAggregation.SingleValue) aggregation;\\n            line.add(!Double.isInfinite(agg.value()) ? agg.getValueAsString() : \\\"null\\\");\\n        }\\n        //todo:Numeric MultiValue - Stats,ExtendedStats,Percentile...\\n        else if(aggregation instanceof NumericMetricsAggregation.MultiValue){\\n            if(aggregation instanceof Stats) {\\n                String[] statsHeaders = new String[]{\\\"count\\\", \\\"sum\\\", \\\"avg\\\", \\\"min\\\", \\\"max\\\"};\\n                boolean isExtendedStats = aggregation instanceof ExtendedStats;\\n                if(isExtendedStats){\\n                    String[] extendedHeaders = new String[]{\\\"sumOfSquares\\\", \\\"variance\\\", \\\"stdDeviation\\\"};\\n                    statsHeaders = Util.concatStringsArrays(statsHeaders,extendedHeaders);\\n                }\\n                mergeHeadersWithPrefix(header, name, statsHeaders);\\n                Stats stats = (Stats) aggregation;\\n                line.add(String.valueOf(stats.getCount()));\\n                line.add(stats.getSumAsString());\\n                line.add(stats.getAvgAsString());\\n                line.add(stats.getMinAsString());\\n                line.add(stats.getMaxAsString());\\n                if(isExtendedStats){\\n                    ExtendedStats extendedStats = (ExtendedStats) aggregation;\\n                    line.add(extendedStats.getSumOfSquaresAsString());\\n                    line.add(extendedStats.getVarianceAsString());\\n                    line.add(extendedStats.getStdDeviationAsString());\\n                }\\n            }\\n            else if( aggregation instanceof Percentiles){\\n                List<String> percentileHeaders = new ArrayList<>(7);\\n                Percentiles percentiles = (Percentiles) aggregation;\\n                for (Percentile p : percentiles) {\\n                    percentileHeaders.add(String.valueOf(p.getPercent()));\\n                    line.add(percentiles.percentileAsString(p.getPercent()));\\n                }\\n                mergeHeadersWithPrefix(header, name, percentileHeaders.toArray(new String[0]));\\n            } else if (aggregation instanceof InternalTDigestPercentileRanks) {//added by xzb 增加PercentileRanks函数支持\\n                InternalTDigestPercentileRanks percentileRanks = (InternalTDigestPercentileRanks) aggregation;\\n                List<String> percentileHeaders = new ArrayList<>(7);\\n                for (Percentile rank : percentileRanks) {\\n                    percentileHeaders.add(String.valueOf(rank.getValue()));\\n                    line.add(String.valueOf(rank.getPercent()));\\n                }\\n                mergeHeadersWithPrefix(header, name, percentileHeaders.toArray(new String[0]));\\n            } else {\\n                throw new CsvExtractorException(\\\"unknown NumericMetricsAggregation.MultiValue:\\\" + aggregation.getClass());\\n            }\\n\\n        }\\n        else {\\n            throw new CsvExtractorException(\\\"unknown NumericMetricsAggregation\\\" + aggregation.getClass());\\n        }\\n    }\\n\\n    private void mergeHeadersWithPrefix(List<String> header, String prefix, String[] newHeaders) {\\n        for (int i = 0; i < newHeaders.length; i++) {\\n            String newHeader = newHeaders[i];\\n            if(prefix != null && !prefix.equals(\\\"\\\")) {\\n                newHeader = prefix + \\\".\\\" + newHeader;\\n            }\\n            if (!header.contains(newHeader)) {\\n                header.add(newHeader);\\n            }\\n        }\\n    }\\n\\n    private  boolean allNumericAggregations(Aggregations aggregations) {\\n        List<Aggregation> aggregationList = aggregations.asList();\\n        for(Aggregation aggregation : aggregationList){\\n            if(!(aggregation instanceof NumericMetricsAggregation)){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    private  Aggregation skipAggregations(Aggregation firstAggregation) {\\n        while(firstAggregation instanceof SingleBucketAggregation){\\n            firstAggregation = getFirstAggregation(((SingleBucketAggregation) firstAggregation).getAggregations());\\n        }\\n        return firstAggregation;\\n    }\\n\\n    private Aggregation getFirstAggregation(Aggregations aggregations){\\n        return aggregations.asList().get(0);\\n    }\\n\\n    private List<String> createCSVLinesFromDocs(boolean flat, String separator, boolean quote, List<Map<String, Object>> docsAsMap, List<String> headers, Set<String> hitFieldNames) {\\n        List<String> csvLines = new ArrayList<>();\\n        for(Map<String,Object> doc : docsAsMap){\\n            String line = \\\"\\\";\\n            for(String header : headers){\\n                line += findFieldValue(header, doc, flat, separator, quote, hitFieldNames);\\n            }\\n            csvLines.add(line.substring(0, line.lastIndexOf(separator)));\\n        }\\n        return csvLines;\\n    }\\n\\n    private List<String> createHeadersAndFillDocsMap(boolean flat, SearchHit[] hits, String scrollId, List<Map<String, Object>> docsAsMap, Set<String> hitFieldNames) {\\n        Set<String> csvHeaders = new LinkedHashSet<>();\\n        Map<String, String> highlightMap = Maps.newHashMap();\\n        for (SearchHit hit : hits) {\\n            //获取高亮内容\\n            hit.getHighlightFields().forEach((key, value) -> {\\n                String frag = value.getFragments()[0].toString();\\n                highlightMap.put(key, frag);\\n            });\\n\\n            Map<String, Object> doc = Optional.ofNullable(hit.getSourceAsMap()).orElse(Maps.newHashMap());\\n            //替换掉将原始结果中字段的值替换为高亮后的内容\\n            for (Map.Entry<String, Object> entry : doc.entrySet()) {\\n                if(highlightMap.containsKey(entry.getKey())) {\\n                    doc.put(entry.getKey(), highlightMap.get(entry.getKey()));\\n                }\\n            }\\n\\n            mergeHeaders(csvHeaders, doc, flat);\\n            // hit fields\\n            Map<String, DocumentField> fields = hit.getFields();\\n            for (DocumentField searchHitField : fields.values()) {\\n                List<Object> values = Optional.ofNullable(searchHitField.getValues()).orElse(Collections.emptyList());\\n                int size = values.size();\\n                doc.put(searchHitField.getName(), size == 1 ? values.get(0) : size > 1 ? values : null);\\n                hitFieldNames.add(searchHitField.getName());\\n                csvHeaders.add(searchHitField.getName());\\n            }\\n            if (this.includeIndex) {\\n                doc.put(\\\"_index\\\", hit.getIndex());\\n            }\\n            if (this.includeId) {\\n                doc.put(\\\"_id\\\", hit.getId());\\n            }\\n            if (this.includeScore) {\\n                doc.put(\\\"_score\\\", hit.getScore());\\n            }\\n            if (this.includeType) {\\n                doc.put(\\\"_type\\\", hit.getType());\\n            }\\n            if (this.includeScrollId) {\\n                doc.put(\\\"_scroll_id\\\", scrollId);\\n            }\\n            docsAsMap.add(doc);\\n        }\\n        if (this.includeIndex) {\\n            csvHeaders.add(\\\"_index\\\");\\n        }\\n        if (this.includeId) {\\n            csvHeaders.add(\\\"_id\\\");\\n        }\\n        if (this.includeScore) {\\n            csvHeaders.add(\\\"_score\\\");\\n        }\\n        if (this.includeType) {\\n            csvHeaders.add(\\\"_type\\\");\\n        }\\n        if (this.includeScrollId) {\\n            csvHeaders.add(\\\"_scroll_id\\\");\\n        }\\n        List<String> headers = new ArrayList<>(csvHeaders);\\n        if (this.queryAction instanceof DefaultQueryAction) {\\n            List<String> fieldNames = ((DefaultQueryAction) this.queryAction).getFieldNames();\\n            headers.sort((o1, o2) -> {\\n                int i1 = fieldNames.indexOf(o1);\\n                int i2 = fieldNames.indexOf(o2);\\n                return Integer.compare(i1 < 0 ? Integer.MAX_VALUE : i1, i2 < 0 ? Integer.MAX_VALUE : i2);\\n            });\\n        }\\n        return headers;\\n    }\\n\\n    private String findFieldValue(String header, Map<String, Object> doc, boolean flat, String separator, boolean quote, Set<String> hitFieldNames) {\\n        if(flat && header.contains(\\\".\\\") && !hitFieldNames.contains(header)) {\\n            String[] split = header.split(\\\"\\\\\\\\.\\\");\\n            Object innerDoc = doc;\\n            for(String innerField : split){\\n                if(!(innerDoc instanceof Map)){\\n                    return separator;\\n                }\\n                innerDoc = ((Map<?, ?>) innerDoc).get(innerField);\\n                if(innerDoc == null){\\n                    return separator;\\n                }\\n\\n            }\\n            return (quote ? Util.quoteString(innerDoc.toString()) : innerDoc.toString()) + separator;\\n        }\\n        else {\\n            if(doc.containsKey(header)){\\n                return (quote ? Util.quoteString(String.valueOf(doc.get(header))) : doc.get(header)) + separator;\\n            }\\n        }\\n        return separator;\\n    }\\n\\n    private void mergeHeaders(Set<String> headers, Map<String, Object> doc, boolean flat) {\\n        if (!flat) {\\n            headers.addAll(doc.keySet());\\n            return;\\n        }\\n        mergeFieldNamesRecursive(headers, doc, \\\"\\\");\\n    }\\n\\n    private void mergeFieldNamesRecursive(Set<String> headers, Map<String, Object> doc, String prefix) {\\n        for(Map.Entry<String,Object> field : doc.entrySet()){\\n            Object value = field.getValue();\\n            if(value instanceof Map){\\n                mergeFieldNamesRecursive(headers,(Map<String,Object>) value,prefix+field.getKey()+\\\".\\\");\\n            }\\n            else {\\n                headers.add(prefix+field.getKey());\\n            }\\n        }\\n    }\\n}\"}, {\"identifier\":\"Condition\", \"path\":\"src/main/java/org/nlpcn/es4sql/domain/Condition.java\", \"snippet\":\"public class Condition extends Where {\\n\\n    public enum OPEAR {\\n        EQ, GT, LT, GTE, LTE, N, LIKE, NLIKE, REGEXP, NREGEXP, IS, ISN, IN, NIN, BETWEEN, NBETWEEN, GEO_INTERSECTS, GEO_BOUNDING_BOX, GEO_DISTANCE, GEO_POLYGON, IN_TERMS, TERM, IDS_QUERY, NESTED_COMPLEX, NNESTED_COMPLEX, CHILDREN_COMPLEX, SCRIPT,NIN_TERMS,NTERM;\\n\\n        public static Map<String, OPEAR> methodNameToOpear;\\n\\n        private static BiMap<OPEAR, OPEAR> negatives;\\n\\n        static {\\n            methodNameToOpear = new HashMap<>();\\n            methodNameToOpear.put(\\\"term\\\", TERM);\\n            methodNameToOpear.put(\\\"matchterm\\\", TERM);\\n            methodNameToOpear.put(\\\"match_term\\\", TERM);\\n            methodNameToOpear.put(\\\"terms\\\", IN_TERMS);\\n            methodNameToOpear.put(\\\"in_terms\\\", IN_TERMS);\\n            methodNameToOpear.put(\\\"ids\\\", IDS_QUERY);\\n            methodNameToOpear.put(\\\"ids_query\\\", IDS_QUERY);\\n            methodNameToOpear.put(\\\"regexp\\\", REGEXP);\\n            methodNameToOpear.put(\\\"regexp_query\\\", REGEXP);\\n        }\\n\\n        static {\\n            negatives = HashBiMap.create(7);\\n            negatives.put(EQ, N);\\n            negatives.put(IN_TERMS, NIN_TERMS);\\n\\t\\t\\tnegatives.put(TERM, NTERM);\\n            negatives.put(GT, LTE);\\n            negatives.put(LT, GTE);\\n            negatives.put(LIKE, NLIKE);\\n            negatives.put(IS, ISN);\\n            negatives.put(IN, NIN);\\n            negatives.put(BETWEEN, NBETWEEN);\\n            negatives.put(REGEXP, NREGEXP);\\n            negatives.put(NESTED_COMPLEX, NNESTED_COMPLEX);\\n        }\\n\\n        public OPEAR negative() throws SqlParseException {\\n            OPEAR negative = negatives.get(this);\\n            negative = negative != null ? negative : negatives.inverse().get(this);\\n            if (negative == null) {\\n                throw new SqlParseException(\\\"OPEAR negative not supported: \\\" + this);\\n            }\\n            return negative;\\n        }\\n    }\\n\\n    private String name;\\n\\n    private SQLExpr nameExpr;\\n\\n    private Object value;\\n\\n    public SQLExpr getNameExpr() {\\n        return nameExpr;\\n    }\\n\\n    public SQLExpr getValueExpr() {\\n        return valueExpr;\\n    }\\n\\n    private SQLExpr valueExpr;\\n\\n    private OPEAR opear;\\n\\n    private Object relationshipType;\\n\\n    private boolean isNested;\\n    private String nestedPath;\\n    private String innerHits;\\n\\n    private boolean isChildren;\\n    private String childType;\\n\\n    public Condition(CONN conn) {\\n        super(conn);\\n    }\\n\\n    public Condition(CONN conn, String field, SQLExpr nameExpr, String condition, Object obj, SQLExpr valueExpr) throws SqlParseException {\\n        this(conn, field, nameExpr, condition, obj, valueExpr, null);\\n    }\\n\\n    public Condition(CONN conn, String field, SQLExpr nameExpr, OPEAR condition, Object obj, SQLExpr valueExpr) throws SqlParseException {\\n        this(conn, field, nameExpr, condition, obj, valueExpr, null);\\n    }\\n\\n    public Condition(CONN conn, String name, SQLExpr nameExpr, String oper, Object value, SQLExpr valueExpr, Object relationshipType) throws\\n            SqlParseException {\\n        super(conn);\\n\\n        this.opear = null;\\n        this.name = name;\\n        this.value = value;\\n        this.nameExpr = nameExpr;\\n        this.valueExpr = valueExpr;\\n\\n        this.relationshipType = relationshipType;\\n\\n        if (this.relationshipType != null) {\\n            if (this.relationshipType instanceof NestedType) {\\n                NestedType nestedType = (NestedType) relationshipType;\\n\\n                this.isNested = true;\\n                this.nestedPath = nestedType.path;\\n                this.innerHits = nestedType.getInnerHits();\\n                this.isChildren = false;\\n                this.childType = \\\"\\\";\\n            } else if (relationshipType instanceof ChildrenType) {\\n                ChildrenType childrenType = (ChildrenType) relationshipType;\\n\\n                this.isNested = false;\\n                this.nestedPath = \\\"\\\";\\n                this.isChildren = true;\\n                this.childType = childrenType.childType;\\n            }\\n        } else {\\n            this.isNested = false;\\n            this.nestedPath = \\\"\\\";\\n            this.isChildren = false;\\n            this.childType = \\\"\\\";\\n        }\\n\\n        // EQ, GT, LT, GTE, LTE, N, LIKE, NLIKE, IS, ISN, IN, NIN\\n        switch (oper) {\\n            case \\\"=\\\":\\n                this.opear = OPEAR.EQ;\\n                break;\\n            case \\\">\\\":\\n                this.opear = OPEAR.GT;\\n                break;\\n            case \\\"<\\\":\\n                this.opear = OPEAR.LT;\\n                break;\\n            case \\\">=\\\":\\n                this.opear = OPEAR.GTE;\\n                break;\\n            case \\\"<=\\\":\\n                this.opear = OPEAR.LTE;\\n                break;\\n            case \\\"<>\\\":\\n                this.opear = OPEAR.N;\\n                break;\\n            case \\\"LIKE\\\":\\n                this.opear = OPEAR.LIKE;\\n                break;\\n            case \\\"NOT\\\":\\n                this.opear = OPEAR.N;\\n                break;\\n            case \\\"NOT LIKE\\\":\\n                this.opear = OPEAR.NLIKE;\\n                break;\\n            case \\\"IS\\\":\\n                this.opear = OPEAR.IS;\\n                break;\\n            case \\\"IS NOT\\\":\\n                this.opear = OPEAR.ISN;\\n                break;\\n            case \\\"NOT IN\\\":\\n                this.opear = OPEAR.NIN;\\n                break;\\n            case \\\"IN\\\":\\n                this.opear = OPEAR.IN;\\n                break;\\n            case \\\"BETWEEN\\\":\\n                this.opear = OPEAR.BETWEEN;\\n                break;\\n            case \\\"NOT BETWEEN\\\":\\n                this.opear = OPEAR.NBETWEEN;\\n                break;\\n            case \\\"GEO_INTERSECTS\\\":\\n                this.opear = OPEAR.GEO_INTERSECTS;\\n                break;\\n            case \\\"GEO_BOUNDING_BOX\\\":\\n                this.opear = OPEAR.GEO_BOUNDING_BOX;\\n                break;\\n            case \\\"GEO_DISTANCE\\\":\\n                this.opear = OPEAR.GEO_DISTANCE;\\n                break;\\n            case \\\"GEO_POLYGON\\\":\\n                this.opear = OPEAR.GEO_POLYGON;\\n                break;\\n            case \\\"NESTED\\\":\\n                this.opear = OPEAR.NESTED_COMPLEX;\\n                break;\\n            case \\\"NOT NESTED\\\":\\n                this.opear = OPEAR.NNESTED_COMPLEX;\\n                break;\\n            case \\\"CHILDREN\\\":\\n                this.opear = OPEAR.CHILDREN_COMPLEX;\\n                break;\\n            case \\\"SCRIPT\\\":\\n                this.opear = OPEAR.SCRIPT;\\n                break;\\n            default:\\n                throw new SqlParseException(oper + \\\" is err!\\\");\\n        }\\n    }\\n\\n\\n    public Condition(CONN conn,\\n                     String name,\\n                     SQLExpr nameExpr,\\n                     OPEAR oper,\\n                     Object value,\\n                     SQLExpr valueExpr,\\n                     Object relationshipType\\n    ) throws SqlParseException {\\n        super(conn);\\n\\n        this.opear = null;\\n        this.nameExpr = nameExpr;\\n        this.valueExpr = valueExpr;\\n        this.name = name;\\n        this.value = value;\\n        this.opear = oper;\\n        this.relationshipType = relationshipType;\\n\\n        if (this.relationshipType != null) {\\n            if (this.relationshipType instanceof NestedType) {\\n                NestedType nestedType = (NestedType) relationshipType;\\n\\n                this.isNested = true;\\n                this.nestedPath = nestedType.path;\\n                this.innerHits = nestedType.getInnerHits();\\n                this.isChildren = false;\\n                this.childType = \\\"\\\";\\n            } else if (relationshipType instanceof ChildrenType) {\\n                ChildrenType childrenType = (ChildrenType) relationshipType;\\n\\n                this.isNested = false;\\n                this.nestedPath = \\\"\\\";\\n                this.isChildren = true;\\n                this.childType = childrenType.childType;\\n            }\\n        } else {\\n            this.isNested = false;\\n            this.nestedPath = \\\"\\\";\\n            this.isChildren = false;\\n            this.childType = \\\"\\\";\\n        }\\n    }\\n\\n    public String getOpertatorSymbol() throws SqlParseException {\\n        switch (opear) {\\n            case EQ:\\n                return \\\"==\\\";\\n            case GT:\\n                return \\\">\\\";\\n            case LT:\\n                return \\\"<\\\";\\n            case GTE:\\n                return \\\">=\\\";\\n            case LTE:\\n                return \\\"<=\\\";\\n            case N:\\n                return \\\"<>\\\";\\n            case IS:\\n                return \\\"==\\\";\\n\\n            case ISN:\\n                return \\\"!=\\\";\\n            default:\\n                throw new SqlParseException(opear + \\\" is err!\\\");\\n        }\\n    }\\n\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public Object getValue() {\\n        return value;\\n    }\\n\\n    public void setValue(Object value) {\\n        this.value = value;\\n    }\\n\\n    public OPEAR getOpear() {\\n        return opear;\\n    }\\n\\n    public void setOpear(OPEAR opear) {\\n        this.opear = opear;\\n    }\\n\\n    public Object getRelationshipType() {\\n        return relationshipType;\\n    }\\n\\n    public void setRelationshipType(Object relationshipType) {\\n        this.relationshipType = relationshipType;\\n    }\\n\\n    public boolean isNested() {\\n        return isNested;\\n    }\\n\\n    public void setNested(boolean isNested) {\\n        this.isNested = isNested;\\n    }\\n\\n    public String getNestedPath() {\\n        return nestedPath;\\n    }\\n\\n    public void setNestedPath(String nestedPath) {\\n        this.nestedPath = nestedPath;\\n    }\\n\\n    public String getInnerHits() {\\n        return innerHits;\\n    }\\n\\n    public void setInnerHits(String innerHits) {\\n        this.innerHits = innerHits;\\n    }\\n\\n    public boolean isChildren() {\\n        return isChildren;\\n    }\\n\\n    public void setChildren(boolean isChildren) {\\n        this.isChildren = isChildren;\\n    }\\n\\n    public String getChildType() {\\n        return childType;\\n    }\\n\\n    public void setChildType(String childType) {\\n        this.childType = childType;\\n    }\\n\\n    @Override\\n    public String toString() {\\n        String result = \\\"\\\";\\n\\n        if (this.isNested()) {\\n            result = \\\"nested condition \\\";\\n            if (this.getNestedPath() != null) {\\n                result += \\\"on path:\\\" + this.getNestedPath() + \\\" \\\";\\n            }\\n\\n            if (this.getInnerHits() != null) {\\n                result += \\\"inner_hits:\\\" + this.getInnerHits() + \\\" \\\";\\n            }\\n        } else if (this.isChildren()) {\\n            result = \\\"children condition \\\";\\n\\n            if (this.getChildType() != null) {\\n                result += \\\"on child: \\\" + this.getChildType() + \\\" \\\";\\n            }\\n        }\\n\\n        if (value instanceof Object[]) {\\n            result += this.conn + \\\" \\\" + this.name + \\\" \\\" + this.opear + \\\" \\\" + Arrays.toString((Object[]) value);\\n        } else {\\n            result += this.conn + \\\" \\\" + this.name + \\\" \\\" + this.opear + \\\" \\\" + this.value;\\n        }\\n\\n        return result;\\n    }\\n\\n    @Override\\n    public Object clone() throws CloneNotSupportedException {\\n        try {\\n            Condition clonedCondition = new Condition(this.getConn(), this.getName(),this.getNameExpr(), this.getOpear(), this.getValue(),this.getValueExpr(), this.getRelationshipType());\\n            return clonedCondition;\\n        } catch (SqlParseException e) {\\n\\n        }\\n        return null;\\n    }\\n}\"}, {\"identifier\":\"Select\", \"path\":\"src/main/java/org/nlpcn/es4sql/domain/Select.java\", \"snippet\":\"public class Select extends Query {\\n\\n    public static int DEFAULT_ROWCOUNT = 1000;\\n\\n\\t// Using this functions, will cause query to execute as aggregation.\\n\\tprivate final List<String> aggsFunctions = Arrays.asList(\\\"SUM\\\", \\\"MAX\\\", \\\"MIN\\\", \\\"AVG\\\", \\\"TOPHITS\\\", \\\"COUNT\\\", \\\"STATS\\\",\\\"EXTENDED_STATS\\\",\\\"PERCENTILES\\\",\\\"SCRIPTED_METRIC\\\", \\\"PERCENTILE_RANKS\\\", \\\"MOVINGAVG\\\", \\\"ROLLINGSTD\\\");//增加对移动平均值和滚动标准差的支持\\n\\tprivate List<Field> fields = new ArrayList<>();\\n\\tprivate List<List<Field>> groupBys = new ArrayList<>();\\n\\tprivate List<Order> orderBys = new ArrayList<>();\\n    private boolean containsSubQueries;\\n    private List<SubQueryExpression> subQueries;\\n\\tpublic boolean isQuery = false;\\n    private boolean selectAll = false;\\n    //added by xzb 增加 SQL中的 having 语法，实现对聚合结果进行过滤\\n    //select count(age) as ageCnt, avg(age) as ageAvg from bank group by gender having ageAvg > 4.5 and ageCnt > 5 order by ageCnt asc\\n    private String having;\\n\\n\\tpublic boolean isAgg = false;\\n\\n    public Select() {\\n        setRowCount(DEFAULT_ROWCOUNT);\\n    }\\n\\n\\tpublic List<Field> getFields() {\\n\\t\\treturn fields;\\n\\t}\\n\\n\\tpublic void addGroupBy(Field field) {\\n\\t\\tList<Field> wrapper = new ArrayList<>();\\n\\t\\twrapper.add(field);\\n\\t\\taddGroupBy(wrapper);\\n\\t}\\n\\n    public String getHaving() {\\n        return having;\\n    }\\n\\n    public void setHaving(String having) {\\n        this.having = having;\\n    }\\n\\n    public void addGroupBy(List<Field> fields) {\\n\\t\\tisAgg = true;\\n\\t\\tthis.groupBys.add(fields);\\n\\t}\\n\\n\\tpublic List<List<Field>> getGroupBys() {\\n\\t\\treturn groupBys;\\n\\t}\\n\\n\\tpublic List<Order> getOrderBys() {\\n\\t\\treturn orderBys;\\n\\t}\\n\\n\\tpublic void addOrderBy(String nestedPath, String name, String type, ScriptSortBuilder.ScriptSortType scriptSortType, Object missing, String unmappedType, String numericType, String format) {\\n\\t\\tif (\\\"_score\\\".equals(name)) { //zhongshu-comment 可以直接在order by子句中写_score，根据该字段排序 select * from tbl order by _score asc\\n\\t\\t\\tisQuery = true;\\n\\t\\t}\\n\\t\\tOrder order = new Order(nestedPath, name, type);\\n\\n\\t\\torder.setScriptSortType(scriptSortType);\\n        order.setMissing(missing);\\n        order.setUnmappedType(unmappedType);\\n        order.setNumericType(numericType);\\n        order.setFormat(format);\\n\\t\\tthis.orderBys.add(order);\\n\\t}\\n\\n\\n\\tpublic void addField(Field field) {\\n\\t\\tif (field == null ) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n        if(field.getName().equals(\\\"*\\\")){\\n            this.selectAll = true;\\n        }\\n\\n\\t\\tif(field instanceof  MethodField && aggsFunctions.contains(field.getName().toUpperCase())) {\\n\\t\\t\\tisAgg = true;\\n\\t\\t}\\n\\n\\t\\tfields.add(field);\\n\\t}\\n\\n    public void fillSubQueries() {\\n        subQueries = new ArrayList<>();\\n        Where where = this.getWhere();\\n        fillSubQueriesFromWhereRecursive(where);\\n    }\\n\\n    private void fillSubQueriesFromWhereRecursive(Where where) {\\n        if(where == null) return;\\n        if(where instanceof Condition){\\n            Condition condition = (Condition) where;\\n            if ( condition.getValue() instanceof SubQueryExpression){\\n                this.subQueries.add((SubQueryExpression) condition.getValue());\\n                this.containsSubQueries = true;\\n            }\\n            if(condition.getValue() instanceof Object[]){\\n\\n                for(Object o : (Object[]) condition.getValue()){\\n                    if ( o instanceof SubQueryExpression){\\n                        this.subQueries.add((SubQueryExpression) o);\\n                        this.containsSubQueries = true;\\n                    }\\n                }\\n            }\\n        }\\n        else {\\n            for(Where innerWhere : where.getWheres())\\n                fillSubQueriesFromWhereRecursive(innerWhere);\\n        }\\n    }\\n\\n    public boolean containsSubQueries() {\\n        return containsSubQueries;\\n    }\\n\\n    public List<SubQueryExpression> getSubQueries() {\\n        return subQueries;\\n    }\\n\\n    public boolean isOrderdSelect(){\\n        return this.getOrderBys()!=null && this.getOrderBys().size() >0 ;\\n    }\\n\\n    public boolean isSelectAll() {\\n        return selectAll;\\n    }\\n\\n    public void setFields(List<Field> fields) {\\n        this.fields = fields;\\n    }\\n}\"}, {\"identifier\":\"Where\", \"path\":\"src/main/java/org/nlpcn/es4sql/domain/Where.java\", \"snippet\":\"public class Where implements Cloneable{\\n\\n\\tpublic enum CONN {\\n\\t\\tAND, OR;\\n\\n\\t\\tpublic CONN negative() {\\n\\t\\t\\treturn this == AND ? OR : AND;\\n\\t\\t}\\n\\t}\\n\\n\\tpublic static Where newInstance() {\\n\\t\\treturn new Where(CONN.AND);\\n\\t}\\n\\n\\t//zhongshu-comment 只有wheres和conn这两个属性\\n\\tprivate LinkedList<Where> wheres = new LinkedList<>();//zhongshu-comment 不会被子类Condition继承，但是子类可以通过get() set()方法访问吧？\\n\\tprotected CONN conn;\\n\\n\\tpublic Where(String connStr) {\\n\\t\\tthis.conn = CONN.valueOf(connStr.toUpperCase());\\n\\t}\\n\\n\\tpublic Where(CONN conn) {\\n\\t\\tthis.conn = conn;\\n\\t}\\n\\n\\tpublic void addWhere(Where where) {\\n\\t\\twheres.add(where);\\n\\t}\\n\\n\\tpublic CONN getConn() {\\n\\t\\treturn this.conn;\\n\\t}\\n\\n\\tpublic void setConn(CONN conn) {\\n\\t\\tthis.conn = conn;\\n\\t}\\n\\t\\n\\tpublic LinkedList<Where> getWheres() {\\n\\t\\treturn wheres;\\n\\t}\\n\\n\\t@Override\\n\\tpublic String toString(){\\n\\t\\tif(wheres.size()>0){\\n\\t\\t\\tString whereStr = wheres.toString() ;\\n\\t\\t\\treturn this.conn + \\\" ( \\\"+whereStr.substring(1,whereStr.length()-1)+\\\" ) \\\" ;\\n\\t\\t}else{\\n\\t\\t\\treturn \\\"\\\" ;\\n\\t\\t}\\n\\t\\t\\n\\t}\\n\\n    @Override\\n    public Object clone() throws CloneNotSupportedException {\\n        Where clonedWhere = new Where(this.getConn());\\n        for (Where innerWhere : this.getWheres()){\\n            clonedWhere.addWhere((Where)innerWhere.clone());\\n        }\\n        return clonedWhere;\\n    }\\n}\"}, {\"identifier\":\"ElasticSqlExprParser\", \"path\":\"src/main/java/org/nlpcn/es4sql/parse/ElasticSqlExprParser.java\", \"snippet\":\"public class ElasticSqlExprParser extends SQLExprParser {\\n\\n    public final static String[] AGGREGATE_FUNCTIONS;\\n\\n    public final static long[] AGGREGATE_FUNCTIONS_CODES;\\n\\n    static {\\n        String[] strings = { \\\"AVG\\\", \\\"COUNT\\\", \\\"GROUP_CONCAT\\\", \\\"MAX\\\", \\\"MIN\\\", \\\"STDDEV\\\", \\\"SUM\\\" };\\n        AGGREGATE_FUNCTIONS_CODES = FnvHash.fnv1a_64_lower(strings, true);\\n        AGGREGATE_FUNCTIONS = new String[AGGREGATE_FUNCTIONS_CODES.length];\\n        for (String str : strings) {\\n            long hash = FnvHash.fnv1a_64_lower(str);\\n            int index = Arrays.binarySearch(AGGREGATE_FUNCTIONS_CODES, hash);\\n            AGGREGATE_FUNCTIONS[index] = str;\\n        }\\n    }\\n\\n    public ElasticSqlExprParser(Lexer lexer){\\n        super(lexer, JdbcConstants.MYSQL);\\n        this.aggregateFunctions = AGGREGATE_FUNCTIONS;\\n        this.aggregateFunctionHashCodes = AGGREGATE_FUNCTIONS_CODES;\\n    }\\n\\n    public ElasticSqlExprParser(String sql){\\n        this(new ElasticLexer(sql));\\n        this.lexer.nextToken();\\n    }\\n\\n    @SuppressWarnings({\\\"unchecked\\\", \\\"rawtypes\\\"})\\n    public void parseHints(List hints) {\\n        while (lexer.token() == Token.HINT) {\\n            SQLCommentHint hint = new SQLCommentHint(lexer.stringVal());\\n\\n            if (lexer.getCommentCount() > 0) {\\n                hint.addBeforeComment(lexer.readAndResetComments());\\n            }\\n\\n            hints.add(hint);\\n            lexer.nextToken();\\n        }\\n    }\\n\\n    public SQLExpr primary() {\\n\\n        if (lexer.token() == Token.LBRACE) {\\n            lexer.nextToken();\\n            boolean foundRBrace = false;\\n            if (lexer.stringVal().equals(\\\"ts\\\")) {\\n                String current = lexer.stringVal();\\n                do {\\n                    if (current.equals(Token.RBRACE.name())) {\\n                        foundRBrace = true;\\n                        break;\\n                    }\\n                    lexer.nextToken();\\n                    current = lexer.token().name();\\n                } while (!foundRBrace && !current.trim().equals(\\\"\\\"));\\n\\n                if (foundRBrace) {\\n                    SQLOdbcExpr sdle = new SQLOdbcExpr(lexer.stringVal());\\n\\n                    accept(Token.RBRACE);\\n                    return sdle;\\n                } else {\\n                    throw new ParserException(\\\"Error. Unable to find closing RBRACE\\\");\\n                }\\n            } else {\\n                throw new ParserException(\\\"Error. Unable to parse ODBC Literal Timestamp\\\");\\n            }\\n        } else if (lexer.token() == Token.LBRACKET) {\\n            StringBuilder identifier = new StringBuilder();\\n            lexer.nextToken();\\n            String prefix = \\\"\\\";\\n            while (lexer.token() != Token.RBRACKET) {\\n                if (lexer.token() != Token.IDENTIFIER && lexer.token() != Token.INDEX && lexer.token() != Token.LITERAL_CHARS) {\\n                    throw new ParserException(\\\"All items between Brackets should be identifiers , got:\\\" + lexer.token());\\n                }\\n                identifier.append(prefix);\\n                identifier.append(lexer.stringVal());\\n                prefix = \\\" \\\";\\n                lexer.nextToken();\\n            }\\n\\n            accept(Token.RBRACKET);\\n            return new SQLIdentifierExpr(identifier.toString());\\n        } else if (lexer.token() == Token.NOT) {\\n            lexer.nextToken();\\n            SQLExpr sqlExpr;\\n            if (lexer.token() == Token.EXISTS) {\\n                lexer.nextToken();\\n                accept(Token.LPAREN);\\n                sqlExpr = new SQLExistsExpr(createSelectParser().select(), true);\\n                accept(Token.RPAREN);\\n            } else if (lexer.token() == Token.LPAREN) {\\n                lexer.nextToken();\\n\\n                SQLExpr notTarget = expr();\\n\\n                accept(Token.RPAREN);\\n\\n                sqlExpr = new SQLNotExpr(notTarget);\\n\\n                return primaryRest(sqlExpr);\\n            } else {\\n                SQLExpr restExpr = relational();\\n                sqlExpr = new SQLNotExpr(restExpr);\\n            }\\n            return sqlExpr;\\n        }\\n\\n        boolean parenWrapped = lexer.token() == Token.LPAREN;\\n\\n        SQLExpr expr = primary2();\\n\\n        // keep track of if the identifier is wrapped in parens\\n        if (parenWrapped && expr instanceof SQLIdentifierExpr) {\\n            expr = new SQLParensIdentifierExpr((SQLIdentifierExpr) expr);\\n        }\\n\\n        return expr;\\n    }\\n\\n    public SQLExpr primary2() {\\n        final Token tok = lexer.token();\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.OUTFILE)) {\\n            lexer.nextToken();\\n            SQLExpr file = primary();\\n            SQLExpr expr = new MySqlOutFileExpr(file);\\n\\n            return primaryRest(expr);\\n\\n        }\\n\\n        switch (tok) {\\n            case VARIANT:\\n                SQLVariantRefExpr varRefExpr = new SQLVariantRefExpr(lexer.stringVal());\\n                lexer.nextToken();\\n                if (varRefExpr.getName().equalsIgnoreCase(\\\"@@global\\\")) {\\n                    accept(Token.DOT);\\n                    varRefExpr = new SQLVariantRefExpr(lexer.stringVal(), true);\\n                    lexer.nextToken();\\n                } else if (varRefExpr.getName().equals(\\\"@\\\") && lexer.token() == Token.LITERAL_CHARS) {\\n                    varRefExpr.setName(\\\"@'\\\" + lexer.stringVal() + \\\"'\\\");\\n                    lexer.nextToken();\\n                } else if (varRefExpr.getName().equals(\\\"@@\\\") && lexer.token() == Token.LITERAL_CHARS) {\\n                    varRefExpr.setName(\\\"@@'\\\" + lexer.stringVal() + \\\"'\\\");\\n                    lexer.nextToken();\\n                }\\n                return primaryRest(varRefExpr);\\n            case VALUES:\\n                lexer.nextToken();\\n                if (lexer.token() != Token.LPAREN) {\\n                    throw new ParserException(\\\"syntax error, illegal values clause. \\\" + lexer.info());\\n                }\\n                return this.methodRest(new SQLIdentifierExpr(\\\"VALUES\\\"), true);\\n            case BINARY:\\n                lexer.nextToken();\\n                if (lexer.token() == Token.COMMA || lexer.token() == Token.SEMI || lexer.token() == Token.EOF) {\\n                    return new SQLIdentifierExpr(\\\"BINARY\\\");\\n                } else {\\n                    SQLUnaryExpr binaryExpr = new SQLUnaryExpr(SQLUnaryOperator.BINARY, expr());\\n                    return primaryRest(binaryExpr);\\n                }\\n            default:\\n                return super.primary();\\n        }\\n\\n    }\\n\\n    public final SQLExpr primaryRest(SQLExpr expr) {\\n        if (expr == null) {\\n            throw new IllegalArgumentException(\\\"expr\\\");\\n        }\\n\\n        if (lexer.token() == Token.LITERAL_CHARS) {\\n            if (expr instanceof SQLIdentifierExpr) {\\n                SQLIdentifierExpr identExpr = (SQLIdentifierExpr) expr;\\n                String ident = identExpr.getName();\\n\\n                if (ident.equalsIgnoreCase(\\\"x\\\")) {\\n                    String charValue = lexer.stringVal();\\n                    lexer.nextToken();\\n                    expr = new SQLHexExpr(charValue);\\n\\n                    return primaryRest(expr);\\n//                } else if (ident.equalsIgnoreCase(\\\"b\\\")) {\\n//                    String charValue = lexer.stringVal();\\n//                    lexer.nextToken();\\n//                    expr = new SQLBinaryExpr(charValue);\\n//\\n//                    return primaryRest(expr);\\n                } else if (ident.startsWith(\\\"_\\\")) {\\n                    String charValue = lexer.stringVal();\\n                    lexer.nextToken();\\n\\n                    MySqlCharExpr mysqlCharExpr = new MySqlCharExpr(charValue);\\n                    mysqlCharExpr.setCharset(identExpr.getName());\\n                    if (lexer.identifierEquals(FnvHash.Constants.COLLATE)) {\\n                        lexer.nextToken();\\n\\n                        String collate = lexer.stringVal();\\n                        mysqlCharExpr.setCollate(collate);\\n                        accept(Token.IDENTIFIER);\\n                    }\\n\\n                    expr = mysqlCharExpr;\\n\\n                    return primaryRest(expr);\\n                }\\n            } else if (expr instanceof SQLCharExpr) {\\n                String text2 = ((SQLCharExpr) expr).getText();\\n                do {\\n                    String chars = lexer.stringVal();\\n                    text2 += chars;\\n                    lexer.nextToken();\\n                } while (lexer.token() == Token.LITERAL_CHARS || lexer.token() == Token.LITERAL_ALIAS);\\n                expr = new SQLCharExpr(text2);\\n            } else if (expr instanceof SQLVariantRefExpr) {\\n                SQLMethodInvokeExpr concat = new SQLMethodInvokeExpr(\\\"CONCAT\\\");\\n                concat.addArgument(expr);\\n                concat.addArgument(this.primary());\\n                expr = concat;\\n\\n                return primaryRest(expr);\\n            }\\n        } else if (lexer.token() == Token.IDENTIFIER) {\\n            if (expr instanceof SQLHexExpr) {\\n                if (\\\"USING\\\".equalsIgnoreCase(lexer.stringVal())) {\\n                    lexer.nextToken();\\n                    if (lexer.token() != Token.IDENTIFIER) {\\n                        throw new ParserException(\\\"syntax error, illegal hex. \\\" + lexer.info());\\n                    }\\n                    String charSet = lexer.stringVal();\\n                    lexer.nextToken();\\n                    expr.getAttributes().put(\\\"USING\\\", charSet);\\n\\n                    return primaryRest(expr);\\n                }\\n            } else if (lexer.identifierEquals(FnvHash.Constants.COLLATE)) {\\n                lexer.nextToken();\\n\\n                if (lexer.token() == Token.EQ) {\\n                    lexer.nextToken();\\n                }\\n\\n                if (lexer.token() != Token.IDENTIFIER\\n                        && lexer.token() != Token.LITERAL_CHARS) {\\n                    throw new ParserException(\\\"syntax error. \\\" + lexer.info());\\n                }\\n\\n                String collate = lexer.stringVal();\\n                lexer.nextToken();\\n\\n                SQLBinaryOpExpr binaryExpr = new SQLBinaryOpExpr(expr, SQLBinaryOperator.COLLATE,\\n                        new SQLIdentifierExpr(collate), JdbcConstants.MYSQL);\\n\\n                expr = binaryExpr;\\n\\n                return primaryRest(expr);\\n            } else if (expr instanceof SQLVariantRefExpr) {\\n                if (lexer.identifierEquals(FnvHash.Constants.COLLATE)) {\\n                    lexer.nextToken();\\n\\n                    if (lexer.token() != Token.IDENTIFIER\\n                            && lexer.token() != Token.LITERAL_CHARS) {\\n                        throw new ParserException(\\\"syntax error. \\\" + lexer.info());\\n                    }\\n\\n                    String collate = lexer.stringVal();\\n                    lexer.nextToken();\\n\\n                    expr.putAttribute(\\\"COLLATE\\\", collate);\\n\\n                    return primaryRest(expr);\\n                }\\n            }\\n        }\\n\\n//        if (lexer.token() == Token.LPAREN && expr instanceof SQLIdentifierExpr) {\\n//            SQLIdentifierExpr identExpr = (SQLIdentifierExpr) expr;\\n//            String ident = identExpr.getName();\\n//\\n//            if (\\\"POSITION\\\".equalsIgnoreCase(ident)) {\\n//                return parsePosition();\\n//            }\\n//        }\\n\\n        if (lexer.token() == Token.VARIANT && \\\"@\\\".equals(lexer.stringVal())) {\\n            return userNameRest(expr);\\n        }\\n\\n        //\\n        if (expr instanceof SQLMethodInvokeExpr && lexer.token() == Token.LBRACKET) {\\n            lexer.nextToken();\\n            expr = bracketRest(expr);\\n            return primaryRest(expr);\\n        }\\n\\n        if (lexer.token() == Token.ERROR) {\\n            throw new ParserException(\\\"syntax error. \\\" + lexer.info());\\n        }\\n\\n        return super.primaryRest(expr);\\n    }\\n\\n    protected SQLExpr bracketRest(SQLExpr expr) {\\n        Number index;\\n\\n        if (lexer.token() == Token.LITERAL_INT) {\\n            index = lexer.integerValue();\\n            lexer.nextToken();\\n        } else {\\n            throw new ParserException(\\\"error : \\\" + lexer.stringVal());\\n        }\\n\\n        if (expr instanceof SQLMethodInvokeExpr) {\\n            SQLMethodInvokeExpr methodInvokeExpr = (SQLMethodInvokeExpr) expr;\\n            methodInvokeExpr.getParameters().add(new SQLIntegerExpr(index));\\n        }\\n        lexer.nextToken();\\n        expr = primaryRest(expr);\\n        return expr;\\n    }\\n\\n    public SQLName userName() {\\n        SQLName name = this.name();\\n        if (lexer.token() == Token.LPAREN && name.hashCode64() == FnvHash.Constants.CURRENT_USER) {\\n            lexer.nextToken();\\n            accept(Token.RPAREN);\\n            return name;\\n        }\\n\\n        return (SQLName) userNameRest(name);\\n    }\\n\\n    private SQLExpr userNameRest(SQLExpr expr) {\\n        if (lexer.token() != Token.VARIANT || !lexer.stringVal().startsWith(\\\"@\\\")) {\\n            return expr;\\n        }\\n\\n        MySqlUserName userName = new MySqlUserName();\\n        if (expr instanceof SQLCharExpr) {\\n            userName.setUserName(((SQLCharExpr) expr).toString());\\n        } else {\\n            userName.setUserName(((SQLIdentifierExpr) expr).getName());\\n        }\\n\\n\\n        String strVal = lexer.stringVal();\\n        lexer.nextToken();\\n\\n        if (strVal.length() > 1) {\\n            userName.setHost(strVal.substring(1));\\n            return userName;\\n        }\\n\\n        if (lexer.token() == Token.LITERAL_CHARS) {\\n            userName.setHost(\\\"'\\\" + lexer.stringVal() + \\\"'\\\");\\n        } else {\\n            userName.setHost(lexer.stringVal());\\n        }\\n        lexer.nextToken();\\n\\n        if (lexer.token() == Token.IDENTIFIED) {\\n            Lexer.SavePoint mark = lexer.mark();\\n\\n            lexer.nextToken();\\n            if (lexer.token() == Token.BY) {\\n                lexer.nextToken();\\n                if (lexer.identifierEquals(FnvHash.Constants.PASSWORD)) {\\n                    lexer.reset(mark);\\n                } else {\\n                    userName.setIdentifiedBy(lexer.stringVal());\\n                    lexer.nextToken();\\n                }\\n            } else {\\n                lexer.reset(mark);\\n            }\\n        }\\n\\n        return userName;\\n    }\\n\\n    protected SQLExpr parsePosition() {\\n\\n        SQLExpr subStr = this.primary();\\n        accept(Token.IN);\\n        SQLExpr str = this.expr();\\n        accept(Token.RPAREN);\\n\\n        SQLMethodInvokeExpr locate = new SQLMethodInvokeExpr(\\\"LOCATE\\\");\\n        locate.addParameter(subStr);\\n        locate.addParameter(str);\\n\\n        return primaryRest(locate);\\n    }\\n\\n    protected SQLExpr parseExtract() {\\n        SQLExpr expr;\\n        if (lexer.token() != Token.IDENTIFIER) {\\n            throw new ParserException(\\\"syntax error. \\\" + lexer.info());\\n        }\\n\\n        String unitVal = lexer.stringVal();\\n        SQLIntervalUnit unit = SQLIntervalUnit.valueOf(unitVal.toUpperCase());\\n        lexer.nextToken();\\n\\n        accept(Token.FROM);\\n\\n        SQLExpr value = expr();\\n\\n        MySqlExtractExpr extract = new MySqlExtractExpr();\\n        extract.setValue(value);\\n        extract.setUnit(unit);\\n        accept(Token.RPAREN);\\n\\n        expr = extract;\\n\\n        return primaryRest(expr);\\n    }\\n\\n    protected SQLExpr parseMatch() {\\n\\n        MySqlMatchAgainstExpr matchAgainstExpr = new MySqlMatchAgainstExpr();\\n\\n        if (lexer.token() == Token.RPAREN) {\\n            lexer.nextToken();\\n        } else {\\n            exprList(matchAgainstExpr.getColumns(), matchAgainstExpr);\\n            accept(Token.RPAREN);\\n        }\\n\\n        acceptIdentifier(\\\"AGAINST\\\");\\n\\n        accept(Token.LPAREN);\\n        SQLExpr against = primary();\\n        matchAgainstExpr.setAgainst(against);\\n\\n        if (lexer.token() == Token.IN) {\\n            lexer.nextToken();\\n            if (lexer.identifierEquals(FnvHash.Constants.NATURAL)) {\\n                lexer.nextToken();\\n                acceptIdentifier(\\\"LANGUAGE\\\");\\n                acceptIdentifier(\\\"MODE\\\");\\n                if (lexer.token() == Token.WITH) {\\n                    lexer.nextToken();\\n                    acceptIdentifier(\\\"QUERY\\\");\\n                    acceptIdentifier(\\\"EXPANSION\\\");\\n                    matchAgainstExpr.setSearchModifier(MySqlMatchAgainstExpr.SearchModifier.IN_NATURAL_LANGUAGE_MODE_WITH_QUERY_EXPANSION);\\n                } else {\\n                    matchAgainstExpr.setSearchModifier(MySqlMatchAgainstExpr.SearchModifier.IN_NATURAL_LANGUAGE_MODE);\\n                }\\n            } else if (lexer.identifierEquals(FnvHash.Constants.BOOLEAN)) {\\n                lexer.nextToken();\\n                acceptIdentifier(\\\"MODE\\\");\\n                matchAgainstExpr.setSearchModifier(MySqlMatchAgainstExpr.SearchModifier.IN_BOOLEAN_MODE);\\n            } else {\\n                throw new ParserException(\\\"syntax error. \\\" + lexer.info());\\n            }\\n        } else if (lexer.token() == Token.WITH) {\\n            throw new ParserException(\\\"TODO. \\\" + lexer.info());\\n        }\\n\\n        accept(Token.RPAREN);\\n\\n        return primaryRest(matchAgainstExpr);\\n    }\\n\\n    public SQLSelectParser createSelectParser() {\\n        return new ElasticSqlSelectParser(this);\\n    }\\n\\n    protected SQLExpr parseInterval() {\\n        accept(Token.INTERVAL);\\n\\n        if (lexer.token() == Token.LPAREN) {\\n            lexer.nextToken();\\n\\n            SQLMethodInvokeExpr methodInvokeExpr = new SQLMethodInvokeExpr(\\\"INTERVAL\\\");\\n            if (lexer.token() != Token.RPAREN) {\\n                exprList(methodInvokeExpr.getParameters(), methodInvokeExpr);\\n            }\\n\\n            accept(Token.RPAREN);\\n\\n            //\\n\\n            if (methodInvokeExpr.getParameters().size() == 1 //\\n                    && lexer.token() == Token.IDENTIFIER) {\\n                SQLExpr value = methodInvokeExpr.getParameters().get(0);\\n                String unit = lexer.stringVal();\\n                lexer.nextToken();\\n\\n                SQLIntervalExpr intervalExpr = new SQLIntervalExpr();\\n                intervalExpr.setValue(value);\\n                intervalExpr.setUnit(SQLIntervalUnit.valueOf(unit.toUpperCase()));\\n                return intervalExpr;\\n            } else {\\n                return primaryRest(methodInvokeExpr);\\n            }\\n        } else {\\n            SQLExpr value = expr();\\n\\n            if (lexer.token() != Token.IDENTIFIER) {\\n                throw new ParserException(\\\"Syntax error. \\\" + lexer.info());\\n            }\\n\\n            String unit = lexer.stringVal();\\n            lexer.nextToken();\\n\\n            SQLIntervalExpr intervalExpr = new SQLIntervalExpr();\\n            intervalExpr.setValue(value);\\n            intervalExpr.setUnit(SQLIntervalUnit.valueOf(unit.toUpperCase()));\\n\\n            return intervalExpr;\\n        }\\n    }\\n\\n    public SQLColumnDefinition parseColumn() {\\n        SQLColumnDefinition column = new SQLColumnDefinition();\\n        column.setDbType(dbType);\\n        column.setName(name());\\n        column.setDataType(parseDataType());\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.GENERATED)) {\\n            lexer.nextToken();\\n            acceptIdentifier(\\\"ALWAYS\\\");\\n            accept(Token.AS);\\n            accept(Token.LPAREN);\\n            SQLExpr expr = this.expr();\\n            accept(Token.RPAREN);\\n            column.setGeneratedAlawsAs(expr);\\n        }\\n\\n        return parseColumnRest(column);\\n    }\\n\\n    public SQLColumnDefinition parseColumnRest(SQLColumnDefinition column) {\\n        if (lexer.token() == Token.ON) {\\n            lexer.nextToken();\\n            accept(Token.UPDATE);\\n            SQLExpr expr = this.expr();\\n            column.setOnUpdate(expr);\\n        }\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.CHARACTER)) {\\n            lexer.nextToken();\\n            accept(Token.SET);\\n            MySqlCharExpr charSetCollateExpr=new MySqlCharExpr();\\n            charSetCollateExpr.setCharset(lexer.stringVal());\\n            lexer.nextToken();\\n            if (lexer.identifierEquals(FnvHash.Constants.COLLATE)) {\\n                lexer.nextToken();\\n                charSetCollateExpr.setCollate(lexer.stringVal());\\n                lexer.nextToken();\\n            }\\n            column.setCharsetExpr(charSetCollateExpr);\\n            return parseColumnRest(column);\\n        }\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.CHARSET)) {\\n            lexer.nextToken();\\n            MySqlCharExpr charSetCollateExpr=new MySqlCharExpr();\\n            charSetCollateExpr.setCharset(lexer.stringVal());\\n            lexer.nextToken();\\n            if (lexer.identifierEquals(FnvHash.Constants.COLLATE)) {\\n                lexer.nextToken();\\n                charSetCollateExpr.setCollate(lexer.stringVal());\\n                lexer.nextToken();\\n            }\\n            column.setCharsetExpr(charSetCollateExpr);\\n            return parseColumnRest(column);\\n        }\\n        if (lexer.identifierEquals(FnvHash.Constants.AUTO_INCREMENT)) {\\n            lexer.nextToken();\\n            column.setAutoIncrement(true);\\n            return parseColumnRest(column);\\n        }\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.PRECISION)\\n                && column.getDataType().nameHashCode64() ==FnvHash.Constants.DOUBLE) {\\n            lexer.nextToken();\\n        }\\n\\n        if (lexer.token() == Token.PARTITION) {\\n            throw new ParserException(\\\"syntax error \\\" + lexer.info());\\n        }\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.STORAGE)) {\\n            lexer.nextToken();\\n            SQLExpr expr = expr();\\n            column.setStorage(expr);\\n        }\\n\\n        if (lexer.token() == Token.AS) {\\n            lexer.nextToken();\\n            accept(Token.LPAREN);\\n            SQLExpr expr = expr();\\n            column.setAsExpr(expr);\\n            accept(Token.RPAREN);\\n        }\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.STORED)) {\\n            lexer.nextToken();\\n            column.setStored(true);\\n        }\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.VIRTUAL)) {\\n            lexer.nextToken();\\n            column.setVirtual(true);\\n        }\\n\\n        super.parseColumnRest(column);\\n\\n        return column;\\n    }\\n\\n    protected SQLDataType parseDataTypeRest(SQLDataType dataType) {\\n        super.parseDataTypeRest(dataType);\\n\\n        for (;;) {\\n            if (lexer.identifierEquals(FnvHash.Constants.UNSIGNED)) {\\n                lexer.nextToken();\\n                ((SQLDataTypeImpl) dataType).setUnsigned(true);\\n            } else if (lexer.identifierEquals(FnvHash.Constants.ZEROFILL)) {\\n                lexer.nextToken();\\n                ((SQLDataTypeImpl) dataType).setZerofill(true);\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        return dataType;\\n    }\\n\\n    public SQLAssignItem parseAssignItem() {\\n        SQLAssignItem item = new SQLAssignItem();\\n\\n        SQLExpr var = primary();\\n\\n        String ident = null;\\n        long identHash = 0;\\n        if (var instanceof SQLIdentifierExpr) {\\n            SQLIdentifierExpr identExpr = (SQLIdentifierExpr) var;\\n            ident = identExpr.getName();\\n            identHash = identExpr.hashCode64();\\n\\n            if (identHash == FnvHash.Constants.GLOBAL) {\\n                ident = lexer.stringVal();\\n                lexer.nextToken();\\n                var = new SQLVariantRefExpr(ident, true);\\n            } else if (identHash == FnvHash.Constants.SESSION) {\\n                ident = lexer.stringVal();\\n                lexer.nextToken();\\n                var = new SQLVariantRefExpr(ident, false, true);\\n            } else {\\n                var = new SQLVariantRefExpr(ident);\\n            }\\n        }\\n\\n        if (identHash == FnvHash.Constants.NAMES) {\\n            String charset = lexer.stringVal();\\n\\n            SQLExpr varExpr = null;\\n            boolean chars = false;\\n            final Token token = lexer.token();\\n            if (token == Token.IDENTIFIER) {\\n                lexer.nextToken();\\n            } else if (token == Token.DEFAULT) {\\n                charset = \\\"DEFAULT\\\";\\n                lexer.nextToken();\\n            } else if (token == Token.QUES) {\\n                varExpr = new SQLVariantRefExpr(\\\"?\\\");\\n                lexer.nextToken();\\n            } else {\\n                chars = true;\\n                accept(Token.LITERAL_CHARS);\\n            }\\n\\n            if (lexer.identifierEquals(FnvHash.Constants.COLLATE)) {\\n                MySqlCharExpr charsetExpr = new MySqlCharExpr(charset);\\n                lexer.nextToken();\\n\\n                String collate = lexer.stringVal();\\n                lexer.nextToken();\\n                charsetExpr.setCollate(collate);\\n\\n                item.setValue(charsetExpr);\\n            } else {\\n                if (varExpr != null) {\\n                    item.setValue(varExpr);\\n                } else {\\n                    item.setValue(chars\\n                            ? new SQLCharExpr(charset)\\n                            : new SQLIdentifierExpr(charset)\\n                    );\\n                }\\n            }\\n\\n            item.setTarget(var);\\n            return item;\\n        } else if (identHash == FnvHash.Constants.CHARACTER) {\\n            var = new SQLIdentifierExpr(\\\"CHARACTER SET\\\");\\n            accept(Token.SET);\\n            if (lexer.token() == Token.EQ) {\\n                lexer.nextToken();\\n            }\\n        } else {\\n            if (lexer.token() == Token.COLONEQ) {\\n                lexer.nextToken();\\n            } else {\\n                accept(Token.EQ);\\n            }\\n        }\\n\\n        if (lexer.token() == Token.ON) {\\n            lexer.nextToken();\\n            item.setValue(new SQLIdentifierExpr(\\\"ON\\\"));\\n        } else {\\n            item.setValue(this.expr());\\n        }\\n\\n        item.setTarget(var);\\n        return item;\\n    }\\n\\n    public SQLName nameRest(SQLName name) {\\n        if (lexer.token() == Token.VARIANT && \\\"@\\\".equals(lexer.stringVal())) {\\n            lexer.nextToken();\\n            MySqlUserName userName = new MySqlUserName();\\n            userName.setUserName(((SQLIdentifierExpr) name).getName());\\n\\n            if (lexer.token() == Token.LITERAL_CHARS) {\\n                userName.setHost(\\\"'\\\" + lexer.stringVal() + \\\"'\\\");\\n            } else {\\n                userName.setHost(lexer.stringVal());\\n            }\\n            lexer.nextToken();\\n\\n            if (lexer.token() == Token.IDENTIFIED) {\\n                lexer.nextToken();\\n                accept(Token.BY);\\n                userName.setIdentifiedBy(lexer.stringVal());\\n                lexer.nextToken();\\n            }\\n\\n            return userName;\\n        }\\n        return super.nameRest(name);\\n    }\\n\\n    @Override\\n    public MySqlPrimaryKey parsePrimaryKey() {\\n        accept(Token.PRIMARY);\\n        accept(Token.KEY);\\n\\n        MySqlPrimaryKey primaryKey = new MySqlPrimaryKey();\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.USING)) {\\n            lexer.nextToken();\\n            primaryKey.setIndexType(lexer.stringVal());\\n            lexer.nextToken();\\n        }\\n\\n        if (lexer.token() != Token.LPAREN) {\\n            SQLName name = this.name();\\n            primaryKey.setName(name);\\n        }\\n\\n        accept(Token.LPAREN);\\n        for (;;) {\\n            SQLExpr expr;\\n            if (lexer.token() == Token.LITERAL_ALIAS) {\\n                expr = this.name();\\n            } else {\\n                expr = this.expr();\\n            }\\n            primaryKey.addColumn(expr);\\n            if (!(lexer.token() == (Token.COMMA))) {\\n                break;\\n            } else {\\n                lexer.nextToken();\\n            }\\n        }\\n        accept(Token.RPAREN);\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.USING)) {\\n            lexer.nextToken();\\n            primaryKey.setIndexType(lexer.stringVal());\\n            lexer.nextToken();\\n        }\\n\\n        return primaryKey;\\n    }\\n\\n    public MySqlUnique parseUnique() {\\n        accept(Token.UNIQUE);\\n\\n        if (lexer.token() == Token.KEY) {\\n            lexer.nextToken();\\n        }\\n\\n        if (lexer.token() == Token.INDEX) {\\n            lexer.nextToken();\\n        }\\n\\n        MySqlUnique unique = new MySqlUnique();\\n\\n        if (lexer.token() != Token.LPAREN) {\\n            SQLName indexName = name();\\n            unique.setName(indexName);\\n        }\\n\\n        //5.5语法 USING BTREE 放在index 名字后\\n        if (lexer.identifierEquals(FnvHash.Constants.USING)) {\\n            lexer.nextToken();\\n            unique.setIndexType(lexer.stringVal());\\n            lexer.nextToken();\\n        }\\n\\n        accept(Token.LPAREN);\\n        for (;;) {\\n            SQLExpr column = this.expr();\\n            if (lexer.token() == Token.ASC) {\\n                column = new MySqlOrderingExpr(column, SQLOrderingSpecification.ASC);\\n                lexer.nextToken();\\n            } else if (lexer.token() == Token.DESC) {\\n                column = new MySqlOrderingExpr(column, SQLOrderingSpecification.DESC);\\n                lexer.nextToken();\\n            }\\n            unique.addColumn(column);\\n            if (!(lexer.token() == (Token.COMMA))) {\\n                break;\\n            } else {\\n                lexer.nextToken();\\n            }\\n        }\\n        accept(Token.RPAREN);\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.USING)) {\\n            lexer.nextToken();\\n            unique.setIndexType(lexer.stringVal());\\n            lexer.nextToken();\\n        }\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.KEY_BLOCK_SIZE)) {\\n            lexer.nextToken();\\n            if (lexer.token() == Token.EQ) {\\n                lexer.nextToken();\\n            }\\n            SQLExpr value = this.primary();\\n            unique.setKeyBlockSize(value);\\n        }\\n\\n        return unique;\\n    }\\n\\n    public MysqlForeignKey parseForeignKey() {\\n        accept(Token.FOREIGN);\\n        accept(Token.KEY);\\n\\n        MysqlForeignKey fk = new MysqlForeignKey();\\n\\n        if (lexer.token() != Token.LPAREN) {\\n            SQLName indexName = name();\\n            fk.setIndexName(indexName);\\n        }\\n\\n        accept(Token.LPAREN);\\n        this.names(fk.getReferencingColumns(), fk);\\n        accept(Token.RPAREN);\\n\\n        accept(Token.REFERENCES);\\n\\n        fk.setReferencedTableName(this.name());\\n\\n        accept(Token.LPAREN);\\n        this.names(fk.getReferencedColumns());\\n        accept(Token.RPAREN);\\n\\n        if (lexer.identifierEquals(FnvHash.Constants.MATCH)) {\\n            lexer.nextToken();\\n            if (lexer.identifierEquals(\\\"FULL\\\") || lexer.token() == Token.FULL) {\\n                fk.setReferenceMatch(SQLForeignKeyImpl.Match.FULL);\\n                lexer.nextToken();\\n            } else if (lexer.identifierEquals(FnvHash.Constants.PARTIAL)) {\\n                fk.setReferenceMatch(SQLForeignKeyImpl.Match.PARTIAL);\\n                lexer.nextToken();\\n            } else if (lexer.identifierEquals(FnvHash.Constants.SIMPLE)) {\\n                fk.setReferenceMatch(SQLForeignKeyImpl.Match.SIMPLE);\\n                lexer.nextToken();\\n            } else {\\n                throw new ParserException(\\\"TODO : \\\" + lexer.info());\\n            }\\n        }\\n\\n        while (lexer.token() == Token.ON) {\\n            lexer.nextToken();\\n\\n            if (lexer.token() == Token.DELETE) {\\n                lexer.nextToken();\\n\\n                SQLForeignKeyImpl.Option option = parseReferenceOption();\\n                fk.setOnDelete(option);\\n            } else if (lexer.token() == Token.UPDATE) {\\n                lexer.nextToken();\\n\\n                SQLForeignKeyImpl.Option option = parseReferenceOption();\\n                fk.setOnUpdate(option);\\n            } else {\\n                throw new ParserException(\\\"syntax error, expect DELETE or UPDATE, actual \\\" + lexer.token() + \\\" \\\"\\n                        + lexer.info());\\n            }\\n        }\\n        return fk;\\n    }\\n\\n    protected SQLAggregateExpr parseAggregateExprRest(SQLAggregateExpr aggregateExpr) {\\n        if (lexer.token() == Token.ORDER) {\\n            SQLOrderBy orderBy = this.parseOrderBy();\\n            aggregateExpr.putAttribute(\\\"ORDER BY\\\", orderBy);\\n        }\\n        if (lexer.identifierEquals(FnvHash.Constants.SEPARATOR)) {\\n            lexer.nextToken();\\n\\n            SQLExpr seperator = this.primary();\\n            seperator.setParent(aggregateExpr);\\n\\n            aggregateExpr.putAttribute(\\\"SEPARATOR\\\", seperator);\\n        }\\n        return aggregateExpr;\\n    }\\n\\n    public MySqlOrderingExpr parseSelectGroupByItem() {\\n        MySqlOrderingExpr item = new MySqlOrderingExpr();\\n\\n        item.setExpr(expr());\\n\\n        if (lexer.token() == Token.ASC) {\\n            lexer.nextToken();\\n            item.setType(SQLOrderingSpecification.ASC);\\n        } else if (lexer.token() == Token.DESC) {\\n            lexer.nextToken();\\n            item.setType(SQLOrderingSpecification.DESC);\\n        }\\n\\n        return item;\\n    }\\n\\n    public SQLPartition parsePartition() {\\n        accept(Token.PARTITION);\\n\\n        SQLPartition partitionDef = new SQLPartition();\\n\\n        partitionDef.setName(this.name());\\n\\n        SQLPartitionValue values = this.parsePartitionValues();\\n        if (values != null) {\\n            partitionDef.setValues(values);\\n        }\\n\\n        for (;;) {\\n            boolean storage = false;\\n            if (lexer.identifierEquals(FnvHash.Constants.DATA)) {\\n                lexer.nextToken();\\n                acceptIdentifier(\\\"DIRECTORY\\\");\\n                if (lexer.token() == Token.EQ) {\\n                    lexer.nextToken();\\n                }\\n                partitionDef.setDataDirectory(this.expr());\\n            } else if (lexer.token() == Token.TABLESPACE) {\\n                lexer.nextToken();\\n                if (lexer.token() == Token.EQ) {\\n                    lexer.nextToken();\\n                }\\n                SQLName tableSpace = this.name();\\n                partitionDef.setTablespace(tableSpace);\\n            } else if (lexer.token() == Token.INDEX) {\\n                lexer.nextToken();\\n                acceptIdentifier(\\\"DIRECTORY\\\");\\n                if (lexer.token() == Token.EQ) {\\n                    lexer.nextToken();\\n                }\\n                partitionDef.setIndexDirectory(this.expr());\\n            } else if (lexer.identifierEquals(FnvHash.Constants.MAX_ROWS)) {\\n                lexer.nextToken();\\n                if (lexer.token() == Token.EQ) {\\n                    lexer.nextToken();\\n                }\\n                SQLExpr maxRows = this.primary();\\n                partitionDef.setMaxRows(maxRows);\\n            } else if (lexer.identifierEquals(FnvHash.Constants.MIN_ROWS)) {\\n                lexer.nextToken();\\n                if (lexer.token() == Token.EQ) {\\n                    lexer.nextToken();\\n                }\\n                SQLExpr minRows = this.primary();\\n                partitionDef.setMaxRows(minRows);\\n            } else if (lexer.identifierEquals(FnvHash.Constants.ENGINE) || //\\n                    (storage = (lexer.token() == Token.STORAGE || lexer.identifierEquals(FnvHash.Constants.STORAGE)))) {\\n                if (storage) {\\n                    lexer.nextToken();\\n                }\\n                acceptIdentifier(\\\"ENGINE\\\");\\n\\n                if (lexer.token() == Token.EQ) {\\n                    lexer.nextToken();\\n                }\\n\\n                SQLName engine = this.name();\\n                partitionDef.setEngine(engine);\\n            } else if (lexer.token() == Token.COMMENT) {\\n                lexer.nextToken();\\n                if (lexer.token() == Token.EQ) {\\n                    lexer.nextToken();\\n                }\\n                SQLExpr comment = this.primary();\\n                partitionDef.setComment(comment);\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        if (lexer.token() == Token.LPAREN) {\\n            lexer.nextToken();\\n\\n            for (;;) {\\n                acceptIdentifier(\\\"SUBPARTITION\\\");\\n\\n                SQLName subPartitionName = this.name();\\n                SQLSubPartition subPartition = new SQLSubPartition();\\n                subPartition.setName(subPartitionName);\\n\\n                partitionDef.addSubPartition(subPartition);\\n\\n                if (lexer.token() == Token.COMMA) {\\n                    lexer.nextToken();\\n                    continue;\\n                }\\n                break;\\n            }\\n\\n            accept(Token.RPAREN);\\n        }\\n        return partitionDef;\\n    }\\n\\n    protected SQLExpr parseAliasExpr(String alias) {\\n        String chars = alias.substring(1, alias.length() - 1);\\n        return new SQLCharExpr(chars);\\n    }\\n\\n}\"}, {\"identifier\":\"ScriptFilter\", \"path\":\"src/main/java/org/nlpcn/es4sql/parse/ScriptFilter.java\", \"snippet\":\"public class ScriptFilter {\\n    private String script;\\n    private Map<String,Object> args;\\n    private ScriptType scriptType;\\n    public ScriptFilter() {\\n\\n        args = null;\\n        scriptType = ScriptType.INLINE;\\n    }\\n\\n    public ScriptFilter(String script, Map<String, Object> args, ScriptType scriptType) {\\n        this.script = script;\\n        this.args = args;\\n        this.scriptType = scriptType;\\n    }\\n\\n    public boolean tryParseFromMethodExpr(SQLMethodInvokeExpr expr) throws SqlParseException {\\n        if (!expr.getMethodName().toLowerCase().equals(\\\"script\\\")) {\\n            return false;\\n        }\\n        List<SQLExpr> methodParameters = expr.getParameters();\\n        if (methodParameters.size() == 0) {\\n            return false;\\n        }\\n        script = Util.extendedToString(methodParameters.get(0));\\n\\n        if (methodParameters.size() == 1) {\\n            return true;\\n        }\\n\\n        args = new HashMap<>();\\n        for (int i = 1; i < methodParameters.size(); i++) {\\n\\n            SQLExpr innerExpr = methodParameters.get(i);\\n            if (!(innerExpr instanceof SQLBinaryOpExpr)) {\\n                return false;\\n            }\\n            SQLBinaryOpExpr binaryOpExpr = (SQLBinaryOpExpr) innerExpr;\\n            if (!binaryOpExpr.getOperator().getName().equals(\\\"=\\\")) {\\n                return false;\\n            }\\n\\n            SQLExpr right = binaryOpExpr.getRight();\\n            Object value = Util.expr2Object(right);\\n            String key = Util.extendedToString(binaryOpExpr.getLeft());\\n            if(key.equals(\\\"script_type\\\")){\\n                parseAndUpdateScriptType(value.toString());\\n            }\\n            else {\\n                args.put(key, value);\\n            }\\n\\n        }\\n        return true;\\n    }\\n\\n    private void parseAndUpdateScriptType(String scriptType) {\\n        String scriptTypeUpper = scriptType.toUpperCase();\\n        switch(scriptTypeUpper){\\n            case \\\"INLINE\\\":\\n                this.scriptType = ScriptType.INLINE;\\n                break;\\n            case \\\"INDEXED\\\":\\n            case \\\"STORED\\\":\\n                this.scriptType = ScriptType.STORED;\\n                break;\\n        }\\n    }\\n\\n    public boolean containsParameters(){\\n        return args!=null && args.size() > 0;\\n    }\\n\\n    public String getScript() {\\n        return script;\\n    }\\n\\n    public ScriptType getScriptType() {\\n        return scriptType;\\n    }\\n\\n    public Map<String, Object> getArgs() {\\n        return args;\\n    }\\n\\n}\"}, {\"identifier\":\"SqlParser\", \"path\":\"src/main/java/org/nlpcn/es4sql/parse/SqlParser.java\", \"snippet\":\"public class SqlParser {\\n\\n\\n    public SqlParser() {\\n\\n    }\\n\\n    public Select parseSelect(SQLQueryExpr mySqlExpr) throws SqlParseException {\\n\\n        SQLSelectQueryBlock query = (SQLSelectQueryBlock) mySqlExpr.getSubQuery().getQuery();\\n\\n        Select select = parseSelect(query);\\n\\n        return select;\\n    }\\n\\n    /**\\n     * zhongshu-comment 在访问AST里面的子句、token\\n     * @param query\\n     * @return\\n     * @throws SqlParseException\\n     */\\n    public Select parseSelect(SQLSelectQueryBlock query) throws SqlParseException {\\n\\n        Select select = new Select();\\n        /*zhongshu-comment SqlParser类没有成员变量，里面全是方法，所以将this传到WhereParser对象时是无状态的，\\n                          即SqlParser对象并没有给WhereParser传递任何属性，也不存在WhereParser修改SqlParser的成员变量值这一说\\n                         WhereParser只是单纯想调用SqlParser的方法而已\\n        */\\n        WhereParser whereParser = new WhereParser(this, query);\\n\\n        /*\\n        zhongshu-comment 例如sql：select   a,sum(b),case when c='a' then 1 else 2 end as my_c from tbl，\\n        那findSelect()就是解析这一部分了：a,sum(b),case when c='a' then 1 else 2 end as my_c\\n         */\\n        findSelect(query, select, query.getFrom().getAlias()); //zhongshu-comment 看过\\n\\n        select.getFrom().addAll(findFrom(query.getFrom())); //zhongshu-comment 看过\\n\\n        select.setWhere(whereParser.findWhere()); //zhongshu-comment 看过\\n\\n        //zhongshu-comment 这个应该是针对where子查询的，而不是from子查询，貌似又不是解析from子查询的，报错了\\n        //zhongshu-comment 也许es本身就不支持子查询，所以es-sql就没实现，那这个fillSubQueries是什么啊？？\\n        //todo 看不懂，测试了好几个常见的sql，都没有进去该方法，那就先不理了，看别的\\n        select.fillSubQueries();\\n\\n        //zhongshu-comment 解析sql语句中的注释：select /*! USE_SCROLL(10,120000) */ * FROM spark_es_table\\n        //hint单词的意思是提示，即sql中的注释内容\\n        // /* 和 */之间是sql的注释内容，这是sql本身的语法，然后sql解析器会将注释块之间的内容“! USE_SCROLL(10,120000) ”抽取出来\\n        // ! USE_SCROLL是es-sql自己定义的一套规则，\\n        // 在不增加mysql原有语法的情况下，利用注释来灵活地扩展es-sql的功能，这样就能使用druid的mysql语法解析器了，无需自己实现\\n        // 注意：!叹号和USE_SCROLL之间要空且只能空一格\\n        select.getHints().addAll(parseHints(query.getHints()));\\n\\n        findLimit(query.getLimit(), select);\\n\\n        //zhongshu-comment 和那个_score有关\\n        findOrderBy(query, select); //zhongshu-comment 还没看\\n\\n        findGroupBy(query, select); //zhongshu-comment aggregations\\n        return select;\\n    }\\n\\n    public Delete parseDelete(SQLDeleteStatement deleteStatement) throws SqlParseException {\\n        Delete delete = new Delete();\\n        WhereParser whereParser = new WhereParser(this, deleteStatement);\\n\\n        delete.getFrom().addAll(findFrom(deleteStatement.getTableSource()));\\n\\n        delete.setWhere(whereParser.findWhere());\\n\\n        delete.getHints().addAll(parseHints(((MySqlDeleteStatement) deleteStatement).getHints()));\\n\\n        findLimit(((MySqlDeleteStatement) deleteStatement).getLimit(), delete);\\n\\n        return delete;\\n    }\\n\\n    public MultiQuerySelect parseMultiSelect(SQLUnionQuery query) throws SqlParseException {\\n        Select firstTableSelect = this.parseSelect((SQLSelectQueryBlock) query.getLeft());\\n        Select secondTableSelect = this.parseSelect((SQLSelectQueryBlock) query.getRight());\\n        return new MultiQuerySelect(query.getOperator(),firstTableSelect,secondTableSelect);\\n    }\\n\\n    private void findSelect(SQLSelectQueryBlock query, Select select, String tableAlias) throws SqlParseException {\\n        List<SQLSelectItem> selectList = query.getSelectList();\\n        for (SQLSelectItem sqlSelectItem : selectList) {\\n            Field field = FieldMaker.makeField(sqlSelectItem.getExpr(), sqlSelectItem.getAlias(), tableAlias);\\n            select.addField(field);\\n        }\\n    }\\n\\n    private void findGroupBy(SQLSelectQueryBlock query, Select select) throws SqlParseException {\\n        SQLSelectGroupByClause groupBy = query.getGroupBy();\\n\\n        //modified by xzb group by 增加Having语法\\n        if (null != query.getGroupBy() && null != query.getGroupBy().getHaving()) {\\n            select.setHaving(query.getGroupBy().getHaving().toString());\\n        }\\n\\n        SQLTableSource sqlTableSource = query.getFrom();\\n        if (groupBy == null) {\\n            return;\\n        }\\n        List<SQLExpr> items = groupBy.getItems();\\n\\n        List<SQLExpr> standardGroupBys = new ArrayList<>();\\n        for (SQLExpr sqlExpr : items) {\\n            //todo: mysql expr patch\\n            if (sqlExpr instanceof MySqlOrderingExpr) {\\n                MySqlOrderingExpr sqlSelectGroupByExpr = (MySqlOrderingExpr) sqlExpr;\\n                sqlExpr = sqlSelectGroupByExpr.getExpr();\\n            }\\n            if ((sqlExpr instanceof SQLParensIdentifierExpr || !(sqlExpr instanceof SQLIdentifierExpr || sqlExpr instanceof SQLMethodInvokeExpr)) && !standardGroupBys.isEmpty()) {\\n                // flush the standard group bys\\n                // zhongshu-comment 先将standardGroupBys里面的字段传到select对象的groupBys字段中，然后给standardGroupBys分配一个没有元素的新的list\\n                select.addGroupBy(convertExprsToFields(standardGroupBys, sqlTableSource));\\n                standardGroupBys = new ArrayList<>();\\n            }\\n\\n            if (sqlExpr instanceof SQLParensIdentifierExpr) {\\n                // single item with parens (should get its own aggregation)\\n                select.addGroupBy(FieldMaker.makeField(((SQLParensIdentifierExpr) sqlExpr).getExpr(), null, sqlTableSource.getAlias()));\\n            } else if (sqlExpr instanceof SQLListExpr) {\\n                // multiple items in their own list\\n                SQLListExpr listExpr = (SQLListExpr) sqlExpr;\\n                select.addGroupBy(convertExprsToFields(listExpr.getItems(), sqlTableSource));\\n            } else {\\n                // everything else gets added to the running list of standard group bys\\n                standardGroupBys.add(sqlExpr);\\n            }\\n        }\\n        if (!standardGroupBys.isEmpty()) {\\n            select.addGroupBy(convertExprsToFields(standardGroupBys, sqlTableSource));\\n        }\\n    }\\n\\n    private List<Field> convertExprsToFields(List<? extends SQLExpr> exprs, SQLTableSource sqlTableSource) throws SqlParseException {\\n        List<Field> fields = new ArrayList<>(exprs.size());\\n        for (SQLExpr expr : exprs) {\\n            //here we suppose groupby field will not have alias,so set null in second parameter\\n            //zhongshu-comment case when 有别名过不了语法解析，没有别名执行下面语句会报空指针\\n            fields.add(FieldMaker.makeField(expr, null, sqlTableSource.getAlias()));\\n        }\\n        return fields;\\n    }\\n\\n    private String sameAliasWhere(Where where, String... aliases) throws SqlParseException {\\n        if (where == null) return null;\\n\\n        if (where instanceof Condition) {\\n            Condition condition = (Condition) where;\\n            String fieldName = condition.getName();\\n            for (String alias : aliases) {\\n                String prefix = alias + \\\".\\\";\\n                if (fieldName.startsWith(prefix)) {\\n                    return alias;\\n                }\\n            }\\n            throw new SqlParseException(String.format(\\\"fieldName : %s on codition:%s does not contain alias\\\", fieldName, condition.toString()));\\n        }\\n        List<String> sameAliases = new ArrayList<>();\\n        if (where.getWheres() != null && where.getWheres().size() > 0) {\\n            for (Where innerWhere : where.getWheres())\\n                sameAliases.add(sameAliasWhere(innerWhere, aliases));\\n        }\\n\\n        if (sameAliases.contains(null)) return null;\\n        String firstAlias = sameAliases.get(0);\\n        //return null if more than one alias\\n        for (String alias : sameAliases) {\\n            if (!alias.equals(firstAlias)) return null;\\n        }\\n        return firstAlias;\\n    }\\n\\n    private void findOrderBy(SQLSelectQueryBlock query, Select select) throws SqlParseException {\\n        SQLOrderBy orderBy = query.getOrderBy();\\n\\n        if (orderBy == null) {\\n            return;\\n        }\\n        List<SQLSelectOrderByItem> items = orderBy.getItems();\\n\\n        addOrderByToSelect(select, items, null);\\n\\n    }\\n\\n    private void addOrderByToSelect(Select select, List<SQLSelectOrderByItem> items, String alias) throws SqlParseException {\\n        for (SQLSelectOrderByItem sqlSelectOrderByItem : items) {\\n            SQLExpr expr = sqlSelectOrderByItem.getExpr();\\n            Field f = FieldMaker.makeField(expr, null, null);\\n            String orderByName = f.toString();\\n            Object missing = null;\\n            String unmappedType = null;\\n            String numericType = null;\\n            String format = null;\\n            if (\\\"field_sort\\\".equals(f.getName())) {\\n                Map<String, Object> params = ((MethodField) f).getParamsAsMap();\\n                for (Map.Entry<String, Object> entry : params.entrySet()) {\\n                    switch (entry.getKey()) {\\n                        case \\\"field\\\": orderByName = entry.getValue().toString(); break;\\n                        case \\\"missing\\\": missing = entry.getValue(); break;\\n                        case \\\"unmapped_type\\\": unmappedType = entry.getValue().toString(); break;\\n                        case \\\"numeric_type\\\": numericType = entry.getValue().toString(); break;\\n                        case \\\"format\\\": format = entry.getValue().toString(); break;\\n                    }\\n                }\\n            }\\n\\n            if (sqlSelectOrderByItem.getType() == null) {\\n                sqlSelectOrderByItem.setType(SQLOrderingSpecification.ASC); //zhongshu-comment 默认是升序排序\\n            }\\n            String type = sqlSelectOrderByItem.getType().toString();\\n\\n            orderByName = orderByName.replace(\\\"`\\\", \\\"\\\");\\n            if (alias != null) orderByName = orderByName.replaceFirst(alias + \\\"\\\\\\\\.\\\", \\\"\\\");\\n\\n            ScriptSortBuilder.ScriptSortType scriptSortType = judgeIsStringSort(expr);\\n            select.addOrderBy(f.getNestedPath(), orderByName, type, scriptSortType, missing, unmappedType, numericType, format);\\n        }\\n    }\\n\\n    private ScriptSortBuilder.ScriptSortType judgeIsStringSort(SQLExpr expr) {\\n        if (expr instanceof SQLCaseExpr) {\\n            List<SQLCaseExpr.Item> itemList = ((SQLCaseExpr) expr).getItems();\\n            for (SQLCaseExpr.Item item : itemList) {\\n                if (item.getValueExpr() instanceof SQLCharExpr) {\\n                    return ScriptSortBuilder.ScriptSortType.STRING;\\n                }\\n            }\\n        }\\n        return ScriptSortBuilder.ScriptSortType.NUMBER;\\n    }\\n\\n    private void findLimit(SQLLimit limit, Query query) {\\n\\n        if (limit == null) {\\n            return;\\n        }\\n\\n        query.setRowCount(Integer.parseInt(limit.getRowCount().toString()));\\n\\n        if (limit.getOffset() != null)\\n            query.setOffset(Integer.parseInt(limit.getOffset().toString()));\\n    }\\n\\n    /**\\n     * Parse the from clause\\n     * zhongshu-comment 只解析了一般查询和join查询，没有解析子查询\\n     * @param from the from clause.\\n     * @return list of From objects represents all the sources.\\n     */\\n    private List<From> findFrom(SQLTableSource from) {\\n        //zhongshu-comment class1.isAssignableFrom(class2) class2是不是class1的子类或者子接口\\n        //改成用instanceof 应该也行吧：from instanceof SQLExprTableSource\\n        boolean isSqlExprTable = from.getClass().isAssignableFrom(SQLExprTableSource.class);\\n\\n        if (isSqlExprTable) {\\n            SQLExprTableSource fromExpr = (SQLExprTableSource) from;\\n            String[] split = fromExpr.getExpr().toString().split(\\\",\\\");\\n\\n            ArrayList<From> fromList = new ArrayList<>();\\n            for (String source : split) {\\n                fromList.add(new From(source.trim(), fromExpr.getAlias()));\\n            }\\n            return fromList;\\n        }\\n\\n        SQLJoinTableSource joinTableSource = ((SQLJoinTableSource) from);\\n        List<From> fromList = new ArrayList<>();\\n        fromList.addAll(findFrom(joinTableSource.getLeft()));\\n        fromList.addAll(findFrom(joinTableSource.getRight()));\\n        return fromList;\\n    }\\n\\n    public JoinSelect parseJoinSelect(SQLQueryExpr sqlExpr) throws SqlParseException {\\n\\n        SQLSelectQueryBlock query = (SQLSelectQueryBlock) sqlExpr.getSubQuery().getQuery();\\n\\n        List<From> joinedFrom = findJoinedFrom(query.getFrom());\\n        if (joinedFrom.size() != 2)\\n            throw new RuntimeException(\\\"currently supports only 2 tables join\\\");\\n\\n        JoinSelect joinSelect = createBasicJoinSelectAccordingToTableSource((SQLJoinTableSource) query.getFrom());\\n        List<Hint> hints = parseHints(query.getHints());\\n        joinSelect.setHints(hints);\\n        String firstTableAlias = joinedFrom.get(0).getAlias();\\n        String secondTableAlias = joinedFrom.get(1).getAlias();\\n        Map<String, Where> aliasToWhere = splitAndFindWhere(query.getWhere(), firstTableAlias, secondTableAlias);\\n        Map<String, List<SQLSelectOrderByItem>> aliasToOrderBy = splitAndFindOrder(query.getOrderBy(), firstTableAlias, secondTableAlias);\\n        List<Condition> connectedConditions = getConditionsFlatten(joinSelect.getConnectedWhere());\\n        joinSelect.setConnectedConditions(connectedConditions);\\n        fillTableSelectedJoin(joinSelect.getFirstTable(), query, joinedFrom.get(0), aliasToWhere.get(firstTableAlias), aliasToOrderBy.get(firstTableAlias), connectedConditions);\\n        fillTableSelectedJoin(joinSelect.getSecondTable(), query, joinedFrom.get(1), aliasToWhere.get(secondTableAlias), aliasToOrderBy.get(secondTableAlias), connectedConditions);\\n\\n        updateJoinLimit(query.getLimit(), joinSelect);\\n\\n        //todo: throw error feature not supported:  no group bys on joins ?\\n        return joinSelect;\\n    }\\n\\n    private Map<String, List<SQLSelectOrderByItem>> splitAndFindOrder(SQLOrderBy orderBy, String firstTableAlias, String secondTableAlias) throws SqlParseException {\\n        Map<String, List<SQLSelectOrderByItem>> aliasToOrderBys = new HashMap<>();\\n        aliasToOrderBys.put(firstTableAlias, new ArrayList<SQLSelectOrderByItem>());\\n        aliasToOrderBys.put(secondTableAlias, new ArrayList<SQLSelectOrderByItem>());\\n        if (orderBy == null) return aliasToOrderBys;\\n        List<SQLSelectOrderByItem> orderByItems = orderBy.getItems();\\n        for (SQLSelectOrderByItem orderByItem : orderByItems) {\\n            if (orderByItem.getExpr().toString().startsWith(firstTableAlias + \\\".\\\")) {\\n                aliasToOrderBys.get(firstTableAlias).add(orderByItem);\\n            } else if (orderByItem.getExpr().toString().startsWith(secondTableAlias + \\\".\\\")) {\\n                aliasToOrderBys.get(secondTableAlias).add(orderByItem);\\n            } else\\n                throw new SqlParseException(\\\"order by field on join request should have alias before, got \\\" + orderByItem.getExpr().toString());\\n\\n        }\\n        return aliasToOrderBys;\\n    }\\n\\n    private void updateJoinLimit(SQLLimit limit, JoinSelect joinSelect) {\\n        if (limit != null && limit.getRowCount() != null) {\\n            int sizeLimit = Integer.parseInt(limit.getRowCount().toString());\\n            joinSelect.setTotalLimit(sizeLimit);\\n        }\\n    }\\n\\n    private List<Hint> parseHints(List<SQLCommentHint> sqlHints) throws SqlParseException {\\n        List<Hint> hints = new ArrayList<>();\\n        for (SQLCommentHint sqlHint : sqlHints) {\\n            Hint hint = HintFactory.getHintFromString(sqlHint.getText());\\n            if (hint != null) hints.add(hint);\\n        }\\n        return hints;\\n    }\\n\\n    private JoinSelect createBasicJoinSelectAccordingToTableSource(SQLJoinTableSource joinTableSource) throws SqlParseException {\\n        JoinSelect joinSelect = new JoinSelect();\\n        if (joinTableSource.getCondition() != null) {\\n            Where where = Where.newInstance();\\n            WhereParser whereParser = new WhereParser(this, joinTableSource.getCondition());\\n            whereParser.parseWhere(joinTableSource.getCondition(), where);\\n            joinSelect.setConnectedWhere(where);\\n        }\\n        SQLJoinTableSource.JoinType joinType = joinTableSource.getJoinType();\\n        joinSelect.setJoinType(joinType);\\n        return joinSelect;\\n    }\\n\\n    private Map<String, Where> splitAndFindWhere(SQLExpr whereExpr, String firstTableAlias, String secondTableAlias) throws SqlParseException {\\n        WhereParser whereParser = new WhereParser(this, whereExpr);\\n        Where where = whereParser.findWhere();\\n        return splitWheres(where, firstTableAlias, secondTableAlias);\\n    }\\n\\n    private void fillTableSelectedJoin(TableOnJoinSelect tableOnJoin, SQLSelectQueryBlock query, From tableFrom, Where where, List<SQLSelectOrderByItem> orderBys, List<Condition> conditions) throws SqlParseException {\\n        String alias = tableFrom.getAlias();\\n        fillBasicTableSelectJoin(tableOnJoin, tableFrom, where, orderBys, query);\\n        tableOnJoin.setConnectedFields(getConnectedFields(conditions, alias));\\n        tableOnJoin.setSelectedFields(new ArrayList<Field>(tableOnJoin.getFields()));\\n        tableOnJoin.setAlias(alias);\\n        tableOnJoin.fillSubQueries();\\n    }\\n\\n    private List<Field> getConnectedFields(List<Condition> conditions, String alias) throws SqlParseException {\\n        List<Field> fields = new ArrayList<>();\\n        String prefix = alias + \\\".\\\";\\n        for (Condition condition : conditions) {\\n            if (condition.getName().startsWith(prefix)) {\\n                fields.add(new Field(condition.getName().replaceFirst(prefix, \\\"\\\"), null));\\n            } else {\\n                if (!((condition.getValue() instanceof SQLPropertyExpr) || (condition.getValue() instanceof SQLIdentifierExpr) || (condition.getValue() instanceof String))) {\\n                    throw new SqlParseException(\\\"conditions on join should be one side is firstTable second Other , condition was:\\\" + condition.toString());\\n                }\\n                String aliasDotValue = condition.getValue().toString();\\n                int indexOfDot = aliasDotValue.indexOf(\\\".\\\");\\n                String owner = aliasDotValue.substring(0, indexOfDot);\\n                if (owner.equals(alias))\\n                    fields.add(new Field(aliasDotValue.substring(indexOfDot + 1), null));\\n            }\\n        }\\n        return fields;\\n    }\\n\\n    private void fillBasicTableSelectJoin(TableOnJoinSelect select, From from, Where where, List<SQLSelectOrderByItem> orderBys, SQLSelectQueryBlock query) throws SqlParseException {\\n        select.getFrom().add(from);\\n        findSelect(query, select, from.getAlias());\\n        select.setWhere(where);\\n        addOrderByToSelect(select, orderBys, from.getAlias());\\n    }\\n\\n    private List<Condition> getJoinConditionsFlatten(SQLJoinTableSource from) throws SqlParseException {\\n        List<Condition> conditions = new ArrayList<>();\\n        if (from.getCondition() == null) return conditions;\\n        Where where = Where.newInstance();\\n        WhereParser whereParser = new WhereParser(this, from.getCondition());\\n        whereParser.parseWhere(from.getCondition(), where);\\n        addIfConditionRecursive(where, conditions);\\n        return conditions;\\n    }\\n\\n    private List<Condition> getConditionsFlatten(Where where) throws SqlParseException {\\n        List<Condition> conditions = new ArrayList<>();\\n        if (where == null) return conditions;\\n        addIfConditionRecursive(where, conditions);\\n        return conditions;\\n    }\\n\\n\\n    private Map<String, Where> splitWheres(Where where, String... aliases) throws SqlParseException {\\n        Map<String, Where> aliasToWhere = new HashMap<>();\\n        for (String alias : aliases) {\\n            aliasToWhere.put(alias, null);\\n        }\\n        if (where == null) return aliasToWhere;\\n\\n        String allWhereFromSameAlias = sameAliasWhere(where, aliases);\\n        if (allWhereFromSameAlias != null) {\\n            removeAliasPrefix(where, allWhereFromSameAlias);\\n            aliasToWhere.put(allWhereFromSameAlias, where);\\n            return aliasToWhere;\\n        }\\n        for (Where innerWhere : where.getWheres()) {\\n            String sameAlias = sameAliasWhere(innerWhere, aliases);\\n            if (sameAlias == null)\\n                throw new SqlParseException(\\\"Currently support only one hierarchy on different tables where\\\");\\n            removeAliasPrefix(innerWhere, sameAlias);\\n            Where aliasCurrentWhere = aliasToWhere.get(sameAlias);\\n            if (aliasCurrentWhere == null) {\\n                aliasToWhere.put(sameAlias, innerWhere);\\n            } else {\\n                Where andWhereContainer = Where.newInstance();\\n                andWhereContainer.addWhere(aliasCurrentWhere);\\n                andWhereContainer.addWhere(innerWhere);\\n                aliasToWhere.put(sameAlias, andWhereContainer);\\n            }\\n        }\\n\\n        return aliasToWhere;\\n    }\\n\\n    private void removeAliasPrefix(Where where, String alias) {\\n\\n        if (where instanceof Condition) {\\n            Condition cond = (Condition) where;\\n            String fieldName = cond.getName();\\n            String aliasPrefix = alias + \\\".\\\";\\n            cond.setName(cond.getName().replaceFirst(aliasPrefix, \\\"\\\"));\\n            return;\\n        }\\n        for (Where innerWhere : where.getWheres()) {\\n            removeAliasPrefix(innerWhere, alias);\\n        }\\n    }\\n\\n    private void addIfConditionRecursive(Where where, List<Condition> conditions) throws SqlParseException {\\n        if (where instanceof Condition) {\\n            Condition cond = (Condition) where;\\n            if (!((cond.getValue() instanceof SQLIdentifierExpr) || (cond.getValue() instanceof SQLPropertyExpr) || (cond.getValue() instanceof String))) {\\n                throw new SqlParseException(\\\"conditions on join should be one side is secondTable OPEAR firstTable, condition was:\\\" + cond.toString());\\n            }\\n            conditions.add(cond);\\n        }\\n        for (Where innerWhere : where.getWheres()) {\\n            addIfConditionRecursive(innerWhere, conditions);\\n        }\\n    }\\n\\n    private List<From> findJoinedFrom(SQLTableSource from) {\\n        SQLJoinTableSource joinTableSource = ((SQLJoinTableSource) from);\\n        List<From> fromList = new ArrayList<>();\\n        fromList.addAll(findFrom(joinTableSource.getLeft()));\\n        fromList.addAll(findFrom(joinTableSource.getRight()));\\n        return fromList;\\n    }\\n\\n\\n}\"}, {\"identifier\":\"QueryAction\", \"path\":\"src/main/java/org/nlpcn/es4sql/query/QueryAction.java\", \"snippet\":\"public abstract class QueryAction {\\n\\n    protected org.nlpcn.es4sql.domain.Query query;\\n    protected Client client;\\n\\n    public QueryAction(Client client, Query query) {\\n        this.client = client;\\n        this.query = query;\\n    }\\n\\n    protected void updateRequestWithStats(Select select, SearchRequestBuilder request) {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.STATS && hint.getParams() != null && 0 < hint.getParams().length) {\\n                request.setStats(Arrays.stream(hint.getParams()).map(Object::toString).toArray(String[]::new));\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithCollapse(Select select, SearchRequestBuilder request) throws SqlParseException {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.COLLAPSE && hint.getParams() != null && 0 < hint.getParams().length) {\\n                try (XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, hint.getParams()[0].toString())) {\\n                    request.setCollapse(CollapseBuilder.fromXContent(parser));\\n                } catch (IOException e) {\\n                    throw new SqlParseException(\\\"could not parse collapse hint: \\\" + e.getMessage());\\n                }\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithPostFilter(Select select, SearchRequestBuilder request) {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.POST_FILTER && hint.getParams() != null && 0 < hint.getParams().length) {\\n                request.setPostFilter(QueryBuilders.wrapperQuery(hint.getParams()[0].toString()));\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithIndexAndRoutingOptions(Select select, SearchRequestBuilder request) {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.IGNORE_UNAVAILABLE) {\\n                //saving the defaults from TransportClient search\\n                request.setIndicesOptions(IndicesOptions.fromOptions(true, false, true, false, IndicesOptions.strictExpandOpenAndForbidClosed()));\\n            }\\n            if (hint.getType() == HintType.ROUTINGS) {\\n                Object[] routings = hint.getParams();\\n                String[] routingsAsStringArray = new String[routings.length];\\n                for (int i = 0; i < routings.length; i++) {\\n                    routingsAsStringArray[i] = routings[i].toString();\\n                }\\n                request.setRouting(routingsAsStringArray);\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithPreference(Select select, SearchRequestBuilder request) {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.PREFERENCE && hint.getParams() != null && 0 < hint.getParams().length) {\\n                request.setPreference(hint.getParams()[0].toString());\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithTrackTotalHits(Select select, SearchRequestBuilder request) {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.TRACK_TOTAL_HITS && hint.getParams() != null && 0 < hint.getParams().length) {\\n                String param = hint.getParams()[0].toString();\\n                try {\\n                    request.setTrackTotalHitsUpTo(Integer.parseInt(param));\\n                } catch (NumberFormatException ex) {\\n                    request.setTrackTotalHits(Boolean.parseBoolean(param));\\n                }\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithTimeout(Select select, SearchRequestBuilder request) {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.TIMEOUT && hint.getParams() != null && 0 < hint.getParams().length) {\\n                String param = hint.getParams()[0].toString();\\n                request.setTimeout(TimeValue.parseTimeValue(param, SearchSourceBuilder.TIMEOUT_FIELD.getPreferredName()));\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithIndicesOptions(Select select, SearchRequestBuilder request) throws SqlParseException {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.INDICES_OPTIONS && hint.getParams() != null && 0 < hint.getParams().length) {\\n                String param = hint.getParams()[0].toString();\\n                try (XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, param)) {\\n                    request.setIndicesOptions(IndicesOptions.fromMap(parser.map(), SearchRequest.DEFAULT_INDICES_OPTIONS));\\n                } catch (IOException e) {\\n                    throw new SqlParseException(\\\"could not parse indices_options hint: \\\" + e.getMessage());\\n                }\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithMinScore(Select select, SearchRequestBuilder request) {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.MIN_SCORE && hint.getParams() != null && 0 < hint.getParams().length) {\\n                String param = hint.getParams()[0].toString();\\n                request.setMinScore(Float.parseFloat(param));\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithSearchAfter(Select select, SearchRequestBuilder request) {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.SEARCH_AFTER) {\\n                request.searchAfter(hint.getParams());\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithRuntimeMappings(Select select, SearchRequestBuilder request) throws SqlParseException {\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.RUNTIME_MAPPINGS && hint.getParams() != null && 0 < hint.getParams().length) {\\n                try (XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, LoggingDeprecationHandler.INSTANCE, hint.getParams()[0].toString())) {\\n                    request.setRuntimeMappings(parser.map());\\n                } catch (IOException e) {\\n                    throw new SqlParseException(\\\"could not parse runtime_mappings hint: \\\" + e.getMessage());\\n                }\\n            }\\n        }\\n    }\\n\\n    protected void updateRequestWithHighlight(Select select, SearchRequestBuilder request) {\\n        boolean foundAnyHighlights = false;\\n        HighlightBuilder highlightBuilder = new HighlightBuilder();\\n        for (Hint hint : select.getHints()) {\\n            if (hint.getType() == HintType.HIGHLIGHT) {\\n                HighlightBuilder.Field highlightField = parseHighlightField(hint.getParams());\\n                if (highlightField != null) {\\n                    foundAnyHighlights = true;\\n                    highlightBuilder.field(highlightField);\\n                }\\n            }\\n        }\\n        if (foundAnyHighlights) {\\n            request.highlighter(highlightBuilder);\\n        }\\n    }\\n\\n    protected HighlightBuilder.Field parseHighlightField(Object[] params)\\n    {\\n        if (params == null || params.length == 0 || params.length > 2) {\\n            //todo: exception.\\n        }\\n        HighlightBuilder.Field field = new HighlightBuilder.Field(params[0].toString());\\n        if (params.length == 1) {\\n            return field;\\n        }\\n        Map<String, Object> highlightParams = (Map<String, Object>) params[1];\\n\\n        for (Map.Entry<String, Object> param : highlightParams.entrySet()) {\\n            switch (param.getKey()) {\\n                case \\\"type\\\":\\n                    field.highlighterType((String) param.getValue());\\n                    break;\\n                case \\\"boundary_chars\\\":\\n                    field.boundaryChars(fromArrayListToCharArray((ArrayList) param.getValue()));\\n                    break;\\n                case \\\"boundary_max_scan\\\":\\n                    field.boundaryMaxScan((Integer) param.getValue());\\n                    break;\\n                case \\\"force_source\\\":\\n                    field.forceSource((Boolean) param.getValue());\\n                    break;\\n                case \\\"fragmenter\\\":\\n                    field.fragmenter((String) param.getValue());\\n                    break;\\n                case \\\"fragment_offset\\\":\\n                    field.fragmentOffset((Integer) param.getValue());\\n                    break;\\n                case \\\"fragment_size\\\":\\n                    field.fragmentSize((Integer) param.getValue());\\n                    break;\\n                case \\\"highlight_filter\\\":\\n                    field.highlightFilter((Boolean) param.getValue());\\n                    break;\\n                case \\\"matched_fields\\\":\\n                    field.matchedFields((String[]) ((ArrayList) param.getValue()).toArray(new String[((ArrayList) param.getValue()).size()]));\\n                    break;\\n                case \\\"no_match_size\\\":\\n                    field.noMatchSize((Integer) param.getValue());\\n                    break;\\n                case \\\"num_of_fragments\\\":\\n                    field.numOfFragments((Integer) param.getValue());\\n                    break;\\n                case \\\"order\\\":\\n                    field.order((String) param.getValue());\\n                    break;\\n                case \\\"phrase_limit\\\":\\n                    field.phraseLimit((Integer) param.getValue());\\n                    break;\\n                case \\\"post_tags\\\":\\n                    field.postTags((String[]) ((ArrayList) param.getValue()).toArray(new String[((ArrayList) param.getValue()).size()]));\\n                    break;\\n                case \\\"pre_tags\\\":\\n                    field.preTags((String[]) ((ArrayList) param.getValue()).toArray(new String[((ArrayList) param.getValue()).size()]));\\n                    break;\\n                case \\\"require_field_match\\\":\\n                    field.requireFieldMatch((Boolean) param.getValue());\\n                    break;\\n\\n            }\\n        }\\n        return field;\\n    }\\n\\n    private char[] fromArrayListToCharArray(ArrayList arrayList) {\\n        char[] chars = new char[arrayList.size()];\\n        int i = 0;\\n        for (Object item : arrayList) {\\n            chars[i] = item.toString().charAt(0);\\n            i++;\\n        }\\n        return chars;\\n    }\\n\\n\\n    /**\\n     * Prepare the request, and return ES request.\\n     * zhongshu-comment 将sql字符串解析后的java对象，转换为es的查询请求对象\\n     *\\n     * @return ActionRequestBuilder (ES request)\\n     * @throws SqlParseException\\n     */\\n    public abstract SqlElasticRequestBuilder explain() throws SqlParseException;\\n}\"}, {\"identifier\":\"TEST_INDEX_ACCOUNT\", \"path\":\"src/test/java/org/nlpcn/es4sql/TestsConstants.java\", \"snippet\":\"public final static String TEST_INDEX_ACCOUNT = TEST_INDEX + \\\"_account\\\";\"}, {\"identifier\":\"TEST_INDEX_PEOPLE\", \"path\":\"src/test/java/org/nlpcn/es4sql/TestsConstants.java\", \"snippet\":\"public final static String TEST_INDEX_PEOPLE = TEST_INDEX + \\\"_people\\\";\"}]", "import_statement": "import com.alibaba.druid.sql.ast.SQLExpr;\nimport com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.plugin.nlpcn.QueryActionElasticExecutor;\nimport org.elasticsearch.plugin.nlpcn.executors.CSVResult;\nimport org.elasticsearch.plugin.nlpcn.executors.CSVResultsExtractor;\nimport org.elasticsearch.transport.client.PreBuiltTransportClient;\nimport org.junit.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.nlpcn.es4sql.domain.Condition;\nimport org.nlpcn.es4sql.domain.Select;\nimport org.nlpcn.es4sql.domain.Where;\nimport org.nlpcn.es4sql.parse.ElasticSqlExprParser;\nimport org.nlpcn.es4sql.parse.ScriptFilter;\nimport org.nlpcn.es4sql.parse.SqlParser;\nimport org.nlpcn.es4sql.query.QueryAction;\nimport java.net.UnknownHostException;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport static org.nlpcn.es4sql.TestsConstants.TEST_INDEX_ACCOUNT;\nimport static org.nlpcn.es4sql.TestsConstants.TEST_INDEX_PEOPLE;", "code": "package org.nlpcn.es4sql;\n\n\n\n\n\n/**\n * Created by allwefantasy on 8/25/16.\n */\npublic class SQLFunctionsTest {\n\n    private static SqlParser parser;\n\n    @BeforeClass\n    public static void init() {\n        parser = new SqlParser();\n    }\n\n    @Test\n    public void functionFieldAliasAndGroupByAlias() throws Exception {\n        String query = \"SELECT \" +\n                \"floor(substring(address,0,3)*20) as key,\" +\n                \"sum(age) cvalue FROM \" + TEST_INDEX_ACCOUNT + \"/account where address is not null \" +\n                \"group by key order by cvalue desc limit 10  \";\n        SearchDao searchDao = MainTestSuite.getSearchDao() != null ? MainTestSuite.getSearchDao() : getSearchDao();\n        System.out.println(searchDao.explain(query).explain().explain());\n\n        CSVResult csvResult = getCsvResult(false, query);\n        List<String> headers = csvResult.getHeaders();\n        List<String> content = csvResult.getLines();\n        Assert.assertEquals(2, headers.size());\n        Assert.assertTrue(headers.contains(\"key\"));\n        Assert.assertTrue(headers.contains(\"cvalue\"));\n    }\n\n    @Test\n    public void functionAlias() throws Exception {\n        //here is a bug,if only script fields are included,then all fields will return; fix later\n        String query = \"SELECT \" +\n                \"substring(address,0,3) as key,address from \" +\n                TEST_INDEX_ACCOUNT + \"/account where address is not null \" +\n                \"order by address desc limit 10  \";\n\n        CSVResult csvResult = getCsvResult(false, query);\n        List<String> headers = csvResult.getHeaders();\n        List<String> content = csvResult.getLines();\n        Assert.assertTrue(headers.contains(\"key\"));\n        Assert.assertTrue(content.contains(\"863,863 Wythe Place\"));\n    }\n\n    @Test\n    public void normalFieldAlias() throws Exception {\n\n        //here is a bug,csv field with spa\n        String query = \"SELECT \" +\n                \"address as key,age from \" +\n                TEST_INDEX_ACCOUNT + \"/account where address is not null \" +\n                \"limit 10  \";\n\n        CSVResult csvResult = getCsvResult(false, query);\n        List<String> headers = csvResult.getHeaders();\n        Assert.assertTrue(headers.contains(\"key\"));\n    }\n\n\n    @Test\n    public void groupByFieldAlias() throws Exception {\n\n        //here is a bug,csv field with spa\n        String query = \"SELECT \" +\n                \"age as key,sum(age) from \" +\n                TEST_INDEX_ACCOUNT + \"/account where address is not null \" +\n                \" group by key limit 10  \";\n\n        CSVResult csvResult = getCsvResult(false, query);\n        List<String> headers = csvResult.getHeaders();\n        List<String> contents = csvResult.getLines();\n        Assert.assertTrue(headers.contains(\"key\"));\n        String[] splits = contents.get(0).split(\",\");\n        Assert.assertTrue(Integer.parseInt(splits[0]) <= Double.parseDouble(splits[1]));\n    }\n\n    @Test\n    public void concat_ws_field_and_string() throws Exception {\n\n        //here is a bug,csv field with spa\n        String query = \"SELECT \" +\n                \" concat_ws('-',age,'-'),address from \" +\n                TEST_INDEX_ACCOUNT + \"/account \" +\n                \" limit 10  \";\n\n        CSVResult csvResult = getCsvResult(false, query);\n        List<String> headers = csvResult.getHeaders();\n        List<String> contents = csvResult.getLines();\n        String[] splits = contents.get(0).split(\",\");\n        Assert.assertTrue(splits[0].endsWith(\"--\") || splits[1].endsWith(\"--\"));\n    }\n\n    @Test\n    public void test() throws Exception {\n\n        String query = \"select sum(case \\n\" +\n                \"             when traffic=0 then 100 \\n\" +\n                \"             when traffic=1 then 1000 \\n\" +\n                \"             else 10000 \\n\" +\n                \"       end) as tf,date_format(5minute,'yyyyMMddHHmm') as nt  from traffic_statistics_v4_m200106 where business_line='2'   group by nt order by tf asc limit 10\";\n\n        SearchDao searchDao = MainTestSuite.getSearchDao() != null ? MainTestSuite.getSearchDao() : getSearchDao();\n        System.out.println(searchDao.explain(query).explain().explain());\n    }\n\n// todo: change when split is back on language\n//    @Test\n//    public void whereConditionLeftFunctionRightVariableEqualTest() throws Exception {\n//\n//        String query = \"SELECT \" +\n//                \" * from \" +\n//                TestsConstants.TEST_INDEX + \"/account \" +\n//                \" where split(address,' ')[0]='806' limit 1000  \";\n//\n//        CSVResult csvResult = getCsvResult(false, query);\n//        List<String> contents = csvResult.getLines();\n//        Assert.assertTrue(contents.size() == 4);\n//    }\n//\n//    @Test\n//    public void whereConditionLeftFunctionRightVariableGreatTest() throws Exception {\n//\n//        String query = \"SELECT \" +\n//                \" * from \" +\n//                TestsConstants.TEST_INDEX + \"/account \" +\n//                \" where floor(split(address,' ')[0]+0) > 805 limit 1000  \";\n//\n//        SearchDao searchDao = MainTestSuite.getSearchDao() != null ? MainTestSuite.getSearchDao() : getSearchDao();\n//        System.out.println(searchDao.explain(query).explain().explain());\n//\n//        CSVResult csvResult = getCsvResult(false, query);\n//        List<String> contents = csvResult.getLines();\n//        Assert.assertTrue(contents.size() == 223);\n//    }\n\n    @Test\n    public void whereConditionLeftFunctionRightPropertyGreatTest() throws Exception {\n\n        String query = \"SELECT \" +\n                \" * from \" +\n                TEST_INDEX_ACCOUNT + \"/account \" +\n                \" where floor(split(address,' ')[0]+0) > b limit 1000  \";\n\n        Select select = parser.parseSelect((SQLQueryExpr) queryToExpr(query));\n        Where where = select.getWhere();\n        Assert.assertTrue((where.getWheres().size() == 1));\n        Assert.assertTrue(((Condition) (where.getWheres().get(0))).getValue() instanceof ScriptFilter);\n        ScriptFilter scriptFilter = (ScriptFilter) (((Condition) (where.getWheres().get(0))).getValue());\n\n        Assert.assertTrue(scriptFilter.getScript().contains(\"doc['address'].value.split(' ')[0]\"));\n        Pattern pattern = Pattern.compile(\"\\\\(\\\\(Comparable\\\\)floor_\\\\d+\\\\).compareTo\\\\(doc\\\\['b'\\\\].value\\\\) > 0\");\n        Matcher matcher = pattern.matcher(scriptFilter.getScript());\n        Assert.assertTrue(matcher.find());\n\n    }\n\n    private SQLExpr queryToExpr(String query) {", "next_line": "        return new ElasticSqlExprParser(query).expr();", "gold_snippet_index": 6, "id": 10, "__internal_uuid__": "30506893-c560-484f-a6dc-566ad99e41ad"}
{"repo_name": "sztyler/sensordatacollector", "file_path": "wear/src/main/java/de/unima/ar/collector/sensors/SensorDataUtil.java", "context": "[{\"identifier\":\"AccelerometerCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/AccelerometerCollector.java\", \"snippet\":\"public class AccelerometerCollector extends Collector\\n{\\n    private static final int      type       = 1;\\n    private static final String[] valueNames = new String[]{ \\\"attr_x\\\", \\\"attr_y\\\", \\\"attr_z\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n    private float[] gravity      = new float[]{ 0, 0, 0 };\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n    private long startTimer = -1;\\n    private long counter    = -1;\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        if(!(1 + (int) ((time - startTimer) / (this.sensorRate / 1000)) > counter)) {\\n            return;\\n        }\\n        counter++;\\n\\n        float x = values[0];\\n        float y = values[1];\\n        float z = values[2];\\n\\n        if(Settings.ACCLOWPASS) { // low pass filter\\n            final float alpha = (float) 0.8;\\n            gravity[0] = alpha * gravity[0] + (1 - alpha) * values[0];\\n            gravity[1] = alpha * gravity[1] + (1 - alpha) * values[1];\\n            gravity[2] = alpha * gravity[2] + (1 - alpha) * values[2];\\n\\n            x = values[0] - gravity[0];\\n            y = values[1] - gravity[1];\\n            z = values[2] - gravity[2];\\n        }\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + x + \\\";\\\" + valueNames[1] + \\\";\\\" + y + \\\";\\\" + valueNames[2] + \\\";\\\" + z + \\\";\\\" + valueNames[3] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], x);\\n            newValues.put(valueNames[1], y);\\n            newValues.put(valueNames[2], z);\\n            newValues.put(valueNames[3], time);\\n\\n            AccelerometerCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n\\n        if(this.isRegistered) {\\n            this.startTimer = System.currentTimeMillis();\\n            this.counter = 0;\\n        } else {\\n            this.startTimer = -1;\\n            this.counter = -1;\\n        }\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.ACCELEROMETER + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[3] + \\\" INT, \\\" + valueNames[0] + \\\" REAL, \\\" + valueNames[1] + \\\" REAL, \\\" + valueNames[2] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.ACCELEROMETER;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            Log.d(\\\"TIMOSENSOR\\\", \\\"INSERT ACC INTO DB\\\");\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        if(cache.keySet().size() != 0) {\\n            Log.d(\\\"TIMOSENSOR\\\", \\\"FLUSH ACC INTO DB - \\\" + cache.values().iterator().next().size());\\n        } else {\\n            Log.d(\\\"TIMOSENSOR\\\", \\\"FLUSH ACC INTO DB - CACHE EMPTY\\\");\\n        }\\n        DBUtils.flushCache(SQLTableName.ACCELEROMETER, cache);\\n    }\\n}\"}, {\"identifier\":\"GravityCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/GravityCollector.java\", \"snippet\":\"public class GravityCollector extends Collector\\n{\\n    private static final int      type       = 9;\\n    private static final String[] valueNames = new String[]{ \\\"attr_x\\\", \\\"attr_y\\\", \\\"attr_z\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + values[1] + \\\";\\\" + valueNames[2] + \\\";\\\" + values[2] + \\\";\\\" + valueNames[3] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], values[1]);\\n            newValues.put(valueNames[2], values[2]);\\n            newValues.put(valueNames[3], time);\\n\\n            GravityCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.GRAVITY + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[3] + \\\" INT, \\\" + valueNames[0] + \\\" REAL, \\\" + valueNames[1] + \\\" REAL, \\\" + valueNames[2] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.GRAVITY;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        DBUtils.flushCache(SQLTableName.GRAVITY, cache);\\n    }\\n}\"}, {\"identifier\":\"GyroscopeCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/GyroscopeCollector.java\", \"snippet\":\"public class GyroscopeCollector extends Collector\\n{\\n    private static final int      type       = 4;\\n    private static final String[] valueNames = new String[]{ \\\"attr_x\\\", \\\"attr_y\\\", \\\"attr_z\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + values[1] + \\\";\\\" + valueNames[2] + \\\";\\\" + values[2] + \\\";\\\" + valueNames[3] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], values[1]);\\n            newValues.put(valueNames[2], values[2]);\\n            newValues.put(valueNames[3], time);\\n\\n            GyroscopeCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.GYROSCOPE + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[3] + \\\" INT, \\\" + valueNames[0] + \\\" REAL, \\\" + valueNames[1] + \\\" REAL, \\\" + valueNames[2] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.GYROSCOPE;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            Log.d(\\\"TIMOSENSOR\\\", \\\"INSERT GYRO INTO DB\\\");\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        if(cache.keySet().size() != 0) {\\n            Log.d(\\\"TIMOSENSOR\\\", \\\"FLUSH GYRO INTO DB\\\" + cache.values().iterator().next().size());\\n        } else {\\n            Log.d(\\\"TIMOSENSOR\\\", \\\"FLUSH GYRO INTO DB - CACHE EMPTY\\\");\\n        }\\n        DBUtils.flushCache(SQLTableName.GYROSCOPE, cache);\\n    }\\n}\"}, {\"identifier\":\"LinearAccelerationCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/LinearAccelerationCollector.java\", \"snippet\":\"public class LinearAccelerationCollector extends Collector\\n{\\n    private static final int      type       = 10;\\n    private static final String[] valueNames = new String[]{ \\\"attr_x\\\", \\\"attr_y\\\", \\\"attr_z\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + values[1] + \\\";\\\" + valueNames[2] + \\\";\\\" + values[2] + \\\";\\\" + valueNames[3] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], values[1]);\\n            newValues.put(valueNames[2], values[2]);\\n            newValues.put(valueNames[3], time);\\n\\n            LinearAccelerationCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.LINEAR + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[3] + \\\" INT, \\\" + valueNames[0] + \\\" REAL, \\\" + valueNames[1] + \\\" REAL, \\\" + valueNames[2] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.LINEAR;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        DBUtils.flushCache(SQLTableName.LINEAR, cache);\\n    }\\n}\"}, {\"identifier\":\"MagnetometerCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/MagnetometerCollector.java\", \"snippet\":\"public class MagnetometerCollector extends Collector\\n{\\n    private static final int      type       = 2;\\n    private static final String[] valueNames = new String[]{ \\\"attr_x\\\", \\\"attr_y\\\", \\\"attr_z\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + values[1] + \\\";\\\" + valueNames[2] + \\\";\\\" + values[2] + \\\";\\\" + valueNames[3] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], values[1]);\\n            newValues.put(valueNames[2], values[2]);\\n            newValues.put(valueNames[3], time);\\n\\n            MagnetometerCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.MAGNETIC + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[3] + \\\" INT, \\\" + valueNames[0] + \\\" REAL, \\\" + valueNames[1] + \\\" REAL, \\\" + valueNames[2] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.MAGNETIC;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        DBUtils.flushCache(SQLTableName.MAGNETIC, cache);\\n    }\\n}\"}, {\"identifier\":\"OrientationCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/OrientationCollector.java\", \"snippet\":\"public class OrientationCollector extends Collector\\n{\\n    private static final int      type       = 3;\\n    private static final String[] valueNames = new String[]{ \\\"attr_azimuth\\\", \\\"attr_pitch\\\", \\\"attr_roll\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + values[1] + \\\";\\\" + valueNames[2] + \\\";\\\" + values[2] + \\\";\\\" + valueNames[3] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], values[1]);\\n            newValues.put(valueNames[2], values[2]);\\n            newValues.put(valueNames[3], time);\\n\\n            OrientationCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.ORIENTATION + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[3] + \\\" INT, \\\" + valueNames[0] + \\\" REAL, \\\" + valueNames[1] + \\\" REAL, \\\" + valueNames[2] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.ORIENTATION;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        DBUtils.flushCache(SQLTableName.ORIENTATION, cache);\\n    }\\n}\"}, {\"identifier\":\"PressureCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/PressureCollector.java\", \"snippet\":\"public class PressureCollector extends Collector\\n{\\n    private static final int      type       = 6;\\n    private static final String[] valueNames = new String[]{ \\\"attr_millibar\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], time);\\n\\n            PressureCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.PRESSURE + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[1] + \\\" INT, \\\" + valueNames[0] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.PRESSURE;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        DBUtils.flushCache(SQLTableName.PRESSURE, cache);\\n    }\\n}\"}, {\"identifier\":\"RotationVectorCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/RotationVectorCollector.java\", \"snippet\":\"public class RotationVectorCollector extends Collector\\n{\\n    private static final int      type       = 11;\\n    private static final String[] valueNames = new String[]{ \\\"attr_x\\\", \\\"attr_y\\\", \\\"attr_z\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + values[1] + \\\";\\\" + valueNames[2] + \\\";\\\" + values[2] + \\\";\\\" + valueNames[3] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], values[1]);\\n            newValues.put(valueNames[2], values[2]);\\n            newValues.put(valueNames[3], time);\\n\\n            RotationVectorCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.ROTATION + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[3] + \\\" INT, \\\" + valueNames[0] + \\\" REAL, \\\" + valueNames[1] + \\\" REAL, \\\" + valueNames[2] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.ROTATION;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        DBUtils.flushCache(SQLTableName.ROTATION, cache);\\n    }\\n}\"}, {\"identifier\":\"StepCounterCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/StepCounterCollector.java\", \"snippet\":\"public class StepCounterCollector extends Collector\\n{\\n    private static final int      type       = 19;\\n    private static final String[] valueNames = new String[]{ \\\"attr_step\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], time);\\n\\n            StepCounterCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.STEPCOUNTER + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[1] + \\\" INT, \\\" + valueNames[0] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.STEPCOUNTER;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        DBUtils.flushCache(SQLTableName.STEPCOUNTER, cache);\\n    }\\n}\"}, {\"identifier\":\"StepDetectorCollector\", \"path\":\"wear/src/main/java/de/unima/ar/collector/sensors/collectors/StepDetectorCollector.java\", \"snippet\":\"public class StepDetectorCollector extends Collector\\n{\\n    private static final int      type       = 18;\\n    private static final String[] valueNames = new String[]{ \\\"attr_step\\\", \\\"attr_time\\\" };\\n\\n    private boolean isRegistered = false;\\n    private int     sensorRate   = 0;\\n\\n    private static Map<String, List<String[]>> cache = new HashMap<>();\\n\\n\\n    @Override\\n    public void onSensorChanged(SensorEvent event)\\n    {\\n        float[] values = event.values.clone();\\n        long time = System.currentTimeMillis();\\n\\n        String deviceID = DeviceID.get(SensorService.getInstance());\\n\\n        if(Settings.WEARTRANSFERDIRECT) {\\n            String record = valueNames[0] + \\\";\\\" + values[0] + \\\";\\\" + valueNames[1] + \\\";\\\" + time;\\n            BroadcastService.getInstance().sendMessage(\\\"/sensor/data/\\\" + deviceID + \\\"/\\\" + type, record);\\n        } else {\\n            ContentValues newValues = new ContentValues();\\n            newValues.put(valueNames[0], values[0]);\\n            newValues.put(valueNames[1], time);\\n\\n            StepDetectorCollector.writeDBStorage(deviceID, newValues);\\n        }\\n    }\\n\\n\\n    @Override\\n    public void onAccuracyChanged(Sensor sensor, int accuracy)\\n    {\\n        // TODO\\n    }\\n\\n\\n    @Override\\n    public int getType()\\n    {\\n        return type;\\n    }\\n\\n\\n    @Override\\n    public void setSensorRate(int rate)\\n    {\\n        this.sensorRate = rate;\\n    }\\n\\n\\n    @Override\\n    public int getSensorRate()\\n    {\\n        return sensorRate;\\n    }\\n\\n\\n    @Override\\n    public void setRegisteredState(boolean b)\\n    {\\n        this.isRegistered = b;\\n    }\\n\\n\\n    @Override\\n    public boolean isRegistered()\\n    {\\n        return this.isRegistered;\\n    }\\n\\n\\n    public static void createDBStorage(String deviceID)\\n    {\\n        String sqlTable = \\\"CREATE TABLE IF NOT EXISTS \\\" + SQLTableName.PREFIX + deviceID + SQLTableName.STEP + \\\" (id INTEGER PRIMARY KEY, \\\" + valueNames[1] + \\\" INT, \\\" + valueNames[0] + \\\" REAL)\\\";\\n        SQLDBController.getInstance().execSQL(sqlTable);\\n    }\\n\\n\\n    public static void writeDBStorage(String deviceID, ContentValues newValues)\\n    {\\n        String tableName = SQLTableName.PREFIX + deviceID + SQLTableName.STEP;\\n\\n        if(Settings.DATABASE_DIRECT_INSERT) {\\n            SQLDBController.getInstance().insert(tableName, null, newValues);\\n            return;\\n        }\\n\\n        List<String[]> clone = DBUtils.manageCache(deviceID, cache, newValues, (Settings.DATABASE_CACHE_SIZE + type * 200));\\n        if(clone != null) {\\n            SQLDBController.getInstance().bulkInsert(tableName, clone);\\n        }\\n    }\\n\\n\\n    public static void flushDBCache()\\n    {\\n        DBUtils.flushCache(SQLTableName.STEP, cache);\\n    }\\n}\"}]", "import_statement": "import android.util.Log;\nimport de.unima.ar.collector.sensors.collectors.AccelerometerCollector;\nimport de.unima.ar.collector.sensors.collectors.GravityCollector;\nimport de.unima.ar.collector.sensors.collectors.GyroscopeCollector;\nimport de.unima.ar.collector.sensors.collectors.LinearAccelerationCollector;\nimport de.unima.ar.collector.sensors.collectors.MagnetometerCollector;\nimport de.unima.ar.collector.sensors.collectors.OrientationCollector;\nimport de.unima.ar.collector.sensors.collectors.PressureCollector;\nimport de.unima.ar.collector.sensors.collectors.RotationVectorCollector;\nimport de.unima.ar.collector.sensors.collectors.StepCounterCollector;\nimport de.unima.ar.collector.sensors.collectors.StepDetectorCollector;", "code": "package de.unima.ar.collector.sensors;\n\n\n\npublic class SensorDataUtil\n{\n    public static void flushSensorDataCache(final int type)\n    {\n        new Thread(new Runnable()\n        {\n            @Override\n            public void run()\n            {\n                if(type == 1 || type == 0) {", "next_line": "                    AccelerometerCollector.flushDBCache();", "gold_snippet_index": 0, "id": 11, "__internal_uuid__": "4219972b-41a6-4012-b8f2-b4dcfe880643"}
{"repo_name": "tropo/tropo-webapi-java", "file_path": "src/main/java/com/voxeo/tropo/Tropo.java", "context": "[{\"identifier\":\"BARGEIN\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key BARGEIN(Boolean value) {\\n\\n\\treturn createKey(\\\"bargein\\\", value);\\n}\"}, {\"identifier\":\"BEEP\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key BEEP(Boolean value) {\\n\\n\\treturn createKey(\\\"beep\\\", value);\\n}\"}, {\"identifier\":\"CHANNEL\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key CHANNEL(Channel value) {\\n\\n\\treturn createKey(\\\"channel\\\", value);\\n}\"}, {\"identifier\":\"EVENT\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key EVENT(String value) {\\n\\n\\treturn createKey(\\\"event\\\", value);\\n}\"}, {\"identifier\":\"EXIT_TONE\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"@Deprecated\\npublic static Key EXIT_TONE(String value) {\\n\\n\\treturn createKey(\\\"exit_tone\\\", value);\\n}\"}, {\"identifier\":\"FORMAT\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key FORMAT(Format value) {\\n\\n\\treturn createKey(\\\"format\\\", value);\\n}\"}, {\"identifier\":\"FROM\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key FROM(String value) {\\n\\n\\treturn createKey(\\\"from\\\", value);\\n}\"}, {\"identifier\":\"MILLISECONDS\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key MILLISECONDS(Long milliseconds) {\\n\\n    return createKey(\\\"milliseconds\\\", milliseconds);\\n}\"}, {\"identifier\":\"NAME\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key NAME(String value) {\\n\\n\\treturn createKey(\\\"name\\\", value);\\n}\"}, {\"identifier\":\"NETWORK\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key NETWORK(Network value) {\\n\\n\\treturn createKey(\\\"network\\\", value);\\n}\"}, {\"identifier\":\"NEXT\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key NEXT(String value) {\\n\\n\\treturn createKey(\\\"next\\\", value);\\n}\"}, {\"identifier\":\"PASSWORD\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key PASSWORD(String value) {\\n\\n\\treturn createKey(\\\"password\\\", value);\\n}\"}, {\"identifier\":\"REQUIRED\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key REQUIRED(Boolean value) {\\n\\n\\treturn createKey(\\\"required\\\", value);\\n}\"}, {\"identifier\":\"SEND_TONES\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"@Deprecated\\npublic static Key SEND_TONES(Boolean value) {\\n\\n\\treturn createKey(\\\"send_tones\\\", value);\\n}\"}, {\"identifier\":\"SENSITIVITY\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key SENSITIVITY(Float value) {\\n\\n\\treturn createKey(\\\"sensitivity\\\", value);\\n}\"}, {\"identifier\":\"TIMEOUT\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key TIMEOUT(Float value) {\\n\\n\\treturn createKey(\\\"timeout\\\", value);\\n}\"}, {\"identifier\":\"TO\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key TO(String value) {\\n\\n\\treturn createKey(\\\"to\\\", value);\\n}\"}, {\"identifier\":\"URL\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key URL(String value) {\\n\\n\\treturn createKey(\\\"url\\\", value);\\n}\"}, {\"identifier\":\"USERNAME\", \"path\":\"src/main/java/com/voxeo/tropo/Key.java\", \"snippet\":\"public static Key USERNAME(String value) {\\n\\n\\treturn createKey(\\\"username\\\", value);\\n}\"}, {\"identifier\":\"AnswerAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/AnswerAction.java\", \"snippet\":\"@ValidKeys(keys = {\\\"headers\\\"})\\npublic class AnswerAction extends JsonAction {\\n\\n  private HeadersSupportHandler headersSupportHandler = new HeadersSupportHandler();\\n\\n  public AnswerAction() {\\n\\n    super();\\n    setName(\\\"answer\\\");\\n  }\\n\\n  public AnswerAction(Key... keys) {\\n\\n    super(keys);\\n    setName(\\\"answer\\\");\\n  }\\n\\n  public HeadersAction headers(String[]... keys) {\\n\\n    return headersSupportHandler.headers(this, keys);\\n  }\\n}\"}, {\"identifier\":\"ArrayBackedJsonAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/ArrayBackedJsonAction.java\", \"snippet\":\"public abstract class ArrayBackedJsonAction extends JsonAction {\\n    \\n    public ArrayBackedJsonAction(String name) {\\n    \\n        super();\\n        setName(name);\\n        put(getName(), new JsonArray());\\n    }\\n    \\n    @Override\\n    public void reset() {\\n    \\n        super.reset();\\n        put(getName(), new JsonArray());\\n    }\\n    \\n    @Override\\n    protected void accumulate(String key, Action value) {\\n    \\n        addToArray(getName(), key, value);\\n    }\\n    \\n    protected boolean isEmpty() {\\n    \\n        JsonArray array = getJSONArray(getName());\\n        return array.size() == 0;\\n    }\\n}\"}, {\"identifier\":\"AskAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/AskAction.java\", \"snippet\":\"@ValidKeys(keys = { \\\"name\\\", \\\"required\\\", \\\"choices\\\", \\\"allowSignals\\\", \\\"attempts\\\", \\\"bargein\\\", \\\"minConfidence\\\", \\\"recognizer\\\", \\\"timeout\\\", \\\"sensitivity\\\", \\\"voice\\\",\\n    \\\"interdigitTimeout\\\", \\\"say\\\", \\\"speechCompleteTimeout\\\", \\\"speechIncompleteTimeout\\\", \\\"promptLogSecurity\\\", \\\"asrLogSecurity\\\", \\\"maskTemplate\\\" })\\n@RequiredKeys(keys = { \\\"choices\\\", \\\"say\\\" })\\npublic class AskAction extends JsonAction {\\n\\n  private ActionSupportHandler<SayAction>      sayActionSupportHandler     = new ActionSupportHandler<SayAction>(SayAction.class);\\n  private ActionSupportHandler<ChoicesAction>  choicesActionSupportHandler = new ActionSupportHandler<ChoicesAction>(ChoicesAction.class);\\n  private ActionSupportHandler<NestedOnAction> onActionSupportHandler      = new ActionSupportHandler<NestedOnAction>(NestedOnAction.class);\\n\\n  public AskAction() {\\n\\n    super();\\n    setName(\\\"ask\\\");\\n  }\\n\\n  public AskAction(Key... keys) {\\n\\n    super(keys);\\n    setName(\\\"ask\\\");\\n  }\\n\\n  public SayAction say(String text) {\\n\\n    return say(VALUE(text));\\n  }\\n\\n  public SayAction say(Key... keys) {\\n\\n    return sayActionSupportHandler.build(this, keys);\\n  }\\n\\n  public NestedOnAction on(Key... keys) {\\n\\n    return onActionSupportHandler.build(this, keys);\\n  }\\n\\n  public NestedOnAction on(String event, String next) {\\n\\n    return on(EVENT(event), NEXT(next));\\n  }\\n\\n  public ChoicesAction choices(Key... keys) {\\n\\n    return choicesActionSupportHandler.build(this, keys);\\n  }\\n\\n  public AskAction choices(String choice) {\\n\\n    choices(VALUE(choice));\\n    return this;\\n  }\\n\\n  public static class Choices {\\n\\n    public Choices(String value) {\\n      this(value, null, null);\\n    }\\n\\n    public Choices(String value, Mode mode) {\\n      this(value, mode, null);\\n    }\\n\\n    public Choices(String value, Mode mode, String terminator) {\\n      if (value == null || value.trim().equals(\\\"\\\")) {\\n        throw new TropoException(\\\"Missing required property: value of Choices\\\");\\n      } else {\\n        this.value = value;\\n      }\\n\\n      this.mode = mode;\\n\\n      if (!(terminator == null || terminator.trim().equals(\\\"\\\"))) {\\n        this.terminator = terminator;\\n      }\\n    }\\n\\n    private String value;\\n\\n    private Mode mode;\\n\\n    private String terminator;\\n\\n    public String getValue() {\\n      return value;\\n    }\\n\\n    public void setValue(String value) {\\n      this.value = value;\\n    }\\n\\n    public Mode getMode() {\\n      return mode;\\n    }\\n\\n    public void setMode(Mode mode) {\\n      this.mode = mode;\\n    }\\n\\n    public String getTerminator() {\\n      return terminator;\\n    }\\n\\n    public void setTerminator(String terminator) {\\n      this.terminator = terminator;\\n    }\\n  }\\n\\n  public static class Say {\\n\\n    public Say(String value) {\\n      this(value, null, null);\\n    }\\n\\n    private Say(String value, Voice voice) {\\n      this(value, voice, null);\\n    }\\n\\n    public Say(String value, String event) {\\n      this(value, null, event);\\n    }\\n\\n    private Say(String value, Voice voice, String event) {\\n      this(value, null, null, null, null, voice, null, event);\\n    }\\n\\n    private Say(String value, String[] allowSignals, As as, String name, Boolean required, Voice voice,\\n        String promptLogSecurity, String event) {\\n      if (value == null || value.trim().equals(\\\"\\\")) {\\n        throw new TropoException(\\\"Missing required property: value of ask.say\\\");\\n      } else {\\n        this.value = value;\\n      }\\n      this.allowSignals = allowSignals;\\n      this.as = as;\\n      this.name = name;\\n      this.required = required;\\n      this.voice = voice;\\n      if (promptLogSecurity != null && promptLogSecurity.trim().equalsIgnoreCase(\\\"suppress\\\")) {\\n        this.promptLogSecurity = \\\"suppress\\\";\\n      }\\n      if (!(event == null || event.trim().equals(\\\"\\\"))) {\\n        this.event = event;\\n      }\\n    }\\n\\n    private String value;\\n\\n    private String[] allowSignals;\\n\\n    private As as;\\n\\n    private String name;\\n\\n    private Boolean required;\\n\\n    private Voice voice;\\n\\n    private String promptLogSecurity;\\n    \\n    private String event;\\n\\n    public String getValue() {\\n      return value;\\n    }\\n\\n    public void setValue(String value) {\\n      this.value = value;\\n    }\\n\\n    public String[] getAllowSignals() {\\n      return allowSignals;\\n    }\\n\\n    public void setAllowSignals(String[] allowSignals) {\\n      this.allowSignals = allowSignals;\\n    }\\n\\n    public As getAs() {\\n      return as;\\n    }\\n\\n    public void setAs(As as) {\\n      this.as = as;\\n    }\\n\\n    public String getName() {\\n      return name;\\n    }\\n\\n    public void setName(String name) {\\n      this.name = name;\\n    }\\n\\n    public Boolean getRequired() {\\n      return required;\\n    }\\n\\n    public void setRequired(Boolean required) {\\n      this.required = required;\\n    }\\n\\n    public Voice getVoice() {\\n      return voice;\\n    }\\n\\n    public void setVoice(Voice voice) {\\n      this.voice = voice;\\n    }\\n\\n    public String getPromptLogSecurity() {\\n      return promptLogSecurity;\\n    }\\n\\n    public void setPromptLogSecurity(String promptLogSecurity) {\\n      this.promptLogSecurity = promptLogSecurity;\\n    }\\n\\n    public String getEvent() {\\n      return event;\\n    }\\n\\n    public void setEvent(String event) {\\n      this.event = event;\\n    }\\n  }\\n}\"}, {\"identifier\":\"CallAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/CallAction.java\", \"snippet\":\"@ValidKeys(keys = { \\\"to\\\", \\\"allowSignals\\\", \\\"answerOnMedia\\\", \\\"channel\\\", \\\"from\\\", \\\"headers\\\", \\\"name\\\", \\\"network\\\", \\\"required\\\", \\\"timeout\\\", \\\"machineDetection\\\", \\\"voice\\\", \\\"callbackUrl\\\", \\\"promptLogSecurity\\\", \\\"label\\\" })\\n@RequiredKeys(keys = { \\\"to\\\" })\\npublic class CallAction extends JsonAction {\\n\\n  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\\n  private HeadersSupportHandler                      headersSupportHandler              = new HeadersSupportHandler();\\n\\n  public CallAction() {\\n\\n    super();\\n    setName(\\\"call\\\");\\n  }\\n\\n  public CallAction(Key... keys) {\\n\\n    super(keys);\\n    setName(\\\"call\\\");\\n  }\\n\\n  public StartRecordingAction startRecording(Key... keys) {\\n\\n    return startRecordingActionSupportHandler.build(this, keys);\\n  }\\n\\n  public HeadersAction headers(String[]... keys) {\\n\\n    return headersSupportHandler.headers(this, keys);\\n  }\\n}\"}, {\"identifier\":\"ChoicesAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/ChoicesAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"value\\\",\\\"mode\\\",\\\"terminator\\\"})\\npublic class ChoicesAction extends JsonAction {\\n\\n\\tpublic ChoicesAction() {\\n\\t\\t\\n\\t\\tsuper();\\n\\t\\tsetName(\\\"choices\\\");\\n\\t}\\n\\t\\n\\tpublic ChoicesAction(Key... keys) {\\n\\t\\n\\t\\tsuper(keys);\\n\\t\\tsetName(\\\"choices\\\");\\n\\t}\\t\\n\\t\\n\\t@Override\\n\\tprotected void validate() throws TropoException {\\n\\t\\t\\n\\t\\tsuper.validate();\\n\\t\\tObject mode = get(\\\"mode\\\");\\n\\t\\tif (mode != null) {\\n\\t\\t\\tfor(Mode modeValue : Mode.values()) {\\n\\t\\t\\t    if(modeValue.toString().equals(mode)){\\n\\t\\t\\t        return;\\n\\t\\t\\t    }\\n\\t\\t\\t}\\n\\t\\t\\tthrow new TropoException(\\\"If mode is provided, only 'dtmf', 'speech' or 'any' is supported\\\");\\n\\t\\t}\\n\\t}\\n}\"}, {\"identifier\":\"ConferenceAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/ConferenceAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"name\\\",\\\"allowSignals\\\",\\\"mute\\\",\\\"on\\\",\\\"playTones\\\",\\\"terminator\\\",\\\"id\\\",\\\"send_tones\\\",\\\"exit_tone\\\",\\\"interdigitTimeout\\\",\\\"joinPrompt\\\",\\\"leavePrompt\\\",\\\"required\\\",\\\"promptLogSecurity\\\"})\\n@RequiredKeys(keys={\\\"id\\\"})\\npublic class ConferenceAction extends JsonAction {\\n\\n\\tprivate ActionSupportHandler<NestedOnAction> onActionSupportHandler = new ActionSupportHandler<NestedOnAction>(NestedOnAction.class);\\t\\n\\n\\tpublic ConferenceAction() {\\n\\t\\t\\n\\t\\tsuper();\\n\\t\\tsetName(\\\"conference\\\");\\n\\t}\\n\\t\\n\\tpublic ConferenceAction(Key... keys) {\\n\\t\\n\\t\\tsuper(keys);\\n\\t\\tsetName(\\\"conference\\\");\\n\\t}\\n\\t\\n\\tpublic NestedOnAction on(Key... keys) {\\n\\n\\t\\treturn onActionSupportHandler.build(this, keys);\\n\\t}\\n\\t\\n\\tpublic NestedOnAction on(String event, String next) {\\n\\n\\t\\treturn on(EVENT(event), NEXT(next));\\n\\t}\\n}\"}, {\"identifier\":\"MessageAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/MessageAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"say\\\",\\\"to\\\",\\\"answerOnMedia\\\",\\\"channel\\\",\\\"from\\\",\\\"name\\\",\\\"network\\\",\\\"required\\\",\\\"timeout\\\",\\\"voice\\\",\\\"promptLogSecurity\\\"})\\n@RequiredKeys(keys={\\\"to\\\",\\\"say\\\"})\\npublic class MessageAction extends JsonAction {\\n\\n\\tprivate ActionSupportHandler<SayAction> sayActionSupportHandler = new ActionSupportHandler<SayAction>(SayAction.class);\\t\\n\\n\\tpublic MessageAction() {\\n\\t\\t\\n\\t\\tsuper();\\n\\t\\tsetName(\\\"message\\\");\\n\\t}\\n\\t\\n\\tpublic MessageAction(Key... keys) {\\n\\t\\n\\t\\tsuper(keys);\\n\\t\\tsetName(\\\"message\\\");\\n\\t}\\n\\t\\n\\tpublic static class Say {\\n\\n    public Say(String value) {\\n\\n      if (value == null || value.trim().equals(\\\"\\\")) {\\n        throw new TropoException(\\\"Missing required property: value of message.say\\\");\\n      }\\n\\n      this.value = value;\\n    }\\n\\n    public Say(String value, String[] medias) {\\n\\n      if (value == null || value.trim().equals(\\\"\\\")) {\\n        throw new TropoException(\\\"Missing required property: value of message.say\\\");\\n      }\\n\\n      this.value = value;\\n      this.media = medias;\\n    }\\n\\n    private String value;\\n    private String[] media;\\n\\n    public String getValue() {\\n      return value;\\n    }\\n\\n    public void setValue(String value) {\\n      this.value = value;\\n    }\\n\\n    public String[] getMedia() {\\n      return media;\\n    }\\n\\n    public void setMedia(String[] media) {\\n      this.media = media;\\n    }\\n\\n\\t}\\n\\t\\n\\tpublic SayAction say(String text) {\\n\\n\\t\\treturn say(VALUE(text));\\n\\t}\\n\\t\\n\\tpublic SayAction say(Key... keys) {\\n\\n\\t\\treturn sayActionSupportHandler.build(this, keys);\\n\\t}\\n}\"}, {\"identifier\":\"OnAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/OnAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"next\\\",\\\"event\\\",\\\"say\\\",\\\"post\\\"})\\n@RequiredKeys(keys={\\\"event\\\"})\\npublic class OnAction extends JsonAction {\\n\\n\\tprivate ActionSupportHandler<SayAction> sayActionSupportHandler = new ActionSupportHandler<SayAction>(SayAction.class);\\t\\n\\n\\tpublic OnAction() {\\n\\t\\t\\n\\t\\tsuper();\\n\\t\\tsetName(\\\"on\\\");\\n\\t}\\n\\t\\n\\tpublic OnAction(Key... keys) {\\n\\t\\n\\t\\tsuper(keys);\\n\\t\\tsetName(\\\"on\\\");\\n\\t}\\t\\n\\t\\n\\tpublic SayAction say(String text) {\\n\\n\\t\\treturn say(VALUE(text));\\n\\t}\\n\\t\\n\\tpublic SayAction say(Key... keys) {\\n\\n\\t\\treturn sayActionSupportHandler.build(this, keys);\\n\\t}\\n\\n  public static class Say {\\n\\n    private String value;\\n\\n    private Voice voice;\\n\\n    public Say(String value) {\\n      this(value, null);\\n    }\\n\\n    public Say(String value, Voice voice) {\\n\\n      if (value == null || value.trim().equals(\\\"\\\")) {\\n        throw new TropoException(\\\"Missing required property: value of on.say\\\");\\n      }\\n      this.value = value;\\n      this.voice = voice;\\n    }\\n\\n    public String getValue() {\\n      return value;\\n    }\\n\\n    public void setValue(String value) {\\n      this.value = value;\\n    }\\n\\n    public Voice getVoice() {\\n      return voice;\\n    }\\n\\n    public void setVoice(Voice voice) {\\n      this.voice = voice;\\n    }\\n  }\\n}\"}, {\"identifier\":\"RecordAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/RecordAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"name\\\",\\\"attempts\\\",\\\"allowSignals\\\",\\\"bargein\\\",\\\"beep\\\",\\\"choices\\\",\\\"format\\\",\\\"maxSilence\\\",\\\"maxTime\\\",\\\"method\\\",\\n        \\\"required\\\",\\\"transcription\\\",\\\"url\\\",\\\"password\\\",\\\"username\\\",\\\"timeout\\\",\\\"voice\\\",\\\"interdigitTimeout\\\", \\\"asyncUpload\\\",\\\"say\\\",\\\"promptLogSecurity\\\",\\\"sensitivity\\\"})\\n@RequiredKeys(keys={\\\"url\\\"})\\npublic class RecordAction extends JsonAction {\\n\\t\\n\\tprivate ActionSupportHandler<SayAction> sayActionSupportHandler = new ActionSupportHandler<SayAction>(SayAction.class);\\t\\n\\tprivate ActionSupportHandler<ChoicesAction> choicesActionSupportHandler = new ActionSupportHandler<ChoicesAction>(ChoicesAction.class);\\t\\n\\tprivate ActionSupportHandler<TranscriptionAction> transcriptionActionSupportHandler = new ActionSupportHandler<TranscriptionAction>(TranscriptionAction.class);\\t\\n\\n\\tpublic RecordAction() {\\n\\t\\t\\n\\t\\tsuper();\\n\\t\\tsetName(\\\"record\\\");\\n\\t}\\n\\t\\n\\tpublic RecordAction(Key... keys) {\\n\\t\\n\\t\\tsuper(keys);\\n\\t\\tsetName(\\\"record\\\");\\n\\t}\\t\\n\\t\\n\\tpublic SayAction say(String text) {\\n\\n\\t\\treturn say(VALUE(text));\\n\\t}\\n\\t\\n\\tpublic SayAction say(Key... keys) {\\n\\n\\t\\treturn sayActionSupportHandler.build(this, keys);\\n\\t}\\t\\n\\t\\n\\tpublic ChoicesAction choices(Key... keys) {\\n\\n\\t\\treturn choicesActionSupportHandler.build(this, keys);\\n\\t}\\n\\t\\n\\tpublic ChoicesAction choices(String value) {\\n\\n\\t\\treturn choices(VALUE(value));\\n\\t}\\n\\n\\tpublic TranscriptionAction transcription(Key... keys) {\\n\\n\\t\\treturn transcriptionActionSupportHandler.build(this, keys);\\n\\t}\\t\\n\\t\\n\\tpublic TranscriptionAction transcription(String id, String url, String emailFormat, String language) {\\n\\n\\t\\treturn transcription(ID(id), URL(url), EMAIL_FORMAT(emailFormat), Key.LANGUAGE(language));\\n\\t}\\n\\t\\n  public static class Say {\\n    private String value;\\n\\n    private String event;\\n\\n    public Say(String value) {\\n      if (value == null || value.trim().equals(\\\"\\\"))\\n        throw new TropoException(\\\"Missing required property: value of record.say\\\");\\n      this.value = value;\\n    }\\n\\n    public Say(String value, String event) {\\n      if (value == null || value.trim().equals(\\\"\\\"))\\n        throw new TropoException(\\\"Missing required property: value of record.say\\\");\\n      if (!(\\\"timeout\\\".equals(event)))\\n        throw new TropoException(\\\"For record, the only possible event is 'timeout'.\\\");\\n      this.value = value;\\n      this.event = \\\"timeout\\\";\\n    }\\n\\n    public String getValue() {\\n      return value;\\n    }\\n\\n    public void setValue(String value) {\\n      this.value = value;\\n    }\\n\\n    public String getEvent() {\\n      return event;\\n    }\\n\\n    public void setEvent(String event) {\\n      this.event = event;\\n    }\\n  }\\n  \\n  public static class Transcription {\\n    private String id;\\n\\n    private String url;\\n\\n    private EmailFormat emailFormat;\\n\\n    public Transcription(String url) {\\n      super();\\n      this.url = url;\\n    }\\n\\n    public Transcription(String id, String url) {\\n      super();\\n      this.id = id;\\n      this.url = url;\\n    }\\n\\n    public Transcription(String id, String url, EmailFormat emailFormat) {\\n      super();\\n      this.id = id;\\n      this.url = url;\\n      this.emailFormat = emailFormat;\\n    }\\n\\n    public String getId() {\\n      return id;\\n    }\\n\\n    public void setId(String id) {\\n      this.id = id;\\n    }\\n\\n    public String getUrl() {\\n      return url;\\n    }\\n\\n    public void setUrl(String url) {\\n      this.url = url;\\n    }\\n\\n    public EmailFormat getEmailFormat() {\\n      return emailFormat;\\n    }\\n\\n    public void setEmailFormat(EmailFormat emailFormat) {\\n      this.emailFormat = emailFormat;\\n    }\\n  }\\n\\n  public static class Url {\\n    private String url;\\n\\n    private String username;\\n\\n    private String password;\\n\\n    private String method;\\n\\n    public Url(String url) {\\n      super();\\n      this.url = url;\\n    }\\n\\n    public Url(String url, String username, String password, String method) {\\n      super();\\n      if (url == null || url.trim().equals(\\\"\\\")) {\\n        throw new TropoException(\\\"Missing required property: url of Url\\\");\\n      }\\n      this.url = url;\\n      this.username = username;\\n      this.password = password;\\n      this.method = method;\\n    }\\n\\n    public String getUrl() {\\n      return url;\\n    }\\n\\n    public void setUrl(String url) {\\n      this.url = url;\\n    }\\n\\n    public String getUsername() {\\n      return username;\\n    }\\n\\n    public void setUsername(String username) {\\n      this.username = username;\\n    }\\n\\n    public String getPassword() {\\n      return password;\\n    }\\n\\n    public void setPassword(String password) {\\n      this.password = password;\\n    }\\n\\n    public String getMethod() {\\n      return method;\\n    }\\n\\n    public void setMethod(String method) {\\n      this.method = method;\\n    }\\n  }\\n\\t\\n\\t@Override\\n\\tprotected void validate() throws TropoException {\\n\\t\\t\\n\\t\\tsuper.validate();\\n\\t\\tcheckUrl(\\\"url\\\");\\n\\t}\\n}\"}, {\"identifier\":\"RedirectAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/RedirectAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"to\\\",\\\"name\\\",\\\"required\\\"})\\n@RequiredKeys(keys={\\\"to\\\"})\\npublic class RedirectAction extends JsonAction {\\n\\n\\tpublic RedirectAction() {\\n\\t\\t\\n\\t\\tsuper();\\n\\t\\tsetName(\\\"redirect\\\");\\n\\t}\\n\\t\\n\\tpublic RedirectAction(Key... keys) {\\n\\t\\n\\t\\tsuper(keys);\\n\\t\\tsetName(\\\"redirect\\\");\\n\\t}\\n\\t\\n\\t@Override\\n\\tprotected void validate() throws TropoException {\\n\\n\\t\\tsuper.validate();\\n\\t\\tif (getParent() != null) {\\n\\t\\t\\tif (!(getParent() instanceof Tropo)) {\\n\\t\\t\\t\\tthrow new TropoException(\\\"Redirect should only be used alone and before the session is answered, use transfer instead\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"}, {\"identifier\":\"SayAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/SayAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"name\\\",\\\"value\\\",\\\"allowSignals\\\",\\\"voice\\\",\\\"as\\\",\\\"required\\\",\\\"promptLogSecurity\\\",\\\"media\\\"})\\n@RequiredKeys(keys={\\\"value\\\"})\\npublic class SayAction extends ArrayAction {\\n\\n\\tpublic SayAction(String text) {\\n\\n\\t\\tsetName(\\\"say\\\");\\n\\t\\tJsonObject item = new JsonObject();\\n\\t\\titem.addProperty(\\\"value\\\", text);\\n\\t\\tadd(item);\\t\\t\\n\\t}\\t\\n\\t\\n\\tpublic SayAction(Key... keys) {\\n\\t\\n\\t\\tsuper(keys);\\t\\t\\n\\t\\tsetName(\\\"say\\\");\\n\\t}\\n\\t\\n\\tpublic SayAction say(String text) {\\n\\n\\t\\treturn say(VALUE(text));\\n\\t}\\n\\t\\n\\tpublic SayAction say(Key... keys) {\\n\\n\\t\\tadd(buildObjectFromKeys(keys));\\t\\t\\n\\t\\treturn this;\\n\\t}\\n}\"}, {\"identifier\":\"StartRecordingAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/StartRecordingAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"format\\\",\\\"method\\\",\\\"url\\\",\\\"username\\\",\\\"password\\\",\\\"asyncUpload\\\",\\\"transcriptionOutURI\\\",\\\"transcriptionEmailFormat\\\",\\\"transcriptionID\\\",\\\"transcriptionLanguage\\\"})\\n@RequiredKeys(keys={\\\"url\\\"})\\npublic class StartRecordingAction extends JsonAction {\\n\\n\\tpublic StartRecordingAction() {\\n\\t\\t\\n\\t\\tsuper();\\n\\t\\tsetName(\\\"startRecording\\\");\\n\\t}\\n\\t\\n\\tpublic StartRecordingAction(Key... keys) {\\n\\t\\n\\t\\tsuper(keys);\\n\\t\\tsetName(\\\"startRecording\\\");\\n\\t}\\n\\n\\t@Override\\n  protected void validate() throws TropoException {\\n    \\n    super.validate();\\n    checkUrl(\\\"url\\\");\\n  }\\n}\"}, {\"identifier\":\"TransferAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/TransferAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"to\\\",\\\"allowSignals\\\",\\\"choices\\\",\\\"from\\\",\\\"headers\\\",\\\"name\\\",\\\"on\\\",\\\"required\\\",\\\"ringRepeat\\\",\\\"timeout\\\",\\\"answerOnMedia\\\",\\\"interdigitTimeout\\\",\\\"machineDetection\\\",\\\"playTones\\\",\\\"voice\\\",\\\"callbackUrl\\\",\\\"promptLogSecurity\\\",\\\"label\\\"})\\n@RequiredKeys(keys={\\\"to\\\"})\\npublic class TransferAction extends JsonAction {\\n\\n\\tprivate ActionSupportHandler<NestedOnAction> onRecordingActionSupportHandler = new ActionSupportHandler<NestedOnAction>(NestedOnAction.class);\\n\\tprivate ActionSupportHandler<ChoicesAction> choicesRecordingActionSupportHandler = new ActionSupportHandler<ChoicesAction>(ChoicesAction.class);\\n\\tprivate HeadersSupportHandler headersSupportHandler = new HeadersSupportHandler();\\n\\n\\tpublic TransferAction() {\\n\\n\\t\\tsuper();\\n\\t\\tsetName(\\\"transfer\\\");\\n\\t}\\n\\n\\tpublic TransferAction(Key... keys) {\\n\\n\\t\\tsuper(keys);\\n\\t\\tsetName(\\\"transfer\\\");\\n\\t}\\n\\n\\tpublic NestedOnAction on(Key... keys) {\\n\\n\\t\\treturn onRecordingActionSupportHandler.build(this, keys);\\n\\t}\\n\\n\\tpublic NestedOnAction on(String event, String next) {\\n\\n\\t\\treturn on(EVENT(event), NEXT(next));\\n\\t}\\n\\n\\tpublic ChoicesAction choices(Key... keys) {\\n\\n\\t\\treturn choicesRecordingActionSupportHandler.build(this, keys);\\n\\t}\\n\\n\\tpublic AskAction choices(String choice) {\\n\\n\\t\\treturn (AskAction)and(choices(VALUE(choice)));\\n\\t}\\n\\n\\tpublic HeadersAction headers(String[]... keys) {\\n\\n\\t\\treturn headersSupportHandler.headers(this, keys);\\n\\t}\\n}\"}, {\"identifier\":\"WaitAction\", \"path\":\"src/main/java/com/voxeo/tropo/actions/WaitAction.java\", \"snippet\":\"@ValidKeys(keys={\\\"allowSignals\\\", \\\"milliseconds\\\"})\\n@RequiredKeys(keys={\\\"milliseconds\\\"})\\npublic class WaitAction extends JsonAction {\\n\\n    public WaitAction() {\\n        super();\\n        setName(\\\"wait\\\");\\n    }\\n\\n    public WaitAction(Key... keys) {\\n        super(keys);\\n        setName(\\\"wait\\\");\\n    }\\n}\"}, {\"identifier\":\"Format\", \"path\":\"src/main/java/com/voxeo/tropo/enums/Format.java\", \"snippet\":\"public enum Format {\\n\\n\\tWAV, MP3, AU;\\n\\t\\n\\t@Override public String toString() {\\n\\t\\t\\n\\t\\tString s = super.toString();\\n\\t\\treturn \\\"audio/\\\"+s.toLowerCase();\\n\\t}\\n}\"}, {\"identifier\":\"LogSecurityState\", \"path\":\"src/main/java/com/voxeo/tropo/enums/LogSecurityState.java\", \"snippet\":\"public enum LogSecurityState {\\n\\n  NONE, SUPPRESS;\\n\\n  @Override\\n  public String toString() {\\n\\n    return super.toString().toLowerCase();\\n  }\\n}\"}, {\"identifier\":\"Network\", \"path\":\"src/main/java/com/voxeo/tropo/enums/Network.java\", \"snippet\":\"public enum Network {\\n\\tSMS, AIM, MSN, JABBER, YAHOO, GTALK, TWITTER, PSTN, SIP, MMS\\n}\"}]", "import_statement": "import static com.voxeo.tropo.Key.BARGEIN;\nimport static com.voxeo.tropo.Key.BEEP;\nimport static com.voxeo.tropo.Key.CHANNEL;\nimport static com.voxeo.tropo.Key.EVENT;\nimport static com.voxeo.tropo.Key.EXIT_TONE;\nimport static com.voxeo.tropo.Key.FORMAT;\nimport static com.voxeo.tropo.Key.FROM;\nimport static com.voxeo.tropo.Key.MILLISECONDS;\nimport static com.voxeo.tropo.Key.NAME;\nimport static com.voxeo.tropo.Key.NETWORK;\nimport static com.voxeo.tropo.Key.NEXT;\nimport static com.voxeo.tropo.Key.PASSWORD;\nimport static com.voxeo.tropo.Key.REQUIRED;\nimport static com.voxeo.tropo.Key.SEND_TONES;\nimport static com.voxeo.tropo.Key.SENSITIVITY;\nimport static com.voxeo.tropo.Key.TIMEOUT;\nimport static com.voxeo.tropo.Key.TO;\nimport static com.voxeo.tropo.Key.URL;\nimport static com.voxeo.tropo.Key.USERNAME;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.Map;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.http.client.HttpClient;\nimport com.voxeo.tropo.actions.AnswerAction;\nimport com.voxeo.tropo.actions.ArrayBackedJsonAction;\nimport com.voxeo.tropo.actions.AskAction;\nimport com.voxeo.tropo.actions.CallAction;\nimport com.voxeo.tropo.actions.ChoicesAction;\nimport com.voxeo.tropo.actions.ConferenceAction;\nimport com.voxeo.tropo.actions.MessageAction;\nimport com.voxeo.tropo.actions.OnAction;\nimport com.voxeo.tropo.actions.RecordAction;\nimport com.voxeo.tropo.actions.RedirectAction;\nimport com.voxeo.tropo.actions.SayAction;\nimport com.voxeo.tropo.actions.StartRecordingAction;\nimport com.voxeo.tropo.actions.TransferAction;\nimport com.voxeo.tropo.actions.WaitAction;\nimport com.voxeo.tropo.enums.Channel;\nimport com.voxeo.tropo.enums.Format;\nimport com.voxeo.tropo.enums.LogSecurityState;\nimport com.voxeo.tropo.enums.Network;\nimport support.ActionSupportHandler;", "code": "package com.voxeo.tropo;\n\n\n\n\n\n\n\npublic class Tropo extends ArrayBackedJsonAction {\n\n  private TropoParser                                parser;\n  private String                                     baseUrl                            = \"https://api.tropo.com/v1/\";\n\n  private ActionSupportHandler<SayAction>            sayActionSupportHandler            = new ActionSupportHandler<SayAction>(SayAction.class);\n  private ActionSupportHandler<AskAction>            askActionSupportHandler            = new ActionSupportHandler<AskAction>(AskAction.class);\n  private ActionSupportHandler<ConferenceAction>     conferenceActionSupportHandler     = new ActionSupportHandler<ConferenceAction>(ConferenceAction.class);\n  private ActionSupportHandler<ChoicesAction>        choicesActionSupportHandler        = new ActionSupportHandler<ChoicesAction>(ChoicesAction.class);", "next_line": "  private ActionSupportHandler<OnAction>             onActionSupportHandler             = new ActionSupportHandler<OnAction>(OnAction.class);", "gold_snippet_index": 26, "id": 12, "__internal_uuid__": "16e1bb92-e155-443a-82b9-24c08cb015fc"}
{"repo_name": "erickok/ratebeer", "file_path": "app/src/main/java/com/ratebeer/android/api/Api.java", "context": "[{\"identifier\":\"Session\", \"path\":\"app/src/main/java/com/ratebeer/android/Session.java\", \"snippet\":\"public class Session {\\n\\n\\tprivate Context databaseContext;\\n\\tprivate SharedPreferences prefs;\\n\\tprivate StoredSession stored;\\n\\n\\tpublic Observable<StoredSession> getUpdates(Context context, boolean emitInitial) {\\n\\t\\tObservable<StoredSession> updates = rxdb(context).changes(StoredSession.class).map(DatabaseChange::entity);\\n\\t\\tif (emitInitial)\\n\\t\\t\\tupdates = updates.startWith(Observable.just(stored));\\n\\t\\treturn updates;\\n\\t}\\n\\n\\tprivate static class Holder {\\n\\t\\tstatic final Session INSTANCE = new Session();\\n\\t}\\n\\n\\tpublic static Session get() {\\n\\t\\treturn Holder.INSTANCE;\\n\\t}\\n\\n\\tprivate Session() {\\n\\t}\\n\\n\\tpublic void init(Context context) {\\n\\t\\tsynchronized (this) {\\n\\t\\t\\tdatabaseContext = context.getApplicationContext();\\n\\t\\t\\tprefs = PreferenceManager.getDefaultSharedPreferences(context);\\n\\t\\t\\t// Resume session from the database\\n\\t\\t\\tstored = database(databaseContext).query(StoredSession.class).get();\\n\\t\\t\\tif (stored == null) {\\n\\t\\t\\t\\tstored = new StoredSession();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tpublic Context getApplicationContext() {\\n\\t\\treturn databaseContext;\\n\\t}\\n\\n\\tpublic void startSession(int userId, String userName, String password, UserRateCount counts) {\\n\\t\\tsynchronized (this) {\\n\\t\\t\\tstored.userId = userId;\\n\\t\\t\\tstored.userName = userName;\\n\\t\\t\\tstored.password = password;\\n\\t\\t\\tstored.rateCount = counts.rateCount;\\n\\t\\t\\tstored.placeCount = counts.placeCount;\\n\\t\\t\\trxdb(databaseContext).put(stored);\\n\\t\\t}\\n\\t}\\n\\n\\tpublic void updateCounts(UserRateCount counts) {\\n\\t\\tsynchronized (this) {\\n\\t\\t\\tstored.rateCount = counts.rateCount;\\n\\t\\t\\tstored.placeCount = counts.placeCount;\\n\\t\\t\\trxdb(databaseContext).put(stored);\\n\\t\\t}\\n\\t}\\n\\n\\tpublic void endSession() {\\n\\t\\tsynchronized (this) {\\n\\t\\t\\trxdb(databaseContext).delete(stored);\\n\\t\\t\\tstored = new StoredSession();\\n\\t\\t}\\n\\t}\\n\\n\\tpublic boolean isLoggedIn() {\\n\\t\\treturn stored.userId != null;\\n\\t}\\n\\n\\tpublic Integer getUserId() {\\n\\t\\treturn stored.userId;\\n\\t}\\n\\n\\tpublic String getUserName() {\\n\\t\\treturn stored.userName;\\n\\t}\\n\\n\\tpublic String getPassword() {\\n\\t\\treturn stored.password;\\n\\t}\\n\\n\\tpublic Integer getUserRateCount() {\\n\\t\\treturn stored.rateCount;\\n\\t}\\n\\n\\tpublic boolean isUpgrade() {\\n\\t\\t// The \\\"is_first_start\\\" key was used on the old app to identify new installs and thus will always be present on upgrades\\n\\t\\treturn prefs.contains(\\\"is_first_start\\\");\\n\\t}\\n\\n\\tpublic boolean hasIgnoredAccount() {\\n\\t\\treturn prefs.getBoolean(\\\"has_ignored_account\\\", false);\\n\\t}\\n\\n\\tpublic void registerIgnoreAccount() {\\n\\t\\tprefs.edit().putBoolean(\\\"has_ignored_account\\\", true).apply();\\n\\t}\\n\\n\\tpublic boolean inDataSaverMode() {\\n\\t\\treturn prefs.getBoolean(\\\"data_saver_mode\\\", false);\\n\\t}\\n\\n\\tpublic void setDataSaverMode(boolean useDataSaverMode) {\\n\\t\\tprefs.edit().putBoolean(\\\"data_saver_mode\\\", useDataSaverMode).apply();\\n\\t}\\n\\n\\tpublic boolean useMetricUnits() {\\n\\t\\treturn prefs.getBoolean(\\\"units_in_metric\\\", true);\\n\\t}\\n\\n\\tpublic void setUseMetricUnits(boolean useMetricUnits) {\\n\\t\\tprefs.edit().putBoolean(\\\"units_in_metric\\\", useMetricUnits).apply();\\n\\t}\\n\\n}\"}, {\"identifier\":\"BarcodeSearchResult\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BarcodeSearchResult.java\", \"snippet\":\"public final class BarcodeSearchResult {\\n\\n\\tpublic long beerId;\\n\\tpublic String beerName;\\n\\tpublic long brewerId;\\n\\tpublic String brewerName;\\n\\tpublic Float weightedRating;\\n\\tpublic Float alcohol;\\n\\n}\"}, {\"identifier\":\"BarcodeSearchResultDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BarcodeSearchResultDeserializer.java\", \"snippet\":\"public final class BarcodeSearchResultDeserializer implements JsonDeserializer<BarcodeSearchResult> {\\n\\n\\t@Override\\n\\tpublic BarcodeSearchResult deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tBarcodeSearchResult barcodeSearchResult = new BarcodeSearchResult();\\n\\t\\tbarcodeSearchResult.beerId = object.get(\\\"BeerID\\\").getAsInt();\\n\\t\\tbarcodeSearchResult.beerName = Normalizer.get().cleanHtml(object.get(\\\"BeerName\\\").getAsString());\\n\\t\\tbarcodeSearchResult.brewerId = object.get(\\\"BrewerID\\\").getAsInt();\\n\\t\\tbarcodeSearchResult.brewerName = Normalizer.get().cleanHtml(object.get(\\\"BrewerName\\\").getAsString());\\n\\n\\t\\tif (!(object.get(\\\"AverageRating\\\") instanceof JsonNull))\\n\\t\\t\\tbarcodeSearchResult.weightedRating = object.get(\\\"AverageRating\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"alcohol\\\") && !(object.get(\\\"alcohol\\\") instanceof JsonNull))\\n\\t\\t\\tbarcodeSearchResult.alcohol = object.get(\\\"alcohol\\\").getAsFloat();\\n\\t\\treturn barcodeSearchResult;\\n\\t}\\n\\n}\"}, {\"identifier\":\"BeerDetails\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BeerDetails.java\", \"snippet\":\"public final class BeerDetails {\\n\\n\\tpublic long beerId;\\n\\tpublic String beerName;\\n\\tpublic long brewerId;\\n\\tpublic String brewerName;\\n\\tpublic long brewerCountryId;\\n\\tpublic long styleId;\\n\\tpublic String styleName;\\n\\tpublic Float overallPercentile;\\n\\tpublic Float stylePercentile;\\n\\tpublic Float realRating;\\n\\tpublic Float weightedRating;\\n\\tpublic Float alcohol;\\n\\tpublic Float ibu;\\n\\tpublic int rateCount;\\n\\tpublic boolean alias;\\n\\tpublic String description;\\n\\n}\"}, {\"identifier\":\"BeerDetailsDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BeerDetailsDeserializer.java\", \"snippet\":\"public final class BeerDetailsDeserializer implements JsonDeserializer<BeerDetails> {\\n\\n\\t@Override\\n\\tpublic BeerDetails deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tBeerDetails beerDetails = new BeerDetails();\\n\\t\\tbeerDetails.beerId = object.get(\\\"BeerID\\\").getAsInt();\\n\\t\\tbeerDetails.beerName = Normalizer.get().cleanHtml(object.get(\\\"BeerName\\\").getAsString());\\n\\t\\tbeerDetails.brewerId = object.get(\\\"BrewerID\\\").getAsInt();\\n\\t\\tbeerDetails.brewerName = Normalizer.get().cleanHtml(object.get(\\\"BrewerName\\\").getAsString());\\n\\t\\tbeerDetails.brewerCountryId = object.get(\\\"BrewerCountryID\\\").getAsInt();\\n\\t\\tbeerDetails.styleId = object.get(\\\"BeerStyleID\\\").getAsInt();\\n\\t\\tbeerDetails.styleName= Normalizer.get().cleanHtml(object.get(\\\"BeerStyleName\\\").getAsString());\\n\\n\\t\\tif (!(object.get(\\\"OverallPctl\\\") instanceof JsonNull))\\n\\t\\t\\tbeerDetails.overallPercentile = object.get(\\\"OverallPctl\\\").getAsFloat();\\n\\t\\tif (!(object.get(\\\"StylePctl\\\") instanceof JsonNull))\\n\\t\\t\\tbeerDetails.stylePercentile = object.get(\\\"StylePctl\\\").getAsFloat();\\n\\t\\tif (!(object.get(\\\"RealAverage\\\") instanceof JsonNull))\\n\\t\\t\\tbeerDetails.realRating = object.get(\\\"RealAverage\\\").getAsFloat();\\n\\t\\tif (!(object.get(\\\"AverageRating\\\") instanceof JsonNull))\\n\\t\\t\\tbeerDetails.weightedRating = object.get(\\\"AverageRating\\\").getAsFloat();\\n\\t\\tbeerDetails.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\n\\t\\tbeerDetails.alcohol = object.get(\\\"Alcohol\\\").getAsFloat();\\n\\t\\tif (!(object.get(\\\"IBU\\\") instanceof JsonNull))\\n\\t\\t\\tbeerDetails.ibu = object.get(\\\"IBU\\\").getAsFloat();\\n\\t\\tbeerDetails.alias = object.get(\\\"IsAlias\\\").getAsBoolean();\\n\\t\\tbeerDetails.description = Normalizer.get().cleanHtml(object.get(\\\"Description\\\").getAsString());\\n\\n\\t\\treturn beerDetails;\\n\\t}\\n\\n}\"}, {\"identifier\":\"BeerOnTopList\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BeerOnTopList.java\", \"snippet\":\"public final class BeerOnTopList {\\n\\n\\tpublic long beerId;\\n\\tpublic String beerName;\\n\\tpublic long styleId;\\n\\tpublic Float weightedRating;\\n\\tpublic Float overallPercentile;\\n\\tpublic Float stylePercentile;\\n\\tpublic int rateCount;\\n\\tpublic boolean ratedByUser;\\n\\n\\tpublic String getOverallPercentileString() {\\n\\t\\tif (overallPercentile == null)\\n\\t\\t\\treturn \\\"-\\\";\\n\\t\\treturn String.format(Locale.getDefault(), \\\"%1$.0f\\\", overallPercentile);\\n\\t}\\n\\n\\tpublic String getStylePercentileString() {\\n\\t\\tif (stylePercentile == null)\\n\\t\\t\\treturn \\\"-\\\";\\n\\t\\treturn String.format(Locale.getDefault(), \\\"%1$.0f\\\", stylePercentile);\\n\\t}\\n\\n}\"}, {\"identifier\":\"BeerOnTopListDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BeerOnTopListDeserializer.java\", \"snippet\":\"public final class BeerOnTopListDeserializer implements JsonDeserializer<BeerOnTopList> {\\n\\n\\t@Override\\n\\tpublic BeerOnTopList deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tBeerOnTopList beerOnTopList = new BeerOnTopList();\\n\\t\\tbeerOnTopList.beerId = object.get(\\\"BeerID\\\").getAsInt();\\n\\t\\tbeerOnTopList.beerName = Normalizer.get().cleanHtml(object.get(\\\"BeerName\\\").getAsString());\\n\\t\\tif (object.has(\\\"BeerStyleID\\\") && !(object.get(\\\"BeerStyleID\\\") instanceof JsonNull))\\n\\t\\t\\tbeerOnTopList.styleId = object.get(\\\"BeerStyleID\\\").getAsInt();\\n\\n\\t\\tif (!(object.get(\\\"OverallPctl\\\") instanceof JsonNull))\\n\\t\\t\\tbeerOnTopList.overallPercentile = object.get(\\\"OverallPctl\\\").getAsFloat();\\n\\t\\tif (!(object.get(\\\"StylePctl\\\") instanceof JsonNull))\\n\\t\\t\\tbeerOnTopList.stylePercentile = object.get(\\\"StylePctl\\\").getAsFloat();\\n\\t\\tif (!(object.get(\\\"AverageRating\\\") instanceof JsonNull))\\n\\t\\t\\tbeerOnTopList.weightedRating = object.get(\\\"AverageRating\\\").getAsFloat();\\n\\t\\tbeerOnTopList.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\t\\tif (object.has(\\\"HadIt\\\") && !(object.get(\\\"HadIt\\\") instanceof JsonNull))\\n\\t\\t\\tbeerOnTopList.ratedByUser = object.get(\\\"HadIt\\\").getAsInt() == 1;\\n\\t\\treturn beerOnTopList;\\n\\t}\\n\\n}\"}, {\"identifier\":\"BeerRating\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BeerRating.java\", \"snippet\":\"public final class BeerRating {\\n\\n\\tpublic int ratingId;\\n\\tpublic int userId;\\n\\tpublic String userName;\\n\\tpublic Integer userCountryId;\\n\\tpublic String userCountryName;\\n\\tpublic int userRateCount;\\n\\n\\tpublic Integer aroma;\\n\\tpublic Integer flavor;\\n\\tpublic Integer mouthfeel;\\n\\tpublic Integer appearance;\\n\\tpublic Integer overall;\\n\\tpublic Float total;\\n\\tpublic String comments;\\n\\tpublic Date timeEntered;\\n\\tpublic Date timeUpdated;\\n\\n}\"}, {\"identifier\":\"BeerRatingDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BeerRatingDeserializer.java\", \"snippet\":\"public final class BeerRatingDeserializer implements JsonDeserializer<BeerRating> {\\n\\n\\t@Override\\n\\tpublic BeerRating deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tBeerRating userRating = new BeerRating();\\n\\t\\tuserRating.ratingId = object.get(\\\"RatingID\\\").getAsInt();\\n\\t\\tuserRating.userId = object.get(\\\"UserID\\\").getAsInt();\\n\\t\\tuserRating.userName = Normalizer.get().cleanHtml(object.get(\\\"UserName\\\").getAsString());\\n\\t\\tif (object.get(\\\"CountryID\\\") != null && !(object.get(\\\"CountryID\\\") instanceof JsonNull))\\n\\t\\t\\tuserRating.userCountryId = object.get(\\\"CountryID\\\").getAsInt();\\n\\t\\tif (object.get(\\\"Country\\\") != null && !(object.get(\\\"Country\\\") instanceof JsonNull))\\n\\t\\t\\tuserRating.userCountryName = Normalizer.get().cleanHtml(object.get(\\\"Country\\\").getAsString());\\n\\t\\tuserRating.userRateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\n\\t\\tuserRating.aroma = object.get(\\\"Aroma\\\").getAsInt();\\n\\t\\tuserRating.flavor = object.get(\\\"Flavor\\\").getAsInt();\\n\\t\\tuserRating.mouthfeel = object.get(\\\"Mouthfeel\\\").getAsInt();\\n\\t\\tuserRating.appearance = object.get(\\\"Appearance\\\").getAsInt();\\n\\t\\tuserRating.overall = object.get(\\\"Overall\\\").getAsInt();\\n\\t\\tuserRating.total = object.get(\\\"TotalScore\\\").getAsFloat();\\n\\t\\tuserRating.comments = Normalizer.get().cleanHtml(object.get(\\\"Comments\\\").getAsString());\\n\\t\\tuserRating.timeEntered = Normalizer.get().parseTime(object.get(\\\"TimeEntered\\\").getAsString());\\n\\t\\tif (!(object.get(\\\"TimeUpdated\\\") instanceof JsonNull))\\n\\t\\t\\tuserRating.timeUpdated = Normalizer.get().parseTime(object.get(\\\"TimeUpdated\\\").getAsString());\\n\\t\\treturn userRating;\\n\\t}\\n\\n}\"}, {\"identifier\":\"BeerSearchResult\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BeerSearchResult.java\", \"snippet\":\"public final class BeerSearchResult {\\n\\n\\tpublic long beerId;\\n\\tpublic String beerName;\\n\\tpublic long brewerId;\\n\\tpublic Float overallPercentile;\\n\\tpublic int rateCount;\\n\\tpublic boolean unrateable;\\n\\tpublic boolean alias;\\n\\tpublic boolean retired;\\n\\tpublic boolean ratedByUser;\\n\\n\\tpublic String getOverallPercentileString() {\\n\\t\\tif (overallPercentile == null)\\n\\t\\t\\treturn \\\"-\\\";\\n\\t\\treturn String.format(Locale.getDefault(), \\\"%1$.0f\\\", overallPercentile);\\n\\t}\\n\\n\\tpublic BeerSearchResult withRating(Rating userRating) {\\n\\t\\tthis.ratedByUser |= userRating != null;\\n\\t\\treturn this;\\n\\t}\\n\\n}\"}, {\"identifier\":\"BeerSearchResultDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BeerSearchResultDeserializer.java\", \"snippet\":\"public final class BeerSearchResultDeserializer implements JsonDeserializer<BeerSearchResult> {\\n\\n\\t@Override\\n\\tpublic BeerSearchResult deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tBeerSearchResult beerSearchResult = new BeerSearchResult();\\n\\t\\tbeerSearchResult.beerId = object.get(\\\"BeerID\\\").getAsInt();\\n\\t\\tbeerSearchResult.beerName = Normalizer.get().cleanHtml(object.get(\\\"BeerName\\\").getAsString());\\n\\t\\tbeerSearchResult.brewerId = object.get(\\\"BrewerID\\\").getAsInt();\\n\\n\\t\\tif (!(object.get(\\\"OverallPctl\\\") instanceof JsonNull))\\n\\t\\t\\tbeerSearchResult.overallPercentile = object.get(\\\"OverallPctl\\\").getAsFloat();\\n\\t\\tbeerSearchResult.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\t\\tif (object.has(\\\"Unrateable\\\") && !(object.get(\\\"Unrateable\\\") instanceof JsonNull))\\n\\t\\t\\tbeerSearchResult.unrateable = object.get(\\\"Unrateable\\\").getAsBoolean();\\n\\t\\tif (object.has(\\\"IsAlias\\\") && !(object.get(\\\"IsAlias\\\") instanceof JsonNull))\\n\\t\\t\\tbeerSearchResult.alias = object.get(\\\"IsAlias\\\").getAsBoolean();\\n\\t\\tbeerSearchResult.retired = object.get(\\\"Retired\\\").getAsBoolean();\\n\\t\\tif (object.has(\\\"IsRated\\\") && !(object.get(\\\"IsRated\\\") instanceof JsonNull))\\n\\t\\t\\tbeerSearchResult.ratedByUser = object.get(\\\"IsRated\\\").getAsInt() == 1;\\n\\t\\treturn beerSearchResult;\\n\\t}\\n\\n}\"}, {\"identifier\":\"BreweryBeer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BreweryBeer.java\", \"snippet\":\"public final class BreweryBeer implements Comparable<BreweryBeer> {\\n\\n\\tpublic long beerId;\\n\\tpublic String beerName;\\n\\tpublic long brewerId;\\n\\tpublic String brewerName;\\n\\tpublic Long contractId;\\n\\tpublic String contractName;\\n\\tpublic long styleId;\\n\\tpublic String styleName;\\n\\tpublic Float overallPercentile;\\n\\tpublic Float stylePercentile;\\n\\tpublic Float weightedRating;\\n\\tpublic Float alcohol;\\n\\tpublic int rateCount;\\n\\tpublic boolean alias;\\n\\tpublic boolean retired;\\n\\tpublic Boolean ratedByUser;\\n\\tpublic Float ratingOfUser;\\n\\n\\tpublic String getOverallPercentileString() {\\n\\t\\tif (overallPercentile == null)\\n\\t\\t\\treturn \\\"-\\\";\\n\\t\\treturn String.format(Locale.getDefault(), \\\"%1$.0f\\\", overallPercentile);\\n\\t}\\n\\n\\tpublic boolean isContractBeer() {\\n\\t\\treturn contractId != null && contractName != null;\\n\\t}\\n\\n\\t@Override\\n\\tpublic int compareTo(@NonNull BreweryBeer another) {\\n\\t\\t// Sort contract beers after non-contract beers, with contract beers grouped by contract brewery name, then alphabetically by beer name\\n\\t\\tif (isContractBeer() && !another.isContractBeer())\\n\\t\\t\\treturn 1;\\n\\t\\telse if (another.isContractBeer() && !isContractBeer())\\n\\t\\t\\treturn 0;\\n\\t\\telse if (isContractBeer() && !contractName.equalsIgnoreCase(another.contractName))\\n\\t\\t\\treturn contractName.compareToIgnoreCase(contractName);\\n\\t\\treturn beerName == null ? -1 : beerName.compareTo(another.beerName);\\n\\t}\\n\\n}\"}, {\"identifier\":\"BreweryBeerDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BreweryBeerDeserializer.java\", \"snippet\":\"public final class BreweryBeerDeserializer implements JsonDeserializer<BreweryBeer> {\\n\\n\\t@Override\\n\\tpublic BreweryBeer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tBreweryBeer breweryBeer = new BreweryBeer();\\n\\n\\t\\tbreweryBeer.beerId = object.get(\\\"BeerID\\\").getAsInt();\\n\\t\\tbreweryBeer.beerName = Normalizer.get().cleanHtml(object.get(\\\"BeerName\\\").getAsString());\\n\\t\\tbreweryBeer.brewerId = object.get(\\\"BrewerID\\\").getAsInt();\\n\\t\\tbreweryBeer.brewerName = Normalizer.get().cleanHtml(object.get(\\\"BrewerName\\\").getAsString());\\n\\t\\tif (!(object.get(\\\"ContractBrewerID\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.contractId = object.get(\\\"ContractBrewerID\\\").getAsLong();\\n\\t\\tif (!(object.get(\\\"ContractBrewer\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.contractName = Normalizer.get().cleanHtml(object.get(\\\"ContractBrewer\\\").getAsString());\\n\\t\\tbreweryBeer.styleId = object.get(\\\"BeerStyleID\\\").getAsInt();\\n\\t\\tbreweryBeer.styleName = Normalizer.get().cleanHtml(object.get(\\\"BeerStyleName\\\").getAsString());\\n\\n\\t\\tif (!(object.get(\\\"OverallPctl\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.overallPercentile = object.get(\\\"OverallPctl\\\").getAsFloat();\\n\\t\\tif (!(object.get(\\\"StylePctl\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.stylePercentile = object.get(\\\"StylePctl\\\").getAsFloat();\\n\\t\\tif (!(object.get(\\\"AverageRating\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.weightedRating = object.get(\\\"AverageRating\\\").getAsFloat();\\n\\t\\tbreweryBeer.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\n\\t\\tbreweryBeer.alcohol = object.get(\\\"Alcohol\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"IsAlias\\\") && !(object.get(\\\"IsAlias\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.alias = object.get(\\\"IsAlias\\\").getAsBoolean();\\n\\t\\tif (object.has(\\\"Retired\\\") && !(object.get(\\\"Retired\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.retired = object.get(\\\"Retired\\\").getAsBoolean();\\n\\t\\tif (!(object.get(\\\"UserHadIt\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.ratedByUser = object.get(\\\"UserHadIt\\\").getAsInt() == 1;\\n\\t\\tif (!(object.get(\\\"UserRating\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryBeer.ratingOfUser = object.get(\\\"UserRating\\\").getAsFloat();\\n\\n\\t\\treturn breweryBeer;\\n\\t}\\n\\n}\"}, {\"identifier\":\"BreweryDetails\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BreweryDetails.java\", \"snippet\":\"public class BreweryDetails {\\n\\n\\tpublic long brewerId;\\n\\tpublic String brewerName;\\n\\tpublic int brewerType;\\n\\tpublic Boolean retired;\\n\\tpublic String address;\\n\\tpublic String city;\\n\\tpublic String postalCode;\\n\\tpublic Integer countryId;\\n\\tpublic Integer stateId;\\n\\tpublic String phoneNumber;\\n\\tpublic String email;\\n\\tpublic String websiteUrl;\\n\\tpublic String facebook;\\n\\tpublic String twitter;\\n\\n}\"}, {\"identifier\":\"BreweryDetailsDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BreweryDetailsDeserializer.java\", \"snippet\":\"public final class BreweryDetailsDeserializer implements JsonDeserializer<BreweryDetails> {\\n\\n\\t@Override\\n\\tpublic BreweryDetails deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tBreweryDetails breweryDetails = new BreweryDetails();\\n\\t\\tbreweryDetails.brewerId = object.get(\\\"BrewerID\\\").getAsInt();\\n\\t\\tbreweryDetails.brewerName = Normalizer.get().cleanHtml(object.get(\\\"BrewerName\\\").getAsString());\\n\\t\\tbreweryDetails.brewerType = object.get(\\\"BrewerTypeID\\\").getAsInt();\\n\\t\\tbreweryDetails.retired = object.get(\\\"retired\\\").getAsBoolean();\\n\\n\\t\\tbreweryDetails.address = Normalizer.get().cleanHtml(object.get(\\\"BrewerAddress\\\").getAsString());\\n\\t\\tbreweryDetails.city = Normalizer.get().cleanHtml(object.get(\\\"BrewerCity\\\").getAsString());\\n\\t\\tif (object.has(\\\"BrewerZipCode\\\") && !(object.get(\\\"BrewerZipCode\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryDetails.postalCode = Normalizer.get().cleanHtml(object.get(\\\"BrewerZipCode\\\").getAsString());\\n\\t\\tif (object.has(\\\"BrewerCountryID\\\") && !(object.get(\\\"BrewerCountryID\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryDetails.countryId = object.get(\\\"BrewerCountryID\\\").getAsInt();\\n\\t\\tif (object.has(\\\"BrewerStateID\\\") && !(object.get(\\\"BrewerStateID\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryDetails.stateId = object.get(\\\"BrewerStateID\\\").getAsInt();\\n\\t\\tif (object.has(\\\"BrewerPhone\\\") && !(object.get(\\\"BrewerPhone\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryDetails.phoneNumber = Normalizer.get().cleanHtml(object.get(\\\"BrewerPhone\\\").getAsString());\\n\\t\\tif (object.has(\\\"BrewerEmail\\\") && !(object.get(\\\"BrewerEmail\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryDetails.email = Normalizer.get().cleanHtml(object.get(\\\"BrewerEmail\\\").getAsString());\\n\\t\\tif (object.has(\\\"BrewerWebSite\\\") && !(object.get(\\\"BrewerWebSite\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryDetails.websiteUrl = Normalizer.get().cleanHtml(object.get(\\\"BrewerWebSite\\\").getAsString());\\n\\t\\tif (object.has(\\\"Facebook\\\") && !(object.get(\\\"Facebook\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryDetails.facebook = Normalizer.get().cleanHtml(object.get(\\\"Facebook\\\").getAsString());\\n\\t\\tif (object.has(\\\"Twitter\\\") && !(object.get(\\\"Twitter\\\") instanceof JsonNull))\\n\\t\\t\\tbreweryDetails.twitter = Normalizer.get().cleanHtml(object.get(\\\"Twitter\\\").getAsString());\\n\\n\\t\\treturn breweryDetails;\\n\\t}\\n\\n}\"}, {\"identifier\":\"BrewerySearchResult\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BrewerySearchResult.java\", \"snippet\":\"public final class BrewerySearchResult {\\n\\n\\tpublic long brewerId;\\n\\tpublic String brewerName;\\n\\tpublic String city;\\n\\tpublic Integer countryId;\\n\\tpublic Integer stateId;\\n\\n}\"}, {\"identifier\":\"BrewerySearchResultDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/BrewerySearchResultDeserializer.java\", \"snippet\":\"public final class BrewerySearchResultDeserializer implements JsonDeserializer<BrewerySearchResult> {\\n\\n\\t@Override\\n\\tpublic BrewerySearchResult deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tBrewerySearchResult brewerySearchResult = new BrewerySearchResult();\\n\\n\\t\\tbrewerySearchResult.brewerId = object.get(\\\"BrewerID\\\").getAsInt();\\n\\t\\tbrewerySearchResult.brewerName = Normalizer.get().cleanHtml(object.get(\\\"BrewerName\\\").getAsString());\\n\\t\\tbrewerySearchResult.city = Normalizer.get().cleanHtml(object.get(\\\"BrewerCity\\\").getAsString());\\n\\t\\tbrewerySearchResult.countryId = object.get(\\\"CountryID\\\").getAsInt();\\n\\t\\tif (object.has(\\\"StateID\\\") && !(object.get(\\\"StateID\\\") instanceof JsonNull))\\n\\t\\t\\tbrewerySearchResult.stateId = object.get(\\\"StateID\\\").getAsInt();\\n\\n\\t\\treturn brewerySearchResult;\\n\\t}\\n\\n}\"}, {\"identifier\":\"CountryInfo\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/CountryInfo.java\", \"snippet\":\"public final class CountryInfo {\\n\\n\\tpublic long countryId;\\n\\tpublic String countryName;\\n\\n}\"}, {\"identifier\":\"CountryInfoDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/CountryInfoDeserializer.java\", \"snippet\":\"public final class CountryInfoDeserializer implements JsonDeserializer<CountryInfo> {\\n\\n\\t@Override\\n\\tpublic CountryInfo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tCountryInfo countryInfo = new CountryInfo();\\n\\n\\t\\tcountryInfo.countryId = object.get(\\\"CountryID\\\").getAsInt();\\n\\t\\tcountryInfo.countryName = Normalizer.get().cleanHtml(object.get(\\\"Country\\\").getAsString(), true);\\n\\n\\t\\treturn countryInfo;\\n\\t}\\n\\n}\"}, {\"identifier\":\"FeedItem\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/FeedItem.java\", \"snippet\":\"public final class FeedItem {\\n\\n\\t// The different feed item types that are available (with an example LinkText)\\n\\tfinal public static int ITEMTYPE_BEERADDED = 1; // added a new Style Name: <a href=\\\"/beer/beer-name/beerid/\\\">Beer Name</a><span class=uaa> (5.0%)\\n\\tfinal public static int ITEMTYPE_BEERRATING = 7; // rated <a href=\\\"/beer/beer-name/beerid/userid/\\\">Beer Name</a>\\n\\tfinal public static int ITEMTYPE_PLACERATING = 8; // reviewed <a href=\\\"/p/goto/placeid/\\\">Place Name</a>\\n\\tfinal public static int ITEMTYPE_ISDRINKING = 12; // Beer Name\\n\\tfinal public static int ITEMTYPE_EVENTATTENDANCE = 17; // is attending <a href=\\\"/event/20713/\\\">Event Name</a> (1/1/2014 in City)\\n\\tfinal public static int ITEMTYPE_AWARD = 18; // Award Name\\n\\tfinal public static int ITEMTYPE_PLACECHECKIN = 20; // checked in at <a href=\\\"/p/place-name/placeid/\\\">Place Name, City</a>\\n\\tfinal public static int ITEMTYPE_REACHEDRATINGS = 21; // reached # Style Name ratings!\\n\\tfinal public static int ITEMTYPE_BREWERYADDED = 22; // added a new brewery: <a  href=\\\"/brewers/brewer-name/brewerid/\\\">Brewer Name in City</a>\\n\\n\\tpublic int activityId;\\n\\tpublic int userId;\\n\\tpublic String userName;\\n\\tpublic int type;\\n\\tpublic Integer linkId;\\n\\tpublic String linkText;\\n\\tpublic int activityNumber;\\n\\tpublic Date timeEntered;\\n\\tpublic int numComments;\\n\\n\\tpublic Integer getBeerId() {\\n\\t\\tif (type == ITEMTYPE_BEERADDED || type == ITEMTYPE_BEERRATING) {\\n\\t\\t\\treturn linkId == 0? null: linkId;\\n\\t\\t}\\n\\t\\t// Doe snot apply to a specific beer\\n\\t\\treturn null;\\n\\t}\\n\\n}\"}, {\"identifier\":\"FeedItemDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/FeedItemDeserializer.java\", \"snippet\":\"public final class FeedItemDeserializer implements JsonDeserializer<FeedItem> {\\n\\n\\t@Override\\n\\tpublic FeedItem deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tFeedItem feedItem = new FeedItem();\\n\\t\\tfeedItem.activityId = object.get(\\\"ActivityID\\\").getAsInt();\\n\\t\\tfeedItem.userId = object.get(\\\"UserID\\\").getAsInt();\\n\\t\\tfeedItem.userName = Normalizer.get().cleanHtml(object.get(\\\"Username\\\").getAsString());\\n\\t\\tfeedItem.type = object.get(\\\"Type\\\").getAsInt();\\n\\t\\tif (!(object.get(\\\"LinkID\\\") instanceof JsonNull))\\n\\t\\t\\tfeedItem.linkId = object.get(\\\"LinkID\\\").getAsInt();\\n\\t\\tfeedItem.linkText = object.get(\\\"LinkText\\\").getAsString(); // Keep raw HTML\\n\\t\\tif (!(object.get(\\\"ActivityNumber\\\") instanceof JsonNull))\\n\\t\\t\\tfeedItem.activityNumber = object.get(\\\"ActivityNumber\\\").getAsInt();\\n\\t\\tfeedItem.timeEntered = Normalizer.get().parseTime(object.get(\\\"TimeEntered\\\").getAsString());\\n\\t\\tif (!(object.get(\\\"NumComments\\\") instanceof JsonNull))\\n\\t\\t\\tfeedItem.numComments = object.get(\\\"NumComments\\\").getAsInt();\\n\\t\\treturn feedItem;\\n\\t}\\n\\n}\"}, {\"identifier\":\"PlaceCheckinResult\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/PlaceCheckinResult.java\", \"snippet\":\"public final class PlaceCheckinResult {\\n\\n\\tpublic String okResult;\\n\\tpublic String errorResult;\\n\\n}\"}, {\"identifier\":\"PlaceCheckinResultDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/PlaceCheckinResultDeserializer.java\", \"snippet\":\"public final class PlaceCheckinResultDeserializer implements JsonDeserializer<PlaceCheckinResult> {\\n\\n\\t@Override\\n\\tpublic PlaceCheckinResult deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\t// NOTE Success looks like:\\n\\t\\t//   {\\\"OK\\\":\\\"User has checked into The World of Drinks Krabbendijke .\\\"}\\n\\t\\t// NOTE Error looks like:\\n\\t\\t//   {\\\"Error\\\":\\\"User has already checked into The World of Drinks Krabbendijke recently.\\\"}\\n\\t\\tPlaceCheckinResult placeCheckinResult = new PlaceCheckinResult();\\n\\t\\tif (object.has(\\\"OK\\\") && !(object.get(\\\"OK\\\") instanceof JsonNull))\\n\\t\\t\\tplaceCheckinResult.okResult = object.get(\\\"OK\\\").getAsString();\\n\\t\\tif (object.has(\\\"Error\\\") && !(object.get(\\\"Error\\\") instanceof JsonNull))\\n\\t\\t\\tplaceCheckinResult.errorResult = object.get(\\\"Error\\\").getAsString();\\n\\t\\treturn placeCheckinResult;\\n\\t}\\n\\n}\"}, {\"identifier\":\"PlaceDetails\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/PlaceDetails.java\", \"snippet\":\"public class PlaceDetails {\\n\\n\\tpublic long placeId;\\n\\tpublic String placeName;\\n\\tpublic int placeType;\\n\\tpublic String address;\\n\\tpublic String city;\\n\\tpublic String postalCode;\\n\\tpublic Integer countryId;\\n\\tpublic Integer stateId;\\n\\tpublic String phoneNumber;\\n\\tpublic String websiteUrl;\\n\\tpublic String facebook;\\n\\tpublic String twitter;\\n\\tpublic String taps;\\n\\tpublic String bottles;\\n\\tpublic String hours;\\n\\tpublic Long userId;\\n\\tpublic Long brewerId;\\n\\tpublic Boolean retired;\\n\\tpublic Float averageRating;\\n\\tpublic Float baysianMean;\\n\\tpublic Float percentile;\\n\\tpublic int rateCount;\\n\\tpublic float latitude;\\n\\tpublic float longitude;\\n\\n}\"}, {\"identifier\":\"PlaceDetailsDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/PlaceDetailsDeserializer.java\", \"snippet\":\"public final class PlaceDetailsDeserializer implements JsonDeserializer<PlaceDetails> {\\n\\n\\t@Override\\n\\tpublic PlaceDetails deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tPlaceDetails placeDetails = new PlaceDetails();\\n\\t\\tplaceDetails.placeId = object.get(\\\"PlaceID\\\").getAsInt();\\n\\t\\tplaceDetails.placeName = Normalizer.get().cleanHtml(object.get(\\\"PlaceName\\\").getAsString());\\n\\t\\tplaceDetails.placeType = object.get(\\\"PlaceType\\\").getAsInt();\\n\\n\\t\\tplaceDetails.address = Normalizer.get().cleanHtml(object.get(\\\"Address\\\").getAsString());\\n\\t\\tplaceDetails.city = Normalizer.get().cleanHtml(object.get(\\\"City\\\").getAsString());\\n\\t\\tif (object.has(\\\"PostalCode\\\") && !(object.get(\\\"PostalCode\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.postalCode = Normalizer.get().cleanHtml(object.get(\\\"PostalCode\\\").getAsString());\\n\\t\\tif (object.has(\\\"CountryID\\\") && !(object.get(\\\"CountryID\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.countryId = object.get(\\\"CountryID\\\").getAsInt();\\n\\t\\tif (object.has(\\\"StateId\\\") && !(object.get(\\\"StateID\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.stateId = object.get(\\\"StateID\\\").getAsInt();\\n\\t\\tplaceDetails.phoneNumber = Normalizer.get().cleanHtml(object.get(\\\"PhoneNumber\\\").getAsString());\\n\\t\\tif (object.has(\\\"WebSiteURL\\\") && !(object.get(\\\"WebSiteURL\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.websiteUrl = Normalizer.get().cleanHtml(object.get(\\\"WebSiteURL\\\").getAsString());\\n\\t\\tif (object.has(\\\"Facebook\\\") && !(object.get(\\\"Facebook\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.facebook = Normalizer.get().cleanHtml(object.get(\\\"Facebook\\\").getAsString());\\n\\t\\tif (object.has(\\\"Twitter\\\") && !(object.get(\\\"Twitter\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.twitter = Normalizer.get().cleanHtml(object.get(\\\"Twitter\\\").getAsString());\\n\\n\\t\\tif (object.has(\\\"Taps\\\") && !(object.get(\\\"Taps\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.taps = Normalizer.get().cleanHtml(object.get(\\\"Taps\\\").getAsString());\\n\\t\\tif (object.has(\\\"Bottles\\\") && !(object.get(\\\"Bottles\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.bottles = Normalizer.get().cleanHtml(object.get(\\\"Bottles\\\").getAsString());\\n\\t\\tif (object.has(\\\"Hours\\\") && !(object.get(\\\"Hours\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.hours = Normalizer.get().cleanHtml(object.get(\\\"Hours\\\").getAsString());\\n\\t\\tif (object.has(\\\"UserID\\\") && !(object.get(\\\"UserID\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.userId = object.get(\\\"UserID\\\").getAsLong();\\n\\t\\tif (object.has(\\\"BrewerID\\\") && !(object.get(\\\"BrewerID\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.brewerId = object.get(\\\"BrewerID\\\").getAsLong();\\n\\t\\tif (object.has(\\\"Retired\\\") && !(object.get(\\\"Retired\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.retired = object.get(\\\"Retired\\\").getAsBoolean();\\n\\n\\t\\tif (object.has(\\\"AvgRating\\\") && !(object.get(\\\"AvgRating\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.averageRating = object.get(\\\"AvgRating\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"BayMean\\\") && !(object.get(\\\"BayMean\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.baysianMean = object.get(\\\"BayMean\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"Percentile\\\") && !(object.get(\\\"Percentile\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.percentile = object.get(\\\"Percentile\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"RateCount\\\") && !(object.get(\\\"RateCount\\\") instanceof JsonNull))\\n\\t\\t\\tplaceDetails.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\n\\t\\tplaceDetails.latitude = object.get(\\\"Latitude\\\").getAsFloat();\\n\\t\\tplaceDetails.longitude = object.get(\\\"Longitude\\\").getAsFloat();\\n\\n\\t\\treturn placeDetails;\\n\\t}\\n\\n}\"}, {\"identifier\":\"PlaceNearby\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/PlaceNearby.java\", \"snippet\":\"public class PlaceNearby {\\n\\n\\tpublic long placeId;\\n\\tpublic String placeName;\\n\\tpublic int placeType;\\n\\tpublic String address;\\n\\tpublic String city;\\n\\tpublic String postalCode;\\n\\tpublic Integer countryId;\\n\\tpublic Integer stateId;\\n\\tpublic String phoneNumber;\\n\\tpublic Float averageRating;\\n\\tpublic int rateCount;\\n\\tpublic Float latitude;\\n\\tpublic Float longitude;\\n\\n}\"}, {\"identifier\":\"PlaceNearbyDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/PlaceNearbyDeserializer.java\", \"snippet\":\"public final class PlaceNearbyDeserializer implements JsonDeserializer<PlaceNearby> {\\n\\n\\t@Override\\n\\tpublic PlaceNearby deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tPlaceNearby placeNearby = new PlaceNearby();\\n\\t\\tplaceNearby.placeId = object.get(\\\"PlaceID\\\").getAsInt();\\n\\t\\tplaceNearby.placeName = Normalizer.get().cleanHtml(object.get(\\\"PlaceName\\\").getAsString());\\n\\t\\tplaceNearby.placeType = object.get(\\\"PlaceType\\\").getAsInt();\\n\\n\\t\\tplaceNearby.address = Normalizer.get().cleanHtml(object.get(\\\"Address\\\").getAsString());\\n\\t\\tplaceNearby.city = Normalizer.get().cleanHtml(object.get(\\\"City\\\").getAsString());\\n\\t\\tif (object.has(\\\"PostalCode\\\") && !(object.get(\\\"PostalCode\\\") instanceof JsonNull))\\n\\t\\t\\tplaceNearby.postalCode = Normalizer.get().cleanHtml(object.get(\\\"PostalCode\\\").getAsString());\\n\\t\\tif (object.has(\\\"CountryID\\\") && !(object.get(\\\"CountryID\\\") instanceof JsonNull))\\n\\t\\t\\tplaceNearby.countryId = object.get(\\\"CountryID\\\").getAsInt();\\n\\t\\tif (object.has(\\\"StateId\\\") && !(object.get(\\\"StateID\\\") instanceof JsonNull))\\n\\t\\t\\tplaceNearby.stateId = object.get(\\\"StateID\\\").getAsInt();\\n\\t\\tplaceNearby.address = Normalizer.get().cleanHtml(object.get(\\\"Address\\\").getAsString());\\n\\t\\tplaceNearby.phoneNumber = Normalizer.get().cleanHtml(object.get(\\\"PhoneNumber\\\").getAsString());\\n\\n\\t\\tif (object.has(\\\"AvgRating\\\") && !(object.get(\\\"AvgRating\\\") instanceof JsonNull))\\n\\t\\t\\tplaceNearby.averageRating = object.get(\\\"AvgRating\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"RateCount\\\") && !(object.get(\\\"RateCount\\\") instanceof JsonNull))\\n\\t\\t\\tplaceNearby.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\n\\t\\tplaceNearby.latitude = object.get(\\\"Latitude\\\").getAsFloat();\\n\\t\\tplaceNearby.longitude = object.get(\\\"Longitude\\\").getAsFloat();\\n\\n\\t\\treturn placeNearby;\\n\\t}\\n\\n}\"}, {\"identifier\":\"PlaceSearchResult\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/PlaceSearchResult.java\", \"snippet\":\"public final class PlaceSearchResult {\\n\\n\\tpublic long placeId;\\n\\tpublic String placeName;\\n\\tpublic int placeType;\\n\\tpublic String city;\\n\\tpublic Integer countryId;\\n\\tpublic Integer stateId;\\n\\tpublic Float overallPercentile;\\n\\tpublic Float averageRating;\\n\\tpublic int rateCount;\\n\\n\\tpublic String getOverallPercentileString() {\\n\\t\\tif (overallPercentile == null)\\n\\t\\t\\treturn \\\"-\\\";\\n\\t\\treturn String.format(Locale.getDefault(), \\\"%1$.0f\\\", overallPercentile);\\n\\t}\\n\\n}\"}, {\"identifier\":\"PlaceSearchResultDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/PlaceSearchResultDeserializer.java\", \"snippet\":\"public final class PlaceSearchResultDeserializer implements JsonDeserializer<PlaceSearchResult> {\\n\\n\\t@Override\\n\\tpublic PlaceSearchResult deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tPlaceSearchResult placeSearchResult = new PlaceSearchResult();\\n\\t\\tplaceSearchResult.placeId = object.get(\\\"PlaceID\\\").getAsInt();\\n\\t\\tplaceSearchResult.placeName = Normalizer.get().cleanHtml(object.get(\\\"PlaceName\\\").getAsString());\\n\\t\\tplaceSearchResult.placeType = object.get(\\\"PlaceType\\\").getAsInt();\\n\\t\\tplaceSearchResult.city = Normalizer.get().cleanHtml(object.get(\\\"City\\\").getAsString());\\n\\t\\tif (object.has(\\\"CountryID\\\") && !(object.get(\\\"CountryID\\\") instanceof JsonNull))\\n\\t\\t\\tplaceSearchResult.countryId = object.get(\\\"CountryID\\\").getAsInt();\\n\\t\\tif (object.has(\\\"StateId\\\") && !(object.get(\\\"StateID\\\") instanceof JsonNull))\\n\\t\\t\\tplaceSearchResult.stateId = object.get(\\\"StateID\\\").getAsInt();\\n\\t\\tif (object.has(\\\"Percentile\\\") && !(object.get(\\\"Percentile\\\") instanceof JsonNull))\\n\\t\\t\\tplaceSearchResult.overallPercentile = object.get(\\\"Percentile\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"AvgRating\\\") && !(object.get(\\\"AvgRating\\\") instanceof JsonNull))\\n\\t\\t\\tplaceSearchResult.averageRating = object.get(\\\"AvgRating\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"RateCount\\\") && !(object.get(\\\"RateCount\\\") instanceof JsonNull))\\n\\t\\t\\tplaceSearchResult.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\t\\treturn placeSearchResult;\\n\\t}\\n\\n}\"}, {\"identifier\":\"StateInfo\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/StateInfo.java\", \"snippet\":\"public final class StateInfo {\\n\\n\\tpublic long countryId;\\n\\tpublic long stateId;\\n\\tpublic String stateName;\\n\\tpublic String abbreviation;\\n\\n}\"}, {\"identifier\":\"StateInfoDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/StateInfoDeserializer.java\", \"snippet\":\"public final class StateInfoDeserializer implements JsonDeserializer<StateInfo> {\\n\\n\\t@Override\\n\\tpublic StateInfo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tStateInfo stateInfo = new StateInfo();\\n\\n\\t\\tstateInfo.countryId = object.get(\\\"CountryID\\\").getAsInt();\\n\\t\\tstateInfo.stateId = object.get(\\\"CountryID\\\").getAsInt();\\n\\t\\tstateInfo.stateName = Normalizer.get().cleanHtml(object.get(\\\"Country\\\").getAsString(), true);\\n\\t\\tif (object.has(\\\"Abbrev\\\") && !(object.get(\\\"Abbrev\\\") instanceof JsonNull))\\n\\t\\t\\tstateInfo.abbreviation = Normalizer.get().cleanHtml(object.get(\\\"Abbrev\\\").getAsString(), true);\\n\\n\\t\\treturn stateInfo;\\n\\t}\\n\\n}\"}, {\"identifier\":\"StyleInfo\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/StyleInfo.java\", \"snippet\":\"public final class StyleInfo {\\n\\n\\tpublic long styleId;\\n\\tpublic String styleName;\\n\\tpublic String description;\\n\\tpublic String srmRange;\\n\\n}\"}, {\"identifier\":\"StyleInfoDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/StyleInfoDeserializer.java\", \"snippet\":\"public final class StyleInfoDeserializer implements JsonDeserializer<StyleInfo> {\\n\\n\\t@Override\\n\\tpublic StyleInfo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tStyleInfo styleInfo = new StyleInfo();\\n\\n\\t\\tstyleInfo.styleId = object.get(\\\"BeerStyleID\\\").getAsInt();\\n\\t\\tstyleInfo.styleName = Normalizer.get().cleanHtml(object.get(\\\"BeerStyleName\\\").getAsString(), true);\\n\\t\\tif (object.has(\\\"BeerStyleDescription\\\") && !(object.get(\\\"BeerStyleDescription\\\") instanceof JsonNull))\\n\\t\\t\\tstyleInfo.description = Normalizer.get().cleanHtml(object.get(\\\"BeerStyleDescription\\\").getAsString(), true);\\n\\t\\tif (object.has(\\\"SRMRange\\\") && !(object.get(\\\"SRMRange\\\") instanceof JsonNull))\\n\\t\\t\\tstyleInfo.srmRange = Normalizer.get().cleanHtml(object.get(\\\"SRMRange\\\").getAsString(), true);\\n\\n\\t\\treturn styleInfo;\\n\\t}\\n\\n}\"}, {\"identifier\":\"UserInfo\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/UserInfo.java\", \"snippet\":\"public final class UserInfo {\\n\\n\\tpublic int userId;\\n\\tpublic String userName;\\n\\tpublic String primaryEmail;\\n\\n}\"}, {\"identifier\":\"UserInfoDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/UserInfoDeserializer.java\", \"snippet\":\"public final class UserInfoDeserializer implements JsonDeserializer<UserInfo> {\\n\\n\\t@Override\\n\\tpublic UserInfo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tUserInfo userInfo = new UserInfo();\\n\\t\\tuserInfo.userId = object.get(\\\"UserID\\\").getAsInt();\\n\\t\\tuserInfo.userName = object.get(\\\"UserName\\\").getAsString();\\n\\t\\tif (!(object.get(\\\"PrimaryEmail\\\") instanceof JsonNull))\\n\\t\\t\\tuserInfo.primaryEmail = object.get(\\\"PrimaryEmail\\\").getAsString();\\n\\t\\treturn userInfo;\\n\\t}\\n\\n}\"}, {\"identifier\":\"UserRateCount\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/UserRateCount.java\", \"snippet\":\"public final class UserRateCount {\\n\\n\\tpublic int rateCount;\\n\\tpublic int placeCount;\\n\\tpublic int tickCount;\\n\\n}\"}, {\"identifier\":\"UserRateCountDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/UserRateCountDeserializer.java\", \"snippet\":\"public final class UserRateCountDeserializer implements JsonDeserializer<UserRateCount> {\\n\\n\\t@Override\\n\\tpublic UserRateCount deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tUserRateCount userRateCount = new UserRateCount();\\n\\t\\tif (object.has(\\\"RateCount\\\") && !(object.get(\\\"RateCount\\\") instanceof JsonNull))\\n\\t\\t\\tuserRateCount.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\t\\tif (object.has(\\\"PlaceRatings\\\") && !(object.get(\\\"PlaceRatings\\\") instanceof JsonNull))\\n\\t\\t\\tuserRateCount.placeCount = object.get(\\\"PlaceRatings\\\").getAsInt();\\n\\t\\tif (object.has(\\\"TickCount\\\") && !(object.get(\\\"TickCount\\\") instanceof JsonNull))\\n\\t\\t\\tuserRateCount.tickCount = object.get(\\\"TickCount\\\").getAsInt();\\n\\t\\treturn userRateCount;\\n\\t}\\n\\n}\"}, {\"identifier\":\"UserRating\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/UserRating.java\", \"snippet\":\"public final class UserRating {\\n\\n\\tpublic int beerId;\\n\\tpublic String beerName;\\n\\tpublic int beerStyleId;\\n\\tpublic String beerStyleName;\\n\\tpublic int brewerId;\\n\\tpublic String brewerName;\\n\\n\\tpublic float averageRating;\\n\\tpublic Float overallPercentile;\\n\\tpublic Float stylePercentile;\\n\\tpublic int rateCount;\\n\\n\\tpublic int ratingId;\\n\\tpublic int aroma;\\n\\tpublic int flavor;\\n\\tpublic int mouthfeel;\\n\\tpublic int appearance;\\n\\tpublic int overall;\\n\\tpublic float total;\\n\\tpublic String comments;\\n\\tpublic Date timeEntered;\\n\\tpublic Date timeUpdated;\\n\\n}\"}, {\"identifier\":\"UserRatingDeserializer\", \"path\":\"app/src/main/java/com/ratebeer/android/api/model/UserRatingDeserializer.java\", \"snippet\":\"public final class UserRatingDeserializer implements JsonDeserializer<UserRating> {\\n\\n\\t@Override\\n\\tpublic UserRating deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\\n\\t\\tJsonObject object = json.getAsJsonObject();\\n\\t\\tUserRating userRating = new UserRating();\\n\\t\\tuserRating.beerId = object.get(\\\"BeerID\\\").getAsInt();\\n\\t\\tuserRating.beerName = Normalizer.get().cleanHtml(object.get(\\\"BeerName\\\").getAsString());\\n\\t\\tuserRating.beerStyleId = object.get(\\\"BeerStyleID\\\").getAsInt();\\n\\t\\tuserRating.beerStyleName = Normalizer.get().cleanHtml(object.get(\\\"BeerStyleName\\\").getAsString());\\n\\t\\tuserRating.brewerId = object.get(\\\"BrewerID\\\").getAsInt();\\n\\t\\tuserRating.brewerName = Normalizer.get().cleanHtml(object.get(\\\"BrewerName\\\").getAsString());\\n\\n\\t\\tuserRating.averageRating = object.get(\\\"AverageRating\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"OverallPctl\\\") && !(object.get(\\\"OverallPctl\\\") instanceof JsonNull))\\n\\t\\tuserRating.overallPercentile = object.get(\\\"OverallPctl\\\").getAsFloat();\\n\\t\\tif (object.has(\\\"OverallPctl\\\") && !(object.get(\\\"OverallPctl\\\") instanceof JsonNull))\\n\\t\\tuserRating.stylePercentile = object.get(\\\"StylePctl\\\").getAsFloat();\\n\\t\\tuserRating.rateCount = object.get(\\\"RateCount\\\").getAsInt();\\n\\n\\t\\tuserRating.ratingId = object.get(\\\"RatingID\\\").getAsInt();\\n\\t\\tuserRating.aroma = object.get(\\\"Aroma\\\").getAsInt();\\n\\t\\tuserRating.flavor = object.get(\\\"Flavor\\\").getAsInt();\\n\\t\\tuserRating.mouthfeel = object.get(\\\"Mouthfeel\\\").getAsInt();\\n\\t\\tuserRating.appearance = object.get(\\\"Appearance\\\").getAsInt();\\n\\t\\tuserRating.overall = object.get(\\\"Overall\\\").getAsInt();\\n\\t\\tuserRating.total = object.get(\\\"TotalScore\\\").getAsFloat();\\n\\t\\tuserRating.comments = Normalizer.get().cleanHtml(object.get(\\\"Comments\\\").getAsString());\\n\\t\\tuserRating.timeEntered = Normalizer.get().parseTime(object.get(\\\"TimeEntered\\\").getAsString());\\n\\t\\tif (object.has(\\\"TimeUpdated\\\") && !(object.get(\\\"TimeUpdated\\\") instanceof JsonNull))\\n\\t\\t\\tuserRating.timeUpdated = Normalizer.get().parseTime(object.get(\\\"TimeUpdated\\\").getAsString());\\n\\t\\treturn userRating;\\n\\t}\\n\\n}\"}, {\"identifier\":\"RBLog\", \"path\":\"app/src/main/java/com/ratebeer/android/db/RBLog.java\", \"snippet\":\"public final class RBLog {\\n\\n\\tprivate static final String LOG_NAME = \\\"RateBeer\\\";\\n\\n\\tpublic static void v(String message) {\\n\\t\\tif (BuildConfig.DEBUG)\\n\\t\\t\\tLog.v(LOG_NAME, message);\\n\\t}\\n\\n\\tpublic static void d(String message) {\\n\\t\\tif (BuildConfig.DEBUG)\\n\\t\\t\\tLog.d(LOG_NAME, message);\\n\\t}\\n\\n\\tpublic static void e(String message) {\\n\\t\\te(message, null);\\n\\t}\\n\\n\\tpublic static void e(String message, Throwable innerException) {\\n\\t\\tif (BuildConfig.DEBUG)\\n\\t\\t\\tLog.e(LOG_NAME, message + (innerException != null ? \\\"\\\\n\\\\t\\\" + innerException.toString() : \\\"\\\"));\\n\\t}\\n\\n\\t@SuppressWarnings(\\\"ThrowableResultOfMethodCallIgnored\\\")\\n\\tpublic static <T> void rx(Notification<T> n) {\\n\\t\\tif (n.isOnError()) {\\n\\t\\t\\tn.getThrowable().printStackTrace();\\n\\t\\t\\tRBLog.e(\\\"E: \\\" + n.getThrowable());\\n\\t\\t} else if (n.isOnCompleted()) {\\n\\t\\t\\tRBLog.d(\\\"C\\\");\\n\\t\\t} else {\\n\\t\\t\\tRBLog.d(\\\"N: \\\" + n.getValue());\\n\\t\\t}\\n\\t}\\n\\n}\"}, {\"identifier\":\"Rating\", \"path\":\"app/src/main/java/com/ratebeer/android/db/Rating.java\", \"snippet\":\"public final class Rating {\\n\\n\\tpublic Long _id;\\n\\tpublic Long ratingId;\\n\\tpublic Long beerId;\\n\\tpublic String beerName;\\n\\tpublic String brewerName;\\n\\n\\tpublic Integer aroma;\\n\\tpublic Integer flavor;\\n\\tpublic Integer mouthfeel;\\n\\tpublic Integer appearance;\\n\\tpublic Integer overall;\\n\\tpublic Float total;\\n\\tpublic String comments;\\n\\n\\tpublic Date timeCached;\\n\\tpublic Date timeEntered;\\n\\tpublic Date timeUpdated;\\n\\n\\tpublic boolean isUploaded() {\\n\\t\\treturn timeEntered != null;\\n\\t}\\n\\n\\tpublic Float calculateTotal() {\\n\\t\\treturn calculateTotal(aroma, flavor, mouthfeel, appearance, overall);\\n\\t}\\n\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"[\\\" + _id + \\\"] \\\" + beerName + \\\": A\\\" + aroma + \\\" A\\\" + appearance + \\\" T\\\" + flavor + \\\" P\\\" + mouthfeel + \\\" O\\\" + overall + \\\" T\\\" + total;\\n\\t}\\n\\n\\tpublic static Rating fromUserRating(UserRating userRating) {\\n\\t\\tRating rating = new Rating();\\n\\t\\trating.ratingId = (long) userRating.ratingId;\\n\\t\\trating.beerId = (long) userRating.beerId;\\n\\t\\trating.beerName = userRating.beerName;\\n\\t\\trating.brewerName = userRating.brewerName;\\n\\n\\t\\trating.aroma = userRating.aroma;\\n\\t\\trating.flavor = userRating.flavor;\\n\\t\\trating.mouthfeel = userRating.mouthfeel;\\n\\t\\trating.appearance = userRating.appearance;\\n\\t\\trating.overall = userRating.overall;\\n\\t\\trating.total = userRating.total;\\n\\t\\trating.comments = userRating.comments;\\n\\n\\t\\trating.timeCached = new Date();\\n\\t\\trating.timeEntered = userRating.timeEntered;\\n\\t\\trating.timeUpdated = userRating.timeUpdated;\\n\\t\\treturn rating;\\n\\t}\\n\\n\\tpublic static Rating fromBeerRating(Beer beer, BeerRating beerRating, Rating overrideRating) {\\n\\t\\tRating rating = new Rating();\\n\\t\\trating._id = overrideRating == null? null: overrideRating._id;\\n\\t\\trating.ratingId = (long) beerRating.ratingId;\\n\\t\\trating.beerId = beer._id;\\n\\t\\trating.beerName = beer.name;\\n\\t\\trating.brewerName = beer.brewerName;\\n\\n\\t\\trating.aroma = beerRating.aroma;\\n\\t\\trating.flavor = beerRating.flavor;\\n\\t\\trating.mouthfeel = beerRating.mouthfeel;\\n\\t\\trating.appearance = beerRating.appearance;\\n\\t\\trating.overall = beerRating.overall;\\n\\t\\trating.total = beerRating.total;\\n\\t\\trating.comments = beerRating.comments;\\n\\n\\t\\trating.timeCached = new Date();\\n\\t\\trating.timeEntered = beerRating.timeEntered;\\n\\t\\trating.timeUpdated = beerRating.timeUpdated;\\n\\t\\treturn rating;\\n\\t}\\n\\n\\tpublic static Rating fromOfflineRating(OfflineRating offlineRating) {\\n\\t\\t// Convert legacy offline rating into local rating database object\\n\\t\\tRating rating = new Rating();\\n\\t\\trating.ratingId = offlineRating.originalRatingId == null? null: offlineRating.originalRatingId.longValue();\\n\\t\\trating.beerId = offlineRating.beerId == null ? null : offlineRating.beerId.longValue();\\n\\t\\trating.beerName = offlineRating.beerName;\\n\\n\\t\\trating.aroma = offlineRating.aroma;\\n\\t\\trating.flavor = offlineRating.taste;\\n\\t\\trating.mouthfeel = offlineRating.palate;\\n\\t\\trating.appearance = offlineRating.appearance;\\n\\t\\trating.overall = offlineRating.overall;\\n\\t\\trating.total =\\n\\t\\t\\t\\tcalculateTotal(offlineRating.aroma, offlineRating.taste, offlineRating.palate, offlineRating.appearance, offlineRating.overall);\\n\\t\\trating.comments = offlineRating.comments;\\n\\n\\t\\trating.timeCached = offlineRating.timeSaved;\\n\\t\\treturn rating;\\n\\t}\\n\\n\\tpublic static Float calculateTotal(Integer aroma, Integer flavor, Integer mouthfeel, Integer appearance, Integer overall) {\\n\\t\\tif (aroma == null || flavor == null || mouthfeel == null || appearance == null || overall == null)\\n\\t\\t\\treturn null;\\n\\t\\treturn (float) (aroma + flavor + mouthfeel + appearance + overall) / 10F;\\n\\t}\\n\\n}\"}]", "import_statement": "import android.text.TextUtils;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.pacoworks.rxtuples.RxTuples;\nimport com.ratebeer.android.BuildConfig;\nimport com.ratebeer.android.Session;\nimport com.ratebeer.android.api.model.BarcodeSearchResult;\nimport com.ratebeer.android.api.model.BarcodeSearchResultDeserializer;\nimport com.ratebeer.android.api.model.BeerDetails;\nimport com.ratebeer.android.api.model.BeerDetailsDeserializer;\nimport com.ratebeer.android.api.model.BeerOnTopList;\nimport com.ratebeer.android.api.model.BeerOnTopListDeserializer;\nimport com.ratebeer.android.api.model.BeerRating;\nimport com.ratebeer.android.api.model.BeerRatingDeserializer;\nimport com.ratebeer.android.api.model.BeerSearchResult;\nimport com.ratebeer.android.api.model.BeerSearchResultDeserializer;\nimport com.ratebeer.android.api.model.BreweryBeer;\nimport com.ratebeer.android.api.model.BreweryBeerDeserializer;\nimport com.ratebeer.android.api.model.BreweryDetails;\nimport com.ratebeer.android.api.model.BreweryDetailsDeserializer;\nimport com.ratebeer.android.api.model.BrewerySearchResult;\nimport com.ratebeer.android.api.model.BrewerySearchResultDeserializer;\nimport com.ratebeer.android.api.model.CountryInfo;\nimport com.ratebeer.android.api.model.CountryInfoDeserializer;\nimport com.ratebeer.android.api.model.FeedItem;\nimport com.ratebeer.android.api.model.FeedItemDeserializer;\nimport com.ratebeer.android.api.model.PlaceCheckinResult;\nimport com.ratebeer.android.api.model.PlaceCheckinResultDeserializer;\nimport com.ratebeer.android.api.model.PlaceDetails;\nimport com.ratebeer.android.api.model.PlaceDetailsDeserializer;\nimport com.ratebeer.android.api.model.PlaceNearby;\nimport com.ratebeer.android.api.model.PlaceNearbyDeserializer;\nimport com.ratebeer.android.api.model.PlaceSearchResult;\nimport com.ratebeer.android.api.model.PlaceSearchResultDeserializer;\nimport com.ratebeer.android.api.model.StateInfo;\nimport com.ratebeer.android.api.model.StateInfoDeserializer;\nimport com.ratebeer.android.api.model.StyleInfo;\nimport com.ratebeer.android.api.model.StyleInfoDeserializer;\nimport com.ratebeer.android.api.model.UserInfo;\nimport com.ratebeer.android.api.model.UserInfoDeserializer;\nimport com.ratebeer.android.api.model.UserRateCount;\nimport com.ratebeer.android.api.model.UserRateCountDeserializer;\nimport com.ratebeer.android.api.model.UserRating;\nimport com.ratebeer.android.api.model.UserRatingDeserializer;\nimport com.ratebeer.android.db.RBLog;\nimport com.ratebeer.android.db.Rating;\nimport org.javatuples.Pair;\nimport java.io.IOException;\nimport java.net.CookieManager;\nimport java.net.CookiePolicy;\nimport java.net.HttpCookie;\nimport java.util.concurrent.TimeUnit;\nimport okhttp3.JavaNetCookieJar;\nimport okhttp3.OkHttpClient;\nimport okhttp3.logging.HttpLoggingInterceptor;\nimport retrofit2.Response;\nimport retrofit2.Retrofit;\nimport retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;\nimport retrofit2.converter.gson.GsonConverterFactory;\nimport rx.Observable;\nimport rx.android.schedulers.AndroidSchedulers;\nimport rx.functions.Action1;\nimport rx.schedulers.Schedulers;", "code": "package com.ratebeer.android.api;\n\n\n\n\n\n\npublic final class Api {\n\n\tpublic static final String DOMAIN = \"https://www.ratebeer.com\";\n\n\tprivate static final String ENDPOINT = DOMAIN + \"/json/\";\n\tprivate static final String KEY = \"tTmwRTWT-W7tpBhtL\";\n\tprivate static final String COOKIE_USERID = \"UserID\";\n\tprivate static final String COOKIE_SESSIONID = \"SessionID\";\n\tprivate static final long SESSION_TIMEOUT_FORCED = 30 * 60 * 1000; // 30 minute session max until forced sign in\n\tprivate static final int RATINGS_PER_PAGE = 100;\n\n\tprivate final Routes routes;\n\tprivate final CookieManager cookieManager;\n\tprivate long lastSignIn = 0;\n\n\tprivate Api() {\n\n\t\tHttpLoggingInterceptor logging = new HttpLoggingInterceptor(RBLog::v);\n\t\tif (BuildConfig.DEBUG)\n\t\t\tlogging.setLevel(HttpLoggingInterceptor.Level.BODY);\n\t\tcookieManager = new CookieManager(new PersistentCookieStore(), CookiePolicy.ACCEPT_ORIGINAL_SERVER);\n\t\tOkHttpClient httpclient = new OkHttpClient.Builder()\n\t\t\t\t.connectTimeout(8, TimeUnit.SECONDS)\n\t\t\t\t.writeTimeout(8, TimeUnit.SECONDS)\n\t\t\t\t.readTimeout(12, TimeUnit.SECONDS)\n\t\t\t\t.cookieJar(new JavaNetCookieJar(cookieManager))\n\t\t\t\t.addInterceptor(logging)\n\t\t\t\t.addNetworkInterceptor(new ResponseInterceptor())\n\t\t\t\t.build();\n\t\tGson gson = new GsonBuilder()\n\t\t\t\t.disableHtmlEscaping()\n\t\t\t\t.registerTypeAdapter(FeedItem.class, new FeedItemDeserializer())\n\t\t\t\t.registerTypeAdapter(UserInfo.class, new UserInfoDeserializer())\n\t\t\t\t.registerTypeAdapter(UserRateCount.class, new UserRateCountDeserializer())\n\t\t\t\t.registerTypeAdapter(UserRating.class, new UserRatingDeserializer())", "next_line": "\t\t\t\t.registerTypeAdapter(BeerSearchResult.class, new BeerSearchResultDeserializer())", "gold_snippet_index": 10, "id": 13, "__internal_uuid__": "2bda4931-e310-4388-bf10-ef8b0aa2cc74"}
{"repo_name": "jbossas/remoting-jmx", "file_path": "src/main/java/org/jboss/remotingjmx/protocol/v1/ClientConnection.java", "context": "[{\"identifier\":\"TIMEOUT_KEY\", \"path\":\"src/main/java/org/jboss/remotingjmx/Constants.java\", \"snippet\":\"public static final String TIMEOUT_KEY = \\\"org.jboss.remoting-jmx.timeout\\\";\"}, {\"identifier\":\"ADD_NOTIFICATION_LISTENER\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte ADD_NOTIFICATION_LISTENER = 0x11;\"}, {\"identifier\":\"ATTRIBUTE\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte ATTRIBUTE = 0x01;\"}, {\"identifier\":\"ATTRIBUTE_LIST\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte ATTRIBUTE_LIST = 0x02;\"}, {\"identifier\":\"BOOLEAN\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte BOOLEAN = 0x0A;\"}, {\"identifier\":\"CREATE_MBEAN\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte CREATE_MBEAN = 0x01;\"}, {\"identifier\":\"EXCEPTION\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte EXCEPTION = 0x03;\"}, {\"identifier\":\"FAILURE\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte FAILURE = 0x01;\"}, {\"identifier\":\"GET_ATTRIBUTE\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte GET_ATTRIBUTE = 0x08;\"}, {\"identifier\":\"GET_ATTRIBUTES\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte GET_ATTRIBUTES = 0x09;\"}, {\"identifier\":\"GET_DEFAULT_DOMAIN\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte GET_DEFAULT_DOMAIN = 0x0D;\"}, {\"identifier\":\"GET_DOMAINS\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte GET_DOMAINS = 0x0E;\"}, {\"identifier\":\"GET_MBEAN_COUNT\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte GET_MBEAN_COUNT = 0x07;\"}, {\"identifier\":\"GET_MBEAN_INFO\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte GET_MBEAN_INFO = 0x0F;\"}, {\"identifier\":\"GET_OBJECT_INSTANCE\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte GET_OBJECT_INSTANCE = 0x03;\"}, {\"identifier\":\"INSTANCE_OF\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte INSTANCE_OF = 0x10;\"}, {\"identifier\":\"INTEGER\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte INTEGER = 0x0B;\"}, {\"identifier\":\"INTEGER_ARRAY\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte INTEGER_ARRAY = 0x12;\"}, {\"identifier\":\"INVOKE\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte INVOKE = 0x0C;\"}, {\"identifier\":\"IS_REGISTERED\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte IS_REGISTERED = 0x06;\"}, {\"identifier\":\"MBEAN_INFO\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte MBEAN_INFO = 0x0E;\"}, {\"identifier\":\"NOTIFICATION\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte NOTIFICATION = 0x11;\"}, {\"identifier\":\"NOTIFICATION_FILTER\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte NOTIFICATION_FILTER = 0x10;\"}, {\"identifier\":\"OBJECT\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte OBJECT = 0x04;\"}, {\"identifier\":\"OBJECT_ARRAY\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte OBJECT_ARRAY = 0x05;\"}, {\"identifier\":\"OBJECT_INSTANCE\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte OBJECT_INSTANCE = 0x0C;\"}, {\"identifier\":\"OBJECT_NAME\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte OBJECT_NAME = 0x06;\"}, {\"identifier\":\"QUERY_EXP\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte QUERY_EXP = 0x07;\"}, {\"identifier\":\"QUERY_MBEANS\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte QUERY_MBEANS = 0x04;\"}, {\"identifier\":\"QUERY_NAMES\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte QUERY_NAMES = 0x05;\"}, {\"identifier\":\"REMOVE_NOTIFICATION_LISTENER\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte REMOVE_NOTIFICATION_LISTENER = 0x12;\"}, {\"identifier\":\"RESPONSE_MASK\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte RESPONSE_MASK = (byte) 0x80;\"}, {\"identifier\":\"SEND_NOTIFICATION\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte SEND_NOTIFICATION = 0x13;\"}, {\"identifier\":\"SET_ATTRIBUTE\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte SET_ATTRIBUTE = 0x0A;\"}, {\"identifier\":\"SET_ATTRIBUTES\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte SET_ATTRIBUTES = 0x0B;\"}, {\"identifier\":\"SET_OBJECT_INSTANCE\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte SET_OBJECT_INSTANCE = 0x0D;\"}, {\"identifier\":\"SET_OBJECT_NAME\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte SET_OBJECT_NAME = 0x0F;\"}, {\"identifier\":\"STRING\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte STRING = 0x08;\"}, {\"identifier\":\"STRING_ARRAY\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte STRING_ARRAY = 0x09;\"}, {\"identifier\":\"SUCCESS\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte SUCCESS = 0x00;\"}, {\"identifier\":\"UNREGISTER_MBEAN\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte UNREGISTER_MBEAN = 0x02;\"}, {\"identifier\":\"VOID\", \"path\":\"src/main/java/org/jboss/remotingjmx/protocol/v1/Constants.java\", \"snippet\":\"static final byte VOID = 0x00; // Not actually passed as a parameter but used internally to indicate no parameter expected.\"}, {\"identifier\":\"RemotingMBeanServerConnection\", \"path\":\"src/main/java/org/jboss/remotingjmx/RemotingMBeanServerConnection.java\", \"snippet\":\"public interface RemotingMBeanServerConnection extends MBeanServerConnection {\\n\\n    Connection getConnection();\\n\\n}\"}, {\"identifier\":\"VersionedConnection\", \"path\":\"src/main/java/org/jboss/remotingjmx/VersionedConnection.java\", \"snippet\":\"public interface VersionedConnection extends Closeable {\\n\\n    String getConnectionId();\\n\\n    MBeanServerConnection getMBeanServerConnection(Subject subject);\\n\\n    void close();\\n\\n}\"}]", "import_statement": "import static org.jboss.remotingjmx.Constants.TIMEOUT_KEY;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.ADD_NOTIFICATION_LISTENER;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.ATTRIBUTE;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.ATTRIBUTE_LIST;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.BOOLEAN;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.CREATE_MBEAN;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.EXCEPTION;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.FAILURE;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.GET_ATTRIBUTE;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.GET_ATTRIBUTES;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.GET_DEFAULT_DOMAIN;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.GET_DOMAINS;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.GET_MBEAN_COUNT;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.GET_MBEAN_INFO;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.GET_OBJECT_INSTANCE;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.INSTANCE_OF;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.INTEGER;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.INTEGER_ARRAY;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.INVOKE;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.IS_REGISTERED;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.MBEAN_INFO;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.NOTIFICATION;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.NOTIFICATION_FILTER;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.OBJECT;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.OBJECT_ARRAY;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.OBJECT_INSTANCE;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.OBJECT_NAME;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.QUERY_EXP;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.QUERY_MBEANS;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.QUERY_NAMES;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.REMOVE_NOTIFICATION_LISTENER;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.RESPONSE_MASK;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.SEND_NOTIFICATION;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.SET_ATTRIBUTE;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.SET_ATTRIBUTES;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.SET_OBJECT_INSTANCE;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.SET_OBJECT_NAME;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.STRING;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.STRING_ARRAY;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.SUCCESS;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.UNREGISTER_MBEAN;\nimport static org.jboss.remotingjmx.protocol.v1.Constants.VOID;\nimport java.io.DataInput;\nimport java.io.DataInputStream;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport javax.management.Attribute;\nimport javax.management.AttributeList;\nimport javax.management.AttributeNotFoundException;\nimport javax.management.InstanceAlreadyExistsException;\nimport javax.management.InstanceNotFoundException;\nimport javax.management.IntrospectionException;\nimport javax.management.InvalidAttributeValueException;\nimport javax.management.JMRuntimeException;\nimport javax.management.ListenerNotFoundException;\nimport javax.management.MBeanException;\nimport javax.management.MBeanInfo;\nimport javax.management.MBeanRegistrationException;\nimport javax.management.MBeanServerConnection;\nimport javax.management.NotCompliantMBeanException;\nimport javax.management.Notification;\nimport javax.management.NotificationFilter;\nimport javax.management.NotificationListener;\nimport javax.management.ObjectInstance;\nimport javax.management.ObjectName;\nimport javax.management.QueryExp;\nimport javax.management.ReflectionException;\nimport javax.security.auth.Subject;\nimport org.jboss.logging.Logger;\nimport org.jboss.marshalling.Marshaller;\nimport org.jboss.marshalling.Unmarshaller;\nimport org.jboss.remoting3.Channel;\nimport org.jboss.remoting3.Connection;\nimport org.jboss.remoting3.MessageInputStream;\nimport org.jboss.remotingjmx.RemotingMBeanServerConnection;\nimport org.jboss.remotingjmx.VersionedConnection;\nimport org.xnio.IoFuture;\nimport org.xnio.IoUtils;", "code": "/*\n * JBoss, Home of Professional Open Source.\n * Copyright 2012, Red Hat, Inc., and individual contributors\n * as indicated by the @author tags. See the copyright.txt file in the\n * distribution for a full listing of individual contributors.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.jboss.remotingjmx.protocol.v1;\n\n\n\n\n\n\n/**\n * The VersionOne client connection.\n *\n * @author <a href=\"mailto:darran.lofthouse@jboss.com\">Darran Lofthouse</a>\n */\nclass ClientConnection extends Common implements VersionedConnection {\n\n    private static final String REMOTING_JMX = \"remoting-jmx\";\n    private static final String CLIENT_THREAD = \"client-thread-\";\n    private static final AtomicInteger THREAD_NUMBER = new AtomicInteger(1);\n\n    public static final int DEFAULT_TIMEOUT = 60;\n\n    private static final Logger log = Logger.getLogger(ClientConnection.class);\n\n    private final Channel channel;\n    // Registry of handlers for the incoming messages.\n    private final Map<Byte, Common.MessageHandler> handlerRegistry;\n    private boolean manageExecutor = false;\n    private final Executor executor;\n    private final int timeoutSeconds;\n\n    private String connectionId;\n    private TheConnection mbeanServerConnection;\n    private LocalNotificationManager localNotificationManager;\n\n    private int nextCorrelationId = 1;\n\n    static final ThreadGroup THREAD_GROUP;\n    static {\n        THREAD_GROUP = AccessController.doPrivileged(new PrivilegedAction<ThreadGroup>() {\n            public ThreadGroup run() {\n                ThreadGroup t = Thread.currentThread().getThreadGroup();\n                while (t.getParent() != null) t = t.getParent();\n                return t;\n            }\n        });\n    }\n\n    /**\n     * The in-progress requests awaiting a response.\n     */\n    private final Map<Integer, VersionedIoFuture> requests = new HashMap<Integer, VersionedIoFuture>();\n\n    ClientConnection(final Channel channel, final Map<String, ?> environment) {\n        super(channel);\n        this.channel = channel;\n        handlerRegistry = createHandlerRegistry();\n        Integer seconds = null;\n        if (environment != null && environment.containsKey(TIMEOUT_KEY)) {\n            final Object timeout = environment.get(TIMEOUT_KEY);\n            if (timeout instanceof Number) {\n                seconds = ((Number) timeout).intValue();\n            } else if (timeout instanceof String) {\n                try {\n                    seconds = Integer.parseInt((String) timeout);\n                } catch (NumberFormatException e) {\n                    log.warnf(e, \"Could not parse configured timeout %s\", timeout);\n                }\n            } else {\n                log.warnf(\"Timeout %s configured via environment is not valid \", timeout);\n            }\n        } else {\n            seconds = Integer.getInteger(TIMEOUT_KEY, DEFAULT_TIMEOUT);\n        }\n        if (environment != null && environment.containsKey(Executor.class.getName())) {\n            executor = (Executor) environment.get(Executor.class.getName());\n        } else {\n            executor = Executors.newCachedThreadPool(new ThreadFactory() {\n\n                public Thread newThread(Runnable r) {\n                    return new Thread(THREAD_GROUP, r, REMOTING_JMX + \" \" + CLIENT_THREAD + THREAD_NUMBER.getAndIncrement());\n                }\n            });\n            manageExecutor = true;\n        }\n        timeoutSeconds = seconds == null ? DEFAULT_TIMEOUT : seconds;\n    }\n\n    private Map<Byte, Common.MessageHandler> createHandlerRegistry() {\n        Map<Byte, Common.MessageHandler> registry = new HashMap<Byte, Common.MessageHandler>();", "next_line": "        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));", "gold_snippet_index": 1, "id": 14, "__internal_uuid__": "45b322af-6ef7-47fa-88b6-60152bdc3c54"}
{"repo_name": "gotosleep/ItchDroid", "file_path": "app/src/main/java/io/itch/activities/MyGamesActivity.java", "context": "[{\"identifier\":\"Extras\", \"path\":\"app/src/main/java/io/itch/Extras.java\", \"snippet\":\"public class Extras {\\n\\n    public static final String EXTRA_GAME = \\\"io.itch.extras.game\\\";\\n\\n}\"}, {\"identifier\":\"ItchApi\", \"path\":\"app/src/main/java/io/itch/api/ItchApi.java\", \"snippet\":\"public interface ItchApi {\\n\\n    @GET(\\\"/my-games\\\")\\n    public void listMyGames(Callback<GamesResponse> callback);\\n\\n    // /api/1/login params: username, password, source (must be \\\"android\\\")\\n    @POST(\\\"/login?source=android\\\")\\n    public KeyResponse login(@Query(\\\"username\\\") String username, @Query(\\\"password\\\") String password);\\n\\n    @GET(\\\"/my-games/graphs\\\")\\n    public void listGraphs(@Query(\\\"num_days\\\") Integer days, Callback<GraphsResponse> callback);\\n}\"}, {\"identifier\":\"ItchApiClient\", \"path\":\"app/src/main/java/io/itch/api/ItchApiClient.java\", \"snippet\":\"public class ItchApiClient {\\n\\n    private static final Object INSTANCE_LOCK = new Object();\\n    private static ItchApi SHARED_INSTANCE;\\n    private static String token;\\n\\n    public static ItchApi getClient() {\\n        if (SHARED_INSTANCE == null) {\\n            synchronized (INSTANCE_LOCK) {\\n                if (SHARED_INSTANCE == null) {\\n                    Gson gson = new GsonBuilder()\\n                            .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\\n                            .setDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\")\\n                            .registerTypeAdapter(GraphsResponse.class, new GraphsDeserializer())\\n                            .create();\\n                    String endPoint = \\\"https://itch.io/api/1\\\";\\n                    if (!TextUtils.isEmpty(token)) {\\n                        endPoint = endPoint + \\\"/\\\" + token;\\n                    }\\n                    RestAdapter adapter = new RestAdapter.Builder()\\n                            .setEndpoint(endPoint)\\n                            .setConverter(new GsonConverter(gson))\\n                            .build();\\n                    SHARED_INSTANCE = adapter.create(ItchApi.class);\\n                }\\n            }\\n        }\\n        return SHARED_INSTANCE;\\n    }\\n\\n    public static void setToken(String token) {\\n        ItchApiClient.token = token;\\n        synchronized (INSTANCE_LOCK) {\\n            SHARED_INSTANCE = null;\\n        }\\n    }\\n\\n    // This is needed because the graphs API returns inconsistent types.\\n    // When there is data, it returns a json array. When there is no data, it returns an empty object\\n    private static class GraphsDeserializer implements JsonDeserializer<GraphsResponse> {\\n\\n        @Override\\n        public GraphsResponse deserialize(JsonElement json, Type typeOfJson, JsonDeserializationContext context)\\n                throws JsonParseException {\\n            GraphsResponse result = new GraphsResponse();\\n            if (json.isJsonObject()) {\\n                JsonObject object = json.getAsJsonObject();\\n                for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\\n                    try {\\n                        Field field = GraphsResponse.class.getDeclaredField(entry.getKey());\\n                        field.setAccessible(true);\\n                        Object value;\\n                        if (entry.getValue().isJsonArray()) {\\n                            value = context.deserialize(entry.getValue(), field.getGenericType());\\n                        } else {\\n                            value = null;\\n                        }\\n                        field.set(result, value);\\n                    } catch (Exception e) {\\n                        Log.e(\\\"Itch\\\", \\\"Invalid field: \\\" + e);\\n                    }\\n                }\\n            }\\n            return result;\\n        }\\n    }\\n}\"}, {\"identifier\":\"TumblrApi\", \"path\":\"app/src/main/java/io/itch/api/TumblrApi.java\", \"snippet\":\"public interface TumblrApi {\\n\\n    @GET(\\\"/posts\\\")\\n    public void listPosts(@Query(\\\"limit\\\") Integer limit, Callback<PostsResponse> callback);\\n\\n}\"}, {\"identifier\":\"TumblrApiClient\", \"path\":\"app/src/main/java/io/itch/api/TumblrApiClient.java\", \"snippet\":\"public class TumblrApiClient {\\n\\n    private static final String KEY = \\\"fWnvNwLMtOaJxKhMJuJPUXa4n0SyNled0byq9dSwRN5hoQJPED\\\";\\n    private static final Object INSTANCE_LOCK = new Object();\\n    private static TumblrApi SHARED_INSTANCE;\\n\\n    // http://api.tumblr.com/v2/blog/citriccomics.tumblr.com/posts/text?api_key={key}\\n    public static TumblrApi getClient() {\\n        if (SHARED_INSTANCE == null) {\\n            synchronized (INSTANCE_LOCK) {\\n                if (SHARED_INSTANCE == null) {\\n                    Gson gson = new GsonBuilder()\\n                            .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)\\n                            .setDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\")\\n                            .create();\\n                    String endPoint = \\\"http://api.tumblr.com/v2/blog/itchio.tumblr.com/\\\";\\n                    RequestInterceptor requestInterceptor = new RequestInterceptor() {\\n                        @Override\\n                        public void intercept(RequestFacade request) {\\n                            request.addQueryParam(\\\"api_key\\\", KEY);\\n                        }\\n                    };\\n                    RestAdapter adapter = new RestAdapter.Builder()\\n                            .setEndpoint(endPoint)\\n                            .setConverter(new GsonConverter(gson))\\n                            .setRequestInterceptor(requestInterceptor)\\n                            .build();\\n                    SHARED_INSTANCE = adapter.create(TumblrApi.class);\\n                }\\n            }\\n        }\\n        return SHARED_INSTANCE;\\n    }\\n}\"}, {\"identifier\":\"GamesResponse\", \"path\":\"app/src/main/java/io/itch/api/responses/GamesResponse.java\", \"snippet\":\"public class GamesResponse {\\n\\n    private List<Game> games;\\n\\n    private GamesResponse(List<Game> games) {\\n        super();\\n        this.games = games;\\n    }\\n\\n    public List<Game> getGames() {\\n        return games;\\n    }\\n\\n    public void setGames(List<Game> games) {\\n        this.games = games;\\n    }\\n    \\n    \\n\\n}\"}, {\"identifier\":\"GraphsResponse\", \"path\":\"app/src/main/java/io/itch/api/responses/GraphsResponse.java\", \"snippet\":\"public class GraphsResponse {\\n\\n    private List<GraphPoint> purchases;\\n    private List<GraphPoint> views;\\n    private List<GraphPoint> downloads;\\n    private Integer max;\\n\\n    public List<GraphPoint> getPurchases() {\\n        return purchases;\\n    }\\n\\n    public void setPurchases(List<GraphPoint> purchases) {\\n        this.purchases = purchases;\\n    }\\n\\n    public List<GraphPoint> getViews() {\\n        return views;\\n    }\\n\\n    public void setViews(List<GraphPoint> views) {\\n        this.views = views;\\n    }\\n\\n    public List<GraphPoint> getDownloads() {\\n        return downloads;\\n    }\\n\\n    public void setDownloads(List<GraphPoint> downloads) {\\n        this.downloads = downloads;\\n    }\\n\\n    public boolean hasData() {\\n        return this.purchases != null || this.views != null || this.downloads != null;\\n    }\\n\\n    public int getMax() {\\n        if (this.max == null && this.hasData()) {\\n            this.max = 0;\\n            this.max = Math.max(this.max, getMax(this.views));\\n            this.max = Math.max(this.max, getMax(this.purchases));\\n            this.max = Math.max(this.max, getMax(this.downloads));\\n        }\\n        return this.max;\\n    }\\n\\n    private int getMax(List<GraphPoint> points) {\\n        int max = 0;\\n        if (points != null) {\\n            for (GraphPoint p : points) {\\n                if (p.getCount() > max) {\\n                    max = p.getCount();\\n                }\\n            }\\n        }\\n        return max;\\n    }\\n\\n}\"}, {\"identifier\":\"PostsResponse\", \"path\":\"app/src/main/java/io/itch/api/responses/PostsResponse.java\", \"snippet\":\"public class PostsResponse extends TumblrResponse {\\n\\n    private Response response;\\n\\n    public Response getResponse() {\\n        return response;\\n    }\\n\\n    public void setResponse(Response response) {\\n        this.response = response;\\n    }\\n\\n    public static final class Response {\\n        private List<Post> posts;\\n\\n        public List<Post> getPosts() {\\n            return posts;\\n        }\\n\\n        public void setPosts(List<Post> posts) {\\n            this.posts = posts;\\n        }\\n\\n    }\\n\\n}\"}, {\"identifier\":\"SessionHelper\", \"path\":\"app/src/main/java/io/itch/authentication/SessionHelper.java\", \"snippet\":\"public class SessionHelper {\\n\\n    public static final String ACCOUNT_TYPE = \\\"io.itch.account_type.user\\\";\\n    public static final String AUTH_TOKEN_TYPE_FULL = \\\"io.itch.session.token_type.full\\\";\\n\\n    private static SessionHelper SHARED_INSTANCE;\\n    private static final Object LOCK = new Object();\\n\\n    private Boolean loggedIn;\\n    private String token;\\n\\n    public static SessionHelper getInstance() {\\n        if (SHARED_INSTANCE == null) {\\n            synchronized (LOCK) {\\n                if (SHARED_INSTANCE == null) {\\n                    SHARED_INSTANCE = new SessionHelper();\\n                }\\n            }\\n        }\\n        return SHARED_INSTANCE;\\n    }\\n\\n    private SessionHelper() {\\n        this.loggedIn = false;\\n    }\\n\\n    public Boolean isLoggedIn() {\\n        synchronized (LOCK) {\\n            return loggedIn;\\n        }\\n    }\\n\\n    private void setLoggedIn(Boolean loggedIn) {\\n        synchronized (LOCK) {\\n            this.loggedIn = loggedIn;\\n        }\\n    }\\n\\n    public String getToken() {\\n        synchronized (LOCK) {\\n            return token;\\n        }\\n    }\\n\\n    private void setToken(String token) {\\n        synchronized (LOCK) {\\n            this.token = token;\\n        }\\n        ItchApiClient.setToken(token);\\n    }\\n\\n    public void login(final Activity context, final SessionCallback callback) {\\n        AccountManager am = AccountManager.get(context);\\n        am.addAccount(ACCOUNT_TYPE, AUTH_TOKEN_TYPE_FULL, null, null, context, new AccountManagerCallback<Bundle>() {\\n\\n            @Override\\n            public void run(AccountManagerFuture<Bundle> future) {\\n                boolean success = false;\\n                try {\\n                    Object t = future.getResult().get(AccountManager.KEY_ACCOUNT_NAME);\\n                    if (t instanceof String) {\\n                        String name = (String) t;\\n                        if (!TextUtils.isEmpty(name)) {\\n                            success = true;\\n                        }\\n                    }\\n                } catch (Exception e) {\\n                    Log.e(\\\"Itch\\\", \\\"Login failure\\\", e);\\n                } finally {\\n                    if (success) {\\n                        restoreSession(context, callback);\\n                    } else if (callback != null) {\\n                        callback.onFailed();\\n                    }\\n                }\\n            }\\n        }, null);\\n    }\\n\\n    public void logout(final Activity context, final SessionCallback callback) {\\n        AccountManager am = AccountManager.get(context);\\n        Account[] accounts = am.getAccountsByType(ACCOUNT_TYPE);\\n        if (accounts != null && accounts.length > 0) {\\n            for (Account account : accounts) {\\n                am.removeAccount(account, new AccountManagerCallback<Boolean>() {\\n\\n                    @Override\\n                    public void run(AccountManagerFuture<Boolean> future) {\\n                        if (callback != null) {\\n                            boolean success = false;\\n                            try {\\n                                success = future.getResult();\\n                            } catch (Exception e) {\\n                                success = false;\\n                                Log.e(\\\"Itch\\\", \\\"Failed to log out\\\", e);\\n                            } finally {\\n                                if (success) {\\n                                    setLoggedIn(false);\\n                                    setToken(null);\\n                                    callback.onSuccess();\\n                                } else {\\n                                    callback.onFailed();\\n                                }\\n                            }\\n                        }\\n                    }\\n                }, null);\\n            }\\n        }\\n    }\\n\\n    public void restoreSession(final Activity context, final SessionCallback callback) {\\n        AccountManager am = AccountManager.get(context);\\n        Account[] accounts = am.getAccountsByType(ACCOUNT_TYPE);\\n        if (accounts != null && accounts.length > 0) {\\n            Account first = accounts[0];\\n            am.getAuthToken(first, AUTH_TOKEN_TYPE_FULL, null, context, new AccountManagerCallback<Bundle>() {\\n\\n                @Override\\n                public void run(AccountManagerFuture<Bundle> future) {\\n                    boolean success = false;\\n                    try {\\n                        Object t = future.getResult().get(AccountManager.KEY_AUTHTOKEN);\\n                        if (t instanceof String) {\\n                            String token = (String) t;\\n                            if (!TextUtils.isEmpty(token)) {\\n                                setToken(token);\\n                                success = true;\\n                            }\\n                        }\\n                    } catch (Exception e) {\\n                        Log.e(\\\"Itch\\\", \\\"Session failure\\\", e);\\n                    } finally {\\n                        setLoggedIn(success);\\n                        if (callback != null) {\\n                            if (success) {\\n                                callback.onSuccess();\\n                            } else {\\n                                callback.onFailed();\\n                            }\\n                        }\\n                    }\\n                }\\n            }, null);\\n        }\\n    }\\n\\n    public static abstract class SessionCallback {\\n        public void onSuccess() {\\n\\n        }\\n\\n        public void onFailed() {\\n\\n        }\\n    }\\n}\"}, {\"identifier\":\"SessionCallback\", \"path\":\"app/src/main/java/io/itch/authentication/SessionHelper.java\", \"snippet\":\"public static abstract class SessionCallback {\\n    public void onSuccess() {\\n\\n    }\\n\\n    public void onFailed() {\\n\\n    }\\n}\"}, {\"identifier\":\"GameAdapter\", \"path\":\"app/src/main/java/io/itch/lists/GameAdapter.java\", \"snippet\":\"public class GameAdapter extends ArrayAdapter<Game> {\\n\\n    public GameAdapter(Context context, int textViewResourceId) {\\n        super(context, textViewResourceId);\\n    }\\n\\n    @Override\\n    public View getView(int position, View convertView, ViewGroup parent) {\\n        Game game = this.getItem(position);\\n        if (game == null) {\\n            return null;\\n        }\\n\\n        View result = null;\\n        if (convertView != null) {\\n            result = convertView.findViewById(R.id.listItemGame);\\n            LinearLayout fields = (LinearLayout) result.findViewById(R.id.viewGroupFields);\\n            if (fields != null) {\\n                // when recycling a view, need to make sure to remove all fields because they\\n                // are created dynamically\\n                fields.removeAllViews();\\n            }\\n        }\\n\\n        if (result == null) {\\n            result = LayoutInflater.from(this.getContext()).inflate(R.layout.list_item_game, null);\\n        }\\n\\n        if (result != null) {\\n            GameViewHelper.populateBasics(getContext(), result, game);\\n            GameViewHelper.showPublished(getContext(), result, game);\\n            GameViewHelper.showEarnings(getContext(), result, game);\\n        }\\n        return result;\\n    }\\n}\"}, {\"identifier\":\"Game\", \"path\":\"app/src/main/java/io/itch/models/Game.java\", \"snippet\":\"public class Game implements Parcelable {\\n\\n    private static final int FIELD_PUBLISHED_AT = 1 << 0;\\n\\n    private boolean pOsx;\\n    private boolean pAndroid;\\n    private boolean pWindows;\\n    private boolean pLinux;\\n    private Float minPrice;\\n    private Long id;\\n    private boolean published;\\n    private Long viewsCount;\\n    private Date createdAt;\\n    private Date publishedAt;\\n    private Long downloadsCount;\\n    private String title;\\n    private String url;\\n    private Long purchasesCount;\\n    private String shortText;\\n    private String type;\\n    private String coverUrl;\\n    private List<Earning> earnings;\\n\\n    public boolean getPOsx() {\\n        return pOsx;\\n    }\\n\\n    public void setPOsx(boolean pOSX) {\\n        this.pOsx = pOSX;\\n    }\\n\\n    public boolean getPAndroid() {\\n        return pAndroid;\\n    }\\n\\n    public void setPAndroid(boolean pAndroid) {\\n        this.pAndroid = pAndroid;\\n    }\\n\\n    public boolean getPWindows() {\\n        return pWindows;\\n    }\\n\\n    public void setPWindows(boolean pWindows) {\\n        this.pWindows = pWindows;\\n    }\\n\\n    public boolean getPLinux() {\\n        return pLinux;\\n    }\\n\\n    public void setPLinux(boolean pLinux) {\\n        this.pLinux = pLinux;\\n    }\\n\\n    public Float getMinPrice() {\\n        return minPrice;\\n    }\\n\\n    public void setMinPrice(Float minPrice) {\\n        this.minPrice = minPrice;\\n    }\\n\\n    public Long getId() {\\n        return id;\\n    }\\n\\n    public void setId(Long id) {\\n        this.id = id;\\n    }\\n\\n    public boolean getPublished() {\\n        return published;\\n    }\\n\\n    public void setPublished(boolean published) {\\n        this.published = published;\\n    }\\n\\n    public Long getViewsCount() {\\n        return viewsCount;\\n    }\\n\\n    public void setViewsCount(Long viewsCount) {\\n        this.viewsCount = viewsCount;\\n    }\\n\\n    public Date getCreatedAt() {\\n        return createdAt;\\n    }\\n\\n    public void setCreatedAt(Date createdAt) {\\n        this.createdAt = createdAt;\\n    }\\n\\n    public Date getPublishedAt() {\\n        return publishedAt;\\n    }\\n\\n    public void setPublishedAt(Date publishedAt) {\\n        this.publishedAt = publishedAt;\\n    }\\n\\n    public Long getDownloadsCount() {\\n        return downloadsCount;\\n    }\\n\\n    public void setDownloadsCount(Long downloadCount) {\\n        this.downloadsCount = downloadCount;\\n    }\\n\\n    public String getTitle() {\\n        return title;\\n    }\\n\\n    public void setTitle(String title) {\\n        this.title = title;\\n    }\\n\\n    public String getUrl() {\\n        return url;\\n    }\\n\\n    public void setUrl(String url) {\\n        this.url = url;\\n    }\\n\\n    public Long getPurchasesCount() {\\n        return purchasesCount;\\n    }\\n\\n    public void setPurchasesCount(Long purchasesCount) {\\n        this.purchasesCount = purchasesCount;\\n    }\\n\\n    public String getShortText() {\\n        return shortText;\\n    }\\n\\n    public void setShortText(String shortText) {\\n        this.shortText = shortText;\\n    }\\n\\n    public String getType() {\\n        return type;\\n    }\\n\\n    public void setType(String type) {\\n        this.type = type;\\n    }\\n\\n    public String getCoverUrl() {\\n        return coverUrl;\\n    }\\n\\n    public void setCoverUrl(String coverUrl) {\\n        this.coverUrl = coverUrl;\\n    }\\n\\n    public List<Earning> getEarnings() {\\n        return earnings;\\n    }\\n\\n    public void setEarnings(List<Earning> earnings) {\\n        this.earnings = earnings;\\n    }\\n\\n    public Earning getDefaultEarnings() {\\n        Earning result = null;\\n        if (this.earnings != null && this.earnings.size() > 0) {\\n            for (Earning e : this.earnings) {\\n                if (result == null || e.getAmount() > result.getAmount()) {\\n                    result = e;\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n\\n    @Override\\n    public int describeContents() {\\n        int result = 0;\\n        if (this.getPublishedAt() != null) {\\n            result |= FIELD_PUBLISHED_AT;\\n        }\\n        return result;\\n    }\\n\\n    @Override\\n    public void writeToParcel(Parcel parcel, int flags) {\\n        int contents = describeContents();\\n        parcel.writeInt(contents);\\n        parcel.writeValue(getPOsx());\\n        parcel.writeValue(getPWindows());\\n        parcel.writeValue(getPLinux());\\n        parcel.writeValue(getPAndroid());\\n        parcel.writeFloat(getMinPrice());\\n        parcel.writeLong(getId());\\n        parcel.writeValue(getPublished());\\n        parcel.writeLong(getViewsCount());\\n        parcel.writeLong(getCreatedAt().getTime());\\n        if ((contents & FIELD_PUBLISHED_AT) == FIELD_PUBLISHED_AT) {\\n            parcel.writeLong(getPublishedAt().getTime());\\n        }\\n        parcel.writeLong(getDownloadsCount());\\n        parcel.writeString(getTitle());\\n        parcel.writeString(getUrl());\\n        parcel.writeLong(getPurchasesCount());\\n        parcel.writeString(getShortText());\\n        parcel.writeString(getType());\\n        parcel.writeString(getCoverUrl());\\n        parcel.writeTypedList(getEarnings());\\n    }\\n\\n    public static final Parcelable.Creator<Game> CREATOR = new Parcelable.Creator<Game>() {\\n\\n        @Override\\n        public Game createFromParcel(Parcel source) {\\n            Game result = new Game();\\n            int contents = source.readInt();\\n            result.setPOsx((Boolean) source.readValue(null));\\n            result.setPWindows((Boolean) source.readValue(null));\\n            result.setPLinux((Boolean) source.readValue(null));\\n            result.setPAndroid((Boolean) source.readValue(null));\\n            result.setMinPrice(source.readFloat());\\n            result.setId(source.readLong());\\n            result.setPublished((Boolean) source.readValue(null));\\n            result.setViewsCount(source.readLong());\\n            result.setCreatedAt(dateFrom(source.readLong()));\\n            if ((contents & FIELD_PUBLISHED_AT) == FIELD_PUBLISHED_AT) {\\n                result.setPublishedAt(dateFrom(source.readLong()));\\n            }\\n            result.setDownloadsCount(source.readLong());\\n            result.setTitle(source.readString());\\n            result.setUrl(source.readString());\\n            result.setPurchasesCount(source.readLong());\\n            result.setShortText(source.readString());\\n            result.setType(source.readString());\\n            result.setCoverUrl(source.readString());\\n\\n            List<Earning> earnings = new ArrayList<Earning>();\\n            source.readTypedList(earnings, Earning.CREATOR);\\n            result.setEarnings(earnings);\\n\\n            return result;\\n        }\\n\\n        private Date dateFrom(Long time) {\\n            Date result = new Date();\\n            result.setTime(time);\\n            return result;\\n        }\\n\\n        @Override\\n        public Game[] newArray(int size) {\\n            return new Game[size];\\n        }\\n    };\\n}\"}, {\"identifier\":\"Post\", \"path\":\"app/src/main/java/io/itch/models/tumblr/Post.java\", \"snippet\":\"public class Post {\\n\\n    public static enum Type {\\n        UNKNOWN,\\n        TEXT,\\n        LINK,\\n        VIDEO,\\n        AUDIO\\n    }\\n\\n    private String title;\\n    private String body;\\n    private Long id;\\n    private String type;\\n    private String url;\\n    private String description;\\n    private String caption;\\n    private Type postType;\\n\\n    public String getTitle() {\\n        return title;\\n    }\\n\\n    public void setTitle(String title) {\\n        this.title = title;\\n    }\\n\\n    public String getBody() {\\n        return body;\\n    }\\n\\n    public void setBody(String body) {\\n        this.body = body;\\n    }\\n\\n    public Long getId() {\\n        return id;\\n    }\\n\\n    public void setId(Long id) {\\n        this.id = id;\\n    }\\n\\n    public String getType() {\\n        return type;\\n    }\\n\\n    public void setType(String type) {\\n        this.type = type;\\n    }\\n\\n    public String getUrl() {\\n        return url;\\n    }\\n\\n    public void setUrl(String url) {\\n        this.url = url;\\n    }\\n\\n    public String getDescription() {\\n        return description;\\n    }\\n\\n    public void setDescription(String description) {\\n        this.description = description;\\n    }\\n\\n    public String getCaption() {\\n        return caption;\\n    }\\n\\n    public void setCaption(String caption) {\\n        this.caption = caption;\\n    }\\n\\n    @SuppressLint(\\\"DefaultLocale\\\")\\n    public Type getPostType() {\\n        if (this.postType == null) {\\n            try {\\n                this.postType = Type.valueOf(this.getType().toUpperCase());\\n            } catch (Exception e) {\\n                this.postType = Type.UNKNOWN;\\n            }\\n        }\\n        return this.postType;\\n    }\\n}\"}, {\"identifier\":\"GraphHelper\", \"path\":\"app/src/main/java/io/itch/views/GraphHelper.java\", \"snippet\":\"public class GraphHelper {\\n\\n    public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(\\\"yyyy-MM-dd\\\", Locale.US);\\n    public static final SimpleDateFormat LABEL_DATE_FORMAT = new SimpleDateFormat(\\\"M/dd\\\", Locale.US);\\n    public static final NumberFormat COUNT_FORMAT = NumberFormat.getInstance(Locale.getDefault());\\n\\n    public static String[] getLabels(int days) {\\n        String result[] = new String[days];\\n        Calendar day = startDate(days);\\n        for (int i = 0; i < days; ++i) {\\n            result[i] = LABEL_DATE_FORMAT.format(day.getTime());\\n            day.add(Calendar.DATE, 1);\\n        }\\n        return result;\\n    }\\n\\n    public static CustomLabelFormatter getLabelFormatter(int days) {\\n        final String[] labels = getLabels(days);\\n        return new CustomLabelFormatter() {\\n            @Override\\n            public String formatLabel(double value, boolean isValueX) {\\n                if (isValueX && value < labels.length) {\\n                    return labels[(int) value];\\n                } else if (!isValueX) {\\n                    return COUNT_FORMAT.format(value);\\n                }\\n                return null; // let graphview generate Y-axis label for us\\n            }\\n        };\\n    }\\n\\n    public static Calendar startDate(int days) {\\n        Calendar result = Calendar.getInstance();\\n        result.add(Calendar.DATE, -(days - 1));\\n        return result;\\n    }\\n\\n    public static GraphViewSeries generateSeries(Context context, String label, List<GraphPoint> points, int days,\\n            int color) {\\n        GraphViewSeriesStyle style = new GraphViewSeriesStyle(color, ViewHelper.dpToPixels(context, 2));\\n        GraphData data = new GraphData(label, style, days, points);\\n        return data.getSeries();\\n    }\\n\\n    public static void configureYAxis(GraphView graphView, int maxValue, int numSteps) {\\n        // why the - 1? we need to account for 0 being a step\\n        int step = (int) Math.ceil(maxValue / (float) (numSteps - 1));\\n        if (step <= 0) {\\n            step = 1;\\n        }\\n        graphView.getGraphViewStyle().setNumVerticalLabels(numSteps);\\n        graphView.setManualYAxisBounds(step * (numSteps - 1), 0);\\n    }\\n}\"}, {\"identifier\":\"PostViewHelper\", \"path\":\"app/src/main/java/io/itch/views/PostViewHelper.java\", \"snippet\":\"public class PostViewHelper {\\n\\n    private static final String PREF_LAST_VIEWED_POST = \\\"io.itch.news.latest.id\\\";\\n\\n    public static void populateView(Context context, View result, Post post) {\\n        String titleText = null;\\n        String bodyText = null;\\n\\n        switch (post.getPostType()) {\\n        case TEXT:\\n            titleText = post.getTitle();\\n            bodyText = post.getBody();\\n            break;\\n        case LINK:\\n            titleText = post.getTitle();\\n            bodyText = post.getDescription();\\n            break;\\n        case AUDIO:\\n            titleText = post.getCaption();\\n            break;\\n        case VIDEO:\\n            titleText = post.getCaption();\\n            break;\\n        default:\\n            break;\\n        }\\n\\n        TextView titleView = (TextView) result.findViewById(R.id.textViewNewsTitle);\\n        setText(titleView, titleText, false);\\n\\n        TextView bodyView = (TextView) result.findViewById(R.id.textViewNewsBody);\\n        setText(bodyView, bodyText, false);\\n    }\\n\\n    private static void setText(TextView view, String text, boolean keepHtml) {\\n        CharSequence displayText = null;\\n        if (text != null) {\\n            displayText = keepHtml ? Html.fromHtml(text) : Html.fromHtml(text).toString();\\n        }\\n        if (view != null) {\\n            if (displayText != null && !\\\"\\\".equals(displayText)) {\\n                view.setVisibility(View.VISIBLE);\\n                view.setText(displayText);\\n            } else {\\n                view.setVisibility(View.GONE);\\n            }\\n        }\\n    }\\n\\n    public static boolean hasBeenSeen(Context context, Post post) {\\n        SharedPreferences prefs = context.getSharedPreferences(Constants.PREF_STORE, Context.MODE_PRIVATE);\\n        long last = prefs.getLong(PREF_LAST_VIEWED_POST, 0);\\n        return (post.getId() == last);\\n    }\\n\\n    public static void setHasBeenSeen(Context context, Post post) {\\n        Editor edit = context.getSharedPreferences(Constants.PREF_STORE, Context.MODE_PRIVATE).edit();\\n        edit.putLong(PREF_LAST_VIEWED_POST, post.getId());\\n        edit.commit();\\n    }\\n}\"}]", "import_statement": "import io.itch.Extras;\nimport io.itch.R;\nimport io.itch.R.id;\nimport io.itch.api.ItchApi;\nimport io.itch.api.ItchApiClient;\nimport io.itch.api.TumblrApi;\nimport io.itch.api.TumblrApiClient;\nimport io.itch.api.responses.GamesResponse;\nimport io.itch.api.responses.GraphsResponse;\nimport io.itch.api.responses.PostsResponse;\nimport io.itch.authentication.SessionHelper;\nimport io.itch.authentication.SessionHelper.SessionCallback;\nimport io.itch.lists.GameAdapter;\nimport io.itch.models.Game;\nimport io.itch.models.tumblr.Post;\nimport io.itch.views.GraphHelper;\nimport io.itch.views.PostViewHelper;\nimport retrofit.Callback;\nimport retrofit.RetrofitError;\nimport retrofit.client.Response;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.AdapterView.OnItemClickListener;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListView;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport com.jjoe64.graphview.GraphView;\nimport com.jjoe64.graphview.LineGraphView;", "code": "package io.itch.activities;\n\n\n\npublic class MyGamesActivity extends BaseActivity {\n\n    private ListView gamesList;\n    private ArrayAdapter<Game> gamesAdapter;\n    private View header;\n    private ProgressBar progress;\n    private TextView textViewMessage;\n    private Post latestNews;\n    private Boolean preventCollapse;\n    private GraphView graphView;\n    private ViewGroup graphContainer;\n    private static final int GRAPH_DAYS = 5;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_my_games);\n        this.progress = (ProgressBar) findViewById(R.id.progressBarLoading);\n        this.textViewMessage = (TextView) findViewById(id.textViewMessage);\n        this.gamesList = (ListView) findViewById(id.listViewGames);\n        this.gamesAdapter = new GameAdapter(this, R.layout.list_item_game);\n        loadNewsView(null);\n        loadGraphView();\n        this.gamesList.setAdapter(this.gamesAdapter);\n        this.gamesList.setEmptyView(getEmptyView());\n        this.gamesList.setOnItemClickListener(new OnItemClickListener() {\n\n            @Override\n            public void onItemClick(AdapterView<?> list, View item, int position, long id) {\n                Integer headerCount = gamesList.getHeaderViewsCount();\n                if (headerCount <= 0 || position >= headerCount) {\n                    position -= headerCount;\n                    Game game = gamesAdapter.getItem(position);\n                    if (game != null) {\n                        Intent i = new Intent(MyGamesActivity.this, GameActivity.class);\n                        i.putExtra(Extras.EXTRA_GAME, game);\n                        startActivity(i);\n                    }\n                }\n            }\n        });\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        this.updateNews();\n        this.updateGraphs();\n        this.updateGames();\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        Post post = this.getLatestNews();\n        if (post != null && !PostViewHelper.hasBeenSeen(this, post)) {\n            this.setPreventCollapse(true);\n            PostViewHelper.setHasBeenSeen(this, post);\n        }\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.my_games, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n        case R.id.action_login:\n            // SessionHelper.getInstance().login(this);\n            break;\n        case R.id.action_logout:\n            SessionHelper.getInstance().logout(this, new SessionCallback() {\n\n                @Override\n                public void onSuccess() {\n                    super.onSuccess();\n                    startActivity(new Intent(MyGamesActivity.this, ItchActivity.class));\n                    finish();\n                }\n\n            });\n            break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        if (SessionHelper.getInstance().isLoggedIn()) {\n            menu.findItem(R.id.action_login).setVisible(false);\n            menu.findItem(R.id.action_logout).setVisible(true);\n        } else {\n            menu.findItem(R.id.action_login).setVisible(true);\n            menu.findItem(R.id.action_logout).setVisible(false);\n        }\n        return super.onPrepareOptionsMenu(menu);\n    }\n\n    @Override\n    public int getEmptyViewMessageId() {\n        return R.string.my_games_activity_empty;\n    }\n\n    public void onNewsClick(View v) {\n        Intent i = new Intent(MyGamesActivity.this, NewsActivity.class);\n        startActivity(i);\n        setPreventCollapse(false);\n    }\n\n    private void updateGames() {\n        if (gamesAdapter.getCount() == 0) {\n            this.progress.setVisibility(View.VISIBLE);\n        }\n        ItchApi api = ItchApiClient.getClient();", "next_line": "        api.listMyGames(new Callback<GamesResponse>() {", "gold_snippet_index": 5, "id": 15, "__internal_uuid__": "633c2f14-3ac7-4463-9669-72e01a3039c0"}
{"repo_name": "MaxSmile/EasyVPN-Free", "file_path": "Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/activity/BaseActivity.java", "context": "[{\"identifier\":\"App\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/App.java\", \"snippet\":\"public class App extends Application {\\n\\n    private static App instance;\\n    private Tracker mTracker;\\n    private static final String PROPERTY_ID = \\\"UA-89622148-1\\\";\\n    private static final String PROPERTY_ID_PRO = \\\"UA-89641705-1\\\";\\n\\n    @Override\\n    public void onCreate() {\\n        super.onCreate();\\n        if (!BuildConfig.DEBUG)\\n            Fabric.with(this, new Crashlytics());\\n\\n        instance = this;\\n    }\\n\\n    synchronized public Tracker getDefaultTracker() {\\n        if (mTracker == null) {\\n            GoogleAnalytics analytics = GoogleAnalytics.getInstance(this);\\n            mTracker = analytics.newTracker(BuildConfig.FLAVOR == \\\"pro\\\" ? PROPERTY_ID_PRO : PROPERTY_ID);\\n        }\\n        return mTracker;\\n    }\\n\\n    @Override\\n    protected void attachBaseContext(Context base) {\\n        super.attachBaseContext(base);\\n    }\\n\\n    public static String getResourceString(int resId) {\\n        return instance.getString(resId);\\n    }\\n\\n    public static App getInstance() {\\n        return instance;\\n    }\\n\\n}\"}, {\"identifier\":\"DBHelper\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/database/DBHelper.java\", \"snippet\":\"public class DBHelper  extends SQLiteOpenHelper {\\n\\n    private static final int DATABASE_VERSION = 6;\\n    private static final String DATABASE_NAME = \\\"Records.db\\\";\\n    private static final String TABLE_SERVERS = \\\"servers\\\";\\n    private static final String TABLE_BOOKMARK_SERVERS = \\\"bookmark_servers\\\";\\n    private static final String TAG = \\\"DBHelper\\\";\\n\\n    private static final String KEY_ID = \\\"_id\\\";\\n    private static final String KEY_HOST_NAME = \\\"hostName\\\";\\n    private static final String KEY_IP = \\\"ip\\\";\\n    private static final String KEY_SCORE = \\\"score\\\";\\n    private static final String KEY_PING = \\\"ping\\\";\\n    private static final String KEY_SPEED = \\\"speed\\\";\\n    private static final String KEY_COUNTRY_LONG = \\\"countryLong\\\";\\n    private static final String KEY_COUNTRY_SHORT = \\\"countryShort\\\";\\n    private static final String KEY_NUM_VPN_SESSIONS = \\\"numVpnSessions\\\";\\n    private static final String KEY_UPTIME = \\\"uptime\\\";\\n    private static final String KEY_TOTAL_USERS = \\\"totalUsers\\\";\\n    private static final String KEY_TOTAL_TRAFFIC = \\\"totalTraffic\\\";\\n    private static final String KEY_LOG_TYPE = \\\"logType\\\";\\n    private static final String KEY_OPERATOR = \\\"operator\\\";\\n    private static final String KEY_MESSAGE = \\\"message\\\";\\n    private static final String KEY_CONFIG_DATA = \\\"configData\\\";\\n    private static final String KEY_TYPE = \\\"type\\\";\\n    private static final String KEY_QUALITY = \\\"quality\\\";\\n    private static final String KEY_CITY = \\\"city\\\";\\n    private static final String KEY_REGION_NAME = \\\"regionName\\\";\\n    private static final String KEY_LAT = \\\"lat\\\";\\n    private static final String KEY_LON = \\\"lon\\\";\\n\\n\\n    public DBHelper(Context context) {\\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\\n    }\\n\\n    @Override\\n    public void onCreate(SQLiteDatabase db) {\\n        createTable(db, TABLE_SERVERS);\\n        createTable(db, TABLE_BOOKMARK_SERVERS);\\n    }\\n\\n    @Override\\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\\n        db.execSQL(\\\"drop table if exists \\\" + TABLE_SERVERS);\\n        db.execSQL(\\\"drop table if exists \\\" + TABLE_BOOKMARK_SERVERS);\\n        onCreate(db);\\n    }\\n\\n    private void createTable(SQLiteDatabase db, String name) {\\n        db.execSQL(\\\"create table \\\" + name + \\\"(\\\"\\n                + KEY_ID + \\\" integer primary key,\\\"\\n                + KEY_HOST_NAME + \\\" text,\\\"\\n                + KEY_IP + \\\" text,\\\"\\n                + KEY_SCORE + \\\" text,\\\"\\n                + KEY_PING + \\\" text,\\\"\\n                + KEY_SPEED + \\\" text,\\\"\\n                + KEY_COUNTRY_LONG + \\\" text,\\\"\\n                + KEY_COUNTRY_SHORT + \\\" text,\\\"\\n                + KEY_NUM_VPN_SESSIONS + \\\" text,\\\"\\n                + KEY_UPTIME + \\\" text,\\\"\\n                + KEY_TOTAL_USERS + \\\" text,\\\"\\n                + KEY_TOTAL_TRAFFIC + \\\" text,\\\"\\n                + KEY_LOG_TYPE + \\\" text,\\\"\\n                + KEY_OPERATOR + \\\" text,\\\"\\n                + KEY_MESSAGE + \\\" text,\\\"\\n                + KEY_CONFIG_DATA + \\\" text,\\\"\\n                + KEY_QUALITY + \\\" integer,\\\"\\n                + KEY_CITY + \\\" text,\\\"\\n                + KEY_TYPE + \\\" integer,\\\"\\n                + KEY_REGION_NAME + \\\" text,\\\"\\n                + KEY_LAT + \\\" real,\\\"\\n                + KEY_LON + \\\" real,\\\"\\n                + \\\"UNIQUE (\\\"\\n                + KEY_HOST_NAME\\n                + \\\") ON CONFLICT IGNORE\\\"\\n                + \\\")\\\");\\n    }\\n\\n    public void setInactive(String ip) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        ContentValues values = new ContentValues();\\n        values.put(KEY_QUALITY, 0);\\n        db.update(TABLE_SERVERS, values, KEY_IP + \\\" = ?\\\", new String[] {ip});\\n\\n        db.close();\\n    }\\n\\n    public boolean setIpInfo(JSONArray response, List<Server> serverList) {\\n        boolean result = false;\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        for (int i = 0; i < response.length(); i++) {\\n            try {\\n                JSONObject ipInfo = new JSONObject(response.get(i).toString());\\n                String city = ipInfo.get(KEY_CITY).toString();\\n\\n                ContentValues values = new ContentValues();\\n                values.put(KEY_CITY, city);\\n                values.put(KEY_REGION_NAME, ipInfo.get(KEY_REGION_NAME).toString());\\n                values.put(KEY_LAT, ipInfo.getDouble(KEY_LAT));\\n                values.put(KEY_LON, ipInfo.getDouble(KEY_LON));\\n\\n                db.update(TABLE_SERVERS, values, KEY_IP + \\\" = ?\\\", new String[] {ipInfo.get(\\\"query\\\").toString()});\\n\\n                serverList.get(i).setCity(city);\\n                result = true;\\n            } catch (JSONException e) {\\n                result = false;\\n                e.printStackTrace();\\n            }\\n        }\\n        db.close();\\n\\n        return result;\\n    }\\n\\n    public void clearTable() {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        db.delete(TABLE_SERVERS, null, null);\\n        db.close();\\n    }\\n\\n    public void setBookmark(Server server) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        ContentValues contentValues = new ContentValues();\\n\\n        contentValues.put(KEY_HOST_NAME, server.getHostName());\\n        contentValues.put(KEY_IP, server.getIp());\\n        contentValues.put(KEY_SCORE, server.getScore());\\n        contentValues.put(KEY_PING, server.getPing());\\n        contentValues.put(KEY_SPEED, server.getSpeed());\\n        contentValues.put(KEY_COUNTRY_LONG, server.getCountryLong());\\n        contentValues.put(KEY_COUNTRY_SHORT, server.getCountryShort());\\n        contentValues.put(KEY_NUM_VPN_SESSIONS, server.getNumVpnSessions());\\n        contentValues.put(KEY_UPTIME, server.getUptime());\\n        contentValues.put(KEY_TOTAL_USERS, server.getTotalUsers());\\n        contentValues.put(KEY_TOTAL_TRAFFIC, server.getTotalTraffic());\\n        contentValues.put(KEY_LOG_TYPE, server.getLogType());\\n        contentValues.put(KEY_OPERATOR, server.getOperator());\\n        contentValues.put(KEY_MESSAGE, server.getMessage());\\n        contentValues.put(KEY_CONFIG_DATA, server.getConfigData());\\n        contentValues.put(KEY_TYPE, server.getType());\\n        contentValues.put(KEY_QUALITY, server.getQuality());\\n        contentValues.put(KEY_CITY, server.getCity());\\n\\n        db.insert(TABLE_BOOKMARK_SERVERS, null, contentValues);\\n        db.close();\\n    }\\n\\n    public void delBookmark(Server server) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        db.delete(TABLE_BOOKMARK_SERVERS, KEY_IP + \\\" = ?\\\", new String[] {server.getIp()});\\n        db.close();\\n    }\\n\\n    public List<Server> getBookmarks() {\\n        List<Server> serverList = new ArrayList<Server>();\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.query(TABLE_BOOKMARK_SERVERS, null, null, null, null, null, null);\\n\\n        if (cursor.moveToFirst()) {\\n            do {\\n                serverList.add(parseServer(cursor));\\n            } while (cursor.moveToNext());\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        return serverList;\\n    }\\n\\n    public boolean checkBookmark(Server server) {\\n        boolean result = false;\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.query(TABLE_BOOKMARK_SERVERS,\\n                null,\\n                KEY_IP + \\\"=?\\\",\\n                new String[]{server.getIp()},\\n                null,\\n                null,\\n                null);\\n\\n        if (cursor.moveToFirst()) {\\n            result = true;\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        return result;\\n    }\\n\\n    public void putLine(String line, int type) {\\n        String[] data = line.split(\\\",\\\");\\n        if (data.length == 15) {\\n            SQLiteDatabase db = this.getWritableDatabase();\\n            ContentValues contentValues = new ContentValues();\\n\\n            contentValues.put(KEY_HOST_NAME, data[0]);\\n            contentValues.put(KEY_IP, data[1]);\\n            contentValues.put(KEY_SCORE, data[2]);\\n            contentValues.put(KEY_PING, data[3]);\\n            contentValues.put(KEY_SPEED, data[4]);\\n            contentValues.put(KEY_COUNTRY_LONG, data[5]);\\n            contentValues.put(KEY_COUNTRY_SHORT, data[6]);\\n            contentValues.put(KEY_NUM_VPN_SESSIONS, data[7]);\\n            contentValues.put(KEY_UPTIME, data[8]);\\n            contentValues.put(KEY_TOTAL_USERS, data[9]);\\n            contentValues.put(KEY_TOTAL_TRAFFIC, data[10]);\\n            contentValues.put(KEY_LOG_TYPE, data[11]);\\n            contentValues.put(KEY_OPERATOR, data[12]);\\n            contentValues.put(KEY_MESSAGE, data[13]);\\n            contentValues.put(KEY_CONFIG_DATA, data[14]);\\n            contentValues.put(KEY_TYPE, type);\\n\\n            contentValues.put(KEY_QUALITY,\\n                    ConnectionQuality.getConnectionQuality(data[4], data[7], data[3]));\\n\\n            db.insert(TABLE_SERVERS, null, contentValues);\\n            db.close();\\n        }\\n    }\\n\\n    public long getCount() {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        SQLiteStatement statement = db.compileStatement(\\\"SELECT COUNT(*) FROM \\\" + TABLE_SERVERS);\\n        long count = statement.simpleQueryForLong();\\n        db.close();\\n        return count;\\n    }\\n\\n    public long getCountBasic() {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        SQLiteStatement statement = db.compileStatement(\\\"SELECT COUNT(*) FROM \\\"\\n                + TABLE_SERVERS\\n                + \\\" WHERE \\\"\\n                + KEY_TYPE\\n                + \\\" = 0\\\");\\n        long count = statement.simpleQueryForLong();\\n        db.close();\\n        return count;\\n    }\\n\\n    public long getCountAdditional() {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        SQLiteStatement statement = db.compileStatement(\\\"SELECT COUNT(*) FROM \\\"\\n                + TABLE_SERVERS\\n                + \\\" WHERE \\\"\\n                + KEY_TYPE\\n                + \\\" = 1\\\");\\n        long count = statement.simpleQueryForLong();\\n        db.close();\\n        return count;\\n    }\\n\\n    public List<Server> getUniqueCountries() {\\n        List<Server> countryList = new ArrayList<Server>();\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.query(TABLE_SERVERS,\\n                null,\\n                null,\\n                null,\\n                KEY_COUNTRY_LONG,\\n                \\\"MAX(\\\" + KEY_QUALITY + \\\")\\\",\\n                null);\\n\\n        if (cursor.moveToFirst()) {\\n            do {\\n                countryList.add(parseServer(cursor));\\n            } while (cursor.moveToNext());\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        return countryList;\\n    }\\n\\n    public List<Server> getServersWithGPS() {\\n        List<Server> serverList = new ArrayList<Server>();\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.rawQuery(\\\"SELECT * FROM \\\"\\n                + TABLE_SERVERS\\n                + \\\" WHERE \\\"\\n                + KEY_LAT\\n                + \\\" <> 0\\\", null);\\n\\n        if (cursor.moveToFirst()) {\\n            do {\\n                serverList.add(parseServer(cursor));\\n            } while (cursor.moveToNext());\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        return serverList;\\n    }\\n\\n    public List<Server> getServersByCountryCode(String country) {\\n        List<Server> serverList = new ArrayList<Server>();\\n        if (country != null) {\\n            SQLiteDatabase db = this.getWritableDatabase();\\n            Cursor cursor = db.query(TABLE_SERVERS,\\n                    null,\\n                    KEY_COUNTRY_SHORT + \\\"=?\\\",\\n                    new String[]{country},\\n                    null,\\n                    null,\\n                    KEY_QUALITY + \\\" DESC\\\");\\n\\n            if (cursor.moveToFirst()) {\\n                do {\\n                    serverList.add(parseServer(cursor));\\n                } while (cursor.moveToNext());\\n            } else {\\n                Log.d(TAG ,\\\"0 rows\\\");\\n            }\\n\\n            cursor.close();\\n            db.close();\\n        }\\n\\n        return serverList;\\n    }\\n\\n    private Server parseGoodRandomServer(Cursor cursor, SQLiteDatabase db) {\\n        List<Server> serverListExcellent = new ArrayList<Server>();\\n        List<Server> serverListGood = new ArrayList<Server>();\\n        List<Server> serverListBad = new ArrayList<Server>();\\n\\n        if (cursor.moveToFirst()) {\\n            do {\\n                switch (cursor.getInt(16)) {\\n                    case 1:\\n                        serverListBad.add(parseServer(cursor));\\n                        break;\\n                    case 2:\\n                        serverListGood.add(parseServer(cursor));\\n                        break;\\n                    case 3:\\n                        serverListExcellent.add(parseServer(cursor));\\n                        break;\\n                }\\n\\n            } while (cursor.moveToNext());\\n        } else {\\n            Log.d(TAG ,\\\"0 rows\\\");\\n        }\\n\\n        cursor.close();\\n        db.close();\\n\\n        Random random = new Random();\\n        if (serverListExcellent.size() > 0) {\\n            return serverListExcellent.get(random.nextInt(serverListExcellent.size()));\\n        } else if (serverListGood.size() > 0) {\\n            return serverListGood.get(random.nextInt(serverListGood.size()));\\n        } else if (serverListBad.size() > 0) {\\n            return serverListBad.get(random.nextInt(serverListBad.size()));\\n        }\\n\\n        return null;\\n    }\\n\\n    public Server getSimilarServer(String country, String ip) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor = db.rawQuery(\\\"SELECT * FROM \\\"\\n                + TABLE_SERVERS\\n                + \\\" WHERE \\\"\\n                + KEY_QUALITY\\n                + \\\" <> 1 AND \\\"\\n                + KEY_COUNTRY_LONG\\n                + \\\" = ? AND \\\"\\n                + KEY_IP\\n                + \\\" <> ?\\\", new String[] {country, ip});\\n\\n\\n        return parseGoodRandomServer(cursor, db);\\n    }\\n\\n    public Server getGoodRandomServer(String country) {\\n        SQLiteDatabase db = this.getWritableDatabase();\\n        Cursor cursor;\\n        if (country != null) {\\n            cursor = db.rawQuery(\\\"SELECT * FROM \\\"\\n                    + TABLE_SERVERS\\n                    + \\\" WHERE \\\"\\n                    + KEY_QUALITY\\n                    + \\\" <> 0 AND \\\"\\n                    + KEY_COUNTRY_LONG\\n                    + \\\" = ?\\\", new String[] {country});\\n        } else {\\n            cursor = db.rawQuery(\\\"SELECT * FROM \\\"\\n                    + TABLE_SERVERS\\n                    + \\\" WHERE \\\"\\n                    + KEY_QUALITY\\n                    + \\\" <> 0\\\", null);\\n        }\\n\\n        return parseGoodRandomServer(cursor, db);\\n    }\\n\\n    private Server parseServer(Cursor cursor) {\\n        return new Server(\\n                cursor.getString(1),\\n                cursor.getString(2),\\n                cursor.getString(3),\\n                cursor.getString(4),\\n                cursor.getString(5),\\n                cursor.getString(6),\\n                cursor.getString(7),\\n                cursor.getString(8),\\n                cursor.getString(9),\\n                cursor.getString(10),\\n                cursor.getString(11),\\n                cursor.getString(12),\\n                cursor.getString(13),\\n                cursor.getString(14),\\n                cursor.getString(15),\\n                cursor.getInt(16),\\n                cursor.getString(17),\\n                cursor.getInt(18),\\n                cursor.getString(19),\\n                cursor.getDouble(20),\\n                cursor.getDouble(21)\\n        );\\n    }\\n}\"}, {\"identifier\":\"Server\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/model/Server.java\", \"snippet\":\"public class Server implements Parcelable {\\n\\n    private String hostName;\\n    private String ip;\\n    private String score;\\n    private String ping;\\n    private String speed;\\n    private String countryLong;\\n    private String countryShort;\\n    private String numVpnSessions;\\n    private String uptime;\\n    private String totalUsers;\\n    private String totalTraffic;\\n    private String logType;\\n    private String operator;\\n    private String message;\\n    private String configData;\\n    private int quality;\\n    private String city;\\n    private int type;\\n    private String regionName;\\n    private double lat;\\n    private double lon;\\n\\n    public Server(String hostName, String ip, String score, String ping, String speed, String countryLong, String countryShort, String numVpnSessions, String uptime, String totalUsers, String totalTraffic, String logType, String operator, String message, String configData, int quality, String city, int type, String regionName, double lat, double lon) {\\n        this.hostName = hostName;\\n        this.ip = ip;\\n        this.score = score;\\n        this.ping = ping;\\n        this.speed = speed;\\n        this.countryLong = countryLong;\\n        this.countryShort = countryShort;\\n        this.numVpnSessions = numVpnSessions;\\n        this.uptime = uptime;\\n        this.totalUsers = totalUsers;\\n        this.totalTraffic = totalTraffic;\\n        this.logType = logType;\\n        this.operator = operator;\\n        this.message = message;\\n        this.configData = configData;\\n        this.quality = quality;\\n        this.city = city;\\n        this.type = type;\\n        this.regionName = regionName;\\n        this.lat = lat;\\n        this.lon = lon;\\n    }\\n\\n    protected Server(Parcel in) {\\n        hostName = in.readString();\\n        ip = in.readString();\\n        score = in.readString();\\n        ping = in.readString();\\n        speed = in.readString();\\n        countryLong = in.readString();\\n        countryShort = in.readString();\\n        numVpnSessions = in.readString();\\n        uptime = in.readString();\\n        totalUsers = in.readString();\\n        totalTraffic = in.readString();\\n        logType = in.readString();\\n        operator = in.readString();\\n        message = in.readString();\\n        configData = in.readString();\\n        quality = in.readInt();\\n        city = in.readString();\\n        type = in.readInt();\\n        regionName = in.readString();\\n        lat = in.readDouble();\\n        lon = in.readDouble();\\n    }\\n\\n    public static final Creator<Server> CREATOR = new Creator<Server>() {\\n        @Override\\n        public Server createFromParcel(Parcel in) {\\n            return new Server(in);\\n        }\\n\\n        @Override\\n        public Server[] newArray(int size) {\\n            return new Server[size];\\n        }\\n    };\\n\\n    public String getHostName() {\\n        return hostName;\\n    }\\n\\n    public void setHostName(String hostName) {\\n        this.hostName = hostName;\\n    }\\n\\n    public String getIp() {\\n        return ip;\\n    }\\n\\n    public void setIp(String ip) {\\n        this.ip = ip;\\n    }\\n\\n    public String getScore() {\\n        return score;\\n    }\\n\\n    public void setScore(String score) {\\n        this.score = score;\\n    }\\n\\n    public String getPing() {\\n        return ping;\\n    }\\n\\n    public void setPing(String ping) {\\n        this.ping = ping;\\n    }\\n\\n    public String getSpeed() {\\n        return speed;\\n    }\\n\\n    public void setSpeed(String speed) {\\n        this.speed = speed;\\n    }\\n\\n    public String getCountryLong() {\\n        return countryLong;\\n    }\\n\\n    public void setCountryLong(String countryLong) {\\n        this.countryLong = countryLong;\\n    }\\n\\n    public String getCountryShort() {\\n        return countryShort;\\n    }\\n\\n    public void setCountryShort(String countryShort) {\\n        this.countryShort = countryShort;\\n    }\\n\\n    public String getNumVpnSessions() {\\n        return numVpnSessions;\\n    }\\n\\n    public void setNumVpnSessions(String numVpnSessions) {\\n        this.numVpnSessions = numVpnSessions;\\n    }\\n\\n    public String getUptime() {\\n        return uptime;\\n    }\\n\\n    public void setUptime(String uptime) {\\n        this.uptime = uptime;\\n    }\\n\\n    public String getTotalUsers() {\\n        return totalUsers;\\n    }\\n\\n    public void setTotalUsers(String totalUsers) {\\n        this.totalUsers = totalUsers;\\n    }\\n\\n    public String getTotalTraffic() {\\n        return totalTraffic;\\n    }\\n\\n    public void setTotalTraffic(String totalTraffic) {\\n        this.totalTraffic = totalTraffic;\\n    }\\n\\n    public String getLogType() {\\n        return logType;\\n    }\\n\\n    public void setLogType(String logType) {\\n        this.logType = logType;\\n    }\\n\\n    public String getOperator() {\\n        return operator;\\n    }\\n\\n    public void setOperator(String operator) {\\n        this.operator = operator;\\n    }\\n\\n    public String getMessage() {\\n        return message;\\n    }\\n\\n    public void setMessage(String message) {\\n        this.message = message;\\n    }\\n\\n    public String getConfigData() {\\n        return configData;\\n    }\\n\\n    public void setConfigData(String configData) {\\n        this.configData = configData;\\n    }\\n\\n    public int getQuality() {\\n        return quality;\\n    }\\n\\n    public void setQuality(int quality) {\\n        this.quality = quality;\\n    }\\n\\n    public String getCity() {\\n        return city;\\n    }\\n\\n    public void setCity(String city) {\\n        this.city = city;\\n    }\\n\\n    public int getType() {\\n        return type;\\n    }\\n\\n    public void setType(int type) {\\n        this.type = type;\\n    }\\n\\n    public String getRegionName() {\\n        return regionName;\\n    }\\n\\n    public void setRegionName(String regionName) {\\n        this.regionName = regionName;\\n    }\\n\\n    public double getLat() {\\n        return lat;\\n    }\\n\\n    public void setLat(double lat) {\\n        this.lat = lat;\\n    }\\n\\n    public double getLon() {\\n        return lon;\\n    }\\n\\n    public void setLon(double lon) {\\n        this.lon = lon;\\n    }\\n\\n    @Override\\n    public int describeContents() {\\n        return 0;\\n    }\\n\\n    @Override\\n    public void writeToParcel(Parcel dest, int flags) {\\n        dest.writeString(hostName);\\n        dest.writeString(ip);\\n        dest.writeString(score);\\n        dest.writeString(ping);\\n        dest.writeString(speed);\\n        dest.writeString(countryLong);\\n        dest.writeString(countryShort);\\n        dest.writeString(numVpnSessions);\\n        dest.writeString(uptime);\\n        dest.writeString(totalUsers);\\n        dest.writeString(totalTraffic);\\n        dest.writeString(logType);\\n        dest.writeString(operator);\\n        dest.writeString(message);\\n        dest.writeString(configData);\\n        dest.writeInt(quality);\\n        dest.writeString(city);\\n        dest.writeInt(type);\\n        dest.writeString(regionName);\\n        dest.writeDouble(lat);\\n        dest.writeDouble(lon);\\n    }\\n}\"}, {\"identifier\":\"CountriesNames\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/CountriesNames.java\", \"snippet\":\"public class CountriesNames {\\n\\n    public static Map<String, String> getCountries() {\\n        Map<String, String> countries = new HashMap<String, String>();\\n\\n        String[] isoCountries = Locale.getISOCountries();\\n        for (String country : isoCountries) {\\n            Locale locale = new Locale(\\\"\\\", country);\\n            String iso = locale.getISO3Country();\\n            String code = locale.getCountry();\\n            String name = locale.getDisplayCountry();\\n\\n            if (!\\\"\\\".equals(iso) && !\\\"\\\".equals(code)\\n                    && !\\\"\\\".equals(name)) {\\n                countries.put(code, name);\\n            }\\n        }\\n\\n        return countries;\\n    }\\n}\"}, {\"identifier\":\"PropertiesService\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/PropertiesService.java\", \"snippet\":\"public class PropertiesService {\\n\\n    private static SharedPreferences prefs;\\n    private static final String DOWNLOADED_DATA_KEY = \\\"downloaded_data\\\";\\n    private static final String UPLOADED_DATA_KEY = \\\"uploaded_data\\\";\\n    private static final String AUTOMATIC_SWITCHING = \\\"automaticSwitching\\\";\\n    private static final String COUNTRY_PRIORITY = \\\"countryPriority\\\";\\n    private static final String CONNECT_ON_START = \\\"connectOnStart\\\";\\n    private static final String AUTOMATIC_SWITCHING_SECONDS = \\\"automaticSwitchingSeconds\\\";\\n    private static final String SELECTED_COUNTRY = \\\"selectedCountry\\\";\\n    private static final String SHOW_RATING = \\\"show_rating\\\";\\n    private static final String SHOW_NOTE = \\\"show_note\\\";\\n\\n    private synchronized static SharedPreferences getPrefs(){\\n        if (prefs == null) {\\n            prefs = PreferenceManager.getDefaultSharedPreferences(App.getInstance());\\n        }\\n        return prefs;\\n    }\\n\\n    public static long getDownloaded(){\\n        return getPrefs().getLong(DOWNLOADED_DATA_KEY, 0);\\n    }\\n\\n    public static void setDownloaded(long count){\\n        getPrefs().edit().putLong(DOWNLOADED_DATA_KEY, count).apply();\\n    }\\n\\n    public static long getUploaded(){\\n        return getPrefs().getLong(UPLOADED_DATA_KEY, 0);\\n    }\\n\\n    public static void setUploaded(long count){\\n        getPrefs().edit().putLong(UPLOADED_DATA_KEY, count).apply();\\n    }\\n\\n    public static boolean getConnectOnStart(){\\n        return getPrefs().getBoolean(CONNECT_ON_START, false);\\n    }\\n\\n    public static boolean getAutomaticSwitching(){\\n        return getPrefs().getBoolean(AUTOMATIC_SWITCHING, true);\\n    }\\n\\n    public static int getAutomaticSwitchingSeconds(){\\n        return getPrefs().getInt(AUTOMATIC_SWITCHING_SECONDS, 40);\\n    }\\n\\n    public static boolean getCountryPriority(){\\n        return getPrefs().getBoolean(COUNTRY_PRIORITY, false);\\n    }\\n\\n    public static String getSelectedCountry(){\\n        return getPrefs().getString(SELECTED_COUNTRY, null);\\n    }\\n\\n    public static boolean getShowRating(){\\n        return getPrefs().getBoolean(SHOW_RATING, true);\\n    }\\n\\n    public static void setShowRating(boolean showRating){\\n        getPrefs().edit().putBoolean(SHOW_RATING, showRating).apply();\\n    }\\n\\n    public static boolean getShowNote(){\\n        return getPrefs().getBoolean(SHOW_NOTE, true);\\n    }\\n\\n    public static void setShowNote(boolean showNote){\\n        getPrefs().edit().putBoolean(SHOW_NOTE, showNote).apply();\\n    }\\n\\n\\n}\"}, {\"identifier\":\"TotalTraffic\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/TotalTraffic.java\", \"snippet\":\"public class TotalTraffic {\\n\\n    public static final String TRAFFIC_ACTION = \\\"traffic_action\\\";\\n\\n    public static final String DOWNLOAD_ALL = \\\"download_all\\\";\\n    public static final String DOWNLOAD_SESSION = \\\"download_session\\\";\\n    public static final String UPLOAD_ALL = \\\"upload_all\\\";\\n    public static final String UPLOAD_SESSION = \\\"upload_session\\\";\\n\\n    public static long inTotal;\\n    public static long outTotal;\\n\\n\\n    public static void calcTraffic(Context context, long in, long out, long diffIn, long diffOut) {\\n        List<String> totalTraffic = getTotalTraffic(diffIn, diffOut);\\n\\n        Intent traffic = new Intent();\\n        traffic.setAction(TRAFFIC_ACTION);\\n        traffic.putExtra(DOWNLOAD_ALL, totalTraffic.get(0));\\n        traffic.putExtra(DOWNLOAD_SESSION, OpenVPNService.humanReadableByteCount(in, false));\\n        traffic.putExtra(UPLOAD_ALL, totalTraffic.get(1));\\n        traffic.putExtra(UPLOAD_SESSION, OpenVPNService.humanReadableByteCount(out, false));\\n\\n        context.sendBroadcast(traffic);\\n    }\\n\\n    public static List<String> getTotalTraffic() {\\n        return getTotalTraffic(0, 0);\\n    }\\n\\n    public static List<String> getTotalTraffic(long in, long out) {\\n        List<String> totalTraffic = new ArrayList<String>();\\n\\n        if (inTotal == 0)\\n            inTotal = PropertiesService.getDownloaded();\\n\\n        if (outTotal == 0)\\n            outTotal = PropertiesService.getUploaded();\\n\\n        inTotal = inTotal + in;\\n        outTotal = outTotal + out;\\n\\n        totalTraffic.add(OpenVPNService.humanReadableByteCount(inTotal, false));\\n        totalTraffic.add(OpenVPNService.humanReadableByteCount(outTotal, false));\\n\\n        return totalTraffic;\\n    }\\n\\n    public static void saveTotal() {\\n        if (inTotal != 0)\\n            PropertiesService.setDownloaded(inTotal);\\n\\n        if (outTotal != 0)\\n            PropertiesService.setUploaded(outTotal);\\n    }\\n\\n}\"}, {\"identifier\":\"IabHelper\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/iap/IabHelper.java\", \"snippet\":\"public class IabHelper {\\n    // Is debug logging enabled?\\n    boolean mDebugLog = false;\\n    String mDebugTag = \\\"IabHelper\\\";\\n\\n    // Is setup done?\\n    boolean mSetupDone = false;\\n\\n    // Has this object been disposed of? (If so, we should ignore callbacks, etc)\\n    boolean mDisposed = false;\\n\\n    // Are subscriptions supported?\\n    boolean mSubscriptionsSupported = false;\\n\\n    // Is an asynchronous operation in progress?\\n    // (only one at a time can be in progress)\\n    boolean mAsyncInProgress = false;\\n\\n    // (for logging/debugging)\\n    // if mAsyncInProgress == true, what asynchronous operation is in progress?\\n    String mAsyncOperation = \\\"\\\";\\n\\n    // Context we were passed during initialization\\n    Context mContext;\\n\\n    // Connection to the service\\n    IInAppBillingService mService;\\n    ServiceConnection mServiceConn;\\n\\n    // The request code used to launch purchase flow\\n    int mRequestCode;\\n\\n    // The item type of the current purchase flow\\n    String mPurchasingItemType;\\n\\n    // Public key for verifying signature, in base64 encoding\\n    String mSignatureBase64 = null;\\n\\n    // Billing response codes\\n    public static final int BILLING_RESPONSE_RESULT_OK = 0;\\n    public static final int BILLING_RESPONSE_RESULT_USER_CANCELED = 1;\\n    public static final int BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE = 3;\\n    public static final int BILLING_RESPONSE_RESULT_ITEM_UNAVAILABLE = 4;\\n    public static final int BILLING_RESPONSE_RESULT_DEVELOPER_ERROR = 5;\\n    public static final int BILLING_RESPONSE_RESULT_ERROR = 6;\\n    public static final int BILLING_RESPONSE_RESULT_ITEM_ALREADY_OWNED = 7;\\n    public static final int BILLING_RESPONSE_RESULT_ITEM_NOT_OWNED = 8;\\n\\n    // IAB Helper error codes\\n    public static final int IABHELPER_ERROR_BASE = -1000;\\n    public static final int IABHELPER_REMOTE_EXCEPTION = -1001;\\n    public static final int IABHELPER_BAD_RESPONSE = -1002;\\n    public static final int IABHELPER_VERIFICATION_FAILED = -1003;\\n    public static final int IABHELPER_SEND_INTENT_FAILED = -1004;\\n    public static final int IABHELPER_USER_CANCELLED = -1005;\\n    public static final int IABHELPER_UNKNOWN_PURCHASE_RESPONSE = -1006;\\n    public static final int IABHELPER_MISSING_TOKEN = -1007;\\n    public static final int IABHELPER_UNKNOWN_ERROR = -1008;\\n    public static final int IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE = -1009;\\n    public static final int IABHELPER_INVALID_CONSUMPTION = -1010;\\n\\n    // Keys for the responses from InAppBillingService\\n    public static final String RESPONSE_CODE = \\\"RESPONSE_CODE\\\";\\n    public static final String RESPONSE_GET_SKU_DETAILS_LIST = \\\"DETAILS_LIST\\\";\\n    public static final String RESPONSE_BUY_INTENT = \\\"BUY_INTENT\\\";\\n    public static final String RESPONSE_INAPP_PURCHASE_DATA = \\\"INAPP_PURCHASE_DATA\\\";\\n    public static final String RESPONSE_INAPP_SIGNATURE = \\\"INAPP_DATA_SIGNATURE\\\";\\n    public static final String RESPONSE_INAPP_ITEM_LIST = \\\"INAPP_PURCHASE_ITEM_LIST\\\";\\n    public static final String RESPONSE_INAPP_PURCHASE_DATA_LIST = \\\"INAPP_PURCHASE_DATA_LIST\\\";\\n    public static final String RESPONSE_INAPP_SIGNATURE_LIST = \\\"INAPP_DATA_SIGNATURE_LIST\\\";\\n    public static final String INAPP_CONTINUATION_TOKEN = \\\"INAPP_CONTINUATION_TOKEN\\\";\\n\\n    // Item types\\n    public static final String ITEM_TYPE_INAPP = \\\"inapp\\\";\\n    public static final String ITEM_TYPE_SUBS = \\\"subs\\\";\\n\\n    // some fields on the getSkuDetails response bundle\\n    public static final String GET_SKU_DETAILS_ITEM_LIST = \\\"ITEM_ID_LIST\\\";\\n    public static final String GET_SKU_DETAILS_ITEM_TYPE_LIST = \\\"ITEM_TYPE_LIST\\\";\\n\\n    /**\\n     * Creates an instance. After creation, it will not yet be ready to use. You must perform\\n     * setup by calling {@link #startSetup} and wait for setup to complete. This constructor does not\\n     * block and is safe to call from a UI thread.\\n     *\\n     * @param ctx Your application or Activity context. Needed to bind to the in-app billing service.\\n     * @param base64PublicKey Your application's public key, encoded in base64.\\n     *     This is used for verification of purchase signatures. You can find your app's base64-encoded\\n     *     public key in your application's page on Google Play Developer Console. Note that this\\n     *     is NOT your \\\"developer public key\\\".\\n     */\\n    public IabHelper(Context ctx, String base64PublicKey) {\\n        mContext = ctx.getApplicationContext();\\n        mSignatureBase64 = base64PublicKey;\\n        logDebug(\\\"IAB helper created.\\\");\\n    }\\n\\n    /**\\n     * Enables or disable debug logging through LogCat.\\n     */\\n    public void enableDebugLogging(boolean enable, String tag) {\\n        checkNotDisposed();\\n        mDebugLog = enable;\\n        mDebugTag = tag;\\n    }\\n\\n    public void enableDebugLogging(boolean enable) {\\n        checkNotDisposed();\\n        mDebugLog = enable;\\n    }\\n\\n    /**\\n     * Callback for setup process. This listener's {@link #onIabSetupFinished} method is called\\n     * when the setup process is complete.\\n     */\\n    public interface OnIabSetupFinishedListener {\\n        /**\\n         * Called to notify that setup is complete.\\n         *\\n         * @param result The result of the setup process.\\n         */\\n        public void onIabSetupFinished(IabResult result);\\n    }\\n\\n    /**\\n     * Starts the setup process. This will start up the setup process asynchronously.\\n     * You will be notified through the listener when the setup process is complete.\\n     * This method is safe to call from a UI thread.\\n     *\\n     * @param listener The listener to notify when the setup process is complete.\\n     */\\n    public void startSetup(final OnIabSetupFinishedListener listener) {\\n        // If already set up, can't do it again.\\n        checkNotDisposed();\\n        if (mSetupDone) throw new IllegalStateException(\\\"IAB helper is already set up.\\\");\\n\\n        // Connection to IAB service\\n        logDebug(\\\"Starting in-app billing setup.\\\");\\n        mServiceConn = new ServiceConnection() {\\n            @Override\\n            public void onServiceDisconnected(ComponentName name) {\\n                logDebug(\\\"Billing service disconnected.\\\");\\n                mService = null;\\n            }\\n\\n            @Override\\n            public void onServiceConnected(ComponentName name, IBinder service) {\\n                if (mDisposed) return;\\n                logDebug(\\\"Billing service connected.\\\");\\n                mService = IInAppBillingService.Stub.asInterface(service);\\n                String packageName = mContext.getPackageName();\\n                try {\\n                    logDebug(\\\"Checking for in-app billing 3 support.\\\");\\n\\n                    // check for in-app billing v3 support\\n                    int response = mService.isBillingSupported(3, packageName, ITEM_TYPE_INAPP);\\n                    if (response != BILLING_RESPONSE_RESULT_OK) {\\n                        if (listener != null) listener.onIabSetupFinished(new IabResult(response,\\n                                \\\"Error checking for billing v3 support.\\\"));\\n\\n                        // if in-app purchases aren't supported, neither are subscriptions.\\n                        mSubscriptionsSupported = false;\\n                        return;\\n                    }\\n                    logDebug(\\\"In-app billing version 3 supported for \\\" + packageName);\\n\\n                    // check for v3 subscriptions support\\n                    response = mService.isBillingSupported(3, packageName, ITEM_TYPE_SUBS);\\n                    if (response == BILLING_RESPONSE_RESULT_OK) {\\n                        logDebug(\\\"Subscriptions AVAILABLE.\\\");\\n                        mSubscriptionsSupported = true;\\n                    }\\n                    else {\\n                        logDebug(\\\"Subscriptions NOT AVAILABLE. Response: \\\" + response);\\n                    }\\n\\n                    mSetupDone = true;\\n                }\\n                catch (RemoteException e) {\\n                    if (listener != null) {\\n                        listener.onIabSetupFinished(new IabResult(IABHELPER_REMOTE_EXCEPTION,\\n                                                    \\\"RemoteException while setting up in-app billing.\\\"));\\n                    }\\n                    e.printStackTrace();\\n                    return;\\n                }\\n\\n                if (listener != null) {\\n                    listener.onIabSetupFinished(new IabResult(BILLING_RESPONSE_RESULT_OK, \\\"Setup successful.\\\"));\\n                }\\n            }\\n        };\\n\\n        Intent serviceIntent = new Intent(\\\"com.android.vending.billing.InAppBillingService.BIND\\\");\\n        serviceIntent.setPackage(\\\"com.android.vending\\\");\\n        boolean successfullyBound = mContext.bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);\\n\\n        if (!successfullyBound) {\\n            // no service available to handle that Intent\\n            if (listener != null) {\\n                listener.onIabSetupFinished(\\n                        new IabResult(BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE,\\n                                \\\"Billing service unavailable on device.\\\"));\\n            }\\n        }\\n       /* if (!mContext.getPackageManager().queryIntentServices(serviceIntent, 0).isEmpty()) {\\n            // service available to handle that Intent\\n            mContext.bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);\\n        }\\n        else {\\n            // no service available to handle that Intent\\n            if (listener != null) {\\n                listener.onIabSetupFinished(\\n                        new IabResult(BILLING_RESPONSE_RESULT_BILLING_UNAVAILABLE,\\n                        \\\"Billing service unavailable on device.\\\"));\\n            }\\n        }*/\\n    }\\n\\n    /**\\n     * Dispose of object, releasing resources. It's very important to call this\\n     * method when you are done with this object. It will release any resources\\n     * used by it such as service connections. Naturally, once the object is\\n     * disposed of, it can't be used again.\\n     */\\n    public void dispose() {\\n        logDebug(\\\"Disposing.\\\");\\n        mSetupDone = false;\\n        if (mServiceConn != null) {\\n            logDebug(\\\"Unbinding from service.\\\");\\n            if (mContext != null) mContext.unbindService(mServiceConn);\\n        }\\n        mDisposed = true;\\n        mContext = null;\\n        mServiceConn = null;\\n        mService = null;\\n        mPurchaseListener = null;\\n    }\\n\\n    private void checkNotDisposed() {\\n        if (mDisposed) throw new IllegalStateException(\\\"IabHelper was disposed of, so it cannot be used.\\\");\\n    }\\n\\n    /** Returns whether subscriptions are supported. */\\n    public boolean subscriptionsSupported() {\\n        checkNotDisposed();\\n        return mSubscriptionsSupported;\\n    }\\n\\n\\n    /**\\n     * Callback that notifies when a purchase is finished.\\n     */\\n    public interface OnIabPurchaseFinishedListener {\\n        /**\\n         * Called to notify that an in-app purchase finished. If the purchase was successful,\\n         * then the sku parameter specifies which item was purchased. If the purchase failed,\\n         * the sku and extraData parameters may or may not be null, depending on how far the purchase\\n         * process went.\\n         *\\n         * @param result The result of the purchase.\\n         * @param info The purchase information (null if purchase failed)\\n         */\\n        public void onIabPurchaseFinished(IabResult result, Purchase info);\\n    }\\n\\n    // The listener registered on launchPurchaseFlow, which we have to call back when\\n    // the purchase finishes\\n    OnIabPurchaseFinishedListener mPurchaseListener;\\n\\n    public void launchPurchaseFlow(Activity act, String sku, int requestCode, OnIabPurchaseFinishedListener listener) {\\n        launchPurchaseFlow(act, sku, requestCode, listener, \\\"\\\");\\n    }\\n\\n    public void launchPurchaseFlow(Activity act, String sku, int requestCode,\\n            OnIabPurchaseFinishedListener listener, String extraData) {\\n        launchPurchaseFlow(act, sku, ITEM_TYPE_INAPP, requestCode, listener, extraData);\\n    }\\n\\n    public void launchSubscriptionPurchaseFlow(Activity act, String sku, int requestCode,\\n            OnIabPurchaseFinishedListener listener) {\\n        launchSubscriptionPurchaseFlow(act, sku, requestCode, listener, \\\"\\\");\\n    }\\n\\n    public void launchSubscriptionPurchaseFlow(Activity act, String sku, int requestCode,\\n            OnIabPurchaseFinishedListener listener, String extraData) {\\n        launchPurchaseFlow(act, sku, ITEM_TYPE_SUBS, requestCode, listener, extraData);\\n    }\\n\\n    /**\\n     * Initiate the UI flow for an in-app purchase. Call this method to initiate an in-app purchase,\\n     * which will involve bringing up the Google Play screen. The calling activity will be paused while\\n     * the user interacts with Google Play, and the result will be delivered via the activity's\\n     * {@link Activity#onActivityResult} method, at which point you must call\\n     * this object's {@link #handleActivityResult} method to continue the purchase flow. This method\\n     * MUST be called from the UI thread of the Activity.\\n     *\\n     * @param act The calling activity.\\n     * @param sku The sku of the item to purchase.\\n     * @param itemType indicates if it's a product or a subscription (ITEM_TYPE_INAPP or ITEM_TYPE_SUBS)\\n     * @param requestCode A request code (to differentiate from other responses --\\n     *     as in {@link Activity#startActivityForResult}).\\n     * @param listener The listener to notify when the purchase process finishes\\n     * @param extraData Extra data (developer payload), which will be returned with the purchase data\\n     *     when the purchase completes. This extra data will be permanently bound to that purchase\\n     *     and will always be returned when the purchase is queried.\\n     */\\n    public void launchPurchaseFlow(Activity act, String sku, String itemType, int requestCode,\\n                        OnIabPurchaseFinishedListener listener, String extraData) {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"launchPurchaseFlow\\\");\\n        flagStartAsync(\\\"launchPurchaseFlow\\\");\\n        IabResult result;\\n\\n        if (itemType.equals(ITEM_TYPE_SUBS) && !mSubscriptionsSupported) {\\n            IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE,\\n                    \\\"Subscriptions are not available.\\\");\\n            flagEndAsync();\\n            if (listener != null) listener.onIabPurchaseFinished(r, null);\\n            return;\\n        }\\n\\n        try {\\n            logDebug(\\\"Constructing buy intent for \\\" + sku + \\\", item type: \\\" + itemType);\\n            Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);\\n            int response = getResponseCodeFromBundle(buyIntentBundle);\\n            if (response != BILLING_RESPONSE_RESULT_OK) {\\n                logError(\\\"Unable to buy item, Error response: \\\" + getResponseDesc(response));\\n                flagEndAsync();\\n                result = new IabResult(response, \\\"Unable to buy item\\\");\\n                if (listener != null) listener.onIabPurchaseFinished(result, null);\\n                return;\\n            }\\n\\n            PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);\\n            logDebug(\\\"Launching buy intent for \\\" + sku + \\\". Request code: \\\" + requestCode);\\n            mRequestCode = requestCode;\\n            mPurchaseListener = listener;\\n            mPurchasingItemType = itemType;\\n            act.startIntentSenderForResult(pendingIntent.getIntentSender(),\\n                                           requestCode, new Intent(),\\n                                           Integer.valueOf(0), Integer.valueOf(0),\\n                                           Integer.valueOf(0));\\n        }\\n        catch (SendIntentException e) {\\n            logError(\\\"SendIntentException while launching purchase flow for sku \\\" + sku);\\n            e.printStackTrace();\\n            flagEndAsync();\\n\\n            result = new IabResult(IABHELPER_SEND_INTENT_FAILED, \\\"Failed to send intent.\\\");\\n            if (listener != null) listener.onIabPurchaseFinished(result, null);\\n        }\\n        catch (RemoteException e) {\\n            logError(\\\"RemoteException while launching purchase flow for sku \\\" + sku);\\n            e.printStackTrace();\\n            flagEndAsync();\\n\\n            result = new IabResult(IABHELPER_REMOTE_EXCEPTION, \\\"Remote exception while starting purchase flow\\\");\\n            if (listener != null) listener.onIabPurchaseFinished(result, null);\\n        }\\n    }\\n\\n    /**\\n     * Handles an activity result that's part of the purchase flow in in-app billing. If you\\n     * are calling {@link #launchPurchaseFlow}, then you must call this method from your\\n     * Activity's {@link Activity@onActivityResult} method. This method\\n     * MUST be called from the UI thread of the Activity.\\n     *\\n     * @param requestCode The requestCode as you received it.\\n     * @param resultCode The resultCode as you received it.\\n     * @param data The data (Intent) as you received it.\\n     * @return Returns true if the result was related to a purchase flow and was handled;\\n     *     false if the result was not related to a purchase, in which case you should\\n     *     handle it normally.\\n     */\\n    public boolean handleActivityResult(int requestCode, int resultCode, Intent data) {\\n        IabResult result;\\n        if (requestCode != mRequestCode) return false;\\n\\n        checkNotDisposed();\\n        checkSetupDone(\\\"handleActivityResult\\\");\\n\\n        // end of async purchase operation that started on launchPurchaseFlow\\n        flagEndAsync();\\n\\n        if (data == null) {\\n            logError(\\\"Null data in IAB activity result.\\\");\\n            result = new IabResult(IABHELPER_BAD_RESPONSE, \\\"Null data in IAB result\\\");\\n            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n            return true;\\n        }\\n\\n        int responseCode = getResponseCodeFromIntent(data);\\n        String purchaseData = data.getStringExtra(RESPONSE_INAPP_PURCHASE_DATA);\\n        String dataSignature = data.getStringExtra(RESPONSE_INAPP_SIGNATURE);\\n\\n        if (resultCode == Activity.RESULT_OK && responseCode == BILLING_RESPONSE_RESULT_OK) {\\n            logDebug(\\\"Successful resultcode from purchase activity.\\\");\\n            logDebug(\\\"Purchase data: \\\" + purchaseData);\\n            logDebug(\\\"Data signature: \\\" + dataSignature);\\n            logDebug(\\\"Extras: \\\" + data.getExtras());\\n            logDebug(\\\"Expected item type: \\\" + mPurchasingItemType);\\n\\n            if (purchaseData == null || dataSignature == null) {\\n                logError(\\\"BUG: either purchaseData or dataSignature is null.\\\");\\n                logDebug(\\\"Extras: \\\" + data.getExtras().toString());\\n                result = new IabResult(IABHELPER_UNKNOWN_ERROR, \\\"IAB returned null purchaseData or dataSignature\\\");\\n                if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n                return true;\\n            }\\n\\n            Purchase purchase = null;\\n            try {\\n                purchase = new Purchase(mPurchasingItemType, purchaseData, dataSignature);\\n                String sku = purchase.getSku();\\n\\n                // Verify signature\\n                if (!Security.verifyPurchase(mSignatureBase64, purchaseData, dataSignature)) {\\n                    logError(\\\"Purchase signature verification FAILED for sku \\\" + sku);\\n                    result = new IabResult(IABHELPER_VERIFICATION_FAILED, \\\"Signature verification failed for sku \\\" + sku);\\n                    if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, purchase);\\n                    return true;\\n                }\\n                logDebug(\\\"Purchase signature successfully verified.\\\");\\n            }\\n            catch (JSONException e) {\\n                logError(\\\"Failed to parse purchase data.\\\");\\n                e.printStackTrace();\\n                result = new IabResult(IABHELPER_BAD_RESPONSE, \\\"Failed to parse purchase data.\\\");\\n                if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n                return true;\\n            }\\n\\n            if (mPurchaseListener != null) {\\n                mPurchaseListener.onIabPurchaseFinished(new IabResult(BILLING_RESPONSE_RESULT_OK, \\\"Success\\\"), purchase);\\n            }\\n        }\\n        else if (resultCode == Activity.RESULT_OK) {\\n            // result code was OK, but in-app billing response was not OK.\\n            logDebug(\\\"Result code was OK but in-app billing response was not OK: \\\" + getResponseDesc(responseCode));\\n            if (mPurchaseListener != null) {\\n                result = new IabResult(responseCode, \\\"Problem purchashing item.\\\");\\n                mPurchaseListener.onIabPurchaseFinished(result, null);\\n            }\\n        }\\n        else if (resultCode == Activity.RESULT_CANCELED) {\\n            logDebug(\\\"Purchase canceled - Response: \\\" + getResponseDesc(responseCode));\\n            result = new IabResult(IABHELPER_USER_CANCELLED, \\\"User canceled.\\\");\\n            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n        }\\n        else {\\n            logError(\\\"Purchase failed. Result code: \\\" + Integer.toString(resultCode)\\n                    + \\\". Response: \\\" + getResponseDesc(responseCode));\\n            result = new IabResult(IABHELPER_UNKNOWN_PURCHASE_RESPONSE, \\\"Unknown purchase response.\\\");\\n            if (mPurchaseListener != null) mPurchaseListener.onIabPurchaseFinished(result, null);\\n        }\\n        return true;\\n    }\\n\\n    public Inventory queryInventory(boolean querySkuDetails, List<String> moreSkus) throws IabException {\\n        return queryInventory(querySkuDetails, moreSkus, null);\\n    }\\n\\n    /**\\n     * Queries the inventory. This will query all owned items from the server, as well as\\n     * information on additional skus, if specified. This method may block or take long to execute.\\n     * Do not call from a UI thread. For that, use the non-blocking version {@link #refreshInventoryAsync}.\\n     *\\n     * @param querySkuDetails if true, SKU details (price, description, etc) will be queried as well\\n     *     as purchase information.\\n     * @param moreItemSkus additional PRODUCT skus to query information on, regardless of ownership.\\n     *     Ignored if null or if querySkuDetails is false.\\n     * @param moreSubsSkus additional SUBSCRIPTIONS skus to query information on, regardless of ownership.\\n     *     Ignored if null or if querySkuDetails is false.\\n     * @throws IabException if a problem occurs while refreshing the inventory.\\n     */\\n    public Inventory queryInventory(boolean querySkuDetails, List<String> moreItemSkus,\\n                                        List<String> moreSubsSkus) throws IabException {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"queryInventory\\\");\\n        try {\\n            Inventory inv = new Inventory();\\n            int r = queryPurchases(inv, ITEM_TYPE_INAPP);\\n            if (r != BILLING_RESPONSE_RESULT_OK) {\\n                throw new IabException(r, \\\"Error refreshing inventory (querying owned items).\\\");\\n            }\\n\\n            if (querySkuDetails) {\\n                r = querySkuDetails(ITEM_TYPE_INAPP, inv, moreItemSkus);\\n                if (r != BILLING_RESPONSE_RESULT_OK) {\\n                    throw new IabException(r, \\\"Error refreshing inventory (querying prices of items).\\\");\\n                }\\n            }\\n\\n            // if subscriptions are supported, then also query for subscriptions\\n            if (mSubscriptionsSupported) {\\n                r = queryPurchases(inv, ITEM_TYPE_SUBS);\\n                if (r != BILLING_RESPONSE_RESULT_OK) {\\n                    throw new IabException(r, \\\"Error refreshing inventory (querying owned subscriptions).\\\");\\n                }\\n\\n                if (querySkuDetails) {\\n                    r = querySkuDetails(ITEM_TYPE_SUBS, inv, moreItemSkus);\\n                    if (r != BILLING_RESPONSE_RESULT_OK) {\\n                        throw new IabException(r, \\\"Error refreshing inventory (querying prices of subscriptions).\\\");\\n                    }\\n                }\\n            }\\n\\n            return inv;\\n        }\\n        catch (RemoteException e) {\\n            throw new IabException(IABHELPER_REMOTE_EXCEPTION, \\\"Remote exception while refreshing inventory.\\\", e);\\n        }\\n        catch (JSONException e) {\\n            throw new IabException(IABHELPER_BAD_RESPONSE, \\\"Error parsing JSON response while refreshing inventory.\\\", e);\\n        }\\n    }\\n\\n    /**\\n     * Listener that notifies when an inventory query operation completes.\\n     */\\n    public interface QueryInventoryFinishedListener {\\n        /**\\n         * Called to notify that an inventory query operation completed.\\n         *\\n         * @param result The result of the operation.\\n         * @param inv The inventory.\\n         */\\n        public void onQueryInventoryFinished(IabResult result, Inventory inv);\\n    }\\n\\n\\n    /**\\n     * Asynchronous wrapper for inventory query. This will perform an inventory\\n     * query as described in {@link #queryInventory}, but will do so asynchronously\\n     * and call back the specified listener upon completion. This method is safe to\\n     * call from a UI thread.\\n     *\\n     * @param querySkuDetails as in {@link #queryInventory}\\n     * @param moreSkus as in {@link #queryInventory}\\n     * @param listener The listener to notify when the refresh operation completes.\\n     */\\n    public void queryInventoryAsync(final boolean querySkuDetails,\\n                               final List<String> moreSkus,\\n                               final QueryInventoryFinishedListener listener) {\\n        final Handler handler = new Handler();\\n        checkNotDisposed();\\n        checkSetupDone(\\\"queryInventory\\\");\\n        flagStartAsync(\\\"refresh inventory\\\");\\n        (new Thread(new Runnable() {\\n            public void run() {\\n                IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, \\\"Inventory refresh successful.\\\");\\n                Inventory inv = null;\\n                try {\\n                    inv = queryInventory(querySkuDetails, moreSkus);\\n                }\\n                catch (IabException ex) {\\n                    result = ex.getResult();\\n                }\\n\\n                flagEndAsync();\\n\\n                final IabResult result_f = result;\\n                final Inventory inv_f = inv;\\n                if (!mDisposed && listener != null) {\\n                    handler.post(new Runnable() {\\n                        public void run() {\\n                            listener.onQueryInventoryFinished(result_f, inv_f);\\n                        }\\n                    });\\n                }\\n            }\\n        })).start();\\n    }\\n\\n    public void queryInventoryAsync(QueryInventoryFinishedListener listener) {\\n        queryInventoryAsync(true, null, listener);\\n    }\\n\\n    public void queryInventoryAsync(boolean querySkuDetails, QueryInventoryFinishedListener listener) {\\n        queryInventoryAsync(querySkuDetails, null, listener);\\n    }\\n\\n\\n    /**\\n     * Consumes a given in-app product. Consuming can only be done on an item\\n     * that's owned, and as a result of consumption, the user will no longer own it.\\n     * This method may block or take long to return. Do not call from the UI thread.\\n     * For that, see {@link #consumeAsync}.\\n     *\\n     * @param itemInfo The PurchaseInfo that represents the item to consume.\\n     * @throws IabException if there is a problem during consumption.\\n     */\\n    void consume(Purchase itemInfo) throws IabException {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"consume\\\");\\n\\n        if (!itemInfo.mItemType.equals(ITEM_TYPE_INAPP)) {\\n            throw new IabException(IABHELPER_INVALID_CONSUMPTION,\\n                    \\\"Items of type '\\\" + itemInfo.mItemType + \\\"' can't be consumed.\\\");\\n        }\\n\\n        try {\\n            String token = itemInfo.getToken();\\n            String sku = itemInfo.getSku();\\n            if (token == null || token.equals(\\\"\\\")) {\\n               logError(\\\"Can't consume \\\"+ sku + \\\". No token.\\\");\\n               throw new IabException(IABHELPER_MISSING_TOKEN, \\\"PurchaseInfo is missing token for sku: \\\"\\n                   + sku + \\\" \\\" + itemInfo);\\n            }\\n\\n            logDebug(\\\"Consuming sku: \\\" + sku + \\\", token: \\\" + token);\\n            int response = mService.consumePurchase(3, mContext.getPackageName(), token);\\n            if (response == BILLING_RESPONSE_RESULT_OK) {\\n               logDebug(\\\"Successfully consumed sku: \\\" + sku);\\n            }\\n            else {\\n               logDebug(\\\"Error consuming consuming sku \\\" + sku + \\\". \\\" + getResponseDesc(response));\\n               throw new IabException(response, \\\"Error consuming sku \\\" + sku);\\n            }\\n        }\\n        catch (RemoteException e) {\\n            throw new IabException(IABHELPER_REMOTE_EXCEPTION, \\\"Remote exception while consuming. PurchaseInfo: \\\" + itemInfo, e);\\n        }\\n    }\\n\\n    /**\\n     * Callback that notifies when a consumption operation finishes.\\n     */\\n    public interface OnConsumeFinishedListener {\\n        /**\\n         * Called to notify that a consumption has finished.\\n         *\\n         * @param purchase The purchase that was (or was to be) consumed.\\n         * @param result The result of the consumption operation.\\n         */\\n        public void onConsumeFinished(Purchase purchase, IabResult result);\\n    }\\n\\n    /**\\n     * Callback that notifies when a multi-item consumption operation finishes.\\n     */\\n    public interface OnConsumeMultiFinishedListener {\\n        /**\\n         * Called to notify that a consumption of multiple items has finished.\\n         *\\n         * @param purchases The purchases that were (or were to be) consumed.\\n         * @param results The results of each consumption operation, corresponding to each\\n         *     sku.\\n         */\\n        public void onConsumeMultiFinished(List<Purchase> purchases, List<IabResult> results);\\n    }\\n\\n    /**\\n     * Asynchronous wrapper to item consumption. Works like {@link #consume}, but\\n     * performs the consumption in the background and notifies completion through\\n     * the provided listener. This method is safe to call from a UI thread.\\n     *\\n     * @param purchase The purchase to be consumed.\\n     * @param listener The listener to notify when the consumption operation finishes.\\n     */\\n    public void consumeAsync(Purchase purchase, OnConsumeFinishedListener listener) {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"consume\\\");\\n        List<Purchase> purchases = new ArrayList<Purchase>();\\n        purchases.add(purchase);\\n        consumeAsyncInternal(purchases, listener, null);\\n    }\\n\\n    /**\\n     * Same as {@link consumeAsync}, but for multiple items at once.\\n     * @param purchases The list of PurchaseInfo objects representing the purchases to consume.\\n     * @param listener The listener to notify when the consumption operation finishes.\\n     */\\n    public void consumeAsync(List<Purchase> purchases, OnConsumeMultiFinishedListener listener) {\\n        checkNotDisposed();\\n        checkSetupDone(\\\"consume\\\");\\n        consumeAsyncInternal(purchases, null, listener);\\n    }\\n\\n    /**\\n     * Returns a human-readable description for the given response code.\\n     *\\n     * @param code The response code\\n     * @return A human-readable string explaining the result code.\\n     *     It also includes the result code numerically.\\n     */\\n    public static String getResponseDesc(int code) {\\n        String[] iab_msgs = (\\\"0:OK/1:User Canceled/2:Unknown/\\\" +\\n                \\\"3:Billing Unavailable/4:Item unavailable/\\\" +\\n                \\\"5:Developer Error/6:Error/7:Item Already Owned/\\\" +\\n                \\\"8:Item not owned\\\").split(\\\"/\\\");\\n        String[] iabhelper_msgs = (\\\"0:OK/-1001:Remote exception during initialization/\\\" +\\n                                   \\\"-1002:Bad response received/\\\" +\\n                                   \\\"-1003:Purchase signature verification failed/\\\" +\\n                                   \\\"-1004:Send intent failed/\\\" +\\n                                   \\\"-1005:User cancelled/\\\" +\\n                                   \\\"-1006:Unknown purchase response/\\\" +\\n                                   \\\"-1007:Missing token/\\\" +\\n                                   \\\"-1008:Unknown error/\\\" +\\n                                   \\\"-1009:Subscriptions not available/\\\" +\\n                                   \\\"-1010:Invalid consumption attempt\\\").split(\\\"/\\\");\\n\\n        if (code <= IABHELPER_ERROR_BASE) {\\n            int index = IABHELPER_ERROR_BASE - code;\\n            if (index >= 0 && index < iabhelper_msgs.length) return iabhelper_msgs[index];\\n            else return String.valueOf(code) + \\\":Unknown IAB Helper Error\\\";\\n        }\\n        else if (code < 0 || code >= iab_msgs.length)\\n            return String.valueOf(code) + \\\":Unknown\\\";\\n        else\\n            return iab_msgs[code];\\n    }\\n\\n\\n    // Checks that setup was done; if not, throws an exception.\\n    void checkSetupDone(String operation) {\\n        if (!mSetupDone) {\\n            logError(\\\"Illegal state for operation (\\\" + operation + \\\"): IAB helper is not set up.\\\");\\n            throw new IllegalStateException(\\\"IAB helper is not set up. Can't perform operation: \\\" + operation);\\n        }\\n    }\\n\\n    // Workaround to bug where sometimes response codes come as Long instead of Integer\\n    int getResponseCodeFromBundle(Bundle b) {\\n        Object o = b.get(RESPONSE_CODE);\\n        if (o == null) {\\n            logDebug(\\\"Bundle with null response code, assuming OK (known issue)\\\");\\n            return BILLING_RESPONSE_RESULT_OK;\\n        }\\n        else if (o instanceof Integer) return ((Integer)o).intValue();\\n        else if (o instanceof Long) return (int)((Long)o).longValue();\\n        else {\\n            logError(\\\"Unexpected type for bundle response code.\\\");\\n            logError(o.getClass().getName());\\n            throw new RuntimeException(\\\"Unexpected type for bundle response code: \\\" + o.getClass().getName());\\n        }\\n    }\\n\\n    // Workaround to bug where sometimes response codes come as Long instead of Integer\\n    int getResponseCodeFromIntent(Intent i) {\\n        Object o = i.getExtras().get(RESPONSE_CODE);\\n        if (o == null) {\\n            logError(\\\"Intent with no response code, assuming OK (known issue)\\\");\\n            return BILLING_RESPONSE_RESULT_OK;\\n        }\\n        else if (o instanceof Integer) return ((Integer)o).intValue();\\n        else if (o instanceof Long) return (int)((Long)o).longValue();\\n        else {\\n            logError(\\\"Unexpected type for intent response code.\\\");\\n            logError(o.getClass().getName());\\n            throw new RuntimeException(\\\"Unexpected type for intent response code: \\\" + o.getClass().getName());\\n        }\\n    }\\n\\n    void flagStartAsync(String operation) {\\n        if (mAsyncInProgress) throw new IllegalStateException(\\\"Can't start async operation (\\\" +\\n                operation + \\\") because another async operation(\\\" + mAsyncOperation + \\\") is in progress.\\\");\\n        mAsyncOperation = operation;\\n        mAsyncInProgress = true;\\n        logDebug(\\\"Starting async operation: \\\" + operation);\\n    }\\n\\n    public void flagEndAsync() {\\n        logDebug(\\\"Ending async operation: \\\" + mAsyncOperation);\\n        mAsyncOperation = \\\"\\\";\\n        mAsyncInProgress = false;\\n    }\\n\\n\\n    int queryPurchases(Inventory inv, String itemType) throws JSONException, RemoteException {\\n        // Query purchases\\n\\n        if (mService == null || mContext == null) {\\n            logError(\\\"Our service and/or our context are null.  Exiting.\\\");\\n            return IABHELPER_UNKNOWN_ERROR;\\n        }\\n\\n        logDebug(\\\"Querying owned items, item type: \\\" + itemType);\\n        logDebug(\\\"Package name: \\\" + mContext.getPackageName());\\n        boolean verificationFailed = false;\\n        String continueToken = null;\\n\\n        do {\\n            logDebug(\\\"Calling getPurchases with continuation token: \\\" + continueToken);\\n            Bundle ownedItems = mService.getPurchases(3, mContext.getPackageName(),\\n                    itemType, continueToken);\\n\\n            int response = getResponseCodeFromBundle(ownedItems);\\n            logDebug(\\\"Owned items response: \\\" + String.valueOf(response));\\n            if (response != BILLING_RESPONSE_RESULT_OK) {\\n                logDebug(\\\"getPurchases() failed: \\\" + getResponseDesc(response));\\n                return response;\\n            }\\n            if (!ownedItems.containsKey(RESPONSE_INAPP_ITEM_LIST)\\n                    || !ownedItems.containsKey(RESPONSE_INAPP_PURCHASE_DATA_LIST)\\n                    || !ownedItems.containsKey(RESPONSE_INAPP_SIGNATURE_LIST)) {\\n                logError(\\\"Bundle returned from getPurchases() doesn't contain required fields.\\\");\\n                return IABHELPER_BAD_RESPONSE;\\n            }\\n\\n            ArrayList<String> ownedSkus = ownedItems.getStringArrayList(\\n                        RESPONSE_INAPP_ITEM_LIST);\\n            ArrayList<String> purchaseDataList = ownedItems.getStringArrayList(\\n                        RESPONSE_INAPP_PURCHASE_DATA_LIST);\\n            ArrayList<String> signatureList = ownedItems.getStringArrayList(\\n                        RESPONSE_INAPP_SIGNATURE_LIST);\\n\\n            for (int i = 0; i < purchaseDataList.size(); ++i) {\\n                String purchaseData = purchaseDataList.get(i);\\n                String signature = signatureList.get(i);\\n                String sku = ownedSkus.get(i);\\n                if (Security.verifyPurchase(mSignatureBase64, purchaseData, signature)) {\\n                    logDebug(\\\"Sku is owned: \\\" + sku);\\n                    Purchase purchase = new Purchase(itemType, purchaseData, signature);\\n\\n                    if (TextUtils.isEmpty(purchase.getToken())) {\\n                        logWarn(\\\"BUG: empty/null token!\\\");\\n                        logDebug(\\\"Purchase data: \\\" + purchaseData);\\n                    }\\n\\n                    // Record ownership and token\\n                    inv.addPurchase(purchase);\\n                }\\n                else {\\n                    logWarn(\\\"Purchase signature verification **FAILED**. Not adding item.\\\");\\n                    logDebug(\\\"   Purchase data: \\\" + purchaseData);\\n                    logDebug(\\\"   Signature: \\\" + signature);\\n                    verificationFailed = true;\\n                }\\n            }\\n\\n            continueToken = ownedItems.getString(INAPP_CONTINUATION_TOKEN);\\n            logDebug(\\\"Continuation token: \\\" + continueToken);\\n        } while (!TextUtils.isEmpty(continueToken));\\n\\n        return verificationFailed ? IABHELPER_VERIFICATION_FAILED : BILLING_RESPONSE_RESULT_OK;\\n    }\\n\\n    int querySkuDetails(String itemType, Inventory inv, List<String> moreSkus)\\n                                throws RemoteException, JSONException {\\n        logDebug(\\\"Querying SKU details.\\\");\\n        ArrayList<String> skuList = new ArrayList<String>();\\n        skuList.addAll(inv.getAllOwnedSkus(itemType));\\n        if (moreSkus != null) {\\n            for (String sku : moreSkus) {\\n                if (!skuList.contains(sku)) {\\n                    skuList.add(sku);\\n                }\\n            }\\n        }\\n\\n        if (skuList.size() == 0) {\\n            logDebug(\\\"queryPrices: nothing to do because there are no SKUs.\\\");\\n            return BILLING_RESPONSE_RESULT_OK;\\n        }\\n\\n        Bundle querySkus = new Bundle();\\n        querySkus.putStringArrayList(GET_SKU_DETAILS_ITEM_LIST, skuList);\\n        Bundle skuDetails = mService.getSkuDetails(3, mContext.getPackageName(),\\n                itemType, querySkus);\\n\\n        if (!skuDetails.containsKey(RESPONSE_GET_SKU_DETAILS_LIST)) {\\n            int response = getResponseCodeFromBundle(skuDetails);\\n            if (response != BILLING_RESPONSE_RESULT_OK) {\\n                logDebug(\\\"getSkuDetails() failed: \\\" + getResponseDesc(response));\\n                return response;\\n            }\\n            else {\\n                logError(\\\"getSkuDetails() returned a bundle with neither an error nor a detail list.\\\");\\n                return IABHELPER_BAD_RESPONSE;\\n            }\\n        }\\n\\n        ArrayList<String> responseList = skuDetails.getStringArrayList(\\n                RESPONSE_GET_SKU_DETAILS_LIST);\\n\\n        for (String thisResponse : responseList) {\\n            SkuDetails d = new SkuDetails(itemType, thisResponse);\\n            logDebug(\\\"Got sku details: \\\" + d);\\n            inv.addSkuDetails(d);\\n        }\\n        return BILLING_RESPONSE_RESULT_OK;\\n    }\\n\\n\\n    void consumeAsyncInternal(final List<Purchase> purchases,\\n                              final OnConsumeFinishedListener singleListener,\\n                              final OnConsumeMultiFinishedListener multiListener) {\\n        final Handler handler = new Handler();\\n        flagStartAsync(\\\"consume\\\");\\n        (new Thread(new Runnable() {\\n            public void run() {\\n                final List<IabResult> results = new ArrayList<IabResult>();\\n                for (Purchase purchase : purchases) {\\n                    try {\\n                        consume(purchase);\\n                        results.add(new IabResult(BILLING_RESPONSE_RESULT_OK, \\\"Successful consume of sku \\\" + purchase.getSku()));\\n                    }\\n                    catch (IabException ex) {\\n                        results.add(ex.getResult());\\n                    }\\n                }\\n\\n                flagEndAsync();\\n                if (!mDisposed && singleListener != null) {\\n                    handler.post(new Runnable() {\\n                        public void run() {\\n                            singleListener.onConsumeFinished(purchases.get(0), results.get(0));\\n                        }\\n                    });\\n                }\\n                if (!mDisposed && multiListener != null) {\\n                    handler.post(new Runnable() {\\n                        public void run() {\\n                            multiListener.onConsumeMultiFinished(purchases, results);\\n                        }\\n                    });\\n                }\\n            }\\n        })).start();\\n    }\\n\\n    void logDebug(String msg) {\\n        if (mDebugLog) Log.d(mDebugTag, msg);\\n    }\\n\\n    void logError(String msg) {\\n        Log.e(mDebugTag, \\\"In-app billing error: \\\" + msg);\\n    }\\n\\n    void logWarn(String msg) {\\n        Log.w(mDebugTag, \\\"In-app billing warning: \\\" + msg);\\n    }\\n\\n    public boolean isAsyncInProgress(){\\n        return mAsyncInProgress;\\n    }\\n    public boolean isSetupDone (){\\n        return mSetupDone;\\n    }\\n    public boolean isDisposed (){\\n        return mDisposed;\\n    }\\n}\"}, {\"identifier\":\"IabResult\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/iap/IabResult.java\", \"snippet\":\"public class IabResult {\\n    int mResponse;\\n    String mMessage;\\n\\n    public IabResult(int response, String message) {\\n        mResponse = response;\\n        if (message == null || message.trim().length() == 0) {\\n            mMessage = IabHelper.getResponseDesc(response);\\n        }\\n        else {\\n            mMessage = message + \\\" (response: \\\" + IabHelper.getResponseDesc(response) + \\\")\\\";\\n        }\\n    }\\n    public int getResponse() { return mResponse; }\\n    public String getMessage() { return mMessage; }\\n    public boolean isSuccess() { return mResponse == IabHelper.BILLING_RESPONSE_RESULT_OK; }\\n    public boolean isFailure() { return !isSuccess(); }\\n    public String toString() { return \\\"IabResult: \\\" + getMessage(); }\\n}\"}, {\"identifier\":\"Inventory\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/iap/Inventory.java\", \"snippet\":\"public class Inventory {\\n    Map<String,SkuDetails> mSkuMap = new HashMap<String,SkuDetails>();\\n    Map<String,Purchase> mPurchaseMap = new HashMap<String,Purchase>();\\n\\n    Inventory() { }\\n\\n    /** Returns the listing details for an in-app product. */\\n    public SkuDetails getSkuDetails(String sku) {\\n        return mSkuMap.get(sku);\\n    }\\n\\n    /** Returns purchase information for a given product, or null if there is no purchase. */\\n    public Purchase getPurchase(String sku) {\\n        return mPurchaseMap.get(sku);\\n    }\\n\\n    /** Returns whether or not there exists a purchase of the given product. */\\n    public boolean hasPurchase(String sku) {\\n        return mPurchaseMap.containsKey(sku);\\n    }\\n\\n    /** Return whether or not details about the given product are available. */\\n    public boolean hasDetails(String sku) {\\n        return mSkuMap.containsKey(sku);\\n    }\\n\\n    /**\\n     * Erase a purchase (locally) from the inventory, given its product ID. This just\\n     * modifies the Inventory object locally and has no effect on the server! This is\\n     * useful when you have an existing Inventory object which you know to be up to date,\\n     * and you have just consumed an item successfully, which means that erasing its\\n     * purchase data from the Inventory you already have is quicker than querying for\\n     * a new Inventory.\\n     */\\n    public void erasePurchase(String sku) {\\n        if (mPurchaseMap.containsKey(sku)) mPurchaseMap.remove(sku);\\n    }\\n\\n    /** Returns a list of all owned product IDs. */\\n    List<String> getAllOwnedSkus() {\\n        return new ArrayList<String>(mPurchaseMap.keySet());\\n    }\\n\\n    /** Returns a list of all owned product IDs of a given type */\\n    List<String> getAllOwnedSkus(String itemType) {\\n        List<String> result = new ArrayList<String>();\\n        for (Purchase p : mPurchaseMap.values()) {\\n            if (p.getItemType().equals(itemType)) result.add(p.getSku());\\n        }\\n        return result;\\n    }\\n\\n    /** Returns a list of all purchases. */\\n    List<Purchase> getAllPurchases() {\\n        return new ArrayList<Purchase>(mPurchaseMap.values());\\n    }\\n\\n    void addSkuDetails(SkuDetails d) {\\n        mSkuMap.put(d.getSku(), d);\\n    }\\n\\n    void addPurchase(Purchase p) {\\n        mPurchaseMap.put(p.getSku(), p);\\n    }\\n}\"}, {\"identifier\":\"Purchase\", \"path\":\"Android-code/app/src/main/java/com/vasilkoff/easyvpnfree/util/iap/Purchase.java\", \"snippet\":\"public class Purchase {\\n    String mItemType;  // ITEM_TYPE_INAPP or ITEM_TYPE_SUBS\\n    String mOrderId;\\n    String mPackageName;\\n    String mSku;\\n    long mPurchaseTime;\\n    int mPurchaseState;\\n    String mDeveloperPayload;\\n    String mToken;\\n    String mOriginalJson;\\n    String mSignature;\\n\\n    public Purchase(String itemType, String jsonPurchaseInfo, String signature) throws JSONException {\\n        mItemType = itemType;\\n        mOriginalJson = jsonPurchaseInfo;\\n        JSONObject o = new JSONObject(mOriginalJson);\\n        mOrderId = o.optString(\\\"orderId\\\");\\n        mPackageName = o.optString(\\\"packageName\\\");\\n        mSku = o.optString(\\\"productId\\\");\\n        mPurchaseTime = o.optLong(\\\"purchaseTime\\\");\\n        mPurchaseState = o.optInt(\\\"purchaseState\\\");\\n        mDeveloperPayload = o.optString(\\\"developerPayload\\\");\\n        mToken = o.optString(\\\"token\\\", o.optString(\\\"purchaseToken\\\"));\\n        mSignature = signature;\\n    }\\n\\n    public String getItemType() { return mItemType; }\\n    public String getOrderId() { return mOrderId; }\\n    public String getPackageName() { return mPackageName; }\\n    public String getSku() { return mSku; }\\n    public long getPurchaseTime() { return mPurchaseTime; }\\n    public int getPurchaseState() { return mPurchaseState; }\\n    public String getDeveloperPayload() { return mDeveloperPayload; }\\n    public String getToken() { return mToken; }\\n    public String getOriginalJson() { return mOriginalJson; }\\n    public String getSignature() { return mSignature; }\\n\\n    @Override\\n    public String toString() { return \\\"PurchaseInfo(type:\\\" + mItemType + \\\"):\\\" + mOriginalJson; }\\n}\"}, {\"identifier\":\"VpnStatus\", \"path\":\"Android-code/app/src/main/java/de/blinkt/openvpn/core/VpnStatus.java\", \"snippet\":\"public class VpnStatus {\\n\\n\\n    public static LinkedList<LogItem> logbuffer;\\n\\n    private static Vector<LogListener> logListener;\\n    private static Vector<StateListener> stateListener;\\n    private static Vector<ByteCountListener> byteCountListener;\\n\\n    private static String mLaststatemsg = \\\"\\\";\\n\\n    private static String mLaststate = \\\"NOPROCESS\\\";\\n\\n    private static int mLastStateresid = R.string.state_noprocess;\\n\\n    private static long mlastByteCount[] = {0, 0, 0, 0};\\n    private static HandlerThread mHandlerThread;\\n\\n    public static void logException(LogLevel ll, String context, Exception e) {\\n        StringWriter sw = new StringWriter();\\n        e.printStackTrace(new PrintWriter(sw));\\n        LogItem li;\\n        if (context != null) {\\n            li = new LogItem(ll, R.string.unhandled_exception_context, e.getMessage(), sw.toString(), context);\\n        } else {\\n            li = new LogItem(ll, R.string.unhandled_exception, e.getMessage(), sw.toString());\\n        }\\n        newLogItem(li);\\n    }\\n\\n    public static void logException(Exception e) {\\n        logException(LogLevel.ERROR, null, e);\\n    }\\n\\n    public static void logException(String context, Exception e) {\\n        logException(LogLevel.ERROR, context, e);\\n    }\\n\\n    static final int MAXLOGENTRIES = 1000;\\n\\n    public static boolean isVPNActive() {\\n        return mLastLevel != ConnectionStatus.LEVEL_AUTH_FAILED && !(mLastLevel == ConnectionStatus.LEVEL_NOTCONNECTED);\\n    }\\n\\n    public static String getLastCleanLogMessage(Context c) {\\n        String message = mLaststatemsg;\\n        switch (mLastLevel) {\\n            case LEVEL_CONNECTED:\\n                String[] parts = mLaststatemsg.split(\\\",\\\");\\n                /*\\n                   (a) the integer unix date/time,\\n                   (b) the state name,\\n                   0 (c) optional descriptive string (used mostly on RECONNECTING\\n                    and EXITING to show the reason for the disconnect),\\n\\n                    1 (d) optional TUN/TAP local IPv4 address\\n                   2 (e) optional address of remote server,\\n                   3 (f) optional port of remote server,\\n                   4 (g) optional local address,\\n                   5 (h) optional local port, and\\n                   6 (i) optional TUN/TAP local IPv6 address.\\n*/\\n                // Return only the assigned IP addresses in the UI\\n                if (parts.length >= 7)\\n                    message = String.format(Locale.US, \\\"%s %s\\\", parts[1], parts[6]);\\n                break;\\n        }\\n\\n        while (message.endsWith(\\\",\\\"))\\n            message = message.substring(0, message.length() - 1);\\n\\n        String status = mLaststate;\\n        if (status.equals(\\\"NOPROCESS\\\"))\\n            return message;\\n\\n        if (mLastStateresid == R.string.state_waitconnectretry) {\\n            return c.getString(R.string.state_waitconnectretry, mLaststatemsg);\\n        }\\n\\n        String prefix = c.getString(mLastStateresid);\\n        if (mLastStateresid == R.string.unknown_state)\\n            message = status + message;\\n        if (message.length() > 0)\\n            prefix += \\\": \\\";\\n\\n        return prefix + message;\\n\\n    }\\n\\n    public static void initLogCache(File cacheDir) {\\n        mHandlerThread = new HandlerThread(\\\"LogFileWriter\\\", Thread.MIN_PRIORITY);\\n        mHandlerThread.start();\\n        mLogFileHandler = new LogFileHandler(mHandlerThread.getLooper());\\n\\n\\n        Message m = mLogFileHandler.obtainMessage(LogFileHandler.LOG_INIT, cacheDir);\\n        mLogFileHandler.sendMessage(m);\\n\\n    }\\n\\n    public static void flushLog() {\\n        if (mLogFileHandler != null)\\n            mLogFileHandler.sendEmptyMessage(LogFileHandler.FLUSH_TO_DISK);\\n    }\\n\\n    public enum ConnectionStatus {\\n        LEVEL_CONNECTED,\\n        LEVEL_VPNPAUSED,\\n        LEVEL_CONNECTING_SERVER_REPLIED,\\n        LEVEL_CONNECTING_NO_SERVER_REPLY_YET,\\n        LEVEL_NONETWORK,\\n        LEVEL_NOTCONNECTED,\\n        LEVEL_START,\\n        LEVEL_AUTH_FAILED,\\n        LEVEL_WAITING_FOR_USER_INPUT,\\n        UNKNOWN_LEVEL\\n    }\\n\\n    public enum LogLevel {\\n        INFO(2),\\n        ERROR(-2),\\n        WARNING(1),\\n        VERBOSE(3),\\n        DEBUG(4);\\n\\n        protected int mValue;\\n\\n        LogLevel(int value) {\\n            mValue = value;\\n        }\\n\\n        public int getInt() {\\n            return mValue;\\n        }\\n\\n        public static LogLevel getEnumByValue(int value) {\\n            switch (value) {\\n                case 1:\\n                    return INFO;\\n                case 2:\\n                    return ERROR;\\n                case 3:\\n                    return WARNING;\\n                case 4:\\n                    return DEBUG;\\n                default:\\n                    return null;\\n            }\\n        }\\n    }\\n\\n    // keytool -printcert -jarfile de.blinkt.openvpn_85.apk\\n    public static final byte[] officalkey = {-58, -42, -44, -106, 90, -88, -87, -88, -52, -124, 84, 117, 66, 79, -112, -111, -46, 86, -37, 109};\\n    public static final byte[] officaldebugkey = {-99, -69, 45, 71, 114, -116, 82, 66, -99, -122, 50, -70, -56, -111, 98, -35, -65, 105, 82, 43};\\n    public static final byte[] amazonkey = {-116, -115, -118, -89, -116, -112, 120, 55, 79, -8, -119, -23, 106, -114, -85, -56, -4, 105, 26, -57};\\n    public static final byte[] fdroidkey = {-92, 111, -42, -46, 123, -96, -60, 79, -27, -31, 49, 103, 11, -54, -68, -27, 17, 2, 121, 104};\\n\\n\\n    private static ConnectionStatus mLastLevel = ConnectionStatus.LEVEL_NOTCONNECTED;\\n\\n    private static LogFileHandler mLogFileHandler;\\n\\n    static {\\n        logbuffer = new LinkedList<>();\\n        logListener = new Vector<>();\\n        stateListener = new Vector<>();\\n        byteCountListener = new Vector<>();\\n\\n\\n        logInformation();\\n\\n    }\\n\\n\\n    public interface LogListener {\\n        void newLog(LogItem logItem);\\n    }\\n\\n    public interface StateListener {\\n        void updateState(String state, String logmessage, int localizedResId, ConnectionStatus level);\\n    }\\n\\n    public interface ByteCountListener {\\n        void updateByteCount(long in, long out, long diffIn, long diffOut);\\n    }\\n\\n    public synchronized static void logMessage(LogLevel level, String prefix, String message) {\\n        newLogItem(new LogItem(level, prefix + message));\\n\\n    }\\n\\n    public synchronized static void clearLog() {\\n        logbuffer.clear();\\n        logInformation();\\n        if (mLogFileHandler != null)\\n            mLogFileHandler.sendEmptyMessage(LogFileHandler.TRIM_LOG_FILE);\\n    }\\n\\n    private static void logInformation() {\\n      /*  String nativeAPI;\\n        try {\\n            nativeAPI = NativeUtils.getNativeAPI();\\n        } catch (UnsatisfiedLinkError ignore) {\\n            nativeAPI = \\\"error\\\";\\n        }\\n\\n        logInfo(R.string.mobile_info, Build.MODEL, Build.BOARD, Build.BRAND, Build.VERSION.SDK_INT,\\n                nativeAPI, Build.VERSION.RELEASE, Build.ID, Build.FINGERPRINT, \\\"\\\", \\\"\\\");*/\\n    }\\n\\n    public synchronized static void addLogListener(LogListener ll) {\\n        logListener.add(ll);\\n    }\\n\\n    public synchronized static void removeLogListener(LogListener ll) {\\n        logListener.remove(ll);\\n    }\\n\\n    public synchronized static void addByteCountListener(ByteCountListener bcl) {\\n        bcl.updateByteCount(mlastByteCount[0], mlastByteCount[1], mlastByteCount[2], mlastByteCount[3]);\\n        byteCountListener.add(bcl);\\n    }\\n\\n    public synchronized static void removeByteCountListener(ByteCountListener bcl) {\\n        byteCountListener.remove(bcl);\\n    }\\n\\n\\n    public synchronized static void addStateListener(StateListener sl) {\\n        if (!stateListener.contains(sl)) {\\n            stateListener.add(sl);\\n            if (mLaststate != null)\\n                sl.updateState(mLaststate, mLaststatemsg, mLastStateresid, mLastLevel);\\n        }\\n    }\\n\\n    private static int getLocalizedState(String state) {\\n        switch (state) {\\n            case \\\"CONNECTING\\\":\\n                return R.string.state_connecting;\\n            case \\\"WAIT\\\":\\n                return R.string.state_wait;\\n            case \\\"AUTH\\\":\\n                return R.string.state_auth;\\n            case \\\"GET_CONFIG\\\":\\n                return R.string.state_get_config;\\n            case \\\"ASSIGN_IP\\\":\\n                return R.string.state_assign_ip;\\n            case \\\"ADD_ROUTES\\\":\\n                return R.string.state_add_routes;\\n            case \\\"CONNECTED\\\":\\n                return R.string.state_connected;\\n            case \\\"DISCONNECTED\\\":\\n                return R.string.state_disconnected;\\n            case \\\"RECONNECTING\\\":\\n                return R.string.state_reconnecting;\\n            case \\\"EXITING\\\":\\n                return R.string.state_exiting;\\n            case \\\"RESOLVE\\\":\\n                return R.string.state_resolve;\\n            case \\\"TCP_CONNECT\\\":\\n                return R.string.state_tcp_connect;\\n            default:\\n                return R.string.unknown_state;\\n        }\\n\\n    }\\n\\n    public static void updateStatePause(OpenVPNManagement.pauseReason pauseReason) {\\n        switch (pauseReason) {\\n            case noNetwork:\\n                VpnStatus.updateStateString(\\\"NONETWORK\\\", \\\"\\\", R.string.state_nonetwork, ConnectionStatus.LEVEL_NONETWORK);\\n                break;\\n            case screenOff:\\n                VpnStatus.updateStateString(\\\"SCREENOFF\\\", \\\"\\\", R.string.state_screenoff, ConnectionStatus.LEVEL_VPNPAUSED);\\n                break;\\n            case userPause:\\n                VpnStatus.updateStateString(\\\"USERPAUSE\\\", \\\"\\\", R.string.state_userpause, ConnectionStatus.LEVEL_VPNPAUSED);\\n                break;\\n        }\\n\\n    }\\n\\n    private static ConnectionStatus getLevel(String state) {\\n        String[] noreplyet = {\\\"CONNECTING\\\", \\\"WAIT\\\", \\\"RECONNECTING\\\", \\\"RESOLVE\\\", \\\"TCP_CONNECT\\\"};\\n        String[] reply = {\\\"AUTH\\\", \\\"GET_CONFIG\\\", \\\"ASSIGN_IP\\\", \\\"ADD_ROUTES\\\"};\\n        String[] connected = {\\\"CONNECTED\\\"};\\n        String[] notconnected = {\\\"DISCONNECTED\\\", \\\"EXITING\\\"};\\n\\n        for (String x : noreplyet)\\n            if (state.equals(x))\\n                return ConnectionStatus.LEVEL_CONNECTING_NO_SERVER_REPLY_YET;\\n\\n        for (String x : reply)\\n            if (state.equals(x))\\n                return ConnectionStatus.LEVEL_CONNECTING_SERVER_REPLIED;\\n\\n        for (String x : connected)\\n            if (state.equals(x))\\n                return ConnectionStatus.LEVEL_CONNECTED;\\n\\n        for (String x : notconnected)\\n            if (state.equals(x))\\n                return ConnectionStatus.LEVEL_NOTCONNECTED;\\n\\n        return ConnectionStatus.UNKNOWN_LEVEL;\\n\\n    }\\n\\n\\n    public synchronized static void removeStateListener(StateListener sl) {\\n        stateListener.remove(sl);\\n    }\\n\\n\\n    synchronized public static LogItem[] getlogbuffer() {\\n\\n        // The stoned way of java to return an array from a vector\\n        // brought to you by eclipse auto complete\\n        return logbuffer.toArray(new LogItem[logbuffer.size()]);\\n\\n    }\\n\\n    public static void updateStateString(String state, String msg) {\\n        int rid = getLocalizedState(state);\\n        ConnectionStatus level = getLevel(state);\\n        updateStateString(state, msg, rid, level);\\n    }\\n\\n    public synchronized static void updateStateString(String state, String msg, int resid, ConnectionStatus level) {\\n        // Workound for OpenVPN doing AUTH and wait and being connected\\n        // Simply ignore these state\\n        if (mLastLevel == ConnectionStatus.LEVEL_CONNECTED &&\\n                (state.equals(\\\"WAIT\\\") || state.equals(\\\"AUTH\\\"))) {\\n            newLogItem(new LogItem((LogLevel.DEBUG), String.format(\\\"Ignoring OpenVPN Status in CONNECTED state (%s->%s): %s\\\", state, level.toString(), msg)));\\n            return;\\n        }\\n\\n        mLaststate = state;\\n        mLaststatemsg = msg;\\n        mLastStateresid = resid;\\n        mLastLevel = level;\\n\\n\\n        for (StateListener sl : stateListener) {\\n            sl.updateState(state, msg, resid, level);\\n        }\\n        //newLogItem(new LogItem((LogLevel.DEBUG), String.format(\\\"New OpenVPN Status (%s->%s): %s\\\",state,level.toString(),msg)));\\n    }\\n\\n    public static void logInfo(String message) {\\n        newLogItem(new LogItem(LogLevel.INFO, message));\\n    }\\n\\n    public static void logDebug(String message) {\\n        newLogItem(new LogItem(LogLevel.DEBUG, message));\\n    }\\n\\n    public static void logInfo(int resourceId, Object... args) {\\n        newLogItem(new LogItem(LogLevel.INFO, resourceId, args));\\n    }\\n\\n    public static void logDebug(int resourceId, Object... args) {\\n        newLogItem(new LogItem(LogLevel.DEBUG, resourceId, args));\\n    }\\n\\n    private static void newLogItem(LogItem logItem) {\\n        newLogItem(logItem, false);\\n    }\\n\\n\\n    synchronized static void newLogItem(LogItem logItem, boolean cachedLine) {\\n        if (cachedLine) {\\n            logbuffer.addFirst(logItem);\\n        } else {\\n            logbuffer.addLast(logItem);\\n            if (mLogFileHandler != null) {\\n                Message m = mLogFileHandler.obtainMessage(LogFileHandler.LOG_MESSAGE, logItem);\\n                mLogFileHandler.sendMessage(m);\\n            }\\n        }\\n\\n        if (logbuffer.size() > MAXLOGENTRIES + MAXLOGENTRIES / 2) {\\n            while (logbuffer.size() > MAXLOGENTRIES)\\n                logbuffer.removeFirst();\\n            if (mLogFileHandler != null)\\n                mLogFileHandler.sendMessage(mLogFileHandler.obtainMessage(LogFileHandler.TRIM_LOG_FILE));\\n        }\\n\\n        //if (BuildConfig.DEBUG && !cachedLine && !BuildConfig.FLAVOR.equals(\\\"test\\\"))\\n        //    Log.d(\\\"OpenVPN\\\", logItem.getString(null));\\n\\n\\n        for (LogListener ll : logListener) {\\n            ll.newLog(logItem);\\n        }\\n    }\\n\\n\\n    public static void logError(String msg) {\\n        newLogItem(new LogItem(LogLevel.ERROR, msg));\\n\\n    }\\n\\n    public static void logWarning(int resourceId, Object... args) {\\n        newLogItem(new LogItem(LogLevel.WARNING, resourceId, args));\\n    }\\n\\n    public static void logWarning(String msg) {\\n        newLogItem(new LogItem(LogLevel.WARNING, msg));\\n    }\\n\\n\\n    public static void logError(int resourceId) {\\n        newLogItem(new LogItem(LogLevel.ERROR, resourceId));\\n    }\\n\\n    public static void logError(int resourceId, Object... args) {\\n        newLogItem(new LogItem(LogLevel.ERROR, resourceId, args));\\n    }\\n\\n    public static void logMessageOpenVPN(LogLevel level, int ovpnlevel, String message) {\\n        newLogItem(new LogItem(level, ovpnlevel, message));\\n\\n    }\\n\\n\\n    public static synchronized void updateByteCount(long in, long out) {\\n        long lastIn = mlastByteCount[0];\\n        long lastOut = mlastByteCount[1];\\n        long diffIn = mlastByteCount[2] = Math.max(0, in - lastIn);\\n        long diffOut = mlastByteCount[3] = Math.max(0, out - lastOut);\\n\\n\\n        mlastByteCount = new long[]{in, out, diffIn, diffOut};\\n        for (ByteCountListener bcl : byteCountListener) {\\n            bcl.updateByteCount(in, out, diffIn, diffOut);\\n        }\\n    }\\n\\n\\n}\"}]", "import_statement": "import android.content.Intent;\nimport android.support.v4.widget.DrawerLayout;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.util.DisplayMetrics;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.FrameLayout;\nimport com.androidnetworking.AndroidNetworking;\nimport com.androidnetworking.common.Priority;\nimport com.androidnetworking.error.ANError;\nimport com.androidnetworking.interfaces.JSONArrayRequestListener;\nimport com.crashlytics.android.answers.Answers;\nimport com.crashlytics.android.answers.CustomEvent;\nimport com.google.android.gms.analytics.HitBuilders;\nimport com.google.android.gms.analytics.Tracker;\nimport com.vasilkoff.easyvpnfree.App;\nimport com.vasilkoff.easyvpnfree.BuildConfig;\nimport com.vasilkoff.easyvpnfree.R;\nimport com.vasilkoff.easyvpnfree.database.DBHelper;\nimport com.vasilkoff.easyvpnfree.model.Server;\nimport com.vasilkoff.easyvpnfree.util.CountriesNames;\nimport com.vasilkoff.easyvpnfree.util.PropertiesService;\nimport com.vasilkoff.easyvpnfree.util.TotalTraffic;\nimport com.vasilkoff.easyvpnfree.util.iap.IabHelper;\nimport com.vasilkoff.easyvpnfree.util.iap.IabResult;\nimport com.vasilkoff.easyvpnfree.util.iap.Inventory;\nimport com.vasilkoff.easyvpnfree.util.iap.Purchase;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Random;\nimport de.blinkt.openvpn.core.VpnStatus;", "code": "package com.vasilkoff.easyvpnfree.activity;\n\n\n\n\n\n\n\n\n\n/**\n * Created by Kusenko on 20.10.2016.\n */\n\npublic abstract class BaseActivity extends AppCompatActivity {\n\n    private DrawerLayout fullLayout;\n    private Toolbar toolbar;\n\n    static final int ADBLOCK_REQUEST = 10001;\n    static final int PREMIUM_SERVERS_REQUEST = 10002;\n    public static Server connectedServer = null;\n    boolean hideCurrentConnection = false;\n    IabHelper iapHelper;\n    public static final String IAP_TAG = \"IAP\";\n    static final String TEST_ITEM_SKU = \"android.test.purchased\";\n    static final String ADBLOCK_ITEM_SKU = \"adblock\";\n    static final String MORE_SERVERS_ITEM_SKU = \"more_servers\";\n    static String key = \"\";\n\n    static boolean availableFilterAds = false;\n    static boolean premiumServers = false;\n\n    static String adblockSKU;\n    static String moreServersSKU;\n    static String currentSKU;\n\n    int widthWindow ;\n    int heightWindow;\n", "next_line": "    static DBHelper dbHelper;", "gold_snippet_index": 1, "id": 16, "__internal_uuid__": "e3f98bca-e5bd-46a3-9540-921c2156f6f5"}
{"repo_name": "Rashwan/Reactive-Popular-Movies", "file_path": "app/src/main/java/com/rashwan/reactive_popular_movies/PopularMoviesApplication.java", "context": "[{\"identifier\":\"ApplicationComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/dI/ApplicationComponent.java\", \"snippet\":\"@Singleton\\n@Component(modules = {ApplicationModule.class, CastRepositoryModule.class, MoviesRepositoryModule.class})\\npublic interface ApplicationComponent {\\n    void inject(PopularMoviesApplication target);\\n    void inject(Movie target);\\n    void inject(Trailer target);\\n    void inject(Cast target);\\n    void inject(ActorTaggedImage target);\\n    void inject(ActorProfileImage target);\\n\\n    BrowseMoviesComponent plus(BrowseMoviesModule browseMoviesModule);\\n    MovieDetailsComponent plusMovieDetailsComponent();\\n    MovieInfoComponent plus(MovieInfoModule movieInfoModule);\\n    MovieReviewsComponent plus(MovieReviewsModule movieReviewsModule);\\n    NearbyMoviesComponent plus(NearbyMoviesModule nearbyMoviesModule);\\n    FavoriteMoviesComponent plus(FavoriteMoviesModule favoriteMoviesModule);\\n    WatchlistComponent plus(WatchlistModule watchlistModule);\\n    MovieCastComponent plus(MovieCastModule movieCastModule);\\n    ActorDetailsComponent plusActorDetailsComponent();\\n    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\\n\\n}\"}, {\"identifier\":\"ApplicationModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/dI/ApplicationModule.java\", \"snippet\":\"@Module\\npublic class ApplicationModule {\\n    private Application application;\\n\\n    public ApplicationModule(Application application) {\\n        this.application = application;\\n    }\\n\\n    @Provides @Singleton\\n    public Application provideApplication(){\\n        return application;\\n    }\\n\\n    @Provides @Singleton\\n    public OkHttpClient provideTmdbOkhttpClient(){\\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor();\\n        logging.setLevel(HttpLoggingInterceptor.Level.BASIC);\\n        return new OkHttpClient.Builder().addInterceptor(chain -> {\\n            Request originalRequest = chain.request();\\n            HttpUrl originalUrl = originalRequest.url();\\n            Timber.d(originalUrl.host());\\n            if (originalUrl.host().equals(application.getString(R.string.tmdb_api_host_url))) {\\n                HttpUrl newUrl = originalUrl.newBuilder()\\n                        .addQueryParameter(\\\"api_key\\\", BuildConfig.TMDB_API_KEY)\\n                        .build();\\n                Request.Builder newRequestBuilder = originalRequest.newBuilder().url(newUrl);\\n                Request newRequest = newRequestBuilder.build();\\n                return chain.proceed(newRequest);\\n            }else if (application.getString(R.string.omdb_api_base_url).contains(originalUrl.host())){\\n                HttpUrl newUrl = originalUrl.newBuilder()\\n                        .addQueryParameter(\\\"apikey\\\", BuildConfig.OMDB_API_KEY)\\n                        .build();\\n                Request.Builder newRequestBuilder = originalRequest.newBuilder().url(newUrl);\\n                Request newRequest = newRequestBuilder.build();\\n                return chain.proceed(newRequest);\\n            }else {\\n                return chain.proceed(originalRequest);\\n            }\\n        }).addInterceptor(logging).build();\\n    }\\n\\n\\n\\n\\n    @Provides @Singleton\\n    public Moshi provideMoshi(){\\n        return new Moshi.Builder().add(MyAdapterFactory.create()).build();\\n    }\\n    @Provides @Singleton @Named(\\\"Movie Converter\\\")\\n    public Converter.Factory provideTmdbResponseConverterFactory(Moshi moshi){\\n        return new TmdbResultsResponseConverterFactory(MoshiConverterFactory.create(moshi));\\n    }\\n\\n    @Provides @Singleton @Named(\\\"Cast Converter\\\")\\n    public Converter.Factory provideTmdbCastResponseConverterFactory(Moshi moshi){\\n        return new TmdbCastResponseConverterFactory(MoshiConverterFactory.create(moshi));\\n    }\\n\\n    @Provides @Singleton @Named(\\\"TMDBRetrofit\\\")\\n    public Retrofit provideTMDBRetrofit(OkHttpClient okHttpClient\\n            ,RetrofitUniversalConverter retrofitUniversalConverter) {\\n        RxJavaCallAdapterFactory rxAdapter = RxJavaCallAdapterFactory.createWithScheduler(Schedulers.io());\\n        return new Retrofit.Builder()\\n                .baseUrl(application.getString(R.string.tmdb_api_base_url))\\n                .client(okHttpClient)\\n                .addCallAdapterFactory(rxAdapter)\\n                .addConverterFactory(retrofitUniversalConverter)\\n                .build();\\n    }\\n    @Provides @Singleton @Named(\\\"OMDBRetrofit\\\")\\n    public Retrofit provideOMDBRetrofit(OkHttpClient okHttpClient\\n            ,RetrofitUniversalConverter retrofitUniversalConverter){\\n        RxJavaCallAdapterFactory rxAdapter = RxJavaCallAdapterFactory.createWithScheduler(Schedulers.io());\\n        return new Retrofit.Builder()\\n                .baseUrl(application.getString(R.string.omdb_api_base_url))\\n                .client(okHttpClient)\\n                .addCallAdapterFactory(rxAdapter)\\n                .addConverterFactory(retrofitUniversalConverter)\\n                .build();\\n    }\\n\\n    @Provides @Singleton\\n    public MovieDatabaseHelper provideOpenHelper(Application application){\\n        return new MovieDatabaseHelper(application);\\n    }\\n    @Provides @Singleton\\n    public SqlBrite provideSqlBrite(){\\n        return new SqlBrite.Builder().logger(message -> Timber.tag(\\\"Database\\\").d(message)).build();\\n    }\\n\\n    @Provides @Singleton\\n    public BriteDatabase provideDatabase(SqlBrite sqlBrite,MovieDatabaseHelper databaseHelper){\\n        BriteDatabase db =  sqlBrite.wrapDatabaseHelper(databaseHelper,Schedulers.io());\\n        db.setLoggingEnabled(true);\\n        return db;\\n    }\\n\\n}\"}, {\"identifier\":\"CastRepositoryModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/data/di/CastRepositoryModule.java\", \"snippet\":\"@Module\\npublic class CastRepositoryModule {\\n    @Local\\n    @Provides @Singleton\\n    CastDataSource provideCastLocalDataSource(){\\n        return new CastLocalDataSource();\\n    }\\n\\n    @Remote\\n    @Provides @Singleton\\n    CastDataSource provideCastRemoteDataSource(Application application,@Named(\\\"TMDBRetrofit\\\") Retrofit retrofit){\\n        return new CastRemoteDataSource(application,retrofit);\\n    }\\n}\"}, {\"identifier\":\"MoviesRepositoryModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/data/di/MoviesRepositoryModule.java\", \"snippet\":\"@Module\\npublic class MoviesRepositoryModule {\\n    @Provides @Singleton @Local\\n    public MoviesDataSource provideMoviesLocalDataSource(BriteDatabase db){\\n        return new MoviesLocalDataSource(db);\\n    }\\n    @Provides @Singleton @Remote\\n    public MoviesDataSource provideMoviesRemoteDataSource(Application application\\n            , @Named(\\\"TMDBRetrofit\\\") Retrofit tmdbRetrofit\\n            , @Named(\\\"OMDBRetrofit\\\") Retrofit omdbRetrofit){\\n        return new MoviesRemoteDataSource(application,tmdbRetrofit,omdbRetrofit);\\n    }\\n}\"}, {\"identifier\":\"ActorInfoComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/actorDetails/actorInfo/injection/ActorInfoComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = ActorInfoModule.class)\\npublic interface ActorInfoComponent {\\n    void inject(ActorInfoFragment target);\\n}\"}, {\"identifier\":\"ActorInfoModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/actorDetails/actorInfo/injection/ActorInfoModule.java\", \"snippet\":\"@Module\\npublic class ActorInfoModule {\\n\\n    @Provides\\n    ActorProfileImagesAdapter provideActorProfileImagesAdapter(){\\n        return new ActorProfileImagesAdapter();\\n    }\\n}\"}, {\"identifier\":\"ActorMoviesComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/actorDetails/actorMovies/injection/ActorMoviesComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = ActorMoviesModule.class)\\npublic interface ActorMoviesComponent {\\n    void inject(ActorMoviesFragment target);\\n}\"}, {\"identifier\":\"ActorMoviesModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/actorDetails/actorMovies/injection/ActorMoviesModule.java\", \"snippet\":\"@Module\\npublic class ActorMoviesModule {\\n    @Provides\\n    ActorMoviesAdapter provideActorMoviesAdapter(){\\n        return new ActorMoviesAdapter();\\n    }\\n}\"}, {\"identifier\":\"ActorDetailsComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/actorDetails/injection/ActorDetailsComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent\\npublic interface ActorDetailsComponent {\\n    void inject(ActorDetailsActivity target);\\n}\"}, {\"identifier\":\"BrowseMoviesComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/discoverMovies/di/BrowseMoviesComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = {BrowseMoviesModule.class})\\npublic interface BrowseMoviesComponent {\\n    void inject(BrowseMoviesFragment target);\\n}\"}, {\"identifier\":\"BrowseMoviesModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/discoverMovies/di/BrowseMoviesModule.java\", \"snippet\":\"@Module\\npublic class BrowseMoviesModule {\\n\\n    @Provides\\n    public BrowseMoviesAdapter provideBrowseMoviesAdapter(){\\n        return new BrowseMoviesAdapter();\\n    }\\n}\"}, {\"identifier\":\"NearbyMoviesComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/discoverMovies/nearbyMovies/di/NearbyMoviesComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = NearbyMoviesModule.class)\\npublic interface NearbyMoviesComponent {\\n    void inject(NearbyMoviesFragment target);\\n}\"}, {\"identifier\":\"NearbyMoviesModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/discoverMovies/nearbyMovies/di/NearbyMoviesModule.java\", \"snippet\":\"@Module\\npublic class NearbyMoviesModule {\\n    @Provides\\n    BrowseMoviesAdapter provideBrowseMoviesAdapter(){\\n        return new BrowseMoviesAdapter();\\n    }\\n}\"}, {\"identifier\":\"FavoriteMoviesComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/favoriteMovies/di/FavoriteMoviesComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = FavoriteMoviesModule.class)\\npublic interface FavoriteMoviesComponent {\\n    void inject(FavoriteMoviesFragment target);\\n}\"}, {\"identifier\":\"FavoriteMoviesModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/favoriteMovies/di/FavoriteMoviesModule.java\", \"snippet\":\"@Module\\npublic class FavoriteMoviesModule {\\n    @Provides\\n    public BrowseMoviesAdapter provideBrowseMoviesAdapter(){\\n        return new BrowseMoviesAdapter();\\n    }\\n}\"}, {\"identifier\":\"MovieDetailsComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/di/MovieDetailsComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent\\npublic interface MovieDetailsComponent {\\n    void inject(MovieDetailsActivity target);\\n}\"}, {\"identifier\":\"MovieCastComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/movieCast/di/MovieCastComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = {MovieCastModule.class})\\npublic interface MovieCastComponent {\\n    void inject(MovieCastFragment target);\\n}\"}, {\"identifier\":\"MovieCastModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/movieCast/di/MovieCastModule.java\", \"snippet\":\"@Module\\npublic class MovieCastModule {\\n    @Provides\\n    public MovieCastAdapter provideMovieCastAdapter(){\\n        return new MovieCastAdapter();\\n    }\\n}\"}, {\"identifier\":\"MovieInfoComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/movieInfo/di/MovieInfoComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = MovieInfoModule.class)\\npublic interface MovieInfoComponent {\\n    void inject(MovieInfoFragment target);\\n}\"}, {\"identifier\":\"MovieInfoModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/movieInfo/di/MovieInfoModule.java\", \"snippet\":\"@Module\\npublic class MovieInfoModule {\\n    @Provides\\n    MovieTrailersAdapter providesMovieTrailersAdapter(){\\n        return new MovieTrailersAdapter();\\n    }\\n    @Provides\\n    SimilarMoviesAdapter providesSimilarMoviesAdapter(){\\n        return new SimilarMoviesAdapter();\\n    }\\n}\"}, {\"identifier\":\"MovieReviewsComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/movieReviews/di/MovieReviewsComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = MovieReviewsModule.class)\\npublic interface MovieReviewsComponent {\\n    void inject(MovieReviewsFragment target);\\n}\"}, {\"identifier\":\"MovieReviewsModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/movieDetails/movieReviews/di/MovieReviewsModule.java\", \"snippet\":\"@Module\\npublic class MovieReviewsModule {\\n    @Provides\\n    public MovieReviewsAdapter provideMovieReviewsAdapter(){\\n        return new MovieReviewsAdapter();\\n    }\\n}\"}, {\"identifier\":\"WatchlistComponent\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/watchlistMovies/di/WatchlistComponent.java\", \"snippet\":\"@PerFragment\\n@Subcomponent(modules = WatchlistModule.class)\\npublic interface WatchlistComponent {\\n    void inject(WatchlistFragment target);\\n}\"}, {\"identifier\":\"WatchlistModule\", \"path\":\"app/src/main/java/com/rashwan/reactive_popular_movies/feature/watchlistMovies/di/WatchlistModule.java\", \"snippet\":\"@Module\\npublic class WatchlistModule {\\n\\n    @Provides\\n    BrowseMoviesAdapter provideBrowseMoviesAdapter(){\\n        return new BrowseMoviesAdapter();\\n    }\\n}\"}]", "import_statement": "import android.app.Application;\nimport com.rashwan.reactive_popular_movies.dI.ApplicationComponent;\nimport com.rashwan.reactive_popular_movies.dI.ApplicationModule;\nimport com.rashwan.reactive_popular_movies.dI.DaggerApplicationComponent;\nimport com.rashwan.reactive_popular_movies.data.di.CastRepositoryModule;\nimport com.rashwan.reactive_popular_movies.data.di.MoviesRepositoryModule;\nimport com.rashwan.reactive_popular_movies.feature.actorDetails.actorInfo.injection.ActorInfoComponent;\nimport com.rashwan.reactive_popular_movies.feature.actorDetails.actorInfo.injection.ActorInfoModule;\nimport com.rashwan.reactive_popular_movies.feature.actorDetails.actorMovies.injection.ActorMoviesComponent;\nimport com.rashwan.reactive_popular_movies.feature.actorDetails.actorMovies.injection.ActorMoviesModule;\nimport com.rashwan.reactive_popular_movies.feature.actorDetails.injection.ActorDetailsComponent;\nimport com.rashwan.reactive_popular_movies.feature.discoverMovies.di.BrowseMoviesComponent;\nimport com.rashwan.reactive_popular_movies.feature.discoverMovies.di.BrowseMoviesModule;\nimport com.rashwan.reactive_popular_movies.feature.discoverMovies.nearbyMovies.di.NearbyMoviesComponent;\nimport com.rashwan.reactive_popular_movies.feature.discoverMovies.nearbyMovies.di.NearbyMoviesModule;\nimport com.rashwan.reactive_popular_movies.feature.favoriteMovies.di.FavoriteMoviesComponent;\nimport com.rashwan.reactive_popular_movies.feature.favoriteMovies.di.FavoriteMoviesModule;\nimport com.rashwan.reactive_popular_movies.feature.movieDetails.di.MovieDetailsComponent;\nimport com.rashwan.reactive_popular_movies.feature.movieDetails.movieCast.di.MovieCastComponent;\nimport com.rashwan.reactive_popular_movies.feature.movieDetails.movieCast.di.MovieCastModule;\nimport com.rashwan.reactive_popular_movies.feature.movieDetails.movieInfo.di.MovieInfoComponent;\nimport com.rashwan.reactive_popular_movies.feature.movieDetails.movieInfo.di.MovieInfoModule;\nimport com.rashwan.reactive_popular_movies.feature.movieDetails.movieReviews.di.MovieReviewsComponent;\nimport com.rashwan.reactive_popular_movies.feature.movieDetails.movieReviews.di.MovieReviewsModule;\nimport com.rashwan.reactive_popular_movies.feature.watchlistMovies.di.WatchlistComponent;\nimport com.rashwan.reactive_popular_movies.feature.watchlistMovies.di.WatchlistModule;\nimport com.squareup.leakcanary.LeakCanary;\nimport timber.log.Timber;", "code": "package com.rashwan.reactive_popular_movies;\n\n\n\n\n/**\n * Created by rashwan on 6/23/16.\n */\n\npublic class PopularMoviesApplication extends Application {\n    private static ApplicationComponent applicationComponent;\n    private BrowseMoviesComponent browseMoviesComponent;\n    private MovieDetailsComponent movieDetailsComponent;\n    private MovieInfoComponent movieInfoComponent;\n    private NearbyMoviesComponent nearbyMoviesComponent;\n    private FavoriteMoviesComponent favoriteMoviesComponent;\n    private WatchlistComponent watchlistComponent;\n    private MovieReviewsComponent movieReviewsComponent;\n    private MovieCastComponent movieCastComponent;\n    private ActorInfoComponent actorInfoComponent;\n    private ActorMoviesComponent actorMoviesComponent;\n    private ActorDetailsComponent actorDetailsComponent;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        if (LeakCanary.isInAnalyzerProcess(this)) {\n            // This process is dedicated to LeakCanary for heap analysis.\n            // You should not init your app in this process.\n            return;\n        }\n        LeakCanary.install(this);\n        applicationComponent = createAppComponent();\n\n        Timber.plant(new Timber.DebugTree() {\n            @Override\n            protected String createStackElementTag(StackTraceElement element) {\n                return super.createStackElementTag(element) + ':' + element.getLineNumber();\n            }\n        });\n\n\n    }\n\n    private ApplicationComponent createAppComponent() {\n        return DaggerApplicationComponent.builder().applicationModule(new ApplicationModule(this))\n                .castRepositoryModule(new CastRepositoryModule())\n                .moviesRepositoryModule(new MoviesRepositoryModule())\n                .build();\n    }\n\n    public BrowseMoviesComponent createBrowseMoviesComponent(){\n         browseMoviesComponent = applicationComponent.plus(new BrowseMoviesModule());\n\n        return browseMoviesComponent;\n    }\n\n    public MovieDetailsComponent createMovieDetailsComponent(){\n        movieDetailsComponent = applicationComponent.plusMovieDetailsComponent();\n        return movieDetailsComponent;\n    }\n\n    public NearbyMoviesComponent createNearbyMoviesComponent(){\n        nearbyMoviesComponent = applicationComponent.plus(new NearbyMoviesModule());\n        return nearbyMoviesComponent;\n    }\n\n    public FavoriteMoviesComponent createFavoriteMoviesComponent(){\n        favoriteMoviesComponent = applicationComponent.plus(new FavoriteMoviesModule());\n        return favoriteMoviesComponent;\n    }\n\n    public WatchlistComponent createWatchlistComponent(){\n        watchlistComponent = applicationComponent.plus(new WatchlistModule());\n        return watchlistComponent;\n    }\n    public MovieInfoComponent createMovieInfoComponent(){", "next_line": "        movieInfoComponent = applicationComponent.plus(new MovieInfoModule());", "gold_snippet_index": 19, "id": 17, "__internal_uuid__": "ddcf29d0-ef77-47c2-a894-1fa70282f510"}
{"repo_name": "Pivotal-Open-Source-Hub/geode-demo-application", "file_path": "FastFootShoesRetailApp/src/main/java/org/apache/geode/demo/fastfootshoes/application/services/TransactionDataService.java", "context": "[{\"identifier\":\"OrderCounterCaller\", \"path\":\"FastFootShoesClusterSideLogic/src/main/java/org/apache/geode/demo/fastfootshoes/clusterside/functions/OrderCounterCaller.java\", \"snippet\":\"@OnRegion(region=\\\"Transaction\\\", id=\\\"orderCounterCaller\\\")\\npublic interface OrderCounterCaller {\\n\\t\\n\\t@FunctionId(\\\"countTransactions\\\")\\n\\tpublic List<Integer> countTransactions(Customer customer);\\n\\n}\"}, {\"identifier\":\"Alert\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/model/Alert.java\", \"snippet\":\"@Region(\\\"Alert\\\")\\npublic class Alert {\\n\\t\\n\\tprivate String message;\\n\\tprivate Date messageDate;\\n\\t\\n\\t//this ID will act as the key when doing puts/gets into the cluster\\n\\t@Id\\n\\tprivate String id;\\n\\t\\n\\t\\n\\tpublic String getMessage() {\\n\\t\\treturn message;\\n\\t}\\n\\tpublic void setMessage(String message) {\\n\\t\\tthis.message = message;\\n\\t}\\n\\tpublic Date getMessageDate() {\\n\\t\\treturn messageDate;\\n\\t}\\n\\tpublic void setMessageDate(Date messageDate) {\\n\\t\\tthis.messageDate = messageDate;\\n\\t}\\n\\tpublic String getId() {\\n\\t\\treturn id;\\n\\t}\\n\\tpublic void setId(String id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\t\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"Alert [message=\\\" + message + \\\", messageDate=\\\" + messageDate\\n\\t\\t\\t\\t+ \\\", id=\\\" + id + \\\"]\\\";\\n\\t}\\n\\n}\"}, {\"identifier\":\"Customer\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/model/Customer.java\", \"snippet\":\"@Region(\\\"Customer\\\")\\npublic class Customer {\\n\\t\\n\\tprivate String name;\\n\\tprivate String emailAddress;\\n\\tprivate String city;\\n\\tprivate Date birthday;\\n\\t\\n\\t//this ID will act as the key when doing puts/gets into the cluster\\n\\t@Id\\n\\tprivate String id;\\n\\t\\n\\tpublic Customer() {\\n\\t\\t\\n\\t}\\n\\t\\n\\t\\n\\t\\n\\tpublic Customer(String name, String emailAddress, String city,\\n\\t\\t\\tDate birthday, String id) {\\n\\t\\tsuper();\\n\\t\\tthis.name = name;\\n\\t\\tthis.emailAddress = emailAddress;\\n\\t\\tthis.city = city;\\n\\t\\tthis.birthday = birthday;\\n\\t\\tthis.id = id;\\n\\t}\\n\\n\\n\\n\\tpublic String getName() {\\n\\t\\treturn name;\\n\\t}\\n\\t\\n\\tpublic void setName(String name) {\\n\\t\\tthis.name = name;\\n\\t}\\n\\t\\n\\tpublic String getCity() {\\n\\t\\treturn city;\\n\\t}\\n\\t\\n\\tpublic void setCity(String city) {\\n\\t\\tthis.city = city;\\n\\t}\\n\\t\\n\\tpublic Date getBirthday() {\\n\\t\\treturn birthday;\\n\\t}\\n\\t\\n\\tpublic void setBirthday(Date birthday) {\\n\\t\\tthis.birthday = birthday;\\n\\t}\\n\\n\\tpublic String getEmailAddress() {\\n\\t\\treturn emailAddress;\\n\\t}\\n\\n\\tpublic void setEmailAddress(String emailAddress) {\\n\\t\\tthis.emailAddress = emailAddress;\\n\\t}\\n\\t\\n\\t\\n\\n\\tpublic String getId() {\\n\\t\\treturn id;\\n\\t}\\n\\n\\tpublic void setId(String id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"Customer [name=\\\" + name + \\\", emailAddress=\\\" + emailAddress\\n\\t\\t\\t\\t+ \\\", city=\\\" + city + \\\", birthday=\\\" + birthday + \\\", id=\\\" + id\\n\\t\\t\\t\\t+ \\\"]\\\";\\n\\t}\\n\\n}\"}, {\"identifier\":\"MarkUp\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/model/MarkUp.java\", \"snippet\":\"@Region(\\\"MarkUp\\\")\\npublic class MarkUp {\\n\\n\\tprivate double rate;\\n\\tprivate String levelName;\\n\\tprivate int qualifyingTransactionCountFloor;\\n\\tprivate int qualifyingTransactionCountCeiling;\\n\\t\\n\\t//this ID will act as the key when doing puts/gets into the cluster\\n\\t@Id\\n\\tprivate String id;\\n\\t\\n\\tpublic double getRate() {\\n\\t\\treturn rate;\\n\\t}\\n\\tpublic void setRate(double rate) {\\n\\t\\tthis.rate = rate;\\n\\t}\\n\\tpublic String getLevelName() {\\n\\t\\treturn levelName;\\n\\t}\\n\\tpublic void setLevelName(String levelName) {\\n\\t\\tthis.levelName = levelName;\\n\\t}\\n\\tpublic int getQualifyingTransactionCountFloor() {\\n\\t\\treturn qualifyingTransactionCountFloor;\\n\\t}\\n\\tpublic void setQualifyingTransactionCountFloor(\\n\\t\\t\\tint qualifyingTransactionCountFloor) {\\n\\t\\tthis.qualifyingTransactionCountFloor = qualifyingTransactionCountFloor;\\n\\t}\\n\\tpublic int getQualifyingTransactionCountCeiling() {\\n\\t\\treturn qualifyingTransactionCountCeiling;\\n\\t}\\n\\tpublic void setQualifyingTransactionCountCeiling(\\n\\t\\t\\tint qualifyingTransactionCountCeiling) {\\n\\t\\tthis.qualifyingTransactionCountCeiling = qualifyingTransactionCountCeiling;\\n\\t}\\n\\tpublic String getId() {\\n\\t\\treturn id;\\n\\t}\\n\\tpublic void setId(String id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\t\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"MarkUp [rate=\\\" + rate + \\\", levelName=\\\" + levelName\\n\\t\\t\\t\\t+ \\\", qualifyingTransactionCountFloor=\\\"\\n\\t\\t\\t\\t+ qualifyingTransactionCountFloor\\n\\t\\t\\t\\t+ \\\", qualifyingTransactionCountCeiling=\\\"\\n\\t\\t\\t\\t+ qualifyingTransactionCountCeiling + \\\", id=\\\" + id + \\\"]\\\";\\n\\t}\\n\\t\\n}\"}, {\"identifier\":\"Product\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/model/Product.java\", \"snippet\":\"@Region(\\\"Product\\\")\\npublic class Product {\\n\\t\\n\\tprivate int stockOnHand;\\n\\tprivate double wholeSalePrice;\\n\\tprivate String brand;\\n\\tprivate String name;\\n\\tprivate String type;\\n\\tprivate String color;\\n\\tprivate double size;\\n\\tprivate String gender;\\n\\t\\n\\t//this ID will act as the key when doing puts/gets into the cluster\\n\\t@Id\\n\\tprivate String id;\\n\\t\\n\\tpublic int getStockOnHand() {\\n\\t\\treturn stockOnHand;\\n\\t}\\n\\tpublic void setStockOnHand(int stockOnHand) {\\n\\t\\tthis.stockOnHand = stockOnHand;\\n\\t}\\n\\tpublic double getWholeSalePrice() {\\n\\t\\treturn wholeSalePrice;\\n\\t}\\n\\tpublic void setWholeSalePrice(double wholeSalePrice) {\\n\\t\\tthis.wholeSalePrice = wholeSalePrice;\\n\\t}\\n\\tpublic String getBrand() {\\n\\t\\treturn brand;\\n\\t}\\n\\tpublic void setBrand(String brand) {\\n\\t\\tthis.brand = brand;\\n\\t}\\n\\tpublic String getName() {\\n\\t\\treturn name;\\n\\t}\\n\\tpublic void setName(String name) {\\n\\t\\tthis.name = name;\\n\\t}\\n\\tpublic String getType() {\\n\\t\\treturn type;\\n\\t}\\n\\tpublic void setType(String type) {\\n\\t\\tthis.type = type;\\n\\t}\\n\\tpublic double getSize() {\\n\\t\\treturn size;\\n\\t}\\n\\tpublic void setSize(double size) {\\n\\t\\tthis.size = size;\\n\\t}\\n\\tpublic String getGender() {\\n\\t\\treturn gender;\\n\\t}\\n\\tpublic void setGender(String gender) {\\n\\t\\tthis.gender = gender;\\n\\t}\\n\\tpublic String getColor() {\\n\\t\\treturn color;\\n\\t}\\n\\tpublic void setColor(String color) {\\n\\t\\tthis.color = color;\\n\\t}\\n\\tpublic String getId() {\\n\\t\\treturn id;\\n\\t}\\n\\tpublic void setId(String id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\t\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"Product [stockOnHand=\\\" + stockOnHand + \\\", wholeSalePrice=\\\"\\n\\t\\t\\t\\t+ wholeSalePrice + \\\", brand=\\\" + brand + \\\", name=\\\" + name\\n\\t\\t\\t\\t+ \\\", type=\\\" + type + \\\", color=\\\" + color + \\\", size=\\\" + size\\n\\t\\t\\t\\t+ \\\", gender=\\\" + gender + \\\", id=\\\" + id + \\\"]\\\";\\n\\t}\\n\\t\\n}\"}, {\"identifier\":\"Transaction\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/model/Transaction.java\", \"snippet\":\"@Region(\\\"Transaction\\\")\\npublic class Transaction {\\n\\n\\tprivate String customerId;\\n\\tprivate Date transactionDate;\\n\\tprivate String productId;\\n\\tprivate int quantity;\\n\\tprivate double retailPrice;\\n\\tprivate String orderStatus;\\n\\t@Id\\n\\tprivate String id;\\n\\tprivate double markUp;\\n\\tpublic static String ORDER_COMPLETED = \\\"shipped\\\";\\n\\tpublic static String ORDER_CANCELLED = \\\"cancelled\\\";\\n\\tpublic static String ORDER_OPEN = \\\"open\\\";\\n\\t\\n\\tpublic Date getTransactionDate() {\\n\\t\\treturn transactionDate;\\n\\t}\\n\\t\\n\\tpublic void setTransactionDate(Date transactionDate) {\\n\\t\\tthis.transactionDate = transactionDate;\\n\\t}\\n\\t\\n\\tpublic String getProductId() {\\n\\t\\treturn productId;\\n\\t}\\n\\n\\tpublic void setProductId(String productId) {\\n\\t\\tthis.productId = productId;\\n\\t}\\n\\n\\n\\tpublic int getQuantity() {\\n\\t\\treturn quantity;\\n\\t}\\n\\t\\n\\tpublic void setQuantity(int quantity) {\\n\\t\\tthis.quantity = quantity;\\n\\t}\\n\\t\\n\\t\\n\\tpublic double getRetailPrice() {\\n\\t\\treturn retailPrice;\\n\\t}\\n\\t\\n\\tpublic void setRetailPrice(double retailPrice) {\\n\\t\\tthis.retailPrice = retailPrice;\\n\\t}\\n\\t\\n\\tpublic String getOrderStatus() {\\n\\t\\treturn orderStatus;\\n\\t}\\n\\t\\n\\tpublic void setOrderStatus(String orderStatus) {\\n\\t\\tthis.orderStatus = orderStatus;\\n\\t}\\n\\n\\tpublic double getMarkUp() {\\n\\t\\treturn markUp;\\n\\t}\\n\\n\\tpublic void setMarkUp(double markUp) {\\n\\t\\tthis.markUp = markUp;\\n\\t}\\n\\n\\tpublic String getCustomerId() {\\n\\t\\treturn customerId;\\n\\t}\\n\\n\\tpublic void setCustomerId(String customerId) {\\n\\t\\tthis.customerId = customerId;\\n\\t}\\n\\n\\tpublic String getId() {\\n\\t\\treturn id;\\n\\t}\\n\\n\\tpublic void setId(String id) {\\n\\t\\tthis.id = id;\\n\\t}\\n\\n\\t@Override\\n\\tpublic String toString() {\\n\\t\\treturn \\\"Transaction [customerId=\\\" + customerId + \\\", transactionDate=\\\"\\n\\t\\t\\t\\t+ transactionDate + \\\", productId=\\\" + productId + \\\", quantity=\\\"\\n\\t\\t\\t\\t+ quantity + \\\", retailPrice=\\\" + retailPrice + \\\", orderStatus=\\\"\\n\\t\\t\\t\\t+ orderStatus + \\\", id=\\\" + id + \\\", markUp=\\\" + markUp + \\\"]\\\";\\n\\t}\\n\\n\\t@Override\\n\\tpublic boolean equals(Object obj) {\\n\\t\\tif (this == obj)\\n\\t\\t\\treturn true;\\n\\t\\tif (obj == null)\\n\\t\\t\\treturn false;\\n\\t\\tif (getClass() != obj.getClass())\\n\\t\\t\\treturn false;\\n\\t\\tTransaction other = (Transaction) obj;\\n\\t\\tif (customerId == null) {\\n\\t\\t\\tif (other.customerId != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t} else if (!customerId.equals(other.customerId))\\n\\t\\t\\treturn false;\\n\\t\\tif (id == null) {\\n\\t\\t\\tif (other.id != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t} else if (!id.equals(other.id))\\n\\t\\t\\treturn false;\\n\\t\\tif (Double.doubleToLongBits(markUp) != Double\\n\\t\\t\\t\\t.doubleToLongBits(other.markUp))\\n\\t\\t\\treturn false;\\n\\t\\tif (orderStatus == null) {\\n\\t\\t\\tif (other.orderStatus != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t} else if (!orderStatus.equals(other.orderStatus))\\n\\t\\t\\treturn false;\\n\\t\\tif (productId == null) {\\n\\t\\t\\tif (other.productId != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t} else if (!productId.equals(other.productId))\\n\\t\\t\\treturn false;\\n\\t\\tif (quantity != other.quantity)\\n\\t\\t\\treturn false;\\n\\t\\tif (Double.doubleToLongBits(retailPrice) != Double\\n\\t\\t\\t\\t.doubleToLongBits(other.retailPrice))\\n\\t\\t\\treturn false;\\n\\t\\tif (transactionDate == null) {\\n\\t\\t\\tif (other.transactionDate != null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t} else if (!transactionDate.equals(other.transactionDate))\\n\\t\\t\\treturn false;\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\t\\n\\t\\n}\"}, {\"identifier\":\"AlertRepository\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/repositories/AlertRepository.java\", \"snippet\":\"public interface AlertRepository extends GemfireRepository<Alert, String> {\\n\\n\\n}\"}, {\"identifier\":\"CustomerRepository\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/repositories/CustomerRepository.java\", \"snippet\":\"public interface CustomerRepository extends GemfireRepository<Customer, String> {\\n\\n\\tCustomer findByEmailAddress(String emailAddress);\\n\\n\\tCustomer findById(String id);\\n\\n\\t//TODO could this not be by attribute?\\n\\t@Query(\\\"SELECT * FROM /Transaction t WHERE t.customerId = $1\\\")\\n\\tCollection<Transaction> findByCustomer(@Param(\\\"customerId\\\") String id);\\n\\n\\t@Query(\\\"SELECT * FROM /Customer t WHERE t.emailAddress LIKE $1\\\")\\n\\tCollection<Customer> searchCustomers(String email);\\n\\n}\"}, {\"identifier\":\"MarkUpRepository\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/repositories/MarkUpRepository.java\", \"snippet\":\"public interface MarkUpRepository extends GemfireRepository<MarkUp, String> {\\n\\n}\"}, {\"identifier\":\"ProductRepository\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/repositories/ProductRepository.java\", \"snippet\":\"public interface ProductRepository extends GemfireRepository<Product, String> {\\n\\n\\tCollection<Product> findAll();\\n\\t\\n\\tProduct findById(String id);\\n\\n\\t@Query(\\\"SELECT * FROM /Product p WHERE p.stockOnHand > 0\\\")\\n\\tCollection<Product> findAllWithStock();\\n\\n\\t@Query(\\\"SELECT * FROM /Product p WHERE p.brand = $1 and p.\\\\\\\"type\\\\\\\"= $2 and p.gender = $3\\\")\\n\\tCollection<Product> findAllByBrandTypeGender(String brand, String type,\\n\\t\\t\\tString gender);\\n\\n\\t@Query(\\\"SELECT * FROM /Product p   WHERE  p.brand = $1 and  p.\\\\\\\"type\\\\\\\" = $2 and  p.gender = $3 and  p.stockOnHand > 0\\\")\\n\\tCollection<Product> findAllWithStockByBrandTypeGender(String brand,String type, String gender);\\n\\n    @Query(\\\"SELECT * FROM /Product p WHERE p.\\\\\\\"type\\\\\\\" LIKE $1 and p.stockOnHand > 0\\\")\\n    Collection<Product> findAllWithStockByBrand( String brand) ;\\n\\n}\"}, {\"identifier\":\"TransactionRepository\", \"path\":\"FastFootShoesModel/src/main/java/org/apache/geode/demo/fastfootshoes/repositories/TransactionRepository.java\", \"snippet\":\"public interface TransactionRepository extends GemfireRepository<Transaction, String> {\\n\\t\\n\\tTransaction findById(String id);\\n\\t\\n\\t@Query(\\\"SELECT * FROM /Transaction t WHERE t.customerId = $1\\\")\\n\\tCollection<Transaction> findByCustomer(String id);\\n\\t\\n\\t@Query(\\\"SELECT * FROM /Transaction t where t.orderStatus = 'open'\\\")\\n\\tCollection<Transaction> findOpenOrders();\\n\\t\\n\\t@Query(\\\"SELECT * FROM /Transaction t where (t.orderStatus = 'open' or t.orderStatus = 'shipped') and t.customerId = $1\\\")\\n\\tCollection<Transaction> findCompletedOrders(String id);\\n\\t\\n\\t@Query(\\\"SELECT count(*) FROM /Transaction t where t.orderStatus = 'open'\\\")\\n\\tInteger getCount();\\n\\n\\n}\"}]", "import_statement": "import java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport org.apache.geode.demo.fastfootshoes.clusterside.functions.OrderCounterCaller;\nimport org.apache.geode.demo.fastfootshoes.model.Alert;\nimport org.apache.geode.demo.fastfootshoes.model.Customer;\nimport org.apache.geode.demo.fastfootshoes.model.MarkUp;\nimport org.apache.geode.demo.fastfootshoes.model.Product;\nimport org.apache.geode.demo.fastfootshoes.model.Transaction;\nimport org.apache.geode.demo.fastfootshoes.repositories.AlertRepository;\nimport org.apache.geode.demo.fastfootshoes.repositories.CustomerRepository;\nimport org.apache.geode.demo.fastfootshoes.repositories.MarkUpRepository;\nimport org.apache.geode.demo.fastfootshoes.repositories.ProductRepository;\nimport org.apache.geode.demo.fastfootshoes.repositories.TransactionRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;", "code": "package org.apache.geode.demo.fastfootshoes.application.services;\n\n\n/**\n * This services handles all the operations around a transaction\n * @author lshannon\n *\n */\n\n@Service\npublic class TransactionDataService {\n\t\n\tprivate static final int NO_DISCOUNT_MARK_UP = 15;\n\n\t@Autowired\n\tprivate ProductRepository productRepository;\n\t\n\t@Autowired\n\tprivate AlertRepository alertRespository;\n\t\n\t@Autowired\n\tprivate CustomerRepository customerRepository;\n\t\n\t@Autowired", "next_line": "\tprivate TransactionRepository transactionRepository;", "gold_snippet_index": 10, "id": 18, "__internal_uuid__": "f6b1d6bf-6a27-48f5-93d7-a21b40774487"}
{"repo_name": "tschaumburg/FastBarcodeScanner", "file_path": "fast-barcode-scanner/src/main/java/dk/schaumburgit/fastbarcodescanner/BarcodeScanner.java", "context": "[{\"identifier\":\"CallBackOptions\", \"path\":\"fast-barcode-scanner/src/main/java/dk/schaumburgit/fastbarcodescanner/callbackmanagers/CallBackOptions.java\", \"snippet\":\"public class CallBackOptions\\n{\\n    public final boolean includeImage;\\n\\n    public final EventConflation conflateHits;\\n    public final EventConflation conflateBlanks;\\n    public final EventConflation conflateErrors;\\n\\n    public final int debounceBlanks;\\n    public final int debounceErrors;\\n\\n    public CallBackOptions(\\n            boolean includeImageInCallback,\\n            EventConflation conflateHits,\\n            int debounceBlanks,\\n            EventConflation conflateBlanks,\\n            int debounceErrors,\\n            EventConflation conflateErrors\\n    )\\n    {\\n        this.includeImage = includeImageInCallback;\\n        this.debounceBlanks = debounceBlanks;\\n        this.debounceErrors = debounceErrors;\\n        this.conflateHits = conflateHits;\\n        this.conflateBlanks = conflateBlanks;\\n        this.conflateErrors = conflateErrors;\\n\\n    }\\n    public CallBackOptions()\\n    {\\n        this.includeImage = true;//false;\\n        this.conflateHits = EventConflation.Changes;\\n        this.debounceBlanks = 5;\\n        this.conflateBlanks = EventConflation.None;\\n        this.debounceErrors = 0;\\n        this.conflateErrors = EventConflation.First;\\n    }\\n    public CallBackOptions clone(boolean includeImage)\\n    {\\n        return new CallBackOptions(includeImage, this.conflateHits, this.debounceBlanks, this.conflateBlanks, this.debounceErrors, this.conflateErrors);\\n    }\\n    public CallBackOptions clone(int debounceBlanks, int debounceErrors)\\n    {\\n        if (debounceBlanks < 0)\\n            debounceBlanks = this.debounceBlanks;\\n\\n        if (debounceErrors < 0)\\n            debounceErrors = this.debounceErrors;\\n\\n        return new CallBackOptions(this.includeImage, this.conflateHits, debounceBlanks, this.conflateBlanks, debounceErrors, this.conflateErrors);\\n    }\\n    public CallBackOptions clone(EventConflation conflateHits, EventConflation conflateBlanks, EventConflation conflateErrors)\\n    {\\n        if (conflateHits == null)\\n            conflateHits = this.conflateHits;\\n\\n        if (conflateBlanks == null)\\n            conflateBlanks = this.conflateBlanks;\\n\\n        if (conflateErrors == null)\\n            conflateErrors = this.conflateErrors;\\n\\n        return new CallBackOptions(this.includeImage, conflateHits, this.debounceBlanks, conflateBlanks, this.debounceErrors, conflateErrors);\\n    }\\n}\"}, {\"identifier\":\"MultiCallbackManager\", \"path\":\"fast-barcode-scanner/src/main/java/dk/schaumburgit/fastbarcodescanner/callbackmanagers/MultiCallbackManager.java\", \"snippet\":\"public class MultiCallbackManager //extends ErrorCallbackHandler\\n{\\n    /**\\n     * Tag for the {@link Log}.\\n     */\\n    private static final String TAG = \\\"BarcodeScanner\\\";\\n\\n    private final ScanOptions mScanOptions;\\n    private final Handler callbackHandler;\\n\\n    protected final MultipleBarcodesDetectedListener listener;\\n\\n    private final CallBackOptions callbackOptions;\\n\\n    public MultiCallbackManager(\\n            ScanOptions scanOptions,\\n            CallBackOptions callbackOptions,\\n            MultipleBarcodesDetectedListener listener,\\n            Handler callbackHandler\\n    )\\n    {\\n        if (scanOptions == null)\\n            throw new IllegalArgumentException(\\\"scanOptions is null\\\");\\n        this.mScanOptions = scanOptions;\\n\\n        if (callbackHandler == null)\\n            throw new IllegalArgumentException(\\\"callbackHandler is null\\\");\\n        this.callbackHandler= callbackHandler;\\n\\n        if (callbackOptions == null)\\n            throw new IllegalArgumentException(\\\"callbackOptions is null\\\");\\n        this.callbackOptions = callbackOptions;\\n\\n        if (listener == null)\\n            throw new IllegalArgumentException(\\\"listener is null\\\");\\n        this.listener = listener;\\n    }\\n\\n    private Barcode[] mLastReportedMultiBarcode = null;\\n\\n    private int mNoBarcodeCount = 0;\\n\\n    public void onMultipleBarcodesFound(Barcode[] bcs, ISource source) {\\n        if (bcs == null || bcs.length == 0) {\\n            Log.v(TAG, \\\"Found 0 barcodes\\\");\\n            mNoBarcodeCount++;\\n            //if (mLastReportedMultiBarcode != null && mNoBarcodeCount >= NO_BARCODE_IGNORE_LIMIT) {\\n            if (mNoBarcodeCount >= this.callbackOptions.debounceBlanks) {\\n                //mLastReportedMultiBarcode = null;\\n                _onBlank(listener, callbackHandler);\\n            }\\n        } else {\\n            Log.v(TAG, \\\"Found \\\" + bcs.length + \\\" barcodes\\\");\\n            mNoBarcodeCount = 0;\\n            if (!_equals(bcs, mLastReportedMultiBarcode)) {\\n                mLastReportedMultiBarcode = bcs;\\n                _onMultipleBarcodes(mLastReportedMultiBarcode, callbackOptions.includeImage ? source.save() : null, listener, callbackHandler);\\n            }\\n        }\\n    }\\n\\n    protected int mConsecutiveErrorCount = 0;\\n    public void onError(final Exception error) {\\n        mConsecutiveErrorCount++;\\n        if (mConsecutiveErrorCount >= this.callbackOptions.debounceErrors) {\\n            callbackHandler.post(\\n                    new Runnable() {\\n                        @Override\\n                        public void run() {\\n                            listener.OnError(error);\\n                        }\\n                    }\\n            );\\n        }\\n    }\\n\\n    private static boolean _equals(Barcode[] bcs1, Barcode[] bcs2) {\\n        if (bcs1 == bcs2)\\n            return true;\\n\\n        if (bcs1 == null)\\n            return false;\\n\\n        if (bcs2 == null)\\n            return false;\\n\\n        if (bcs1.length != bcs2.length)\\n            return false;\\n\\n        for (int n = 0; n < bcs1.length; n++) {\\n            if (bcs1[n] != bcs2[n])\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    private void _onMultipleBarcodes(final Barcode[] barcodes, final String sourceUrl, final MultipleBarcodesDetectedListener listener, Handler callbackHandler) {\\n        if (listener != null) {\\n            callbackHandler.post(\\n                    new Runnable() {\\n                        @Override\\n                        public void run() {\\n                            listener.OnHits(_convert(barcodes), sourceUrl);\\n                        }\\n                    }\\n            );\\n        }\\n    }\\n\\n    private void _onBlank(final MultipleBarcodesDetectedListener listener, Handler callbackHandler) {\\n        if (listener != null) {\\n            callbackHandler.post(\\n                    new Runnable() {\\n                        @Override\\n                        public void run() {\\n                            listener.OnBlank();\\n                        }\\n                    }\\n            );\\n        }\\n    }\\n\\n    private BarcodeInfo[] _convert(Barcode[] barcodes) {\\n        if (barcodes == null)\\n            return null;\\n\\n        BarcodeInfo[] res = new BarcodeInfo[barcodes.length];\\n        for (int n = 0; n < barcodes.length; n++)\\n            res[n] = new BarcodeInfo(barcodes[n].contents, barcodes[n].points);\\n\\n        return res;\\n    }\\n}\"}, {\"identifier\":\"SingleCallbackManager\", \"path\":\"fast-barcode-scanner/src/main/java/dk/schaumburgit/fastbarcodescanner/callbackmanagers/SingleCallbackManager.java\", \"snippet\":\"public class SingleCallbackManager //extends ErrorCallbackHandler\\n{\\n    /**\\n     * Tag for the {@link Log}.\\n     */\\n    private static final String TAG = \\\"fast-barcode-scanner\\\";\\n\\n    private final ScanOptions mScanOptions;\\n    private final BarcodeDetectedListener listener;\\n    private final CallBackOptions callbackOptions;\\n    private final Handler callbackHandler;\\n\\n    public SingleCallbackManager(\\n            ScanOptions scanOptions,\\n            CallBackOptions callbackOptions,\\n            BarcodeDetectedListener listener,\\n            Handler callbackHandler\\n    ) {\\n        if (scanOptions == null)\\n            throw new IllegalArgumentException(\\\"scanOptions is null\\\");\\n        this.mScanOptions = scanOptions;\\n\\n        if (callbackHandler == null)\\n            throw new IllegalArgumentException(\\\"callbackHandler is null\\\");\\n        this.callbackHandler = callbackHandler;\\n\\n        if (callbackOptions == null)\\n            throw new IllegalArgumentException(\\\"callbackOptions is null\\\");\\n        this.callbackOptions = callbackOptions;\\n\\n        if (listener == null)\\n            throw new IllegalArgumentException(\\\"listener is null\\\");\\n        this.listener = listener;\\n    }\\n\\n    //************************************************************************\\n    //* Receiving events from the scanner\\n    //* ==================================\\n    //*\\n    //************************************************************************\\n    private int mConsecutiveBlankCount = 0;\\n    private int mConsecutiveErrorCount = 0;\\n\\n    public void onBlank() {\\n        if (this.mScanOptions.emptyMarker != null) {\\n            this.onError(new Exception(\\\"False blank detected\\\"));\\n            Log.v(TAG, \\\": False blank detected\\\" );\\n            return;\\n        }\\n\\n        Log.v(TAG, \\\"Found barcode: \\\" + null);\\n\\n        // Debounce:\\n        mConsecutiveBlankCount++;\\n        mConsecutiveErrorCount = 0;\\n        if (mConsecutiveBlankCount >= this.callbackOptions.debounceBlanks) {\\n            sendBlank();\\n            //sendBarcode(\\\"testblank\\\", null, callbackOptions.includeImage ? source : null);\\n        } else {\\n            Log.v(TAG, \\\"Debounced barcode: \\\" + null);\\n        }\\n    }\\n\\n    public void onBarcode(Barcode bc, ISource source) {\\n        // Found nothing\\n        if (bc == null || bc.contents == null) {\\n            this.onBlank();\\n            return;\\n        }\\n\\n        if (callbackOptions.includeImage == false) {\\n            if (source != null) {\\n                source.close();\\n                source = null;\\n            }\\n        }\\n\\n        if (this.mScanOptions.emptyMarker != null) {\\n            // If this is an empty-marker, it should be processed as a blank,\\n            // but without any debouncing:\\n            if (bc.contents.equalsIgnoreCase(this.mScanOptions.emptyMarker)) {\\n                if (source != null) {\\n                    source.close();\\n                    source = null;\\n                }\\n                mConsecutiveBlankCount = 0;\\n                mConsecutiveErrorCount = 0;\\n                sendBlank();\\n                return;\\n            }\\n        }\\n\\n        Log.v(TAG, \\\"Found barcode: \\\" + bc.contents);\\n\\n        // Debounce:\\n        mConsecutiveBlankCount = 0;\\n        mConsecutiveErrorCount = 0;\\n        sendBarcode(bc.contents, bc.points, source);\\n    }\\n\\n\\n    public void onError(final Exception error) {\\n        // Debounce:\\n        mConsecutiveErrorCount++;\\n        if (mConsecutiveErrorCount >= this.callbackOptions.debounceErrors) {\\n            sendError(error);\\n        } else {\\n            Log.v(TAG, \\\"Debounced error\\\" );\\n        }\\n    }\\n\\n    //************************************************************************\\n    //* Sending events to listener\\n    //*\\n    //************************************************************************\\n    private enum ELastEvent {None, Barcode, Blank, Error}\\n    private ELastEvent mLatestEvent = ELastEvent.None;\\n\\n    private String mLastReportedBarcode = \\\"some random text 1234056g\\\"; // null=> blank\\n\\n    private void sendBarcode(String barcode, Point[] points, final ISource source)\\n    {\\n        try {\\n            // Conflation:\\n            switch (this.callbackOptions.conflateHits) {\\n                case None:\\n                    Log.v(TAG, \\\"Conflating barcode: \\\" + barcode);\\n                    return;\\n                case First:\\n                    if (mLatestEvent == ELastEvent.Barcode) {\\n                        Log.v(TAG, \\\"Conflating barcode: \\\" + barcode);\\n                        return;\\n                    }\\n                    break;\\n                case Changes:\\n                    if (mLatestEvent == ELastEvent.Barcode) {\\n                        if (stringEquals(barcode, mLastReportedBarcode)) {\\n                            Log.v(TAG, \\\"Conflating barcode: \\\" + barcode);\\n                            return;\\n                        }\\n                    }\\n                    break;\\n                case All:\\n                    break;\\n            }\\n\\n            final BarcodeInfo bc = new BarcodeInfo(barcode, points);\\n            final String sourceUrl = (source == null) ? null : source.save();\\n            Log.v(TAG, \\\"Sending barcode: \\\" + bc.barcode + \\\" (image: \\\" + (sourceUrl == null ? \\\"none\\\" : sourceUrl));\\n            callbackHandler.post(\\n                    new Runnable() {\\n                        @Override\\n                        public void run() {\\n                            listener.OnHit(bc, sourceUrl);\\n                        }\\n                    }\\n            );\\n\\n            mLastReportedBarcode = barcode;\\n            mLatestEvent = ELastEvent.Barcode;\\n        }\\n        finally {\\n            if (source!=null)\\n                source.close();\\n        }\\n    }\\n\\n    public static boolean stringEquals(String str1, String str2) {\\n        return (str1 == null ? str2 == null : str1.equals(str2));\\n    }\\n\\n    private void sendBlank() {\\n        // Conflation:\\n        switch (this.callbackOptions.conflateBlanks)\\n        {\\n            case None:\\n                mLatestEvent = ELastEvent.Blank;\\n                Log.v(TAG, \\\"Conflated blank\\\");\\n                return;\\n            case First:\\n            case Changes:\\n                if (this.mLatestEvent == ELastEvent.Blank) {\\n                    Log.v(TAG, \\\"Conflated blank\\\");\\n                    return;\\n                }\\n                break;\\n            case All:\\n                break;\\n        }\\n\\n        Log.v(TAG, \\\"Sending blank\\\");\\n        callbackHandler.post(\\n                new Runnable() {\\n                    @Override\\n                    public void run() {\\n                        listener.OnBlank();\\n                    }\\n                }\\n        );\\n\\n        mLatestEvent = ELastEvent.Blank;\\n    }\\n\\n    private void sendError(final Exception error) {\\n        // Conflation:\\n        switch (this.callbackOptions.conflateErrors)\\n        {\\n            case None:\\n                return;\\n            case First:\\n            case Changes:\\n                if (this.mLatestEvent == ELastEvent.Error)\\n                    return;\\n                break;\\n            case All:\\n                break;\\n        }\\n\\n        callbackHandler.post(\\n                new Runnable() {\\n                    @Override\\n                    public void run() {\\n                        listener.OnError(error);\\n                    }\\n                }\\n        );\\n\\n        mLatestEvent = ELastEvent.Error;\\n    }\\n}\"}, {\"identifier\":\"ISource\", \"path\":\"still-sequence-camera/src/main/java/dk/schaumburgit/stillsequencecamera/ISource.java\", \"snippet\":\"public interface ISource\\n{\\n    String save();\\n    void close();\\n}\"}, {\"identifier\":\"IStillSequenceCamera\", \"path\":\"still-sequence-camera/src/main/java/dk/schaumburgit/stillsequencecamera/IStillSequenceCamera.java\", \"snippet\":\"public interface IStillSequenceCamera {\\n    double sourceAspectRatio();\\n    List<CaptureFormatInfo> getSupportedImageFormats(double relativeDevicePerformance);\\n    void setup(int imageFormat, int imageWidth, int imageHeight);\\n    void start(OnImageAvailableListener listener, Handler callbackHandler);\\n    void stop();\\n    void close();\\n\\n    public interface OnImageAvailableListener\\n    {\\n        void onImageAvailable(ISource source, BinaryBitmap bitmap);\\n        void onError(Exception error);\\n    }\\n\\n    boolean isLockFocus();\\n    void setLockFocus(boolean lockFocus);\\n}\"}, {\"identifier\":\"StillSequenceCamera\", \"path\":\"still-sequence-camera/src/main/java/dk/schaumburgit/stillsequencecamera/camera/StillSequenceCamera.java\", \"snippet\":\"public class StillSequenceCamera implements IStillSequenceCamera {\\n    private static final String TAG = \\\"StillSequenceCamera\\\";\\n    private final int mCameraId;\\n    private int mImageFormat;\\n    private int mImageWidth;\\n    private int mImageHeight;\\n    private int mPreviewFormat;\\n    private int mPreviewWidth;\\n    private int mPreviewHeight;\\n    private Camera mCamera;\\n    private PreviewBufferManager mBufferManager;\\n    private final Activity mActivity;\\n    private final int mMinPixels;\\n    private final SurfaceView mPreview;\\n    private IStillSequenceCamera.OnImageAvailableListener mImageListener = null;\\n    private Handler mCallbackHandler;\\n    private final static int CLOSED = 0;\\n    private final static int INITIALIZED = 1;\\n    private final static int CAPTURING = 2;\\n    private boolean mAutofocusNeedsTrigger = false;\\n    private boolean mLockFocus = true;\\n    private int mState = CLOSED;\\n\\n    public StillSequenceCamera(Activity activity, StillSequenceCameraOptions camOptions)\\n    {\\n        mActivity = activity;\\n        mPreview = camOptions.preview;\\n        mState = CLOSED;\\n\\n        this.mMinPixels = (camOptions.minPixels < 1024*768) ? (1024*768) : camOptions.minPixels;\\n\\n        // Open a camera:\\n        int chosenCameraId = -1;\\n        //get the number of cameras\\n        int numberOfCameras = Camera.getNumberOfCameras();\\n        //for every camera check\\n        for (int i = 0; i < numberOfCameras; i++) {\\n            CameraInfo info = new CameraInfo();\\n            Camera.getCameraInfo(i, info);\\n            if (info.facing == CameraInfo.CAMERA_FACING_BACK) {\\n                chosenCameraId = i;\\n                break;\\n            }\\n        }\\n\\n        if (chosenCameraId < 0)\\n            throw new UnsupportedOperationException(\\\"Cannot find a back-facing camera\\\");\\n\\n        mCameraId = chosenCameraId;\\n\\n        // Open a camera:\\n        mCamera = Camera.open(mCameraId);\\n        mBufferManager = new PreviewBufferManager(mCamera);\\n\\n    }\\n\\n    @Override\\n    public double sourceAspectRatio() {\\n        android.hardware.Camera.Size pictureSize = mCamera.getParameters().getPictureSize();\\n        return  pictureSize.width / pictureSize.height;\\n    }\\n\\n    @Override\\n    public List<CaptureFormatInfo> getSupportedImageFormats(double relativeDevicePerformance) {\\n        List<CaptureFormatInfo> res = new ArrayList<CaptureFormatInfo>();\\n\\n        for (int format : mCamera.getParameters().getSupportedPictureFormats()) {\\n            for (android.hardware.Camera.Size size : mCamera.getParameters().getSupportedPictureSizes()) {\\n                boolean unsupported = false;\\n                String comment = \\\"\\\";\\n                double nanosPerFrameCapture = getFormatCost(format) * relativeDevicePerformance;\\n                double nanosPerFrameConversion = LuminanceSourceFactory.nanosPerFrameConversion(format, size.width, size.height, relativeDevicePerformance);\\n                if (nanosPerFrameConversion < 0)\\n                {\\n                    unsupported = true;\\n                    comment += \\\"Format cannot be converted to a scannable bitmap, \\\";\\n                }\\n                res.add(\\n                        new CaptureFormatInfo(\\n                                format,\\n                                size.width,\\n                                size.height,\\n                                unsupported,\\n                                nanosPerFrameCapture,\\n                                nanosPerFrameConversion,\\n                                comment)\\n                );\\n            }\\n        }\\n        return res;\\n    }\\n\\n    private static double getFormatCost(int format) {\\n        switch (format) {\\n            case ImageFormat.UNKNOWN:\\n                return 1.0;\\n            case ImageFormat.NV21:\\n                return 0.8;\\n            case ImageFormat.NV16:\\n                // This format has never been seen in the wild, but is compatible as we only care\\n                // about the Y channel, so allow it.\\n                return 0.8;\\n            case ImageFormat.YV12:\\n            case ImageFormat.YUY2:\\n            case ImageFormat.YUV_420_888:\\n                return 0.5; // pure guesswork - but it IS faster than JPEG\\n            case ImageFormat.YUV_422_888:\\n                // only varies from yuv_420_888 in chroma-subsampling, which I'm guessing\\n                // doesn't affect the luminance much\\n                // (see https://en.wikipedia.org/wiki/Chroma_subsampling)\\n                return 0.5;\\n            case ImageFormat.YUV_444_888:\\n                // only varies from yuv_420_888 in chroma-subsampling, which I'm guessing\\n                // doesn't affect the luminance much\\n                // (see https://en.wikipedia.org/wiki/Chroma_subsampling)\\n                return 0.5;\\n            case ImageFormat.FLEX_RGB_888:\\n            case ImageFormat.FLEX_RGBA_8888:\\n            case ImageFormat.RGB_565:\\n                return 0.8; // pure guesswork\\n            case ImageFormat.JPEG:\\n                return 1.0; // duh...?\\n            case ImageFormat.RAW_SENSOR:\\n            case ImageFormat.RAW10:\\n            case ImageFormat.RAW12:\\n                return 0.4; // pure guesswork - but any RAW format must be optimal (wrt capture speed)?\\n            case ImageFormat.DEPTH16:\\n            case ImageFormat.DEPTH_POINT_CLOUD:\\n                return 1.5; // sound terribly complicated - but I'm just guessing....\\n            //ImageFormat.Y8:\\n            //ImageFormat.Y16:\\n        }\\n\\n        return 1.0;\\n    }\\n\\n    /**\\n     * Selects a back-facing camera, opens it and starts focusing.\\n     *\\n     * The #start() method can be called immediately when this method returns\\n     *\\n     * If setup() returns successfully, the StillSequenceCamera enters the INITIALIZED state.\\n     *\\n     * @throws IllegalStateException         if the StillSequenceCamera is in any but the CLOSED state\\n     * @throws UnsupportedOperationException if no back-facing camera is available\\n     * @throws RuntimeException              if opening the camera fails (for example, if the\\n     *                                       camera is in use by another process or device policy manager has\\n     *                                       disabled the camera).\\n     */\\n    public void setup(int format, int imageWidth, int imageHeight)\\n            throws UnsupportedOperationException, IllegalStateException {\\n        if (mState != CLOSED)\\n            throw new IllegalStateException(\\\"StillSequenceCamera.setup() can only be called on a new instance\\\");\\n\\n        mImageFormat = format;\\n        mImageWidth = imageWidth;\\n        mImageHeight = imageHeight;\\n\\n        Camera.Parameters pars = mCamera.getParameters();\\n        pars.setPictureFormat(format);\\n        pars.setPictureSize(imageWidth, imageHeight);\\n\\n        if (pars.getSupportedFocusModes().contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {\\n            Log.i(TAG, \\\"Enabling FOCUS_MODE_CONTINUOUS_PICTURE\\\");\\n            pars.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);\\n        } else if (pars.getSupportedFocusModes().contains(Camera.Parameters.FOCUS_MODE_AUTO)){\\n            Log.i(TAG, \\\"Enabling FOCUS_MODE_AUTO\\\");\\n            pars.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);\\n            // we still need to trigger autofocus...see below\\n            Log.i(TAG, \\\"...setting mAutofocusNeedsTrigger=true\\\");\\n            mAutofocusNeedsTrigger = true;\\n        }\\n\\n        // Set the parameters:\\n        // ===================\\n        mCamera.setParameters(pars);\\n\\n        Camera.Parameters pars2 = mCamera.getParameters();\\n        mPreviewFormat = pars2.getPreviewFormat();\\n        Camera.Size previewSize = pars2.getPreviewSize();\\n        mPreviewWidth = previewSize.width;\\n        mPreviewHeight = previewSize.height;\\n\\n        mBufferManager.setup(mPreviewFormat, mPreviewWidth, mPreviewHeight);\\n\\n        mState = INITIALIZED;\\n    }\\n\\n    /**\\n     * Starts the preview (displaying it in the #SurfaceView provided in the constructor),\\n     * and starts taking pictures as rapidly as possible.\\n     *\\n     * This continues until #stop() is called.\\n     *\\n     * If start() returns successfully, the StillSequenceCamera enters the CAPTURING state.\\n     *\\n     * @param listener Every time a picture is taken, this callback interface is called.\\n     * @throws IllegalStateException if the StillSequenceCamera is in any but the INITIALIZED state\\n     */\\n    @Override\\n    public void start(OnImageAvailableListener listener, Handler callbackHandler)\\n            throws IllegalStateException {\\n        if (mState != INITIALIZED)\\n            throw new IllegalStateException(\\\"StillSequenceCamera.start() can only be called in the INITIALIZED state\\\");\\n\\n        mImageListener = listener;\\n        mCallbackHandler = callbackHandler;\\n        if (mCallbackHandler == null)\\n            mCallbackHandler = new Handler();\\n\\n        if (mPreview.getHolder().getSurface() != null) {\\n            try {\\n                mCamera.setPreviewDisplay(mPreview.getHolder());\\n                mCamera.startPreview();\\n                //startTakingPictures();\\n                startTakingPicturesUsingPreview();\\n            } catch (IOException e) {\\n                Log.d(TAG, \\\"Error setting camera preview: \\\" + e.getMessage());\\n            }\\n        }\\n\\n        mPreview.getHolder().addCallback(\\n                new SurfaceHolder.Callback() {\\n                    @Override\\n                    public void surfaceCreated(SurfaceHolder holder) {\\n                        startPreview(holder);\\n                    }\\n\\n                    @Override\\n                    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {\\n                        // If your preview can change or rotate, take care of those events here.\\n                        // Make sure to stop the preview before resizing or reformatting it.\\n                        stopPreview(false);\\n                        startPreview(mPreview.getHolder());\\n                    }\\n\\n                    @Override\\n                    public void surfaceDestroyed(SurfaceHolder holder) {\\n                        stopPreview(true);\\n                    }\\n                }\\n        );\\n        // deprecated setting, but required on Android versions prior to 3.0\\n        mPreview.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\\n        mState = CAPTURING;\\n    }\\n\\n    private void startPreview(SurfaceHolder holder)\\n    {\\n        try {\\n            // create the surface and start camera preview\\n            if (mCamera != null) {\\n                mCamera.setPreviewDisplay(holder);\\n                mCamera.startPreview();\\n            }\\n        } catch (IOException e) {\\n            Log.d(TAG, \\\"Error setting camera preview: \\\" + e.getMessage());\\n        }\\n\\n        try {\\n            // create the surface and start camera preview\\n            if (mCamera != null) {\\n                startTakingPicturesUsingPreview();\\n            }\\n        } catch (Exception e) {\\n            Log.d(TAG, \\\"Error starting capture: \\\" + e.getMessage());\\n        }\\n    }\\n\\n    private void stopPreview(boolean stopCapture) {\\n        try {\\n            if (stopCapture)\\n                stopTakingPicturesUsingPreview();\\n            mCamera.stopPreview();\\n        } catch (Exception e) {\\n            // ignore: tried to stop a non-existent preview\\n        }\\n    }\\n\\n    /**\\n     * Stops the preview, and stops the capture of still images.\\n     *\\n     * If stop() returns successfully, the StillSequenceCamera enters the STOPPED state.\\n     *\\n     * @throws IllegalStateException if stop is called in any but the STARTED state\\n     */\\n    public void stop()\\n            throws IllegalStateException {\\n        if (mState == CLOSED)\\n            return;\\n\\n        if (mState != CAPTURING)\\n            throw new IllegalStateException(\\\"StillSequenceCamera.stop() can only be called in the STARTED state\\\");\\n\\n        mImageListener = null;\\n        mCallbackHandler = null;\\n\\n        stopPreview(true);\\n\\n        mState = INITIALIZED;\\n    }\\n\\n    public void close() {\\n        if (mState == CLOSED)\\n            return;\\n\\n        if (mState == CAPTURING)\\n            stop();\\n\\n        if (mState != INITIALIZED)\\n            throw new IllegalStateException(\\\"StillSequenceCamera.stop() can only be called after start()\\\");\\n\\n        mContinueTakingPictures = false;\\n        if (mCamera != null) {\\n            mCamera.release();\\n            mCamera = null;\\n        }\\n        mImageListener = null;\\n\\n        mState = CLOSED;\\n    }\\n\\n    private boolean mContinueTakingPictures = false;\\n\\n    private void startTakingPicturesUsingPreview()\\n            throws IllegalStateException\\n    {\\n        if (mContinueTakingPictures)\\n            return;\\n\\n        if (mCameraId < 0)\\n            throw new IllegalStateException(\\\"StillSequenceCamera.start() cannot be called before setup()\\\");\\n\\n        mContinueTakingPictures = true;\\n\\n        mBufferManager.start(3);\\n\\n        final Camera.PreviewCallback frameHandler =\\n                new Camera.PreviewCallback() {\\n                    @Override\\n                    public void onPreviewFrame(byte[] data, Camera camera) {\\n                        Log.i(TAG, \\\"Received preview frame (format=\\\" + mPreviewFormat + \\\")\\\");\\n\\n                        if (!mContinueTakingPictures) {\\n                            mCamera.setPreviewCallbackWithBuffer(null);\\n                            return;\\n                        }\\n\\n                        ISource source = mBufferManager.borrow(data);\\n                        try {\\n\\n                            final BinaryBitmap bitmap = ImageConverter.DecodeData(mPreviewFormat, mPreviewWidth, mPreviewHeight, data);\\n\\n                            if (mImageListener == null) {\\n                                mCamera.addCallbackBuffer(data);\\n                                return;\\n                            }\\n\\n                            mCallbackHandler.post(\\n                                    new Runnable() {\\n                                        @Override\\n                                        public void run() {\\n                                            mImageListener.onImageAvailable(null /*new SourceJPEG(jpegData, size.width, size.height)*/, bitmap);\\n                                        }\\n                                    }\\n                            );\\n                        } finally {\\n                            source.close();\\n                        }\\n                    }\\n                };\\n\\n        //mCamera.setPreviewCallbackWithBuffer(frameHandler);\\n\\n        if (mAutofocusNeedsTrigger)\\n        {\\n            mCamera.autoFocus(new Camera.AutoFocusCallback() {\\n                @Override\\n                public void onAutoFocus(boolean success, Camera camera) {\\n                    mCamera.setPreviewCallbackWithBuffer(frameHandler);\\n                }\\n            });\\n        } else {\\n            mCamera.setPreviewCallbackWithBuffer(frameHandler);\\n        }\\n\\n    }\\n\\n    private void stopTakingPicturesUsingPreview() {\\n        mContinueTakingPictures = false;\\n    }\\n\\n/*\\n    private void startTakingPictures()\\n            throws IllegalStateException\\n    {\\n        if (mContinueTakingPictures)\\n            return;\\n\\n        if (mCameraId < 0)\\n            throw new IllegalStateException(\\\"StillSequenceCamera.start() cannot be called before setup()\\\");\\n\\n        mContinueTakingPictures = true;\\n\\n        if (mAutofocusNeedsTrigger)\\n        {\\n            mCamera.autoFocus(new Camera.AutoFocusCallback() {\\n                @Override\\n                public void onAutoFocus(boolean success, Camera camera) {\\n                    takePicture();\\n                }\\n            });\\n        } else {\\n            takePicture();\\n        }\\n    }\\n\\n    private void stopTakingPictures() {\\n        mContinueTakingPictures = false;\\n    }\\n\\n    private void takePicture() {\\n        mCamera.takePicture(\\n                null,\\n                null,\\n                new PictureCallback() {\\n\\n                    @Override\\n                    public void onPictureTaken(final byte[] jpegData, Camera camera) {\\n                        final Camera.Size size = camera.getParameters().getPictureSize();\\n                        Log.i(TAG, \\\"Captured JPEG \\\" + jpegData.length + \\\" bytes (\\\" + size.width + \\\"x\\\" + size.height + \\\")\\\");\\n\\n                        if (mContinueTakingPictures) {\\n                            mCamera.startPreview();\\n                            takePicture();\\n                        }\\n\\n                        if (mImageListener != null) {\\n                            final BinaryBitmap bitmap = ImageConverter.DecodeJPEG(jpegData, size.width, size.height);\\n                            mCallbackHandler.post(\\n                                    new Runnable() {\\n                                        @Override\\n                                        public void run() {\\n                                            mImageListener.onImageAvailable(new SourceJPEG(jpegData, size.width, size.height), bitmap);\\n                                        }\\n                                    }\\n                            );\\n                        }\\n                    }\\n                }\\n        );\\n    }\\n*/\\n\\n    @Override\\n    public boolean isLockFocus() {\\n        return mLockFocus;\\n    }\\n\\n    @Override\\n    public void setLockFocus(boolean lockFocus) {\\n        this.mLockFocus = lockFocus;\\n    }\\n\\n    /**\\n     * Compares two {@code Size}s based on their areas.\\n     */\\n    static class CompareSizesByArea implements Comparator<Camera.Size> {\\n\\n        @Override\\n        public int compare(Camera.Size lhs, Camera.Size rhs) {\\n            // We cast here to ensure the multiplications won't overflow\\n            return Long.signum((long) lhs.width * lhs.height -\\n                    (long) rhs.width * rhs.height);\\n        }\\n\\n    }\\n}\"}, {\"identifier\":\"StillSequenceCameraOptions\", \"path\":\"still-sequence-camera/src/main/java/dk/schaumburgit/stillsequencecamera/camera/StillSequenceCameraOptions.java\", \"snippet\":\"public class StillSequenceCameraOptions\\n{\\n    public enum Facing\\n    {\\n        Back,\\n        Front,\\n        External\\n    }\\n\\n    public final SurfaceView preview;\\n    public final Facing facing = Facing.Back;\\n    public final int minPixels;// = 1024*768;\\n    public StillSequenceCameraOptions(SurfaceView preview, int minPixels)\\n    {\\n        this.preview = preview;\\n        this.minPixels = minPixels;\\n    }\\n    public StillSequenceCameraOptions(SurfaceView preview)\\n    {\\n        this(preview, 1024*768);\\n    }\\n    public StillSequenceCameraOptions clone(int minPixels)\\n    {\\n        return new StillSequenceCameraOptions(this.preview, minPixels);\\n    }\\n    public StillSequenceCameraOptions clone(SurfaceView preview)\\n    {\\n        return new StillSequenceCameraOptions(preview, this.minPixels);\\n    }\\n}\"}, {\"identifier\":\"StillSequenceCamera2\", \"path\":\"still-sequence-camera/src/main/java/dk/schaumburgit/stillsequencecamera/camera2/StillSequenceCamera2.java\", \"snippet\":\"@TargetApi(Build.VERSION_CODES.LOLLIPOP)\\npublic class StillSequenceCamera2 implements IStillSequenceCamera {\\n    private static final String TAG = \\\"StillSequenceCamera2\\\";\\n    private final Activity mActivity;\\n\\n    private HandlerThread mFocusThread;\\n    private Handler mFocusHandler;\\n    private CameraCaptureSession mCaptureSession;\\n    private final String mCameraId;\\n    private CameraDevice mCameraDevice;\\n    private Semaphore mCameraOpenCloseLock = new Semaphore(1);\\n\\n    private FocusManager mFocusManager;\\n    private CaptureManager mImageCapture;\\n    private PreviewManager mPreview = null;\\n\\n    private final static int CLOSED = 0;\\n    private final static int STOPPED = 1;\\n    private final static int OPENING = 2;\\n    private final static int STARTING = 3;\\n    private final static int CAPTURING = 4;\\n    private final static int STOPPING = 5;\\n    private final static int FOCUSING = 6;\\n    private final static int ERROR = 7;\\n    private int mState = CLOSED;\\n    private boolean mLockFocus = true;\\n\\n    /**\\n    /**\\n     * Creates a #StillSequenceCamera2 with a preview\\n     *\\n     * @param activity The activity associated with the calling app.\\n     * @param camOptions minPixels The preferred minimum number of pixels in the captured images\\n     *                  (i.e. width*height)\\n     */\\n    public StillSequenceCamera2(Activity activity, StillSequenceCamera2Options camOptions)\\n    {\\n        if (activity==null)\\n            throw new NullPointerException(\\\"StillSequenceCamera2 requires an Activity\\\");\\n\\n        //if (camOptions.minPixels < 1024*768)\\n        //    camOptions.minPixels = 1024*768;\\n\\n        this.mActivity = activity;\\n\\n        mFocusManager = new FocusManager(activity);\\n        if (camOptions.preview !=null)\\n            mPreview = new PreviewManager(activity, camOptions.preview);\\n        mImageCapture = new CaptureManager(activity, mPreview, camOptions.minPixels);\\n\\n        mState = CLOSED;\\n\\n        // Choose a camera:\\n        // ================\\n        String selection = null;\\n        try {\\n            CameraManager manager = (CameraManager) mActivity.getSystemService(Context.CAMERA_SERVICE);\\n\\n            for (String cameraId : manager.getCameraIdList()) {\\n                CameraCharacteristics characteristics\\n                        = manager.getCameraCharacteristics(cameraId);\\n\\n                // We don't use a front facing camera in this sample.\\n                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);\\n                if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {\\n                    continue;\\n                }\\n                selection = cameraId;\\n            }\\n        } catch (CameraAccessException e) {\\n            e.printStackTrace();\\n        } catch (NullPointerException e) {\\n            // Currently an NPE is thrown when the Camera2API is used but not supported on the\\n            // device this code runs.\\n            Log.e(TAG, \\\"Camera2 API is not supported\\\");\\n            throw new UnsupportedOperationException(\\\"Camera2 API is not supported\\\");\\n        }\\n        mCameraId = selection;\\n    }\\n\\n    @Override\\n    public double sourceAspectRatio() {\\n        return mImageCapture.sourceAspectRatio(mCameraId);\\n    }\\n\\n    @Override\\n    public List<CaptureFormatInfo> getSupportedImageFormats(double relativeDevicePerformance) {\\n        return mImageCapture.getSupportedImageFormats(mCameraId, relativeDevicePerformance);\\n    }\\n\\n    /**\\n     * Chooses a back-facing camera satisfying the requirements from the constructor (i.e. format\\n     * and resolution).\\n     *\\n     *\\n     * @param imageFormat The preferred format to capture images in\\n     *                                (see #ImageFormat for values)\\n     *\\n     * @throws IllegalStateException if the StillSequenceCamera2 is in any but the CLOSED state.\\n     */\\n    @Override\\n    public void setup(int imageFormat, int imageWidth, int imageHeight)\\n            throws IllegalStateException\\n    {\\n        if (mState != CLOSED)\\n            throw new IllegalStateException(\\\"StillSequenceCamera2.setup() can only be called in the CLOSED state\\\");\\n\\n        try {\\n            mImageCapture.setup(mCameraId, imageFormat, imageWidth, imageHeight);\\n            mFocusManager.setup(mCameraId);\\n            if (mPreview!=null)\\n                mPreview.setup(mCameraId);\\n        } catch (NullPointerException e) {\\n            // Currently an NPE is thrown when the Camera2API is used but not supported on the\\n            // device this code runs.\\n            Log.e(TAG, \\\"Camera2 API is not supported\\\");\\n            throw new UnsupportedOperationException(\\\"Camera2 API is not supported\\\");\\n        }\\n\\n        mState = STOPPED;\\n    }\\n\\n    @Override\\n    public void start(final OnImageAvailableListener listener, final Handler callbackHandler)\\n    {\\n        if (mState == OPENING)\\n            return;\\n\\n        if (mState == STARTING)\\n            return;\\n\\n        if (mState == FOCUSING)\\n            return;\\n\\n        try {\\n            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {\\n                throw new RuntimeException(\\\"Time out waiting to lock camera opening.\\\");\\n            }\\n        } catch (InterruptedException e) {\\n            throw new RuntimeException(\\\"Interrupted while trying to lock camera opening.\\\", e);\\n        }\\n\\n        mState = OPENING;\\n        Log.v(TAG, \\\"start(): state => OPENING\\\");\\n\\n        final Handler _callbackHandler = callbackHandler == null ? new Handler() : callbackHandler;\\n\\n        mFocusThread = new HandlerThread(\\\"CameraBackground\\\");\\n        mFocusThread.start();\\n        mFocusHandler = new Handler(mFocusThread.getLooper());\\n\\n        CameraManager manager = (CameraManager) mActivity.getSystemService(Context.CAMERA_SERVICE);\\n\\n        try {\\n            // Open camera and hook into our camera state machine:\\n            manager.openCamera(\\n                    mCameraId,\\n                    new CameraDevice.StateCallback() {\\n                        @Override\\n                        public void onOpened(CameraDevice cameraDevice) {\\n                            mCameraDevice = cameraDevice;\\n                            try {\\n                                // Here, we create a CameraCaptureSession for camera preview.\\n                                // (this may take several hundred milliseconds)\\n                                mState = STARTING;\\n                                Log.v(TAG, \\\"start(): state => STARTING\\\");\\n                                List<Surface> surfaces;\\n                                if (mPreview != null)\\n                                    surfaces = Arrays.asList(mFocusManager.getSurface(), mImageCapture.getSurface(), mPreview.getSurface());\\n                                else\\n                                    surfaces = Arrays.asList(mFocusManager.getSurface(), mImageCapture.getSurface());\\n                                mCameraDevice.createCaptureSession(\\n                                        //Arrays.asList(mFocusManager.getSurface(), mImageCapture.getSurface()),\\n                                        surfaces,\\n                                        new CameraCaptureSession.StateCallback() {\\n                                            @Override\\n                                            public void onConfigured(CameraCaptureSession cameraCaptureSession) {\\n                                                // Special case: the camera is already closed\\n                                                // - probably due to some system error or\\n                                                // higher priority request:\\n                                                if (null == mCameraDevice) {\\n                                                    mCameraOpenCloseLock.release();\\n                                                    return;\\n                                                }\\n                                                mCaptureSession = cameraCaptureSession;\\n                                                mState = FOCUSING;\\n                                                mCameraOpenCloseLock.release();\\n                                                Log.v(TAG, \\\"start(): state => FOCUSING\\\");\\n                                                mFocusManager.start(\\n                                                        mCaptureSession,\\n                                                        mLockFocus,\\n                                                        mFocusHandler,\\n                                                        new FocusManager.FocusListener() {\\n                                                            @Override\\n                                                            public void focusLocked() {\\n                                                                mState = CAPTURING;\\n                                                                Log.v(TAG, \\\"start(): state => CAPTURING\\\");\\n                                                                if (mLockFocus)\\n                                                                    mFocusManager.stop();\\n                                                                mImageCapture.start(mCaptureSession, _callbackHandler, listener);\\n                                                            }\\n\\n                                                            @Override\\n                                                            public void error(final Exception error) {\\n                                                                mState = ERROR;\\n                                                                Log.v(TAG, \\\"start(): state => ERROR\\\");\\n                                                                mFocusManager.stop();\\n                                                                if (listener != null)\\n                                                                    _callbackHandler.post(\\n                                                                            new Runnable() {\\n                                                                                @Override\\n                                                                                public void run() {\\n                                                                                    listener.onError(error);\\n                                                                                }\\n                                                                            }\\n                                                                    );\\n                                                            }\\n                                                        }\\n                                                );\\n                                            }\\n\\n                                            @Override\\n                                            public void onConfigureFailed(\\n                                                    CameraCaptureSession cameraCaptureSession) {\\n                                                mState = ERROR;\\n                                                Log.v(TAG, \\\"start(): state => ERROR\\\");\\n                                                Log.e(TAG, \\\"Failed\\\");\\n                                                mCameraOpenCloseLock.release();\\n                                                if (listener != null)\\n                                                    mFocusHandler.post(\\n                                                            new Runnable() {\\n                                                                @Override\\n                                                                public void run() {\\n                                                                    listener.onError(null);\\n                                                                }\\n                                                            }\\n                                                    );\\n                                            }\\n                                        },\\n                                        null\\n                                );\\n                            } catch (CameraAccessException e) {\\n                                mState = ERROR;\\n                                mCameraOpenCloseLock.release();\\n                                Log.v(TAG, \\\"start(): state => FAILED\\\");\\n                                e.printStackTrace();\\n                                throw new UnsupportedOperationException(\\\"Camera access required 2: \\\" + e.getMessage());\\n                            }\\n                        }\\n\\n                        @Override\\n                        public void onDisconnected(CameraDevice cameraDevice) {\\n                            //mCameraOpenCloseLock.release();\\n                            cameraDevice.close();\\n                            mCameraDevice = null;\\n                            mState = ERROR;\\n                            mCameraOpenCloseLock.release();\\n                            Log.v(TAG, \\\"start(): state => ERROR\\\");\\n                        }\\n\\n                        @Override\\n                        public void onError(CameraDevice cameraDevice, int error) {\\n                            Log.e(TAG, \\\"CameraDevice.StateCallback.onError(\\\" + error + \\\")\\\");\\n                            //mCameraOpenCloseLock.release();\\n                            cameraDevice.close();\\n                            mCameraDevice = null;\\n                            mState = ERROR;\\n                            mCameraOpenCloseLock.release();\\n                            Log.v(TAG, \\\"start(): state => ERROR\\\");\\n                        }\\n\\n                    },\\n                    mFocusHandler\\n            );\\n        } catch (CameraAccessException e) {\\n            mState = ERROR;\\n            Log.v(TAG, \\\"start(): state => ERROR½\\\");\\n            mCameraOpenCloseLock.release();\\n            e.printStackTrace();\\n            throw new UnsupportedOperationException(\\\"CAMERA access required\\\");\\n        } catch (SecurityException e) {\\n            mState = ERROR;\\n            Log.v(TAG, \\\"start(): state => ERROR\\\");\\n            mCameraOpenCloseLock.release();\\n            e.printStackTrace();\\n            throw new UnsupportedOperationException(\\\"CAMERA permission required\\\");\\n        } catch (Exception e) {\\n            mState = ERROR;\\n            Log.v(TAG, \\\"start(): state => ERROR\\\");\\n            mCameraOpenCloseLock.release();\\n            e.printStackTrace();\\n            throw e;\\n        }\\n    }\\n\\n    @Override\\n    public void stop()\\n    {\\n        if (mState == STOPPED)\\n            return;\\n\\n        if (mState == STOPPING)\\n            return;\\n\\n        if (mState == CLOSED)\\n            return;\\n\\n        try {\\n            if (!mCameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {\\n                throw new RuntimeException(\\\"Time out waiting to lock camera opening.\\\");\\n            }\\n        } catch (InterruptedException e) {\\n            throw new RuntimeException(\\\"Interrupted while trying to lock camera opening.\\\", e);\\n        }\\n\\n        if (mState != CAPTURING && mState != FOCUSING)\\n            throw new IllegalStateException(\\\"stop(): StillSequenceCamera2.stop() can only be called in the STARTED state (\\\" + mState + \\\")\\\");\\n\\n        mState = STOPPING;\\n        Log.v(TAG, \\\"stop(): state => STOPPING\\\");\\n\\n        new Thread(new Runnable() {\\n            public void run() {\\n\\n                try {\\n                    mFocusManager.stop();\\n                    mImageCapture.stop();\\n                    if (mCaptureSession != null) {\\n                        mCaptureSession.close();\\n                        mCaptureSession = null;\\n                    }\\n                    if (null != mCameraDevice) {\\n                        mCameraDevice.close();\\n                        mCameraDevice = null;\\n                    }\\n                } finally {\\n                    //mCameraOpenCloseLock.release();\\n                }\\n\\n                if (mFocusThread != null) {\\n                    try {\\n                        mFocusThread.quitSafely();\\n                        mFocusThread.join();\\n                        mFocusThread = null;\\n                        mFocusHandler = null;\\n                    } catch (Exception e) {\\n                        Log.v(TAG, \\\"stop(): state => A\\\");\\n                        e.printStackTrace();\\n                    }\\n                }\\n                mState = STOPPED;\\n                Log.v(TAG, \\\"stop(): state => STOPPED\\\");\\n                mCameraOpenCloseLock.release();\\n            }\\n        }).start();\\n    }\\n\\n    @Override\\n    public void close() {\\n        if (mState == CLOSED)\\n            return;\\n\\n        if (mState == CAPTURING)\\n            stop();\\n\\n        if (mState != STOPPED)\\n            throw new IllegalStateException(\\\"StillSequenceCamera2.close() can only be called in the STOPPED state\\\");\\n\\n        mFocusManager.close();\\n        mImageCapture.close();\\n\\n        mState = CLOSED;\\n    }\\n\\n    @Override\\n    public boolean isLockFocus() {\\n        return mLockFocus;\\n    }\\n\\n    @Override\\n    public void setLockFocus(boolean lockFocus) {\\n        this.mLockFocus = lockFocus;\\n    }\\n}\"}, {\"identifier\":\"StillSequenceCamera2Options\", \"path\":\"still-sequence-camera/src/main/java/dk/schaumburgit/stillsequencecamera/camera2/StillSequenceCamera2Options.java\", \"snippet\":\"public class StillSequenceCamera2Options\\n{\\n    public enum Facing\\n    {\\n        Back(0),\\n        Front(1),\\n        External(2)\\n        ;\\n        private final int intValue;\\n\\n        private Facing(int intValue) {\\n            this.intValue = intValue;\\n        }\\n    }\\n\\n    public final TextureView preview;\\n    public final Facing facing;\\n    public final int minPixels;\\n    public StillSequenceCamera2Options(TextureView preview, int minPixels, Facing facing)\\n    {\\n        this.preview = preview;\\n        this.minPixels = minPixels;\\n        this.facing = facing;\\n    }\\n    public StillSequenceCamera2Options(TextureView preview)\\n    {\\n        this(preview, 1024*768, Facing.Back);\\n    }\\n    public StillSequenceCamera2Options clone(int minPixels)\\n    {\\n        return new StillSequenceCamera2Options(this.preview, minPixels, this.facing);\\n    }\\n    public StillSequenceCamera2Options clone(TextureView preview)\\n    {\\n        return new StillSequenceCamera2Options(preview, this.minPixels, this.facing);\\n    }\\n    public StillSequenceCamera2Options clone(Facing facing)\\n    {\\n        return new StillSequenceCamera2Options(this.preview, this.minPixels, facing);\\n    }\\n}\"}, {\"identifier\":\"Barcode\", \"path\":\"tracking-barcode-scanner/src/main/java/dk/schaumburgit/trackingbarcodescanner/Barcode.java\", \"snippet\":\"public class Barcode\\n{\\n    public final String contents;\\n    public final BarcodeFormat format;\\n    public final Point[] points;\\n\\n    public Barcode(String contents, BarcodeFormat format, Point[] points) {\\n        this.contents = contents;\\n        this.format = format;\\n        this.points = points;\\n    }\\n}\"}, {\"identifier\":\"ScanOptions\", \"path\":\"tracking-barcode-scanner/src/main/java/dk/schaumburgit/trackingbarcodescanner/ScanOptions.java\", \"snippet\":\"public class ScanOptions\\n{\\n    public final String emptyMarker;\\n    public final String beginsWith;\\n    public ScanOptions()\\n    {\\n        this.emptyMarker = null;\\n        this.beginsWith = null;\\n    }\\n    public ScanOptions(String emptyMarker, String beginsWith)\\n    {\\n        this.emptyMarker = emptyMarker;\\n        this.beginsWith = beginsWith;\\n    }\\n}\"}, {\"identifier\":\"TrackingBarcodeScanner\", \"path\":\"tracking-barcode-scanner/src/main/java/dk/schaumburgit/trackingbarcodescanner/TrackingBarcodeScanner.java\", \"snippet\":\"public class TrackingBarcodeScanner {\\n    private static final String TAG = \\\"BarcodeFinder\\\";\\n    private final Scanner mScanner;\\n    private final Tracker mTracker;\\n    public TrackingBarcodeScanner(ScanOptions scanOptions, TrackingOptions trackingOptions)\\n    {\\n        this.mTracker = new Tracker(trackingOptions, scanOptions);\\n        this.mScanner = new Scanner(scanOptions, trackingOptions);\\n    }\\n\\n    public Barcode findSingle(BinaryBitmap bitmap) {\\n        return mTracker.findSingle(\\n                bitmap,\\n                new Tracker.MyUnaryFunction<BinaryBitmap, Result>() {\\n                    @Override\\n                    public Result apply(BinaryBitmap binaryBitmap) throws NotFoundException {\\n                        return mScanner.doFind(binaryBitmap);\\n                    }\\n                }\\n        );\\n    }\\n\\n    public Barcode[] findMultiple(BinaryBitmap bitmap)\\n    {\\n        return mTracker.findMultiple(\\n                bitmap,\\n                new Tracker.MyUnaryFunction<BinaryBitmap, Result[]>() {\\n                    @Override\\n                    public Result[] apply(BinaryBitmap binaryBitmap) throws NotFoundException {\\n                        return mScanner.doFindMultiple(binaryBitmap);\\n                    }\\n                }\\n        );\\n    }\\n\\n    /**\\n     * Calculate the number of nanoseconds needed by this processor to scan\\n     * a single frame at the given format and size.\\n     * @param imageSize\\n     * @return\\n     */\\n    public double nanosPerFrameScanned(Size imageSize, double relativeDevicePerformance) {\\n        // The number of nanoseconds that this device will use to\\n        // scan the luminized image for barcodes\\n\\n        double nanosPerMegapixelScanned = 10000000; // 100 fps\\n        double deviceSpeed = 1.0;\\n        double megaPixels = imageSize.getHeight() * imageSize.getWidth() / (1024*1024);\\n\\n        return nanosPerMegapixelScanned * megaPixels / relativeDevicePerformance;\\n    }\\n    private double relativeProcessorSpeed()\\n    {\\n        return 1.0;\\n    }\\n}\"}, {\"identifier\":\"TrackingOptions\", \"path\":\"tracking-barcode-scanner/src/main/java/dk/schaumburgit/trackingbarcodescanner/TrackingOptions.java\", \"snippet\":\"public class TrackingOptions\\n{\\n    public final double trackingMargin;\\n    public final int trackingPatience;\\n    public TrackingOptions(double margin, int patience)\\n    {\\n        this.trackingMargin = margin;\\n        this.trackingPatience = patience;\\n    }\\n    public TrackingOptions()\\n    {\\n        this.trackingMargin = 1.0;\\n        this.trackingPatience = 5;\\n    }\\n    public TrackingOptions clone(double margin, int patience)\\n    {\\n        if (margin < 0)\\n            margin = this.trackingMargin;\\n\\n        if (patience < 0)\\n            patience = this.trackingPatience;\\n\\n        return new TrackingOptions(margin, patience);\\n    }\\n}\"}]", "import_statement": "import android.annotation.TargetApi;\nimport android.app.Activity;\nimport android.media.Image;\nimport android.os.Handler;\nimport android.os.HandlerThread;\nimport android.util.Log;\nimport android.util.Pair;\nimport android.util.Size;\nimport android.view.SurfaceView;\nimport com.google.zxing.BinaryBitmap;\nimport java.security.InvalidParameterException;\nimport dk.schaumburgit.fastbarcodescanner.callbackmanagers.CallBackOptions;\nimport dk.schaumburgit.fastbarcodescanner.callbackmanagers.MultiCallbackManager;\nimport dk.schaumburgit.fastbarcodescanner.callbackmanagers.SingleCallbackManager;\nimport dk.schaumburgit.stillsequencecamera.ISource;\nimport dk.schaumburgit.stillsequencecamera.IStillSequenceCamera;\nimport dk.schaumburgit.stillsequencecamera.camera.StillSequenceCamera;\nimport dk.schaumburgit.stillsequencecamera.camera.StillSequenceCameraOptions;\nimport dk.schaumburgit.stillsequencecamera.camera2.StillSequenceCamera2;\nimport dk.schaumburgit.stillsequencecamera.camera2.StillSequenceCamera2Options;\nimport dk.schaumburgit.trackingbarcodescanner.Barcode;\nimport dk.schaumburgit.trackingbarcodescanner.ScanOptions;\nimport dk.schaumburgit.trackingbarcodescanner.TrackingBarcodeScanner;\nimport dk.schaumburgit.trackingbarcodescanner.TrackingOptions;", "code": "package dk.schaumburgit.fastbarcodescanner;\n/*\n * Copyright 2015 Schaumburg IT\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * The BarcodeScanner captures images from your front-facing camera at the fastest\n * possible rate, scans them for barcodes and reports any changes to the caller\n * via a listener callback.\n *\n * The image capture is done unobtrusively without any visible UI, using a background thread.\n *\n * For newer Android versions (Lollipop and later), the new, faster Camera2 API is supported.\n * For older versions, BarcodeScanner falls back to using the older, slower camera API.\n *\n * When the Camera2 API is available, the BarcodeScanner can be created with a TextureView\n * if on-screen preview is desired, or without for headless operation.\n *\n * For older Android versions, the BarcodeScanner *must* be created with a SurfaceView,\n * and the SurfaceView *must* be visible on-screen. Setting the SurfaceView to 1x1 pixel\n * will however make it effectively invisible.\n *\n * Regardless of Android version, the FastbarcodeScanner *must* be supplied with a reference\n * to the current Activity (used for accessing e.g. the camera, and other system resources).\n *\n */\nclass BarcodeScanner implements IBarcodeScanner {\n\n    /**\n     * Tag for the {@link Log}.\n     */\n    private static final String TAG = \"BarcodeScanner\";\n\n    private final Activity mActivity;\n    private HandlerThread mProcessingThread;\n    private Handler mProcessingHandler;\n", "next_line": "    private final IStillSequenceCamera mImageSource;", "gold_snippet_index": 4, "id": 19, "__internal_uuid__": "e888248e-4e74-4230-9ae8-d2316a8e47fb"}