{"content":"Write a python function to remove first and last occurrence of a given character from the string.","id":11,"labels":{"challenge_test_list":["assert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"","assert remove_Occ(\"\",\"l\") == \"\""],"test_setup_code":""},"canonical_solution":"def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ","test_list":["assert remove_Occ(\"hello\",\"l\") == \"heo\"","assert remove_Occ(\"abcda\",\"a\") == \"bcd\"","assert remove_Occ(\"PHP\",\"P\") == \"H\""]}
{"content":"Write a function to sort a given matrix in ascending order according to the sum of its rows.","id":12,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result","test_list":["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]","assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]","assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"]}
{"content":"Write a function to count the most common words in a dictionary.","id":13,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n","test_list":["assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]","assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]","assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"]}
{"content":"Write a python function to find the volume of a triangular prism.","id":14,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def find_Volume(l,b,h) : \r\n    return ((l * b * h) \/ 2) ","test_list":["assert find_Volume(10,8,6) == 240","assert find_Volume(3,2,2) == 6","assert find_Volume(1,2,1) == 1"]}
{"content":"Write a function to split a string at lowercase letters.","id":15,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))","test_list":["assert split_lowerstring(\"AbCd\")==['bC','d']","assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']","assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"]}
{"content":"Write a function to find sequences of lowercase letters joined with an underscore.","id":16,"labels":{"challenge_test_list":["assert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')"],"test_setup_code":""},"canonical_solution":"import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')","test_list":["assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')","assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')","assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"]}
{"content":"Write a function to find the perimeter of a square.","id":17,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter","test_list":["assert square_perimeter(10)==40","assert square_perimeter(5)==20","assert square_perimeter(4)==16"]}
{"content":"Write a function to remove characters from the first string which are present in the second string.","id":18,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ","test_list":["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'","assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'","assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "]}
{"content":"Write a function to find whether a given array of integers contains any duplicate element.","id":19,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ","test_list":["assert test_duplicate(([1,2,3,4,5]))==False","assert test_duplicate(([1,2,3,4, 4]))==True","assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"]}
{"content":"Write a function to check if the given number is woodball or not.","id":20,"labels":{"challenge_test_list":["assert is_woodall(32212254719) == True","assert is_woodall(32212254718) == False","assert is_woodall(159) == True"],"test_setup_code":""},"canonical_solution":"def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x\/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False","test_list":["assert is_woodall(383) == True","assert is_woodall(254) == False","assert is_woodall(200) == False"]}
{"content":"Write a function to find m number of multiples of n.","id":21,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)","test_list":["assert multiples_of_num(4,3)== [3,6,9,12]","assert multiples_of_num(2,5)== [5,10]","assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"]}
{"content":"Write a function to find the first duplicate element in a given array of integers.","id":22,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate","test_list":["assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4","assert find_first_duplicate([1, 2, 3, 4])==-1","assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"]}
{"content":"Write a python function to find the maximum sum of elements of list in a list of lists.","id":23,"labels":{"challenge_test_list":["assert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2"],"test_setup_code":""},"canonical_solution":"def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ","test_list":["assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33","assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6","assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"]}
{"content":"Write a function to convert the given binary number to its decimal equivalent.","id":24,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary\/\/10\r\n        i += 1\r\n    return (decimal)","test_list":["assert binary_to_decimal(100) == 4","assert binary_to_decimal(1011) == 11","assert binary_to_decimal(1101101) == 109"]}
{"content":"Write a python function to find the product of non-repeated elements in a given array.","id":25,"labels":{"challenge_test_list":["assert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520"],"test_setup_code":""},"canonical_solution":"def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ","test_list":["assert find_Product([1,1,2,3],4) == 6","assert find_Product([1,2,3,1,1],5) == 6","assert find_Product([1,1,4,5,6],5) == 120"]}
{"content":"Write a function to check if the given tuple list has all k elements.","id":26,"labels":{"challenge_test_list":["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False"],"test_setup_code":""},"canonical_solution":"def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ","test_list":["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True","assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True","assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"]}
{"content":"Write a python function to remove all digits from a list of strings.","id":27,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list","test_list":["assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']","assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']","assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"]}
{"content":"Write a python function to find binomial co-efficient.","id":28,"labels":{"challenge_test_list":["assert binomial_Coeff(14,6) == 3003"],"test_setup_code":""},"canonical_solution":"def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","test_list":["assert binomial_Coeff(5,2) == 10","assert binomial_Coeff(4,3) == 4","assert binomial_Coeff(3,2) == 3"]}
{"content":"Write a python function to find the element occurring odd number of times.","id":29,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1","test_list":["assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1","assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3","assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"]}
{"content":"Write a python function to count all the substrings starting and ending with same characters.","id":30,"labels":{"challenge_test_list":[],"test_setup_code":""},"canonical_solution":"def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ","test_list":["assert count_Substring_With_Equal_Ends(\"abc\") == 3","assert count_Substring_With_Equal_Ends(\"abcda\") == 6","assert count_Substring_With_Equal_Ends(\"ab\") == 2"]}
